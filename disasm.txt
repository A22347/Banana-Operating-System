
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 83 02 00       	call   c0028348 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 9c 8f 02 c0       	mov    ebx,0xc0028f9c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a8 8f 02 c0    	cmp    ebx,0xc0028fa8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 ce 02 c0       	mov    eax,0xc002ce18
c0000049:	3d 18 ce 02 c0       	cmp    eax,0xc002ce18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 ce 02 c0       	push   0xc002ce18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 ce 02 c0       	mov    eax,0xc002ce18
c0000075:	2d 18 ce 02 c0       	sub    eax,0xc002ce18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 ce 02 c0       	push   0xc002ce18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d448,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b0 8f 02 c0       	mov    ebx,0xc0028fb0
c00000bb:	81 eb ac 8f 02 c0    	sub    ebx,0xc0028fac
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ac 8f 02 c0       	mov    esi,0xc0028fac
c00000ca:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d4 02 c0       	mov    ds:0xc002d44c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 ce 02 c0       	push   0xc002ce18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d448,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d4 02 c0       	push   0xc002d450
c000012c:	68 18 ce 02 c0       	push   0xc002ce18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 87 ce 01 00       	call   c001d22a <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 52 20 01 00       	call   c001240d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 65 ce 01 00       	call   c001d22a <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 0d d3 01 00       	call   c001d6f1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 23 d9 01 00       	call   c001dd10 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 d8 02 c0 	lgdtd  ds:0xc002d890
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 8d 3d 01 00       	call   c001436f <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 d4 02 c0       	mov    ds:0xc002d468,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 d4 02 c0    	mov    DWORD PTR ds:0xc002d468,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d468
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 c0 8f 02 c0 02 	test   BYTE PTR [edx-0x3ffd7040],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 c0 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd7040],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 c0 8f 02 c0 08 	test   BYTE PTR [edx-0x3ffd7040],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 c0 8f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7040],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 c0 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd7040],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d480
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 d4 02 c0    	mov    DWORD PTR ds:0xc002d480,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 d4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2b7c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b7c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 d4 02 c0    	mov    DWORD PTR ds:0xc002d480,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4bc
c0000e38:	c7 42 0c b4 d4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d4b4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 d4 02 c0 02 	test   BYTE PTR ds:0xc002d480,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d480
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b7c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 d4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b7c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 d4 02 c0 	lea    edx,[eax*8-0x3ffd2b4c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4c0
c00011ba:	81 fb b4 d4 02 c0    	cmp    ebx,0xc002d4b4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 d4 02 c0       	cmp    eax,0xc002d4b4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 d4 02 c0    	cmp    DWORD PTR ds:0xc002d4b0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc d4 02 c0       	mov    ds:0xc002d4bc,eax
c00011f6:	a3 c0 d4 02 c0       	mov    ds:0xc002d4c0,eax
c00011fb:	a3 b0 d4 02 c0       	mov    ds:0xc002d4b0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 d4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d4b4
c0001209:	c7 40 0c b4 d4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d4b4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 d4 02 c0       	mov    ds:0xc002d4c0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 d4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d4b4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 d4 02 c0 	lea    ebp,[edx*4-0x3ffd2b88]
c000125a:	8b 14 95 80 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b80]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 d4 02 c0 	lea    ecx,[edx*4-0x3ffd2b80]
c0001275:	8b 14 95 80 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b80]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 d7 02 c0 	or     DWORD PTR [edi*4-0x3ffd284c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 d4 02 c0 	lea    eax,[eax*8-0x3ffd2b4c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,ecx
c000132f:	89 0d c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,ecx
c0001335:	c7 41 08 b4 d4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d4b4
c000133c:	c7 41 0c b4 d4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d4b4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac d4 02 c0 	lea    edx,[ecx*8-0x3ffd2b54]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 d7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd284c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 d7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd284c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac d4 02 c0 	lea    edx,[eax*4-0x3ffd2b54]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 d7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd284c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,edi
c0001402:	89 3d c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,edi
c0001408:	c7 47 08 b4 d4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d4b4
c000140f:	c7 47 0c b4 d4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d4b4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7d4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc d7 02 c0    	push   DWORD PTR ds:0xc002d7dc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc d7 02 c0       	mov    eax,ds:0xc002d7dc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d4ac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b7c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 d4 02 c0       	mov    eax,0xc002d4b4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac d7 02 c0       	cmp    eax,0xc002d7ac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 d7 02 c0       	mov    eax,ds:0xc002d7e8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7d0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7e4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7f4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 c4 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6f3c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 d4 02 c0       	mov    ds:0xc002d480,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc d7 02 c0    	mov    DWORD PTR ds:0xc002d7cc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7d4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 40 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf0c0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 4e eb 01 00       	jmp    c0020740 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 40 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf0c0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 7f eb 01 00       	jmp    c0020787 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 40 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf0c0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 a7 eb 01 00       	jmp    c00207ce <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 47 02 00       	call   c00266a4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 e0 91 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6e20]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 e0 91 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6e20]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 54 bd 02 c0       	mov    edx,0xc002bd54
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 0c 92 02 c0       	mov    edx,0xc002920c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba f0 91 02 c0       	mov    edx,0xc00291f0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd27e0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 d8 02 c0    	mov    ax,ds:0xc002d800
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 d8 02 c0    	mov    ds:0xc002d800,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 35 02 00       	call   c00266a4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 12 92 02 c0       	mov    eax,0xc0029212
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 60 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6ea0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 1b 92 02 c0       	mov    eax,0xc002921b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 e0 91 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6e20]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 1f 02 00       	call   c00266a4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba f0 91 02 c0       	mov    edx,0xc00291f0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba e0 90 02 c0       	mov    edx,0xc00290e0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd27e0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd27e0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 09 02 00       	call   c00266a4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 09 02 00       	call   c00266a4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 37 91 02 c0       	mov    eax,0xc0029137
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 30 91 02 c0       	mov    eax,0xc0029130
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 20 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd27e0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 20 91 02 c0       	mov    esi,0xc0029120
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 52 f0 01 00       	call   c00266a4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 00 92 02 c0       	mov    edx,0xc0029200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 10 91 02 c0       	mov    edx,0xc0029110
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 22 92 02 c0       	mov    edx,0xc0029222
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 2e 92 02 c0       	mov    edx,0xc002922e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 42 92 02 c0       	mov    edx,0xc0029242
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 60 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029560
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 60 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029560
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 60 93 02 c0       	mov    eax,0xc0029360
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 a0 92 02 c0       	mov    eax,0xc00292a0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 a6 f9 01 00       	call   c0028177 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 69 f9 01 00       	call   c0028159 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 3d f9 01 00       	call   c0028177 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 f0 ef 01 00       	call   c002787c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 72 fa 01 00       	call   c0028310 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 b7 f8 01 00       	call   c0028177 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 f9 f7 01 00       	call   c0028177 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 c6 f7 01 00       	call   c0028159 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 b3 f6 01 00       	call   c0028177 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 7b f6 01 00       	call   c0028159 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 60 96 02 c0       	mov    eax,0xc0029660
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 87 f4 01 00       	call   c0028177 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 4c f4 01 00       	call   c0028159 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 c0 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6540]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 5c f1 01 00       	call   c0027f0b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 da ea 01 00       	call   c00278a8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 96 f3 01 00       	call   c002817b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 84 f4 01 00       	call   c002829f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 6e ea 01 00       	call   c00278a8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 19 f3 01 00       	call   c0028175 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 fa f2 01 00       	call   c0028179 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 90 f4 01 00       	call   c0028330 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 3a f0 01 00       	call   c0027f0b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 b8 e9 01 00       	call   c00278a8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 74 f2 01 00       	call   c002817b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 62 f3 01 00       	call   c002829f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 4c e9 01 00       	call   c00278a8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 f7 f1 01 00       	call   c0028175 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 d7 f1 01 00       	call   c0028179 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 6c f3 01 00       	call   c0028330 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 12 f1 01 00       	call   c0028177 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 d0 f0 01 00       	call   c0028159 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 b8 f0 01 00       	call   c0028177 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 2a ee 01 00       	call   c0027f0b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 2c e1 01 00       	call   c002722b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 8f e7 01 00       	call   c00278a8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 e1 ed 01 00       	call   c0027f0b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 e7 e0 01 00       	call   c002722b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 b6 ed 01 00       	call   c0027f0b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 06 f0 01 00       	call   c0028175 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 e3 e6 01 00       	call   c002787c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 65 f1 01 00       	call   c0028310 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 8c ef 01 00       	call   c0028159 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 87 e6 01 00       	call   c002787c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 05 ed 01 00       	call   c0027f0b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 88 e6 01 00       	call   c00278a8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 da ec 01 00       	call   c0027f0b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 41 e9 01 00       	call   c0027b8c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 c0 df 01 00       	call   c002722b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 20 d9 01 00       	call   c0026bc0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 f7 ef 01 00       	call   c002829f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 e0 e5 01 00       	call   c00278a8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 c7 ef 01 00       	call   c002829f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 39 df 01 00       	call   c002722b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 72 ee 01 00       	call   c002817b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 5a e8 01 00       	call   c0027b8c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 e0 de 01 00       	call   c002722b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 ce ef 01 00       	call   c0028330 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 a0 eb 01 00       	call   c0027f0b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 f7 e4 01 00       	call   c002787c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 d6 ed 01 00       	call   c0028177 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 6f de 01 00       	call   c002722b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 9b e4 01 00       	call   c002787c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 3d ef 01 00       	call   c0028330 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ee ea 01 00       	call   c0027f0b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 6b e4 01 00       	call   c00278a8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 be ea 01 00       	call   c0027f0b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 c4 dd 01 00       	call   c002722b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 94 ea 01 00       	call   c0027f0b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 e6 ec 01 00       	call   c0028177 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 bd e3 01 00       	call   c002787c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 3f ee 01 00       	call   c0028310 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 66 ec 01 00       	call   c0028159 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 60 e3 01 00       	call   c002787c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 de e9 01 00       	call   c0027f0b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 61 e3 01 00       	call   c00278a8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 b3 e9 01 00       	call   c0027f0b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 1a e6 01 00       	call   c0027b8c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 99 dc 01 00       	call   c002722b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 e9 d5 01 00       	call   c0026bc0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 c0 ec 01 00       	call   c002829f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 a9 e2 01 00       	call   c00278a8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 90 ec 01 00       	call   c002829f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 02 dc 01 00       	call   c002722b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 3b eb 01 00       	call   c002817b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 22 e5 01 00       	call   c0027b8c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 a1 db 01 00       	call   c002722b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 8f ec 01 00       	call   c0028330 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 61 e8 01 00       	call   c0027f0b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 b8 e1 01 00       	call   c002787c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 97 ea 01 00       	call   c0028177 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 30 db 01 00       	call   c002722b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 5c e1 01 00       	call   c002787c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 d1 e7 01 00       	call   c0027f0b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 d7 da 01 00       	call   c002722b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 20 9b 02 c0       	mov    eax,0xc0029b20
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 34 9b 02 c0       	mov    eax,0xc0029b34
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 4c e6 01 00       	call   c0027f0b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ca df 01 00       	call   c00278a8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 5c d2 01 00       	call   c0026bc0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 33 e9 01 00       	call   c002829f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 1c df 01 00       	call   c00278a8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ff e8 01 00       	call   c002829f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 71 d8 01 00       	call   c002722b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 d1 e8 01 00       	call   c002829f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 c0 de 01 00       	call   c00278a8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 29 d8 01 00       	call   c002722b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 4a d1 01 00       	call   c0026bc0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 21 e8 01 00       	call   c002829f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 0a de 01 00       	call   c00278a8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ed e7 01 00       	call   c002829f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 5f d7 01 00       	call   c002722b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 bf e7 01 00       	call   c002829f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ae dd 01 00       	call   c00278a8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 17 d7 01 00       	call   c002722b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 f5 d6 01 00       	call   c002722b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 d1 cf 01 00       	call   c0026bc0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 a8 e6 01 00       	call   c002829f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 91 dc 01 00       	call   c00278a8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 74 e6 01 00       	call   c002829f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 e6 d5 01 00       	call   c002722b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 46 e6 01 00       	call   c002829f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 2f dc 01 00       	call   c00278a8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 98 d5 01 00       	call   c002722b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 f8 e5 01 00       	call   c002829f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 e1 db 01 00       	call   c00278a8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 4a d5 01 00       	call   c002722b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 5f ce 01 00       	call   c0026bc0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 36 e5 01 00       	call   c002829f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 1f db 01 00       	call   c00278a8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 06 e5 01 00       	call   c002829f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 78 d4 01 00       	call   c002722b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 d8 e4 01 00       	call   c002829f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 c1 da 01 00       	call   c00278a8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 2a d4 01 00       	call   c002722b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 8a e4 01 00       	call   c002829f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 73 da 01 00       	call   c00278a8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 dc d3 01 00       	call   c002722b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 b0 d3 01 00       	call   c002722b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 0d da 01 00       	call   c00278a8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 c9 e2 01 00       	call   c002817b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 58 d3 01 00       	call   c002722b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 b5 d9 01 00       	call   c00278a8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 71 e2 01 00       	call   c002817b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 eb cb 01 00       	call   c0026bc0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c2 e2 01 00       	call   c002829f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 ab d8 01 00       	call   c00278a8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 8e e2 01 00       	call   c002829f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 00 d2 01 00       	call   c002722b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 60 e2 01 00       	call   c002829f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 49 d8 01 00       	call   c00278a8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 b2 d1 01 00       	call   c002722b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 12 e2 01 00       	call   c002829f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 fb d7 01 00       	call   c00278a8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 64 d1 01 00       	call   c002722b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 c4 e1 01 00       	call   c002829f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ad d7 01 00       	call   c00278a8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 16 d1 01 00       	call   c002722b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 76 e1 01 00       	call   c002829f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 5f d7 01 00       	call   c00278a8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 c8 d0 01 00       	call   c002722b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ca c9 01 00       	call   c0026bc0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 a1 e0 01 00       	call   c002829f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 8a d6 01 00       	call   c00278a8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 71 e0 01 00       	call   c002829f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 e3 cf 01 00       	call   c002722b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 43 e0 01 00       	call   c002829f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 2c d6 01 00       	call   c00278a8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 95 cf 01 00       	call   c002722b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 f5 df 01 00       	call   c002829f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 de d5 01 00       	call   c00278a8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 47 cf 01 00       	call   c002722b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 a7 df 01 00       	call   c002829f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 90 d5 01 00       	call   c00278a8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 f9 ce 01 00       	call   c002722b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 59 df 01 00       	call   c002829f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 42 d5 01 00       	call   c00278a8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 ab ce 01 00       	call   c002722b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 7f ce 01 00       	call   c002722b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 dc d4 01 00       	call   c00278a8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 98 dd 01 00       	call   c002817b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 27 ce 01 00       	call   c002722b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 84 d4 01 00       	call   c00278a8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 40 dd 01 00       	call   c002817b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 ce cd 01 00       	call   c002722b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 2b d4 01 00       	call   c00278a8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 e7 dc 01 00       	call   c002817b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 75 cd 01 00       	call   c002722b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 d2 d3 01 00       	call   c00278a8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 8e dc 01 00       	call   c002817b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ec c5 01 00       	call   c0026bc0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 c3 dc 01 00       	call   c002829f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ac d2 01 00       	call   c00278a8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 8f dc 01 00       	call   c002829f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 01 cc 01 00       	call   c002722b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 61 dc 01 00       	call   c002829f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 4a d2 01 00       	call   c00278a8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 b3 cb 01 00       	call   c002722b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 13 dc 01 00       	call   c002829f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 fc d1 01 00       	call   c00278a8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 65 cb 01 00       	call   c002722b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 c5 db 01 00       	call   c002829f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ae d1 01 00       	call   c00278a8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 17 cb 01 00       	call   c002722b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 77 db 01 00       	call   c002829f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 60 d1 01 00       	call   c00278a8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 c9 ca 01 00       	call   c002722b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 29 db 01 00       	call   c002829f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 12 d1 01 00       	call   c00278a8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 78 ca 01 00       	call   c002722b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 d8 da 01 00       	call   c002829f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 c1 d0 01 00       	call   c00278a8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 2a ca 01 00       	call   c002722b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 24 c3 01 00       	call   c0026bc0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 fb d9 01 00       	call   c002829f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 e4 cf 01 00       	call   c00278a8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 c4 d9 01 00       	call   c002829f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 36 c9 01 00       	call   c002722b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 96 d9 01 00       	call   c002829f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 7f cf 01 00       	call   c00278a8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 e8 c8 01 00       	call   c002722b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 48 d9 01 00       	call   c002829f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 31 cf 01 00       	call   c00278a8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 9a c8 01 00       	call   c002722b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 fa d8 01 00       	call   c002829f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 e3 ce 01 00       	call   c00278a8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 4c c8 01 00       	call   c002722b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ac d8 01 00       	call   c002829f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 95 ce 01 00       	call   c00278a8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 fe c7 01 00       	call   c002722b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 5e d8 01 00       	call   c002829f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 47 ce 01 00       	call   c00278a8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ad c7 01 00       	call   c002722b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 0d d8 01 00       	call   c002829f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 f6 cd 01 00       	call   c00278a8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 65 c7 01 00       	call   c002722b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 3e c7 01 00       	call   c002722b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 9c cd 01 00       	call   c00278a8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 58 d6 01 00       	call   c002817b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 e7 c6 01 00       	call   c002722b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 45 cd 01 00       	call   c00278a8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 01 d6 01 00       	call   c002817b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 8f c6 01 00       	call   c002722b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ed cc 01 00       	call   c00278a8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 a9 d5 01 00       	call   c002817b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 37 c6 01 00       	call   c002722b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 95 cc 01 00       	call   c00278a8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 51 d5 01 00       	call   c002817b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 df c5 01 00       	call   c002722b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 3d cc 01 00       	call   c00278a8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 f9 d4 01 00       	call   c002817b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 8d c5 01 00       	call   c002722b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 eb cb 01 00       	call   c00278a8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 a7 d4 01 00       	call   c002817b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 bb bd 01 00       	call   c0026bc0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 92 d4 01 00       	call   c002829f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 7b ca 01 00       	call   c00278a8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 62 d4 01 00       	call   c002829f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 d4 c3 01 00       	call   c002722b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 64 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd649c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 08 d4 01 00       	call   c002829f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 f1 c9 01 00       	call   c00278a8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 5c c3 01 00       	call   c002722b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 a9 d3 01 00       	call   c002829f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 92 c9 01 00       	call   c00278a8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 fd c2 01 00       	call   c002722b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 4a d3 01 00       	call   c002829f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 33 c9 01 00       	call   c00278a8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 9e c2 01 00       	call   c002722b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 eb d2 01 00       	call   c002829f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 d4 c8 01 00       	call   c00278a8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 3f c2 01 00       	call   c002722b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 8c d2 01 00       	call   c002829f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 75 c8 01 00       	call   c00278a8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 e0 c1 01 00       	call   c002722b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 2d d2 01 00       	call   c002829f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 16 c8 01 00       	call   c00278a8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 81 c1 01 00       	call   c002722b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 ce d1 01 00       	call   c002829f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 b7 c7 01 00       	call   c00278a8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 22 c1 01 00       	call   c002722b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 6f d1 01 00       	call   c002829f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 58 c7 01 00       	call   c00278a8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 c3 c0 01 00       	call   c002722b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 cd b9 01 00       	call   c0026bc0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 a4 d0 01 00       	call   c002829f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 8d c6 01 00       	call   c00278a8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 74 d0 01 00       	call   c002829f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 e6 bf 01 00       	call   c002722b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 80 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6480]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 19 d0 01 00       	call   c002829f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 02 c6 01 00       	call   c00278a8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 6d bf 01 00       	call   c002722b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 b9 cf 01 00       	call   c002829f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 a2 c5 01 00       	call   c00278a8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 0d bf 01 00       	call   c002722b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 59 cf 01 00       	call   c002829f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 42 c5 01 00       	call   c00278a8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ad be 01 00       	call   c002722b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 f9 ce 01 00       	call   c002829f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 e2 c4 01 00       	call   c00278a8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 4d be 01 00       	call   c002722b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 99 ce 01 00       	call   c002829f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 82 c4 01 00       	call   c00278a8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ed bd 01 00       	call   c002722b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 39 ce 01 00       	call   c002829f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 22 c4 01 00       	call   c00278a8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 8d bd 01 00       	call   c002722b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 d9 cd 01 00       	call   c002829f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 c2 c3 01 00       	call   c00278a8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 2d bd 01 00       	call   c002722b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 79 cd 01 00       	call   c002829f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 62 c3 01 00       	call   c00278a8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 cd bc 01 00       	call   c002722b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 9c 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6464]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 72 bc 01 00       	call   c002722b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 cf c2 01 00       	call   c00278a8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 8b cb 01 00       	call   c002817b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 15 bc 01 00       	call   c002722b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 72 c2 01 00       	call   c00278a8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 2e cb 01 00       	call   c002817b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 b8 bb 01 00       	call   c002722b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 15 c2 01 00       	call   c00278a8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 d1 ca 01 00       	call   c002817b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 5b bb 01 00       	call   c002722b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 b8 c1 01 00       	call   c00278a8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 74 ca 01 00       	call   c002817b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 fe ba 01 00       	call   c002722b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 5b c1 01 00       	call   c00278a8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 17 ca 01 00       	call   c002817b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 a1 ba 01 00       	call   c002722b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 fe c0 01 00       	call   c00278a8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ba c9 01 00       	call   c002817b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 44 ba 01 00       	call   c002722b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 a1 c0 01 00       	call   c00278a8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 5d c9 01 00       	call   c002817b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 e7 b9 01 00       	call   c002722b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 44 c0 01 00       	call   c00278a8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 00 c9 01 00       	call   c002817b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 fc bf 01 00       	call   c00278a8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 74 ca 01 00       	jmp    c0028330 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 de c6 01 00       	call   c0028177 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9c c6 01 00       	call   c0028159 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 33 c4 01 00       	call   c0027f0b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 34 b7 01 00       	call   c002722b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 03 c4 01 00       	call   c0027f0b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 6a c0 01 00       	call   c0027b8c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 09 c6 01 00       	call   c0028159 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 0c c6 01 00       	call   c0028177 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 df c5 01 00       	call   c0028177 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 d8 bf 01 00       	call   c0027b8c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 62 c7 01 00       	call   c0028330 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 3d c7 01 00       	call   c0028330 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 0f c3 01 00       	call   c0027f0b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 66 bc 01 00       	call   c002787c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 45 c5 01 00       	call   c0028177 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 de b5 01 00       	call   c002722b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 02 bc 01 00       	call   c002787c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 a4 c6 01 00       	call   c0028330 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 dc be 01 00       	call   c0027b8c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 59 b5 01 00       	call   c002722b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 85 c1 01 00       	call   c0027f0b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 85 b4 01 00       	call   c002722b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 65 b4 01 00       	call   c002722b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 35 c1 01 00       	call   c0027f0b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 85 c3 01 00       	call   c0028175 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 64 ba 01 00       	call   c002787c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 e6 c4 01 00       	call   c0028310 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 0d c3 01 00       	call   c0028159 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 0b ba 01 00       	call   c002787c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 89 c0 01 00       	call   c0027f0b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 0c ba 01 00       	call   c00278a8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 5e c0 01 00       	call   c0027f0b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 c5 bc 01 00       	call   c0027b8c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 44 b3 01 00       	call   c002722b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 0e c0 01 00       	call   c0027f0b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 5a c2 01 00       	call   c0028177 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 4f b9 01 00       	call   c00278a8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 21 b9 01 00       	call   c00278a8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 5a bf 01 00       	call   c0027f0b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 be bb 01 00       	call   c0027b8c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 86 bb 01 00       	call   c0027b8c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 05 b2 01 00       	call   c002722b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 f2 c2 01 00       	call   c0028330 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 c4 be 01 00       	call   c0027f0b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 1b b8 01 00       	call   c002787c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 fa c0 01 00       	call   c0028177 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 92 b1 01 00       	call   c002722b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 b6 b7 01 00       	call   c002787c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 58 c2 01 00       	call   c0028330 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 19 c0 01 00       	call   c0028177 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 d7 bf 01 00       	call   c0028159 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 6e bd 01 00       	call   c0027f0b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 6f b0 01 00       	call   c002722b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 3e bd 01 00       	call   c0027f0b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 a5 b9 01 00       	call   c0027b8c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 44 bf 01 00       	call   c0028159 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 47 bf 01 00       	call   c0028177 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 1a bf 01 00       	call   c0028177 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 13 b9 01 00       	call   c0027b8c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 9d c0 01 00       	call   c0028330 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 78 c0 01 00       	call   c0028330 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 4a bc 01 00       	call   c0027f0b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 a1 b5 01 00       	call   c002787c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 80 be 01 00       	call   c0028177 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 19 af 01 00       	call   c002722b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 3d b5 01 00       	call   c002787c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 df bf 01 00       	call   c0028330 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 17 b8 01 00       	call   c0027b8c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 94 ae 01 00       	call   c002722b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 bf ba 01 00       	call   c0027f0b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 bf ad 01 00       	call   c002722b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 9f ad 01 00       	call   c002722b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 6f ba 01 00       	call   c0027f0b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 bf bc 01 00       	call   c0028175 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 9d b3 01 00       	call   c002787c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 1f be 01 00       	call   c0028310 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 46 bc 01 00       	call   c0028159 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 43 b3 01 00       	call   c002787c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 c1 b9 01 00       	call   c0027f0b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 44 b3 01 00       	call   c00278a8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 96 b9 01 00       	call   c0027f0b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 fd b5 01 00       	call   c0027b8c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 7c ac 01 00       	call   c002722b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 46 b9 01 00       	call   c0027f0b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 92 bb 01 00       	call   c0028177 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 87 b2 01 00       	call   c00278a8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 59 b2 01 00       	call   c00278a8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 90 b8 01 00       	call   c0027f0b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 f4 b4 01 00       	call   c0027b8c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 c1 b4 01 00       	call   c0027b8c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 40 ab 01 00       	call   c002722b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 2d bc 01 00       	call   c0028330 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ff b7 01 00       	call   c0027f0b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 56 b1 01 00       	call   c002787c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 35 ba 01 00       	call   c0028177 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 cd aa 01 00       	call   c002722b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 f1 b0 01 00       	call   c002787c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 93 bb 01 00       	call   c0028330 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 54 b9 01 00       	call   c0028177 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 12 b9 01 00       	call   c0028159 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 a9 b6 01 00       	call   c0027f0b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 aa a9 01 00       	call   c002722b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 79 b6 01 00       	call   c0027f0b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 e0 b2 01 00       	call   c0027b8c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 7f b8 01 00       	call   c0028159 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 82 b8 01 00       	call   c0028177 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 55 b8 01 00       	call   c0028177 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 4e b2 01 00       	call   c0027b8c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 d8 b9 01 00       	call   c0028330 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 b3 b9 01 00       	call   c0028330 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 85 b5 01 00       	call   c0027f0b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 dc ae 01 00       	call   c002787c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 bb b7 01 00       	call   c0028177 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 54 a8 01 00       	call   c002722b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 78 ae 01 00       	call   c002787c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 1a b9 01 00       	call   c0028330 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 52 b1 01 00       	call   c0027b8c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 cf a7 01 00       	call   c002722b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 fa b3 01 00       	call   c0027f0b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 fa a6 01 00       	call   c002722b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 da a6 01 00       	call   c002722b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 aa b3 01 00       	call   c0027f0b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 fa b5 01 00       	call   c0028175 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 d8 ac 01 00       	call   c002787c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 5a b7 01 00       	call   c0028310 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 81 b5 01 00       	call   c0028159 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 7e ac 01 00       	call   c002787c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 fc b2 01 00       	call   c0027f0b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 7f ac 01 00       	call   c00278a8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 d1 b2 01 00       	call   c0027f0b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 38 af 01 00       	call   c0027b8c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 b7 a5 01 00       	call   c002722b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 81 b2 01 00       	call   c0027f0b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 cd b4 01 00       	call   c0028177 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 c2 ab 01 00       	call   c00278a8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 94 ab 01 00       	call   c00278a8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 cb b1 01 00       	call   c0027f0b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 2f ae 01 00       	call   c0027b8c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 fc ad 01 00       	call   c0027b8c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 7b a4 01 00       	call   c002722b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 68 b5 01 00       	call   c0028330 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 3a b1 01 00       	call   c0027f0b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 91 aa 01 00       	call   c002787c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 70 b3 01 00       	call   c0028177 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 08 a4 01 00       	call   c002722b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 2c aa 01 00       	call   c002787c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 ce b4 01 00       	call   c0028330 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 8f b2 01 00       	call   c0028177 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 4d b2 01 00       	call   c0028159 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 e4 af 01 00       	call   c0027f0b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 e5 a2 01 00       	call   c002722b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 b4 af 01 00       	call   c0027f0b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 1b ac 01 00       	call   c0027b8c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ba b1 01 00       	call   c0028159 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 bd b1 01 00       	call   c0028177 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 90 b1 01 00       	call   c0028177 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 89 ab 01 00       	call   c0027b8c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 13 b3 01 00       	call   c0028330 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ee b2 01 00       	call   c0028330 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 c0 ae 01 00       	call   c0027f0b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 17 a8 01 00       	call   c002787c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 f6 b0 01 00       	call   c0028177 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 8f a1 01 00       	call   c002722b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 b3 a7 01 00       	call   c002787c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 55 b2 01 00       	call   c0028330 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 8d aa 01 00       	call   c0027b8c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 0a a1 01 00       	call   c002722b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 35 ad 01 00       	call   c0027f0b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 35 a0 01 00       	call   c002722b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 15 a0 01 00       	call   c002722b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 e5 ac 01 00       	call   c0027f0b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 35 af 01 00       	call   c0028175 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 13 a6 01 00       	call   c002787c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 95 b0 01 00       	call   c0028310 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 bc ae 01 00       	call   c0028159 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 b9 a5 01 00       	call   c002787c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 37 ac 01 00       	call   c0027f0b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ba a5 01 00       	call   c00278a8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 0c ac 01 00       	call   c0027f0b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 73 a8 01 00       	call   c0027b8c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 f2 9e 01 00       	call   c002722b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 bc ab 01 00       	call   c0027f0b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 08 ae 01 00       	call   c0028177 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 fd a4 01 00       	call   c00278a8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 cf a4 01 00       	call   c00278a8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 06 ab 01 00       	call   c0027f0b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 6a a7 01 00       	call   c0027b8c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 37 a7 01 00       	call   c0027b8c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 b6 9d 01 00       	call   c002722b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 a3 ae 01 00       	call   c0028330 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 75 aa 01 00       	call   c0027f0b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 cc a3 01 00       	call   c002787c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 ab ac 01 00       	call   c0028177 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 43 9d 01 00       	call   c002722b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 67 a3 01 00       	call   c002787c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 09 ae 01 00       	call   c0028330 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 c7 ab 01 00       	call   c0028177 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 85 ab 01 00       	call   c0028159 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 1c a9 01 00       	call   c0027f0b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 1d 9c 01 00       	call   c002722b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ec a8 01 00       	call   c0027f0b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 53 a5 01 00       	call   c0027b8c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 f2 aa 01 00       	call   c0028159 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 f5 aa 01 00       	call   c0028177 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 c8 aa 01 00       	call   c0028177 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 c1 a4 01 00       	call   c0027b8c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 4b ac 01 00       	call   c0028330 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 22 ac 01 00       	call   c0028330 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 f4 a7 01 00       	call   c0027f0b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 4b a1 01 00       	call   c002787c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 2a aa 01 00       	call   c0028177 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 c3 9a 01 00       	call   c002722b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 eb a0 01 00       	call   c002787c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 8d ab 01 00       	call   c0028330 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 c6 a3 01 00       	call   c0027b8c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 43 9a 01 00       	call   c002722b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 6f a6 01 00       	call   c0027f0b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 6f 99 01 00       	call   c002722b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 4f 99 01 00       	call   c002722b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 1f a6 01 00       	call   c0027f0b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 53 a8 01 00       	call   c0028159 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 4a 9f 01 00       	call   c002787c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 cc a9 01 00       	call   c0028310 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 f3 a7 01 00       	call   c0028159 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ed 9e 01 00       	call   c002787c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 6b a5 01 00       	call   c0027f0b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ee 9e 01 00       	call   c00278a8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 40 a5 01 00       	call   c0027f0b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 a7 a1 01 00       	call   c0027b8c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 26 98 01 00       	call   c002722b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 f0 a4 01 00       	call   c0027f0b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 3c a7 01 00       	call   c0028177 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 31 9e 01 00       	call   c00278a8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 03 9e 01 00       	call   c00278a8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 47 a4 01 00       	call   c0027f0b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ae a0 01 00       	call   c0027b8c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 97 9d 01 00       	call   c00278a8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 53 a6 01 00       	call   c002817b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 46 a0 01 00       	call   c0027b8c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 c5 96 01 00       	call   c002722b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 b2 a7 01 00       	call   c0028330 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 84 a3 01 00       	call   c0027f0b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 db 9c 01 00       	call   c002787c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ba a5 01 00       	call   c0028177 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 52 96 01 00       	call   c002722b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 7a 9c 01 00       	call   c002787c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 1c a7 01 00       	call   c0028330 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 c4 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd643c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 b8 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6448]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 cf a3 01 00       	call   c0028177 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 8d a3 01 00       	call   c0028159 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 79 a3 01 00       	call   c0028177 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 eb a0 01 00       	call   c0027f0b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 69 9a 01 00       	call   c00278a8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 bb a0 01 00       	call   c0027f0b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 c1 93 01 00       	call   c002722b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 90 a0 01 00       	call   c0027f0b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 e0 a2 01 00       	call   c0028175 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 c1 99 01 00       	call   c002787c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 43 a4 01 00       	call   c0028310 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 6a a2 01 00       	call   c0028159 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 69 99 01 00       	call   c002787c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 e7 9f 01 00       	call   c0027f0b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 6a 99 01 00       	call   c00278a8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 bc 9f 01 00       	call   c0027f0b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 23 9c 01 00       	call   c0027b8c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 a2 92 01 00       	call   c002722b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ca 9b 01 00       	call   c0027b8c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 50 92 01 00       	call   c002722b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 3e a3 01 00       	call   c0028330 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 10 9f 01 00       	call   c0027f0b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 67 98 01 00       	call   c002787c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 46 a1 01 00       	call   c0028177 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 df 91 01 00       	call   c002722b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 0b 98 01 00       	call   c002787c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ad a2 01 00       	call   c0028330 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 5a 9e 01 00       	call   c0027f0b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 d7 97 01 00       	call   c00278a8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 28 9e 01 00       	call   c0027f0b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 2e 91 01 00       	call   c002722b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 fe 9d 01 00       	call   c0027f0b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 52 a0 01 00       	call   c0028179 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 2b 97 01 00       	call   c002787c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ad a1 01 00       	call   c0028310 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 d4 9f 01 00       	call   c0028159 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 d2 96 01 00       	call   c002787c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 50 9d 01 00       	call   c0027f0b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 d3 96 01 00       	call   c00278a8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 25 9d 01 00       	call   c0027f0b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 8c 99 01 00       	call   c0027b8c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 0b 90 01 00       	call   c002722b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 27 99 01 00       	call   c0027b8c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 a6 8f 01 00       	call   c002722b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 94 a0 01 00       	call   c0028330 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 66 9c 01 00       	call   c0027f0b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 bd 95 01 00       	call   c002787c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 9c 9e 01 00       	call   c0028177 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 35 8f 01 00       	call   c002722b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 61 95 01 00       	call   c002787c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 d2 9b 01 00       	call   c0027f0b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 d8 8e 01 00       	call   c002722b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 de 9c 02 c0       	mov    eax,0xc0029cde
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 ef 9c 02 c0       	mov    eax,0xc0029cef
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000e4e3:	ff 05 a4 0d 03 c0    	inc    DWORD PTR ds:0xc0030da4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d a0 0d 03 c0 00 	cmp    DWORD PTR ds:0xc0030da0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c000e50d:	e8 4d f4 00 00       	call   c001d95f <schedule()>
c000e512:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000e517:	48                   	dec    eax
c000e518:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 26 9d 02 c0       	push   0xc0029d26
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 88 d8 02 c0       	mov    eax,0xc002d888
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 2f 9d 02 c0       	push   0xc0029d2f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 a4 66 02 c0       	mov    eax,0xc00266a4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 39 9d 02 c0       	push   0xc0029d39
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 d8 63 02 c0       	mov    eax,0xc00263d8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 42 9d 02 c0       	push   0xc0029d42
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 a4 67 02 c0       	mov    eax,0xc00267a4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 4c 9d 02 c0       	push   0xc0029d4c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 24 65 02 c0       	mov    eax,0xc0026524
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 55 9d 02 c0       	push   0xc0029d55
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 8c d8 02 c0       	mov    eax,0xc002d88c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 62 9d 02 c0       	push   0xc0029d62
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 8d d8 02 c0       	mov    eax,0xc002d88d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 bf 55 00 00       	call   c0013c2c <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 6f 9d 02 c0       	push   0xc0029d6f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c000e6be:	68 88 9d 02 c0       	push   0xc0029d88
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 77 ee 00 00       	call   c001d542 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 5a f0 00 00       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 1e e1 01 c0       	push   0xc001e11e
c000e6e9:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c000e6ef:	e8 46 f0 00 00       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c000e6fc:	68 6c 9e 02 c0       	push   0xc0029e6c
c000e701:	c6 05 8d d8 02 c0 01 	mov    BYTE PTR ds:0xc002d88d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 b7 fd 00 00       	call   c001e4c9 <Vm::initialise8086()>
c000e712:	e8 dd 42 00 00       	call   c00129f4 <Fs::initVFS()>
c000e717:	c7 04 24 95 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d95
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 6c 9e 02 c0       	push   0xc0029e6c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 83 d6 00 00       	call   c001bdcf <Sys::loadSyscalls()>
c000e74c:	e8 7b b5 00 00       	call   c0019ccc <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 af 9d 02 c0       	push   0xc0029daf
c000e75b:	68 b8 9d 02 c0       	push   0xc0029db8
c000e760:	e8 2c c4 00 00       	call   c001ab91 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 77 4d 00 00       	call   c00134e4 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 90 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e90
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 62 54 00 00       	call   c0013bec <Device::loadDriversForAll()>
c000e78a:	c7 04 24 c0 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc0
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 99 b0 00 00       	call   c0019834 <Krnl::startCPUs()>
c000e79b:	c7 04 24 da 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dda
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 eb 9d 02 c0       	push   0xc0029deb
c000e7b6:	e8 e4 e7 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 06 ea 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 64 f3 00 00       	call   c001db35 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 07 9e 02 c0       	push   0xc0029e07
c000e7e5:	50                   	push   eax
c000e7e6:	e8 bb 54 00 00       	call   c0013ca6 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba dc 9e 02 c0       	mov    edx,0xc0029edc
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 a1 d8 02 c0 04 	test   BYTE PTR ds:0xc002d8a1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 e7 79 01 00       	call   c0026366 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 0c 9e 00 00       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 e5 9d 00 00       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 c3 9d 00 00       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 a1 9d 00 00       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 a0 d8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d8a0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 af 9c 00 00       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 8a 9c 00 00       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 51 78 01 00       	call   c0026320 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 0e 78 01 00       	call   c0026300 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 a6 9c 00 00       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 10 9e 02 c0       	push   0xc0029e10
c000eb62:	e8 6e b2 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 16 9e 02 c0       	push   0xc0029e16
c000eb9a:	e8 36 b2 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 b0 9e 02 c0       	push   0xc0029eb0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 a0 d8 02 c0 04 	test   BYTE PTR ds:0xc002d8a0,0x4
c000ec03:	0f 94 05 c0 c7 02 c0 	sete   BYTE PTR ds:0xc002c7c0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 21 8e 00 00       	call   c0017a3a <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 7a 4e 00 00       	call   c0013aa2 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 c0 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc0
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 22 9c 00 00       	call   c001887e <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 37 4e 00 00       	call   c0013aa2 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 b3 53 00 00       	call   c001403a <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 07 4e 00 00       	call   c0013aa2 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 1c 9e 02 c0       	push   0xc0029e1c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 93 eb 00 00       	call   c001d85c <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 37 9e 02 c0       	push   0xc0029e37
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 52 39 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 48 9e 02 c0       	push   0xc0029e48
c000ed34:	e8 9c b0 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 55 9e 02 c0       	push   0xc0029e55
c000ed49:	e8 87 b0 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 5f 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e5f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 70 b0 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 92 d8 02 c0       	mov    ds:0xc002d892,eax
c000ee21:	66 89 15 90 d8 02 c0 	mov    WORD PTR ds:0xc002d890,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000ef38:	48                   	dec    eax
c000ef39:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 21 94 01 00       	call   c00283b0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 18 94 01 00       	call   c00283b0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 98 d8 02 c0 ff 07 	mov    WORD PTR ds:0xc002d898,0x7ff
c000f085:	a3 9a d8 02 c0       	mov    ds:0xc002d89a,eax
c000f08a:	0f 01 1d 98 d8 02 c0 	lidtd  ds:0xc002d898
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c000f37c:	e8 3d 27 00 00       	call   c0011abe <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 a7 17 00 00       	call   c0010b46 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 d8 17 00 00       	call   c0010b86 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 5c c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c65c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 5c c6 02 c0       	mov    eax,ds:0xc002c65c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 00 9f 02 c0       	push   0xc0029f00
c000f455:	e8 0f 32 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 5c c6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c65c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c000f481:	8b 2d 5c c6 02 c0    	mov    ebp,DWORD PTR ds:0xc002c65c
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 23 25 00 00       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 5c c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c65c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 30 9f 02 c0       	push   0xc0029f30
c000f50d:	e8 c3 a8 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 35 9f 02 c0       	push   0xc0029f35
c000f523:	e8 ad a8 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000f543:	48                   	dec    eax
c000f544:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c000f561:	e8 58 25 00 00       	call   c0011abe <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c000f577:	e8 ec 21 00 00       	call   c0011768 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 3c 9f 02 c0       	push   0xc0029f3c
c000f6a4:	e8 c0 2f 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 9a 09 00 00       	call   c0010048 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 60 c6 02 c0 	movzx  eax,BYTE PTR ds:0xc002c660
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 60 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd39a0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 96 c6 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd396a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 95 c6 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd396b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 60 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd39a0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 54 9f 02 c0       	push   0xc0029f54
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 86 03 00 00       	call   c000fadc <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 63 1c 00 00       	call   c00113be <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 2a 1e 00 00       	call   c0011590 <VAS::VAS()>
c000f766:	89 1d f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 88 d8 02 c0    	mov    DWORD PTR ds:0xc002d888,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 9e 20 00 00       	call   c0011840 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba e0 d8 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2720],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be e0 d8 02 c0       	mov    esi,0xc002d8e0
c000f819:	8d 93 e0 d8 02 c0    	lea    edx,[ebx-0x3ffd2720]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 73 9f 02 c0       	push   0xc0029f73
c000f836:	e8 2e 2e 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 e0 d8 02 c0    	lea    eax,[edx-0x3ffd2720]
c000f897:	8d 94 11 e0 d8 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2720]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 a4 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7a4
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 a4 c7 02 c0    	add    eax,DWORD PTR ds:0xc002c7a4
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 a4 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a4
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 8a 9f 02 c0       	push   0xc0029f8a
c000f90e:	e8 56 2d 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d d0 d8 02 c0    	dec    DWORD PTR ds:0xc002d8d0
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 9d 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f9d
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 7a a4 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	51                   	push   ecx
c000f974:	8b 35 c4 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8c4
c000f97a:	89 f3                	mov    ebx,esi
c000f97c:	eb 0a                	jmp    c000f988 <Phys::allocatePage()+0x17>
c000f97e:	89 1d c4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c4,ebx
c000f984:	39 de                	cmp    esi,ebx
c000f986:	74 24                	je     c000f9ac <Phys::allocatePage()+0x3b>
c000f988:	53                   	push   ebx
c000f989:	e8 56 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f98e:	5a                   	pop    edx
c000f98f:	84 c0                	test   al,al
c000f991:	74 76                	je     c000fa09 <Phys::allocatePage()+0x98>
c000f993:	43                   	inc    ebx
c000f994:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f99a:	75 e2                	jne    c000f97e <Phys::allocatePage()+0xd>
c000f99c:	31 db                	xor    ebx,ebx
c000f99e:	c7 05 c4 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8c4,0x0
c000f9a8:	39 de                	cmp    esi,ebx
c000f9aa:	75 dc                	jne    c000f988 <Phys::allocatePage()+0x17>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 d1 9f 02 c0       	push   0xc0029fd1
c000f9b4:	e8 b0 2c 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000f9b9:	59                   	pop    ecx
c000f9ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9c8:	e8 8f 29 00 00       	call   c001235c <VAS::scanForEviction()>
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	85 c0                	test   eax,eax
c000f9d2:	75 70                	jne    c000fa44 <Phys::allocatePage()+0xd3>
c000f9d4:	83 ec 0c             	sub    esp,0xc
c000f9d7:	68 00 10 00 00       	push   0x1000
c000f9dc:	e8 c8 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e1:	83 c4 10             	add    esp,0x10
c000f9e4:	85 c0                	test   eax,eax
c000f9e6:	75 5c                	jne    c000fa44 <Phys::allocatePage()+0xd3>
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 e9 9f 02 c0       	push   0xc0029fe9
c000f9f0:	e8 e0 a3 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	8b 1d c4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8c4
c000f9fe:	53                   	push   ebx
c000f9ff:	e8 e0 fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa04:	5a                   	pop    edx
c000fa05:	84 c0                	test   al,al
c000fa07:	75 8a                	jne    c000f993 <Phys::allocatePage()+0x22>
c000fa09:	6a 01                	push   0x1
c000fa0b:	53                   	push   ebx
c000fa0c:	e8 a1 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa11:	5b                   	pop    ebx
c000fa12:	a1 d0 d8 02 c0       	mov    eax,ds:0xc002d8d0
c000fa17:	5e                   	pop    esi
c000fa18:	40                   	inc    eax
c000fa19:	8b 15 c4 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8c4
c000fa1f:	a3 d0 d8 02 c0       	mov    ds:0xc002d8d0,eax
c000fa24:	c1 e2 0c             	shl    edx,0xc
c000fa27:	52                   	push   edx
c000fa28:	ff 35 d4 d8 02 c0    	push   DWORD PTR ds:0xc002d8d4
c000fa2e:	50                   	push   eax
c000fa2f:	68 b3 9f 02 c0       	push   0xc0029fb3
c000fa34:	e8 30 2c 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000fa39:	a1 c4 d8 02 c0       	mov    eax,ds:0xc002d8c4
c000fa3e:	83 c4 10             	add    esp,0x10
c000fa41:	c1 e0 0c             	shl    eax,0xc
c000fa44:	5a                   	pop    edx
c000fa45:	5b                   	pop    ebx
c000fa46:	5e                   	pop    esi
c000fa47:	c3                   	ret    

c000fa48 <Phys::allocateContiguousPages(int)>:
c000fa48:	57                   	push   edi
c000fa49:	56                   	push   esi
c000fa4a:	53                   	push   ebx
c000fa4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa4f:	fa                   	cli    
c000fa50:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000fa56:	31 db                	xor    ebx,ebx
c000fa58:	85 db                	test   ebx,ebx
c000fa5a:	75 11                	jne    c000fa6d <Phys::allocateContiguousPages(int)+0x25>
c000fa5c:	e8 10 ff ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa61:	83 fe 01             	cmp    esi,0x1
c000fa64:	89 c7                	mov    edi,eax
c000fa66:	74 21                	je     c000fa89 <Phys::allocateContiguousPages(int)+0x41>
c000fa68:	bb 01 00 00 00       	mov    ebx,0x1
c000fa6d:	e8 ff fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa72:	89 da                	mov    edx,ebx
c000fa74:	c1 e2 0c             	shl    edx,0xc
c000fa77:	01 fa                	add    edx,edi
c000fa79:	39 c2                	cmp    edx,eax
c000fa7b:	74 20                	je     c000fa9d <Phys::allocateContiguousPages(int)+0x55>
c000fa7d:	bb 01 00 00 00       	mov    ebx,0x1
c000fa82:	89 c7                	mov    edi,eax
c000fa84:	83 fe 01             	cmp    esi,0x1
c000fa87:	75 e4                	jne    c000fa6d <Phys::allocateContiguousPages(int)+0x25>
c000fa89:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000fa8e:	48                   	dec    eax
c000fa8f:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000fa94:	75 01                	jne    c000fa97 <Phys::allocateContiguousPages(int)+0x4f>
c000fa96:	fb                   	sti    
c000fa97:	89 f8                	mov    eax,edi
c000fa99:	5b                   	pop    ebx
c000fa9a:	5e                   	pop    esi
c000fa9b:	5f                   	pop    edi
c000fa9c:	c3                   	ret    
c000fa9d:	43                   	inc    ebx
c000fa9e:	39 f3                	cmp    ebx,esi
c000faa0:	75 b6                	jne    c000fa58 <Phys::allocateContiguousPages(int)+0x10>
c000faa2:	eb e5                	jmp    c000fa89 <Phys::allocateContiguousPages(int)+0x41>

c000faa4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000faa4:	56                   	push   esi
c000faa5:	53                   	push   ebx
c000faa6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faaa:	39 1d c8 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c8,ebx
c000fab0:	73 06                	jae    c000fab8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fab2:	89 1d c8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c8,ebx
c000fab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fabc:	c1 eb 0c             	shr    ebx,0xc
c000fabf:	c1 e8 0c             	shr    eax,0xc
c000fac2:	39 d8                	cmp    eax,ebx
c000fac4:	73 13                	jae    c000fad9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fac6:	6a 00                	push   0x0
c000fac8:	8d 70 01             	lea    esi,[eax+0x1]
c000facb:	50                   	push   eax
c000facc:	e8 e1 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fad1:	5a                   	pop    edx
c000fad2:	89 f0                	mov    eax,esi
c000fad4:	59                   	pop    ecx
c000fad5:	39 f3                	cmp    ebx,esi
c000fad7:	75 ed                	jne    c000fac6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fad9:	5b                   	pop    ebx
c000fada:	5e                   	pop    esi
c000fadb:	c3                   	ret    

c000fadc <Phys::physicalMemorySetup(unsigned int)>:
c000fadc:	55                   	push   ebp
c000fadd:	57                   	push   edi
c000fade:	56                   	push   esi
c000fadf:	53                   	push   ebx
c000fae0:	31 db                	xor    ebx,ebx
c000fae2:	83 ec 40             	sub    esp,0x40
c000fae5:	6a 30                	push   0x30
c000fae7:	6a 00                	push   0x0
c000fae9:	68 e0 d8 02 c0       	push   0xc002d8e0
c000faee:	e8 5d 0c ff ff       	call   c0000750 <memset>
c000faf3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000faf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fafc:	05 00 10 00 00       	add    eax,0x1000
c000fb01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb05:	5a                   	pop    edx
c000fb06:	59                   	pop    ecx
c000fb07:	50                   	push   eax
c000fb08:	68 f7 9f 02 c0       	push   0xc0029ff7
c000fb0d:	e8 57 2b 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	83 ec 08             	sub    esp,0x8
c000fb18:	6a 01                	push   0x1
c000fb1a:	53                   	push   ebx
c000fb1b:	43                   	inc    ebx
c000fb1c:	e8 91 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb21:	83 c4 10             	add    esp,0x10
c000fb24:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb2a:	75 e9                	jne    c000fb15 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb2c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb33:	66 85 c0             	test   ax,ax
c000fb36:	0f 84 b5 01 00 00    	je     c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb40:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb46:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb4b:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb51:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb57:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb5b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb5f:	01 c1                	add    ecx,eax
c000fb61:	11 d3                	adc    ebx,edx
c000fb63:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb67:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb6b:	31 ff                	xor    edi,edi
c000fb6d:	89 d3                	mov    ebx,edx
c000fb6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb73:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb79:	09 cb                	or     ebx,ecx
c000fb7b:	0f 85 80 01 00 00    	jne    c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb8d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb92:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb96:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb9e:	eb 49                	jmp    c000fbe9 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fba0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fba4:	83 c3 18             	add    ebx,0x18
c000fba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbaf:	39 d0                	cmp    eax,edx
c000fbb1:	0f 84 4a 01 00 00    	je     c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbb7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fbba:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fbbd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fbc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbc2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbc6:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbca:	01 c6                	add    esi,eax
c000fbcc:	89 d5                	mov    ebp,edx
c000fbce:	11 d7                	adc    edi,edx
c000fbd0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fbd4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fbd8:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fbdb:	31 ff                	xor    edi,edi
c000fbdd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fbe1:	09 cd                	or     ebp,ecx
c000fbe3:	0f 85 18 01 00 00    	jne    c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbe9:	89 f1                	mov    ecx,esi
c000fbeb:	83 f1 01             	xor    ecx,0x1
c000fbee:	09 f9                	or     ecx,edi
c000fbf0:	75 ae                	jne    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf2:	be 00 00 08 00       	mov    esi,0x80000
c000fbf7:	89 cf                	mov    edi,ecx
c000fbf9:	39 c6                	cmp    esi,eax
c000fbfb:	19 d7                	sbb    edi,edx
c000fbfd:	0f 82 98 00 00 00    	jb     c000fc9b <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc03:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fc07:	89 cd                	mov    ebp,ecx
c000fc09:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc11:	19 fd                	sbb    ebp,edi
c000fc13:	0f 83 82 00 00 00    	jae    c000fc9b <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc19:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fc1e:	39 f0                	cmp    eax,esi
c000fc20:	19 f9                	sbb    ecx,edi
c000fc22:	0f 82 03 01 00 00    	jb     c000fd2b <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fc28:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc31:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc35:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc3b:	83 d7 ff             	adc    edi,0xffffffff
c000fc3e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc42:	31 c0                	xor    eax,eax
c000fc44:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc48:	39 f2                	cmp    edx,esi
c000fc4a:	89 c2                	mov    edx,eax
c000fc4c:	19 fa                	sbb    edx,edi
c000fc4e:	0f 83 4c ff ff ff    	jae    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc54:	b8 00 00 08 00       	mov    eax,0x80000
c000fc59:	83 ec 08             	sub    esp,0x8
c000fc5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc60:	50                   	push   eax
c000fc61:	e8 3e fe ff ff       	call   c000faa4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc6e:	83 c4 0c             	add    esp,0xc
c000fc71:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc75:	03 05 d4 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d8d4
c000fc7b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc82:	a3 d4 d8 02 c0       	mov    ds:0xc002d8d4,eax
c000fc87:	52                   	push   edx
c000fc88:	50                   	push   eax
c000fc89:	68 1d a0 02 c0       	push   0xc002a01d
c000fc8e:	e8 d6 29 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	e9 05 ff ff ff       	jmp    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc9b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fca3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fca7:	39 ee                	cmp    esi,ebp
c000fca9:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fcad:	0f 82 ed fe ff ff    	jb     c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcb3:	be ff 1f 00 00       	mov    esi,0x1fff
c000fcb8:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fcbc:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fcc0:	0f 83 da fe ff ff    	jae    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcc6:	39 e8                	cmp    eax,ebp
c000fcc8:	89 d1                	mov    ecx,edx
c000fcca:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcce:	73 89                	jae    c000fc59 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fcd8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcdc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fce0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fce4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fce8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcec:	e9 68 ff ff ff       	jmp    c000fc59 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcf1:	83 ec 0c             	sub    esp,0xc
c000fcf4:	68 0f a0 02 c0       	push   0xc002a00f
c000fcf9:	e8 d7 a0 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	bb 40 01 00 00       	mov    ebx,0x140
c000fd06:	83 ec 08             	sub    esp,0x8
c000fd09:	6a 00                	push   0x0
c000fd0b:	53                   	push   ebx
c000fd0c:	43                   	inc    ebx
c000fd0d:	e8 a0 fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd12:	ff 05 d4 d8 02 c0    	inc    DWORD PTR ds:0xc002d8d4
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd21:	75 e3                	jne    c000fd06 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fd23:	83 c4 3c             	add    esp,0x3c
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	5d                   	pop    ebp
c000fd2a:	c3                   	ret    
c000fd2b:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fd33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd3b:	e9 e8 fe ff ff       	jmp    c000fc28 <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fd40 <Pipe::isAtty()>:
c000fd40:	31 c0                	xor    eax,eax
c000fd42:	c3                   	ret    
c000fd43:	90                   	nop

c000fd44 <Pipe::~Pipe()>:
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	ba 7c a0 02 c0       	mov    edx,0xc002a07c
c000fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd50:	89 10                	mov    DWORD PTR [eax],edx
c000fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	50                   	push   eax
c000fd5a:	e8 3f 12 00 00       	call   c0010f9e <UnixFile::~UnixFile()>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	90                   	nop
c000fd63:	83 c4 0c             	add    esp,0xc
c000fd66:	c3                   	ret    
c000fd67:	90                   	nop

c000fd68 <Pipe::~Pipe()>:
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	83 ec 0c             	sub    esp,0xc
c000fd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd72:	e8 cd ff ff ff       	call   c000fd44 <Pipe::~Pipe()>
c000fd77:	83 c4 10             	add    esp,0x10
c000fd7a:	83 ec 08             	sub    esp,0x8
c000fd7d:	6a 20                	push   0x20
c000fd7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd83:	e8 09 28 00 00       	call   c0012591 <operator delete(void*, unsigned long)>
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	83 c4 0c             	add    esp,0xc
c000fd8e:	c3                   	ret    
c000fd8f:	90                   	nop

c000fd90 <Pipe::read(unsigned long long, void*, int*)>:
c000fd90:	55                   	push   ebp
c000fd91:	57                   	push   edi
c000fd92:	56                   	push   esi
c000fd93:	53                   	push   ebx
c000fd94:	83 ec 1c             	sub    esp,0x1c
c000fd97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd9b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fda3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fda6:	89 c8                	mov    eax,ecx
c000fda8:	99                   	cdq    
c000fda9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdad:	74 24                	je     c000fdd3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdaf:	39 f9                	cmp    ecx,edi
c000fdb1:	89 d1                	mov    ecx,edx
c000fdb3:	19 f1                	sbb    ecx,esi
c000fdb5:	73 1c                	jae    c000fdd3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdb7:	fa                   	cli    
c000fdb8:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c000fdbe:	e8 9c db 00 00       	call   c001d95f <schedule()>
c000fdc3:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c000fdc8:	48                   	dec    eax
c000fdc9:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c000fdce:	75 d3                	jne    c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdd0:	fb                   	sti    
c000fdd1:	eb d0                	jmp    c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdd3:	39 f8                	cmp    eax,edi
c000fdd5:	89 d1                	mov    ecx,edx
c000fdd7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdda:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdde:	19 f1                	sbb    ecx,esi
c000fde0:	73 07                	jae    c000fde9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fde2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fde5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fde9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdec:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdef:	29 f7                	sub    edi,esi
c000fdf1:	89 f8                	mov    eax,edi
c000fdf3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdf7:	99                   	cdq    
c000fdf8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdff:	19 d0                	sbb    eax,edx
c000fe01:	73 07                	jae    c000fe0a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe0a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe0d:	89 ea                	mov    edx,ebp
c000fe0f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe18:	74 0d                	je     c000fe27 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe1a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe1d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe27:	85 d2                	test   edx,edx
c000fe29:	74 11                	je     c000fe3c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe2f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe32:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe36:	89 d1                	mov    ecx,edx
c000fe38:	89 c7                	mov    edi,eax
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe3f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe42:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe45:	99                   	cdq    
c000fe46:	89 f7                	mov    edi,esi
c000fe48:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe4b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe4f:	c1 ff 1f             	sar    edi,0x1f
c000fe52:	57                   	push   edi
c000fe53:	56                   	push   esi
c000fe54:	52                   	push   edx
c000fe55:	50                   	push   eax
c000fe56:	e8 49 69 01 00       	call   c00267a4 <__umoddi3>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe61:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe66:	75 10                	jne    c000fe78 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	68 39 a0 02 c0       	push   0xc002a039
c000fe70:	e8 60 9f 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe7c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe7f:	89 10                	mov    DWORD PTR [eax],edx
c000fe81:	83 c4 1c             	add    esp,0x1c
c000fe84:	31 c0                	xor    eax,eax
c000fe86:	5b                   	pop    ebx
c000fe87:	5e                   	pop    esi
c000fe88:	5f                   	pop    edi
c000fe89:	5d                   	pop    ebp
c000fe8a:	c3                   	ret    
c000fe8b:	90                   	nop

c000fe8c <Pipe::write(unsigned long long, void*, int*)>:
c000fe8c:	55                   	push   ebp
c000fe8d:	57                   	push   edi
c000fe8e:	56                   	push   esi
c000fe8f:	53                   	push   ebx
c000fe90:	83 ec 1c             	sub    esp,0x1c
c000fe93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe9b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fea2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fea5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fea9:	89 d8                	mov    eax,ebx
c000feab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000feae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000feb2:	89 d6                	mov    esi,edx
c000feb4:	89 d7                	mov    edi,edx
c000feb6:	c1 ff 1f             	sar    edi,0x1f
c000feb9:	03 34 24             	add    esi,DWORD PTR [esp]
c000febc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fec0:	c1 f8 1f             	sar    eax,0x1f
c000fec3:	39 f3                	cmp    ebx,esi
c000fec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fecd:	19 f8                	sbb    eax,edi
c000fecf:	b8 01 00 00 00       	mov    eax,0x1
c000fed4:	72 6e                	jb     c000ff44 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fed6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fed9:	01 d0                	add    eax,edx
c000fedb:	99                   	cdq    
c000fedc:	f7 fb                	idiv   ebx
c000fede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fee2:	29 d3                	sub    ebx,edx
c000fee4:	89 d7                	mov    edi,edx
c000fee6:	89 de                	mov    esi,ebx
c000fee8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000feeb:	c1 fb 1f             	sar    ebx,0x1f
c000feee:	39 f2                	cmp    edx,esi
c000fef0:	19 d8                	sbb    eax,ebx
c000fef2:	b8 00 00 00 00       	mov    eax,0x0
c000fef7:	72 04                	jb     c000fefd <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fef9:	89 d0                	mov    eax,edx
c000fefb:	29 f0                	sub    eax,esi
c000fefd:	89 d3                	mov    ebx,edx
c000feff:	29 c3                	sub    ebx,eax
c000ff01:	74 0b                	je     c000ff0e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff03:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff06:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff0a:	89 d9                	mov    ecx,ebx
c000ff0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff0e:	85 c0                	test   eax,eax
c000ff10:	74 0d                	je     c000ff1f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff12:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff16:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff19:	89 de                	mov    esi,ebx
c000ff1b:	89 c1                	mov    ecx,eax
c000ff1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff1f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff22:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff27:	75 10                	jne    c000ff39 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff29:	83 ec 0c             	sub    esp,0xc
c000ff2c:	68 55 a0 02 c0       	push   0xc002a055
c000ff31:	e8 9f 9e 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff40:	89 08                	mov    DWORD PTR [eax],ecx
c000ff42:	31 c0                	xor    eax,eax
c000ff44:	83 c4 1c             	add    esp,0x1c
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::Pipe(int)>:
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff53:	83 ec 08             	sub    esp,0x8
c000ff56:	6a 00                	push   0x0
c000ff58:	50                   	push   eax
c000ff59:	e8 5e 0e 00 00       	call   c0010dbc <UnixFile::UnixFile(int)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	ba 7c a0 02 c0       	mov    edx,0xc002a07c
c000ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6a:	89 10                	mov    DWORD PTR [eax],edx
c000ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff86:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	50                   	push   eax
c000ff95:	e8 ff f5 ff ff       	call   c000f599 <malloc>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	89 c2                	mov    edx,eax
c000ff9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffae:	90                   	nop
c000ffaf:	83 c4 0c             	add    esp,0xc
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <VgaText::isAtty()>:
c000ffb4:	b0 01                	mov    al,0x1
c000ffb6:	c3                   	ret    
c000ffb7:	90                   	nop

c000ffb8 <VgaText::~VgaText()>:
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	ba 04 a1 02 c0       	mov    edx,0xc002a104
c000ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc4:	89 10                	mov    DWORD PTR [eax],edx
c000ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	50                   	push   eax
c000ffce:	e8 cb 0f 00 00       	call   c0010f9e <UnixFile::~UnixFile()>
c000ffd3:	83 c4 10             	add    esp,0x10
c000ffd6:	90                   	nop
c000ffd7:	83 c4 0c             	add    esp,0xc
c000ffda:	c3                   	ret    
c000ffdb:	90                   	nop

c000ffdc <VgaText::~VgaText()>:
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	83 ec 0c             	sub    esp,0xc
c000ffe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe6:	e8 cd ff ff ff       	call   c000ffb8 <VgaText::~VgaText()>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	83 ec 08             	sub    esp,0x8
c000fff1:	68 c4 02 00 00       	push   0x2c4
c000fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fffa:	e8 92 25 00 00       	call   c0012591 <operator delete(void*, unsigned long)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	83 c4 0c             	add    esp,0xc
c0010005:	c3                   	ret    

c0010006 <VgaText::read(unsigned long long, void*, int*)>:
c0010006:	83 ec 10             	sub    esp,0x10
c0010009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001000d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010015:	e8 16 5b 00 00       	call   c0015b30 <readKeyboard(VgaText*, char*, unsigned long)>
c001001a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001001e:	89 02                	mov    DWORD PTR [edx],eax
c0010020:	31 c0                	xor    eax,eax
c0010022:	83 c4 1c             	add    esp,0x1c
c0010025:	c3                   	ret    

c0010026 <setTerminalScrollLock(bool)>:
c0010026:	c3                   	ret    

c0010027 <addToTerminalCycle(VgaText*)>:
c0010027:	8b 15 40 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d940
c001002d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010031:	85 d2                	test   edx,edx
c0010033:	75 09                	jne    c001003e <addToTerminalCycle(VgaText*)+0x17>
c0010035:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010038:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c001003d:	c3                   	ret    
c001003e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010041:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010044:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010047:	c3                   	ret    

c0010048 <installVgaTextImplementation()>:
c0010048:	83 ec 10             	sub    esp,0x10
c001004b:	6a 20                	push   0x20
c001004d:	6a 00                	push   0x0
c001004f:	68 20 d9 02 c0       	push   0xc002d920
c0010054:	e8 f7 06 ff ff       	call   c0000750 <memset>
c0010059:	83 c4 1c             	add    esp,0x1c
c001005c:	c3                   	ret    

c001005d <scrollTerminalScrollLock(int)>:
c001005d:	c3                   	ret    

c001005e <VgaText::updateTitle()>:
c001005e:	53                   	push   ebx
c001005f:	31 c0                	xor    eax,eax
c0010061:	83 ec 58             	sub    esp,0x58
c0010064:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010068:	89 e1                	mov    ecx,esp
c001006a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001006e:	40                   	inc    eax
c001006f:	83 f8 50             	cmp    eax,0x50
c0010072:	75 f6                	jne    c001006a <VgaText::updateTitle()+0xc>
c0010074:	31 c0                	xor    eax,eax
c0010076:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001007d:	84 db                	test   bl,bl
c001007f:	74 06                	je     c0010087 <VgaText::updateTitle()+0x29>
c0010081:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010084:	40                   	inc    eax
c0010085:	eb ef                	jmp    c0010076 <VgaText::updateTitle()+0x18>
c0010087:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001008a:	85 c0                	test   eax,eax
c001008c:	74 09                	je     c0010097 <VgaText::updateTitle()+0x39>
c001008e:	53                   	push   ebx
c001008f:	53                   	push   ebx
c0010090:	51                   	push   ecx
c0010091:	52                   	push   edx
c0010092:	ff d0                	call   eax
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 c4 58             	add    esp,0x58
c001009a:	5b                   	pop    ebx
c001009b:	c3                   	ret    

c001009c <VgaText::load()>:
c001009c:	53                   	push   ebx
c001009d:	31 c0                	xor    eax,eax
c001009f:	83 ec 58             	sub    esp,0x58
c00100a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100a6:	89 e2                	mov    edx,esp
c00100a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ac:	40                   	inc    eax
c00100ad:	83 f8 50             	cmp    eax,0x50
c00100b0:	75 f6                	jne    c00100a8 <VgaText::load()+0xc>
c00100b2:	31 c0                	xor    eax,eax
c00100b4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100bb:	84 c9                	test   cl,cl
c00100bd:	74 06                	je     c00100c5 <VgaText::load()+0x29>
c00100bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100c2:	40                   	inc    eax
c00100c3:	eb ef                	jmp    c00100b4 <VgaText::load()+0x18>
c00100c5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 09                	je     c00100d5 <VgaText::load()+0x39>
c00100cc:	51                   	push   ecx
c00100cd:	51                   	push   ecx
c00100ce:	52                   	push   edx
c00100cf:	53                   	push   ebx
c00100d0:	ff d0                	call   eax
c00100d2:	83 c4 10             	add    esp,0x10
c00100d5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100d8:	85 c0                	test   eax,eax
c00100da:	74 09                	je     c00100e5 <VgaText::load()+0x49>
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	53                   	push   ebx
c00100e0:	ff d0                	call   eax
c00100e2:	83 c4 10             	add    esp,0x10
c00100e5:	83 c4 58             	add    esp,0x58
c00100e8:	5b                   	pop    ebx
c00100e9:	c3                   	ret    

c00100ea <VgaText::updateCursor()>:
c00100ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ee:	39 05 44 d9 02 c0    	cmp    DWORD PTR ds:0xc002d944,eax
c00100f4:	75 09                	jne    c00100ff <VgaText::updateCursor()+0x15>
c00100f6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100f9:	85 c0                	test   eax,eax
c00100fb:	74 02                	je     c00100ff <VgaText::updateCursor()+0x15>
c00100fd:	ff e0                	jmp    eax
c00100ff:	c3                   	ret    

c0010100 <VgaText::doANSI_SGR(int)>:
c0010100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010108:	85 d2                	test   edx,edx
c001010a:	75 0b                	jne    c0010117 <VgaText::doANSI_SGR(int)+0x17>
c001010c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001010f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010112:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010115:	eb 59                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c0010117:	83 fa 07             	cmp    edx,0x7
c001011a:	75 0b                	jne    c0010127 <VgaText::doANSI_SGR(int)+0x27>
c001011c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001011f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010122:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010125:	eb 49                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c0010127:	83 fa 1b             	cmp    edx,0x1b
c001012a:	74 e0                	je     c001010c <VgaText::doANSI_SGR(int)+0xc>
c001012c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001012f:	83 f9 07             	cmp    ecx,0x7
c0010132:	77 09                	ja     c001013d <VgaText::doANSI_SGR(int)+0x3d>
c0010134:	8b 14 8d e0 c7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3820]
c001013b:	eb 20                	jmp    c001015d <VgaText::doANSI_SGR(int)+0x5d>
c001013d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010140:	83 f9 07             	cmp    ecx,0x7
c0010143:	77 09                	ja     c001014e <VgaText::doANSI_SGR(int)+0x4e>
c0010145:	8b 14 8d e0 c7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3820]
c001014c:	eb 22                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c001014e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010151:	83 f9 07             	cmp    ecx,0x7
c0010154:	77 0b                	ja     c0010161 <VgaText::doANSI_SGR(int)+0x61>
c0010156:	8b 14 95 98 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3968]
c001015d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010160:	c3                   	ret    
c0010161:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010164:	83 f9 07             	cmp    ecx,0x7
c0010167:	77 0a                	ja     c0010173 <VgaText::doANSI_SGR(int)+0x73>
c0010169:	8b 14 95 70 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3990]
c0010170:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010173:	c3                   	ret    

c0010174 <VgaText::setDefaultBgColour(VgaColour)>:
c0010174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001017c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001017f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010182:	c3                   	ret    
c0010183:	90                   	nop

c0010184 <VgaText::setDefaultFgColour(VgaColour)>:
c0010184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010188:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001018c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001018f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010192:	c3                   	ret    
c0010193:	90                   	nop

c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010194:	53                   	push   ebx
c0010195:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010199:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001019d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101a1:	51                   	push   ecx
c00101a2:	e8 cd ff ff ff       	call   c0010174 <VgaText::setDefaultBgColour(VgaColour)>
c00101a7:	58                   	pop    eax
c00101a8:	5a                   	pop    edx
c00101a9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101b1:	5b                   	pop    ebx
c00101b2:	eb d0                	jmp    c0010184 <VgaText::setDefaultFgColour(VgaColour)>

c00101b4 <VgaText::setTitleTextColour(VgaColour)>:
c00101b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101bf:	e9 9a fe ff ff       	jmp    c001005e <VgaText::updateTitle()>

c00101c4 <VgaText::setTitleColour(VgaColour)>:
c00101c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101cf:	e9 8a fe ff ff       	jmp    c001005e <VgaText::updateTitle()>

c00101d4 <VgaText::setTitle(char*)>:
c00101d4:	53                   	push   ebx
c00101d5:	83 ec 10             	sub    esp,0x10
c00101d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e0:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101e6:	50                   	push   eax
c00101e7:	e8 20 06 ff ff       	call   c000080c <strcpy>
c00101ec:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101f0:	83 c4 18             	add    esp,0x18
c00101f3:	5b                   	pop    ebx
c00101f4:	e9 65 fe ff ff       	jmp    c001005e <VgaText::updateTitle()>
c00101f9:	90                   	nop

c00101fa <VgaText::combineColours(unsigned char, unsigned char)>:
c00101fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010203:	83 e0 0f             	and    eax,0xf
c0010206:	c1 e2 04             	shl    edx,0x4
c0010209:	09 d0                	or     eax,edx
c001020b:	c3                   	ret    

c001020c <VgaText::scrollScreen()>:
c001020c:	55                   	push   ebp
c001020d:	b9 01 00 00 00       	mov    ecx,0x1
c0010212:	57                   	push   edi
c0010213:	56                   	push   esi
c0010214:	53                   	push   ebx
c0010215:	83 ec 0c             	sub    esp,0xc
c0010218:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001021c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010222:	31 ff                	xor    edi,edi
c0010224:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010227:	83 f9 17             	cmp    ecx,0x17
c001022a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001022d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010234:	75 27                	jne    c001025d <VgaText::scrollScreen()+0x51>
c0010236:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010239:	01 f5                	add    ebp,esi
c001023b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010241:	74 16                	je     c0010259 <VgaText::scrollScreen()+0x4d>
c0010243:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010247:	50                   	push   eax
c0010248:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001024c:	50                   	push   eax
c001024d:	e8 a8 ff ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010252:	5a                   	pop    edx
c0010253:	5a                   	pop    edx
c0010254:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010257:	eb 04                	jmp    c001025d <VgaText::scrollScreen()+0x51>
c0010259:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001025d:	47                   	inc    edi
c001025e:	46                   	inc    esi
c001025f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010265:	75 bd                	jne    c0010224 <VgaText::scrollScreen()+0x18>
c0010267:	41                   	inc    ecx
c0010268:	83 f9 18             	cmp    ecx,0x18
c001026b:	75 af                	jne    c001021c <VgaText::scrollScreen()+0x10>
c001026d:	39 1d 44 d9 02 c0    	cmp    DWORD PTR ds:0xc002d944,ebx
c0010273:	75 1b                	jne    c0010290 <VgaText::scrollScreen()+0x84>
c0010275:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010279:	74 05                	je     c0010280 <VgaText::scrollScreen()+0x74>
c001027b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001027e:	eb 10                	jmp    c0010290 <VgaText::scrollScreen()+0x84>
c0010280:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010283:	85 c0                	test   eax,eax
c0010285:	74 09                	je     c0010290 <VgaText::scrollScreen()+0x84>
c0010287:	83 ec 0c             	sub    esp,0xc
c001028a:	53                   	push   ebx
c001028b:	ff d0                	call   eax
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010294:	83 c4 0c             	add    esp,0xc
c0010297:	5b                   	pop    ebx
c0010298:	5e                   	pop    esi
c0010299:	5f                   	pop    edi
c001029a:	5d                   	pop    ebp
c001029b:	e9 4a fe ff ff       	jmp    c00100ea <VgaText::updateCursor()>

c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00102a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102a5:	c1 e0 08             	shl    eax,0x8
c00102a8:	89 c2                	mov    edx,eax
c00102aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102af:	09 d0                	or     eax,edx
c00102b1:	c3                   	ret    

c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102b2:	56                   	push   esi
c00102b3:	53                   	push   ebx
c00102b4:	51                   	push   ecx
c00102b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102be:	50                   	push   eax
c00102bf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102c4:	50                   	push   eax
c00102c5:	e8 30 ff ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c00102ca:	5b                   	pop    ebx
c00102cb:	0f b6 c0             	movzx  eax,al
c00102ce:	5e                   	pop    esi
c00102cf:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102d4:	50                   	push   eax
c00102d5:	53                   	push   ebx
c00102d6:	e8 c5 ff ff ff       	call   c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00102db:	5a                   	pop    edx
c00102dc:	5e                   	pop    esi
c00102dd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102e0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102e6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102ea:	0f b7 d2             	movzx  edx,dx
c00102ed:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102f1:	39 0d 44 d9 02 c0    	cmp    DWORD PTR ds:0xc002d944,ecx
c00102f7:	75 10                	jne    c0010309 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102f9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102fc:	85 c0                	test   eax,eax
c00102fe:	74 09                	je     c0010309 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010300:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010304:	5a                   	pop    edx
c0010305:	5b                   	pop    ebx
c0010306:	5e                   	pop    esi
c0010307:	ff e0                	jmp    eax
c0010309:	58                   	pop    eax
c001030a:	5b                   	pop    ebx
c001030b:	5e                   	pop    esi
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <VgaText::getCursorX()>:
c001030e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010312:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010315:	c3                   	ret    

c0010316 <VgaText::getCursorY()>:
c0010316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001031d:	c3                   	ret    

c001031e <VgaText::setCursor(int, int)>:
c001031e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010326:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001032d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010330:	e9 b5 fd ff ff       	jmp    c00100ea <VgaText::updateCursor()>

c0010335 <setActiveTerminal(VgaText*)>:
c0010335:	53                   	push   ebx
c0010336:	83 ec 08             	sub    esp,0x8
c0010339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001033d:	85 db                	test   ebx,ebx
c001033f:	75 11                	jne    c0010352 <setActiveTerminal(VgaText*)+0x1d>
c0010341:	c7 44 24 10 90 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a090
c0010349:	83 c4 08             	add    esp,0x8
c001034c:	5b                   	pop    ebx
c001034d:	e9 83 9a 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c0010352:	a1 44 d9 02 c0       	mov    eax,ds:0xc002d944
c0010357:	85 c0                	test   eax,eax
c0010359:	74 0c                	je     c0010367 <setActiveTerminal(VgaText*)+0x32>
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	50                   	push   eax
c001035f:	e8 86 fd ff ff       	call   c00100ea <VgaText::updateCursor()>
c0010364:	83 c4 10             	add    esp,0x10
c0010367:	89 1d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,ebx
c001036d:	51                   	push   ecx
c001036e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010371:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010374:	53                   	push   ebx
c0010375:	e8 a4 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010381:	75 07                	jne    c001038a <setActiveTerminal(VgaText*)+0x55>
c0010383:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001038a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001038e:	83 c4 08             	add    esp,0x8
c0010391:	5b                   	pop    ebx
c0010392:	e9 05 fd ff ff       	jmp    c001009c <VgaText::load()>

c0010397 <doTerminalCycle()>:
c0010397:	83 ec 18             	sub    esp,0x18
c001039a:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c001039f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103a2:	50                   	push   eax
c00103a3:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c00103a8:	e8 88 ff ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c00103ad:	83 c4 1c             	add    esp,0x1c
c00103b0:	c3                   	ret    
c00103b1:	90                   	nop

c00103b2 <VgaText::setCursorX(int)>:
c00103b2:	83 ec 10             	sub    esp,0x10
c00103b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103b9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c0:	50                   	push   eax
c00103c1:	e8 58 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00103c6:	83 c4 1c             	add    esp,0x1c
c00103c9:	c3                   	ret    

c00103ca <VgaText::setCursorY(int)>:
c00103ca:	83 ec 10             	sub    esp,0x10
c00103cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103d5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103d8:	50                   	push   eax
c00103d9:	e8 40 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00103de:	83 c4 1c             	add    esp,0x1c
c00103e1:	c3                   	ret    

c00103e2 <VgaText::incrementCursor(bool)>:
c00103e2:	56                   	push   esi
c00103e3:	53                   	push   ebx
c00103e4:	51                   	push   ecx
c00103e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103f0:	40                   	inc    eax
c00103f1:	83 f8 50             	cmp    eax,0x50
c00103f4:	74 05                	je     c00103fb <VgaText::incrementCursor(bool)+0x19>
c00103f6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103f9:	eb 24                	jmp    c001041f <VgaText::incrementCursor(bool)+0x3d>
c00103fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010405:	8d 50 01             	lea    edx,[eax+0x1]
c0010408:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001040b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001040e:	75 0f                	jne    c001041f <VgaText::incrementCursor(bool)+0x3d>
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010416:	53                   	push   ebx
c0010417:	e8 f0 fd ff ff       	call   c001020c <VgaText::scrollScreen()>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	89 f0                	mov    eax,esi
c0010421:	84 c0                	test   al,al
c0010423:	74 0c                	je     c0010431 <VgaText::incrementCursor(bool)+0x4f>
c0010425:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010429:	5a                   	pop    edx
c001042a:	5b                   	pop    ebx
c001042b:	5e                   	pop    esi
c001042c:	e9 b9 fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c0010431:	58                   	pop    eax
c0010432:	5b                   	pop    ebx
c0010433:	5e                   	pop    esi
c0010434:	c3                   	ret    
c0010435:	90                   	nop

c0010436 <VgaText::decrementCursor(bool)>:
c0010436:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001043a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001043e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010441:	85 c0                	test   eax,eax
c0010443:	74 04                	je     c0010449 <VgaText::decrementCursor(bool)+0x13>
c0010445:	48                   	dec    eax
c0010446:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010449:	84 c9                	test   cl,cl
c001044b:	74 09                	je     c0010456 <VgaText::decrementCursor(bool)+0x20>
c001044d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010451:	e9 94 fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010458:	53                   	push   ebx
c0010459:	83 ec 08             	sub    esp,0x8
c001045c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010464:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010468:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001046c:	3c 07                	cmp    al,0x7
c001046e:	75 2a                	jne    c001049a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010470:	a1 f8 d9 02 c0       	mov    eax,ds:0xc002d9f8
c0010475:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001047d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010485:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001048d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010491:	83 c4 08             	add    esp,0x8
c0010494:	5b                   	pop    ebx
c0010495:	e9 dc 2f 00 00       	jmp    c0013476 <Buzzer::beep(int, int, bool)>
c001049a:	3c 0d                	cmp    al,0xd
c001049c:	75 09                	jne    c00104a7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001049e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104a5:	eb 2c                	jmp    c00104d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104a7:	3c 0a                	cmp    al,0xa
c00104a9:	75 31                	jne    c00104dc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104b5:	8d 50 01             	lea    edx,[eax+0x1]
c00104b8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104bb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104be:	75 0f                	jne    c00104cf <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104c0:	83 ec 0c             	sub    esp,0xc
c00104c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104c6:	53                   	push   ebx
c00104c7:	e8 40 fd ff ff       	call   c001020c <VgaText::scrollScreen()>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104d3:	83 c4 08             	add    esp,0x8
c00104d6:	5b                   	pop    ebx
c00104d7:	e9 0e fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c00104dc:	3c 08                	cmp    al,0x8
c00104de:	75 25                	jne    c0010505 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104e0:	50                   	push   eax
c00104e1:	50                   	push   eax
c00104e2:	6a 01                	push   0x1
c00104e4:	53                   	push   ebx
c00104e5:	e8 4c ff ff ff       	call   c0010436 <VgaText::decrementCursor(bool)>
c00104ea:	5a                   	pop    edx
c00104eb:	59                   	pop    ecx
c00104ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104f5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104f8:	6a 20                	push   0x20
c00104fa:	53                   	push   ebx
c00104fb:	e8 b2 fd ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010500:	83 c4 28             	add    esp,0x28
c0010503:	5b                   	pop    ebx
c0010504:	c3                   	ret    
c0010505:	83 ec 08             	sub    esp,0x8
c0010508:	0f be c0             	movsx  eax,al
c001050b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010511:	51                   	push   ecx
c0010512:	52                   	push   edx
c0010513:	50                   	push   eax
c0010514:	53                   	push   ebx
c0010515:	e8 98 fd ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001051e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010526:	83 c4 28             	add    esp,0x28
c0010529:	5b                   	pop    ebx
c001052a:	e9 b3 fe ff ff       	jmp    c00103e2 <VgaText::incrementCursor(bool)>
c001052f:	90                   	nop

c0010530 <VgaText::doUpdate()>:
c0010530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010534:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010537:	85 c0                	test   eax,eax
c0010539:	74 02                	je     c001053d <VgaText::doUpdate()+0xd>
c001053b:	ff e0                	jmp    eax
c001053d:	c3                   	ret    

c001053e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001053e:	55                   	push   ebp
c001053f:	31 ed                	xor    ebp,ebp
c0010541:	57                   	push   edi
c0010542:	56                   	push   esi
c0010543:	53                   	push   ebx
c0010544:	83 ec 1c             	sub    esp,0x1c
c0010547:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001054b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010550:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010557:	50                   	push   eax
c0010558:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001055d:	50                   	push   eax
c001055e:	e8 97 fc ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010563:	59                   	pop    ecx
c0010564:	0f b6 c0             	movzx  eax,al
c0010567:	5e                   	pop    esi
c0010568:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001056d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010571:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010578:	0f b7 f6             	movzx  esi,si
c001057b:	01 f6                	add    esi,esi
c001057d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010580:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010583:	84 c0                	test   al,al
c0010585:	0f 84 fd 00 00 00    	je     c0010688 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001058b:	3c 0d                	cmp    al,0xd
c001058d:	75 0c                	jne    c001059b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001058f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010596:	e9 e7 00 00 00       	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001059b:	3c 0a                	cmp    al,0xa
c001059d:	75 47                	jne    c00105e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001059f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ac:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105af:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105b2:	75 0f                	jne    c00105c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105ba:	53                   	push   ebx
c00105bb:	e8 4c fc ff ff       	call   c001020c <VgaText::scrollScreen()>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	83 ec 0c             	sub    esp,0xc
c00105c6:	31 ed                	xor    ebp,ebp
c00105c8:	53                   	push   ebx
c00105c9:	e8 1c fb ff ff       	call   c00100ea <VgaText::updateCursor()>
c00105ce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105d3:	83 c4 10             	add    esp,0x10
c00105d6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105d9:	0f b7 f6             	movzx  esi,si
c00105dc:	01 f6                	add    esi,esi
c00105de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e1:	e9 9c 00 00 00       	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105e6:	3c 08                	cmp    al,0x8
c00105e8:	75 35                	jne    c001061f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105ea:	56                   	push   esi
c00105eb:	56                   	push   esi
c00105ec:	6a 01                	push   0x1
c00105ee:	53                   	push   ebx
c00105ef:	e8 42 fe ff ff       	call   c0010436 <VgaText::decrementCursor(bool)>
c00105f4:	58                   	pop    eax
c00105f5:	5a                   	pop    edx
c00105f6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105fc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105ff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010602:	6a 20                	push   0x20
c0010604:	53                   	push   ebx
c0010605:	e8 a8 fc ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001060a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001060f:	83 c4 20             	add    esp,0x20
c0010612:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010615:	0f b7 f6             	movzx  esi,si
c0010618:	01 f6                	add    esi,esi
c001061a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061d:	eb 63                	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001061f:	51                   	push   ecx
c0010620:	51                   	push   ecx
c0010621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010625:	50                   	push   eax
c0010626:	e8 75 fc ff ff       	call   c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	66 89 06             	mov    WORD PTR [esi],ax
c0010631:	39 1d 44 d9 02 c0    	cmp    DWORD PTR ds:0xc002d944,ebx
c0010637:	75 21                	jne    c001065a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010639:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001063c:	85 c0                	test   eax,eax
c001063e:	74 1a                	je     c001065a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010640:	52                   	push   edx
c0010641:	52                   	push   edx
c0010642:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010645:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010648:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001064c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010650:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010653:	51                   	push   ecx
c0010654:	53                   	push   ebx
c0010655:	ff d0                	call   eax
c0010657:	83 c4 20             	add    esp,0x20
c001065a:	83 c6 02             	add    esi,0x2
c001065d:	50                   	push   eax
c001065e:	50                   	push   eax
c001065f:	6a 00                	push   0x0
c0010661:	53                   	push   ebx
c0010662:	e8 7b fd ff ff       	call   c00103e2 <VgaText::incrementCursor(bool)>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001066e:	75 0d                	jne    c001067d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010670:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010675:	0f b7 f6             	movzx  esi,si
c0010678:	01 f6                	add    esi,esi
c001067a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001067d:	bd 01 00 00 00       	mov    ebp,0x1
c0010682:	47                   	inc    edi
c0010683:	e9 f8 fe ff ff       	jmp    c0010580 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	53                   	push   ebx
c001068c:	e8 59 fa ff ff       	call   c00100ea <VgaText::updateCursor()>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	89 e8                	mov    eax,ebp
c0010696:	84 c0                	test   al,al
c0010698:	74 0c                	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	53                   	push   ebx
c001069e:	e8 8d fe ff ff       	call   c0010530 <VgaText::doUpdate()>
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ad:	83 c4 1c             	add    esp,0x1c
c00106b0:	5b                   	pop    ebx
c00106b1:	5e                   	pop    esi
c00106b2:	5f                   	pop    edi
c00106b3:	5d                   	pop    ebp
c00106b4:	c3                   	ret    
c00106b5:	90                   	nop

c00106b6 <VgaText::clearScreen()>:
c00106b6:	57                   	push   edi
c00106b7:	56                   	push   esi
c00106b8:	31 f6                	xor    esi,esi
c00106ba:	53                   	push   ebx
c00106bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106bf:	52                   	push   edx
c00106c0:	6a 00                	push   0x0
c00106c2:	6a 00                	push   0x0
c00106c4:	53                   	push   ebx
c00106c5:	e8 54 fc ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00106ca:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106d7:	7e 20                	jle    c00106f9 <VgaText::clearScreen()+0x43>
c00106d9:	31 ff                	xor    edi,edi
c00106db:	50                   	push   eax
c00106dc:	50                   	push   eax
c00106dd:	56                   	push   esi
c00106de:	57                   	push   edi
c00106df:	47                   	inc    edi
c00106e0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106e3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106e6:	6a 20                	push   0x20
c00106e8:	53                   	push   ebx
c00106e9:	e8 c4 fb ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106ee:	83 c4 20             	add    esp,0x20
c00106f1:	83 ff 50             	cmp    edi,0x50
c00106f4:	75 e5                	jne    c00106db <VgaText::clearScreen()+0x25>
c00106f6:	46                   	inc    esi
c00106f7:	eb db                	jmp    c00106d4 <VgaText::clearScreen()+0x1e>
c00106f9:	83 ec 0c             	sub    esp,0xc
c00106fc:	53                   	push   ebx
c00106fd:	e8 2e fe ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010702:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010709:	83 c4 10             	add    esp,0x10
c001070c:	5b                   	pop    ebx
c001070d:	5e                   	pop    esi
c001070e:	5f                   	pop    edi
c001070f:	c3                   	ret    

c0010710 <VgaText::putchar(char)>:
c0010710:	56                   	push   esi
c0010711:	53                   	push   ebx
c0010712:	83 ec 14             	sub    esp,0x14
c0010715:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010719:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001071d:	3c 5b                	cmp    al,0x5b
c001071f:	75 18                	jne    c0010739 <VgaText::putchar(char)+0x29>
c0010721:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010725:	74 1f                	je     c0010746 <VgaText::putchar(char)+0x36>
c0010727:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001072d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010734:	e9 bd 00 00 00       	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c0010739:	3c 1b                	cmp    al,0x1b
c001073b:	75 09                	jne    c0010746 <VgaText::putchar(char)+0x36>
c001073d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010741:	e9 b0 00 00 00       	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c0010746:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010749:	84 c9                	test   cl,cl
c001074b:	0f 84 92 00 00 00    	je     c00107e3 <VgaText::putchar(char)+0xd3>
c0010751:	8d 50 c0             	lea    edx,[eax-0x40]
c0010754:	80 fa 3e             	cmp    dl,0x3e
c0010757:	77 76                	ja     c00107cf <VgaText::putchar(char)+0xbf>
c0010759:	3c 6d                	cmp    al,0x6d
c001075b:	75 47                	jne    c00107a4 <VgaText::putchar(char)+0x94>
c001075d:	31 f6                	xor    esi,esi
c001075f:	31 d2                	xor    edx,edx
c0010761:	31 c0                	xor    eax,eax
c0010763:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010766:	7e 2d                	jle    c0010795 <VgaText::putchar(char)+0x85>
c0010768:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001076d:	80 fa 3b             	cmp    dl,0x3b
c0010770:	75 17                	jne    c0010789 <VgaText::putchar(char)+0x79>
c0010772:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010776:	50                   	push   eax
c0010777:	53                   	push   ebx
c0010778:	e8 83 f9 ff ff       	call   c0010100 <VgaText::doANSI_SGR(int)>
c001077d:	59                   	pop    ecx
c001077e:	31 d2                	xor    edx,edx
c0010780:	58                   	pop    eax
c0010781:	31 c0                	xor    eax,eax
c0010783:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010787:	eb 09                	jmp    c0010792 <VgaText::putchar(char)+0x82>
c0010789:	6b c0 0a             	imul   eax,eax,0xa
c001078c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010790:	88 ca                	mov    dl,cl
c0010792:	46                   	inc    esi
c0010793:	eb ce                	jmp    c0010763 <VgaText::putchar(char)+0x53>
c0010795:	84 d2                	test   dl,dl
c0010797:	74 2e                	je     c00107c7 <VgaText::putchar(char)+0xb7>
c0010799:	50                   	push   eax
c001079a:	53                   	push   ebx
c001079b:	e8 60 f9 ff ff       	call   c0010100 <VgaText::doANSI_SGR(int)>
c00107a0:	58                   	pop    eax
c00107a1:	5a                   	pop    edx
c00107a2:	eb 23                	jmp    c00107c7 <VgaText::putchar(char)+0xb7>
c00107a4:	3c 4a                	cmp    al,0x4a
c00107a6:	75 1f                	jne    c00107c7 <VgaText::putchar(char)+0xb7>
c00107a8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ac:	75 19                	jne    c00107c7 <VgaText::putchar(char)+0xb7>
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	53                   	push   ebx
c00107b2:	e8 ff fe ff ff       	call   c00106b6 <VgaText::clearScreen()>
c00107b7:	83 c4 0c             	add    esp,0xc
c00107ba:	6a 00                	push   0x0
c00107bc:	6a 00                	push   0x0
c00107be:	53                   	push   ebx
c00107bf:	e8 5a fb ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00107c4:	83 c4 10             	add    esp,0x10
c00107c7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107cd:	eb 27                	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c00107cf:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107d2:	83 fa 0e             	cmp    edx,0xe
c00107d5:	7f 1f                	jg     c00107f6 <VgaText::putchar(char)+0xe6>
c00107d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107da:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107dd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107e1:	eb 13                	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c00107e3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107e6:	0f be c0             	movsx  eax,al
c00107e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107ec:	50                   	push   eax
c00107ed:	53                   	push   ebx
c00107ee:	e8 65 fc ff ff       	call   c0010458 <VgaText::putchar(char, VgaColour, VgaColour)>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	83 c4 14             	add    esp,0x14
c00107f9:	5b                   	pop    ebx
c00107fa:	5e                   	pop    esi
c00107fb:	c3                   	ret    

c00107fc <VgaText::putx(unsigned int)>:
c00107fc:	57                   	push   edi
c00107fd:	b9 11 00 00 00       	mov    ecx,0x11
c0010802:	56                   	push   esi
c0010803:	be 9e a0 02 c0       	mov    esi,0xc002a09e
c0010808:	53                   	push   ebx
c0010809:	83 ec 20             	sub    esp,0x20
c001080c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010810:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010814:	fc                   	cld    
c0010815:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010817:	be 08 00 00 00       	mov    esi,0x8
c001081c:	50                   	push   eax
c001081d:	50                   	push   eax
c001081e:	89 d8                	mov    eax,ebx
c0010820:	c1 e3 04             	shl    ebx,0x4
c0010823:	c1 e8 1c             	shr    eax,0x1c
c0010826:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001082b:	50                   	push   eax
c001082c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010830:	e8 db fe ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010835:	83 c4 10             	add    esp,0x10
c0010838:	4e                   	dec    esi
c0010839:	75 e1                	jne    c001081c <VgaText::putx(unsigned int)+0x20>
c001083b:	83 c4 20             	add    esp,0x20
c001083e:	5b                   	pop    ebx
c001083f:	5e                   	pop    esi
c0010840:	5f                   	pop    edi
c0010841:	c3                   	ret    

c0010842 <VgaText::puts(char const*)>:
c0010842:	53                   	push   ebx
c0010843:	83 ec 08             	sub    esp,0x8
c0010846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001084a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001084d:	84 c0                	test   al,al
c001084f:	74 12                	je     c0010863 <VgaText::puts(char const*)+0x21>
c0010851:	43                   	inc    ebx
c0010852:	51                   	push   ecx
c0010853:	51                   	push   ecx
c0010854:	50                   	push   eax
c0010855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010859:	e8 b2 fe ff ff       	call   c0010710 <VgaText::putchar(char)>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	eb e7                	jmp    c001084a <VgaText::puts(char const*)+0x8>
c0010863:	83 c4 08             	add    esp,0x8
c0010866:	5b                   	pop    ebx
c0010867:	c3                   	ret    

c0010868 <VgaText::VgaText(char const*)>:
c0010868:	57                   	push   edi
c0010869:	56                   	push   esi
c001086a:	53                   	push   ebx
c001086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086f:	83 ec 08             	sub    esp,0x8
c0010872:	6a 00                	push   0x0
c0010874:	50                   	push   eax
c0010875:	e8 42 05 00 00       	call   c0010dbc <UnixFile::UnixFile(int)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	ba 04 a1 02 c0       	mov    edx,0xc002a104
c0010882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010886:	89 10                	mov    DWORD PTR [eax],edx
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108de:	8d 50 60             	lea    edx,[eax+0x60]
c00108e1:	bb 20 d9 02 c0       	mov    ebx,0xc002d920
c00108e6:	b8 08 00 00 00       	mov    eax,0x8
c00108eb:	fc                   	cld    
c00108ec:	89 d7                	mov    edi,edx
c00108ee:	89 de                	mov    esi,ebx
c00108f0:	89 c1                	mov    ecx,eax
c00108f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	05 82 00 00 00       	add    eax,0x82
c00108fd:	83 ec 08             	sub    esp,0x8
c0010900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010904:	50                   	push   eax
c0010905:	e8 02 ff fe ff       	call   c000080c <strcpy>
c001090a:	83 c4 10             	add    esp,0x10
c001090d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010911:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	6a 01                	push   0x1
c001091d:	e8 dd 08 00 00       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0010922:	83 c4 10             	add    esp,0x10
c0010925:	89 c2                	mov    edx,eax
c0010927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001092e:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001093b:	89 c6                	mov    esi,eax
c001093d:	e8 2f f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c0010942:	6a 05                	push   0x5
c0010944:	56                   	push   esi
c0010945:	50                   	push   eax
c0010946:	53                   	push   ebx
c0010947:	e8 70 10 00 00       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001094c:	83 c4 10             	add    esp,0x10
c001094f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010953:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010956:	83 ec 04             	sub    esp,0x4
c0010959:	68 00 0f 00 00       	push   0xf00
c001095e:	6a 00                	push   0x0
c0010960:	50                   	push   eax
c0010961:	e8 ea fd fe ff       	call   c0000750 <memset>
c0010966:	83 c4 10             	add    esp,0x10
c0010969:	83 ec 04             	sub    esp,0x4
c001096c:	6a 00                	push   0x0
c001096e:	6a 07                	push   0x7
c0010970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010974:	e8 1b f8 ff ff       	call   c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	83 ec 04             	sub    esp,0x4
c001097f:	6a 00                	push   0x0
c0010981:	6a 00                	push   0x0
c0010983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010987:	e8 92 f9 ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c001098c:	83 c4 10             	add    esp,0x10
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010996:	e8 1b fd ff ff       	call   c00106b6 <VgaText::clearScreen()>
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	05 02 01 00 00       	add    eax,0x102
c00109af:	83 ec 04             	sub    esp,0x4
c00109b2:	68 96 00 00 00       	push   0x96
c00109b7:	6a 00                	push   0x0
c00109b9:	50                   	push   eax
c00109ba:	e8 91 fd fe ff       	call   c0000750 <memset>
c00109bf:	83 c4 10             	add    esp,0x10
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	05 98 01 00 00       	add    eax,0x198
c00109cb:	83 ec 04             	sub    esp,0x4
c00109ce:	68 2c 01 00 00       	push   0x12c
c00109d3:	6a 00                	push   0x0
c00109d5:	50                   	push   eax
c00109d6:	e8 75 fd fe ff       	call   c0000750 <memset>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	90                   	nop
c00109df:	5b                   	pop    ebx
c00109e0:	5e                   	pop    esi
c00109e1:	5f                   	pop    edi
c00109e2:	c3                   	ret    
c00109e3:	90                   	nop

c00109e4 <VgaText::receiveKey(unsigned char)>:
c00109e4:	55                   	push   ebp
c00109e5:	57                   	push   edi
c00109e6:	56                   	push   esi
c00109e7:	53                   	push   ebx
c00109e8:	83 ec 1c             	sub    esp,0x1c
c00109eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109f3:	84 db                	test   bl,bl
c00109f5:	0f 84 c9 00 00 00    	je     c0010ac4 <VgaText::receiveKey(unsigned char)+0xe0>
c00109fb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a01:	80 fb 08             	cmp    bl,0x8
c0010a04:	75 2c                	jne    c0010a32 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	57                   	push   edi
c0010a0a:	e8 5d fd fe ff       	call   c000076c <strlen>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	85 c0                	test   eax,eax
c0010a14:	74 41                	je     c0010a57 <VgaText::receiveKey(unsigned char)+0x73>
c0010a16:	50                   	push   eax
c0010a17:	50                   	push   eax
c0010a18:	6a 08                	push   0x8
c0010a1a:	56                   	push   esi
c0010a1b:	e8 f0 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010a20:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a23:	e8 44 fd fe ff       	call   c000076c <strlen>
c0010a28:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a30:	eb 22                	jmp    c0010a54 <VgaText::receiveKey(unsigned char)+0x70>
c0010a32:	0f be c3             	movsx  eax,bl
c0010a35:	52                   	push   edx
c0010a36:	52                   	push   edx
c0010a37:	50                   	push   eax
c0010a38:	56                   	push   esi
c0010a39:	e8 d2 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010a3e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a42:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a47:	59                   	pop    ecx
c0010a48:	5d                   	pop    ebp
c0010a49:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a4d:	50                   	push   eax
c0010a4e:	57                   	push   edi
c0010a4f:	e8 f8 fe fe ff       	call   c000094c <strcat>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a5e:	75 05                	jne    c0010a65 <VgaText::receiveKey(unsigned char)+0x81>
c0010a60:	80 fb 0a             	cmp    bl,0xa
c0010a63:	75 53                	jne    c0010ab8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a65:	83 ec 0c             	sub    esp,0xc
c0010a68:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a6e:	53                   	push   ebx
c0010a6f:	e8 f8 fc fe ff       	call   c000076c <strlen>
c0010a74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a77:	89 c5                	mov    ebp,eax
c0010a79:	e8 ee fc fe ff       	call   c000076c <strlen>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a85:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a8a:	76 10                	jbe    c0010a9c <VgaText::receiveKey(unsigned char)+0xb8>
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	68 af a0 02 c0       	push   0xc002a0af
c0010a94:	e8 3c 93 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	50                   	push   eax
c0010a9d:	50                   	push   eax
c0010a9e:	57                   	push   edi
c0010a9f:	53                   	push   ebx
c0010aa0:	e8 a7 fe fe ff       	call   c000094c <strcat>
c0010aa5:	83 c4 0c             	add    esp,0xc
c0010aa8:	68 96 00 00 00       	push   0x96
c0010aad:	6a 00                	push   0x0
c0010aaf:	57                   	push   edi
c0010ab0:	e8 9b fc fe ff       	call   c0000750 <memset>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	56                   	push   esi
c0010abc:	e8 6f fa ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	83 c4 1c             	add    esp,0x1c
c0010ac7:	5b                   	pop    ebx
c0010ac8:	5e                   	pop    esi
c0010ac9:	5f                   	pop    edi
c0010aca:	5d                   	pop    ebp
c0010acb:	c3                   	ret    

c0010acc <VgaText::write(unsigned long long, void*, int*)>:
c0010acc:	55                   	push   ebp
c0010acd:	57                   	push   edi
c0010ace:	56                   	push   esi
c0010acf:	53                   	push   ebx
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ae9:	39 eb                	cmp    ebx,ebp
c0010aeb:	74 13                	je     c0010b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010aed:	43                   	inc    ebx
c0010aee:	50                   	push   eax
c0010aef:	50                   	push   eax
c0010af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010af4:	50                   	push   eax
c0010af5:	56                   	push   esi
c0010af6:	e8 15 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010afb:	83 c4 10             	add    esp,0x10
c0010afe:	eb e9                	jmp    c0010ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b0a:	56                   	push   esi
c0010b0b:	e8 20 fa ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010b10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b14:	89 38                	mov    DWORD PTR [eax],edi
c0010b16:	83 c4 1c             	add    esp,0x1c
c0010b19:	31 c0                	xor    eax,eax
c0010b1b:	5b                   	pop    ebx
c0010b1c:	5e                   	pop    esi
c0010b1d:	5f                   	pop    edi
c0010b1e:	5d                   	pop    ebp
c0010b1f:	c3                   	ret    

c0010b20 <newTerminal(char*)>:
c0010b20:	83 ec 28             	sub    esp,0x28
c0010b23:	68 c4 02 00 00       	push   0x2c4
c0010b28:	e8 6c ea ff ff       	call   c000f599 <malloc>
c0010b2d:	5a                   	pop    edx
c0010b2e:	59                   	pop    ecx
c0010b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b33:	50                   	push   eax
c0010b34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b38:	e8 2b fd ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c0010b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b41:	83 c4 2c             	add    esp,0x2c
c0010b44:	c3                   	ret    
c0010b45:	90                   	nop

c0010b46 <TSS::TSS()>:
c0010b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b51:	90                   	nop
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <TSS::setESP(unsigned long)>:
c0010b54:	55                   	push   ebp
c0010b55:	89 e5                	mov    ebp,esp
c0010b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b63:	90                   	nop
c0010b64:	5d                   	pop    ebp
c0010b65:	c3                   	ret    

c0010b66 <TSS::flush()>:
c0010b66:	55                   	push   ebp
c0010b67:	89 e5                	mov    ebp,esp
c0010b69:	83 ec 10             	sub    esp,0x10
c0010b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b71:	83 c8 03             	or     eax,0x3
c0010b74:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b78:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b7c:	66 89 d0             	mov    ax,dx
c0010b7f:	0f 00 d8             	ltr    ax
c0010b82:	90                   	nop
c0010b83:	c9                   	leave  
c0010b84:	c3                   	ret    
c0010b85:	90                   	nop

c0010b86 <TSS::setup(unsigned long, unsigned long)>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 18             	sub    esp,0x18
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	6a 68                	push   0x68
c0010b91:	e8 03 ea ff ff       	call   c000f599 <malloc>
c0010b96:	83 c4 10             	add    esp,0x10
c0010b99:	89 c2                	mov    edx,eax
c0010b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	83 ec 04             	sub    esp,0x4
c0010baa:	6a 68                	push   0x68
c0010bac:	6a 00                	push   0x0
c0010bae:	50                   	push   eax
c0010baf:	e8 9c fb fe ff       	call   c0000750 <memset>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bed:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c05:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c11:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c29:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c41:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c4e:	0f 20 da             	mov    edx,cr3
c0010c51:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c54:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c57:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c60:	83 ec 08             	sub    esp,0x8
c0010c63:	50                   	push   eax
c0010c64:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c67:	50                   	push   eax
c0010c68:	e8 25 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	83 ec 08             	sub    esp,0x8
c0010c73:	6a 68                	push   0x68
c0010c75:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c78:	50                   	push   eax
c0010c79:	e8 30 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c7e:	83 c4 10             	add    esp,0x10
c0010c81:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c85:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c88:	83 e0 0f             	and    eax,0xf
c0010c8b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c8e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c91:	83 c8 40             	or     eax,0x40
c0010c94:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c97:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0010c9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ca2:	05 78 01 00 00       	add    eax,0x178
c0010ca7:	83 ec 04             	sub    esp,0x4
c0010caa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010cad:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cb0:	50                   	push   eax
c0010cb1:	e8 2c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cb6:	83 c4 10             	add    esp,0x10
c0010cb9:	89 c2                	mov    edx,eax
c0010cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbe:	89 10                	mov    DWORD PTR [eax],edx
c0010cc0:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0010cc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ccb:	05 78 01 00 00       	add    eax,0x178
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	50                   	push   eax
c0010cd4:	e8 33 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cd9:	83 c4 10             	add    esp,0x10
c0010cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ce1:	c9                   	leave  
c0010ce2:	c3                   	ret    
c0010ce3:	90                   	nop

c0010ce4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cf4:	75 08                	jne    c0010cfe <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cf6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cfc:	eb 38                	jmp    c0010d36 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cfe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d03:	75 17                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d0d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d13:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d19:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d1c:	89 c1                	mov    ecx,eax
c0010d1e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d21:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d27:	74 cd                	je     c0010cf6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d29:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d2e:	83 e0 ef             	and    eax,0xffffffef
c0010d31:	83 f8 08             	cmp    eax,0x8
c0010d34:	76 c0                	jbe    c0010cf6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d36:	31 c0                	xor    eax,eax
c0010d38:	c3                   	ret    
c0010d39:	90                   	nop

c0010d3a <ReservedFilename::isAtty()>:
c0010d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d41:	31 c0                	xor    eax,eax
c0010d43:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d49:	74 09                	je     c0010d54 <ReservedFilename::isAtty()+0x1a>
c0010d4b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d51:	0f 94 c0             	sete   al
c0010d54:	c3                   	ret    
c0010d55:	90                   	nop

c0010d56 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d65:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d6a:	75 08                	jne    c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d6c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d72:	eb 3d                	jmp    c0010db1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d74:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d79:	75 17                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d83:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d89:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d8f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d92:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d97:	75 04                	jne    c0010d9d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d99:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d9b:	eb 14                	jmp    c0010db1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d9d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010da2:	74 c8                	je     c0010d6c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010da4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010da9:	83 e0 ef             	and    eax,0xffffffef
c0010dac:	83 f8 08             	cmp    eax,0x8
c0010daf:	76 bb                	jbe    c0010d6c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010db1:	31 c0                	xor    eax,eax
c0010db3:	c3                   	ret    

c0010db4 <UnixFile::getFileDescriptor()>:
c0010db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dbb:	c3                   	ret    

c0010dbc <UnixFile::UnixFile(int)>:
c0010dbc:	53                   	push   ebx
c0010dbd:	83 ec 28             	sub    esp,0x28
c0010dc0:	ba cc a1 02 c0       	mov    edx,0xc002a1cc
c0010dc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dc9:	89 10                	mov    DWORD PTR [eax],edx
c0010dcb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010dd3:	0f 8f 8c 01 00 00    	jg     c0010f65 <UnixFile::UnixFile(int)+0x1a9>
c0010dd9:	a1 20 c8 02 c0       	mov    eax,ds:0xc002c820
c0010dde:	8d 50 01             	lea    edx,[eax+0x1]
c0010de1:	89 15 20 c8 02 c0    	mov    DWORD PTR ds:0xc002c820,edx
c0010de7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010deb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dee:	83 ec 08             	sub    esp,0x8
c0010df1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010df5:	68 d8 d9 02 c0       	push   0xc002d9d8
c0010dfa:	e8 17 76 01 00       	call   c0028416 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	a0 d4 d9 02 c0       	mov    al,ds:0xc002d9d4
c0010e07:	83 f0 01             	xor    eax,0x1
c0010e0a:	84 c0                	test   al,al
c0010e0c:	0f 84 54 01 00 00    	je     c0010f66 <UnixFile::UnixFile(int)+0x1aa>
c0010e12:	c6 05 d4 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9d4,0x1
c0010e19:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e21:	83 ec 0c             	sub    esp,0xc
c0010e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e28:	e8 6c e7 ff ff       	call   c000f599 <malloc>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	89 c3                	mov    ebx,eax
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	68 03 ff ff 0f       	push   0xfffff03
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 2c 01 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	89 1d cc d9 02 c0    	mov    DWORD PTR ds:0xc002d9cc,ebx
c0010e49:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e58:	e8 3c e7 ff ff       	call   c000f599 <malloc>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	89 c3                	mov    ebx,eax
c0010e62:	83 ec 08             	sub    esp,0x8
c0010e65:	68 01 ff ff 0f       	push   0xfffff01
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 fc 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	89 1d d0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9d0,ebx
c0010e79:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e81:	83 ec 0c             	sub    esp,0xc
c0010e84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e88:	e8 0c e7 ff ff       	call   c000f599 <malloc>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	89 c3                	mov    ebx,eax
c0010e92:	83 ec 08             	sub    esp,0x8
c0010e95:	68 00 ff ff 0f       	push   0xfffff00
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 cc 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	89 1d c4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c4,ebx
c0010ea9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eb8:	e8 dc e6 ff ff       	call   c000f599 <malloc>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	89 c3                	mov    ebx,eax
c0010ec2:	83 ec 08             	sub    esp,0x8
c0010ec5:	68 02 ff ff 0f       	push   0xfffff02
c0010eca:	53                   	push   ebx
c0010ecb:	e8 9c 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	89 1d c8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c8,ebx
c0010ed9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ee1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010ee6:	7f 7e                	jg     c0010f66 <UnixFile::UnixFile(int)+0x1aa>
c0010ee8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef7:	e8 9d e6 ff ff       	call   c000f599 <malloc>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 c3                	mov    ebx,eax
c0010f01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f05:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f0a:	83 ec 08             	sub    esp,0x8
c0010f0d:	50                   	push   eax
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 58 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1b:	89 1c 85 a0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2660],ebx
c0010f22:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f2a:	83 ec 0c             	sub    esp,0xc
c0010f2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f31:	e8 63 e6 ff ff       	call   c000f599 <malloc>
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	89 c3                	mov    ebx,eax
c0010f3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f44:	83 ec 08             	sub    esp,0x8
c0010f47:	50                   	push   eax
c0010f48:	53                   	push   ebx
c0010f49:	e8 1e 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f55:	89 1c 85 60 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26a0],ebx
c0010f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f60:	e9 7c ff ff ff       	jmp    c0010ee1 <UnixFile::UnixFile(int)+0x125>
c0010f65:	90                   	nop
c0010f66:	83 c4 28             	add    esp,0x28
c0010f69:	5b                   	pop    ebx
c0010f6a:	c3                   	ret    
c0010f6b:	90                   	nop

c0010f6c <ReservedFilename::ReservedFilename(int)>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f73:	83 ec 08             	sub    esp,0x8
c0010f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7a:	50                   	push   eax
c0010f7b:	e8 3c fe ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	89 10                	mov    DWORD PTR [eax],edx
c0010f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f96:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f99:	90                   	nop
c0010f9a:	83 c4 0c             	add    esp,0xc
c0010f9d:	c3                   	ret    

c0010f9e <UnixFile::~UnixFile()>:
c0010f9e:	83 ec 1c             	sub    esp,0x1c
c0010fa1:	ba cc a1 02 c0       	mov    edx,0xc002a1cc
c0010fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fb8:	7f 73                	jg     c001102d <UnixFile::~UnixFile()+0x8f>
c0010fba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	68 d8 d9 02 c0       	push   0xc002d9d8
c0010fca:	e8 1b 75 01 00       	call   c00284ea <LinkedList<UnixFile>::getFirstElement()>
c0010fcf:	83 c4 10             	add    esp,0x10
c0010fd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	68 d8 d9 02 c0       	push   0xc002d9d8
c0010fde:	e8 0f 75 01 00       	call   c00284f2 <LinkedList<UnixFile>::removeFirst()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fea:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fee:	74 40                	je     c0011030 <UnixFile::~UnixFile()+0x92>
c0010ff0:	83 ec 08             	sub    esp,0x8
c0010ff3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ff7:	68 d8 d9 02 c0       	push   0xc002d9d8
c0010ffc:	e8 15 74 01 00       	call   c0028416 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011008:	8d 50 01             	lea    edx,[eax+0x1]
c001100b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001100f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011014:	0f 94 c0             	sete   al
c0011017:	84 c0                	test   al,al
c0011019:	74 a7                	je     c0010fc2 <UnixFile::~UnixFile()+0x24>
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	68 a4 a1 02 c0       	push   0xc002a1a4
c0011023:	e8 ad 8d 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011028:	83 c4 10             	add    esp,0x10
c001102b:	eb 95                	jmp    c0010fc2 <UnixFile::~UnixFile()+0x24>
c001102d:	90                   	nop
c001102e:	eb 01                	jmp    c0011031 <UnixFile::~UnixFile()+0x93>
c0011030:	90                   	nop
c0011031:	90                   	nop
c0011032:	83 c4 1c             	add    esp,0x1c
c0011035:	c3                   	ret    

c0011036 <UnixFile::~UnixFile()>:
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011040:	e8 59 ff ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	6a 0c                	push   0xc
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 3b 15 00 00       	call   c0012591 <operator delete(void*, unsigned long)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	83 c4 0c             	add    esp,0xc
c001105c:	c3                   	ret    
c001105d:	90                   	nop

c001105e <ReservedFilename::~ReservedFilename()>:
c001105e:	83 ec 0c             	sub    esp,0xc
c0011061:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c0011066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106a:	89 10                	mov    DWORD PTR [eax],edx
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	50                   	push   eax
c0011074:	e8 25 ff ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	90                   	nop
c001107d:	83 c4 0c             	add    esp,0xc
c0011080:	c3                   	ret    
c0011081:	90                   	nop

c0011082 <ReservedFilename::~ReservedFilename()>:
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001108c:	e8 cd ff ff ff       	call   c001105e <ReservedFilename::~ReservedFilename()>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	83 ec 08             	sub    esp,0x8
c0011097:	6a 0c                	push   0xc
c0011099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001109d:	e8 ef 14 00 00       	call   c0012591 <operator delete(void*, unsigned long)>
c00110a2:	83 c4 10             	add    esp,0x10
c00110a5:	83 c4 0c             	add    esp,0xc
c00110a8:	c3                   	ret    

c00110a9 <getFromFileDescriptor(int)>:
c00110a9:	53                   	push   ebx
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110b1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110b7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110bd:	7f 2c                	jg     c00110eb <getFromFileDescriptor(int)+0x42>
c00110bf:	83 ec 0c             	sub    esp,0xc
c00110c2:	68 d8 d9 02 c0       	push   0xc002d9d8
c00110c7:	e8 1e 74 01 00       	call   c00284ea <LinkedList<UnixFile>::getFirstElement()>
c00110cc:	83 c4 10             	add    esp,0x10
c00110cf:	85 c0                	test   eax,eax
c00110d1:	75 04                	jne    c00110d7 <getFromFileDescriptor(int)+0x2e>
c00110d3:	31 c0                	xor    eax,eax
c00110d5:	eb 6e                	jmp    c0011145 <getFromFileDescriptor(int)+0x9c>
c00110d7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110da:	74 69                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c00110dc:	52                   	push   edx
c00110dd:	52                   	push   edx
c00110de:	50                   	push   eax
c00110df:	68 d8 d9 02 c0       	push   0xc002d9d8
c00110e4:	e8 ab 74 01 00       	call   c0028594 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110e9:	eb e1                	jmp    c00110cc <getFromFileDescriptor(int)+0x23>
c00110eb:	a1 cc d9 02 c0       	mov    eax,ds:0xc002d9cc
c00110f0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110f6:	74 4d                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c00110f8:	a1 d0 d9 02 c0       	mov    eax,ds:0xc002d9d0
c00110fd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011103:	74 40                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c0011105:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001110a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011110:	74 33                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c0011112:	a1 c4 d9 02 c0       	mov    eax,ds:0xc002d9c4
c0011117:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001111d:	74 26                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c001111f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011125:	83 f8 08             	cmp    eax,0x8
c0011128:	77 09                	ja     c0011133 <getFromFileDescriptor(int)+0x8a>
c001112a:	8b 04 85 a0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2660]
c0011131:	eb 12                	jmp    c0011145 <getFromFileDescriptor(int)+0x9c>
c0011133:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011139:	83 fb 08             	cmp    ebx,0x8
c001113c:	77 95                	ja     c00110d3 <getFromFileDescriptor(int)+0x2a>
c001113e:	8b 04 9d 60 d9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd26a0]
c0011145:	83 c4 08             	add    esp,0x8
c0011148:	5b                   	pop    ebx
c0011149:	c3                   	ret    

c001114a <__static_initialization_and_destruction_0(int, int)>:
c001114a:	83 ec 0c             	sub    esp,0xc
c001114d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011152:	75 34                	jne    c0011188 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011154:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001115c:	75 2a                	jne    c0011188 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001115e:	83 ec 0c             	sub    esp,0xc
c0011161:	68 d8 d9 02 c0       	push   0xc002d9d8
c0011166:	e8 69 72 01 00       	call   c00283d4 <LinkedList<UnixFile>::LinkedList()>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	83 ec 04             	sub    esp,0x4
c0011171:	68 58 c6 02 c0       	push   0xc002c658
c0011176:	68 d8 d9 02 c0       	push   0xc002d9d8
c001117b:	68 d2 83 02 c0       	push   0xc00283d2
c0011180:	e8 86 13 00 00       	call   c001250b <__cxa_atexit>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	90                   	nop
c0011189:	83 c4 0c             	add    esp,0xc
c001118c:	c3                   	ret    

c001118d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001118d:	83 ec 0c             	sub    esp,0xc
c0011190:	83 ec 08             	sub    esp,0x8
c0011193:	68 ff ff 00 00       	push   0xffff
c0011198:	6a 01                	push   0x1
c001119a:	e8 ab ff ff ff       	call   c001114a <__static_initialization_and_destruction_0(int, int)>
c001119f:	83 c4 10             	add    esp,0x10
c00111a2:	83 c4 0c             	add    esp,0xc
c00111a5:	c3                   	ret    

c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111a6:	53                   	push   ebx
c00111a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111af:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111b5:	89 c8                	mov    eax,ecx
c00111b7:	d1 e8                	shr    eax,1
c00111b9:	03 05 28 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c828
c00111bf:	83 e1 01             	and    ecx,0x1
c00111c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111c4:	75 09                	jne    c00111cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111c6:	83 e2 f0             	and    edx,0xfffffff0
c00111c9:	09 da                	or     edx,ebx
c00111cb:	88 10                	mov    BYTE PTR [eax],dl
c00111cd:	5b                   	pop    ebx
c00111ce:	c3                   	ret    
c00111cf:	c1 e3 04             	shl    ebx,0x4
c00111d2:	83 e2 0f             	and    edx,0xf
c00111d5:	09 da                	or     edx,ebx
c00111d7:	88 10                	mov    BYTE PTR [eax],dl
c00111d9:	5b                   	pop    ebx
c00111da:	c3                   	ret    

c00111db <Virt::getPageState(unsigned long)>:
c00111db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111df:	8b 0d 28 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c828
c00111e5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111eb:	89 d0                	mov    eax,edx
c00111ed:	d1 e8                	shr    eax,1
c00111ef:	83 e2 01             	and    edx,0x1
c00111f2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111f5:	75 04                	jne    c00111fb <Virt::getPageState(unsigned long)+0x20>
c00111f7:	83 e0 0f             	and    eax,0xf
c00111fa:	c3                   	ret    
c00111fb:	c0 e8 04             	shr    al,0x4
c00111fe:	c3                   	ret    

c00111ff <Virt::allocateKernelVirtualPages(int)>:
c00111ff:	55                   	push   ebp
c0011200:	31 ed                	xor    ebp,ebp
c0011202:	57                   	push   edi
c0011203:	56                   	push   esi
c0011204:	53                   	push   ebx
c0011205:	31 db                	xor    ebx,ebx
c0011207:	83 ec 1c             	sub    esp,0x1c
c001120a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001120e:	8b 3d 24 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c824
c0011214:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011219:	57                   	push   edi
c001121a:	e8 bc ff ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c001121f:	5a                   	pop    edx
c0011220:	84 c0                	test   al,al
c0011222:	75 3a                	jne    c001125e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011224:	85 db                	test   ebx,ebx
c0011226:	75 02                	jne    c001122a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011228:	89 fd                	mov    ebp,edi
c001122a:	43                   	inc    ebx
c001122b:	39 f3                	cmp    ebx,esi
c001122d:	74 5a                	je     c0011289 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001122f:	47                   	inc    edi
c0011230:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011236:	76 31                	jbe    c0011269 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011238:	c7 05 24 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c824,0xc8000
c0011242:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011247:	75 28                	jne    c0011271 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011249:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001124e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011253:	57                   	push   edi
c0011254:	e8 82 ff ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c0011259:	5a                   	pop    edx
c001125a:	84 c0                	test   al,al
c001125c:	74 c6                	je     c0011224 <Virt::allocateKernelVirtualPages(int)+0x25>
c001125e:	31 db                	xor    ebx,ebx
c0011260:	47                   	inc    edi
c0011261:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011267:	77 cf                	ja     c0011238 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011269:	89 3d 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,edi
c001126f:	eb a8                	jmp    c0011219 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	68 fc a1 02 c0       	push   0xc002a1fc
c0011279:	e8 57 8b 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c001127e:	8b 3d 24 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c824
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	eb 90                	jmp    c0011219 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011289:	89 2d 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,ebp
c001128f:	4b                   	dec    ebx
c0011290:	74 5f                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011292:	85 f6                	test   esi,esi
c0011294:	74 3d                	je     c00112d3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011296:	89 e8                	mov    eax,ebp
c0011298:	31 db                	xor    ebx,ebx
c001129a:	8d 7e ff             	lea    edi,[esi-0x1]
c001129d:	eb 14                	jmp    c00112b3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001129f:	6a 01                	push   0x1
c00112a1:	43                   	inc    ebx
c00112a2:	50                   	push   eax
c00112a3:	e8 fe fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112a8:	58                   	pop    eax
c00112a9:	39 f3                	cmp    ebx,esi
c00112ab:	5a                   	pop    edx
c00112ac:	74 25                	je     c00112d3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ae:	a1 24 c8 02 c0       	mov    eax,ds:0xc002c824
c00112b3:	8d 50 01             	lea    edx,[eax+0x1]
c00112b6:	85 db                	test   ebx,ebx
c00112b8:	89 15 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,edx
c00112be:	74 20                	je     c00112e0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112c0:	39 df                	cmp    edi,ebx
c00112c2:	75 db                	jne    c001129f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112c4:	6a 03                	push   0x3
c00112c6:	43                   	inc    ebx
c00112c7:	50                   	push   eax
c00112c8:	e8 d9 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112cd:	59                   	pop    ecx
c00112ce:	39 f3                	cmp    ebx,esi
c00112d0:	58                   	pop    eax
c00112d1:	75 db                	jne    c00112ae <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112d3:	83 c4 1c             	add    esp,0x1c
c00112d6:	89 e8                	mov    eax,ebp
c00112d8:	5b                   	pop    ebx
c00112d9:	c1 e0 0c             	shl    eax,0xc
c00112dc:	5e                   	pop    esi
c00112dd:	5f                   	pop    edi
c00112de:	5d                   	pop    ebp
c00112df:	c3                   	ret    
c00112e0:	6a 02                	push   0x2
c00112e2:	bb 01 00 00 00       	mov    ebx,0x1
c00112e7:	50                   	push   eax
c00112e8:	e8 b9 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	58                   	pop    eax
c00112ee:	5a                   	pop    edx
c00112ef:	eb bd                	jmp    c00112ae <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	6a 04                	push   0x4
c00112f3:	8d 45 01             	lea    eax,[ebp+0x1]
c00112f6:	55                   	push   ebp
c00112f7:	a3 24 c8 02 c0       	mov    ds:0xc002c824,eax
c00112fc:	e8 a5 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011301:	59                   	pop    ecx
c0011302:	89 e8                	mov    eax,ebp
c0011304:	5b                   	pop    ebx
c0011305:	c1 e0 0c             	shl    eax,0xc
c0011308:	83 c4 1c             	add    esp,0x1c
c001130b:	5b                   	pop    ebx
c001130c:	5e                   	pop    esi
c001130d:	5f                   	pop    edi
c001130e:	5d                   	pop    ebp
c001130f:	c3                   	ret    

c0011310 <Virt::freeSwapfilePage(unsigned long)>:
c0011310:	53                   	push   ebx
c0011311:	8b 15 ec d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9ec
c0011317:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001131b:	b8 01 00 00 00       	mov    eax,0x1
c0011320:	89 cb                	mov    ebx,ecx
c0011322:	d3 e0                	shl    eax,cl
c0011324:	c1 eb 05             	shr    ebx,0x5
c0011327:	f7 d0                	not    eax
c0011329:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001132c:	5b                   	pop    ebx
c001132d:	c3                   	ret    

c001132e <Virt::swapIDToSector(unsigned long)>:
c001132e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011332:	0f af 05 2c c8 02 c0 	imul   eax,DWORD PTR ds:0xc002c82c
c0011339:	03 05 34 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c834
c001133f:	c3                   	ret    

c0011340 <Virt::allocateSwapfilePage()>:
c0011340:	55                   	push   ebp
c0011341:	31 d2                	xor    edx,edx
c0011343:	57                   	push   edi
c0011344:	56                   	push   esi
c0011345:	53                   	push   ebx
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	8b 0d 2c c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c82c
c001134f:	a1 30 c8 02 c0       	mov    eax,ds:0xc002c830
c0011354:	f7 f1                	div    ecx
c0011356:	39 0d 30 c8 02 c0    	cmp    DWORD PTR ds:0xc002c830,ecx
c001135c:	72 2d                	jb     c001138b <Virt::allocateSwapfilePage()+0x4b>
c001135e:	8b 35 ec d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9ec
c0011364:	8b 16                	mov    edx,DWORD PTR [esi]
c0011366:	f6 c2 01             	test   dl,0x1
c0011369:	74 3c                	je     c00113a7 <Virt::allocateSwapfilePage()+0x67>
c001136b:	31 c9                	xor    ecx,ecx
c001136d:	bf 01 00 00 00       	mov    edi,0x1
c0011372:	eb 12                	jmp    c0011386 <Virt::allocateSwapfilePage()+0x46>
c0011374:	89 fd                	mov    ebp,edi
c0011376:	89 ca                	mov    edx,ecx
c0011378:	d3 e5                	shl    ebp,cl
c001137a:	c1 ea 05             	shr    edx,0x5
c001137d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011380:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011382:	85 ea                	test   edx,ebp
c0011384:	74 2a                	je     c00113b0 <Virt::allocateSwapfilePage()+0x70>
c0011386:	41                   	inc    ecx
c0011387:	39 c8                	cmp    eax,ecx
c0011389:	77 e9                	ja     c0011374 <Virt::allocateSwapfilePage()+0x34>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	68 b4 a3 02 c0       	push   0xc002a3b4
c0011393:	e8 3d 8a 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	31 c9                	xor    ecx,ecx
c001139d:	83 c4 0c             	add    esp,0xc
c00113a0:	89 c8                	mov    eax,ecx
c00113a2:	5b                   	pop    ebx
c00113a3:	5e                   	pop    esi
c00113a4:	5f                   	pop    edi
c00113a5:	5d                   	pop    ebp
c00113a6:	c3                   	ret    
c00113a7:	89 f3                	mov    ebx,esi
c00113a9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ae:	31 c9                	xor    ecx,ecx
c00113b0:	09 ea                	or     edx,ebp
c00113b2:	89 c8                	mov    eax,ecx
c00113b4:	89 13                	mov    DWORD PTR [ebx],edx
c00113b6:	83 c4 0c             	add    esp,0xc
c00113b9:	5b                   	pop    ebx
c00113ba:	5e                   	pop    esi
c00113bb:	5f                   	pop    edi
c00113bc:	5d                   	pop    ebp
c00113bd:	c3                   	ret    

c00113be <Virt::virtualMemorySetup()>:
c00113be:	53                   	push   ebx
c00113bf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113c4:	6a 0f                	push   0xf
c00113c6:	53                   	push   ebx
c00113c7:	43                   	inc    ebx
c00113c8:	e8 d9 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113cd:	58                   	pop    eax
c00113ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113d4:	5a                   	pop    edx
c00113d5:	75 ed                	jne    c00113c4 <Virt::virtualMemorySetup()+0x6>
c00113d7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113dc:	6a 00                	push   0x0
c00113de:	53                   	push   ebx
c00113df:	43                   	inc    ebx
c00113e0:	e8 c1 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e5:	59                   	pop    ecx
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	58                   	pop    eax
c00113ed:	75 ed                	jne    c00113dc <Virt::virtualMemorySetup()+0x1e>
c00113ef:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f4:	6a 0f                	push   0xf
c00113f6:	53                   	push   ebx
c00113f7:	43                   	inc    ebx
c00113f8:	e8 a9 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113fd:	58                   	pop    eax
c00113fe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011404:	5a                   	pop    edx
c0011405:	75 ed                	jne    c00113f4 <Virt::virtualMemorySetup()+0x36>
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    

c0011409 <Virt::setupPageSwapping(int)>:
c0011409:	57                   	push   edi
c001140a:	56                   	push   esi
c001140b:	53                   	push   ebx
c001140c:	83 ec 1c             	sub    esp,0x1c
c001140f:	68 14 01 00 00       	push   0x114
c0011414:	e8 80 e1 ff ff       	call   c000f599 <malloc>
c0011419:	83 c4 0c             	add    esp,0xc
c001141c:	89 c6                	mov    esi,eax
c001141e:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c0011424:	68 cb a3 02 c0       	push   0xc002a3cb
c0011429:	50                   	push   eax
c001142a:	e8 99 17 00 00       	call   c0012bc8 <File::File(char const*, Process*)>
c001142f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011432:	e8 6d 19 00 00       	call   c0012da4 <File::unlink()>
c0011437:	58                   	pop    eax
c0011438:	5a                   	pop    edx
c0011439:	6a 12                	push   0x12
c001143b:	56                   	push   esi
c001143c:	e8 eb 17 00 00       	call   c0012c2c <File::open(FileOpenMode)>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 c0                	test   eax,eax
c0011446:	0f 85 2f 01 00 00    	jne    c001157b <Virt::setupPageSwapping(int)+0x172>
c001144c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011450:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011458:	c1 e3 08             	shl    ebx,0x8
c001145b:	83 ec 0c             	sub    esp,0xc
c001145e:	68 00 00 01 00       	push   0x10000
c0011463:	e8 31 e1 ff ff       	call   c000f599 <malloc>
c0011468:	83 c4 0c             	add    esp,0xc
c001146b:	89 c7                	mov    edi,eax
c001146d:	68 00 00 01 00       	push   0x10000
c0011472:	68 ee 00 00 00       	push   0xee
c0011477:	50                   	push   eax
c0011478:	e8 d3 f2 fe ff       	call   c0000750 <memset>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 db                	test   ebx,ebx
c0011482:	79 03                	jns    c0011487 <Virt::setupPageSwapping(int)+0x7e>
c0011484:	83 c3 0f             	add    ebx,0xf
c0011487:	c1 fb 04             	sar    ebx,0x4
c001148a:	4b                   	dec    ebx
c001148b:	83 fb ff             	cmp    ebx,0xffffffff
c001148e:	74 41                	je     c00114d1 <Virt::setupPageSwapping(int)+0xc8>
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	8b 06                	mov    eax,DWORD PTR [esi]
c0011495:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011499:	52                   	push   edx
c001149a:	57                   	push   edi
c001149b:	6a 00                	push   0x0
c001149d:	68 00 00 01 00       	push   0x10000
c00114a2:	56                   	push   esi
c00114a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114a6:	83 c4 20             	add    esp,0x20
c00114a9:	85 c0                	test   eax,eax
c00114ab:	0f 85 b5 00 00 00    	jne    c0011566 <Virt::setupPageSwapping(int)+0x15d>
c00114b1:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114b9:	74 cf                	je     c001148a <Virt::setupPageSwapping(int)+0x81>
c00114bb:	83 ec 0c             	sub    esp,0xc
c00114be:	4b                   	dec    ebx
c00114bf:	68 fd a3 02 c0       	push   0xc002a3fd
c00114c4:	e8 0c 89 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	83 fb ff             	cmp    ebx,0xffffffff
c00114cf:	75 bf                	jne    c0011490 <Virt::setupPageSwapping(int)+0x87>
c00114d1:	83 ec 0c             	sub    esp,0xc
c00114d4:	56                   	push   esi
c00114d5:	e8 b0 17 00 00       	call   c0012c8a <File::close()>
c00114da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114dd:	e8 d7 e0 ff ff       	call   c000f5b9 <rfree>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	85 f6                	test   esi,esi
c00114e7:	74 0c                	je     c00114f5 <Virt::setupPageSwapping(int)+0xec>
c00114e9:	83 ec 0c             	sub    esp,0xc
c00114ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00114ee:	56                   	push   esi
c00114ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	83 ec 08             	sub    esp,0x8
c00114f8:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c00114fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	68 cb a3 02 c0       	push   0xc002a3cb
c001150a:	50                   	push   eax
c001150b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001150e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011512:	c6 05 38 c8 02 c0 43 	mov    BYTE PTR ds:0xc002c838,0x43
c0011519:	c1 e2 0b             	shl    edx,0xb
c001151c:	a3 34 c8 02 c0       	mov    ds:0xc002c834,eax
c0011521:	89 15 30 c8 02 c0    	mov    DWORD PTR ds:0xc002c830,edx
c0011527:	c7 05 2c c8 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c82c,0x8
c0011531:	c1 ea 08             	shr    edx,0x8
c0011534:	89 14 24             	mov    DWORD PTR [esp],edx
c0011537:	e8 5d e0 ff ff       	call   c000f599 <malloc>
c001153c:	83 c4 0c             	add    esp,0xc
c001153f:	89 c1                	mov    ecx,eax
c0011541:	a3 ec d9 02 c0       	mov    ds:0xc002d9ec,eax
c0011546:	31 d2                	xor    edx,edx
c0011548:	a1 30 c8 02 c0       	mov    eax,ds:0xc002c830
c001154d:	f7 35 2c c8 02 c0    	div    DWORD PTR ds:0xc002c82c
c0011553:	c1 e8 05             	shr    eax,0x5
c0011556:	50                   	push   eax
c0011557:	6a 00                	push   0x0
c0011559:	51                   	push   ecx
c001155a:	e8 f1 f1 fe ff       	call   c0000750 <memset>
c001155f:	83 c4 20             	add    esp,0x20
c0011562:	5b                   	pop    ebx
c0011563:	5e                   	pop    esi
c0011564:	5f                   	pop    edi
c0011565:	c3                   	ret    
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	68 fd a3 02 c0       	push   0xc002a3fd
c001156e:	e8 62 88 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	e9 36 ff ff ff       	jmp    c00114b1 <Virt::setupPageSwapping(int)+0xa8>
c001157b:	83 ec 0c             	sub    esp,0xc
c001157e:	68 e2 a3 02 c0       	push   0xc002a3e2
c0011583:	e8 4d 88 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011588:	83 c4 10             	add    esp,0x10
c001158b:	e9 bc fe ff ff       	jmp    c001144c <Virt::setupPageSwapping(int)+0x43>

c0011590 <VAS::VAS()>:
c0011590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011594:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001159b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115aa:	a3 f0 d9 02 c0       	mov    ds:0xc002d9f0,eax
c00115af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115c9:	90                   	nop
c00115ca:	c3                   	ret    
c00115cb:	90                   	nop

c00115cc <VAS::VAS(VAS*)>:
c00115cc:	83 ec 0c             	sub    esp,0xc
c00115cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115e5:	83 ec 0c             	sub    esp,0xc
c00115e8:	68 1c a2 02 c0       	push   0xc002a21c
c00115ed:	e8 e3 87 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	90                   	nop
c00115f6:	83 c4 0c             	add    esp,0xc
c00115f9:	c3                   	ret    

c00115fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115fe:	89 c2                	mov    edx,eax
c0011600:	c1 e8 0a             	shr    eax,0xa
c0011603:	c1 ea 16             	shr    edx,0x16
c0011606:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001160b:	19 c9                	sbb    ecx,ecx
c001160d:	c1 e2 0c             	shl    edx,0xc
c0011610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011616:	25 fc 0f 00 00       	and    eax,0xffc
c001161b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011622:	01 d0                	add    eax,edx
c0011624:	c3                   	ret    
c0011625:	90                   	nop

c0011626 <VAS::getPageTableEntry(unsigned long)>:
c0011626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001162a:	89 ca                	mov    edx,ecx
c001162c:	c1 e9 0a             	shr    ecx,0xa
c001162f:	c1 ea 16             	shr    edx,0x16
c0011632:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011638:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001163e:	c1 e0 0c             	shl    eax,0xc
c0011641:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011644:	c3                   	ret    

c0011645 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011645:	57                   	push   edi
c0011646:	56                   	push   esi
c0011647:	be 01 00 00 00       	mov    esi,0x1
c001164c:	53                   	push   ebx
c001164d:	83 ec 10             	sub    esp,0x10
c0011650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011654:	c1 eb 0c             	shr    ebx,0xc
c0011657:	eb 3f                	jmp    c0011698 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011659:	83 ec 08             	sub    esp,0x8
c001165c:	57                   	push   edi
c001165d:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c0011663:	e8 be ff ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011671:	f6 c4 04             	test   ah,0x4
c0011674:	75 5f                	jne    c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011676:	80 fa 04             	cmp    dl,0x4
c0011679:	74 78                	je     c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001167b:	80 fa 02             	cmp    dl,0x2
c001167e:	0f 84 88 00 00 00    	je     c001170c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011684:	80 fa 03             	cmp    dl,0x3
c0011687:	0f 84 ad 00 00 00    	je     c001173a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001168d:	fe ca                	dec    dl
c001168f:	0f 84 92 00 00 00    	je     c0011727 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011695:	43                   	inc    ebx
c0011696:	31 f6                	xor    esi,esi
c0011698:	53                   	push   ebx
c0011699:	89 df                	mov    edi,ebx
c001169b:	e8 3b fb ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c00116a0:	c1 e7 0c             	shl    edi,0xc
c00116a3:	59                   	pop    ecx
c00116a4:	84 c0                	test   al,al
c00116a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116aa:	75 ad                	jne    c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	68 03 a4 02 c0       	push   0xc002a403
c00116b4:	e8 1c 87 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00116b9:	58                   	pop    eax
c00116ba:	5a                   	pop    edx
c00116bb:	57                   	push   edi
c00116bc:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c00116c2:	e8 5f ff ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00116cc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116d0:	f6 c4 04             	test   ah,0x4
c00116d3:	74 c0                	je     c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	50                   	push   eax
c00116e2:	e8 19 e2 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ee:	80 fa 04             	cmp    dl,0x4
c00116f1:	75 88                	jne    c001167b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116f3:	89 f0                	mov    eax,esi
c00116f5:	84 c0                	test   al,al
c00116f7:	75 47                	jne    c0011740 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116f9:	c7 44 24 20 40 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a240
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	5b                   	pop    ebx
c0011705:	5e                   	pop    esi
c0011706:	5f                   	pop    edi
c0011707:	e9 c9 86 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c001170c:	89 f0                	mov    eax,esi
c001170e:	84 c0                	test   al,al
c0011710:	75 15                	jne    c0011727 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	68 1f a4 02 c0       	push   0xc002a41f
c001171a:	e8 b6 86 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	e9 6e ff ff ff       	jmp    c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011727:	83 ec 08             	sub    esp,0x8
c001172a:	6a 00                	push   0x0
c001172c:	53                   	push   ebx
c001172d:	e8 74 fa ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	e9 5b ff ff ff       	jmp    c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001173a:	89 f0                	mov    eax,esi
c001173c:	84 c0                	test   al,al
c001173e:	75 15                	jne    c0011755 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011740:	83 ec 08             	sub    esp,0x8
c0011743:	6a 00                	push   0x0
c0011745:	53                   	push   ebx
c0011746:	e8 5b fa ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	5b                   	pop    ebx
c0011752:	5e                   	pop    esi
c0011753:	5f                   	pop    edi
c0011754:	c3                   	ret    
c0011755:	c7 44 24 20 3b a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a43b
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	5b                   	pop    ebx
c0011761:	5e                   	pop    esi
c0011762:	5f                   	pop    edi
c0011763:	e9 6d 86 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>

c0011768 <VAS::freeAllocatedPages(unsigned long)>:
c0011768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011770:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011774:	74 09                	je     c001177f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011776:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001177a:	e9 c6 fe ff ff       	jmp    c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001177f:	c7 44 24 04 64 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a264
c0011787:	e9 dd 0e 00 00       	jmp    c0012669 <Dbg::kprintf(char const*, ...)>

c001178c <VAS::virtualToPhysical(unsigned long)>:
c001178c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011790:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011794:	e8 8d fe ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0011799:	5a                   	pop    edx
c001179a:	8b 00                	mov    eax,DWORD PTR [eax]
c001179c:	59                   	pop    ecx
c001179d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117a2:	c3                   	ret    
c00117a3:	90                   	nop

c00117a4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117a4:	55                   	push   ebp
c00117a5:	57                   	push   edi
c00117a6:	56                   	push   esi
c00117a7:	53                   	push   ebx
c00117a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117ac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117b4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117b8:	85 db                	test   ebx,ebx
c00117ba:	7e 22                	jle    c00117de <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117bc:	c1 e3 0c             	shl    ebx,0xc
c00117bf:	01 f3                	add    ebx,esi
c00117c1:	56                   	push   esi
c00117c2:	81 c6 00 10 00 00    	add    esi,0x1000
c00117c8:	55                   	push   ebp
c00117c9:	e8 58 fe ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00117ce:	5a                   	pop    edx
c00117cf:	59                   	pop    ecx
c00117d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117d2:	21 f9                	and    ecx,edi
c00117d4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117d8:	39 f3                	cmp    ebx,esi
c00117da:	89 08                	mov    DWORD PTR [eax],ecx
c00117dc:	75 e3                	jne    c00117c1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117de:	5b                   	pop    ebx
c00117df:	5e                   	pop    esi
c00117e0:	5f                   	pop    edi
c00117e1:	5d                   	pop    ebp
c00117e2:	c3                   	ret    
c00117e3:	90                   	nop

c00117e4 <VAS::setToWriteCombining(unsigned long, int)>:
c00117e4:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00117e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117ef:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117f6:	75 01                	jne    c00117f9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117f8:	c3                   	ret    
c00117f9:	68 80 00 00 00       	push   0x80
c00117fe:	6a ff                	push   0xffffffff
c0011800:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001180c:	e8 93 ff ff ff       	call   c00117a4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011811:	83 c4 14             	add    esp,0x14
c0011814:	c3                   	ret    
c0011815:	90                   	nop

c0011816 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011816:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001181b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001181f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011826:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011829:	19 c0                	sbb    eax,eax
c001182b:	83 ca 03             	or     edx,0x3
c001182e:	83 e0 fc             	and    eax,0xfffffffc
c0011831:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011838:	0f 20 d8             	mov    eax,cr3
c001183b:	0f 22 d8             	mov    cr3,eax
c001183e:	c3                   	ret    
c001183f:	90                   	nop

c0011840 <VAS::~VAS()>:
c0011840:	83 ec 2c             	sub    esp,0x2c
c0011843:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001184b:	fa                   	cli    
c001184c:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0011851:	40                   	inc    eax
c0011852:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0011857:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001185c:	8b 00                	mov    eax,DWORD PTR [eax]
c001185e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011861:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011867:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001186b:	6a 01                	push   0x1
c001186d:	50                   	push   eax
c001186e:	e8 a3 ff ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c0011873:	83 c4 0c             	add    esp,0xc
c0011876:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001187e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011886:	0f 8f d4 00 00 00    	jg     c0011960 <VAS::~VAS()+0x120>
c001188c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011890:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011897:	c1 e2 02             	shl    edx,0x2
c001189a:	01 d0                	add    eax,edx
c001189c:	8b 00                	mov    eax,DWORD PTR [eax]
c001189e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a6:	83 e0 01             	and    eax,0x1
c00118a9:	0f 84 a8 00 00 00    	je     c0011957 <VAS::~VAS()+0x117>
c00118af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118b7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118bf:	7f 72                	jg     c0011933 <VAS::~VAS()+0xf3>
c00118c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118c5:	c1 e0 0a             	shl    eax,0xa
c00118c8:	89 c2                	mov    edx,eax
c00118ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ce:	01 d0                	add    eax,edx
c00118d0:	c1 e0 0c             	shl    eax,0xc
c00118d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118eb:	6a 01                	push   0x1
c00118ed:	50                   	push   eax
c00118ee:	e8 07 fd ff ff       	call   c00115fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118f3:	83 c4 0c             	add    esp,0xc
c00118f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011900:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011908:	25 01 04 00 00       	and    eax,0x401
c001190d:	3d 01 04 00 00       	cmp    eax,0x401
c0011912:	75 19                	jne    c001192d <VAS::~VAS()+0xed>
c0011914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011918:	25 00 f0 ff ff       	and    eax,0xfffff000
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	50                   	push   eax
c0011921:	e8 da df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011931:	eb 84                	jmp    c00118b7 <VAS::~VAS()+0x77>
c0011933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011937:	25 00 04 00 00       	and    eax,0x400
c001193c:	74 19                	je     c0011957 <VAS::~VAS()+0x117>
c001193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011942:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011947:	83 ec 0c             	sub    esp,0xc
c001194a:	50                   	push   eax
c001194b:	e8 b0 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011957:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001195b:	e9 1e ff ff ff       	jmp    c001187e <VAS::~VAS()+0x3e>
c0011960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011964:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	50                   	push   eax
c001196b:	e8 d5 fc ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011977:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	50                   	push   eax
c001197e:	e8 7d df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001198a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001198e:	c1 e0 02             	shl    eax,0x2
c0011991:	83 ec 08             	sub    esp,0x8
c0011994:	50                   	push   eax
c0011995:	68 88 a2 02 c0       	push   0xc002a288
c001199a:	e8 ca 0c 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00119a7:	48                   	dec    eax
c00119a8:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00119ad:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00119b2:	85 c0                	test   eax,eax
c00119b4:	75 01                	jne    c00119b7 <VAS::~VAS()+0x177>
c00119b6:	fb                   	sti    
c00119b7:	90                   	nop
c00119b8:	83 c4 2c             	add    esp,0x2c
c00119bb:	c3                   	ret    

c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119bc:	55                   	push   ebp
c00119bd:	57                   	push   edi
c00119be:	56                   	push   esi
c00119bf:	53                   	push   ebx
c00119c0:	83 ec 1c             	sub    esp,0x1c
c00119c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119cb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119d1:	77 08                	ja     c00119db <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119d3:	0f 20 d8             	mov    eax,cr3
c00119d6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119d9:	75 47                	jne    c0011a22 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119df:	09 d8                	or     eax,ebx
c00119e1:	a9 ff 0f 00 00       	test   eax,0xfff
c00119e6:	75 57                	jne    c0011a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119e8:	89 de                	mov    esi,ebx
c00119ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119ed:	c1 ee 16             	shr    esi,0x16
c00119f0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119f7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119fb:	74 54                	je     c0011a51 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a01:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a07:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a0b:	c1 e6 0c             	shl    esi,0xc
c0011a0e:	c1 eb 0a             	shr    ebx,0xa
c0011a11:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a17:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a1a:	83 c4 1c             	add    esp,0x1c
c0011a1d:	5b                   	pop    ebx
c0011a1e:	5e                   	pop    esi
c0011a1f:	5f                   	pop    edi
c0011a20:	5d                   	pop    ebp
c0011a21:	c3                   	ret    
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	68 a8 a2 02 c0       	push   0xc002a2a8
c0011a2a:	e8 3a 0c 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0011a2f:	83 c4 10             	add    esp,0x10
c0011a32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a36:	09 d8                	or     eax,ebx
c0011a38:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a3d:	74 a9                	je     c00119e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 10 a3 02 c0       	push   0xc002a310
c0011a47:	e8 89 83 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	eb 97                	jmp    c00119e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a55:	e8 17 df ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a5a:	83 ec 0c             	sub    esp,0xc
c0011a5d:	89 c5                	mov    ebp,eax
c0011a5f:	8b 0d f0 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9f0
c0011a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a69:	6a 01                	push   0x1
c0011a6b:	e8 8f f7 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011a70:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a77:	6a 01                	push   0x1
c0011a79:	50                   	push   eax
c0011a7a:	55                   	push   ebp
c0011a7b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a85:	51                   	push   ecx
c0011a86:	e8 27 02 00 00       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a8b:	83 c4 1c             	add    esp,0x1c
c0011a8e:	68 00 10 00 00       	push   0x1000
c0011a93:	6a 00                	push   0x0
c0011a95:	50                   	push   eax
c0011a96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a9a:	e8 b1 ec fe ff       	call   c0000750 <memset>
c0011a9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011aa3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011aa6:	e8 9a fb ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011aaf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ab8:	e9 40 ff ff ff       	jmp    c00119fd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011abd:	90                   	nop

c0011abe <VAS::allocatePages(int, int)>:
c0011abe:	55                   	push   ebp
c0011abf:	57                   	push   edi
c0011ac0:	56                   	push   esi
c0011ac1:	53                   	push   ebx
c0011ac2:	83 ec 1c             	sub    esp,0x1c
c0011ac5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ac9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011ace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ad4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ada:	83 e0 01             	and    eax,0x1
c0011add:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ae1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ae5:	0f 85 cc 00 00 00    	jne    c0011bb7 <VAS::allocatePages(int, int)+0xf9>
c0011aeb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011aee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011af2:	85 c0                	test   eax,eax
c0011af4:	0f 84 a1 00 00 00    	je     c0011b9b <VAS::allocatePages(int, int)+0xdd>
c0011afa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011afe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b02:	c1 e6 0c             	shl    esi,0xc
c0011b05:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b09:	85 c0                	test   eax,eax
c0011b0b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b0e:	7e 33                	jle    c0011b43 <VAS::allocatePages(int, int)+0x85>
c0011b10:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b18:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b1e:	e8 4e de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b23:	55                   	push   ebp
c0011b24:	53                   	push   ebx
c0011b25:	50                   	push   eax
c0011b26:	57                   	push   edi
c0011b27:	e8 90 fe ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b2c:	83 c4 10             	add    esp,0x10
c0011b2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b34:	74 03                	je     c0011b39 <VAS::allocatePages(int, int)+0x7b>
c0011b36:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b39:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b3f:	39 de                	cmp    esi,ebx
c0011b41:	75 db                	jne    c0011b1e <VAS::allocatePages(int, int)+0x60>
c0011b43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b48:	75 12                	jne    c0011b5c <VAS::allocatePages(int, int)+0x9e>
c0011b4a:	0f 20 d8             	mov    eax,cr3
c0011b4d:	0f 22 d8             	mov    cr3,eax
c0011b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b54:	83 c4 1c             	add    esp,0x1c
c0011b57:	5b                   	pop    ebx
c0011b58:	5e                   	pop    esi
c0011b59:	5f                   	pop    edi
c0011b5a:	5d                   	pop    ebp
c0011b5b:	c3                   	ret    
c0011b5c:	c1 ee 0a             	shr    esi,0xa
c0011b5f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b63:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b69:	c1 eb 0a             	shr    ebx,0xa
c0011b6c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b72:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b78:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b7e:	39 c3                	cmp    ebx,eax
c0011b80:	77 ce                	ja     c0011b50 <VAS::allocatePages(int, int)+0x92>
c0011b82:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b85:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b8b:	39 d8                	cmp    eax,ebx
c0011b8d:	73 f3                	jae    c0011b82 <VAS::allocatePages(int, int)+0xc4>
c0011b8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b93:	83 c4 1c             	add    esp,0x1c
c0011b96:	5b                   	pop    ebx
c0011b97:	5e                   	pop    esi
c0011b98:	5f                   	pop    edi
c0011b99:	5d                   	pop    ebp
c0011b9a:	c3                   	ret    
c0011b9b:	83 ec 0c             	sub    esp,0xc
c0011b9e:	68 34 a3 02 c0       	push   0xc002a334
c0011ba3:	e8 2d 82 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011ba8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	e9 43 ff ff ff       	jmp    c0011afa <VAS::allocatePages(int, int)+0x3c>
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bbe:	e8 3c f6 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011bc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bcf:	0f 87 9b 00 00 00    	ja     c0011c70 <VAS::allocatePages(int, int)+0x1b2>
c0011bd5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bd9:	85 d2                	test   edx,edx
c0011bdb:	7e 3c                	jle    c0011c19 <VAS::allocatePages(int, int)+0x15b>
c0011bdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011be1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011be5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011be9:	c1 e5 0c             	shl    ebp,0xc
c0011bec:	81 ce 00 04 00 00    	or     esi,0x400
c0011bf2:	01 dd                	add    ebp,ebx
c0011bf4:	e8 78 dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011bf9:	56                   	push   esi
c0011bfa:	53                   	push   ebx
c0011bfb:	50                   	push   eax
c0011bfc:	57                   	push   edi
c0011bfd:	e8 ba fd ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c02:	83 c4 10             	add    esp,0x10
c0011c05:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c0a:	74 03                	je     c0011c0f <VAS::allocatePages(int, int)+0x151>
c0011c0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c15:	39 dd                	cmp    ebp,ebx
c0011c17:	75 db                	jne    c0011bf4 <VAS::allocatePages(int, int)+0x136>
c0011c19:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c1e:	0f 84 26 ff ff ff    	je     c0011b4a <VAS::allocatePages(int, int)+0x8c>
c0011c24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c2c:	89 d3                	mov    ebx,edx
c0011c2e:	c1 e0 0c             	shl    eax,0xc
c0011c31:	c1 eb 0a             	shr    ebx,0xa
c0011c34:	01 d0                	add    eax,edx
c0011c36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c3c:	c1 e8 0a             	shr    eax,0xa
c0011c3f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c4a:	2d 00 00 40 00       	sub    eax,0x400000
c0011c4f:	39 c3                	cmp    ebx,eax
c0011c51:	0f 87 f9 fe ff ff    	ja     c0011b50 <VAS::allocatePages(int, int)+0x92>
c0011c57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c60:	39 d8                	cmp    eax,ebx
c0011c62:	73 f3                	jae    c0011c57 <VAS::allocatePages(int, int)+0x199>
c0011c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c68:	83 c4 1c             	add    esp,0x1c
c0011c6b:	5b                   	pop    ebx
c0011c6c:	5e                   	pop    esi
c0011c6d:	5f                   	pop    edi
c0011c6e:	5d                   	pop    ebp
c0011c6f:	c3                   	ret    
c0011c70:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011c75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c7b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c82:	0f 84 4d ff ff ff    	je     c0011bd5 <VAS::allocatePages(int, int)+0x117>
c0011c88:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c90:	e9 40 ff ff ff       	jmp    c0011bd5 <VAS::allocatePages(int, int)+0x117>
c0011c95:	90                   	nop

c0011c96 <VAS::setCPUSpecific(unsigned long)>:
c0011c96:	83 ec 0c             	sub    esp,0xc
c0011c99:	6a 05                	push   0x5
c0011c9b:	68 00 00 40 c2       	push   0xc2400000
c0011ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ca8:	e8 0f fd ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cad:	83 c4 1c             	add    esp,0x1c
c0011cb0:	c3                   	ret    
c0011cb1:	90                   	nop

c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cb2:	55                   	push   ebp
c0011cb3:	57                   	push   edi
c0011cb4:	56                   	push   esi
c0011cb5:	53                   	push   ebx
c0011cb6:	83 ec 1c             	sub    esp,0x1c
c0011cb9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011cbe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cc8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ccc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cd2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cd6:	83 e0 01             	and    eax,0x1
c0011cd9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cdd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce1:	85 c0                	test   eax,eax
c0011ce3:	7e 39                	jle    c0011d1e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ce5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce9:	89 f3                	mov    ebx,esi
c0011ceb:	c1 e0 0c             	shl    eax,0xc
c0011cee:	01 f0                	add    eax,esi
c0011cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf4:	55                   	push   ebp
c0011cf5:	53                   	push   ebx
c0011cf6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cfa:	29 f0                	sub    eax,esi
c0011cfc:	01 d8                	add    eax,ebx
c0011cfe:	50                   	push   eax
c0011cff:	57                   	push   edi
c0011d00:	e8 b7 fc ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d0d:	74 03                	je     c0011d12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d0f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d18:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d1c:	75 d6                	jne    c0011cf4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d1e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d23:	75 10                	jne    c0011d35 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d25:	0f 20 d8             	mov    eax,cr3
c0011d28:	0f 22 d8             	mov    cr3,eax
c0011d2b:	83 c4 1c             	add    esp,0x1c
c0011d2e:	89 f0                	mov    eax,esi
c0011d30:	5b                   	pop    ebx
c0011d31:	5e                   	pop    esi
c0011d32:	5f                   	pop    edi
c0011d33:	5d                   	pop    ebp
c0011d34:	c3                   	ret    
c0011d35:	89 f3                	mov    ebx,esi
c0011d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d3b:	c1 eb 0a             	shr    ebx,0xa
c0011d3e:	c1 e0 0c             	shl    eax,0xc
c0011d41:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d47:	01 f0                	add    eax,esi
c0011d49:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d4f:	c1 e8 0a             	shr    eax,0xa
c0011d52:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d57:	2d 00 00 40 00       	sub    eax,0x400000
c0011d5c:	39 c3                	cmp    ebx,eax
c0011d5e:	77 cb                	ja     c0011d2b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d60:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d63:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d69:	39 d8                	cmp    eax,ebx
c0011d6b:	73 f3                	jae    c0011d60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d6d:	83 c4 1c             	add    esp,0x1c
c0011d70:	89 f0                	mov    eax,esi
c0011d72:	5b                   	pop    ebx
c0011d73:	5e                   	pop    esi
c0011d74:	5f                   	pop    edi
c0011d75:	5d                   	pop    ebp
c0011d76:	c3                   	ret    
c0011d77:	90                   	nop

c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d78:	55                   	push   ebp
c0011d79:	57                   	push   edi
c0011d7a:	56                   	push   esi
c0011d7b:	53                   	push   ebx
c0011d7c:	83 ec 1c             	sub    esp,0x1c
c0011d7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d87:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d94:	75 4a                	jne    c0011de0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d96:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d9a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d9d:	c1 eb 16             	shr    ebx,0x16
c0011da0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011da7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dab:	74 4d                	je     c0011dfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011db1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011db5:	c1 e8 0a             	shr    eax,0xa
c0011db8:	80 fa 01             	cmp    dl,0x1
c0011dbb:	19 d2                	sbb    edx,edx
c0011dbd:	c1 e3 0c             	shl    ebx,0xc
c0011dc0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011dc4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dca:	25 fc 0f 00 00       	and    eax,0xffc
c0011dcf:	01 d8                	add    eax,ebx
c0011dd1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dd8:	83 c4 1c             	add    esp,0x1c
c0011ddb:	5b                   	pop    ebx
c0011ddc:	5e                   	pop    esi
c0011ddd:	5f                   	pop    edi
c0011dde:	5d                   	pop    ebp
c0011ddf:	c3                   	ret    
c0011de0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	68 60 a3 02 c0       	push   0xc002a360
c0011dec:	e8 e4 7f 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011df8:	eb 9c                	jmp    c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011dfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dfe:	e8 6e db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	89 c5                	mov    ebp,eax
c0011e08:	8b 0d f0 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9f0
c0011e0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e12:	6a 01                	push   0x1
c0011e14:	e8 e6 f3 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011e19:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e20:	6a 01                	push   0x1
c0011e22:	50                   	push   eax
c0011e23:	55                   	push   ebp
c0011e24:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e2e:	51                   	push   ecx
c0011e2f:	e8 7e fe ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e34:	83 c4 1c             	add    esp,0x1c
c0011e37:	68 00 10 00 00       	push   0x1000
c0011e3c:	6a 00                	push   0x0
c0011e3e:	50                   	push   eax
c0011e3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e43:	e8 08 e9 fe ff       	call   c0000750 <memset>
c0011e48:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e4c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e4f:	e8 f1 f7 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e54:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e61:	e9 47 ff ff ff       	jmp    c0011dad <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e66 <VAS::VAS(bool)>:
c0011e66:	53                   	push   ebx
c0011e67:	83 ec 28             	sub    esp,0x28
c0011e6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e90:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e93:	e8 d9 da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e98:	89 c2                	mov    edx,eax
c0011e9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ea1:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	6a 01                	push   0x1
c0011eac:	e8 4e f3 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	89 c2                	mov    edx,eax
c0011eb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ebd:	83 ec 0c             	sub    esp,0xc
c0011ec0:	6a 03                	push   0x3
c0011ec2:	6a 01                	push   0x1
c0011ec4:	52                   	push   edx
c0011ec5:	50                   	push   eax
c0011ec6:	53                   	push   ebx
c0011ec7:	e8 e6 fd ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ecc:	83 c4 20             	add    esp,0x20
c0011ecf:	89 c2                	mov    edx,eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ed8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ee0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011ee8:	7f 1c                	jg     c0011f06 <VAS::VAS(bool)+0xa0>
c0011eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ef1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ef5:	c1 e2 02             	shl    edx,0x2
c0011ef8:	01 d0                	add    eax,edx
c0011efa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f00:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f04:	eb da                	jmp    c0011ee0 <VAS::VAS(bool)+0x7a>
c0011f06:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f0e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f16:	7f 7a                	jg     c0011f92 <VAS::VAS(bool)+0x12c>
c0011f18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f1c:	2d 00 02 00 00       	sub    eax,0x200
c0011f21:	c1 e0 0c             	shl    eax,0xc
c0011f24:	83 c8 03             	or     eax,0x3
c0011f27:	89 c2                	mov    edx,eax
c0011f29:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011f2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f34:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f3a:	83 e0 10             	and    eax,0x10
c0011f3d:	84 c0                	test   al,al
c0011f3f:	74 07                	je     c0011f48 <VAS::VAS(bool)+0xe2>
c0011f41:	b8 00 01 00 00       	mov    eax,0x100
c0011f46:	eb 05                	jmp    c0011f4d <VAS::VAS(bool)+0xe7>
c0011f48:	b8 00 00 00 00       	mov    eax,0x0
c0011f4d:	09 d0                	or     eax,edx
c0011f4f:	89 c1                	mov    ecx,eax
c0011f51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f5c:	c1 e2 02             	shl    edx,0x2
c0011f5f:	01 d0                	add    eax,edx
c0011f61:	89 ca                	mov    edx,ecx
c0011f63:	89 10                	mov    DWORD PTR [eax],edx
c0011f65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f69:	2d 40 03 00 00       	sub    eax,0x340
c0011f6e:	83 f8 7f             	cmp    eax,0x7f
c0011f71:	77 16                	ja     c0011f89 <VAS::VAS(bool)+0x123>
c0011f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7e:	c1 e2 02             	shl    edx,0x2
c0011f81:	01 d0                	add    eax,edx
c0011f83:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f8d:	e9 7c ff ff ff       	jmp    c0011f0e <VAS::VAS(bool)+0xa8>
c0011f92:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011f97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa3:	83 e0 10             	and    eax,0x10
c0011fa6:	84 c0                	test   al,al
c0011fa8:	74 07                	je     c0011fb1 <VAS::VAS(bool)+0x14b>
c0011faa:	b8 03 41 00 00       	mov    eax,0x4103
c0011faf:	eb 05                	jmp    c0011fb6 <VAS::VAS(bool)+0x150>
c0011fb1:	b8 03 40 00 00       	mov    eax,0x4003
c0011fb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fba:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fbd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fc3:	89 02                	mov    DWORD PTR [edx],eax
c0011fc5:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011fca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fd6:	83 ec 08             	sub    esp,0x8
c0011fd9:	50                   	push   eax
c0011fda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fde:	e8 b3 fc ff ff       	call   c0011c96 <VAS::setCPUSpecific(unsigned long)>
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fed:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011ff2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ffe:	83 e0 10             	and    eax,0x10
c0012001:	84 c0                	test   al,al
c0012003:	74 07                	je     c001200c <VAS::VAS(bool)+0x1a6>
c0012005:	b8 00 01 00 00       	mov    eax,0x100
c001200a:	eb 05                	jmp    c0012011 <VAS::VAS(bool)+0x1ab>
c001200c:	b8 00 00 00 00       	mov    eax,0x0
c0012011:	09 c2                	or     edx,eax
c0012013:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012017:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001201a:	05 fc 0f 00 00       	add    eax,0xffc
c001201f:	83 ca 03             	or     edx,0x3
c0012022:	89 10                	mov    DWORD PTR [eax],edx
c0012024:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0012029:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	50                   	push   eax
c0012033:	e8 6a 1d 00 00       	call   c0013da2 <Device::getName()>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	83 ec 08             	sub    esp,0x8
c001203e:	68 55 a4 02 c0       	push   0xc002a455
c0012043:	50                   	push   eax
c0012044:	e8 4f e8 fe ff       	call   c0000898 <strcmp>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	85 c0                	test   eax,eax
c001204e:	0f 94 c0             	sete   al
c0012051:	84 c0                	test   al,al
c0012053:	0f 84 87 00 00 00    	je     c00120e0 <VAS::VAS(bool)+0x27a>
c0012059:	fa                   	cli    
c001205a:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001205f:	40                   	inc    eax
c0012060:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0012065:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001206a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012070:	05 7c 09 00 00       	add    eax,0x97c
c0012075:	83 ec 0c             	sub    esp,0xc
c0012078:	50                   	push   eax
c0012079:	e8 a0 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012086:	89 c3                	mov    ebx,eax
c0012088:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001208d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012093:	05 7c 09 00 00       	add    eax,0x97c
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	50                   	push   eax
c001209c:	e8 7d cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	83 ec 08             	sub    esp,0x8
c00120a7:	50                   	push   eax
c00120a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ac:	e8 75 f5 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120bb:	6a 11                	push   0x11
c00120bd:	53                   	push   ebx
c00120be:	50                   	push   eax
c00120bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120c3:	e8 f4 f8 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00120d0:	48                   	dec    eax
c00120d1:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00120d6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00120db:	85 c0                	test   eax,eax
c00120dd:	75 01                	jne    c00120e0 <VAS::VAS(bool)+0x27a>
c00120df:	fb                   	sti    
c00120e0:	90                   	nop
c00120e1:	83 c4 28             	add    esp,0x28
c00120e4:	5b                   	pop    ebx
c00120e5:	c3                   	ret    

c00120e6 <VAS::evict(unsigned long)>:
c00120e6:	55                   	push   ebp
c00120e7:	57                   	push   edi
c00120e8:	56                   	push   esi
c00120e9:	53                   	push   ebx
c00120ea:	83 ec 1c             	sub    esp,0x1c
c00120ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120f9:	e8 42 f2 ff ff       	call   c0011340 <Virt::allocateSwapfilePage()>
c00120fe:	89 c7                	mov    edi,eax
c0012100:	a1 2c c8 02 c0       	mov    eax,ds:0xc002c82c
c0012105:	85 c0                	test   eax,eax
c0012107:	7e 3d                	jle    c0012146 <VAS::evict(unsigned long)+0x60>
c0012109:	89 ee                	mov    esi,ebp
c001210b:	31 db                	xor    ebx,ebx
c001210d:	83 ec 0c             	sub    esp,0xc
c0012110:	57                   	push   edi
c0012111:	e8 18 f2 ff ff       	call   c001132e <Virt::swapIDToSector(unsigned long)>
c0012116:	89 34 24             	mov    DWORD PTR [esp],esi
c0012119:	01 d8                	add    eax,ebx
c001211b:	6a 01                	push   0x1
c001211d:	31 d2                	xor    edx,edx
c001211f:	43                   	inc    ebx
c0012120:	52                   	push   edx
c0012121:	81 c6 00 02 00 00    	add    esi,0x200
c0012127:	50                   	push   eax
c0012128:	0f be 05 38 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c838
c001212f:	ff 34 85 7c dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2284]
c0012136:	e8 ef 3e 00 00       	call   c001602a <LogicalDisk::write(unsigned long long, int, void*)>
c001213b:	83 c4 20             	add    esp,0x20
c001213e:	39 1d 2c c8 02 c0    	cmp    DWORD PTR ds:0xc002c82c,ebx
c0012144:	7f c7                	jg     c001210d <VAS::evict(unsigned long)+0x27>
c0012146:	83 ec 08             	sub    esp,0x8
c0012149:	c1 e7 0b             	shl    edi,0xb
c001214c:	55                   	push   ebp
c001214d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012151:	e8 d0 f4 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0012156:	5a                   	pop    edx
c0012157:	89 c6                	mov    esi,eax
c0012159:	59                   	pop    ecx
c001215a:	ff 30                	push   DWORD PTR [eax]
c001215c:	68 63 a4 02 c0       	push   0xc002a463
c0012161:	e8 03 05 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012166:	8b 16                	mov    edx,DWORD PTR [esi]
c0012168:	89 d3                	mov    ebx,edx
c001216a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012170:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012176:	09 d7                	or     edi,edx
c0012178:	89 3e                	mov    DWORD PTR [esi],edi
c001217a:	5e                   	pop    esi
c001217b:	58                   	pop    eax
c001217c:	57                   	push   edi
c001217d:	68 7c a4 02 c0       	push   0xc002a47c
c0012182:	e8 e2 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001218a:	ff 05 e8 d9 02 c0    	inc    DWORD PTR ds:0xc002d9e8
c0012190:	e8 6b d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0012195:	0f 20 d8             	mov    eax,cr3
c0012198:	0f 22 d8             	mov    cr3,eax
c001219b:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c00121a1:	55                   	push   ebp
c00121a2:	53                   	push   ebx
c00121a3:	68 84 a3 02 c0       	push   0xc002a384
c00121a8:	e8 bc 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00121ad:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c00121b2:	c7 44 24 50 95 a4 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a495
c00121ba:	8d 50 01             	lea    edx,[eax+0x1]
c00121bd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121c1:	89 15 e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,edx
c00121c7:	83 c4 3c             	add    esp,0x3c
c00121ca:	5b                   	pop    ebx
c00121cb:	5e                   	pop    esi
c00121cc:	5f                   	pop    edi
c00121cd:	5d                   	pop    ebp
c00121ce:	e9 96 04 00 00       	jmp    c0012669 <Dbg::kprintf(char const*, ...)>
c00121d3:	90                   	nop

c00121d4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121d4:	55                   	push   ebp
c00121d5:	57                   	push   edi
c00121d6:	56                   	push   esi
c00121d7:	53                   	push   ebx
c00121d8:	83 ec 24             	sub    esp,0x24
c00121db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121df:	68 a6 a4 02 c0       	push   0xc002a4a6
c00121e4:	e8 80 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00121e9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00121ed:	5f                   	pop    edi
c00121ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121f4:	5d                   	pop    ebp
c00121f5:	53                   	push   ebx
c00121f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fa:	e8 27 f4 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00121ff:	5a                   	pop    edx
c0012200:	89 c6                	mov    esi,eax
c0012202:	59                   	pop    ecx
c0012203:	ff 30                	push   DWORD PTR [eax]
c0012205:	68 b9 a4 02 c0       	push   0xc002a4b9
c001220a:	e8 5a 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001220f:	83 c4 10             	add    esp,0x10
c0012212:	85 db                	test   ebx,ebx
c0012214:	74 1c                	je     c0012232 <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c0012216:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012218:	31 c0                	xor    eax,eax
c001221a:	89 fa                	mov    edx,edi
c001221c:	81 e2 01 04 00 00    	and    edx,0x401
c0012222:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012228:	74 12                	je     c001223c <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c001222a:	83 c4 1c             	add    esp,0x1c
c001222d:	5b                   	pop    ebx
c001222e:	5e                   	pop    esi
c001222f:	5f                   	pop    edi
c0012230:	5d                   	pop    ebp
c0012231:	c3                   	ret    
c0012232:	83 c4 1c             	add    esp,0x1c
c0012235:	31 c0                	xor    eax,eax
c0012237:	5b                   	pop    ebx
c0012238:	5e                   	pop    esi
c0012239:	5f                   	pop    edi
c001223a:	5d                   	pop    ebp
c001223b:	c3                   	ret    
c001223c:	83 ec 08             	sub    esp,0x8
c001223f:	c1 ef 0b             	shr    edi,0xb
c0012242:	57                   	push   edi
c0012243:	68 c7 a4 02 c0       	push   0xc002a4c7
c0012248:	e8 1c 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001224d:	e8 1f d7 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012252:	59                   	pop    ecx
c0012253:	5d                   	pop    ebp
c0012254:	50                   	push   eax
c0012255:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012259:	68 d2 a4 02 c0       	push   0xc002a4d2
c001225e:	e8 06 04 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012267:	8b 16                	mov    edx,DWORD PTR [esi]
c0012269:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001226f:	09 d0                	or     eax,edx
c0012271:	0d 01 08 00 00       	or     eax,0x801
c0012276:	89 06                	mov    DWORD PTR [esi],eax
c0012278:	5a                   	pop    edx
c0012279:	59                   	pop    ecx
c001227a:	50                   	push   eax
c001227b:	68 e7 a4 02 c0       	push   0xc002a4e7
c0012280:	e8 e4 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012285:	c7 04 24 ff a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ff
c001228c:	e8 d8 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	8b 35 2c c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c82c
c001229a:	85 f6                	test   esi,esi
c001229c:	7e 3d                	jle    c00122db <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c001229e:	89 dd                	mov    ebp,ebx
c00122a0:	31 f6                	xor    esi,esi
c00122a2:	83 ec 0c             	sub    esp,0xc
c00122a5:	57                   	push   edi
c00122a6:	e8 83 f0 ff ff       	call   c001132e <Virt::swapIDToSector(unsigned long)>
c00122ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122ae:	01 f0                	add    eax,esi
c00122b0:	6a 01                	push   0x1
c00122b2:	31 d2                	xor    edx,edx
c00122b4:	46                   	inc    esi
c00122b5:	52                   	push   edx
c00122b6:	81 c5 00 02 00 00    	add    ebp,0x200
c00122bc:	50                   	push   eax
c00122bd:	0f be 05 38 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c838
c00122c4:	ff 34 85 7c dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2284]
c00122cb:	e8 ee 3c 00 00       	call   c0015fbe <LogicalDisk::read(unsigned long long, int, void*)>
c00122d0:	83 c4 20             	add    esp,0x20
c00122d3:	39 35 2c c8 02 c0    	cmp    DWORD PTR ds:0xc002c82c,esi
c00122d9:	7f c7                	jg     c00122a2 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00122db:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00122e0:	48                   	dec    eax
c00122e1:	52                   	push   edx
c00122e2:	a3 e8 d9 02 c0       	mov    ds:0xc002d9e8,eax
c00122e7:	50                   	push   eax
c00122e8:	53                   	push   ebx
c00122e9:	68 0f a5 02 c0       	push   0xc002a50f
c00122ee:	e8 76 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00122f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122f6:	e8 15 f0 ff ff       	call   c0011310 <Virt::freeSwapfilePage(unsigned long)>
c00122fb:	c7 04 24 24 a5 02 c0 	mov    DWORD PTR [esp],0xc002a524
c0012302:	e8 62 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012307:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	48                   	dec    eax
c0012310:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0012315:	85 c0                	test   eax,eax
c0012317:	74 2d                	je     c0012346 <VAS::tryLoadBackOffDisk(unsigned long)+0x172>
c0012319:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001231d:	25 ff 0f 00 00       	and    eax,0xfff
c0012322:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012327:	77 20                	ja     c0012349 <VAS::tryLoadBackOffDisk(unsigned long)+0x175>
c0012329:	0f 20 d8             	mov    eax,cr3
c001232c:	0f 22 d8             	mov    cr3,eax
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	68 4a a5 02 c0       	push   0xc002a54a
c0012337:	e8 2d 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001233c:	83 c4 10             	add    esp,0x10
c001233f:	b0 01                	mov    al,0x1
c0012341:	e9 e4 fe ff ff       	jmp    c001222a <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012346:	fb                   	sti    
c0012347:	eb d0                	jmp    c0012319 <VAS::tryLoadBackOffDisk(unsigned long)+0x145>
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	68 3a a5 02 c0       	push   0xc002a53a
c0012351:	e8 13 03 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012356:	83 c4 10             	add    esp,0x10
c0012359:	eb ce                	jmp    c0012329 <VAS::tryLoadBackOffDisk(unsigned long)+0x155>
c001235b:	90                   	nop

c001235c <VAS::scanForEviction()>:
c001235c:	57                   	push   edi
c001235d:	56                   	push   esi
c001235e:	53                   	push   ebx
c001235f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012363:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012366:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001236c:	75 0e                	jne    c001237c <VAS::scanForEviction()+0x20>
c001236e:	89 da                	mov    edx,ebx
c0012370:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012373:	c1 ea 16             	shr    edx,0x16
c0012376:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001237a:	74 48                	je     c00123c4 <VAS::scanForEviction()+0x68>
c001237c:	53                   	push   ebx
c001237d:	56                   	push   esi
c001237e:	e8 a3 f2 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0012383:	5a                   	pop    edx
c0012384:	8b 38                	mov    edi,DWORD PTR [eax]
c0012386:	59                   	pop    ecx
c0012387:	89 fa                	mov    edx,edi
c0012389:	81 e2 00 0c 00 00    	and    edx,0xc00
c001238f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012395:	74 3d                	je     c00123d4 <VAS::scanForEviction()+0x78>
c0012397:	81 c3 00 10 00 00    	add    ebx,0x1000
c001239d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123a3:	76 2a                	jbe    c00123cf <VAS::scanForEviction()+0x73>
c00123a5:	31 db                	xor    ebx,ebx
c00123a7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123ae:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123b4:	75 c6                	jne    c001237c <VAS::scanForEviction()+0x20>
c00123b6:	89 da                	mov    edx,ebx
c00123b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123bb:	c1 ea 16             	shr    edx,0x16
c00123be:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123c2:	75 b8                	jne    c001237c <VAS::scanForEviction()+0x20>
c00123c4:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123ca:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123cd:	eb 97                	jmp    c0012366 <VAS::scanForEviction()+0xa>
c00123cf:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123d2:	eb 92                	jmp    c0012366 <VAS::scanForEviction()+0xa>
c00123d4:	f7 c7 01 00 00 00    	test   edi,0x1
c00123da:	74 bb                	je     c0012397 <VAS::scanForEviction()+0x3b>
c00123dc:	f7 c7 20 00 00 00    	test   edi,0x20
c00123e2:	74 0a                	je     c00123ee <VAS::scanForEviction()+0x92>
c00123e4:	83 e7 df             	and    edi,0xffffffdf
c00123e7:	89 38                	mov    DWORD PTR [eax],edi
c00123e9:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123ec:	eb a9                	jmp    c0012397 <VAS::scanForEviction()+0x3b>
c00123ee:	83 ec 08             	sub    esp,0x8
c00123f1:	53                   	push   ebx
c00123f2:	56                   	push   esi
c00123f3:	e8 ee fc ff ff       	call   c00120e6 <VAS::evict(unsigned long)>
c00123f8:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	89 f8                	mov    eax,edi
c0012404:	5b                   	pop    ebx
c0012405:	25 00 f0 ff ff       	and    eax,0xfffff000
c001240a:	5e                   	pop    esi
c001240b:	5f                   	pop    edi
c001240c:	c3                   	ret    

c001240d <mapVASFirstTime>:
c001240d:	55                   	push   ebp
c001240e:	57                   	push   edi
c001240f:	56                   	push   esi
c0012410:	53                   	push   ebx
c0012411:	83 ec 0c             	sub    esp,0xc
c0012414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012419:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001241c:	4a                   	dec    edx
c001241d:	0f 84 d0 00 00 00    	je     c00124f3 <mapVASFirstTime+0xe6>
c0012423:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012426:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012429:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001242e:	c1 e5 15             	shl    ebp,0x15
c0012431:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012436:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c001243c:	29 eb                	sub    ebx,ebp
c001243e:	29 ef                	sub    edi,ebp
c0012440:	83 ec 08             	sub    esp,0x8
c0012443:	53                   	push   ebx
c0012444:	68 71 a5 02 c0       	push   0xc002a571
c0012449:	e8 1b 02 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001244e:	e8 1e d5 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012453:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c001245a:	6a 01                	push   0x1
c001245c:	53                   	push   ebx
c001245d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012463:	50                   	push   eax
c0012464:	56                   	push   esi
c0012465:	e8 48 f8 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001246a:	83 c4 20             	add    esp,0x20
c001246d:	39 fb                	cmp    ebx,edi
c001246f:	75 cf                	jne    c0012440 <mapVASFirstTime+0x33>
c0012471:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012476:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001247b:	29 eb                	sub    ebx,ebp
c001247d:	29 ef                	sub    edi,ebp
c001247f:	83 ec 08             	sub    esp,0x8
c0012482:	53                   	push   ebx
c0012483:	68 8d a5 02 c0       	push   0xc002a58d
c0012488:	e8 dc 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001248d:	58                   	pop    eax
c001248e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012492:	5a                   	pop    edx
c0012493:	19 c0                	sbb    eax,eax
c0012495:	83 e0 04             	and    eax,0x4
c0012498:	05 03 04 00 00       	add    eax,0x403
c001249d:	50                   	push   eax
c001249e:	68 f1 a4 02 c0       	push   0xc002a4f1
c00124a3:	e8 c1 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00124a8:	e8 c4 d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124ad:	59                   	pop    ecx
c00124ae:	89 c5                	mov    ebp,eax
c00124b0:	58                   	pop    eax
c00124b1:	55                   	push   ebp
c00124b2:	68 a1 a5 02 c0       	push   0xc002a5a1
c00124b7:	e8 ad 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00124bc:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124c0:	19 d2                	sbb    edx,edx
c00124c2:	83 e2 04             	and    edx,0x4
c00124c5:	81 c2 03 04 00 00    	add    edx,0x403
c00124cb:	89 14 24             	mov    DWORD PTR [esp],edx
c00124ce:	6a 01                	push   0x1
c00124d0:	53                   	push   ebx
c00124d1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124d7:	55                   	push   ebp
c00124d8:	56                   	push   esi
c00124d9:	e8 d4 f7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124de:	83 c4 20             	add    esp,0x20
c00124e1:	39 df                	cmp    edi,ebx
c00124e3:	75 9a                	jne    c001247f <mapVASFirstTime+0x72>
c00124e5:	0f 20 d8             	mov    eax,cr3
c00124e8:	0f 22 d8             	mov    cr3,eax
c00124eb:	83 c4 0c             	add    esp,0xc
c00124ee:	5b                   	pop    ebx
c00124ef:	5e                   	pop    esi
c00124f0:	5f                   	pop    edi
c00124f1:	5d                   	pop    ebp
c00124f2:	c3                   	ret    
c00124f3:	83 ec 0c             	sub    esp,0xc
c00124f6:	68 58 a5 02 c0       	push   0xc002a558
c00124fb:	e8 69 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012500:	83 c4 10             	add    esp,0x10
c0012503:	83 c4 0c             	add    esp,0xc
c0012506:	5b                   	pop    ebx
c0012507:	5e                   	pop    esi
c0012508:	5f                   	pop    edi
c0012509:	5d                   	pop    ebp
c001250a:	c3                   	ret    

c001250b <__cxa_atexit>:
c001250b:	31 c0                	xor    eax,eax
c001250d:	c3                   	ret    

c001250e <__cxa_finalize>:
c001250e:	c3                   	ret    

c001250f <__stack_chk_fail>:
c001250f:	55                   	push   ebp
c0012510:	89 e5                	mov    ebp,esp
c0012512:	83 ec 14             	sub    esp,0x14
c0012515:	68 bd a5 02 c0       	push   0xc002a5bd
c001251a:	e8 4a 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001251f:	58                   	pop    eax
c0012520:	5a                   	pop    edx
c0012521:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012524:	68 0d a6 02 c0       	push   0xc002a60d
c0012529:	e8 3b 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001252e:	59                   	pop    ecx
c001252f:	58                   	pop    eax
c0012530:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012533:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012536:	68 0d a6 02 c0       	push   0xc002a60d
c001253b:	e8 29 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012540:	5a                   	pop    edx
c0012541:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012544:	59                   	pop    ecx
c0012545:	8b 00                	mov    eax,DWORD PTR [eax]
c0012547:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001254a:	68 0d a6 02 c0       	push   0xc002a60d
c001254f:	e8 15 01 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0012554:	5a                   	pop    edx
c0012555:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012558:	59                   	pop    ecx
c0012559:	8b 00                	mov    eax,DWORD PTR [eax]
c001255b:	8b 00                	mov    eax,DWORD PTR [eax]
c001255d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012560:	68 0d a6 02 c0       	push   0xc002a60d
c0012565:	e8 ff 00 00 00       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001256a:	c7 04 24 15 a6 02 c0 	mov    DWORD PTR [esp],0xc002a615
c0012571:	e8 5f 78 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0012576:	83 c4 10             	add    esp,0x10
c0012579:	c9                   	leave  
c001257a:	c3                   	ret    

c001257b <__cxa_pure_virtual>:
c001257b:	83 ec 18             	sub    esp,0x18
c001257e:	68 2d a6 02 c0       	push   0xc002a62d
c0012583:	e8 4d 78 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0012588:	83 c4 1c             	add    esp,0x1c
c001258b:	c3                   	ret    

c001258c <operator new[](unsigned long)>:
c001258c:	e9 08 d0 ff ff       	jmp    c000f599 <malloc>

c0012591 <operator delete(void*, unsigned long)>:
c0012591:	e9 23 d0 ff ff       	jmp    c000f5b9 <rfree>

c0012596 <operator delete[](void*)>:
c0012596:	e9 1e d0 ff ff       	jmp    c000f5b9 <rfree>

c001259b <operator delete[](void*, unsigned long)>:
c001259b:	e9 19 d0 ff ff       	jmp    c000f5b9 <rfree>

c00125a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125a0:	55                   	push   ebp
c00125a1:	b9 11 00 00 00       	mov    ecx,0x11
c00125a6:	57                   	push   edi
c00125a7:	56                   	push   esi
c00125a8:	be 9e a0 02 c0       	mov    esi,0xc002a09e
c00125ad:	53                   	push   ebx
c00125ae:	83 ec 20             	sub    esp,0x20
c00125b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125b9:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125bd:	fc                   	cld    
c00125be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125c0:	89 ee                	mov    esi,ebp
c00125c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00125c6:	eb 02                	jmp    c00125ca <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00125c8:	89 c6                	mov    esi,eax
c00125ca:	31 d2                	xor    edx,edx
c00125cc:	41                   	inc    ecx
c00125cd:	89 f0                	mov    eax,esi
c00125cf:	f7 f3                	div    ebx
c00125d1:	39 de                	cmp    esi,ebx
c00125d3:	73 f3                	jae    c00125c8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00125d5:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00125d8:	eb 02                	jmp    c00125dc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00125da:	89 c5                	mov    ebp,eax
c00125dc:	31 d2                	xor    edx,edx
c00125de:	49                   	dec    ecx
c00125df:	89 e8                	mov    eax,ebp
c00125e1:	f7 f3                	div    ebx
c00125e3:	39 dd                	cmp    ebp,ebx
c00125e5:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00125e9:	88 11                	mov    BYTE PTR [ecx],dl
c00125eb:	73 ed                	jae    c00125da <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00125ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00125f1:	83 c4 20             	add    esp,0x20
c00125f4:	5b                   	pop    ebx
c00125f5:	5e                   	pop    esi
c00125f6:	5f                   	pop    edi
c00125f7:	5d                   	pop    ebp
c00125f8:	c3                   	ret    

c00125f9 <Dbg::logc(char)>:
c00125f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125fd:	ba fd 03 00 00       	mov    edx,0x3fd
c0012602:	ec                   	in     al,dx
c0012603:	a8 20                	test   al,0x20
c0012605:	74 fb                	je     c0012602 <Dbg::logc(char)+0x9>
c0012607:	ba f8 03 00 00       	mov    edx,0x3f8
c001260c:	88 c8                	mov    al,cl
c001260e:	ee                   	out    dx,al
c001260f:	c3                   	ret    

c0012610 <Dbg::logs(char*)>:
c0012610:	53                   	push   ebx
c0012611:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012615:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012618:	84 c0                	test   al,al
c001261a:	74 0f                	je     c001262b <Dbg::logs(char*)+0x1b>
c001261c:	50                   	push   eax
c001261d:	43                   	inc    ebx
c001261e:	e8 d6 ff ff ff       	call   c00125f9 <Dbg::logc(char)>
c0012623:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012626:	5a                   	pop    edx
c0012627:	84 c0                	test   al,al
c0012629:	75 f1                	jne    c001261c <Dbg::logs(char*)+0xc>
c001262b:	5b                   	pop    ebx
c001262c:	c3                   	ret    

c001262d <Dbg::logWriteInt(unsigned int)>:
c001262d:	83 ec 10             	sub    esp,0x10
c0012630:	6a 0a                	push   0xa
c0012632:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012636:	50                   	push   eax
c0012637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001263b:	e8 60 ff ff ff       	call   c00125a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012640:	50                   	push   eax
c0012641:	e8 ca ff ff ff       	call   c0012610 <Dbg::logs(char*)>
c0012646:	83 c4 20             	add    esp,0x20
c0012649:	c3                   	ret    

c001264a <Dbg::logWriteIntBase(unsigned int, int)>:
c001264a:	83 ec 10             	sub    esp,0x10
c001264d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012651:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012655:	50                   	push   eax
c0012656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265a:	e8 41 ff ff ff       	call   c00125a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001265f:	50                   	push   eax
c0012660:	e8 ab ff ff ff       	call   c0012610 <Dbg::logs(char*)>
c0012665:	83 c4 20             	add    esp,0x20
c0012668:	c3                   	ret    

c0012669 <Dbg::kprintf(char const*, ...)>:
c0012669:	55                   	push   ebp
c001266a:	57                   	push   edi
c001266b:	56                   	push   esi
c001266c:	53                   	push   ebx
c001266d:	83 ec 0c             	sub    esp,0xc
c0012670:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012674:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012678:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001267c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001267f:	84 c0                	test   al,al
c0012681:	74 4a                	je     c00126cd <Dbg::kprintf(char const*, ...)+0x64>
c0012683:	31 db                	xor    ebx,ebx
c0012685:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012688:	3c 25                	cmp    al,0x25
c001268a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001268d:	0f 85 e4 00 00 00    	jne    c0012777 <Dbg::kprintf(char const*, ...)+0x10e>
c0012693:	83 c3 02             	add    ebx,0x2
c0012696:	8a 07                	mov    al,BYTE PTR [edi]
c0012698:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001269b:	83 e8 25             	sub    eax,0x25
c001269e:	3c 53                	cmp    al,0x53
c00126a0:	0f 87 ba 00 00 00    	ja     c0012760 <Dbg::kprintf(char const*, ...)+0xf7>
c00126a6:	0f b6 c0             	movzx  eax,al
c00126a9:	ff 24 85 40 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd59c0]
c00126b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126b4:	89 c8                	mov    eax,ecx
c00126b6:	83 c1 04             	add    ecx,0x4
c00126b9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126bd:	ff 30                	push   DWORD PTR [eax]
c00126bf:	e8 69 ff ff ff       	call   c001262d <Dbg::logWriteInt(unsigned int)>
c00126c4:	5f                   	pop    edi
c00126c5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126c9:	84 c0                	test   al,al
c00126cb:	75 b8                	jne    c0012685 <Dbg::kprintf(char const*, ...)+0x1c>
c00126cd:	83 c4 0c             	add    esp,0xc
c00126d0:	5b                   	pop    ebx
c00126d1:	5e                   	pop    esi
c00126d2:	5f                   	pop    edi
c00126d3:	5d                   	pop    ebp
c00126d4:	c3                   	ret    
c00126d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d9:	89 c8                	mov    eax,ecx
c00126db:	83 c1 04             	add    ecx,0x4
c00126de:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126e2:	ff 30                	push   DWORD PTR [eax]
c00126e4:	e8 27 ff ff ff       	call   c0012610 <Dbg::logs(char*)>
c00126e9:	58                   	pop    eax
c00126ea:	eb d9                	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c00126ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126f0:	89 d0                	mov    eax,edx
c00126f2:	83 c2 04             	add    edx,0x4
c00126f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126f9:	ff 30                	push   DWORD PTR [eax]
c00126fb:	e8 2d ff ff ff       	call   c001262d <Dbg::logWriteInt(unsigned int)>
c0012700:	58                   	pop    eax
c0012701:	eb c2                	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012703:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012707:	89 d0                	mov    eax,edx
c0012709:	83 c2 04             	add    edx,0x4
c001270c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001270f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012713:	50                   	push   eax
c0012714:	e8 e0 fe ff ff       	call   c00125f9 <Dbg::logc(char)>
c0012719:	58                   	pop    eax
c001271a:	eb a9                	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c001271c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012720:	89 c8                	mov    eax,ecx
c0012722:	83 c1 04             	add    ecx,0x4
c0012725:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012729:	6a 10                	push   0x10
c001272b:	ff 30                	push   DWORD PTR [eax]
c001272d:	e8 18 ff ff ff       	call   c001264a <Dbg::logWriteIntBase(unsigned int, int)>
c0012732:	59                   	pop    ecx
c0012733:	5f                   	pop    edi
c0012734:	eb 8f                	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012736:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001273a:	89 d0                	mov    eax,edx
c001273c:	83 c2 08             	add    edx,0x8
c001273f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012743:	6a 10                	push   0x10
c0012745:	ff 30                	push   DWORD PTR [eax]
c0012747:	e8 fe fe ff ff       	call   c001264a <Dbg::logWriteIntBase(unsigned int, int)>
c001274c:	58                   	pop    eax
c001274d:	5a                   	pop    edx
c001274e:	e9 72 ff ff ff       	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012753:	6a 25                	push   0x25
c0012755:	e8 9f fe ff ff       	call   c00125f9 <Dbg::logc(char)>
c001275a:	58                   	pop    eax
c001275b:	e9 65 ff ff ff       	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012760:	6a 25                	push   0x25
c0012762:	e8 92 fe ff ff       	call   c00125f9 <Dbg::logc(char)>
c0012767:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001276a:	50                   	push   eax
c001276b:	e8 89 fe ff ff       	call   c00125f9 <Dbg::logc(char)>
c0012770:	5a                   	pop    edx
c0012771:	59                   	pop    ecx
c0012772:	e9 4e ff ff ff       	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012777:	50                   	push   eax
c0012778:	89 eb                	mov    ebx,ebp
c001277a:	e8 7a fe ff ff       	call   c00125f9 <Dbg::logc(char)>
c001277f:	89 fd                	mov    ebp,edi
c0012781:	58                   	pop    eax
c0012782:	e9 3e ff ff ff       	jmp    c00126c5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012787:	90                   	nop

c0012788 <File::read(unsigned long long, void*, int*)>:
c0012788:	53                   	push   ebx
c0012789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001278d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012791:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012798:	3c 19                	cmp    al,0x19
c001279a:	77 35                	ja     c00127d1 <File::read(unsigned long long, void*, int*)+0x49>
c001279c:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c00127a3:	85 c0                	test   eax,eax
c00127a5:	74 2a                	je     c00127d1 <File::read(unsigned long long, void*, int*)+0x49>
c00127a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127ad:	85 c0                	test   eax,eax
c00127af:	74 20                	je     c00127d1 <File::read(unsigned long long, void*, int*)+0x49>
c00127b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127b5:	74 21                	je     c00127d8 <File::read(unsigned long long, void*, int*)+0x50>
c00127b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127cb:	5b                   	pop    ebx
c00127cc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127cf:	ff e0                	jmp    eax
c00127d1:	b8 0b 00 00 00       	mov    eax,0xb
c00127d6:	eb 05                	jmp    c00127dd <File::read(unsigned long long, void*, int*)+0x55>
c00127d8:	b8 05 00 00 00       	mov    eax,0x5
c00127dd:	5b                   	pop    ebx
c00127de:	c3                   	ret    
c00127df:	90                   	nop

c00127e0 <File::write(unsigned long long, void*, int*)>:
c00127e0:	53                   	push   ebx
c00127e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127f0:	3c 19                	cmp    al,0x19
c00127f2:	77 35                	ja     c0012829 <File::write(unsigned long long, void*, int*)+0x49>
c00127f4:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c00127fb:	85 c0                	test   eax,eax
c00127fd:	74 2a                	je     c0012829 <File::write(unsigned long long, void*, int*)+0x49>
c00127ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012805:	85 c0                	test   eax,eax
c0012807:	74 20                	je     c0012829 <File::write(unsigned long long, void*, int*)+0x49>
c0012809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001280d:	74 21                	je     c0012830 <File::write(unsigned long long, void*, int*)+0x50>
c001280f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012811:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012815:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001281b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001281f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012823:	5b                   	pop    ebx
c0012824:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012827:	ff e0                	jmp    eax
c0012829:	b8 0b 00 00 00       	mov    eax,0xb
c001282e:	eb 05                	jmp    c0012835 <File::write(unsigned long long, void*, int*)+0x55>
c0012830:	b8 05 00 00 00       	mov    eax,0x5
c0012835:	5b                   	pop    ebx
c0012836:	c3                   	ret    
c0012837:	90                   	nop

c0012838 <Directory::read(unsigned long long, void*, int*)>:
c0012838:	53                   	push   ebx
c0012839:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001283d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012841:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012848:	3c 19                	cmp    al,0x19
c001284a:	77 35                	ja     c0012881 <Directory::read(unsigned long long, void*, int*)+0x49>
c001284c:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c0012853:	85 c0                	test   eax,eax
c0012855:	74 2a                	je     c0012881 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012857:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001285d:	85 c0                	test   eax,eax
c001285f:	74 20                	je     c0012881 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012861:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012865:	74 21                	je     c0012888 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012867:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012869:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001286d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012877:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001287b:	5b                   	pop    ebx
c001287c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001287f:	ff e0                	jmp    eax
c0012881:	b8 0b 00 00 00       	mov    eax,0xb
c0012886:	eb 05                	jmp    c001288d <Directory::read(unsigned long long, void*, int*)+0x55>
c0012888:	b8 05 00 00 00       	mov    eax,0x5
c001288d:	5b                   	pop    ebx
c001288e:	c3                   	ret    
c001288f:	90                   	nop

c0012890 <Directory::write(unsigned long long, void*, int*)>:
c0012890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012894:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001289b:	b8 0b 00 00 00       	mov    eax,0xb
c00128a0:	80 fa 19             	cmp    dl,0x19
c00128a3:	77 18                	ja     c00128bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128a5:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c00128ac:	85 d2                	test   edx,edx
c00128ae:	74 0d                	je     c00128bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128b0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128b7:	19 c0                	sbb    eax,eax
c00128b9:	83 e0 0a             	and    eax,0xa
c00128bc:	40                   	inc    eax
c00128bd:	c3                   	ret    

c00128be <File::isAtty()>:
c00128be:	31 c0                	xor    eax,eax
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop

c00128c2 <Directory::isAtty()>:
c00128c2:	31 c0                	xor    eax,eax
c00128c4:	c3                   	ret    
c00128c5:	90                   	nop

c00128c6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128c6:	b8 0a 00 00 00       	mov    eax,0xa
c00128cb:	c3                   	ret    

c00128cc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128cc:	b8 0a 00 00 00       	mov    eax,0xa
c00128d1:	c3                   	ret    

c00128d2 <Filesystem::getFileFirstSector(char const*)>:
c00128d2:	31 c0                	xor    eax,eax
c00128d4:	31 d2                	xor    edx,edx
c00128d6:	c3                   	ret    
c00128d7:	90                   	nop

c00128d8 <File::~File()>:
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	ba 00 a8 02 c0       	mov    edx,0xc002a800
c00128e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e4:	89 10                	mov    DWORD PTR [eax],edx
c00128e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ea:	83 ec 0c             	sub    esp,0xc
c00128ed:	50                   	push   eax
c00128ee:	e8 ab e6 ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	90                   	nop
c00128f7:	83 c4 0c             	add    esp,0xc
c00128fa:	c3                   	ret    
c00128fb:	90                   	nop

c00128fc <File::~File()>:
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	83 ec 0c             	sub    esp,0xc
c0012902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012906:	e8 cd ff ff ff       	call   c00128d8 <File::~File()>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	83 ec 08             	sub    esp,0x8
c0012911:	68 14 01 00 00       	push   0x114
c0012916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291a:	e8 72 fc ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	83 c4 0c             	add    esp,0xc
c0012925:	c3                   	ret    

c0012926 <Directory::~Directory()>:
c0012926:	83 ec 0c             	sub    esp,0xc
c0012929:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c001292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012932:	89 10                	mov    DWORD PTR [eax],edx
c0012934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	50                   	push   eax
c001293c:	e8 5d e6 ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	90                   	nop
c0012945:	83 c4 0c             	add    esp,0xc
c0012948:	c3                   	ret    
c0012949:	90                   	nop

c001294a <Directory::~Directory()>:
c001294a:	83 ec 0c             	sub    esp,0xc
c001294d:	83 ec 0c             	sub    esp,0xc
c0012950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012954:	e8 cd ff ff ff       	call   c0012926 <Directory::~Directory()>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	83 ec 08             	sub    esp,0x8
c001295f:	68 14 01 00 00       	push   0x114
c0012964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012968:	e8 24 fc ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	83 c4 0c             	add    esp,0xc
c0012973:	c3                   	ret    

c0012974 <Filesystem::Filesystem()>:
c0012974:	ba 98 a7 02 c0       	mov    edx,0xc002a798
c0012979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001297d:	89 10                	mov    DWORD PTR [eax],edx
c001297f:	8b 15 f4 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9f4
c0012985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012989:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001298c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012990:	a3 f4 d9 02 c0       	mov    ds:0xc002d9f4,eax
c0012995:	90                   	nop
c0012996:	c3                   	ret    
c0012997:	90                   	nop

c0012998 <Filesystem::~Filesystem()>:
c0012998:	ba 98 a7 02 c0       	mov    edx,0xc002a798
c001299d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a1:	89 10                	mov    DWORD PTR [eax],edx
c00129a3:	90                   	nop
c00129a4:	c3                   	ret    
c00129a5:	90                   	nop

c00129a6 <Filesystem::~Filesystem()>:
c00129a6:	83 ec 0c             	sub    esp,0xc
c00129a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129ad:	e8 e6 ff ff ff       	call   c0012998 <Filesystem::~Filesystem()>
c00129b2:	83 c4 04             	add    esp,0x4
c00129b5:	83 ec 08             	sub    esp,0x8
c00129b8:	6a 08                	push   0x8
c00129ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129be:	e8 ce fb ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	83 c4 0c             	add    esp,0xc
c00129c9:	c3                   	ret    

c00129ca <Fs::getcwd(Process*, char*, int)>:
c00129ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129ce:	31 c0                	xor    eax,eax
c00129d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00129d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00129d7:	7d 15                	jge    c00129ee <Fs::getcwd(Process*, char*, int)+0x24>
c00129d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00129e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00129e7:	84 c9                	test   cl,cl
c00129e9:	74 06                	je     c00129f1 <Fs::getcwd(Process*, char*, int)+0x27>
c00129eb:	40                   	inc    eax
c00129ec:	eb e2                	jmp    c00129d0 <Fs::getcwd(Process*, char*, int)+0x6>
c00129ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00129f1:	31 c0                	xor    eax,eax
c00129f3:	c3                   	ret    

c00129f4 <Fs::initVFS()>:
c00129f4:	83 ec 18             	sub    esp,0x18
c00129f7:	6a 08                	push   0x8
c00129f9:	e8 9b cb ff ff       	call   c000f599 <malloc>
c00129fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a01:	e8 cc de 00 00       	call   c00208d2 <FAT::FAT()>
c0012a06:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a0d:	e8 87 cb ff ff       	call   c000f599 <malloc>
c0012a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a15:	e8 c4 f0 00 00       	call   c0021ade <ISO9660::ISO9660()>
c0012a1a:	83 c4 1c             	add    esp,0x1c
c0012a1d:	c3                   	ret    

c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a1e:	55                   	push   ebp
c0012a1f:	57                   	push   edi
c0012a20:	56                   	push   esi
c0012a21:	53                   	push   ebx
c0012a22:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a28:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a2f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a36:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a3d:	68 00 04 00 00       	push   0x400
c0012a42:	6a 00                	push   0x0
c0012a44:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a48:	56                   	push   esi
c0012a49:	e8 02 dd fe ff       	call   c0000750 <memset>
c0012a4e:	83 c4 10             	add    esp,0x10
c0012a51:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a55:	75 0b                	jne    c0012a62 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012a57:	50                   	push   eax
c0012a58:	50                   	push   eax
c0012a59:	57                   	push   edi
c0012a5a:	56                   	push   esi
c0012a5b:	e8 ac dd fe ff       	call   c000080c <strcpy>
c0012a60:	eb 41                	jmp    c0012aa3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012a62:	8a 07                	mov    al,BYTE PTR [edi]
c0012a64:	3c 5c                	cmp    al,0x5c
c0012a66:	74 04                	je     c0012a6c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a68:	3c 2f                	cmp    al,0x2f
c0012a6a:	75 18                	jne    c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012a6c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a6f:	3c 60                	cmp    al,0x60
c0012a71:	7e 03                	jle    c0012a76 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012a73:	83 e8 20             	sub    eax,0x20
c0012a76:	88 04 24             	mov    BYTE PTR [esp],al
c0012a79:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a80:	50                   	push   eax
c0012a81:	50                   	push   eax
c0012a82:	eb 18                	jmp    c0012a9c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a84:	50                   	push   eax
c0012a85:	50                   	push   eax
c0012a86:	55                   	push   ebp
c0012a87:	56                   	push   esi
c0012a88:	e8 7f dd fe ff       	call   c000080c <strcpy>
c0012a8d:	5a                   	pop    edx
c0012a8e:	59                   	pop    ecx
c0012a8f:	68 8a ba 02 c0       	push   0xc002ba8a
c0012a94:	56                   	push   esi
c0012a95:	e8 b2 de fe ff       	call   c000094c <strcat>
c0012a9a:	5d                   	pop    ebp
c0012a9b:	58                   	pop    eax
c0012a9c:	57                   	push   edi
c0012a9d:	56                   	push   esi
c0012a9e:	e8 a9 de fe ff       	call   c000094c <strcat>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012aa9:	3c 60                	cmp    al,0x60
c0012aab:	7e 03                	jle    c0012ab0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012aad:	83 e8 20             	sub    eax,0x20
c0012ab0:	88 04 24             	mov    BYTE PTR [esp],al
c0012ab3:	88 03                	mov    BYTE PTR [ebx],al
c0012ab5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012abc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ac2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ac6:	bf 03 00 00 00       	mov    edi,0x3
c0012acb:	b8 03 00 00 00       	mov    eax,0x3
c0012ad0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ad3:	84 d2                	test   dl,dl
c0012ad5:	0f 84 91 00 00 00    	je     c0012b6c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012adb:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ade:	80 fa 5c             	cmp    dl,0x5c
c0012ae1:	74 05                	je     c0012ae8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012ae3:	80 fa 2f             	cmp    dl,0x2f
c0012ae6:	75 12                	jne    c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ae8:	89 c5                	mov    ebp,eax
c0012aea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012aef:	74 09                	je     c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012af1:	40                   	inc    eax
c0012af2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012af6:	89 cf                	mov    edi,ecx
c0012af8:	eb d6                	jmp    c0012ad0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012afa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012aff:	75 5b                	jne    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b01:	80 fa 2e             	cmp    dl,0x2e
c0012b04:	75 56                	jne    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b06:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b0a:	74 19                	je     c0012b25 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b0c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b11:	74 53                	je     c0012b66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b13:	89 f9                	mov    ecx,edi
c0012b15:	41                   	inc    ecx
c0012b16:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b19:	80 fa 2f             	cmp    dl,0x2f
c0012b1c:	74 f7                	je     c0012b15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b1e:	80 fa 5c             	cmp    dl,0x5c
c0012b21:	74 f2                	je     c0012b15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b23:	eb d1                	jmp    c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b25:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b2a:	74 3a                	je     c0012b66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b2c:	83 f8 03             	cmp    eax,0x3
c0012b2f:	74 c5                	je     c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b31:	41                   	inc    ecx
c0012b32:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b35:	80 fa 2f             	cmp    dl,0x2f
c0012b38:	74 f7                	je     c0012b31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b3a:	80 fa 5c             	cmp    dl,0x5c
c0012b3d:	74 f2                	je     c0012b31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b3f:	48                   	dec    eax
c0012b40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b44:	75 06                	jne    c0012b4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b4a:	eb f3                	jmp    c0012b3f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012b4c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b50:	74 07                	je     c0012b59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b52:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b56:	48                   	dec    eax
c0012b57:	eb f3                	jmp    c0012b4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b59:	40                   	inc    eax
c0012b5a:	eb 9a                	jmp    c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5c:	80 fa 2f             	cmp    dl,0x2f
c0012b5f:	74 95                	je     c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b61:	80 fa 5c             	cmp    dl,0x5c
c0012b64:	74 90                	je     c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b66:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b69:	40                   	inc    eax
c0012b6a:	eb 8a                	jmp    c0012af6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b70:	83 ec 0c             	sub    esp,0xc
c0012b73:	53                   	push   ebx
c0012b74:	e8 f3 db fe ff       	call   c000076c <strlen>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b81:	75 26                	jne    c0012ba9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b83:	83 ec 0c             	sub    esp,0xc
c0012b86:	53                   	push   ebx
c0012b87:	e8 e0 db fe ff       	call   c000076c <strlen>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b94:	74 26                	je     c0012bbc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b96:	83 ec 0c             	sub    esp,0xc
c0012b99:	53                   	push   ebx
c0012b9a:	e8 cd db fe ff       	call   c000076c <strlen>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ba7:	eb c7                	jmp    c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012ba9:	83 ec 0c             	sub    esp,0xc
c0012bac:	53                   	push   ebx
c0012bad:	e8 ba db fe ff       	call   c000076c <strlen>
c0012bb2:	83 c4 10             	add    esp,0x10
c0012bb5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bba:	74 c7                	je     c0012b83 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012bbc:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bc2:	5b                   	pop    ebx
c0012bc3:	5e                   	pop    esi
c0012bc4:	5f                   	pop    edi
c0012bc5:	5d                   	pop    ebp
c0012bc6:	c3                   	ret    
c0012bc7:	90                   	nop

c0012bc8 <File::File(char const*, Process*)>:
c0012bc8:	83 ec 0c             	sub    esp,0xc
c0012bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bcf:	83 ec 08             	sub    esp,0x8
c0012bd2:	6a 00                	push   0x0
c0012bd4:	50                   	push   eax
c0012bd5:	e8 e2 e1 ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	ba 00 a8 02 c0       	mov    edx,0xc002a800
c0012be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be6:	89 10                	mov    DWORD PTR [eax],edx
c0012be8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf6:	83 c0 0d             	add    eax,0xd
c0012bf9:	83 ec 04             	sub    esp,0x4
c0012bfc:	52                   	push   edx
c0012bfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c01:	50                   	push   eax
c0012c02:	e8 17 fe ff ff       	call   c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c11:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c18:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c22:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c26:	90                   	nop
c0012c27:	83 c4 0c             	add    esp,0xc
c0012c2a:	c3                   	ret    
c0012c2b:	90                   	nop

c0012c2c <File::open(FileOpenMode)>:
c0012c2c:	53                   	push   ebx
c0012c2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c32:	83 ec 08             	sub    esp,0x8
c0012c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c39:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c40:	80 fa 19             	cmp    dl,0x19
c0012c43:	77 40                	ja     c0012c85 <File::open(FileOpenMode)+0x59>
c0012c45:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c0012c4c:	85 d2                	test   edx,edx
c0012c4e:	74 35                	je     c0012c85 <File::open(FileOpenMode)+0x59>
c0012c50:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c56:	85 d2                	test   edx,edx
c0012c58:	74 2b                	je     c0012c85 <File::open(FileOpenMode)+0x59>
c0012c5a:	b8 06 00 00 00       	mov    eax,0x6
c0012c5f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c63:	75 20                	jne    c0012c85 <File::open(FileOpenMode)+0x59>
c0012c65:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c67:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c71:	51                   	push   ecx
c0012c72:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c75:	51                   	push   ecx
c0012c76:	52                   	push   edx
c0012c77:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	85 c0                	test   eax,eax
c0012c7f:	75 04                	jne    c0012c85 <File::open(FileOpenMode)+0x59>
c0012c81:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c85:	83 c4 08             	add    esp,0x8
c0012c88:	5b                   	pop    ebx
c0012c89:	c3                   	ret    

c0012c8a <File::close()>:
c0012c8a:	53                   	push   ebx
c0012c8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012c90:	83 ec 08             	sub    esp,0x8
c0012c93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c97:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c9e:	80 fa 19             	cmp    dl,0x19
c0012ca1:	77 41                	ja     c0012ce4 <File::close()+0x5a>
c0012ca3:	8b 1c 95 80 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2180]
c0012caa:	85 db                	test   ebx,ebx
c0012cac:	74 36                	je     c0012ce4 <File::close()+0x5a>
c0012cae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012cb5:	74 2d                	je     c0012ce4 <File::close()+0x5a>
c0012cb7:	b8 05 00 00 00       	mov    eax,0x5
c0012cbc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cc0:	74 22                	je     c0012ce4 <File::close()+0x5a>
c0012cc2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cc6:	8b 04 95 80 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2180]
c0012ccd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cd3:	53                   	push   ebx
c0012cd4:	53                   	push   ebx
c0012cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cdd:	50                   	push   eax
c0012cde:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	83 c4 08             	add    esp,0x8
c0012ce7:	5b                   	pop    ebx
c0012ce8:	c3                   	ret    
c0012ce9:	90                   	nop

c0012cea <File::seek(unsigned long long)>:
c0012cea:	56                   	push   esi
c0012ceb:	53                   	push   ebx
c0012cec:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf1:	51                   	push   ecx
c0012cf2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cf6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012cfa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d05:	80 fa 19             	cmp    dl,0x19
c0012d08:	77 31                	ja     c0012d3b <File::seek(unsigned long long)+0x51>
c0012d0a:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c0012d11:	85 d2                	test   edx,edx
c0012d13:	74 26                	je     c0012d3b <File::seek(unsigned long long)+0x51>
c0012d15:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d1b:	85 d2                	test   edx,edx
c0012d1d:	74 1c                	je     c0012d3b <File::seek(unsigned long long)+0x51>
c0012d1f:	b8 05 00 00 00       	mov    eax,0x5
c0012d24:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d28:	74 11                	je     c0012d3b <File::seek(unsigned long long)+0x51>
c0012d2a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d2c:	53                   	push   ebx
c0012d2d:	51                   	push   ecx
c0012d2e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d34:	52                   	push   edx
c0012d35:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d38:	83 c4 10             	add    esp,0x10
c0012d3b:	5a                   	pop    edx
c0012d3c:	5b                   	pop    ebx
c0012d3d:	5e                   	pop    esi
c0012d3e:	c3                   	ret    
c0012d3f:	90                   	nop

c0012d40 <File::tell(unsigned long long*)>:
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	b8 0b 00 00 00       	mov    eax,0xb
c0012d48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d4c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d53:	80 fa 19             	cmp    dl,0x19
c0012d56:	77 34                	ja     c0012d8c <File::tell(unsigned long long*)+0x4c>
c0012d58:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c0012d5f:	85 d2                	test   edx,edx
c0012d61:	74 29                	je     c0012d8c <File::tell(unsigned long long*)+0x4c>
c0012d63:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d69:	85 d2                	test   edx,edx
c0012d6b:	74 1f                	je     c0012d8c <File::tell(unsigned long long*)+0x4c>
c0012d6d:	b8 05 00 00 00       	mov    eax,0x5
c0012d72:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d76:	74 14                	je     c0012d8c <File::tell(unsigned long long*)+0x4c>
c0012d78:	50                   	push   eax
c0012d79:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d7f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d85:	52                   	push   edx
c0012d86:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d89:	83 c4 10             	add    esp,0x10
c0012d8c:	83 c4 0c             	add    esp,0xc
c0012d8f:	c3                   	ret    

c0012d90 <File::rewind()>:
c0012d90:	83 ec 10             	sub    esp,0x10
c0012d93:	6a 00                	push   0x0
c0012d95:	6a 00                	push   0x0
c0012d97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d9b:	e8 4a ff ff ff       	call   c0012cea <File::seek(unsigned long long)>
c0012da0:	83 c4 1c             	add    esp,0x1c
c0012da3:	c3                   	ret    

c0012da4 <File::unlink()>:
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012db7:	80 f9 19             	cmp    cl,0x19
c0012dba:	77 2f                	ja     c0012deb <File::unlink()+0x47>
c0012dbc:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c0012dc3:	85 c9                	test   ecx,ecx
c0012dc5:	74 24                	je     c0012deb <File::unlink()+0x47>
c0012dc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dcd:	85 c9                	test   ecx,ecx
c0012dcf:	74 1a                	je     c0012deb <File::unlink()+0x47>
c0012dd1:	b8 06 00 00 00       	mov    eax,0x6
c0012dd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dda:	75 0f                	jne    c0012deb <File::unlink()+0x47>
c0012ddc:	83 c2 0d             	add    edx,0xd
c0012ddf:	50                   	push   eax
c0012de0:	50                   	push   eax
c0012de1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012de3:	52                   	push   edx
c0012de4:	51                   	push   ecx
c0012de5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	83 c4 0c             	add    esp,0xc
c0012dee:	c3                   	ret    
c0012def:	90                   	nop

c0012df0 <File::rename(char const*)>:
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	b8 0b 00 00 00       	mov    eax,0xb
c0012df8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dfc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e03:	80 f9 19             	cmp    cl,0x19
c0012e06:	77 32                	ja     c0012e3a <File::rename(char const*)+0x4a>
c0012e08:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c0012e0f:	85 c9                	test   ecx,ecx
c0012e11:	74 27                	je     c0012e3a <File::rename(char const*)+0x4a>
c0012e13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e19:	85 c9                	test   ecx,ecx
c0012e1b:	74 1d                	je     c0012e3a <File::rename(char const*)+0x4a>
c0012e1d:	b8 06 00 00 00       	mov    eax,0x6
c0012e22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e26:	75 12                	jne    c0012e3a <File::rename(char const*)+0x4a>
c0012e28:	83 c2 0d             	add    edx,0xd
c0012e2b:	50                   	push   eax
c0012e2c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e32:	52                   	push   edx
c0012e33:	51                   	push   ecx
c0012e34:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	83 c4 0c             	add    esp,0xc
c0012e3d:	c3                   	ret    

c0012e3e <File::chfatattr(unsigned char, unsigned char)>:
c0012e3e:	57                   	push   edi
c0012e3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e44:	56                   	push   esi
c0012e45:	53                   	push   ebx
c0012e46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e55:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e59:	80 f9 19             	cmp    cl,0x19
c0012e5c:	77 37                	ja     c0012e95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e5e:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c0012e65:	85 c9                	test   ecx,ecx
c0012e67:	74 2c                	je     c0012e95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e6f:	85 c9                	test   ecx,ecx
c0012e71:	74 22                	je     c0012e95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e73:	b8 06 00 00 00       	mov    eax,0x6
c0012e78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e7c:	75 17                	jne    c0012e95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e7e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e80:	89 f0                	mov    eax,esi
c0012e82:	83 c2 0d             	add    edx,0xd
c0012e85:	0f b6 f0             	movzx  esi,al
c0012e88:	0f b6 db             	movzx  ebx,bl
c0012e8b:	56                   	push   esi
c0012e8c:	53                   	push   ebx
c0012e8d:	52                   	push   edx
c0012e8e:	51                   	push   ecx
c0012e8f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	5b                   	pop    ebx
c0012e96:	5e                   	pop    esi
c0012e97:	5f                   	pop    edi
c0012e98:	c3                   	ret    
c0012e99:	90                   	nop

c0012e9a <File::exists()>:
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	31 c0                	xor    eax,eax
c0012e9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ea3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eaa:	80 f9 19             	cmp    cl,0x19
c0012ead:	77 24                	ja     c0012ed3 <File::exists()+0x39>
c0012eaf:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c0012eb6:	85 c9                	test   ecx,ecx
c0012eb8:	74 19                	je     c0012ed3 <File::exists()+0x39>
c0012eba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec0:	85 c9                	test   ecx,ecx
c0012ec2:	74 0f                	je     c0012ed3 <File::exists()+0x39>
c0012ec4:	83 c2 0d             	add    edx,0xd
c0012ec7:	50                   	push   eax
c0012ec8:	50                   	push   eax
c0012ec9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ecb:	52                   	push   edx
c0012ecc:	51                   	push   ecx
c0012ecd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	83 c4 0c             	add    esp,0xc
c0012ed6:	c3                   	ret    
c0012ed7:	90                   	nop

c0012ed8 <File::stat(unsigned long long*, bool*)>:
c0012ed8:	56                   	push   esi
c0012ed9:	53                   	push   ebx
c0012eda:	50                   	push   eax
c0012edb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ee8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ef3:	80 f9 19             	cmp    cl,0x19
c0012ef6:	77 3d                	ja     c0012f35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ef8:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c0012eff:	85 c9                	test   ecx,ecx
c0012f01:	74 32                	je     c0012f35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f09:	85 c9                	test   ecx,ecx
c0012f0b:	74 28                	je     c0012f35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f13:	74 13                	je     c0012f28 <File::stat(unsigned long long*, bool*)+0x50>
c0012f15:	83 ec 04             	sub    esp,0x4
c0012f18:	56                   	push   esi
c0012f19:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f1f:	51                   	push   ecx
c0012f20:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f26:	eb 0a                	jmp    c0012f32 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f28:	53                   	push   ebx
c0012f29:	83 c2 0d             	add    edx,0xd
c0012f2c:	56                   	push   esi
c0012f2d:	52                   	push   edx
c0012f2e:	51                   	push   ecx
c0012f2f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	5a                   	pop    edx
c0012f36:	5b                   	pop    ebx
c0012f37:	5e                   	pop    esi
c0012f38:	c3                   	ret    

c0012f39 <Fs::setcwd(Process*, char*)>:
c0012f39:	55                   	push   ebp
c0012f3a:	57                   	push   edi
c0012f3b:	56                   	push   esi
c0012f3c:	53                   	push   ebx
c0012f3d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f43:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f4a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f50:	57                   	push   edi
c0012f51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f58:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f5c:	56                   	push   esi
c0012f5d:	e8 bc fa ff ff       	call   c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f65:	e8 02 d8 fe ff       	call   c000076c <strlen>
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	83 f8 02             	cmp    eax,0x2
c0012f70:	77 17                	ja     c0012f89 <Fs::setcwd(Process*, char*)+0x50>
c0012f72:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f77:	83 e8 41             	sub    eax,0x41
c0012f7a:	83 f8 19             	cmp    eax,0x19
c0012f7d:	76 24                	jbe    c0012fa3 <Fs::setcwd(Process*, char*)+0x6a>
c0012f7f:	b8 03 00 00 00       	mov    eax,0x3
c0012f84:	e9 e0 00 00 00       	jmp    c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0012f89:	83 ec 0c             	sub    esp,0xc
c0012f8c:	56                   	push   esi
c0012f8d:	e8 da d7 fe ff       	call   c000076c <strlen>
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	83 f8 03             	cmp    eax,0x3
c0012f98:	75 34                	jne    c0012fce <Fs::setcwd(Process*, char*)+0x95>
c0012f9a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f9f:	75 2d                	jne    c0012fce <Fs::setcwd(Process*, char*)+0x95>
c0012fa1:	eb cf                	jmp    c0012f72 <Fs::setcwd(Process*, char*)+0x39>
c0012fa3:	8b 14 85 80 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2180]
c0012faa:	b8 05 00 00 00       	mov    eax,0x5
c0012faf:	85 d2                	test   edx,edx
c0012fb1:	0f 84 b2 00 00 00    	je     c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0012fb7:	b8 06 00 00 00       	mov    eax,0x6
c0012fbc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fc3:	0f 85 92 00 00 00    	jne    c001305b <Fs::setcwd(Process*, char*)+0x122>
c0012fc9:	e9 9b 00 00 00       	jmp    c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	68 14 01 00 00       	push   0x114
c0012fd6:	e8 be c5 ff ff       	call   c000f599 <malloc>
c0012fdb:	83 c4 0c             	add    esp,0xc
c0012fde:	89 c3                	mov    ebx,eax
c0012fe0:	55                   	push   ebp
c0012fe1:	56                   	push   esi
c0012fe2:	50                   	push   eax
c0012fe3:	e8 e0 fb ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c0012fe8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012fed:	83 c4 0c             	add    esp,0xc
c0012ff0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012ff4:	50                   	push   eax
c0012ff5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ff9:	50                   	push   eax
c0012ffa:	53                   	push   ebx
c0012ffb:	e8 d8 fe ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	83 f8 02             	cmp    eax,0x2
c0013006:	74 04                	je     c001300c <Fs::setcwd(Process*, char*)+0xd3>
c0013008:	85 c0                	test   eax,eax
c001300a:	74 1c                	je     c0013028 <Fs::setcwd(Process*, char*)+0xef>
c001300c:	b8 01 00 00 00       	mov    eax,0x1
c0013011:	85 db                	test   ebx,ebx
c0013013:	74 54                	je     c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001301a:	53                   	push   ebx
c001301b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	b8 01 00 00 00       	mov    eax,0x1
c0013026:	eb 41                	jmp    c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0013028:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001302d:	75 1c                	jne    c001304b <Fs::setcwd(Process*, char*)+0x112>
c001302f:	b8 02 00 00 00       	mov    eax,0x2
c0013034:	85 db                	test   ebx,ebx
c0013036:	74 31                	je     c0013069 <Fs::setcwd(Process*, char*)+0x130>
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001303d:	53                   	push   ebx
c001303e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013041:	83 c4 10             	add    esp,0x10
c0013044:	b8 02 00 00 00       	mov    eax,0x2
c0013049:	eb 1e                	jmp    c0013069 <Fs::setcwd(Process*, char*)+0x130>
c001304b:	85 db                	test   ebx,ebx
c001304d:	74 0c                	je     c001305b <Fs::setcwd(Process*, char*)+0x122>
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013054:	53                   	push   ebx
c0013055:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	50                   	push   eax
c001305c:	50                   	push   eax
c001305d:	56                   	push   esi
c001305e:	57                   	push   edi
c001305f:	e8 a8 d7 fe ff       	call   c000080c <strcpy>
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	31 c0                	xor    eax,eax
c0013069:	81 c4 1c 02 00 00    	add    esp,0x21c
c001306f:	5b                   	pop    ebx
c0013070:	5e                   	pop    esi
c0013071:	5f                   	pop    edi
c0013072:	5d                   	pop    ebp
c0013073:	c3                   	ret    

c0013074 <Directory::Directory(char const*, Process*)>:
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307b:	83 ec 08             	sub    esp,0x8
c001307e:	6a 00                	push   0x0
c0013080:	50                   	push   eax
c0013081:	e8 36 dd ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c001308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013092:	89 10                	mov    DWORD PTR [eax],edx
c0013094:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013098:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001309e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a2:	83 c0 0d             	add    eax,0xd
c00130a5:	83 ec 04             	sub    esp,0x4
c00130a8:	52                   	push   edx
c00130a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ad:	50                   	push   eax
c00130ae:	e8 6b f9 ff ff       	call   c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130bd:	8d 50 bf             	lea    edx,[eax-0x41]
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130d2:	90                   	nop
c00130d3:	83 c4 0c             	add    esp,0xc
c00130d6:	c3                   	ret    
c00130d7:	90                   	nop

c00130d8 <Directory::open()>:
c00130d8:	53                   	push   ebx
c00130d9:	b8 0b 00 00 00       	mov    eax,0xb
c00130de:	83 ec 08             	sub    esp,0x8
c00130e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130ec:	80 fa 19             	cmp    dl,0x19
c00130ef:	77 3d                	ja     c001312e <Directory::open()+0x56>
c00130f1:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c00130f8:	85 d2                	test   edx,edx
c00130fa:	74 32                	je     c001312e <Directory::open()+0x56>
c00130fc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013102:	85 d2                	test   edx,edx
c0013104:	74 28                	je     c001312e <Directory::open()+0x56>
c0013106:	b8 06 00 00 00       	mov    eax,0x6
c001310b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001310f:	75 1d                	jne    c001312e <Directory::open()+0x56>
c0013111:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013117:	50                   	push   eax
c0013118:	8b 02                	mov    eax,DWORD PTR [edx]
c001311a:	51                   	push   ecx
c001311b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001311e:	51                   	push   ecx
c001311f:	52                   	push   edx
c0013120:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	85 c0                	test   eax,eax
c0013128:	75 04                	jne    c001312e <Directory::open()+0x56>
c001312a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001312e:	83 c4 08             	add    esp,0x8
c0013131:	5b                   	pop    ebx
c0013132:	c3                   	ret    
c0013133:	90                   	nop

c0013134 <Directory::close()>:
c0013134:	53                   	push   ebx
c0013135:	b8 0b 00 00 00       	mov    eax,0xb
c001313a:	83 ec 08             	sub    esp,0x8
c001313d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013141:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013148:	80 fa 19             	cmp    dl,0x19
c001314b:	77 41                	ja     c001318e <Directory::close()+0x5a>
c001314d:	8b 1c 95 80 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2180]
c0013154:	85 db                	test   ebx,ebx
c0013156:	74 36                	je     c001318e <Directory::close()+0x5a>
c0013158:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001315f:	74 2d                	je     c001318e <Directory::close()+0x5a>
c0013161:	b8 05 00 00 00       	mov    eax,0x5
c0013166:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001316a:	74 22                	je     c001318e <Directory::close()+0x5a>
c001316c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013170:	8b 04 95 80 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2180]
c0013177:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001317d:	53                   	push   ebx
c001317e:	53                   	push   ebx
c001317f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013181:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013187:	50                   	push   eax
c0013188:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	83 c4 08             	add    esp,0x8
c0013191:	5b                   	pop    ebx
c0013192:	c3                   	ret    
c0013193:	90                   	nop

c0013194 <Directory::unlink()>:
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	b8 0b 00 00 00       	mov    eax,0xb
c001319c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131a7:	80 f9 19             	cmp    cl,0x19
c00131aa:	77 2f                	ja     c00131db <Directory::unlink()+0x47>
c00131ac:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c00131b3:	85 c9                	test   ecx,ecx
c00131b5:	74 24                	je     c00131db <Directory::unlink()+0x47>
c00131b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131bd:	85 c9                	test   ecx,ecx
c00131bf:	74 1a                	je     c00131db <Directory::unlink()+0x47>
c00131c1:	b8 06 00 00 00       	mov    eax,0x6
c00131c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131ca:	75 0f                	jne    c00131db <Directory::unlink()+0x47>
c00131cc:	83 c2 0d             	add    edx,0xd
c00131cf:	50                   	push   eax
c00131d0:	50                   	push   eax
c00131d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131d3:	52                   	push   edx
c00131d4:	51                   	push   ecx
c00131d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	83 c4 0c             	add    esp,0xc
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <Directory::rename(char const*)>:
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	b8 0b 00 00 00       	mov    eax,0xb
c00131e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131f3:	80 f9 19             	cmp    cl,0x19
c00131f6:	77 32                	ja     c001322a <Directory::rename(char const*)+0x4a>
c00131f8:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c00131ff:	85 c9                	test   ecx,ecx
c0013201:	74 27                	je     c001322a <Directory::rename(char const*)+0x4a>
c0013203:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013209:	85 c9                	test   ecx,ecx
c001320b:	74 1d                	je     c001322a <Directory::rename(char const*)+0x4a>
c001320d:	b8 06 00 00 00       	mov    eax,0x6
c0013212:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013216:	75 12                	jne    c001322a <Directory::rename(char const*)+0x4a>
c0013218:	83 c2 0d             	add    edx,0xd
c001321b:	50                   	push   eax
c001321c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001321e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013222:	52                   	push   edx
c0013223:	51                   	push   ecx
c0013224:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	83 c4 0c             	add    esp,0xc
c001322d:	c3                   	ret    

c001322e <Directory::exists()>:
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	31 c0                	xor    eax,eax
c0013233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013237:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001323e:	80 f9 19             	cmp    cl,0x19
c0013241:	77 24                	ja     c0013267 <Directory::exists()+0x39>
c0013243:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c001324a:	85 c9                	test   ecx,ecx
c001324c:	74 19                	je     c0013267 <Directory::exists()+0x39>
c001324e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013254:	85 c9                	test   ecx,ecx
c0013256:	74 0f                	je     c0013267 <Directory::exists()+0x39>
c0013258:	83 c2 0d             	add    edx,0xd
c001325b:	50                   	push   eax
c001325c:	50                   	push   eax
c001325d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001325f:	52                   	push   edx
c0013260:	51                   	push   ecx
c0013261:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	83 c4 0c             	add    esp,0xc
c001326a:	c3                   	ret    
c001326b:	90                   	nop

c001326c <Directory::read(dirent*)>:
c001326c:	83 ec 1c             	sub    esp,0x1c
c001326f:	b8 0b 00 00 00       	mov    eax,0xb
c0013274:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013278:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001327f:	80 fa 19             	cmp    dl,0x19
c0013282:	77 30                	ja     c00132b4 <Directory::read(dirent*)+0x48>
c0013284:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c001328b:	85 d2                	test   edx,edx
c001328d:	74 25                	je     c00132b4 <Directory::read(dirent*)+0x48>
c001328f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013296:	74 1c                	je     c00132b4 <Directory::read(dirent*)+0x48>
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001329d:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132a1:	52                   	push   edx
c00132a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132a6:	6a 00                	push   0x0
c00132a8:	68 10 01 00 00       	push   0x110
c00132ad:	51                   	push   ecx
c00132ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132b1:	83 c4 20             	add    esp,0x20
c00132b4:	83 c4 1c             	add    esp,0x1c
c00132b7:	c3                   	ret    

c00132b8 <Directory::create()>:
c00132b8:	83 ec 0c             	sub    esp,0xc
c00132bb:	b8 0b 00 00 00       	mov    eax,0xb
c00132c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132cb:	80 f9 19             	cmp    cl,0x19
c00132ce:	77 2f                	ja     c00132ff <Directory::create()+0x47>
c00132d0:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c00132d7:	85 c9                	test   ecx,ecx
c00132d9:	74 24                	je     c00132ff <Directory::create()+0x47>
c00132db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132e1:	85 c9                	test   ecx,ecx
c00132e3:	74 1a                	je     c00132ff <Directory::create()+0x47>
c00132e5:	b8 06 00 00 00       	mov    eax,0x6
c00132ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132ee:	75 0f                	jne    c00132ff <Directory::create()+0x47>
c00132f0:	83 c2 0d             	add    edx,0xd
c00132f3:	50                   	push   eax
c00132f4:	50                   	push   eax
c00132f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f7:	52                   	push   edx
c00132f8:	51                   	push   ecx
c00132f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00132fc:	83 c4 10             	add    esp,0x10
c00132ff:	83 c4 0c             	add    esp,0xc
c0013302:	c3                   	ret    
c0013303:	90                   	nop

c0013304 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013304:	b8 0a 00 00 00       	mov    eax,0xa
c0013309:	c3                   	ret    

c001330a <Bus::Bus(char const*)>:
c001330a:	83 ec 0c             	sub    esp,0xc
c001330d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013311:	83 ec 08             	sub    esp,0x8
c0013314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013318:	50                   	push   eax
c0013319:	e8 88 09 00 00       	call   c0013ca6 <Device::Device(char const*)>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	89 10                	mov    DWORD PTR [eax],edx
c001332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013330:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001333a:	90                   	nop
c001333b:	83 c4 0c             	add    esp,0xc
c001333e:	c3                   	ret    
c001333f:	90                   	nop

c0013340 <Bus::~Bus()>:
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0013348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334c:	89 10                	mov    DWORD PTR [eax],edx
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	50                   	push   eax
c0013356:	e8 15 06 00 00       	call   c0013970 <Device::~Device()>
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	90                   	nop
c001335f:	83 c4 0c             	add    esp,0xc
c0013362:	c3                   	ret    
c0013363:	90                   	nop

c0013364 <Bus::~Bus()>:
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	83 ec 0c             	sub    esp,0xc
c001336a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001336e:	e8 cd ff ff ff       	call   c0013340 <Bus::~Bus()>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	83 ec 08             	sub    esp,0x8
c0013379:	68 58 01 00 00       	push   0x158
c001337e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013382:	e8 0a f2 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	83 c4 0c             	add    esp,0xc
c001338d:	c3                   	ret    

c001338e <Buzzer::Buzzer(char const*)>:
c001338e:	83 ec 0c             	sub    esp,0xc
c0013391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013395:	83 ec 08             	sub    esp,0x8
c0013398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001339c:	50                   	push   eax
c001339d:	e8 04 09 00 00       	call   c0013ca6 <Device::Device(char const*)>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c00133aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ae:	89 10                	mov    DWORD PTR [eax],edx
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133cc:	90                   	nop
c00133cd:	83 c4 0c             	add    esp,0xc
c00133d0:	c3                   	ret    
c00133d1:	90                   	nop

c00133d2 <Buzzer::~Buzzer()>:
c00133d2:	83 ec 0c             	sub    esp,0xc
c00133d5:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c00133da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133de:	89 10                	mov    DWORD PTR [eax],edx
c00133e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	50                   	push   eax
c00133e8:	e8 83 05 00 00       	call   c0013970 <Device::~Device()>
c00133ed:	83 c4 10             	add    esp,0x10
c00133f0:	90                   	nop
c00133f1:	83 c4 0c             	add    esp,0xc
c00133f4:	c3                   	ret    
c00133f5:	90                   	nop

c00133f6 <Buzzer::~Buzzer()>:
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	83 ec 0c             	sub    esp,0xc
c00133fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013400:	e8 cd ff ff ff       	call   c00133d2 <Buzzer::~Buzzer()>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	83 ec 08             	sub    esp,0x8
c001340b:	68 5c 01 00 00       	push   0x15c
c0013410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013414:	e8 78 f1 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	83 c4 0c             	add    esp,0xc
c001341f:	c3                   	ret    

c0013420 <Buzzer::stop()>:
c0013420:	83 ec 14             	sub    esp,0x14
c0013423:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013427:	8b 10                	mov    edx,DWORD PTR [eax]
c0013429:	6a 00                	push   0x0
c001342b:	50                   	push   eax
c001342c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001342f:	83 c4 1c             	add    esp,0x1c
c0013432:	c3                   	ret    

c0013433 <beepThread(void*)>:
c0013433:	53                   	push   ebx
c0013434:	83 ec 08             	sub    esp,0x8
c0013437:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001343c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013440:	48                   	dec    eax
c0013441:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0013446:	75 01                	jne    c0013449 <beepThread(void*)+0x16>
c0013448:	fb                   	sti    
c0013449:	50                   	push   eax
c001344a:	50                   	push   eax
c001344b:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013450:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013456:	52                   	push   edx
c0013457:	50                   	push   eax
c0013458:	e8 dc a7 00 00       	call   c001dc39 <nanoSleep(unsigned long long)>
c001345d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013460:	e8 bb ff ff ff       	call   c0013420 <Buzzer::stop()>
c0013465:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001346d:	83 c4 18             	add    esp,0x18
c0013470:	5b                   	pop    ebx
c0013471:	e9 bf a6 00 00       	jmp    c001db35 <blockTask(TaskState)>

c0013476 <Buzzer::beep(int, int, bool)>:
c0013476:	57                   	push   edi
c0013477:	56                   	push   esi
c0013478:	53                   	push   ebx
c0013479:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001347d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013481:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013485:	52                   	push   edx
c0013486:	52                   	push   edx
c0013487:	8b 06                	mov    eax,DWORD PTR [esi]
c0013489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348d:	56                   	push   esi
c001348e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	89 f8                	mov    eax,edi
c0013496:	84 c0                	test   al,al
c0013498:	74 1f                	je     c00134b9 <Buzzer::beep(int, int, bool)+0x43>
c001349a:	50                   	push   eax
c001349b:	50                   	push   eax
c001349c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134a2:	99                   	cdq    
c00134a3:	52                   	push   edx
c00134a4:	50                   	push   eax
c00134a5:	e8 8f a7 00 00       	call   c001dc39 <nanoSleep(unsigned long long)>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134b1:	5b                   	pop    ebx
c00134b2:	5e                   	pop    esi
c00134b3:	5f                   	pop    edi
c00134b4:	e9 67 ff ff ff       	jmp    c0013420 <Buzzer::stop()>
c00134b9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134bf:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00134c4:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134cc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134d0:	c7 44 24 14 33 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013433
c00134d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134dc:	5b                   	pop    ebx
c00134dd:	5e                   	pop    esi
c00134de:	5f                   	pop    edi
c00134df:	e9 56 a2 00 00       	jmp    c001d73a <Process::createThread(void (*)(void*), void*, int)>

c00134e4 <User::loadClockSettings(int)>:
c00134e4:	53                   	push   ebx
c00134e5:	83 ec 14             	sub    esp,0x14
c00134e8:	68 14 01 00 00       	push   0x114
c00134ed:	e8 a7 c0 ff ff       	call   c000f599 <malloc>
c00134f2:	83 c4 0c             	add    esp,0xc
c00134f5:	89 c3                	mov    ebx,eax
c00134f7:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c00134fd:	68 8c a8 02 c0       	push   0xc002a88c
c0013502:	50                   	push   eax
c0013503:	e8 c0 f6 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c0013508:	58                   	pop    eax
c0013509:	5a                   	pop    edx
c001350a:	6a 01                	push   0x1
c001350c:	53                   	push   ebx
c001350d:	e8 1a f7 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c0013512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013515:	e8 70 f7 ff ff       	call   c0012c8a <File::close()>
c001351a:	83 c4 10             	add    esp,0x10
c001351d:	85 db                	test   ebx,ebx
c001351f:	74 0f                	je     c0013530 <User::loadClockSettings(int)+0x4c>
c0013521:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013523:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001352a:	83 c4 08             	add    esp,0x8
c001352d:	5b                   	pop    ebx
c001352e:	ff e0                	jmp    eax
c0013530:	83 c4 08             	add    esp,0x8
c0013533:	5b                   	pop    ebx
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Clock::Clock(char const*)>:
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353d:	83 ec 08             	sub    esp,0x8
c0013540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013544:	50                   	push   eax
c0013545:	e8 5c 07 00 00       	call   c0013ca6 <Device::Device(char const*)>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	ba b4 a8 02 c0       	mov    edx,0xc002a8b4
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	89 10                	mov    DWORD PTR [eax],edx
c0013558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013566:	90                   	nop
c0013567:	83 c4 0c             	add    esp,0xc
c001356a:	c3                   	ret    
c001356b:	90                   	nop

c001356c <Clock::~Clock()>:
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	ba b4 a8 02 c0       	mov    edx,0xc002a8b4
c0013574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013578:	89 10                	mov    DWORD PTR [eax],edx
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	83 ec 0c             	sub    esp,0xc
c0013581:	50                   	push   eax
c0013582:	e8 e9 03 00 00       	call   c0013970 <Device::~Device()>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	90                   	nop
c001358b:	83 c4 0c             	add    esp,0xc
c001358e:	c3                   	ret    
c001358f:	90                   	nop

c0013590 <Clock::~Clock()>:
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	83 ec 0c             	sub    esp,0xc
c0013596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359a:	e8 cd ff ff ff       	call   c001356c <Clock::~Clock()>
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	83 ec 08             	sub    esp,0x8
c00135a5:	68 58 01 00 00       	push   0x158
c00135aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ae:	e8 de ef ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00135b3:	83 c4 10             	add    esp,0x10
c00135b6:	83 c4 0c             	add    esp,0xc
c00135b9:	c3                   	ret    

c00135ba <Clock::timeInSecondsLocal()>:
c00135ba:	53                   	push   ebx
c00135bb:	83 ec 14             	sub    esp,0x14
c00135be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00135c4:	50                   	push   eax
c00135c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135c8:	0f b6 0d fc d9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d9fc
c00135cf:	03 0d 00 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da00
c00135d5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135db:	89 cb                	mov    ebx,ecx
c00135dd:	c1 fb 1f             	sar    ebx,0x1f
c00135e0:	01 c8                	add    eax,ecx
c00135e2:	11 da                	adc    edx,ebx
c00135e4:	83 c4 10             	add    esp,0x10
c00135e7:	31 c9                	xor    ecx,ecx
c00135e9:	80 3d fd d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9fd,0x0
c00135f0:	74 05                	je     c00135f7 <Clock::timeInSecondsLocal()+0x3d>
c00135f2:	b9 08 07 00 00       	mov    ecx,0x708
c00135f7:	31 db                	xor    ebx,ebx
c00135f9:	01 c8                	add    eax,ecx
c00135fb:	11 da                	adc    edx,ebx
c00135fd:	83 c4 08             	add    esp,0x8
c0013600:	5b                   	pop    ebx
c0013601:	c3                   	ret    

c0013602 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013602:	57                   	push   edi
c0013603:	56                   	push   esi
c0013604:	53                   	push   ebx
c0013605:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013609:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001360d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001360f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013613:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013616:	0f b6 05 fc d9 02 c0 	movzx  eax,BYTE PTR ds:0xc002d9fc
c001361d:	03 05 00 da 02 c0    	add    eax,DWORD PTR ds:0xc002da00
c0013623:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013629:	99                   	cdq    
c001362a:	29 c6                	sub    esi,eax
c001362c:	19 d7                	sbb    edi,edx
c001362e:	89 f0                	mov    eax,esi
c0013630:	89 fa                	mov    edx,edi
c0013632:	31 f6                	xor    esi,esi
c0013634:	80 3d fd d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9fd,0x0
c001363b:	74 05                	je     c0013642 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001363d:	be 08 07 00 00       	mov    esi,0x708
c0013642:	31 ff                	xor    edi,edi
c0013644:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013648:	29 f0                	sub    eax,esi
c001364a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001364e:	19 fa                	sbb    edx,edi
c0013650:	89 d8                	mov    eax,ebx
c0013652:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013656:	5b                   	pop    ebx
c0013657:	5e                   	pop    esi
c0013658:	5f                   	pop    edi
c0013659:	ff e0                	jmp    eax

c001365b <datetimeToSeconds(datetime_t)>:
c001365b:	55                   	push   ebp
c001365c:	57                   	push   edi
c001365d:	56                   	push   esi
c001365e:	53                   	push   ebx
c001365f:	83 ec 14             	sub    esp,0x14
c0013662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013666:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001366a:	89 d3                	mov    ebx,edx
c001366c:	0f b6 c6             	movzx  eax,dh
c001366f:	c1 eb 10             	shr    ebx,0x10
c0013672:	48                   	dec    eax
c0013673:	66 81 eb 6c 07       	sub    bx,0x76c
c0013678:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001367c:	0f b6 f5             	movzx  esi,ch
c001367f:	89 cf                	mov    edi,ecx
c0013681:	6b f6 3c             	imul   esi,esi,0x3c
c0013684:	c1 ef 10             	shr    edi,0x10
c0013687:	0f b6 c9             	movzx  ecx,cl
c001368a:	89 f8                	mov    eax,edi
c001368c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013692:	0f b6 f8             	movzx  edi,al
c0013695:	0f b6 d2             	movzx  edx,dl
c0013698:	01 fe                	add    esi,edi
c001369a:	01 f1                	add    ecx,esi
c001369c:	0f b7 f3             	movzx  esi,bx
c001369f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00136a3:	c1 f9 1f             	sar    ecx,0x1f
c00136a6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00136ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136af:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136b4:	8b 0c 8d 00 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5700]
c00136bb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00136bf:	76 29                	jbe    c00136ea <datetimeToSeconds(datetime_t)+0x8f>
c00136c1:	f6 c3 03             	test   bl,0x3
c00136c4:	75 24                	jne    c00136ea <datetimeToSeconds(datetime_t)+0x8f>
c00136c6:	31 d2                	xor    edx,edx
c00136c8:	bf 64 00 00 00       	mov    edi,0x64
c00136cd:	89 d8                	mov    eax,ebx
c00136cf:	66 f7 f7             	div    di
c00136d2:	66 85 d2             	test   dx,dx
c00136d5:	75 12                	jne    c00136e9 <datetimeToSeconds(datetime_t)+0x8e>
c00136d7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136dd:	bf 90 01 00 00       	mov    edi,0x190
c00136e2:	99                   	cdq    
c00136e3:	f7 ff                	idiv   edi
c00136e5:	85 d2                	test   edx,edx
c00136e7:	75 01                	jne    c00136ea <datetimeToSeconds(datetime_t)+0x8f>
c00136e9:	41                   	inc    ecx
c00136ea:	66 83 fb 46          	cmp    bx,0x46
c00136ee:	76 45                	jbe    c0013735 <datetimeToSeconds(datetime_t)+0xda>
c00136f0:	bb 46 00 00 00       	mov    ebx,0x46
c00136f5:	bf 64 00 00 00       	mov    edi,0x64
c00136fa:	bd 90 01 00 00       	mov    ebp,0x190
c00136ff:	b8 6d 01 00 00       	mov    eax,0x16d
c0013704:	f6 c3 03             	test   bl,0x3
c0013707:	75 23                	jne    c001372c <datetimeToSeconds(datetime_t)+0xd1>
c0013709:	89 d8                	mov    eax,ebx
c001370b:	99                   	cdq    
c001370c:	f7 ff                	idiv   edi
c001370e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013713:	85 d2                	test   edx,edx
c0013715:	75 15                	jne    c001372c <datetimeToSeconds(datetime_t)+0xd1>
c0013717:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001371d:	99                   	cdq    
c001371e:	f7 fd                	idiv   ebp
c0013720:	83 fa 01             	cmp    edx,0x1
c0013723:	19 c0                	sbb    eax,eax
c0013725:	f7 d0                	not    eax
c0013727:	05 6e 01 00 00       	add    eax,0x16e
c001372c:	01 c1                	add    ecx,eax
c001372e:	43                   	inc    ebx
c001372f:	39 f3                	cmp    ebx,esi
c0013731:	7c cc                	jl     c00136ff <datetimeToSeconds(datetime_t)+0xa4>
c0013733:	eb 35                	jmp    c001376a <datetimeToSeconds(datetime_t)+0x10f>
c0013735:	74 33                	je     c001376a <datetimeToSeconds(datetime_t)+0x10f>
c0013737:	b8 45 00 00 00       	mov    eax,0x45
c001373c:	89 c2                	mov    edx,eax
c001373e:	83 e2 03             	and    edx,0x3
c0013741:	39 f0                	cmp    eax,esi
c0013743:	7e 0f                	jle    c0013754 <datetimeToSeconds(datetime_t)+0xf9>
c0013745:	83 fa 01             	cmp    edx,0x1
c0013748:	19 d2                	sbb    edx,edx
c001374a:	48                   	dec    eax
c001374b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013752:	eb e8                	jmp    c001373c <datetimeToSeconds(datetime_t)+0xe1>
c0013754:	b8 6d 01 00 00       	mov    eax,0x16d
c0013759:	85 d2                	test   edx,edx
c001375b:	75 0b                	jne    c0013768 <datetimeToSeconds(datetime_t)+0x10d>
c001375d:	66 83 fb 01          	cmp    bx,0x1
c0013761:	19 c0                	sbb    eax,eax
c0013763:	05 6e 01 00 00       	add    eax,0x16e
c0013768:	29 c1                	sub    ecx,eax
c001376a:	b8 80 51 01 00       	mov    eax,0x15180
c001376f:	f7 e9                	imul   ecx
c0013771:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013775:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013779:	83 c4 14             	add    esp,0x14
c001377c:	5b                   	pop    ebx
c001377d:	5e                   	pop    esi
c001377e:	5f                   	pop    edi
c001377f:	5d                   	pop    ebp
c0013780:	c3                   	ret    
c0013781:	90                   	nop

c0013782 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013782:	57                   	push   edi
c0013783:	56                   	push   esi
c0013784:	53                   	push   ebx
c0013785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013789:	8b 06                	mov    eax,DWORD PTR [esi]
c001378b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001378e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013792:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013796:	e8 c0 fe ff ff       	call   c001365b <datetimeToSeconds(datetime_t)>
c001379b:	59                   	pop    ecx
c001379c:	0f b6 0d fc d9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d9fc
c00137a3:	5b                   	pop    ebx
c00137a4:	03 0d 00 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da00
c00137aa:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137b0:	89 cb                	mov    ebx,ecx
c00137b2:	c1 fb 1f             	sar    ebx,0x1f
c00137b5:	29 c8                	sub    eax,ecx
c00137b7:	19 da                	sbb    edx,ebx
c00137b9:	31 c9                	xor    ecx,ecx
c00137bb:	80 3d fd d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9fd,0x0
c00137c2:	74 05                	je     c00137c9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137c4:	b9 08 07 00 00       	mov    ecx,0x708
c00137c9:	31 db                	xor    ebx,ebx
c00137cb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137cf:	29 c8                	sub    eax,ecx
c00137d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137d5:	19 da                	sbb    edx,ebx
c00137d7:	89 f8                	mov    eax,edi
c00137d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137dd:	5b                   	pop    ebx
c00137de:	5e                   	pop    esi
c00137df:	5f                   	pop    edi
c00137e0:	ff e0                	jmp    eax

c00137e2 <secondsToDatetime(unsigned long long)>:
c00137e2:	55                   	push   ebp
c00137e3:	57                   	push   edi
c00137e4:	56                   	push   esi
c00137e5:	53                   	push   ebx
c00137e6:	83 ec 1c             	sub    esp,0x1c
c00137e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137ed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137f1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137f5:	6a 00                	push   0x0
c00137f7:	68 80 51 01 00       	push   0x15180
c00137fc:	55                   	push   ebp
c00137fd:	57                   	push   edi
c00137fe:	e8 a1 2e 01 00       	call   c00266a4 <__udivdi3>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001380c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013810:	6a 00                	push   0x0
c0013812:	68 80 51 01 00       	push   0x15180
c0013817:	55                   	push   ebp
c0013818:	57                   	push   edi
c0013819:	bf 10 0e 00 00       	mov    edi,0xe10
c001381e:	e8 81 2f 01 00       	call   c00267a4 <__umoddi3>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	99                   	cdq    
c0013827:	f7 ff                	idiv   edi
c0013829:	bf 3c 00 00 00       	mov    edi,0x3c
c001382e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013831:	89 d0                	mov    eax,edx
c0013833:	99                   	cdq    
c0013834:	f7 ff                	idiv   edi
c0013836:	85 db                	test   ebx,ebx
c0013838:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001383b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001383e:	79 11                	jns    c0013851 <secondsToDatetime(unsigned long long)+0x6f>
c0013840:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013844:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001384a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001384f:	eb 07                	jmp    c0013858 <secondsToDatetime(unsigned long long)+0x76>
c0013851:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013856:	89 d8                	mov    eax,ebx
c0013858:	bf b4 05 00 00       	mov    edi,0x5b4
c001385d:	99                   	cdq    
c001385e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013863:	f7 f9                	idiv   ecx
c0013865:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001386a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001386e:	31 d2                	xor    edx,edx
c0013870:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013878:	01 c3                	add    ebx,eax
c001387a:	89 d8                	mov    eax,ebx
c001387c:	f7 f1                	div    ecx
c001387e:	31 d2                	xor    edx,edx
c0013880:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013883:	89 d8                	mov    eax,ebx
c0013885:	f7 f7                	div    edi
c0013887:	31 d2                	xor    edx,edx
c0013889:	29 c1                	sub    ecx,eax
c001388b:	89 d8                	mov    eax,ebx
c001388d:	f7 f5                	div    ebp
c001388f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013894:	29 c1                	sub    ecx,eax
c0013896:	31 d2                	xor    edx,edx
c0013898:	89 c8                	mov    eax,ecx
c001389a:	f7 f5                	div    ebp
c001389c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138a5:	31 d2                	xor    edx,edx
c00138a7:	89 c8                	mov    eax,ecx
c00138a9:	f7 f5                	div    ebp
c00138ab:	31 d2                	xor    edx,edx
c00138ad:	01 c3                	add    ebx,eax
c00138af:	89 c8                	mov    eax,ecx
c00138b1:	f7 f7                	div    edi
c00138b3:	bf 99 00 00 00       	mov    edi,0x99
c00138b8:	29 c3                	sub    ebx,eax
c00138ba:	31 d2                	xor    edx,edx
c00138bc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138c4:	29 c3                	sub    ebx,eax
c00138c6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138c9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138cc:	bb 05 00 00 00       	mov    ebx,0x5
c00138d1:	83 c1 02             	add    ecx,0x2
c00138d4:	89 c8                	mov    eax,ecx
c00138d6:	f7 f7                	div    edi
c00138d8:	31 d2                	xor    edx,edx
c00138da:	89 c7                	mov    edi,eax
c00138dc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138e2:	83 c0 02             	add    eax,0x2
c00138e5:	f7 f3                	div    ebx
c00138e7:	89 eb                	mov    ebx,ebp
c00138e9:	29 c3                	sub    ebx,eax
c00138eb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138f1:	88 1e                	mov    BYTE PTR [esi],bl
c00138f3:	19 c0                	sbb    eax,eax
c00138f5:	31 d2                	xor    edx,edx
c00138f7:	83 e0 0c             	and    eax,0xc
c00138fa:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138fe:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013906:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001390a:	83 f9 01             	cmp    ecx,0x1
c001390d:	0f 96 c2             	setbe  dl
c0013910:	41                   	inc    ecx
c0013911:	01 d0                	add    eax,edx
c0013913:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013916:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001391a:	83 c4 1c             	add    esp,0x1c
c001391d:	89 f0                	mov    eax,esi
c001391f:	5b                   	pop    ebx
c0013920:	5e                   	pop    esi
c0013921:	5f                   	pop    edi
c0013922:	5d                   	pop    ebp
c0013923:	c2 04 00             	ret    0x4

c0013926 <Clock::timeInDatetimeLocal()>:
c0013926:	53                   	push   ebx
c0013927:	83 ec 14             	sub    esp,0x14
c001392a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001392e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013932:	e8 83 fc ff ff       	call   c00135ba <Clock::timeInSecondsLocal()>
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	52                   	push   edx
c001393b:	50                   	push   eax
c001393c:	53                   	push   ebx
c001393d:	e8 a0 fe ff ff       	call   c00137e2 <secondsToDatetime(unsigned long long)>
c0013942:	89 d8                	mov    eax,ebx
c0013944:	83 c4 14             	add    esp,0x14
c0013947:	5b                   	pop    ebx
c0013948:	c2 04 00             	ret    0x4
c001394b:	90                   	nop

c001394c <Device::hibernate()>:
c001394c:	c3                   	ret    
c001394d:	90                   	nop

c001394e <Device::wake()>:
c001394e:	c3                   	ret    
c001394f:	90                   	nop

c0013950 <Device::detect()>:
c0013950:	c3                   	ret    
c0013951:	90                   	nop

c0013952 <Device::disableLegacy()>:
c0013952:	c3                   	ret    
c0013953:	90                   	nop

c0013954 <Device::powerSaving(PowerSavingLevel)>:
c0013954:	c3                   	ret    
c0013955:	90                   	nop

c0013956 <DriverlessDevice::close(int, int, void*)>:
c0013956:	31 c0                	xor    eax,eax
c0013958:	c3                   	ret    
c0013959:	90                   	nop

c001395a <DriverlessDevice::detect()>:
c001395a:	c3                   	ret    
c001395b:	90                   	nop

c001395c <DriverlessDevice::open(int, int, void*)>:
c001395c:	83 ec 18             	sub    esp,0x18
c001395f:	68 30 a9 02 c0       	push   0xc002a930
c0013964:	e8 6c 64 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0013969:	83 c8 ff             	or     eax,0xffffffff
c001396c:	83 c4 1c             	add    esp,0x1c
c001396f:	c3                   	ret    

c0013970 <Device::~Device()>:
c0013970:	ba 90 a9 02 c0       	mov    edx,0xc002a990
c0013975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013979:	89 10                	mov    DWORD PTR [eax],edx
c001397b:	90                   	nop
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <Device::~Device()>:
c001397e:	83 ec 0c             	sub    esp,0xc
c0013981:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013985:	e8 e6 ff ff ff       	call   c0013970 <Device::~Device()>
c001398a:	83 c4 04             	add    esp,0x4
c001398d:	83 ec 08             	sub    esp,0x8
c0013990:	68 58 01 00 00       	push   0x158
c0013995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013999:	e8 f3 eb ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	c3                   	ret    
c00139a5:	90                   	nop

c00139a6 <Device::findAndLoadDriver()>:
c00139a6:	c7 44 24 04 4e a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a94e
c00139ae:	e9 b6 ec ff ff       	jmp    c0012669 <Dbg::kprintf(char const*, ...)>
c00139b3:	90                   	nop

c00139b4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00139b4:	57                   	push   edi
c00139b5:	b9 09 00 00 00       	mov    ecx,0x9
c00139ba:	56                   	push   esi
c00139bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139bf:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139c3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00139cd:	81 c7 18 01 00 00    	add    edi,0x118
c00139d3:	fc                   	cld    
c00139d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139d6:	5e                   	pop    esi
c00139d7:	5f                   	pop    edi
c00139d8:	c3                   	ret    
c00139d9:	90                   	nop

c00139da <Device::preOpenACPI(void*, char*, char*)>:
c00139da:	57                   	push   edi
c00139db:	b9 1e 00 00 00       	mov    ecx,0x1e
c00139e0:	56                   	push   esi
c00139e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139e9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00139f3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00139f9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00139ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a05:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a0a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a10:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a16:	5e                   	pop    esi
c0013a17:	5f                   	pop    edi
c0013a18:	c3                   	ret    
c0013a19:	90                   	nop

c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a1e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a23:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a2a:	75 0b                	jne    c0013a37 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a32:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a35:	eb 1e                	jmp    c0013a55 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a37:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0013a3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a42:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a48:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a52:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a55:	ff e0                	jmp    eax
c0013a57:	90                   	nop

c0013a58 <Device::getParent()>:
c0013a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a5c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a68:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a6d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a74:	75 0b                	jne    c0013a81 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a78:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a7c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a7f:	eb 1e                	jmp    c0013a9f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a81:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0013a86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a8c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a92:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a9c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a9f:	ff e0                	jmp    eax
c0013aa1:	90                   	nop

c0013aa2 <Device::addChild(Device*)>:
c0013aa2:	53                   	push   ebx
c0013aa3:	83 ec 08             	sub    esp,0x8
c0013aa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013aae:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013ab4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013aba:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013abc:	85 d2                	test   edx,edx
c0013abe:	74 04                	je     c0013ac4 <Device::addChild(Device*)+0x22>
c0013ac0:	89 d3                	mov    ebx,edx
c0013ac2:	eb f6                	jmp    c0013aba <Device::addChild(Device*)+0x18>
c0013ac4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ac7:	83 ec 0c             	sub    esp,0xc
c0013aca:	6a 08                	push   0x8
c0013acc:	e8 c8 ba ff ff       	call   c000f599 <malloc>
c0013ad1:	89 03                	mov    DWORD PTR [ebx],eax
c0013ad3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ad9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ae0:	83 c4 18             	add    esp,0x18
c0013ae3:	5b                   	pop    ebx
c0013ae4:	c3                   	ret    
c0013ae5:	90                   	nop

c0013ae6 <Device::removeAllChildren()>:
c0013ae6:	56                   	push   esi
c0013ae7:	53                   	push   ebx
c0013ae8:	52                   	push   edx
c0013ae9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013aed:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013af3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013af6:	74 17                	je     c0013b0f <Device::removeAllChildren()+0x29>
c0013af8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013afb:	85 c0                	test   eax,eax
c0013afd:	74 0c                	je     c0013b0b <Device::removeAllChildren()+0x25>
c0013aff:	83 ec 0c             	sub    esp,0xc
c0013b02:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b04:	50                   	push   eax
c0013b05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b08:	83 c4 10             	add    esp,0x10
c0013b0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b0d:	eb e4                	jmp    c0013af3 <Device::removeAllChildren()+0xd>
c0013b0f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b1b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b28:	58                   	pop    eax
c0013b29:	5b                   	pop    ebx
c0013b2a:	5e                   	pop    esi
c0013b2b:	c3                   	ret    

c0013b2c <Device::hibernateAll()>:
c0013b2c:	53                   	push   ebx
c0013b2d:	83 ec 14             	sub    esp,0x14
c0013b30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b36:	53                   	push   ebx
c0013b37:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b46:	74 0f                	je     c0013b57 <Device::hibernateAll()+0x2b>
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b4e:	e8 d9 ff ff ff       	call   c0013b2c <Device::hibernateAll()>
c0013b53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b55:	eb e9                	jmp    c0013b40 <Device::hibernateAll()+0x14>
c0013b57:	83 c4 08             	add    esp,0x8
c0013b5a:	5b                   	pop    ebx
c0013b5b:	c3                   	ret    

c0013b5c <Device::wakeAll()>:
c0013b5c:	53                   	push   ebx
c0013b5d:	83 ec 14             	sub    esp,0x14
c0013b60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b66:	53                   	push   ebx
c0013b67:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b76:	74 0f                	je     c0013b87 <Device::wakeAll()+0x2b>
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b7e:	e8 d9 ff ff ff       	call   c0013b5c <Device::wakeAll()>
c0013b83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b85:	eb e9                	jmp    c0013b70 <Device::wakeAll()+0x14>
c0013b87:	83 c4 08             	add    esp,0x8
c0013b8a:	5b                   	pop    ebx
c0013b8b:	c3                   	ret    

c0013b8c <Device::detectAll()>:
c0013b8c:	53                   	push   ebx
c0013b8d:	83 ec 14             	sub    esp,0x14
c0013b90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b96:	53                   	push   ebx
c0013b97:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba6:	74 0f                	je     c0013bb7 <Device::detectAll()+0x2b>
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bae:	e8 d9 ff ff ff       	call   c0013b8c <Device::detectAll()>
c0013bb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb5:	eb e9                	jmp    c0013ba0 <Device::detectAll()+0x14>
c0013bb7:	83 c4 08             	add    esp,0x8
c0013bba:	5b                   	pop    ebx
c0013bbb:	c3                   	ret    

c0013bbc <Device::disableLegacyAll()>:
c0013bbc:	53                   	push   ebx
c0013bbd:	83 ec 14             	sub    esp,0x14
c0013bc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc6:	53                   	push   ebx
c0013bc7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013bca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bd6:	74 0f                	je     c0013be7 <Device::disableLegacyAll()+0x2b>
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bde:	e8 d9 ff ff ff       	call   c0013bbc <Device::disableLegacyAll()>
c0013be3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be5:	eb e9                	jmp    c0013bd0 <Device::disableLegacyAll()+0x14>
c0013be7:	83 c4 08             	add    esp,0x8
c0013bea:	5b                   	pop    ebx
c0013beb:	c3                   	ret    

c0013bec <Device::loadDriversForAll()>:
c0013bec:	53                   	push   ebx
c0013bed:	83 ec 08             	sub    esp,0x8
c0013bf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bf4:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013bfb:	75 0c                	jne    c0013c09 <Device::loadDriversForAll()+0x1d>
c0013bfd:	83 ec 0c             	sub    esp,0xc
c0013c00:	53                   	push   ebx
c0013c01:	e8 a0 fd ff ff       	call   c00139a6 <Device::findAndLoadDriver()>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c12:	74 12                	je     c0013c26 <Device::loadDriversForAll()+0x3a>
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1a:	e8 cd ff ff ff       	call   c0013bec <Device::loadDriversForAll()>
c0013c1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	eb e9                	jmp    c0013c0f <Device::loadDriversForAll()+0x23>
c0013c26:	83 c4 08             	add    esp,0x8
c0013c29:	5b                   	pop    ebx
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Device::closeAll()>:
c0013c2c:	53                   	push   ebx
c0013c2d:	83 ec 08             	sub    esp,0x8
c0013c30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c36:	6a 00                	push   0x0
c0013c38:	6a 00                	push   0x0
c0013c3a:	6a 00                	push   0x0
c0013c3c:	53                   	push   ebx
c0013c3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c4c:	74 0f                	je     c0013c5d <Device::closeAll()+0x31>
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c54:	e8 d3 ff ff ff       	call   c0013c2c <Device::closeAll()>
c0013c59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c5b:	eb e9                	jmp    c0013c46 <Device::closeAll()+0x1a>
c0013c5d:	83 c4 08             	add    esp,0x8
c0013c60:	5b                   	pop    ebx
c0013c61:	c3                   	ret    

c0013c62 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c62:	56                   	push   esi
c0013c63:	53                   	push   ebx
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c71:	56                   	push   esi
c0013c72:	53                   	push   ebx
c0013c73:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c82:	74 0f                	je     c0013c93 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c84:	52                   	push   edx
c0013c85:	52                   	push   edx
c0013c86:	56                   	push   esi
c0013c87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c8a:	e8 d3 ff ff ff       	call   c0013c62 <Device::powerSavingAll(PowerSavingLevel)>
c0013c8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c91:	eb e9                	jmp    c0013c7c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c93:	58                   	pop    eax
c0013c94:	5b                   	pop    ebx
c0013c95:	5e                   	pop    esi
c0013c96:	c3                   	ret    
c0013c97:	90                   	nop

c0013c98 <Device::setName(char const*)>:
c0013c98:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ca0:	e9 67 cb fe ff       	jmp    c000080c <strcpy>
c0013ca5:	90                   	nop

c0013ca6 <Device::Device(char const*)>:
c0013ca6:	83 ec 1c             	sub    esp,0x1c
c0013ca9:	ba 90 a9 02 c0       	mov    edx,0xc002a990
c0013cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb2:	89 10                	mov    DWORD PTR [eax],edx
c0013cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cec:	83 ec 08             	sub    esp,0x8
c0013cef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cf7:	e8 9c ff ff ff       	call   c0013c98 <Device::setName(char const*)>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d07:	83 ec 0c             	sub    esp,0xc
c0013d0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d0e:	e8 86 b8 ff ff       	call   c000f599 <malloc>
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d27:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d31:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d52:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d68:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d76:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d84:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d92:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013d9c:	90                   	nop
c0013d9d:	83 c4 1c             	add    esp,0x1c
c0013da0:	c3                   	ret    
c0013da1:	90                   	nop

c0013da2 <Device::getName()>:
c0013da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013da6:	05 d0 00 00 00       	add    eax,0xd0
c0013dab:	c3                   	ret    

c0013dac <DriverlessDevice::DriverlessDevice(char const*)>:
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db3:	83 ec 08             	sub    esp,0x8
c0013db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dba:	50                   	push   eax
c0013dbb:	e8 e6 fe ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0013dc0:	83 c4 10             	add    esp,0x10
c0013dc3:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c0013dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dcc:	89 10                	mov    DWORD PTR [eax],edx
c0013dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ddc:	90                   	nop
c0013ddd:	83 c4 0c             	add    esp,0xc
c0013de0:	c3                   	ret    
c0013de1:	90                   	nop

c0013de2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013de2:	57                   	push   edi
c0013de3:	56                   	push   esi
c0013de4:	53                   	push   ebx
c0013de5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013de9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ded:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013df1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013df7:	75 0c                	jne    c0013e05 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013df9:	52                   	push   edx
c0013dfa:	52                   	push   edx
c0013dfb:	53                   	push   ebx
c0013dfc:	56                   	push   esi
c0013dfd:	e8 de 47 01 00       	call   c00285e0 <LinkedList<Device>::addElement(Device*)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e0e:	74 12                	je     c0013e22 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e10:	50                   	push   eax
c0013e11:	57                   	push   edi
c0013e12:	56                   	push   esi
c0013e13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e16:	e8 c7 ff ff ff       	call   c0013de2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	eb e9                	jmp    c0013e0b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e22:	5b                   	pop    ebx
c0013e23:	5e                   	pop    esi
c0013e24:	5f                   	pop    edi
c0013e25:	c3                   	ret    

c0013e26 <getDevicesOfType(DeviceType)>:
c0013e26:	53                   	push   ebx
c0013e27:	83 ec 14             	sub    esp,0x14
c0013e2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e2e:	53                   	push   ebx
c0013e2f:	e8 88 48 01 00       	call   c00286bc <LinkedList<Device>::LinkedList()>
c0013e34:	83 c4 0c             	add    esp,0xc
c0013e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e3b:	53                   	push   ebx
c0013e3c:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c0013e42:	e8 9b ff ff ff       	call   c0013de2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e47:	89 d8                	mov    eax,ebx
c0013e49:	83 c4 18             	add    esp,0x18
c0013e4c:	5b                   	pop    ebx
c0013e4d:	c2 04 00             	ret    0x4

c0013e50 <HardDiskController::HardDiskController(char const*)>:
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e57:	83 ec 08             	sub    esp,0x8
c0013e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e5e:	50                   	push   eax
c0013e5f:	e8 42 fe ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0013e64:	83 c4 10             	add    esp,0x10
c0013e67:	ba e8 a9 02 c0       	mov    edx,0xc002a9e8
c0013e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e70:	89 10                	mov    DWORD PTR [eax],edx
c0013e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e80:	90                   	nop
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	c3                   	ret    
c0013e85:	90                   	nop

c0013e86 <HardDiskController::~HardDiskController()>:
c0013e86:	83 ec 0c             	sub    esp,0xc
c0013e89:	ba e8 a9 02 c0       	mov    edx,0xc002a9e8
c0013e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e92:	89 10                	mov    DWORD PTR [eax],edx
c0013e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	50                   	push   eax
c0013e9c:	e8 cf fa ff ff       	call   c0013970 <Device::~Device()>
c0013ea1:	83 c4 10             	add    esp,0x10
c0013ea4:	90                   	nop
c0013ea5:	83 c4 0c             	add    esp,0xc
c0013ea8:	c3                   	ret    
c0013ea9:	90                   	nop

c0013eaa <HardDiskController::~HardDiskController()>:
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb4:	e8 cd ff ff ff       	call   c0013e86 <HardDiskController::~HardDiskController()>
c0013eb9:	83 c4 10             	add    esp,0x10
c0013ebc:	83 ec 08             	sub    esp,0x8
c0013ebf:	68 58 01 00 00       	push   0x158
c0013ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec8:	e8 c4 e6 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0013ecd:	83 c4 10             	add    esp,0x10
c0013ed0:	83 c4 0c             	add    esp,0xc
c0013ed3:	c3                   	ret    

c0013ed4 <PhysicalDisk::eject()>:
c0013ed4:	83 c8 ff             	or     eax,0xffffffff
c0013ed7:	c3                   	ret    

c0013ed8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013ed8:	83 ec 0c             	sub    esp,0xc
c0013edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edf:	83 ec 08             	sub    esp,0x8
c0013ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ee6:	50                   	push   eax
c0013ee7:	e8 ba fd ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	89 10                	mov    DWORD PTR [eax],edx
c0013efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f09:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f14:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f26:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f3a:	90                   	nop
c0013f3b:	83 c4 0c             	add    esp,0xc
c0013f3e:	c3                   	ret    
c0013f3f:	90                   	nop

c0013f40 <PhysicalDisk::startCache()>:
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	83 ec 10             	sub    esp,0x10
c0013f45:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f49:	6a 44                	push   0x44
c0013f4b:	e8 49 b6 ff ff       	call   c000f599 <malloc>
c0013f50:	89 c6                	mov    esi,eax
c0013f52:	58                   	pop    eax
c0013f53:	5a                   	pop    edx
c0013f54:	53                   	push   ebx
c0013f55:	56                   	push   esi
c0013f56:	e8 71 28 00 00       	call   c00167cc <VCache::VCache(PhysicalDisk*)>
c0013f5b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f61:	83 c4 14             	add    esp,0x14
c0013f64:	5b                   	pop    ebx
c0013f65:	5e                   	pop    esi
c0013f66:	c3                   	ret    
c0013f67:	90                   	nop

c0013f68 <PhysicalDisk::~PhysicalDisk()>:
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c0013f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f74:	89 10                	mov    DWORD PTR [eax],edx
c0013f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	50                   	push   eax
c0013f7e:	e8 ed f9 ff ff       	call   c0013970 <Device::~Device()>
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	90                   	nop
c0013f87:	83 c4 0c             	add    esp,0xc
c0013f8a:	c3                   	ret    
c0013f8b:	90                   	nop

c0013f8c <PhysicalDisk::~PhysicalDisk()>:
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	83 ec 0c             	sub    esp,0xc
c0013f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f96:	e8 cd ff ff ff       	call   c0013f68 <PhysicalDisk::~PhysicalDisk()>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	83 ec 08             	sub    esp,0x8
c0013fa1:	68 6c 01 00 00       	push   0x16c
c0013fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013faa:	e8 e2 e5 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	83 c4 0c             	add    esp,0xc
c0013fb5:	c3                   	ret    

c0013fb6 <FPU::FPU(char const*)>:
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbd:	83 ec 08             	sub    esp,0x8
c0013fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc4:	50                   	push   eax
c0013fc5:	e8 dc fc ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0013fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd6:	89 10                	mov    DWORD PTR [eax],edx
c0013fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fdc:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013fe6:	90                   	nop
c0013fe7:	83 c4 0c             	add    esp,0xc
c0013fea:	c3                   	ret    
c0013feb:	90                   	nop

c0013fec <FPU::~FPU()>:
c0013fec:	83 ec 0c             	sub    esp,0xc
c0013fef:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0013ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff8:	89 10                	mov    DWORD PTR [eax],edx
c0013ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffe:	83 ec 0c             	sub    esp,0xc
c0014001:	50                   	push   eax
c0014002:	e8 69 f9 ff ff       	call   c0013970 <Device::~Device()>
c0014007:	83 c4 10             	add    esp,0x10
c001400a:	90                   	nop
c001400b:	83 c4 0c             	add    esp,0xc
c001400e:	c3                   	ret    
c001400f:	90                   	nop

c0014010 <FPU::~FPU()>:
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	83 ec 0c             	sub    esp,0xc
c0014016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401a:	e8 cd ff ff ff       	call   c0013fec <FPU::~FPU()>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	83 ec 08             	sub    esp,0x8
c0014025:	68 58 01 00 00       	push   0x158
c001402a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001402e:	e8 5e e5 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	83 c4 0c             	add    esp,0xc
c0014039:	c3                   	ret    

c001403a <setupFPU()>:
c001403a:	53                   	push   ebx
c001403b:	83 ec 08             	sub    esp,0x8
c001403e:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c0014044:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001404b:	74 19                	je     c0014066 <setupFPU()+0x2c>
c001404d:	83 ec 0c             	sub    esp,0xc
c0014050:	68 58 01 00 00       	push   0x158
c0014055:	e8 3f b5 ff ff       	call   c000f599 <malloc>
c001405a:	89 c3                	mov    ebx,eax
c001405c:	89 04 24             	mov    DWORD PTR [esp],eax
c001405f:	e8 c6 11 01 00       	call   c002522a <AVX::AVX()>
c0014064:	eb 5b                	jmp    c00140c1 <setupFPU()+0x87>
c0014066:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001406c:	84 c0                	test   al,al
c001406e:	79 19                	jns    c0014089 <setupFPU()+0x4f>
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	68 58 01 00 00       	push   0x158
c0014078:	e8 1c b5 ff ff       	call   c000f599 <malloc>
c001407d:	89 c3                	mov    ebx,eax
c001407f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014082:	e8 c9 12 01 00       	call   c0025350 <SSE::SSE()>
c0014087:	eb 38                	jmp    c00140c1 <setupFPU()+0x87>
c0014089:	a8 20                	test   al,0x20
c001408b:	74 19                	je     c00140a6 <setupFPU()+0x6c>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	68 58 01 00 00       	push   0x158
c0014095:	e8 ff b4 ff ff       	call   c000f599 <malloc>
c001409a:	89 c3                	mov    ebx,eax
c001409c:	89 04 24             	mov    DWORD PTR [esp],eax
c001409f:	e8 16 12 01 00       	call   c00252ba <MMX::MMX()>
c00140a4:	eb 1b                	jmp    c00140c1 <setupFPU()+0x87>
c00140a6:	a8 10                	test   al,0x10
c00140a8:	74 1c                	je     c00140c6 <setupFPU()+0x8c>
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	68 58 01 00 00       	push   0x158
c00140b2:	e8 e2 b4 ff ff       	call   c000f599 <malloc>
c00140b7:	89 c3                	mov    ebx,eax
c00140b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00140bc:	e8 1d 13 01 00       	call   c00253de <x87::x87()>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	eb 24                	jmp    c00140ea <setupFPU()+0xb0>
c00140c6:	83 e0 ef             	and    eax,0xffffffef
c00140c9:	83 ec 0c             	sub    esp,0xc
c00140cc:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00140d2:	68 44 aa 02 c0       	push   0xc002aa44
c00140d7:	e8 8d e5 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00140dc:	0f 20 c0             	mov    eax,cr0
c00140df:	83 c8 04             	or     eax,0x4
c00140e2:	0f 22 c0             	mov    cr0,eax
c00140e5:	31 db                	xor    ebx,ebx
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	89 d8                	mov    eax,ebx
c00140ec:	83 c4 08             	add    esp,0x8
c00140ef:	5b                   	pop    ebx
c00140f0:	c3                   	ret    
c00140f1:	90                   	nop

c00140f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140fa:	c1 e0 04             	shl    eax,0x4
c00140fd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014101:	8d 50 10             	lea    edx,[eax+0x10]
c0014104:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001410a:	74 08                	je     c0014114 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001410c:	83 c0 04             	add    eax,0x4
c001410f:	39 d0                	cmp    eax,edx
c0014111:	75 f1                	jne    c0014104 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014113:	c3                   	ret    
c0014114:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001411e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014128:	eb e2                	jmp    c001410c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001412a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001412a:	57                   	push   edi
c001412b:	31 c0                	xor    eax,eax
c001412d:	56                   	push   esi
c001412e:	53                   	push   ebx
c001412f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014133:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014137:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001413b:	89 da                	mov    edx,ebx
c001413d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014141:	c1 e2 04             	shl    edx,0x4
c0014144:	01 ca                	add    edx,ecx
c0014146:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001414e:	74 16                	je     c0014166 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014150:	40                   	inc    eax
c0014151:	83 f8 04             	cmp    eax,0x4
c0014154:	75 f0                	jne    c0014146 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014156:	c7 44 24 10 88 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa88
c001415e:	5b                   	pop    ebx
c001415f:	5e                   	pop    esi
c0014160:	5f                   	pop    edi
c0014161:	e9 6f 5c 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c0014166:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014169:	8d 04 81             	lea    eax,[ecx+eax*4]
c001416c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014172:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014178:	5b                   	pop    ebx
c0014179:	5e                   	pop    esi
c001417a:	5f                   	pop    edi
c001417b:	c3                   	ret    

c001417c <doubleFault(regs*, void*)>:
c001417c:	55                   	push   ebp
c001417d:	89 e5                	mov    ebp,esp
c001417f:	83 ec 08             	sub    esp,0x8
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	68 95 aa 02 c0       	push   0xc002aa95
c001418a:	e8 46 5c 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	90                   	nop
c0014193:	c9                   	leave  
c0014194:	c3                   	ret    
c0014195:	90                   	nop

c0014196 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014196:	56                   	push   esi
c0014197:	53                   	push   ebx
c0014198:	50                   	push   eax
c0014199:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001419d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141a1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141a6:	75 35                	jne    c00141dd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00141a8:	8d 43 20             	lea    eax,[ebx+0x20]
c00141ab:	31 d2                	xor    edx,edx
c00141ad:	89 c1                	mov    ecx,eax
c00141af:	c1 e1 04             	shl    ecx,0x4
c00141b2:	01 f1                	add    ecx,esi
c00141b4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00141bc:	74 3e                	je     c00141fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00141be:	42                   	inc    edx
c00141bf:	83 fa 04             	cmp    edx,0x4
c00141c2:	75 f0                	jne    c00141b4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	68 af aa 02 c0       	push   0xc002aaaf
c00141cc:	e8 04 5c 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141d9:	5a                   	pop    edx
c00141da:	5b                   	pop    ebx
c00141db:	5e                   	pop    esi
c00141dc:	c3                   	ret    
c00141dd:	83 ec 0c             	sub    esp,0xc
c00141e0:	56                   	push   esi
c00141e1:	e8 bc fb ff ff       	call   c0013da2 <Device::getName()>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141ec:	75 ba                	jne    c00141a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141ee:	83 fb 0f             	cmp    ebx,0xf
c00141f1:	7f 29                	jg     c001421c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141f3:	0f b6 9b e0 ca 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3520]
c00141fa:	eb ac                	jmp    c00141a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141fc:	8d 04 82             	lea    eax,[edx+eax*4]
c00141ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014203:	8d 04 86             	lea    eax,[esi+eax*4]
c0014206:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001420c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014210:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014216:	89 d8                	mov    eax,ebx
c0014218:	5a                   	pop    edx
c0014219:	5b                   	pop    ebx
c001421a:	5e                   	pop    esi
c001421b:	c3                   	ret    
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	68 a2 aa 02 c0       	push   0xc002aaa2
c0014224:	e8 ac 5b 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0014229:	83 c4 10             	add    esp,0x10
c001422c:	e9 77 ff ff ff       	jmp    c00141a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014231:	90                   	nop

c0014232 <InterruptController::clearAllHandlers(int, bool)>:
c0014232:	56                   	push   esi
c0014233:	53                   	push   ebx
c0014234:	52                   	push   edx
c0014235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014239:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001423d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014242:	75 61                	jne    c00142a5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014244:	8d 46 20             	lea    eax,[esi+0x20]
c0014247:	c1 e6 04             	shl    esi,0x4
c001424a:	c1 e0 04             	shl    eax,0x4
c001424d:	01 de                	add    esi,ebx
c001424f:	01 d8                	add    eax,ebx
c0014251:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001425b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014265:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001426f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014279:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014283:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001428d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014297:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00142a1:	58                   	pop    eax
c00142a2:	5b                   	pop    ebx
c00142a3:	5e                   	pop    esi
c00142a4:	c3                   	ret    
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	53                   	push   ebx
c00142a9:	e8 f4 fa ff ff       	call   c0013da2 <Device::getName()>
c00142ae:	83 c4 10             	add    esp,0x10
c00142b1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142b4:	75 8e                	jne    c0014244 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142b6:	83 fe 0f             	cmp    esi,0xf
c00142b9:	7f 09                	jg     c00142c4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00142bb:	0f b6 b6 e0 ca 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3520]
c00142c2:	eb 80                	jmp    c0014244 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	68 bc aa 02 c0       	push   0xc002aabc
c00142cc:	e8 04 5b 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	e9 6b ff ff ff       	jmp    c0014244 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142d9:	90                   	nop

c00142da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142da:	56                   	push   esi
c00142db:	53                   	push   ebx
c00142dc:	52                   	push   edx
c00142dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142e5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142ea:	75 3a                	jne    c0014326 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142f0:	8d 50 20             	lea    edx,[eax+0x20]
c00142f3:	c1 e2 04             	shl    edx,0x4
c00142f6:	8d 04 16             	lea    eax,[esi+edx*1]
c00142f9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142fd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014303:	74 0b                	je     c0014310 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014305:	83 c0 04             	add    eax,0x4
c0014308:	39 d0                	cmp    eax,edx
c001430a:	75 f1                	jne    c00142fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001430c:	58                   	pop    eax
c001430d:	5b                   	pop    ebx
c001430e:	5e                   	pop    esi
c001430f:	c3                   	ret    
c0014310:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001431a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014324:	eb df                	jmp    c0014305 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	56                   	push   esi
c001432a:	e8 73 fa ff ff       	call   c0013da2 <Device::getName()>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014335:	75 b5                	jne    c00142ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014337:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001433c:	7f 11                	jg     c001434f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001433e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014342:	0f b6 80 e0 ca 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3520]
c0014349:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001434d:	eb 9d                	jmp    c00142ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001434f:	83 ec 0c             	sub    esp,0xc
c0014352:	68 c9 aa 02 c0       	push   0xc002aac9
c0014357:	e8 79 5a 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c001435c:	83 c4 10             	add    esp,0x10
c001435f:	eb 8b                	jmp    c00142ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014361 <nmiHandler(regs*, void*)>:
c0014361:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0014366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001436a:	e9 91 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c001436f <int_handler>:
c001436f:	55                   	push   ebp
c0014370:	57                   	push   edi
c0014371:	56                   	push   esi
c0014372:	53                   	push   ebx
c0014373:	83 ec 0c             	sub    esp,0xc
c0014376:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001437a:	80 3d c4 03 03 c0 00 	cmp    BYTE PTR ds:0xc00303c4,0x0
c0014381:	74 0b                	je     c001438e <int_handler+0x1f>
c0014383:	fa                   	cli    
c0014384:	f4                   	hlt    
c0014385:	80 3d c4 03 03 c0 00 	cmp    BYTE PTR ds:0xc00303c4,0x0
c001438c:	75 f5                	jne    c0014383 <int_handler+0x14>
c001438e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0014393:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014396:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001439c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00143a2:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143a5:	83 f8 17             	cmp    eax,0x17
c00143a8:	77 13                	ja     c00143bd <int_handler+0x4e>
c00143aa:	83 ec 08             	sub    esp,0x8
c00143ad:	8b 17                	mov    edx,DWORD PTR [edi]
c00143af:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143b2:	0f b6 c0             	movzx  eax,al
c00143b5:	50                   	push   eax
c00143b6:	57                   	push   edi
c00143b7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	83 c3 15             	add    ebx,0x15
c00143c0:	c1 e3 04             	shl    ebx,0x4
c00143c3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00143c7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00143ce:	31 db                	xor    ebx,ebx
c00143d0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00143d4:	85 c0                	test   eax,eax
c00143d6:	74 13                	je     c00143eb <int_handler+0x7c>
c00143d8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00143db:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00143df:	74 1c                	je     c00143fd <int_handler+0x8e>
c00143e1:	83 ec 08             	sub    esp,0x8
c00143e4:	52                   	push   edx
c00143e5:	56                   	push   esi
c00143e6:	ff d0                	call   eax
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	43                   	inc    ebx
c00143ec:	83 fb 04             	cmp    ebx,0x4
c00143ef:	75 df                	jne    c00143d0 <int_handler+0x61>
c00143f1:	83 c4 0c             	add    esp,0xc
c00143f4:	31 c0                	xor    eax,eax
c00143f6:	5b                   	pop    ebx
c00143f7:	31 d2                	xor    edx,edx
c00143f9:	5e                   	pop    esi
c00143fa:	5f                   	pop    edi
c00143fb:	5d                   	pop    ebp
c00143fc:	c3                   	ret    
c00143fd:	83 ec 08             	sub    esp,0x8
c0014400:	52                   	push   edx
c0014401:	56                   	push   esi
c0014402:	ff d0                	call   eax
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	83 c4 0c             	add    esp,0xc
c001440a:	5b                   	pop    ebx
c001440b:	5e                   	pop    esi
c001440c:	5f                   	pop    edi
c001440d:	5d                   	pop    ebp
c001440e:	c3                   	ret    
c001440f:	90                   	nop

c0014410 <InterruptController::InterruptController(char const*)>:
c0014410:	83 ec 1c             	sub    esp,0x1c
c0014413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014417:	83 ec 08             	sub    esp,0x8
c001441a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001441e:	50                   	push   eax
c001441f:	e8 82 f8 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0014424:	83 c4 10             	add    esp,0x10
c0014427:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c001442c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014430:	89 10                	mov    DWORD PTR [eax],edx
c0014432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014436:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014440:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014448:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014450:	7f 5e                	jg     c00144b0 <InterruptController::InterruptController(char const*)+0xa0>
c0014452:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001445a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001445f:	7f 49                	jg     c00144aa <InterruptController::InterruptController(char const*)+0x9a>
c0014461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014469:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014474:	01 ca                	add    edx,ecx
c0014476:	83 c2 54             	add    edx,0x54
c0014479:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014489:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014490:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014494:	01 ca                	add    edx,ecx
c0014496:	81 c2 54 04 00 00    	add    edx,0x454
c001449c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144a4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144a8:	eb b0                	jmp    c001445a <InterruptController::InterruptController(char const*)+0x4a>
c00144aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00144ae:	eb 98                	jmp    c0014448 <InterruptController::InterruptController(char const*)+0x38>
c00144b0:	90                   	nop
c00144b1:	83 c4 1c             	add    esp,0x1c
c00144b4:	c3                   	ret    
c00144b5:	90                   	nop

c00144b6 <InterruptController::~InterruptController()>:
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c00144be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c2:	89 10                	mov    DWORD PTR [eax],edx
c00144c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c8:	83 ec 0c             	sub    esp,0xc
c00144cb:	50                   	push   eax
c00144cc:	e8 9f f4 ff ff       	call   c0013970 <Device::~Device()>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	90                   	nop
c00144d5:	83 c4 0c             	add    esp,0xc
c00144d8:	c3                   	ret    
c00144d9:	90                   	nop

c00144da <InterruptController::~InterruptController()>:
c00144da:	83 ec 0c             	sub    esp,0xc
c00144dd:	83 ec 0c             	sub    esp,0xc
c00144e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144e4:	e8 cd ff ff ff       	call   c00144b6 <InterruptController::~InterruptController()>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	83 ec 08             	sub    esp,0x8
c00144ef:	68 58 21 00 00       	push   0x2158
c00144f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f8:	e8 94 e0 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	83 c4 0c             	add    esp,0xc
c0014503:	c3                   	ret    

c0014504 <displayDebugInfo(regs*)>:
c0014504:	55                   	push   ebp
c0014505:	57                   	push   edi
c0014506:	56                   	push   esi
c0014507:	53                   	push   ebx
c0014508:	83 ec 24             	sub    esp,0x24
c001450b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001450f:	0f 20 c2             	mov    edx,cr0
c0014512:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014516:	0f 20 d7             	mov    edi,cr2
c0014519:	0f 20 de             	mov    esi,cr3
c001451c:	0f 20 e5             	mov    ebp,cr4
c001451f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014522:	68 d6 aa 02 c0       	push   0xc002aad6
c0014527:	e8 3d e1 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001452c:	59                   	pop    ecx
c001452d:	58                   	pop    eax
c001452e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014531:	68 e1 aa 02 c0       	push   0xc002aae1
c0014536:	e8 2e e1 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001453b:	58                   	pop    eax
c001453c:	5a                   	pop    edx
c001453d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014540:	68 ec aa 02 c0       	push   0xc002aaec
c0014545:	e8 1f e1 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001454a:	59                   	pop    ecx
c001454b:	58                   	pop    eax
c001454c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001454f:	68 f7 aa 02 c0       	push   0xc002aaf7
c0014554:	e8 10 e1 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014559:	58                   	pop    eax
c001455a:	5a                   	pop    edx
c001455b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001455e:	68 02 ab 02 c0       	push   0xc002ab02
c0014563:	e8 01 e1 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014568:	59                   	pop    ecx
c0014569:	58                   	pop    eax
c001456a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001456d:	68 0d ab 02 c0       	push   0xc002ab0d
c0014572:	e8 f2 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014577:	58                   	pop    eax
c0014578:	5a                   	pop    edx
c0014579:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001457c:	68 18 ab 02 c0       	push   0xc002ab18
c0014581:	e8 e3 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014586:	59                   	pop    ecx
c0014587:	58                   	pop    eax
c0014588:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001458b:	68 23 ab 02 c0       	push   0xc002ab23
c0014590:	e8 d4 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014595:	58                   	pop    eax
c0014596:	5a                   	pop    edx
c0014597:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001459a:	68 2e ab 02 c0       	push   0xc002ab2e
c001459f:	e8 c5 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00145a4:	59                   	pop    ecx
c00145a5:	58                   	pop    eax
c00145a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145a9:	68 3d ab 02 c0       	push   0xc002ab3d
c00145ae:	e8 b6 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00145b3:	58                   	pop    eax
c00145b4:	5a                   	pop    edx
c00145b5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145b8:	68 48 ab 02 c0       	push   0xc002ab48
c00145bd:	e8 a7 e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00145c2:	59                   	pop    ecx
c00145c3:	58                   	pop    eax
c00145c4:	57                   	push   edi
c00145c5:	68 53 ab 02 c0       	push   0xc002ab53
c00145ca:	e8 9a e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00145cf:	58                   	pop    eax
c00145d0:	5a                   	pop    edx
c00145d1:	56                   	push   esi
c00145d2:	68 5e ab 02 c0       	push   0xc002ab5e
c00145d7:	e8 8d e0 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00145dc:	59                   	pop    ecx
c00145dd:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00145e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e8:	e8 48 bd ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c00145ed:	58                   	pop    eax
c00145ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145f1:	5a                   	pop    edx
c00145f2:	c1 e0 05             	shl    eax,0x5
c00145f5:	05 40 c8 02 c0       	add    eax,0xc002c840
c00145fa:	50                   	push   eax
c00145fb:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014600:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014606:	e8 37 c2 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001460b:	59                   	pop    ecx
c001460c:	58                   	pop    eax
c001460d:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014612:	68 69 ab 02 c0       	push   0xc002ab69
c0014617:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461d:	e8 20 c2 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014622:	58                   	pop    eax
c0014623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014628:	5a                   	pop    edx
c0014629:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001462c:	83 c0 0c             	add    eax,0xc
c001462f:	50                   	push   eax
c0014630:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014635:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463b:	e8 02 c2 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014640:	59                   	pop    ecx
c0014641:	58                   	pop    eax
c0014642:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014647:	68 72 ab 02 c0       	push   0xc002ab72
c001464c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014652:	e8 eb c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014657:	58                   	pop    eax
c0014658:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001465d:	5a                   	pop    edx
c001465e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014667:	e8 90 c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001466c:	59                   	pop    ecx
c001466d:	58                   	pop    eax
c001466e:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014673:	68 7a ab 02 c0       	push   0xc002ab7a
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 bf c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014683:	58                   	pop    eax
c0014684:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014689:	5a                   	pop    edx
c001468a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001468d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014693:	e8 64 c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014698:	59                   	pop    ecx
c0014699:	58                   	pop    eax
c001469a:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001469f:	68 82 ab 02 c0       	push   0xc002ab82
c00146a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146aa:	e8 93 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00146af:	58                   	pop    eax
c00146b0:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00146b5:	5a                   	pop    edx
c00146b6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146bf:	e8 38 c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00146c4:	59                   	pop    ecx
c00146c5:	58                   	pop    eax
c00146c6:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00146cb:	68 8a ab 02 c0       	push   0xc002ab8a
c00146d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d6:	e8 67 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00146db:	58                   	pop    eax
c00146dc:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00146e1:	5a                   	pop    edx
c00146e2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00146e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146eb:	e8 0c c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00146f0:	59                   	pop    ecx
c00146f1:	58                   	pop    eax
c00146f2:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00146f7:	68 92 ab 02 c0       	push   0xc002ab92
c00146fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014702:	e8 3b c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014707:	58                   	pop    eax
c0014708:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001470d:	5a                   	pop    edx
c001470e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014711:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014717:	e8 e0 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001471c:	59                   	pop    ecx
c001471d:	58                   	pop    eax
c001471e:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014723:	68 9a ab 02 c0       	push   0xc002ab9a
c0014728:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472e:	e8 0f c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014733:	58                   	pop    eax
c0014734:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014739:	5a                   	pop    edx
c001473a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001473d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014743:	e8 b4 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014748:	59                   	pop    ecx
c0014749:	58                   	pop    eax
c001474a:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001474f:	68 a2 ab 02 c0       	push   0xc002aba2
c0014754:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475a:	e8 e3 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001475f:	58                   	pop    eax
c0014760:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014765:	5a                   	pop    edx
c0014766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001476a:	52                   	push   edx
c001476b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014771:	e8 86 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014776:	59                   	pop    ecx
c0014777:	58                   	pop    eax
c0014778:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001477d:	68 ab ab 02 c0       	push   0xc002abab
c0014782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014788:	e8 b5 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001478d:	58                   	pop    eax
c001478e:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014793:	5a                   	pop    edx
c0014794:	57                   	push   edi
c0014795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479b:	e8 5c c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00147a0:	59                   	pop    ecx
c00147a1:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00147a6:	5f                   	pop    edi
c00147a7:	68 b3 ab 02 c0       	push   0xc002abb3
c00147ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b2:	e8 8b c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00147b7:	58                   	pop    eax
c00147b8:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00147bd:	5a                   	pop    edx
c00147be:	56                   	push   esi
c00147bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c5:	e8 32 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00147ca:	59                   	pop    ecx
c00147cb:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00147d0:	5e                   	pop    esi
c00147d1:	68 bb ab 02 c0       	push   0xc002abbb
c00147d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147dc:	e8 61 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00147e1:	5f                   	pop    edi
c00147e2:	58                   	pop    eax
c00147e3:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00147e8:	55                   	push   ebp
c00147e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ef:	e8 08 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00147f4:	58                   	pop    eax
c00147f5:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00147fa:	5a                   	pop    edx
c00147fb:	68 c3 ab 02 c0       	push   0xc002abc3
c0014800:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014806:	e8 37 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001480b:	0f 21 c0             	mov    eax,db0
c001480e:	59                   	pop    ecx
c001480f:	5e                   	pop    esi
c0014810:	50                   	push   eax
c0014811:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481c:	e8 db bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014821:	5f                   	pop    edi
c0014822:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014827:	5d                   	pop    ebp
c0014828:	68 cc ab 02 c0       	push   0xc002abcc
c001482d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014833:	e8 0a c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014838:	0f 21 c8             	mov    eax,db1
c001483b:	5a                   	pop    edx
c001483c:	59                   	pop    ecx
c001483d:	50                   	push   eax
c001483e:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014843:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014849:	e8 ae bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001484e:	5e                   	pop    esi
c001484f:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014854:	5f                   	pop    edi
c0014855:	68 d4 ab 02 c0       	push   0xc002abd4
c001485a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014860:	e8 dd bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014865:	0f 21 d0             	mov    eax,db2
c0014868:	5d                   	pop    ebp
c0014869:	5a                   	pop    edx
c001486a:	50                   	push   eax
c001486b:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014876:	e8 81 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001487b:	59                   	pop    ecx
c001487c:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014881:	5e                   	pop    esi
c0014882:	68 dc ab 02 c0       	push   0xc002abdc
c0014887:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488d:	e8 b0 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014892:	0f 21 d8             	mov    eax,db3
c0014895:	5f                   	pop    edi
c0014896:	5d                   	pop    ebp
c0014897:	50                   	push   eax
c0014898:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001489d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a3:	e8 54 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00148a8:	58                   	pop    eax
c00148a9:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00148ae:	5a                   	pop    edx
c00148af:	68 e4 ab 02 c0       	push   0xc002abe4
c00148b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ba:	e8 83 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00148bf:	0f 21 f0             	mov    eax,db6
c00148c2:	59                   	pop    ecx
c00148c3:	5e                   	pop    esi
c00148c4:	50                   	push   eax
c00148c5:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00148ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d0:	e8 27 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00148d5:	5f                   	pop    edi
c00148d6:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00148db:	5d                   	pop    ebp
c00148dc:	68 ec ab 02 c0       	push   0xc002abec
c00148e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e7:	e8 56 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00148ec:	0f 21 f8             	mov    eax,db7
c00148ef:	5a                   	pop    edx
c00148f0:	59                   	pop    ecx
c00148f1:	50                   	push   eax
c00148f2:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00148f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fd:	e8 fa be ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014902:	5e                   	pop    esi
c0014903:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014906:	e8 43 86 00 00       	call   c001cf4e <Thr::getDriverNameFromAddress(unsigned long)>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	85 c0                	test   eax,eax
c0014910:	74 7d                	je     c001498f <displayDebugInfo(regs*)+0x48b>
c0014912:	89 c6                	mov    esi,eax
c0014914:	50                   	push   eax
c0014915:	50                   	push   eax
c0014916:	56                   	push   esi
c0014917:	68 f4 ab 02 c0       	push   0xc002abf4
c001491c:	e8 48 dd ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014921:	5a                   	pop    edx
c0014922:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014927:	59                   	pop    ecx
c0014928:	68 02 ac 02 c0       	push   0xc002ac02
c001492d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014933:	e8 0a bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014938:	5f                   	pop    edi
c0014939:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001493e:	5d                   	pop    ebp
c001493f:	56                   	push   esi
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 f7 be ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001494b:	58                   	pop    eax
c001494c:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014951:	5a                   	pop    edx
c0014952:	68 0e ac 02 c0       	push   0xc002ac0e
c0014957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495d:	e8 e0 be ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014962:	59                   	pop    ecx
c0014963:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0014968:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001496e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014971:	e8 0f 86 00 00       	call   c001cf85 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014976:	5b                   	pop    ebx
c0014977:	5d                   	pop    ebp
c0014978:	50                   	push   eax
c0014979:	57                   	push   edi
c001497a:	e8 7d be ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001497f:	58                   	pop    eax
c0014980:	5a                   	pop    edx
c0014981:	56                   	push   esi
c0014982:	68 1a ac 02 c0       	push   0xc002ac1a
c0014987:	e8 dd dc ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001498c:	83 c4 10             	add    esp,0x10
c001498f:	fa                   	cli    
c0014990:	f4                   	hlt    
c0014991:	eb fe                	jmp    c0014991 <displayDebugInfo(regs*)+0x48d>

c0014993 <x87EmulHandler(regs*, void*)>:
c0014993:	83 ec 0c             	sub    esp,0xc
c0014996:	0f 20 c2             	mov    edx,cr0
c0014999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001499e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00149a2:	75 4b                	jne    c00149ef <x87EmulHandler(regs*, void*)+0x5c>
c00149a4:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00149a9:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00149af:	85 c0                	test   eax,eax
c00149b1:	74 05                	je     c00149b8 <x87EmulHandler(regs*, void*)+0x25>
c00149b3:	83 e2 08             	and    edx,0x8
c00149b6:	75 17                	jne    c00149cf <x87EmulHandler(regs*, void*)+0x3c>
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149bf:	e8 5b a9 00 00       	call   c001f31f <Vm::x87Handler(regs*)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	84 c0                	test   al,al
c00149c9:	74 24                	je     c00149ef <x87EmulHandler(regs*, void*)+0x5c>
c00149cb:	83 c4 0c             	add    esp,0xc
c00149ce:	c3                   	ret    
c00149cf:	83 ec 0c             	sub    esp,0xc
c00149d2:	68 40 ac 02 c0       	push   0xc002ac40
c00149d7:	e8 8d dc ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00149dc:	0f 06                	clts   
c00149de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e3:	83 c4 10             	add    esp,0x10
c00149e6:	a3 08 da 02 c0       	mov    ds:0xc002da08,eax
c00149eb:	83 c4 0c             	add    esp,0xc
c00149ee:	c3                   	ret    
c00149ef:	83 ec 0c             	sub    esp,0xc
c00149f2:	68 2a ac 02 c0       	push   0xc002ac2a
c00149f7:	e8 6d dc ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00149fc:	5a                   	pop    edx
c00149fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a01:	e8 fe fa ff ff       	call   c0014504 <displayDebugInfo(regs*)>

c0014a06 <gpFault(regs*, void*)>:
c0014a06:	53                   	push   ebx
c0014a07:	83 ec 14             	sub    esp,0x14
c0014a0a:	c7 05 04 da 02 c0 f8 e7 01 c0 	mov    DWORD PTR ds:0xc002da04,0xc001e7f8
c0014a14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a18:	53                   	push   ebx
c0014a19:	e8 da 9d 00 00       	call   c001e7f8 <Vm::faultHandler(regs*)>
c0014a1e:	83 c4 10             	add    esp,0x10
c0014a21:	84 c0                	test   al,al
c0014a23:	74 05                	je     c0014a2a <gpFault(regs*, void*)+0x24>
c0014a25:	83 c4 08             	add    esp,0x8
c0014a28:	5b                   	pop    ebx
c0014a29:	c3                   	ret    
c0014a2a:	83 ec 0c             	sub    esp,0xc
c0014a2d:	68 4d ac 02 c0       	push   0xc002ac4d
c0014a32:	e8 32 dc ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a3a:	e8 c5 fa ff ff       	call   c0014504 <displayDebugInfo(regs*)>

c0014a3f <pgFault(regs*, void*)>:
c0014a3f:	83 ec 18             	sub    esp,0x18
c0014a42:	68 68 ac 02 c0       	push   0xc002ac68
c0014a47:	e8 1d dc ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014a4c:	0f 20 d0             	mov    eax,cr2
c0014a4f:	5a                   	pop    edx
c0014a50:	59                   	pop    ecx
c0014a51:	50                   	push   eax
c0014a52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a5a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014a60:	e8 6f d7 ff ff       	call   c00121d4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014a65:	83 c4 10             	add    esp,0x10
c0014a68:	84 c0                	test   al,al
c0014a6a:	74 04                	je     c0014a70 <pgFault(regs*, void*)+0x31>
c0014a6c:	83 c4 0c             	add    esp,0xc
c0014a6f:	c3                   	ret    
c0014a70:	83 ec 0c             	sub    esp,0xc
c0014a73:	68 72 ac 02 c0       	push   0xc002ac72
c0014a78:	e8 ec db ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014a7d:	58                   	pop    eax
c0014a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a82:	e8 7d fa ff ff       	call   c0014504 <displayDebugInfo(regs*)>

c0014a87 <otherISRHandler(regs*, void*)>:
c0014a87:	53                   	push   ebx
c0014a88:	83 ec 0c             	sub    esp,0xc
c0014a8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a8f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a92:	50                   	push   eax
c0014a93:	50                   	push   eax
c0014a94:	68 7f ac 02 c0       	push   0xc002ac7f
c0014a99:	e8 cb db ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014a9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aa1:	e8 5e fa ff ff       	call   c0014504 <displayDebugInfo(regs*)>

c0014aa6 <opcodeFault(regs*, void*)>:
c0014aa6:	55                   	push   ebp
c0014aa7:	89 e5                	mov    ebp,esp
c0014aa9:	56                   	push   esi
c0014aaa:	53                   	push   ebx
c0014aab:	83 ec 40             	sub    esp,0x40
c0014aae:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0014ab3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ab9:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014abf:	84 c0                	test   al,al
c0014ac1:	74 24                	je     c0014ae7 <opcodeFault(regs*, void*)+0x41>
c0014ac3:	83 ec 0c             	sub    esp,0xc
c0014ac6:	68 9c ac 02 c0       	push   0xc002ac9c
c0014acb:	e8 99 db ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad9:	8d 50 19             	lea    edx,[eax+0x19]
c0014adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ae2:	e9 d5 05 00 00       	jmp    c00150bc <opcodeFault(regs*, void*)+0x616>
c0014ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014af0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014af4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b04:	8a 00                	mov    al,BYTE PTR [eax]
c0014b06:	3c f0                	cmp    al,0xf0
c0014b08:	75 17                	jne    c0014b21 <opcodeFault(regs*, void*)+0x7b>
c0014b0a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b13:	8d 50 01             	lea    edx,[eax+0x1]
c0014b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b19:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b1c:	e9 da 00 00 00       	jmp    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014b21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b24:	8a 00                	mov    al,BYTE PTR [eax]
c0014b26:	3c f2                	cmp    al,0xf2
c0014b28:	74 09                	je     c0014b33 <opcodeFault(regs*, void*)+0x8d>
c0014b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2f:	3c f3                	cmp    al,0xf3
c0014b31:	75 1b                	jne    c0014b4e <opcodeFault(regs*, void*)+0xa8>
c0014b33:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b37:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b40:	8d 50 01             	lea    edx,[eax+0x1]
c0014b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b49:	e9 ad 00 00 00       	jmp    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014b4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b51:	8a 00                	mov    al,BYTE PTR [eax]
c0014b53:	3c 66                	cmp    al,0x66
c0014b55:	75 1f                	jne    c0014b76 <opcodeFault(regs*, void*)+0xd0>
c0014b57:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b5b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b5f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b68:	8d 50 01             	lea    edx,[eax+0x1]
c0014b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b71:	e9 85 00 00 00       	jmp    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b79:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7b:	3c 67                	cmp    al,0x67
c0014b7d:	75 18                	jne    c0014b97 <opcodeFault(regs*, void*)+0xf1>
c0014b7f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b83:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b8c:	8d 50 01             	lea    edx,[eax+0x1]
c0014b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b95:	eb 64                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014b97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9c:	3c 2e                	cmp    al,0x2e
c0014b9e:	74 09                	je     c0014ba9 <opcodeFault(regs*, void*)+0x103>
c0014ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba5:	3c 3e                	cmp    al,0x3e
c0014ba7:	75 18                	jne    c0014bc1 <opcodeFault(regs*, void*)+0x11b>
c0014ba9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bb6:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bbc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bbf:	eb 3a                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc4:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc6:	3c 36                	cmp    al,0x36
c0014bc8:	74 1b                	je     c0014be5 <opcodeFault(regs*, void*)+0x13f>
c0014bca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bcf:	3c 26                	cmp    al,0x26
c0014bd1:	74 12                	je     c0014be5 <opcodeFault(regs*, void*)+0x13f>
c0014bd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd6:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd8:	3c 64                	cmp    al,0x64
c0014bda:	74 09                	je     c0014be5 <opcodeFault(regs*, void*)+0x13f>
c0014bdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdf:	8a 00                	mov    al,BYTE PTR [eax]
c0014be1:	3c 65                	cmp    al,0x65
c0014be3:	75 16                	jne    c0014bfb <opcodeFault(regs*, void*)+0x155>
c0014be5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0014c00:	3c 0f                	cmp    al,0xf
c0014c02:	0f 85 ad 00 00 00    	jne    c0014cb5 <opcodeFault(regs*, void*)+0x20f>
c0014c08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0b:	40                   	inc    eax
c0014c0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c0e:	3c c2                	cmp    al,0xc2
c0014c10:	74 0e                	je     c0014c20 <opcodeFault(regs*, void*)+0x17a>
c0014c12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c15:	40                   	inc    eax
c0014c16:	8a 00                	mov    al,BYTE PTR [eax]
c0014c18:	3c c3                	cmp    al,0xc3
c0014c1a:	0f 85 95 00 00 00    	jne    c0014cb5 <opcodeFault(regs*, void*)+0x20f>
c0014c20:	83 ec 0c             	sub    esp,0xc
c0014c23:	68 bf ac 02 c0       	push   0xc002acbf
c0014c28:	e8 3c da ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c36:	8d 50 01             	lea    edx,[eax+0x1]
c0014c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c3f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c45:	8a 00                	mov    al,BYTE PTR [eax]
c0014c47:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4d:	88 10                	mov    BYTE PTR [eax],dl
c0014c4f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c52:	50                   	push   eax
c0014c53:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c56:	50                   	push   eax
c0014c57:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c5a:	50                   	push   eax
c0014c5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c5e:	e8 8b 48 00 00       	call   c00194ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c6c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c6f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c72:	01 d0                	add    eax,edx
c0014c74:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c80:	48                   	dec    eax
c0014c81:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c87:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c90:	83 ec 04             	sub    esp,0x4
c0014c93:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c96:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c99:	50                   	push   eax
c0014c9a:	e8 15 b5 fe ff       	call   c00001b4 <voodooXADD>
c0014c9f:	83 c4 10             	add    esp,0x10
c0014ca2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ca5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ca8:	01 c2                	add    edx,eax
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb0:	e9 07 04 00 00       	jmp    c00150bc <opcodeFault(regs*, void*)+0x616>
c0014cb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb8:	8a 00                	mov    al,BYTE PTR [eax]
c0014cba:	3c 0f                	cmp    al,0xf
c0014cbc:	0f 85 8b 01 00 00    	jne    c0014e4d <opcodeFault(regs*, void*)+0x3a7>
c0014cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc5:	40                   	inc    eax
c0014cc6:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc8:	3c c7                	cmp    al,0xc7
c0014cca:	0f 86 7d 01 00 00    	jbe    c0014e4d <opcodeFault(regs*, void*)+0x3a7>
c0014cd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd3:	40                   	inc    eax
c0014cd4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd6:	3c cf                	cmp    al,0xcf
c0014cd8:	0f 87 6f 01 00 00    	ja     c0014e4d <opcodeFault(regs*, void*)+0x3a7>
c0014cde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce1:	40                   	inc    eax
c0014ce2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce4:	83 c0 38             	add    eax,0x38
c0014ce7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014cea:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cee:	75 0b                	jne    c0014cfb <opcodeFault(regs*, void*)+0x255>
c0014cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014cf6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cf9:	eb 75                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014cfb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cff:	75 0b                	jne    c0014d0c <opcodeFault(regs*, void*)+0x266>
c0014d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d0a:	eb 64                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d0c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d10:	75 0b                	jne    c0014d1d <opcodeFault(regs*, void*)+0x277>
c0014d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d15:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d18:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d1b:	eb 53                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d1d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d21:	75 0b                	jne    c0014d2e <opcodeFault(regs*, void*)+0x288>
c0014d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d2c:	eb 42                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d2e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d32:	75 0b                	jne    c0014d3f <opcodeFault(regs*, void*)+0x299>
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d3d:	eb 31                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d3f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d43:	75 0b                	jne    c0014d50 <opcodeFault(regs*, void*)+0x2aa>
c0014d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d48:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d4e:	eb 20                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d50:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d54:	75 0b                	jne    c0014d61 <opcodeFault(regs*, void*)+0x2bb>
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d5c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5f:	eb 0f                	jmp    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d61:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d65:	75 09                	jne    c0014d70 <opcodeFault(regs*, void*)+0x2ca>
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d70:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d74:	74 10                	je     c0014d86 <opcodeFault(regs*, void*)+0x2e0>
c0014d76:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d7d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d84:	eb 2d                	jmp    c0014db3 <opcodeFault(regs*, void*)+0x30d>
c0014d86:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d89:	c1 e0 18             	shl    eax,0x18
c0014d8c:	89 c2                	mov    edx,eax
c0014d8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d91:	c1 e0 08             	shl    eax,0x8
c0014d94:	25 00 00 ff 00       	and    eax,0xff0000
c0014d99:	09 c2                	or     edx,eax
c0014d9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d9e:	c1 e8 08             	shr    eax,0x8
c0014da1:	25 00 ff 00 00       	and    eax,0xff00
c0014da6:	09 c2                	or     edx,eax
c0014da8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dab:	c1 e8 18             	shr    eax,0x18
c0014dae:	09 d0                	or     eax,edx
c0014db0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014db7:	75 0b                	jne    c0014dc4 <opcodeFault(regs*, void*)+0x31e>
c0014db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dbf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014dc2:	eb 75                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014dc4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014dc8:	75 0b                	jne    c0014dd5 <opcodeFault(regs*, void*)+0x32f>
c0014dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dd0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014dd3:	eb 64                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014dd5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014dd9:	75 0b                	jne    c0014de6 <opcodeFault(regs*, void*)+0x340>
c0014ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dde:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014de1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014de4:	eb 53                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014de6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014dea:	75 0b                	jne    c0014df7 <opcodeFault(regs*, void*)+0x351>
c0014dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014def:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014df2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014df5:	eb 42                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014df7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dfb:	75 0b                	jne    c0014e08 <opcodeFault(regs*, void*)+0x362>
c0014dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e03:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e06:	eb 31                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014e08:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e0c:	75 0b                	jne    c0014e19 <opcodeFault(regs*, void*)+0x373>
c0014e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e17:	eb 20                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014e19:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e1d:	75 0b                	jne    c0014e2a <opcodeFault(regs*, void*)+0x384>
c0014e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e25:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e28:	eb 0f                	jmp    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014e2a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e2e:	75 09                	jne    c0014e39 <opcodeFault(regs*, void*)+0x393>
c0014e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e36:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e3f:	8d 50 02             	lea    edx,[eax+0x2]
c0014e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e45:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e48:	e9 6f 02 00 00       	jmp    c00150bc <opcodeFault(regs*, void*)+0x616>
c0014e4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e50:	8a 00                	mov    al,BYTE PTR [eax]
c0014e52:	3c 0f                	cmp    al,0xf
c0014e54:	0f 85 8d 01 00 00    	jne    c0014fe7 <opcodeFault(regs*, void*)+0x541>
c0014e5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5d:	40                   	inc    eax
c0014e5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e60:	3c c7                	cmp    al,0xc7
c0014e62:	0f 85 7f 01 00 00    	jne    c0014fe7 <opcodeFault(regs*, void*)+0x541>
c0014e68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e71:	8d 50 01             	lea    edx,[eax+0x1]
c0014e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7a:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e7d:	50                   	push   eax
c0014e7e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e81:	50                   	push   eax
c0014e82:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e85:	50                   	push   eax
c0014e86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e89:	e8 60 46 00 00       	call   c00194ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e94:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e97:	83 f0 01             	xor    eax,0x1
c0014e9a:	84 c0                	test   al,al
c0014e9c:	0f 84 45 01 00 00    	je     c0014fe7 <opcodeFault(regs*, void*)+0x541>
c0014ea2:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014ea5:	3c 01                	cmp    al,0x1
c0014ea7:	0f 85 3a 01 00 00    	jne    c0014fe7 <opcodeFault(regs*, void*)+0x541>
c0014ead:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014eb0:	83 f0 01             	xor    eax,0x1
c0014eb3:	84 c0                	test   al,al
c0014eb5:	0f 84 2c 01 00 00    	je     c0014fe7 <opcodeFault(regs*, void*)+0x541>
c0014ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ec1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ec4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014ecb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ece:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ed1:	89 c2                	mov    edx,eax
c0014ed3:	b8 00 00 00 00       	mov    eax,0x0
c0014ed8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014edb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ee4:	ba 00 00 00 00       	mov    edx,0x0
c0014ee9:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014eec:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ef5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ef8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014eff:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f02:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f05:	89 c2                	mov    edx,eax
c0014f07:	b8 00 00 00 00       	mov    eax,0x0
c0014f0c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f0f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f18:	ba 00 00 00 00       	mov    edx,0x0
c0014f1d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f20:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f23:	fa                   	cli    
c0014f24:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0014f29:	40                   	inc    eax
c0014f2a:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0014f2f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f32:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f37:	89 c1                	mov    ecx,eax
c0014f39:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f3c:	89 cb                	mov    ebx,ecx
c0014f3e:	89 d0                	mov    eax,edx
c0014f40:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f43:	89 c6                	mov    esi,eax
c0014f45:	89 f0                	mov    eax,esi
c0014f47:	09 d8                	or     eax,ebx
c0014f49:	85 c0                	test   eax,eax
c0014f4b:	75 21                	jne    c0014f6e <opcodeFault(regs*, void*)+0x4c8>
c0014f4d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f50:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f53:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f56:	89 01                	mov    DWORD PTR [ecx],eax
c0014f58:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f61:	83 c8 40             	or     eax,0x40
c0014f64:	89 c2                	mov    edx,eax
c0014f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f69:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f6c:	eb 3e                	jmp    c0014fac <opcodeFault(regs*, void*)+0x506>
c0014f6e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f71:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f76:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f79:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f7c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f82:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f85:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f88:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f8b:	89 d0                	mov    eax,edx
c0014f8d:	31 d2                	xor    edx,edx
c0014f8f:	89 c3                	mov    ebx,eax
c0014f91:	89 d6                	mov    esi,edx
c0014f93:	89 da                	mov    edx,ebx
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fa1:	83 e0 bf             	and    eax,0xffffffbf
c0014fa4:	89 c2                	mov    edx,eax
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fac:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0014fb1:	48                   	dec    eax
c0014fb2:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0014fb7:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0014fbc:	85 c0                	test   eax,eax
c0014fbe:	75 01                	jne    c0014fc1 <opcodeFault(regs*, void*)+0x51b>
c0014fc0:	fb                   	sti    
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc7:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014fca:	01 c2                	add    edx,eax
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd2:	83 ec 0c             	sub    esp,0xc
c0014fd5:	68 ce ac 02 c0       	push   0xc002acce
c0014fda:	e8 8a d6 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	e9 d5 00 00 00       	jmp    c00150bc <opcodeFault(regs*, void*)+0x616>
c0014fe7:	83 ec 0c             	sub    esp,0xc
c0014fea:	68 e1 ac 02 c0       	push   0xc002ace1
c0014fef:	e8 75 d6 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0014ff4:	83 c4 10             	add    esp,0x10
c0014ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015000:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015003:	c1 e0 04             	shl    eax,0x4
c0015006:	01 d0                	add    eax,edx
c0015008:	83 c0 03             	add    eax,0x3
c001500b:	8a 00                	mov    al,BYTE PTR [eax]
c001500d:	0f b6 d8             	movzx  ebx,al
c0015010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015013:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015019:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001501c:	c1 e0 04             	shl    eax,0x4
c001501f:	01 d0                	add    eax,edx
c0015021:	83 c0 02             	add    eax,0x2
c0015024:	8a 00                	mov    al,BYTE PTR [eax]
c0015026:	0f b6 c8             	movzx  ecx,al
c0015029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001502f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015032:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015035:	c1 e0 04             	shl    eax,0x4
c0015038:	01 d0                	add    eax,edx
c001503a:	40                   	inc    eax
c001503b:	8a 00                	mov    al,BYTE PTR [eax]
c001503d:	0f b6 d0             	movzx  edx,al
c0015040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015043:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015049:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001504c:	c1 e0 04             	shl    eax,0x4
c001504f:	01 f0                	add    eax,esi
c0015051:	8a 00                	mov    al,BYTE PTR [eax]
c0015053:	0f b6 c0             	movzx  eax,al
c0015056:	83 ec 0c             	sub    esp,0xc
c0015059:	53                   	push   ebx
c001505a:	51                   	push   ecx
c001505b:	52                   	push   edx
c001505c:	50                   	push   eax
c001505d:	68 f4 ac 02 c0       	push   0xc002acf4
c0015062:	e8 02 d6 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0015067:	83 c4 20             	add    esp,0x20
c001506a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015070:	83 c0 03             	add    eax,0x3
c0015073:	8a 00                	mov    al,BYTE PTR [eax]
c0015075:	0f b6 d8             	movzx  ebx,al
c0015078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507e:	83 c0 02             	add    eax,0x2
c0015081:	8a 00                	mov    al,BYTE PTR [eax]
c0015083:	0f b6 c8             	movzx  ecx,al
c0015086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015089:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508c:	40                   	inc    eax
c001508d:	8a 00                	mov    al,BYTE PTR [eax]
c001508f:	0f b6 d0             	movzx  edx,al
c0015092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015095:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015098:	8a 00                	mov    al,BYTE PTR [eax]
c001509a:	0f b6 c0             	movzx  eax,al
c001509d:	83 ec 0c             	sub    esp,0xc
c00150a0:	53                   	push   ebx
c00150a1:	51                   	push   ecx
c00150a2:	52                   	push   edx
c00150a3:	50                   	push   eax
c00150a4:	68 1c ad 02 c0       	push   0xc002ad1c
c00150a9:	e8 bb d5 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00150ae:	83 c4 20             	add    esp,0x20
c00150b1:	83 ec 0c             	sub    esp,0xc
c00150b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150b7:	e8 48 f4 ff ff       	call   c0014504 <displayDebugInfo(regs*)>
c00150bc:	8d 65 f8             	lea    esp,[ebp-0x8]
c00150bf:	5b                   	pop    ebx
c00150c0:	5e                   	pop    esi
c00150c1:	5d                   	pop    ebp
c00150c2:	c3                   	ret    

c00150c3 <displayProgramFault(char const*)>:
c00150c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00150d1:	85 c0                	test   eax,eax
c00150d3:	74 15                	je     c00150ea <displayProgramFault(char const*)+0x27>
c00150d5:	83 ec 0c             	sub    esp,0xc
c00150d8:	6a 04                	push   0x4
c00150da:	6a 0f                	push   0xf
c00150dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150e0:	50                   	push   eax
c00150e1:	e8 58 b4 ff ff       	call   c001053e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00150e6:	83 c4 1c             	add    esp,0x1c
c00150e9:	c3                   	ret    
c00150ea:	c3                   	ret    

c00150eb <setupInterruptController()>:
c00150eb:	55                   	push   ebp
c00150ec:	89 e5                	mov    ebp,esp
c00150ee:	53                   	push   ebx
c00150ef:	83 ec 24             	sub    esp,0x24
c00150f2:	b8 00 00 00 00       	mov    eax,0x0
c00150f7:	85 c0                	test   eax,eax
c00150f9:	0f 95 c0             	setne  al
c00150fc:	84 c0                	test   al,al
c00150fe:	74 5b                	je     c001515b <setupInterruptController()+0x70>
c0015100:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015107:	83 ec 0c             	sub    esp,0xc
c001510a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001510d:	e8 87 a4 ff ff       	call   c000f599 <malloc>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	89 c3                	mov    ebx,eax
c0015117:	83 ec 0c             	sub    esp,0xc
c001511a:	53                   	push   ebx
c001511b:	e8 fc 04 01 00       	call   c002561c <APIC::APIC()>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015126:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015129:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001512c:	8b 00                	mov    eax,DWORD PTR [eax]
c001512e:	83 c0 08             	add    eax,0x8
c0015131:	8b 00                	mov    eax,DWORD PTR [eax]
c0015133:	6a 00                	push   0x0
c0015135:	6a 00                	push   0x0
c0015137:	6a 00                	push   0x0
c0015139:	52                   	push   edx
c001513a:	ff d0                	call   eax
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0015144:	83 ec 08             	sub    esp,0x8
c0015147:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001514a:	50                   	push   eax
c001514b:	e8 52 e9 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015156:	e9 79 03 00 00       	jmp    c00154d4 <setupInterruptController()+0x3e9>
c001515b:	a0 00 02 03 c0       	mov    al,ds:0xc0030200
c0015160:	84 c0                	test   al,al
c0015162:	75 14                	jne    c0015178 <setupInterruptController()+0x8d>
c0015164:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0015169:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001516f:	83 e2 fe             	and    edx,0xfffffffe
c0015172:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015178:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001517d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015183:	83 e0 01             	and    eax,0x1
c0015186:	84 c0                	test   al,al
c0015188:	0f 95 c0             	setne  al
c001518b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001518e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015195:	83 ec 0c             	sub    esp,0xc
c0015198:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001519b:	e8 f9 a3 ff ff       	call   c000f599 <malloc>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	89 c3                	mov    ebx,eax
c00151a5:	83 ec 0c             	sub    esp,0xc
c00151a8:	53                   	push   ebx
c00151a9:	e8 c6 09 01 00       	call   c0025b74 <PIC::PIC()>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00151b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bc:	83 c0 08             	add    eax,0x8
c00151bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c1:	6a 00                	push   0x0
c00151c3:	6a 00                	push   0x0
c00151c5:	6a 00                	push   0x0
c00151c7:	52                   	push   edx
c00151c8:	ff d0                	call   eax
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00151d1:	74 73                	je     c0015246 <setupInterruptController()+0x15b>
c00151d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151db:	83 c0 0c             	add    eax,0xc
c00151de:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e0:	6a 00                	push   0x0
c00151e2:	6a 00                	push   0x0
c00151e4:	6a 00                	push   0x0
c00151e6:	52                   	push   edx
c00151e7:	ff d0                	call   eax
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00151f0:	74 15                	je     c0015207 <setupInterruptController()+0x11c>
c00151f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f7:	83 c0 04             	add    eax,0x4
c00151fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fc:	83 ec 0c             	sub    esp,0xc
c00151ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015202:	ff d0                	call   eax
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001520e:	83 ec 0c             	sub    esp,0xc
c0015211:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015214:	e8 80 a3 ff ff       	call   c000f599 <malloc>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	89 c3                	mov    ebx,eax
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	53                   	push   ebx
c0015222:	e8 f5 03 01 00       	call   c002561c <APIC::APIC()>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001522d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015233:	8b 00                	mov    eax,DWORD PTR [eax]
c0015235:	83 c0 08             	add    eax,0x8
c0015238:	8b 00                	mov    eax,DWORD PTR [eax]
c001523a:	6a 00                	push   0x0
c001523c:	6a 00                	push   0x0
c001523e:	6a 00                	push   0x0
c0015240:	52                   	push   edx
c0015241:	ff d0                	call   eax
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001524b:	83 ec 08             	sub    esp,0x8
c001524e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015251:	50                   	push   eax
c0015252:	e8 4b e8 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0015257:	83 c4 10             	add    esp,0x10
c001525a:	c7 05 08 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da08,0x0
c0015264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	83 c0 24             	add    eax,0x24
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	6a 00                	push   0x0
c0015270:	68 87 4a 01 c0       	push   0xc0014a87
c0015275:	6a 00                	push   0x0
c0015277:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527a:	ff d0                	call   eax
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	83 c0 24             	add    eax,0x24
c0015287:	8b 00                	mov    eax,DWORD PTR [eax]
c0015289:	6a 00                	push   0x0
c001528b:	68 87 4a 01 c0       	push   0xc0014a87
c0015290:	6a 01                	push   0x1
c0015292:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015295:	ff d0                	call   eax
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529d:	8b 00                	mov    eax,DWORD PTR [eax]
c001529f:	83 c0 24             	add    eax,0x24
c00152a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a4:	6a 00                	push   0x0
c00152a6:	68 61 43 01 c0       	push   0xc0014361
c00152ab:	6a 02                	push   0x2
c00152ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b0:	ff d0                	call   eax
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ba:	83 c0 24             	add    eax,0x24
c00152bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bf:	6a 00                	push   0x0
c00152c1:	68 87 4a 01 c0       	push   0xc0014a87
c00152c6:	6a 03                	push   0x3
c00152c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cb:	ff d0                	call   eax
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	83 c0 24             	add    eax,0x24
c00152d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152da:	6a 00                	push   0x0
c00152dc:	68 87 4a 01 c0       	push   0xc0014a87
c00152e1:	6a 04                	push   0x4
c00152e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e6:	ff d0                	call   eax
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f0:	83 c0 24             	add    eax,0x24
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	6a 00                	push   0x0
c00152f7:	68 87 4a 01 c0       	push   0xc0014a87
c00152fc:	6a 05                	push   0x5
c00152fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015301:	ff d0                	call   eax
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015309:	8b 00                	mov    eax,DWORD PTR [eax]
c001530b:	83 c0 24             	add    eax,0x24
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	6a 00                	push   0x0
c0015312:	68 a6 4a 01 c0       	push   0xc0014aa6
c0015317:	6a 06                	push   0x6
c0015319:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531c:	ff d0                	call   eax
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015324:	8b 00                	mov    eax,DWORD PTR [eax]
c0015326:	83 c0 24             	add    eax,0x24
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	6a 00                	push   0x0
c001532d:	68 93 49 01 c0       	push   0xc0014993
c0015332:	6a 07                	push   0x7
c0015334:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015337:	ff d0                	call   eax
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015341:	83 c0 24             	add    eax,0x24
c0015344:	8b 00                	mov    eax,DWORD PTR [eax]
c0015346:	6a 00                	push   0x0
c0015348:	68 7c 41 01 c0       	push   0xc001417c
c001534d:	6a 08                	push   0x8
c001534f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015352:	ff d0                	call   eax
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535a:	8b 00                	mov    eax,DWORD PTR [eax]
c001535c:	83 c0 24             	add    eax,0x24
c001535f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015361:	6a 00                	push   0x0
c0015363:	68 87 4a 01 c0       	push   0xc0014a87
c0015368:	6a 09                	push   0x9
c001536a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536d:	ff d0                	call   eax
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8b 00                	mov    eax,DWORD PTR [eax]
c0015377:	83 c0 24             	add    eax,0x24
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	6a 00                	push   0x0
c001537e:	68 87 4a 01 c0       	push   0xc0014a87
c0015383:	6a 0a                	push   0xa
c0015385:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015388:	ff d0                	call   eax
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015390:	8b 00                	mov    eax,DWORD PTR [eax]
c0015392:	83 c0 24             	add    eax,0x24
c0015395:	8b 00                	mov    eax,DWORD PTR [eax]
c0015397:	6a 00                	push   0x0
c0015399:	68 87 4a 01 c0       	push   0xc0014a87
c001539e:	6a 0b                	push   0xb
c00153a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a3:	ff d0                	call   eax
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ad:	83 c0 24             	add    eax,0x24
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	6a 00                	push   0x0
c00153b4:	68 87 4a 01 c0       	push   0xc0014a87
c00153b9:	6a 0c                	push   0xc
c00153bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153be:	ff d0                	call   eax
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c8:	83 c0 24             	add    eax,0x24
c00153cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cd:	6a 00                	push   0x0
c00153cf:	68 06 4a 01 c0       	push   0xc0014a06
c00153d4:	6a 0d                	push   0xd
c00153d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d9:	ff d0                	call   eax
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e3:	83 c0 24             	add    eax,0x24
c00153e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e8:	6a 00                	push   0x0
c00153ea:	68 3f 4a 01 c0       	push   0xc0014a3f
c00153ef:	6a 0e                	push   0xe
c00153f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f4:	ff d0                	call   eax
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fe:	83 c0 24             	add    eax,0x24
c0015401:	8b 00                	mov    eax,DWORD PTR [eax]
c0015403:	6a 00                	push   0x0
c0015405:	68 87 4a 01 c0       	push   0xc0014a87
c001540a:	6a 0f                	push   0xf
c001540c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540f:	ff d0                	call   eax
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8b 00                	mov    eax,DWORD PTR [eax]
c0015419:	83 c0 24             	add    eax,0x24
c001541c:	8b 00                	mov    eax,DWORD PTR [eax]
c001541e:	6a 00                	push   0x0
c0015420:	68 87 4a 01 c0       	push   0xc0014a87
c0015425:	6a 10                	push   0x10
c0015427:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542a:	ff d0                	call   eax
c001542c:	83 c4 10             	add    esp,0x10
c001542f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015432:	8b 00                	mov    eax,DWORD PTR [eax]
c0015434:	83 c0 24             	add    eax,0x24
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	6a 00                	push   0x0
c001543b:	68 87 4a 01 c0       	push   0xc0014a87
c0015440:	6a 11                	push   0x11
c0015442:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015445:	ff d0                	call   eax
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544d:	8b 00                	mov    eax,DWORD PTR [eax]
c001544f:	83 c0 24             	add    eax,0x24
c0015452:	8b 00                	mov    eax,DWORD PTR [eax]
c0015454:	6a 00                	push   0x0
c0015456:	68 87 4a 01 c0       	push   0xc0014a87
c001545b:	6a 12                	push   0x12
c001545d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015460:	ff d0                	call   eax
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	8b 00                	mov    eax,DWORD PTR [eax]
c001546a:	83 c0 24             	add    eax,0x24
c001546d:	8b 00                	mov    eax,DWORD PTR [eax]
c001546f:	6a 00                	push   0x0
c0015471:	68 87 4a 01 c0       	push   0xc0014a87
c0015476:	6a 13                	push   0x13
c0015478:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547b:	ff d0                	call   eax
c001547d:	83 c4 10             	add    esp,0x10
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	8b 00                	mov    eax,DWORD PTR [eax]
c0015485:	83 c0 24             	add    eax,0x24
c0015488:	8b 00                	mov    eax,DWORD PTR [eax]
c001548a:	6a 00                	push   0x0
c001548c:	68 87 4a 01 c0       	push   0xc0014a87
c0015491:	6a 14                	push   0x14
c0015493:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015496:	ff d0                	call   eax
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549e:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a0:	83 c0 24             	add    eax,0x24
c00154a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a5:	6a 00                	push   0x0
c00154a7:	68 87 4a 01 c0       	push   0xc0014a87
c00154ac:	6a 1e                	push   0x1e
c00154ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b1:	ff d0                	call   eax
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bb:	83 c0 24             	add    eax,0x24
c00154be:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c0:	6a 00                	push   0x0
c00154c2:	68 c4 bf 01 c0       	push   0xc001bfc4
c00154c7:	6a 60                	push   0x60
c00154c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cc:	ff d0                	call   eax
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154d7:	c9                   	leave  
c00154d8:	c3                   	ret    
c00154d9:	90                   	nop

c00154da <InterruptController::convertLegacyIRQNumber(int)>:
c00154da:	55                   	push   ebp
c00154db:	89 e5                	mov    ebp,esp
c00154dd:	83 ec 08             	sub    esp,0x8
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	83 ec 0c             	sub    esp,0xc
c00154e6:	50                   	push   eax
c00154e7:	e8 b6 e8 ff ff       	call   c0013da2 <Device::getName()>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	8a 00                	mov    al,BYTE PTR [eax]
c00154f1:	3c 41                	cmp    al,0x41
c00154f3:	0f 94 c0             	sete   al
c00154f6:	84 c0                	test   al,al
c00154f8:	74 28                	je     c0015522 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00154fa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00154fe:	7f 12                	jg     c0015512 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015500:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015503:	05 e0 ca 02 c0       	add    eax,0xc002cae0
c0015508:	8a 00                	mov    al,BYTE PTR [eax]
c001550a:	0f b6 c0             	movzx  eax,al
c001550d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015510:	eb 10                	jmp    c0015522 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015512:	83 ec 0c             	sub    esp,0xc
c0015515:	68 44 ad 02 c0       	push   0xc002ad44
c001551a:	e8 b6 48 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015525:	c9                   	leave  
c0015526:	c3                   	ret    
c0015527:	90                   	nop

c0015528 <startGUI(void*)>:
c0015528:	55                   	push   ebp
c0015529:	89 e5                	mov    ebp,esp
c001552b:	53                   	push   ebx
c001552c:	83 ec 04             	sub    esp,0x4
c001552f:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0015534:	48                   	dec    eax
c0015535:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001553a:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001553f:	85 c0                	test   eax,eax
c0015541:	75 01                	jne    c0015544 <startGUI(void*)+0x1c>
c0015543:	fb                   	sti    
c0015544:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c001554a:	83 ec 08             	sub    esp,0x8
c001554d:	6a 01                	push   0x1
c001554f:	68 c4 ad 02 c0       	push   0xc002adc4
c0015554:	e8 46 7a 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	83 ec 08             	sub    esp,0x8
c001555f:	53                   	push   ebx
c0015560:	50                   	push   eax
c0015561:	e8 64 7c 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	6a 01                	push   0x1
c0015574:	68 de ad 02 c0       	push   0xc002adde
c0015579:	e8 21 7a 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	83 ec 08             	sub    esp,0x8
c0015584:	53                   	push   ebx
c0015585:	50                   	push   eax
c0015586:	e8 3f 7c 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	90                   	nop
c001558f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015592:	c9                   	leave  
c0015593:	c3                   	ret    

c0015594 <startGUIVESA(void*)>:
c0015594:	55                   	push   ebp
c0015595:	89 e5                	mov    ebp,esp
c0015597:	53                   	push   ebx
c0015598:	83 ec 04             	sub    esp,0x4
c001559b:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00155a0:	48                   	dec    eax
c00155a1:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00155a6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00155ab:	85 c0                	test   eax,eax
c00155ad:	75 01                	jne    c00155b0 <startGUIVESA(void*)+0x1c>
c00155af:	fb                   	sti    
c00155b0:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c00155b6:	83 ec 08             	sub    esp,0x8
c00155b9:	6a 01                	push   0x1
c00155bb:	68 f8 ad 02 c0       	push   0xc002adf8
c00155c0:	e8 da 79 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	83 ec 08             	sub    esp,0x8
c00155cb:	53                   	push   ebx
c00155cc:	50                   	push   eax
c00155cd:	e8 f8 7b 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c00155db:	83 ec 08             	sub    esp,0x8
c00155de:	6a 01                	push   0x1
c00155e0:	68 de ad 02 c0       	push   0xc002adde
c00155e5:	e8 b5 79 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	83 ec 08             	sub    esp,0x8
c00155f0:	53                   	push   ebx
c00155f1:	50                   	push   eax
c00155f2:	e8 d3 7b 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	90                   	nop
c00155fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155fe:	c9                   	leave  
c00155ff:	c3                   	ret    

c0015600 <sendKeyToTerminal(unsigned char)>:
c0015600:	55                   	push   ebp
c0015601:	89 e5                	mov    ebp,esp
c0015603:	83 ec 28             	sub    esp,0x28
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001560c:	a1 44 d9 02 c0       	mov    eax,ds:0xc002d944
c0015611:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015615:	83 ec 08             	sub    esp,0x8
c0015618:	52                   	push   edx
c0015619:	50                   	push   eax
c001561a:	e8 c5 b3 ff ff       	call   c00109e4 <VgaText::receiveKey(unsigned char)>
c001561f:	83 c4 10             	add    esp,0x10
c0015622:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015626:	0f 85 8f 00 00 00    	jne    c00156bb <sendKeyToTerminal(unsigned char)+0xbb>
c001562c:	fa                   	cli    
c001562d:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0015632:	40                   	inc    eax
c0015633:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0015638:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001563d:	40                   	inc    eax
c001563e:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c0015643:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c0015648:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001564b:	c7 05 20 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da20,0x0
c0015655:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015659:	74 1f                	je     c001567a <sendKeyToTerminal(unsigned char)+0x7a>
c001565b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015661:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015664:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015667:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001566a:	83 ec 0c             	sub    esp,0xc
c001566d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015670:	e8 6d 87 00 00       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	eb db                	jmp    c0015655 <sendKeyToTerminal(unsigned char)+0x55>
c001567a:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001567f:	48                   	dec    eax
c0015680:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c0015685:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001568a:	85 c0                	test   eax,eax
c001568c:	75 18                	jne    c00156a6 <sendKeyToTerminal(unsigned char)+0xa6>
c001568e:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c0015693:	85 c0                	test   eax,eax
c0015695:	74 0f                	je     c00156a6 <sendKeyToTerminal(unsigned char)+0xa6>
c0015697:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c00156a1:	e8 b9 82 00 00       	call   c001d95f <schedule()>
c00156a6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00156ab:	48                   	dec    eax
c00156ac:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00156b1:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00156b6:	85 c0                	test   eax,eax
c00156b8:	75 01                	jne    c00156bb <sendKeyToTerminal(unsigned char)+0xbb>
c00156ba:	fb                   	sti    
c00156bb:	90                   	nop
c00156bc:	c9                   	leave  
c00156bd:	c3                   	ret    

c00156be <sendKeyboardToken(KeyboardToken)>:
c00156be:	55                   	push   ebp
c00156bf:	89 e5                	mov    ebp,esp
c00156c1:	83 ec 18             	sub    esp,0x18
c00156c4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	0f b7 c0             	movzx  eax,ax
c00156cd:	83 f2 01             	xor    edx,0x1
c00156d0:	88 90 40 da 02 c0    	mov    BYTE PTR [eax-0x3ffd25c0],dl
c00156d6:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00156db:	85 c0                	test   eax,eax
c00156dd:	74 24                	je     c0015703 <sendKeyboardToken(KeyboardToken)+0x45>
c00156df:	8b 0d 28 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da28
c00156e5:	83 ec 04             	sub    esp,0x4
c00156e8:	68 40 da 02 c0       	push   0xc002da40
c00156ed:	83 ec 08             	sub    esp,0x8
c00156f0:	89 e2                	mov    edx,esp
c00156f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f5:	89 02                	mov    DWORD PTR [edx],eax
c00156f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156fa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00156fe:	ff d1                	call   ecx
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	66 3d 03 02          	cmp    ax,0x203
c001570a:	75 07                	jne    c0015713 <sendKeyboardToken(KeyboardToken)+0x55>
c001570c:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0015711:	84 c0                	test   al,al
c0015713:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015717:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001571a:	a0 48 de 02 c0       	mov    al,ds:0xc002de48
c001571f:	38 c2                	cmp    dl,al
c0015721:	74 1c                	je     c001573f <sendKeyboardToken(KeyboardToken)+0x81>
c0015723:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015726:	a2 48 de 02 c0       	mov    ds:0xc002de48,al
c001572b:	a0 48 de 02 c0       	mov    al,ds:0xc002de48
c0015730:	0f b6 c0             	movzx  eax,al
c0015733:	83 ec 0c             	sub    esp,0xc
c0015736:	50                   	push   eax
c0015737:	e8 ea a8 ff ff       	call   c0010026 <setTerminalScrollLock(bool)>
c001573c:	83 c4 10             	add    esp,0x10
c001573f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015742:	84 c0                	test   al,al
c0015744:	0f 84 ae 00 00 00    	je     c00157f8 <sendKeyboardToken(KeyboardToken)+0x13a>
c001574a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574d:	66 3d 10 03          	cmp    ax,0x310
c0015751:	75 06                	jne    c0015759 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015753:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	66 3d 11 03          	cmp    ax,0x311
c0015760:	75 06                	jne    c0015768 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015762:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	66 3d 12 03          	cmp    ax,0x312
c001576f:	75 06                	jne    c0015777 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015771:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577a:	66 3d 13 03          	cmp    ax,0x313
c001577e:	75 06                	jne    c0015786 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015780:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015789:	66 3d 14 03          	cmp    ax,0x314
c001578d:	75 06                	jne    c0015795 <sendKeyboardToken(KeyboardToken)+0xd7>
c001578f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015798:	66 3d 15 03          	cmp    ax,0x315
c001579c:	75 06                	jne    c00157a4 <sendKeyboardToken(KeyboardToken)+0xe6>
c001579e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a7:	66 3d 16 03          	cmp    ax,0x316
c00157ab:	75 06                	jne    c00157b3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00157ad:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b6:	66 3d 17 03          	cmp    ax,0x317
c00157ba:	75 06                	jne    c00157c2 <sendKeyboardToken(KeyboardToken)+0x104>
c00157bc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	66 3d 18 03          	cmp    ax,0x318
c00157c9:	75 06                	jne    c00157d1 <sendKeyboardToken(KeyboardToken)+0x113>
c00157cb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	66 3d 19 03          	cmp    ax,0x319
c00157d8:	75 06                	jne    c00157e0 <sendKeyboardToken(KeyboardToken)+0x122>
c00157da:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00157e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e3:	66 3d 1a 03          	cmp    ax,0x31a
c00157e7:	0f 85 c9 00 00 00    	jne    c00158b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00157ed:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00157f3:	e9 be 00 00 00       	jmp    c00158b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	66 3d 10 03          	cmp    ax,0x310
c00157ff:	75 0a                	jne    c001580b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015801:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015807:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580e:	66 3d 11 03          	cmp    ax,0x311
c0015812:	75 0a                	jne    c001581e <sendKeyboardToken(KeyboardToken)+0x160>
c0015814:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001581a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	66 3d 12 03          	cmp    ax,0x312
c0015825:	75 0a                	jne    c0015831 <sendKeyboardToken(KeyboardToken)+0x173>
c0015827:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001582d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	66 3d 13 03          	cmp    ax,0x313
c0015838:	75 0a                	jne    c0015844 <sendKeyboardToken(KeyboardToken)+0x186>
c001583a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015840:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	66 3d 14 03          	cmp    ax,0x314
c001584b:	75 0a                	jne    c0015857 <sendKeyboardToken(KeyboardToken)+0x199>
c001584d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015853:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	66 3d 15 03          	cmp    ax,0x315
c001585e:	75 0a                	jne    c001586a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015860:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015866:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001586a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586d:	66 3d 16 03          	cmp    ax,0x316
c0015871:	75 0a                	jne    c001587d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015873:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015879:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015880:	66 3d 17 03          	cmp    ax,0x317
c0015884:	75 0a                	jne    c0015890 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015886:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001588c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	66 3d 18 03          	cmp    ax,0x318
c0015897:	75 0a                	jne    c00158a3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015899:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001589f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a6:	66 3d 19 03          	cmp    ax,0x319
c00158aa:	75 0a                	jne    c00158b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158ac:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	66 3d 00 02          	cmp    ax,0x200
c00158bd:	75 2c                	jne    c00158eb <sendKeyboardToken(KeyboardToken)+0x22d>
c00158bf:	a0 40 de 02 c0       	mov    al,ds:0xc002de40
c00158c4:	83 f0 01             	xor    eax,0x1
c00158c7:	84 c0                	test   al,al
c00158c9:	74 20                	je     c00158eb <sendKeyboardToken(KeyboardToken)+0x22d>
c00158cb:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00158d0:	6a 01                	push   0x1
c00158d2:	6a 00                	push   0x0
c00158d4:	68 28 55 01 c0       	push   0xc0015528
c00158d9:	50                   	push   eax
c00158da:	e8 5b 7e 00 00       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	c6 05 40 de 02 c0 01 	mov    BYTE PTR ds:0xc002de40,0x1
c00158e9:	eb 33                	jmp    c001591e <sendKeyboardToken(KeyboardToken)+0x260>
c00158eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ee:	66 3d 01 02          	cmp    ax,0x201
c00158f2:	75 2a                	jne    c001591e <sendKeyboardToken(KeyboardToken)+0x260>
c00158f4:	a0 40 de 02 c0       	mov    al,ds:0xc002de40
c00158f9:	83 f0 01             	xor    eax,0x1
c00158fc:	84 c0                	test   al,al
c00158fe:	74 1e                	je     c001591e <sendKeyboardToken(KeyboardToken)+0x260>
c0015900:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0015905:	6a 01                	push   0x1
c0015907:	6a 00                	push   0x0
c0015909:	68 94 55 01 c0       	push   0xc0015594
c001590e:	50                   	push   eax
c001590f:	e8 26 7e 00 00       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	c6 05 40 de 02 c0 01 	mov    BYTE PTR ds:0xc002de40,0x1
c001591e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015921:	66 3d 1d 03          	cmp    ax,0x31d
c0015925:	75 06                	jne    c001592d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015927:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001592d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015930:	66 3d 1c 03          	cmp    ax,0x31c
c0015934:	75 06                	jne    c001593c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015936:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001593c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593f:	66 3d 1b 03          	cmp    ax,0x31b
c0015943:	75 06                	jne    c001594b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015945:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594e:	66 3d 1e 03          	cmp    ax,0x31e
c0015952:	75 06                	jne    c001595a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015954:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001595a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595d:	66 3d 1f 03          	cmp    ax,0x31f
c0015961:	75 06                	jne    c0015969 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015963:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596c:	66 3d 1a 03          	cmp    ax,0x31a
c0015970:	75 06                	jne    c0015978 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015972:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015978:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001597c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001597f:	83 f0 01             	xor    eax,0x1
c0015982:	84 c0                	test   al,al
c0015984:	74 77                	je     c00159fd <sendKeyboardToken(KeyboardToken)+0x33f>
c0015986:	a0 41 db 02 c0       	mov    al,ds:0xc002db41
c001598b:	84 c0                	test   al,al
c001598d:	74 41                	je     c00159d0 <sendKeyboardToken(KeyboardToken)+0x312>
c001598f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015993:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015997:	74 2b                	je     c00159c4 <sendKeyboardToken(KeyboardToken)+0x306>
c0015999:	8b 15 44 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de44
c001599f:	89 d0                	mov    eax,edx
c00159a1:	c1 e0 02             	shl    eax,0x2
c00159a4:	01 d0                	add    eax,edx
c00159a6:	01 c0                	add    eax,eax
c00159a8:	a3 44 de 02 c0       	mov    ds:0xc002de44,eax
c00159ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b0:	0f b7 c0             	movzx  eax,ax
c00159b3:	8d 50 d0             	lea    edx,[eax-0x30]
c00159b6:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c00159bb:	01 d0                	add    eax,edx
c00159bd:	a3 44 de 02 c0       	mov    ds:0xc002de44,eax
c00159c2:	eb 6d                	jmp    c0015a31 <sendKeyboardToken(KeyboardToken)+0x373>
c00159c4:	c7 05 44 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de44,0x0
c00159ce:	eb 61                	jmp    c0015a31 <sendKeyboardToken(KeyboardToken)+0x373>
c00159d0:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c00159d5:	85 c0                	test   eax,eax
c00159d7:	74 18                	je     c00159f1 <sendKeyboardToken(KeyboardToken)+0x333>
c00159d9:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c00159de:	0f b6 c0             	movzx  eax,al
c00159e1:	83 ec 0c             	sub    esp,0xc
c00159e4:	50                   	push   eax
c00159e5:	e8 16 fc ff ff       	call   c0015600 <sendKeyToTerminal(unsigned char)>
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f1:	c7 05 44 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de44,0x0
c00159fb:	eb 34                	jmp    c0015a31 <sendKeyboardToken(KeyboardToken)+0x373>
c00159fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a00:	66 3d 01 01          	cmp    ax,0x101
c0015a04:	75 2b                	jne    c0015a31 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a06:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c0015a0b:	85 c0                	test   eax,eax
c0015a0d:	74 18                	je     c0015a27 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a0f:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c0015a14:	0f b6 c0             	movzx  eax,al
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	50                   	push   eax
c0015a1b:	e8 e0 fb ff ff       	call   c0015600 <sendKeyToTerminal(unsigned char)>
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a27:	c7 05 44 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de44,0x0
c0015a31:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a34:	83 f0 01             	xor    eax,0x1
c0015a37:	84 c0                	test   al,al
c0015a39:	74 4c                	je     c0015a87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a3e:	83 f0 01             	xor    eax,0x1
c0015a41:	84 c0                	test   al,al
c0015a43:	74 42                	je     c0015a87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a45:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0015a4a:	83 f0 01             	xor    eax,0x1
c0015a4d:	84 c0                	test   al,al
c0015a4f:	74 36                	je     c0015a87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a54:	66 83 f8 1f          	cmp    ax,0x1f
c0015a58:	76 09                	jbe    c0015a63 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5d:	66 83 f8 7e          	cmp    ax,0x7e
c0015a61:	76 12                	jbe    c0015a75 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a66:	66 83 f8 0a          	cmp    ax,0xa
c0015a6a:	74 09                	je     c0015a75 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6f:	66 83 f8 08          	cmp    ax,0x8
c0015a73:	75 12                	jne    c0015a87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a78:	0f b6 c0             	movzx  eax,al
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	50                   	push   eax
c0015a7f:	e8 7c fb ff ff       	call   c0015600 <sendKeyToTerminal(unsigned char)>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a8a:	83 f0 01             	xor    eax,0x1
c0015a8d:	84 c0                	test   al,al
c0015a8f:	74 4f                	je     c0015ae0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a94:	83 f0 01             	xor    eax,0x1
c0015a97:	84 c0                	test   al,al
c0015a99:	74 45                	je     c0015ae0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a9b:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0015aa0:	84 c0                	test   al,al
c0015aa2:	74 3c                	je     c0015ae0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa7:	66 83 f8 3f          	cmp    ax,0x3f
c0015aab:	76 33                	jbe    c0015ae0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab0:	66 83 f8 7f          	cmp    ax,0x7f
c0015ab4:	77 2a                	ja     c0015ae0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab9:	88 c2                	mov    dl,al
c0015abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abe:	66 83 f8 5f          	cmp    ax,0x5f
c0015ac2:	76 04                	jbe    c0015ac8 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ac4:	b0 20                	mov    al,0x20
c0015ac6:	eb 02                	jmp    c0015aca <sendKeyboardToken(KeyboardToken)+0x40c>
c0015ac8:	b0 00                	mov    al,0x0
c0015aca:	29 c2                	sub    edx,eax
c0015acc:	88 d0                	mov    al,dl
c0015ace:	83 e8 40             	sub    eax,0x40
c0015ad1:	0f b6 c0             	movzx  eax,al
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	50                   	push   eax
c0015ad8:	e8 23 fb ff ff       	call   c0015600 <sendKeyToTerminal(unsigned char)>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae3:	66 3d 00 03          	cmp    ax,0x300
c0015ae7:	75 0f                	jne    c0015af8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ae9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aec:	83 f0 01             	xor    eax,0x1
c0015aef:	84 c0                	test   al,al
c0015af1:	74 05                	je     c0015af8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015af3:	e8 9f a8 ff ff       	call   c0010397 <doTerminalCycle()>
c0015af8:	90                   	nop
c0015af9:	c9                   	leave  
c0015afa:	c3                   	ret    

c0015afb <clearInternalKeybuffer(VgaText*)>:
c0015afb:	55                   	push   ebp
c0015afc:	89 e5                	mov    ebp,esp
c0015afe:	83 ec 08             	sub    esp,0x8
c0015b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b04:	05 98 01 00 00       	add    eax,0x198
c0015b09:	83 ec 0c             	sub    esp,0xc
c0015b0c:	50                   	push   eax
c0015b0d:	e8 5a ac fe ff       	call   c000076c <strlen>
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b18:	81 c2 98 01 00 00    	add    edx,0x198
c0015b1e:	83 ec 04             	sub    esp,0x4
c0015b21:	50                   	push   eax
c0015b22:	6a 00                	push   0x0
c0015b24:	52                   	push   edx
c0015b25:	e8 26 ac fe ff       	call   c0000750 <memset>
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	90                   	nop
c0015b2e:	c9                   	leave  
c0015b2f:	c3                   	ret    

c0015b30 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b30:	55                   	push   ebp
c0015b31:	89 e5                	mov    ebp,esp
c0015b33:	83 ec 18             	sub    esp,0x18
c0015b36:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0015b3b:	85 c0                	test   eax,eax
c0015b3d:	74 2a                	je     c0015b69 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b3f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015b45:	8b 0d 28 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da28
c0015b4b:	83 ec 04             	sub    esp,0x4
c0015b4e:	68 40 da 02 c0       	push   0xc002da40
c0015b53:	83 ec 08             	sub    esp,0x8
c0015b56:	89 e2                	mov    edx,esp
c0015b58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015b5b:	89 02                	mov    DWORD PTR [edx],eax
c0015b5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015b60:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015b64:	ff d1                	call   ecx
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	fb                   	sti    
c0015b6a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b71:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b75:	0f 84 a1 00 00 00    	je     c0015c1c <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b84:	84 c0                	test   al,al
c0015b86:	75 28                	jne    c0015bb0 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015b88:	fa                   	cli    
c0015b89:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0015b8e:	40                   	inc    eax
c0015b8f:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0015b94:	e8 c6 7d 00 00       	call   c001d95f <schedule()>
c0015b99:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0015b9e:	48                   	dec    eax
c0015b9f:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c0015ba4:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0015ba9:	85 c0                	test   eax,eax
c0015bab:	75 ce                	jne    c0015b7b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bad:	fb                   	sti    
c0015bae:	eb cb                	jmp    c0015b7b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0015bb6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015bb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bbc:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015bc2:	88 10                	mov    BYTE PTR [eax],dl
c0015bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc7:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bcd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd3:	05 98 01 00 00       	add    eax,0x198
c0015bd8:	83 ec 0c             	sub    esp,0xc
c0015bdb:	50                   	push   eax
c0015bdc:	e8 8b ab fe ff       	call   c000076c <strlen>
c0015be1:	83 c4 10             	add    esp,0x10
c0015be4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015be7:	81 c2 98 01 00 00    	add    edx,0x198
c0015bed:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015bf0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bf3:	81 c2 98 01 00 00    	add    edx,0x198
c0015bf9:	83 ec 04             	sub    esp,0x4
c0015bfc:	50                   	push   eax
c0015bfd:	51                   	push   ecx
c0015bfe:	52                   	push   edx
c0015bff:	e8 84 aa fe ff       	call   c0000688 <memmove>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c0a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c0d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c11:	0f 85 5a ff ff ff    	jne    c0015b71 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1a:	eb 03                	jmp    c0015c1f <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1f:	c9                   	leave  
c0015c20:	c3                   	ret    
c0015c21:	90                   	nop

c0015c22 <Keyboard::Keyboard(char const*)>:
c0015c22:	83 ec 0c             	sub    esp,0xc
c0015c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c29:	83 ec 08             	sub    esp,0x8
c0015c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c30:	50                   	push   eax
c0015c31:	e8 70 e0 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	ba 1c ae 02 c0       	mov    edx,0xc002ae1c
c0015c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c42:	89 10                	mov    DWORD PTR [eax],edx
c0015c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c48:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c52:	c6 05 24 da 02 c0 01 	mov    BYTE PTR ds:0xc002da24,0x1
c0015c59:	90                   	nop
c0015c5a:	83 c4 0c             	add    esp,0xc
c0015c5d:	c3                   	ret    

c0015c5e <Keyboard::~Keyboard()>:
c0015c5e:	83 ec 0c             	sub    esp,0xc
c0015c61:	ba 1c ae 02 c0       	mov    edx,0xc002ae1c
c0015c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c6a:	89 10                	mov    DWORD PTR [eax],edx
c0015c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c70:	83 ec 0c             	sub    esp,0xc
c0015c73:	50                   	push   eax
c0015c74:	e8 f7 dc ff ff       	call   c0013970 <Device::~Device()>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	90                   	nop
c0015c7d:	83 c4 0c             	add    esp,0xc
c0015c80:	c3                   	ret    
c0015c81:	90                   	nop

c0015c82 <Keyboard::~Keyboard()>:
c0015c82:	83 ec 0c             	sub    esp,0xc
c0015c85:	83 ec 0c             	sub    esp,0xc
c0015c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c8c:	e8 cd ff ff ff       	call   c0015c5e <Keyboard::~Keyboard()>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	83 ec 08             	sub    esp,0x8
c0015c97:	68 5c 01 00 00       	push   0x15c
c0015c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca0:	e8 ec c8 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0015ca5:	83 c4 10             	add    esp,0x10
c0015ca8:	83 c4 0c             	add    esp,0xc
c0015cab:	c3                   	ret    

c0015cac <LogicalDisk::close(int, int, void*)>:
c0015cac:	83 c8 ff             	or     eax,0xffffffff
c0015caf:	c3                   	ret    

c0015cb0 <LogicalDisk::~LogicalDisk()>:
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	ba 94 ae 02 c0       	mov    edx,0xc002ae94
c0015cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cbc:	89 10                	mov    DWORD PTR [eax],edx
c0015cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc2:	83 ec 0c             	sub    esp,0xc
c0015cc5:	50                   	push   eax
c0015cc6:	e8 a5 dc ff ff       	call   c0013970 <Device::~Device()>
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	90                   	nop
c0015ccf:	83 c4 0c             	add    esp,0xc
c0015cd2:	c3                   	ret    
c0015cd3:	90                   	nop

c0015cd4 <LogicalDisk::~LogicalDisk()>:
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	83 ec 0c             	sub    esp,0xc
c0015cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cde:	e8 cd ff ff ff       	call   c0015cb0 <LogicalDisk::~LogicalDisk()>
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	83 ec 08             	sub    esp,0x8
c0015ce9:	68 74 01 00 00       	push   0x174
c0015cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf2:	e8 9a c8 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	83 c4 0c             	add    esp,0xc
c0015cfd:	c3                   	ret    

c0015cfe <LogicalDisk::open(int, int, void*)>:
c0015cfe:	83 ec 18             	sub    esp,0x18
c0015d01:	68 48 ae 02 c0       	push   0xc002ae48
c0015d06:	e8 ca 40 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0015d0b:	83 c8 ff             	or     eax,0xffffffff
c0015d0e:	83 c4 1c             	add    esp,0x1c
c0015d11:	c3                   	ret    

c0015d12 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d12:	53                   	push   ebx
c0015d13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d1f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d25:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d2b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d31:	77 10                	ja     c0015d43 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d33:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d39:	89 d3                	mov    ebx,edx
c0015d3b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d41:	72 05                	jb     c0015d48 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d43:	83 c8 ff             	or     eax,0xffffffff
c0015d46:	89 c2                	mov    edx,eax
c0015d48:	5b                   	pop    ebx
c0015d49:	c3                   	ret    

c0015d4a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d4a:	56                   	push   esi
c0015d4b:	83 c8 ff             	or     eax,0xffffffff
c0015d4e:	53                   	push   ebx
c0015d4f:	89 c2                	mov    edx,eax
c0015d51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d55:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d63:	77 27                	ja     c0015d8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d65:	89 d8                	mov    eax,ebx
c0015d67:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d6d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d78:	89 c2                	mov    edx,eax
c0015d7a:	73 10                	jae    c0015d8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d7c:	89 c8                	mov    eax,ecx
c0015d7e:	89 da                	mov    edx,ebx
c0015d80:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d86:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d8c:	5b                   	pop    ebx
c0015d8d:	5e                   	pop    esi
c0015d8e:	c3                   	ret    
c0015d8f:	90                   	nop

c0015d90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d90:	83 ec 1c             	sub    esp,0x1c
c0015d93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015da3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015daa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015dae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db6:	83 ec 08             	sub    esp,0x8
c0015db9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dbd:	50                   	push   eax
c0015dbe:	e8 e3 de ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	ba 94 ae 02 c0       	mov    edx,0xc002ae94
c0015dcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dcf:	89 10                	mov    DWORD PTR [eax],edx
c0015dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dd5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015de0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015deb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015df5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e01:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e07:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e18:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e1e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e2c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e36:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e40:	90                   	nop
c0015e41:	83 c4 1c             	add    esp,0x1c
c0015e44:	c3                   	ret    
c0015e45:	90                   	nop

c0015e46 <LogicalDisk::assignDriveLetter()>:
c0015e46:	55                   	push   ebp
c0015e47:	57                   	push   edi
c0015e48:	56                   	push   esi
c0015e49:	53                   	push   ebx
c0015e4a:	83 ec 14             	sub    esp,0x14
c0015e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e51:	8b 3d 60 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de60
c0015e57:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e5d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e61:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e67:	8b 3d 64 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de64
c0015e6d:	3c 01                	cmp    al,0x1
c0015e6f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e77:	19 c0                	sbb    eax,eax
c0015e79:	83 e0 02             	and    eax,0x2
c0015e7c:	83 c0 41             	add    eax,0x41
c0015e7f:	0f be e8             	movsx  ebp,al
c0015e82:	3c 43                	cmp    al,0x43
c0015e84:	75 10                	jne    c0015e96 <LogicalDisk::assignDriveLetter()+0x50>
c0015e86:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e8d:	75 5d                	jne    c0015eec <LogicalDisk::assignDriveLetter()+0xa6>
c0015e8f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e94:	75 56                	jne    c0015eec <LogicalDisk::assignDriveLetter()+0xa6>
c0015e96:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e99:	ba 01 00 00 00       	mov    edx,0x1
c0015e9e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015ea2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ea6:	d3 e2                	shl    edx,cl
c0015ea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015eac:	89 d7                	mov    edi,edx
c0015eae:	89 d6                	mov    esi,edx
c0015eb0:	c1 ff 1f             	sar    edi,0x1f
c0015eb3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015eb7:	21 f9                	and    ecx,edi
c0015eb9:	09 d1                	or     ecx,edx
c0015ebb:	75 2f                	jne    c0015eec <LogicalDisk::assignDriveLetter()+0xa6>
c0015ebd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ec1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ec5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015ecb:	09 f2                	or     edx,esi
c0015ecd:	89 15 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edx
c0015ed3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ed7:	09 fa                	or     edx,edi
c0015ed9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015edd:	89 15 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,edx
c0015ee3:	89 1c bd 80 de 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2180],ebx
c0015eea:	eb 08                	jmp    c0015ef4 <LogicalDisk::assignDriveLetter()+0xae>
c0015eec:	45                   	inc    ebp
c0015eed:	40                   	inc    eax
c0015eee:	3c 5b                	cmp    al,0x5b
c0015ef0:	75 90                	jne    c0015e82 <LogicalDisk::assignDriveLetter()+0x3c>
c0015ef2:	31 c0                	xor    eax,eax
c0015ef4:	83 c4 14             	add    esp,0x14
c0015ef7:	5b                   	pop    ebx
c0015ef8:	5e                   	pop    esi
c0015ef9:	5f                   	pop    edi
c0015efa:	5d                   	pop    ebp
c0015efb:	c3                   	ret    

c0015efc <LogicalDisk::mount()>:
c0015efc:	56                   	push   esi
c0015efd:	53                   	push   ebx
c0015efe:	53                   	push   ebx
c0015eff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f03:	8b 1d f4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f4
c0015f09:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f13:	85 db                	test   ebx,ebx
c0015f15:	74 27                	je     c0015f3e <LogicalDisk::mount()+0x42>
c0015f17:	51                   	push   ecx
c0015f18:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f21:	83 e8 41             	sub    eax,0x41
c0015f24:	50                   	push   eax
c0015f25:	56                   	push   esi
c0015f26:	53                   	push   ebx
c0015f27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	84 c0                	test   al,al
c0015f2f:	74 08                	je     c0015f39 <LogicalDisk::mount()+0x3d>
c0015f31:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f37:	eb 07                	jmp    c0015f40 <LogicalDisk::mount()+0x44>
c0015f39:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f3c:	eb d5                	jmp    c0015f13 <LogicalDisk::mount()+0x17>
c0015f3e:	31 c0                	xor    eax,eax
c0015f40:	5a                   	pop    edx
c0015f41:	5b                   	pop    ebx
c0015f42:	5e                   	pop    esi
c0015f43:	c3                   	ret    

c0015f44 <LogicalDisk::unmount()>:
c0015f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f48:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f52:	c3                   	ret    
c0015f53:	90                   	nop

c0015f54 <LogicalDisk::eject()>:
c0015f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f58:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015f5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f64:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015f67:	90                   	nop

c0015f68 <LogicalDisk::unassignDriveLetter()>:
c0015f68:	57                   	push   edi
c0015f69:	56                   	push   esi
c0015f6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f6e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f75:	84 c9                	test   cl,cl
c0015f77:	75 0f                	jne    c0015f88 <LogicalDisk::unassignDriveLetter()+0x20>
c0015f79:	c7 44 24 0c 6c ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ae6c
c0015f81:	5e                   	pop    esi
c0015f82:	5f                   	pop    edi
c0015f83:	e9 4d 3e 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c0015f88:	83 e9 41             	sub    ecx,0x41
c0015f8b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f92:	b8 01 00 00 00       	mov    eax,0x1
c0015f97:	c7 04 8d 80 de 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2180],0x0
c0015fa2:	d3 e0                	shl    eax,cl
c0015fa4:	89 c7                	mov    edi,eax
c0015fa6:	f7 d0                	not    eax
c0015fa8:	c1 ff 1f             	sar    edi,0x1f
c0015fab:	21 05 60 de 02 c0    	and    DWORD PTR ds:0xc002de60,eax
c0015fb1:	89 fe                	mov    esi,edi
c0015fb3:	f7 d6                	not    esi
c0015fb5:	21 35 64 de 02 c0    	and    DWORD PTR ds:0xc002de64,esi
c0015fbb:	5e                   	pop    esi
c0015fbc:	5f                   	pop    edi
c0015fbd:	c3                   	ret    

c0015fbe <LogicalDisk::read(unsigned long long, int, void*)>:
c0015fbe:	57                   	push   edi
c0015fbf:	56                   	push   esi
c0015fc0:	53                   	push   ebx
c0015fc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fc9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fd1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fd7:	77 41                	ja     c001601a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015fd9:	99                   	cdq    
c0015fda:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fe0:	01 c8                	add    eax,ecx
c0015fe2:	11 da                	adc    edx,ebx
c0015fe4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fea:	19 d7                	sbb    edi,edx
c0015fec:	72 33                	jb     c0016021 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015fee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ff4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ffa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ffe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016002:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016008:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001600e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016012:	5b                   	pop    ebx
c0016013:	5e                   	pop    esi
c0016014:	5f                   	pop    edi
c0016015:	e9 cc 0a 00 00       	jmp    c0016ae6 <VCache::read(unsigned long long, int, void*)>
c001601a:	b8 05 00 00 00       	mov    eax,0x5
c001601f:	eb 05                	jmp    c0016026 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016021:	b8 07 00 00 00       	mov    eax,0x7
c0016026:	5b                   	pop    ebx
c0016027:	5e                   	pop    esi
c0016028:	5f                   	pop    edi
c0016029:	c3                   	ret    

c001602a <LogicalDisk::write(unsigned long long, int, void*)>:
c001602a:	57                   	push   edi
c001602b:	56                   	push   esi
c001602c:	53                   	push   ebx
c001602d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016035:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016039:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001603d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016043:	77 41                	ja     c0016086 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016045:	99                   	cdq    
c0016046:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001604c:	01 c8                	add    eax,ecx
c001604e:	11 da                	adc    edx,ebx
c0016050:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016056:	19 d7                	sbb    edi,edx
c0016058:	72 33                	jb     c001608d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001605a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016060:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016066:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001606a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001606e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016074:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001607a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001607e:	5b                   	pop    ebx
c001607f:	5e                   	pop    esi
c0016080:	5f                   	pop    edi
c0016081:	e9 76 09 00 00       	jmp    c00169fc <VCache::write(unsigned long long, int, void*)>
c0016086:	b8 05 00 00 00       	mov    eax,0x5
c001608b:	eb 05                	jmp    c0016092 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001608d:	b8 07 00 00 00       	mov    eax,0x7
c0016092:	5b                   	pop    ebx
c0016093:	5e                   	pop    esi
c0016094:	5f                   	pop    edi
c0016095:	c3                   	ret    

c0016096 <Mouse::Mouse(char const*)>:
c0016096:	83 ec 0c             	sub    esp,0xc
c0016099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609d:	83 ec 08             	sub    esp,0x8
c00160a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160a4:	50                   	push   eax
c00160a5:	e8 fc db ff ff       	call   c0013ca6 <Device::Device(char const*)>
c00160aa:	83 c4 10             	add    esp,0x10
c00160ad:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c00160b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b6:	89 10                	mov    DWORD PTR [eax],edx
c00160b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160bc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160c6:	90                   	nop
c00160c7:	83 c4 0c             	add    esp,0xc
c00160ca:	c3                   	ret    
c00160cb:	90                   	nop

c00160cc <Mouse::~Mouse()>:
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c00160d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160d8:	89 10                	mov    DWORD PTR [eax],edx
c00160da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160de:	83 ec 0c             	sub    esp,0xc
c00160e1:	50                   	push   eax
c00160e2:	e8 89 d8 ff ff       	call   c0013970 <Device::~Device()>
c00160e7:	83 c4 10             	add    esp,0x10
c00160ea:	90                   	nop
c00160eb:	83 c4 0c             	add    esp,0xc
c00160ee:	c3                   	ret    
c00160ef:	90                   	nop

c00160f0 <Mouse::~Mouse()>:
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	83 ec 0c             	sub    esp,0xc
c00160f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160fa:	e8 cd ff ff ff       	call   c00160cc <Mouse::~Mouse()>
c00160ff:	83 c4 10             	add    esp,0x10
c0016102:	83 ec 08             	sub    esp,0x8
c0016105:	68 58 01 00 00       	push   0x158
c001610a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001610e:	e8 7e c4 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0016113:	83 c4 10             	add    esp,0x10
c0016116:	83 c4 0c             	add    esp,0xc
c0016119:	c3                   	ret    

c001611a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001611a:	55                   	push   ebp
c001611b:	57                   	push   edi
c001611c:	56                   	push   esi
c001611d:	53                   	push   ebx
c001611e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016124:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001612b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016132:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016139:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016140:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016144:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016148:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001614f:	e8 4e dc ff ff       	call   c0013da2 <Device::getName()>
c0016154:	5a                   	pop    edx
c0016155:	59                   	pop    ecx
c0016156:	50                   	push   eax
c0016157:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001615b:	55                   	push   ebp
c001615c:	e8 ab a6 fe ff       	call   c000080c <strcpy>
c0016161:	5b                   	pop    ebx
c0016162:	58                   	pop    eax
c0016163:	68 e4 ae 02 c0       	push   0xc002aee4
c0016168:	55                   	push   ebp
c0016169:	e8 de a7 fe ff       	call   c000094c <strcat>
c001616e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016175:	e8 1f 94 ff ff       	call   c000f599 <malloc>
c001617a:	83 c4 0c             	add    esp,0xc
c001617d:	89 c3                	mov    ebx,eax
c001617f:	57                   	push   edi
c0016180:	56                   	push   esi
c0016181:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016185:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016189:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016190:	55                   	push   ebp
c0016191:	50                   	push   eax
c0016192:	e8 f9 fb ff ff       	call   c0015d90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016197:	83 c4 14             	add    esp,0x14
c001619a:	53                   	push   ebx
c001619b:	e8 a6 fc ff ff       	call   c0015e46 <LogicalDisk::assignDriveLetter()>
c00161a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161a3:	e8 54 fd ff ff       	call   c0015efc <LogicalDisk::mount()>
c00161a8:	58                   	pop    eax
c00161a9:	5a                   	pop    edx
c00161aa:	53                   	push   ebx
c00161ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161b2:	e8 eb d8 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c00161b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00161bd:	5b                   	pop    ebx
c00161be:	5e                   	pop    esi
c00161bf:	5f                   	pop    edi
c00161c0:	5d                   	pop    ebp
c00161c1:	c3                   	ret    

c00161c2 <createPartitionsForDisk(PhysicalDisk*)>:
c00161c2:	55                   	push   ebp
c00161c3:	57                   	push   edi
c00161c4:	56                   	push   esi
c00161c5:	53                   	push   ebx
c00161c6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00161cc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00161d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00161d9:	3d 00 02 00 00       	cmp    eax,0x200
c00161de:	74 27                	je     c0016207 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00161e0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00161e6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00161ec:	83 ec 10             	sub    esp,0x10
c00161ef:	0f a4 f7 0a          	shld   edi,esi,0xa
c00161f3:	99                   	cdq    
c00161f4:	c1 e6 0a             	shl    esi,0xa
c00161f7:	52                   	push   edx
c00161f8:	89 fd                	mov    ebp,edi
c00161fa:	50                   	push   eax
c00161fb:	55                   	push   ebp
c00161fc:	56                   	push   esi
c00161fd:	e8 a2 04 01 00       	call   c00266a4 <__udivdi3>
c0016202:	e9 b1 00 00 00       	jmp    c00162b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001620c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016210:	56                   	push   esi
c0016211:	6a 01                	push   0x1
c0016213:	6a 00                	push   0x0
c0016215:	6a 00                	push   0x0
c0016217:	53                   	push   ebx
c0016218:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001621b:	83 c4 20             	add    esp,0x20
c001621e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016226:	75 0a                	jne    c0016232 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016228:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016230:	74 2c                	je     c001625e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016232:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016238:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001623e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016244:	83 ec 10             	sub    esp,0x10
c0016247:	0f a4 c2 0a          	shld   edx,eax,0xa
c001624b:	89 f7                	mov    edi,esi
c001624d:	c1 e0 0a             	shl    eax,0xa
c0016250:	c1 ff 1f             	sar    edi,0x1f
c0016253:	57                   	push   edi
c0016254:	56                   	push   esi
c0016255:	52                   	push   edx
c0016256:	50                   	push   eax
c0016257:	e8 48 04 01 00       	call   c00266a4 <__udivdi3>
c001625c:	eb 5a                	jmp    c00162b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001625e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016265:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001626c:	83 e1 7f             	and    ecx,0x7f
c001626f:	83 e0 7f             	and    eax,0x7f
c0016272:	01 c1                	add    ecx,eax
c0016274:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001627b:	83 e0 7f             	and    eax,0x7f
c001627e:	01 c1                	add    ecx,eax
c0016280:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016287:	83 e0 7f             	and    eax,0x7f
c001628a:	00 c1                	add    cl,al
c001628c:	74 41                	je     c00162cf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001628e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016294:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001629a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162a0:	83 ec 10             	sub    esp,0x10
c00162a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162a7:	89 f7                	mov    edi,esi
c00162a9:	c1 e0 0a             	shl    eax,0xa
c00162ac:	c1 ff 1f             	sar    edi,0x1f
c00162af:	57                   	push   edi
c00162b0:	56                   	push   esi
c00162b1:	52                   	push   edx
c00162b2:	50                   	push   eax
c00162b3:	e8 ec 03 01 00       	call   c00266a4 <__udivdi3>
c00162b8:	83 c4 14             	add    esp,0x14
c00162bb:	52                   	push   edx
c00162bc:	50                   	push   eax
c00162bd:	6a 00                	push   0x0
c00162bf:	6a 00                	push   0x0
c00162c1:	53                   	push   ebx
c00162c2:	e8 53 fe ff ff       	call   c001611a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162c7:	83 c4 20             	add    esp,0x20
c00162ca:	e9 79 01 00 00       	jmp    c0016448 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00162cf:	89 f0                	mov    eax,esi
c00162d1:	31 f6                	xor    esi,esi
c00162d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00162da:	75 02                	jne    c00162de <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00162dc:	89 f1                	mov    ecx,esi
c00162de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00162e5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00162ec:	c1 e2 08             	shl    edx,0x8
c00162ef:	c1 e7 10             	shl    edi,0x10
c00162f2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00162fa:	09 fa                	or     edx,edi
c00162fc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016304:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001630b:	83 c0 10             	add    eax,0x10
c001630e:	09 fa                	or     edx,edi
c0016310:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016317:	c1 e7 18             	shl    edi,0x18
c001631a:	09 fa                	or     edx,edi
c001631c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016323:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016327:	c1 e7 10             	shl    edi,0x10
c001632a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016331:	c1 e2 08             	shl    edx,0x8
c0016334:	09 fa                	or     edx,edi
c0016336:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001633d:	09 fa                	or     edx,edi
c001633f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016346:	c1 e7 18             	shl    edi,0x18
c0016349:	09 fa                	or     edx,edi
c001634b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001634f:	46                   	inc    esi
c0016350:	83 fe 04             	cmp    esi,0x4
c0016353:	0f 85 7a ff ff ff    	jne    c00162d3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635d:	83 f0 01             	xor    eax,0x1
c0016360:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016364:	75 57                	jne    c00163bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016366:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001636a:	83 f0 01             	xor    eax,0x1
c001636d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016371:	75 4a                	jne    c00163bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016373:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016377:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001637f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016387:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001638d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016393:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016399:	0f a4 c2 0a          	shld   edx,eax,0xa
c001639d:	89 f7                	mov    edi,esi
c001639f:	c1 e0 0a             	shl    eax,0xa
c00163a2:	c1 ff 1f             	sar    edi,0x1f
c00163a5:	57                   	push   edi
c00163a6:	56                   	push   esi
c00163a7:	52                   	push   edx
c00163a8:	50                   	push   eax
c00163a9:	e8 f6 02 01 00       	call   c00266a4 <__udivdi3>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163b9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00163bd:	84 c9                	test   cl,cl
c00163bf:	74 53                	je     c0016414 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00163c1:	0f b6 c9             	movzx  ecx,cl
c00163c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00163d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00163d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00163dc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00163e0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00163e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00163ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00163f8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00163fc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016400:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016404:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016408:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001640c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016410:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016414:	31 ed                	xor    ebp,ebp
c0016416:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001641a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001641e:	89 f8                	mov    eax,edi
c0016420:	09 f0                	or     eax,esi
c0016422:	74 1e                	je     c0016442 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016424:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016428:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001642c:	89 d1                	mov    ecx,edx
c001642e:	09 c1                	or     ecx,eax
c0016430:	74 10                	je     c0016442 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	57                   	push   edi
c0016436:	56                   	push   esi
c0016437:	52                   	push   edx
c0016438:	50                   	push   eax
c0016439:	53                   	push   ebx
c001643a:	e8 db fc ff ff       	call   c001611a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001643f:	83 c4 20             	add    esp,0x20
c0016442:	45                   	inc    ebp
c0016443:	83 fd 04             	cmp    ebp,0x4
c0016446:	75 ce                	jne    c0016416 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016448:	81 c4 5c 02 00 00    	add    esp,0x25c
c001644e:	5b                   	pop    ebx
c001644f:	5e                   	pop    esi
c0016450:	5f                   	pop    edi
c0016451:	5d                   	pop    ebp
c0016452:	c3                   	ret    
c0016453:	90                   	nop

c0016454 <Serial::Serial(char const*)>:
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645b:	83 ec 08             	sub    esp,0x8
c001645e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016462:	50                   	push   eax
c0016463:	e8 3e d8 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0016468:	83 c4 10             	add    esp,0x10
c001646b:	ba f8 ae 02 c0       	mov    edx,0xc002aef8
c0016470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016474:	89 10                	mov    DWORD PTR [eax],edx
c0016476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016484:	90                   	nop
c0016485:	83 c4 0c             	add    esp,0xc
c0016488:	c3                   	ret    
c0016489:	90                   	nop

c001648a <Serial::~Serial()>:
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	ba f8 ae 02 c0       	mov    edx,0xc002aef8
c0016492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016496:	89 10                	mov    DWORD PTR [eax],edx
c0016498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	50                   	push   eax
c00164a0:	e8 cb d4 ff ff       	call   c0013970 <Device::~Device()>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	90                   	nop
c00164a9:	83 c4 0c             	add    esp,0xc
c00164ac:	c3                   	ret    
c00164ad:	90                   	nop

c00164ae <Serial::~Serial()>:
c00164ae:	83 ec 0c             	sub    esp,0xc
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b8:	e8 cd ff ff ff       	call   c001648a <Serial::~Serial()>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	83 ec 08             	sub    esp,0x8
c00164c3:	68 58 01 00 00       	push   0x158
c00164c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164cc:	e8 c0 c0 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	83 c4 0c             	add    esp,0xc
c00164d7:	c3                   	ret    

c00164d8 <Timer::Timer(char const*)>:
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164df:	83 ec 08             	sub    esp,0x8
c00164e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e6:	50                   	push   eax
c00164e7:	e8 ba d7 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c00164ec:	83 c4 10             	add    esp,0x10
c00164ef:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c00164f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f8:	89 10                	mov    DWORD PTR [eax],edx
c00164fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fe:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016508:	90                   	nop
c0016509:	83 c4 0c             	add    esp,0xc
c001650c:	c3                   	ret    
c001650d:	90                   	nop

c001650e <Timer::~Timer()>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c0016516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001651a:	89 10                	mov    DWORD PTR [eax],edx
c001651c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	50                   	push   eax
c0016524:	e8 47 d4 ff ff       	call   c0013970 <Device::~Device()>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	90                   	nop
c001652d:	83 c4 0c             	add    esp,0xc
c0016530:	c3                   	ret    
c0016531:	90                   	nop

c0016532 <Timer::~Timer()>:
c0016532:	83 ec 0c             	sub    esp,0xc
c0016535:	83 ec 0c             	sub    esp,0xc
c0016538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001653c:	e8 cd ff ff ff       	call   c001650e <Timer::~Timer()>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	83 ec 08             	sub    esp,0x8
c0016547:	68 5c 01 00 00       	push   0x15c
c001654c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016550:	e8 3c c0 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0016555:	83 c4 10             	add    esp,0x10
c0016558:	83 c4 0c             	add    esp,0xc
c001655b:	c3                   	ret    

c001655c <Timer::read()>:
c001655c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016560:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016566:	c3                   	ret    

c0016567 <timerHandler(unsigned long long)>:
c0016567:	55                   	push   ebp
c0016568:	57                   	push   edi
c0016569:	56                   	push   esi
c001656a:	53                   	push   ebx
c001656b:	83 ec 0c             	sub    esp,0xc
c001656e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016572:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016576:	01 35 f0 de 02 c0    	add    DWORD PTR ds:0xc002def0,esi
c001657c:	11 3d f4 de 02 c0    	adc    DWORD PTR ds:0xc002def4,edi
c0016582:	80 3d 8d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d88d,0x0
c0016589:	0f 84 42 01 00 00    	je     c00166d1 <timerHandler(unsigned long long)+0x16a>
c001658f:	fa                   	cli    
c0016590:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c0016596:	83 ec 0c             	sub    esp,0xc
c0016599:	ff 05 a4 0d 03 c0    	inc    DWORD PTR ds:0xc0030da4
c001659f:	68 b8 0d 03 c0       	push   0xc0030db8
c00165a4:	e8 55 21 01 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	84 c0                	test   al,al
c00165ae:	0f 85 a2 00 00 00    	jne    c0016656 <timerHandler(unsigned long long)+0xef>
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	68 b8 0d 03 c0       	push   0xc0030db8
c00165bc:	e8 59 21 01 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	89 c3                	mov    ebx,eax
c00165c6:	83 ec 0c             	sub    esp,0xc
c00165c9:	68 b8 0d 03 c0       	push   0xc0030db8
c00165ce:	e8 47 21 01 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d3:	c7 04 24 b8 0d 03 c0 	mov    DWORD PTR [esp],0xc0030db8
c00165da:	89 c5                	mov    ebp,eax
c00165dc:	e8 41 21 01 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165e1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00165e4:	83 c4 10             	add    esp,0x10
c00165e7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00165ea:	39 15 f0 de 02 c0    	cmp    DWORD PTR ds:0xc002def0,edx
c00165f0:	a1 f4 de 02 c0       	mov    eax,ds:0xc002def4
c00165f5:	19 c8                	sbb    eax,ecx
c00165f7:	72 21                	jb     c001661a <timerHandler(unsigned long long)+0xb3>
c00165f9:	83 ec 0c             	sub    esp,0xc
c00165fc:	55                   	push   ebp
c00165fd:	e8 e0 77 00 00       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	39 eb                	cmp    ebx,ebp
c0016607:	75 21                	jne    c001662a <timerHandler(unsigned long long)+0xc3>
c0016609:	83 ec 0c             	sub    esp,0xc
c001660c:	68 b8 0d 03 c0       	push   0xc0030db8
c0016611:	e8 04 21 01 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016616:	89 c3                	mov    ebx,eax
c0016618:	eb 0d                	jmp    c0016627 <timerHandler(unsigned long long)+0xc0>
c001661a:	50                   	push   eax
c001661b:	50                   	push   eax
c001661c:	55                   	push   ebp
c001661d:	68 b8 0d 03 c0       	push   0xc0030db8
c0016622:	e8 a9 21 01 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	68 b8 0d 03 c0       	push   0xc0030db8
c0016632:	e8 c7 20 01 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	84 c0                	test   al,al
c001663c:	75 18                	jne    c0016656 <timerHandler(unsigned long long)+0xef>
c001663e:	83 ec 0c             	sub    esp,0xc
c0016641:	68 b8 0d 03 c0       	push   0xc0030db8
c0016646:	e8 cf 20 01 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	39 d8                	cmp    eax,ebx
c0016650:	0f 85 70 ff ff ff    	jne    c00165c6 <timerHandler(unsigned long long)+0x5f>
c0016656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001665b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001665f:	74 3d                	je     c001669e <timerHandler(unsigned long long)+0x137>
c0016661:	80 3d 8c d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d88c,0x0
c0016668:	74 34                	je     c001669e <timerHandler(unsigned long long)+0x137>
c001666a:	fa                   	cli    
c001666b:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c0016671:	31 d2                	xor    edx,edx
c0016673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016678:	89 f9                	mov    ecx,edi
c001667a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001667d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016685:	39 c6                	cmp    esi,eax
c0016687:	19 d1                	sbb    ecx,edx
c0016689:	72 05                	jb     c0016690 <timerHandler(unsigned long long)+0x129>
c001668b:	e8 cf 72 00 00       	call   c001d95f <schedule()>
c0016690:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c0016695:	48                   	dec    eax
c0016696:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001669b:	75 01                	jne    c001669e <timerHandler(unsigned long long)+0x137>
c001669d:	fb                   	sti    
c001669e:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c00166a3:	48                   	dec    eax
c00166a4:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c00166a9:	75 18                	jne    c00166c3 <timerHandler(unsigned long long)+0x15c>
c00166ab:	83 3d a0 0d 03 c0 00 	cmp    DWORD PTR ds:0xc0030da0,0x0
c00166b2:	74 0f                	je     c00166c3 <timerHandler(unsigned long long)+0x15c>
c00166b4:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c00166be:	e8 9c 72 00 00       	call   c001d95f <schedule()>
c00166c3:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00166c8:	48                   	dec    eax
c00166c9:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00166ce:	75 01                	jne    c00166d1 <timerHandler(unsigned long long)+0x16a>
c00166d0:	fb                   	sti    
c00166d1:	83 c4 0c             	add    esp,0xc
c00166d4:	5b                   	pop    ebx
c00166d5:	5e                   	pop    esi
c00166d6:	5f                   	pop    edi
c00166d7:	5d                   	pop    ebp
c00166d8:	c3                   	ret    

c00166d9 <setupTimer(int)>:
c00166d9:	57                   	push   edi
c00166da:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00166df:	56                   	push   esi
c00166e0:	53                   	push   ebx
c00166e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166eb:	83 ec 0c             	sub    esp,0xc
c00166ee:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166f4:	e8 a9 d6 ff ff       	call   c0013da2 <Device::getName()>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00166ff:	0f 85 8d 00 00 00    	jne    c0016792 <setupTimer(int)+0xb9>
c0016705:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001670a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016711:	74 7f                	je     c0016792 <setupTimer(int)+0xb9>
c0016713:	83 ec 0c             	sub    esp,0xc
c0016716:	68 5c 01 00 00       	push   0x15c
c001671b:	e8 79 8e ff ff       	call   c000f599 <malloc>
c0016720:	89 04 24             	mov    DWORD PTR [esp],eax
c0016723:	89 c3                	mov    ebx,eax
c0016725:	e8 54 fb 00 00       	call   c002627e <PIT::PIT()>
c001672a:	59                   	pop    ecx
c001672b:	5f                   	pop    edi
c001672c:	53                   	push   ebx
c001672d:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c0016733:	e8 6a d3 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0016738:	8b 03                	mov    eax,DWORD PTR [ebx]
c001673a:	6a 00                	push   0x0
c001673c:	6a 00                	push   0x0
c001673e:	56                   	push   esi
c001673f:	53                   	push   ebx
c0016740:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016743:	83 c4 14             	add    esp,0x14
c0016746:	68 60 01 00 00       	push   0x160
c001674b:	e8 49 8e ff ff       	call   c000f599 <malloc>
c0016750:	89 04 24             	mov    DWORD PTR [esp],eax
c0016753:	89 c7                	mov    edi,eax
c0016755:	e8 d4 f9 00 00       	call   c002612e <APICTimer::APICTimer()>
c001675a:	6a 00                	push   0x0
c001675c:	6a 00                	push   0x0
c001675e:	56                   	push   esi
c001675f:	57                   	push   edi
c0016760:	e8 cb f8 00 00       	call   c0026030 <APICTimer::open(int, int, void*)>
c0016765:	83 c4 20             	add    esp,0x20
c0016768:	8b 03                	mov    eax,DWORD PTR [ebx]
c001676a:	6a 00                	push   0x0
c001676c:	6a 00                	push   0x0
c001676e:	6a 00                	push   0x0
c0016770:	53                   	push   ebx
c0016771:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016774:	58                   	pop    eax
c0016775:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001677a:	5a                   	pop    edx
c001677b:	57                   	push   edi
c001677c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016782:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016788:	e8 15 d3 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	eb 33                	jmp    c00167c5 <setupTimer(int)+0xec>
c0016792:	83 ec 0c             	sub    esp,0xc
c0016795:	68 5c 01 00 00       	push   0x15c
c001679a:	e8 fa 8d ff ff       	call   c000f599 <malloc>
c001679f:	89 04 24             	mov    DWORD PTR [esp],eax
c00167a2:	89 c3                	mov    ebx,eax
c00167a4:	e8 d5 fa 00 00       	call   c002627e <PIT::PIT()>
c00167a9:	58                   	pop    eax
c00167aa:	5a                   	pop    edx
c00167ab:	53                   	push   ebx
c00167ac:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c00167b2:	e8 eb d2 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c00167b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167b9:	6a 00                	push   0x0
c00167bb:	6a 00                	push   0x0
c00167bd:	56                   	push   esi
c00167be:	53                   	push   ebx
c00167bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167c2:	83 c4 20             	add    esp,0x20
c00167c5:	89 d8                	mov    eax,ebx
c00167c7:	5b                   	pop    ebx
c00167c8:	5e                   	pop    esi
c00167c9:	5f                   	pop    edi
c00167ca:	c3                   	ret    
c00167cb:	90                   	nop

c00167cc <VCache::VCache(PhysicalDisk*)>:
c00167cc:	53                   	push   ebx
c00167cd:	83 ec 18             	sub    esp,0x18
c00167d0:	ba 6c af 02 c0       	mov    edx,0xc002af6c
c00167d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d9:	89 10                	mov    DWORD PTR [eax],edx
c00167db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167df:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00167e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ea:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00167f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00167fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016807:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001680e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016819:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016824:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001682c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016833:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001683a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016846:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001684a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016856:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001685d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001686c:	e8 28 8d ff ff       	call   c000f599 <malloc>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	89 c3                	mov    ebx,eax
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	53                   	push   ebx
c001687a:	e8 a9 6e 00 00       	call   c001d728 <Mutex::Mutex()>
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016886:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016891:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016898:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001689f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168a3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00168b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168b4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00168ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00168c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00168c7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00168ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168dc:	05 00 01 00 00       	add    eax,0x100
c00168e1:	c1 e0 04             	shl    eax,0x4
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	50                   	push   eax
c00168e8:	e8 ac 8c ff ff       	call   c000f599 <malloc>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	89 c2                	mov    edx,eax
c00168f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00168f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016908:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001690c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016910:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016916:	c1 e0 07             	shl    eax,0x7
c0016919:	83 ec 0c             	sub    esp,0xc
c001691c:	50                   	push   eax
c001691d:	e8 77 8c ff ff       	call   c000f599 <malloc>
c0016922:	83 c4 10             	add    esp,0x10
c0016925:	89 c2                	mov    edx,eax
c0016927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001692e:	90                   	nop
c001692f:	83 c4 18             	add    esp,0x18
c0016932:	5b                   	pop    ebx
c0016933:	c3                   	ret    

c0016934 <VCache::invalidateReadBuffer()>:
c0016934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016938:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001693e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016942:	c3                   	ret    
c0016943:	90                   	nop

c0016944 <VCache::writeWriteBuffer()>:
c0016944:	53                   	push   ebx
c0016945:	83 ec 14             	sub    esp,0x14
c0016948:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001694c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001694f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016951:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016954:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016957:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001695a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001695d:	50                   	push   eax
c001695e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016961:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016968:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001696f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016973:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001697a:	83 c4 28             	add    esp,0x28
c001697d:	5b                   	pop    ebx
c001697e:	c3                   	ret    
c001697f:	90                   	nop

c0016980 <VCache::~VCache()>:
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	ba 6c af 02 c0       	mov    edx,0xc002af6c
c0016988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001698c:	89 10                	mov    DWORD PTR [eax],edx
c001698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016992:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016995:	84 c0                	test   al,al
c0016997:	74 0f                	je     c00169a8 <VCache::~VCache()+0x28>
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a0:	e8 9f ff ff ff       	call   c0016944 <VCache::writeWriteBuffer()>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	50                   	push   eax
c00169b3:	e8 f1 8b ff ff       	call   c000f5a9 <free>
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00169c2:	83 ec 0c             	sub    esp,0xc
c00169c5:	50                   	push   eax
c00169c6:	e8 de 8b ff ff       	call   c000f5a9 <free>
c00169cb:	83 c4 10             	add    esp,0x10
c00169ce:	90                   	nop
c00169cf:	83 c4 0c             	add    esp,0xc
c00169d2:	c3                   	ret    
c00169d3:	90                   	nop

c00169d4 <VCache::~VCache()>:
c00169d4:	83 ec 0c             	sub    esp,0xc
c00169d7:	83 ec 0c             	sub    esp,0xc
c00169da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169de:	e8 9d ff ff ff       	call   c0016980 <VCache::~VCache()>
c00169e3:	83 c4 10             	add    esp,0x10
c00169e6:	83 ec 08             	sub    esp,0x8
c00169e9:	6a 44                	push   0x44
c00169eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ef:	e8 9d bb ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	83 c4 0c             	add    esp,0xc
c00169fa:	c3                   	ret    
c00169fb:	90                   	nop

c00169fc <VCache::write(unsigned long long, int, void*)>:
c00169fc:	55                   	push   ebp
c00169fd:	57                   	push   edi
c00169fe:	56                   	push   esi
c00169ff:	53                   	push   ebx
c0016a00:	83 ec 18             	sub    esp,0x18
c0016a03:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a0b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a12:	e8 57 72 00 00       	call   c001dc6e <Semaphore::acquire()>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a1e:	74 0c                	je     c0016a2c <VCache::write(unsigned long long, int, void*)+0x30>
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	53                   	push   ebx
c0016a24:	e8 0b ff ff ff       	call   c0016934 <VCache::invalidateReadBuffer()>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a30:	74 5c                	je     c0016a8e <VCache::write(unsigned long long, int, void*)+0x92>
c0016a32:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a35:	89 e8                	mov    eax,ebp
c0016a37:	99                   	cdq    
c0016a38:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a3b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a3e:	89 c1                	mov    ecx,eax
c0016a40:	89 d0                	mov    eax,edx
c0016a42:	31 f1                	xor    ecx,esi
c0016a44:	31 f8                	xor    eax,edi
c0016a46:	09 c1                	or     ecx,eax
c0016a48:	75 38                	jne    c0016a82 <VCache::write(unsigned long long, int, void*)+0x86>
c0016a4a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016a4f:	75 31                	jne    c0016a82 <VCache::write(unsigned long long, int, void*)+0x86>
c0016a51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a54:	89 ef                	mov    edi,ebp
c0016a56:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a5c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a60:	0f af f9             	imul   edi,ecx
c0016a63:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016a66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a68:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a6b:	40                   	inc    eax
c0016a6c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016a6f:	83 c0 80             	add    eax,0xffffff80
c0016a72:	75 5c                	jne    c0016ad0 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	53                   	push   ebx
c0016a78:	e8 c7 fe ff ff       	call   c0016944 <VCache::writeWriteBuffer()>
c0016a7d:	83 c4 10             	add    esp,0x10
c0016a80:	eb 4e                	jmp    c0016ad0 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a82:	83 ec 0c             	sub    esp,0xc
c0016a85:	53                   	push   ebx
c0016a86:	e8 b9 fe ff ff       	call   c0016944 <VCache::writeWriteBuffer()>
c0016a8b:	83 c4 10             	add    esp,0x10
c0016a8e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a91:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016a96:	7f 22                	jg     c0016aba <VCache::write(unsigned long long, int, void*)+0xbe>
c0016a98:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a9b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016aa2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016aa6:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016aa9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016aac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ab2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ab8:	eb 16                	jmp    c0016ad0 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016aba:	83 ec 0c             	sub    esp,0xc
c0016abd:	8b 10                	mov    edx,DWORD PTR [eax]
c0016abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016ac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016ac7:	57                   	push   edi
c0016ac8:	56                   	push   esi
c0016ac9:	50                   	push   eax
c0016aca:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016acd:	83 c4 20             	add    esp,0x20
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ad6:	e8 ef 77 00 00       	call   c001e2ca <Semaphore::release()>
c0016adb:	83 c4 1c             	add    esp,0x1c
c0016ade:	31 c0                	xor    eax,eax
c0016ae0:	5b                   	pop    ebx
c0016ae1:	5e                   	pop    esi
c0016ae2:	5f                   	pop    edi
c0016ae3:	5d                   	pop    ebp
c0016ae4:	c3                   	ret    
c0016ae5:	90                   	nop

c0016ae6 <VCache::read(unsigned long long, int, void*)>:
c0016ae6:	55                   	push   ebp
c0016ae7:	57                   	push   edi
c0016ae8:	56                   	push   esi
c0016ae9:	53                   	push   ebx
c0016aea:	83 ec 28             	sub    esp,0x28
c0016aed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016af1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016af5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016af9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b00:	e8 69 71 00 00       	call   c001dc6e <Semaphore::acquire()>
c0016b05:	83 c4 10             	add    esp,0x10
c0016b08:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b0c:	74 0c                	je     c0016b1a <VCache::read(unsigned long long, int, void*)+0x34>
c0016b0e:	83 ec 0c             	sub    esp,0xc
c0016b11:	53                   	push   ebx
c0016b12:	e8 2d fe ff ff       	call   c0016944 <VCache::writeWriteBuffer()>
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	83 fd 01             	cmp    ebp,0x1
c0016b1d:	0f 85 80 00 00 00    	jne    c0016ba3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b23:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b2a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b31:	75 70                	jne    c0016ba3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b33:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b36:	89 e9                	mov    ecx,ebp
c0016b38:	f7 d9                	neg    ecx
c0016b3a:	89 c8                	mov    eax,ecx
c0016b3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b40:	c1 f8 1f             	sar    eax,0x1f
c0016b43:	21 f1                	and    ecx,esi
c0016b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b49:	89 c8                	mov    eax,ecx
c0016b4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b4f:	21 f9                	and    ecx,edi
c0016b51:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b55:	89 ca                	mov    edx,ecx
c0016b57:	74 0a                	je     c0016b63 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016b59:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016b5c:	75 05                	jne    c0016b63 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016b5e:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016b61:	74 23                	je     c0016b86 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016b63:	83 ec 0c             	sub    esp,0xc
c0016b66:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016b6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016b6e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016b71:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016b74:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016b76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016b79:	55                   	push   ebp
c0016b7a:	52                   	push   edx
c0016b7b:	50                   	push   eax
c0016b7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b80:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016b83:	83 c4 20             	add    esp,0x20
c0016b86:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b89:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b8d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b96:	48                   	dec    eax
c0016b97:	21 c6                	and    esi,eax
c0016b99:	0f af f1             	imul   esi,ecx
c0016b9c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016b9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ba1:	eb 1d                	jmp    c0016bc0 <VCache::read(unsigned long long, int, void*)+0xda>
c0016ba3:	83 ec 0c             	sub    esp,0xc
c0016ba6:	53                   	push   ebx
c0016ba7:	e8 88 fd ff ff       	call   c0016934 <VCache::invalidateReadBuffer()>
c0016bac:	5a                   	pop    edx
c0016bad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bb6:	55                   	push   ebp
c0016bb7:	57                   	push   edi
c0016bb8:	56                   	push   esi
c0016bb9:	50                   	push   eax
c0016bba:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016bbd:	83 c4 20             	add    esp,0x20
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bc6:	e8 ff 76 00 00       	call   c001e2ca <Semaphore::release()>
c0016bcb:	83 c4 2c             	add    esp,0x2c
c0016bce:	31 c0                	xor    eax,eax
c0016bd0:	5b                   	pop    ebx
c0016bd1:	5e                   	pop    esi
c0016bd2:	5f                   	pop    edi
c0016bd3:	5d                   	pop    ebp
c0016bd4:	c3                   	ret    
c0016bd5:	90                   	nop

c0016bd6 <Video::putrect(int, int, int, int, unsigned int)>:
c0016bd6:	55                   	push   ebp
c0016bd7:	57                   	push   edi
c0016bd8:	56                   	push   esi
c0016bd9:	53                   	push   ebx
c0016bda:	83 ec 1c             	sub    esp,0x1c
c0016bdd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016be1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016be5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016be9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016bed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bf5:	01 df                	add    edi,ebx
c0016bf7:	39 fb                	cmp    ebx,edi
c0016bf9:	7d 1f                	jge    c0016c1a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016bfb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016bff:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c03:	7d 12                	jge    c0016c17 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c05:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c0b:	53                   	push   ebx
c0016c0c:	55                   	push   ebp
c0016c0d:	45                   	inc    ebp
c0016c0e:	56                   	push   esi
c0016c0f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	eb e8                	jmp    c0016bff <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c17:	43                   	inc    ebx
c0016c18:	eb dd                	jmp    c0016bf7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c1a:	83 c4 1c             	add    esp,0x1c
c0016c1d:	5b                   	pop    ebx
c0016c1e:	5e                   	pop    esi
c0016c1f:	5f                   	pop    edi
c0016c20:	5d                   	pop    ebp
c0016c21:	c3                   	ret    

c0016c22 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c22:	55                   	push   ebp
c0016c23:	57                   	push   edi
c0016c24:	31 ff                	xor    edi,edi
c0016c26:	56                   	push   esi
c0016c27:	53                   	push   ebx
c0016c28:	83 ec 1c             	sub    esp,0x1c
c0016c2b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c2f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c33:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c3a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c43:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016c47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c4b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016c4e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c52:	01 f9                	add    ecx,edi
c0016c54:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016c58:	7d 2f                	jge    c0016c89 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016c5a:	31 f6                	xor    esi,esi
c0016c5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016c60:	01 f2                	add    edx,esi
c0016c62:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016c66:	7d 1a                	jge    c0016c82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016c68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c6b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016c6e:	46                   	inc    esi
c0016c6f:	51                   	push   ecx
c0016c70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016c74:	52                   	push   edx
c0016c75:	55                   	push   ebp
c0016c76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c80:	eb da                	jmp    c0016c5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016c82:	47                   	inc    edi
c0016c83:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016c87:	eb c5                	jmp    c0016c4e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016c89:	83 c4 1c             	add    esp,0x1c
c0016c8c:	5b                   	pop    ebx
c0016c8d:	5e                   	pop    esi
c0016c8e:	5f                   	pop    edi
c0016c8f:	5d                   	pop    ebp
c0016c90:	c3                   	ret    
c0016c91:	90                   	nop

c0016c92 <Video::blit(unsigned int*, int, int, int, int)>:
c0016c92:	55                   	push   ebp
c0016c93:	57                   	push   edi
c0016c94:	56                   	push   esi
c0016c95:	53                   	push   ebx
c0016c96:	83 ec 1c             	sub    esp,0x1c
c0016c99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ca1:	85 c0                	test   eax,eax
c0016ca3:	79 02                	jns    c0016ca7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016ca5:	31 c0                	xor    eax,eax
c0016ca7:	c1 e0 02             	shl    eax,0x2
c0016caa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016cb6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016cba:	39 d8                	cmp    eax,ebx
c0016cbc:	7e 49                	jle    c0016d07 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016cbe:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016cc4:	7c 41                	jl     c0016d07 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016cc6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016cca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016cce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cd2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016cd6:	39 f9                	cmp    ecx,edi
c0016cd8:	7e 22                	jle    c0016cfc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016cda:	83 c5 04             	add    ebp,0x4
c0016cdd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ce3:	7c 14                	jl     c0016cf9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016ce5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016ce7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016cea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016cee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016cf2:	56                   	push   esi
c0016cf3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016cf6:	83 c4 10             	add    esp,0x10
c0016cf9:	47                   	inc    edi
c0016cfa:	eb d2                	jmp    c0016cce <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d00:	43                   	inc    ebx
c0016d01:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d05:	eb ab                	jmp    c0016cb2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d07:	83 c4 1c             	add    esp,0x1c
c0016d0a:	5b                   	pop    ebx
c0016d0b:	5e                   	pop    esi
c0016d0c:	5f                   	pop    edi
c0016d0d:	5d                   	pop    ebp
c0016d0e:	c3                   	ret    
c0016d0f:	90                   	nop

c0016d10 <Video::clearScreen(unsigned int)>:
c0016d10:	57                   	push   edi
c0016d11:	56                   	push   esi
c0016d12:	53                   	push   ebx
c0016d13:	31 db                	xor    ebx,ebx
c0016d15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d19:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d1f:	7e 1f                	jle    c0016d40 <Video::clearScreen(unsigned int)+0x30>
c0016d21:	31 ff                	xor    edi,edi
c0016d23:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d29:	7e 12                	jle    c0016d3d <Video::clearScreen(unsigned int)+0x2d>
c0016d2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d31:	53                   	push   ebx
c0016d32:	57                   	push   edi
c0016d33:	47                   	inc    edi
c0016d34:	56                   	push   esi
c0016d35:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	eb e6                	jmp    c0016d23 <Video::clearScreen(unsigned int)+0x13>
c0016d3d:	43                   	inc    ebx
c0016d3e:	eb d9                	jmp    c0016d19 <Video::clearScreen(unsigned int)+0x9>
c0016d40:	5b                   	pop    ebx
c0016d41:	5e                   	pop    esi
c0016d42:	5f                   	pop    edi
c0016d43:	c3                   	ret    

c0016d44 <Video::putpixel(int, int, unsigned int)>:
c0016d44:	c7 44 24 04 74 af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af74
c0016d4c:	e9 84 30 00 00       	jmp    c0019dd5 <Krnl::panic(char const*)>
c0016d51:	90                   	nop

c0016d52 <Video::Video(char const*)>:
c0016d52:	83 ec 0c             	sub    esp,0xc
c0016d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d59:	83 ec 08             	sub    esp,0x8
c0016d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d60:	50                   	push   eax
c0016d61:	e8 40 cf ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0016d66:	83 c4 10             	add    esp,0x10
c0016d69:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0016d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d72:	89 10                	mov    DWORD PTR [eax],edx
c0016d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d78:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016d82:	90                   	nop
c0016d83:	83 c4 0c             	add    esp,0xc
c0016d86:	c3                   	ret    
c0016d87:	90                   	nop

c0016d88 <Video::~Video()>:
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0016d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d94:	89 10                	mov    DWORD PTR [eax],edx
c0016d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	50                   	push   eax
c0016d9e:	e8 cd cb ff ff       	call   c0013970 <Device::~Device()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	90                   	nop
c0016da7:	83 c4 0c             	add    esp,0xc
c0016daa:	c3                   	ret    
c0016dab:	90                   	nop

c0016dac <Video::~Video()>:
c0016dac:	83 ec 0c             	sub    esp,0xc
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db6:	e8 cd ff ff ff       	call   c0016d88 <Video::~Video()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	83 ec 08             	sub    esp,0x8
c0016dc1:	68 64 01 00 00       	push   0x164
c0016dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dca:	e8 c2 b7 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	83 c4 0c             	add    esp,0xc
c0016dd5:	c3                   	ret    

c0016dd6 <Video::isMonochrome()>:
c0016dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dda:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016de0:	c3                   	ret    
c0016de1:	90                   	nop

c0016de2 <Video::getWidth()>:
c0016de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dec:	c3                   	ret    
c0016ded:	90                   	nop

c0016dee <Video::getHeight()>:
c0016dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016df8:	c3                   	ret    
c0016df9:	90                   	nop

c0016dfa <Video::drawCursor(int, int, unsigned char*, int)>:
c0016dfa:	55                   	push   ebp
c0016dfb:	57                   	push   edi
c0016dfc:	56                   	push   esi
c0016dfd:	53                   	push   ebx
c0016dfe:	83 ec 2c             	sub    esp,0x2c
c0016e01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e05:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e09:	83 f8 01             	cmp    eax,0x1
c0016e0c:	19 c9                	sbb    ecx,ecx
c0016e0e:	31 db                	xor    ebx,ebx
c0016e10:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e14:	89 cd                	mov    ebp,ecx
c0016e16:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e1e:	f7 d5                	not    ebp
c0016e20:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e2a:	01 d8                	add    eax,ebx
c0016e2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e30:	56                   	push   esi
c0016e31:	e8 b8 ff ff ff       	call   c0016dee <Video::getHeight()>
c0016e36:	59                   	pop    ecx
c0016e37:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e3b:	7e 70                	jle    c0016ead <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e3d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e41:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016e45:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016e48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e4c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e50:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016e57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e5b:	89 f8                	mov    eax,edi
c0016e5d:	83 c0 20             	add    eax,0x20
c0016e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e64:	56                   	push   esi
c0016e65:	e8 78 ff ff ff       	call   c0016de2 <Video::getWidth()>
c0016e6a:	5a                   	pop    edx
c0016e6b:	39 c7                	cmp    edi,eax
c0016e6d:	7d 34                	jge    c0016ea3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016e6f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016e74:	74 05                	je     c0016e7b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016e76:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e78:	55                   	push   ebp
c0016e79:	eb 0d                	jmp    c0016e88 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016e7b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016e80:	74 12                	je     c0016e94 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016e82:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e8c:	57                   	push   edi
c0016e8d:	56                   	push   esi
c0016e8e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016e98:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016e9c:	47                   	inc    edi
c0016e9d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ea1:	75 c1                	jne    c0016e64 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016ea3:	43                   	inc    ebx
c0016ea4:	83 fb 20             	cmp    ebx,0x20
c0016ea7:	0f 85 79 ff ff ff    	jne    c0016e26 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ead:	83 c4 2c             	add    esp,0x2c
c0016eb0:	5b                   	pop    ebx
c0016eb1:	5e                   	pop    esi
c0016eb2:	5f                   	pop    edi
c0016eb3:	5d                   	pop    ebp
c0016eb4:	c3                   	ret    
c0016eb5:	90                   	nop

c0016eb6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016eb6:	55                   	push   ebp
c0016eb7:	57                   	push   edi
c0016eb8:	56                   	push   esi
c0016eb9:	53                   	push   ebx
c0016eba:	83 ec 28             	sub    esp,0x28
c0016ebd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ec1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016ec5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016ec9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ecd:	c1 e6 08             	shl    esi,0x8
c0016ed0:	01 c6                	add    esi,eax
c0016ed2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016ed6:	c1 e0 08             	shl    eax,0x8
c0016ed9:	01 d0                	add    eax,edx
c0016edb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016edf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ee3:	0f af c6             	imul   eax,esi
c0016ee6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016eed:	50                   	push   eax
c0016eee:	e8 a6 86 ff ff       	call   c000f599 <malloc>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	89 c7                	mov    edi,eax
c0016ef8:	85 c0                	test   eax,eax
c0016efa:	75 10                	jne    c0016f0c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016efc:	83 ec 0c             	sub    esp,0xc
c0016eff:	68 95 af 02 c0       	push   0xc002af95
c0016f04:	e8 cc 2e 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f0f:	ba 12 00 00 00       	mov    edx,0x12
c0016f14:	84 c0                	test   al,al
c0016f16:	74 11                	je     c0016f29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f18:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f1c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f20:	c1 fa 03             	sar    edx,0x3
c0016f23:	0f af d1             	imul   edx,ecx
c0016f26:	83 c2 12             	add    edx,0x12
c0016f29:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f2d:	74 04                	je     c0016f33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f2f:	85 f6                	test   esi,esi
c0016f31:	75 12                	jne    c0016f45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f33:	83 ec 0c             	sub    esp,0xc
c0016f36:	68 a5 af 02 c0       	push   0xc002afa5
c0016f3b:	e8 29 b7 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0016f40:	e9 b8 00 00 00       	jmp    c0016ffd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016f45:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016f49:	80 f9 02             	cmp    cl,0x2
c0016f4c:	0f 85 96 00 00 00    	jne    c0016fe8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016f52:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016f57:	75 0e                	jne    c0016f67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f59:	84 c0                	test   al,al
c0016f5b:	75 0a                	jne    c0016f67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f5d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016f60:	83 e8 18             	sub    eax,0x18
c0016f63:	a8 f7                	test   al,0xf7
c0016f65:	74 0a                	je     c0016f71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	68 ba af 02 c0       	push   0xc002afba
c0016f6f:	eb 7f                	jmp    c0016ff0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016f79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f81:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016f85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016f8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016f91:	75 0c                	jne    c0016f9f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f93:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016f98:	c1 e0 18             	shl    eax,0x18
c0016f9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f9f:	45                   	inc    ebp
c0016fa0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016fa5:	c1 e1 10             	shl    ecx,0x10
c0016fa8:	89 c8                	mov    eax,ecx
c0016faa:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016faf:	c1 e1 08             	shl    ecx,0x8
c0016fb2:	09 c1                	or     ecx,eax
c0016fb4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016fb8:	09 c1                	or     ecx,eax
c0016fba:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016fbe:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016fc2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016fc6:	c1 f8 03             	sar    eax,0x3
c0016fc9:	01 c2                	add    edx,eax
c0016fcb:	89 e8                	mov    eax,ebp
c0016fcd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016fd1:	39 c6                	cmp    esi,eax
c0016fd3:	7f b0                	jg     c0016f85 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016fd5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016fd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fdd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016fe0:	7e 22                	jle    c0017004 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016fe2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016fe6:	eb 99                	jmp    c0016f81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016fe8:	50                   	push   eax
c0016fe9:	50                   	push   eax
c0016fea:	51                   	push   ecx
c0016feb:	68 c8 af 02 c0       	push   0xc002afc8
c0016ff0:	e8 74 b6 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0016ff5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016ff8:	e8 ac 85 ff ff       	call   c000f5a9 <free>
c0016ffd:	83 c4 10             	add    esp,0x10
c0017000:	31 ff                	xor    edi,edi
c0017002:	eb 0f                	jmp    c0017013 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017004:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017008:	89 30                	mov    DWORD PTR [eax],esi
c001700a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001700e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017011:	89 30                	mov    DWORD PTR [eax],esi
c0017013:	83 c4 1c             	add    esp,0x1c
c0017016:	89 f8                	mov    eax,edi
c0017018:	5b                   	pop    ebx
c0017019:	5e                   	pop    esi
c001701a:	5f                   	pop    edi
c001701b:	5d                   	pop    ebp
c001701c:	c3                   	ret    
c001701d:	90                   	nop

c001701e <Video::putTGA(int, int, unsigned char*, int)>:
c001701e:	55                   	push   ebp
c001701f:	57                   	push   edi
c0017020:	56                   	push   esi
c0017021:	53                   	push   ebx
c0017022:	83 ec 28             	sub    esp,0x28
c0017025:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017029:	8d 44 24 18          	lea    eax,[esp+0x18]
c001702d:	50                   	push   eax
c001702e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017032:	50                   	push   eax
c0017033:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017037:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001703b:	56                   	push   esi
c001703c:	e8 75 fe ff ff       	call   c0016eb6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017041:	83 c4 20             	add    esp,0x20
c0017044:	85 c0                	test   eax,eax
c0017046:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001704a:	74 35                	je     c0017081 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001704c:	89 c7                	mov    edi,eax
c001704e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017052:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017056:	39 d8                	cmp    eax,ebx
c0017058:	7e 27                	jle    c0017081 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001705a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001705e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017062:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017066:	39 e8                	cmp    eax,ebp
c0017068:	7e 14                	jle    c001707e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001706a:	8b 06                	mov    eax,DWORD PTR [esi]
c001706c:	83 c7 04             	add    edi,0x4
c001706f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017072:	53                   	push   ebx
c0017073:	55                   	push   ebp
c0017074:	45                   	inc    ebp
c0017075:	56                   	push   esi
c0017076:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017079:	83 c4 10             	add    esp,0x10
c001707c:	eb e0                	jmp    c001705e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001707e:	43                   	inc    ebx
c001707f:	eb cd                	jmp    c001704e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017081:	83 c4 1c             	add    esp,0x1c
c0017084:	5b                   	pop    ebx
c0017085:	5e                   	pop    esi
c0017086:	5f                   	pop    edi
c0017087:	5d                   	pop    ebp
c0017088:	c3                   	ret    
c0017089:	90                   	nop

c001708a <ACPI::close(int, int, void*)>:
c001708a:	83 ec 1c             	sub    esp,0x1c
c001708d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017095:	74 0a                	je     c00170a1 <ACPI::close(int, int, void*)+0x17>
c0017097:	b8 00 00 00 00       	mov    eax,0x0
c001709c:	e9 8a 00 00 00       	jmp    c001712b <ACPI::close(int, int, void*)+0xa1>
c00170a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00170a6:	75 27                	jne    c00170cf <ACPI::close(int, int, void*)+0x45>
c00170a8:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c00170ad:	85 c0                	test   eax,eax
c00170af:	74 07                	je     c00170b8 <ACPI::close(int, int, void*)+0x2e>
c00170b1:	a1 28 ff 02 c0       	mov    eax,ds:0xc002ff28
c00170b6:	ff d0                	call   eax
c00170b8:	83 ec 0c             	sub    esp,0xc
c00170bb:	68 24 b0 02 c0       	push   0xc002b024
c00170c0:	e8 10 2d 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00170cd:	eb 5c                	jmp    c001712b <ACPI::close(int, int, void*)+0xa1>
c00170cf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00170d4:	75 50                	jne    c0017126 <ACPI::close(int, int, void*)+0x9c>
c00170d6:	a1 24 ff 02 c0       	mov    eax,ds:0xc002ff24
c00170db:	85 c0                	test   eax,eax
c00170dd:	74 07                	je     c00170e6 <ACPI::close(int, int, void*)+0x5c>
c00170df:	a1 24 ff 02 c0       	mov    eax,ds:0xc002ff24
c00170e4:	ff d0                	call   eax
c00170e6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00170eb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00170f0:	83 e0 02             	and    eax,0x2
c00170f3:	74 1c                	je     c0017111 <ACPI::close(int, int, void*)+0x87>
c00170f5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00170fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017100:	89 c2                	mov    edx,eax
c0017102:	ec                   	in     al,dx
c0017103:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017107:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001710b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001710f:	eb da                	jmp    c00170eb <ACPI::close(int, int, void*)+0x61>
c0017111:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017118:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001711d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017121:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017125:	ee                   	out    dx,al
c0017126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001712b:	83 c4 1c             	add    esp,0x1c
c001712e:	c3                   	ret    

c001712f <findRSDP()>:
c001712f:	83 ec 1c             	sub    esp,0x1c
c0017132:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017137:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001713d:	83 e0 04             	and    eax,0x4
c0017140:	84 c0                	test   al,al
c0017142:	75 07                	jne    c001714b <findRSDP()+0x1c>
c0017144:	b8 00 00 00 00       	mov    eax,0x0
c0017149:	eb 6a                	jmp    c00171b5 <findRSDP()+0x86>
c001714b:	a1 d4 d8 02 c0       	mov    eax,ds:0xc002d8d4
c0017150:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017155:	7f 1b                	jg     c0017172 <findRSDP()+0x43>
c0017157:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001715c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017162:	83 e2 fb             	and    edx,0xfffffffb
c0017165:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001716b:	b8 00 00 00 00       	mov    eax,0x0
c0017170:	eb 43                	jmp    c00171b5 <findRSDP()+0x86>
c0017172:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001717a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017182:	77 2c                	ja     c00171b0 <findRSDP()+0x81>
c0017184:	83 ec 04             	sub    esp,0x4
c0017187:	6a 08                	push   0x8
c0017189:	68 bf b0 02 c0       	push   0xc002b0bf
c001718e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017192:	e8 b5 94 fe ff       	call   c000064c <memcmp>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	85 c0                	test   eax,eax
c001719c:	0f 94 c0             	sete   al
c001719f:	84 c0                	test   al,al
c00171a1:	74 06                	je     c00171a9 <findRSDP()+0x7a>
c00171a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171a7:	eb 0c                	jmp    c00171b5 <findRSDP()+0x86>
c00171a9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00171ae:	eb ca                	jmp    c001717a <findRSDP()+0x4b>
c00171b0:	b8 00 00 00 00       	mov    eax,0x0
c00171b5:	83 c4 1c             	add    esp,0x1c
c00171b8:	c3                   	ret    

c00171b9 <loadACPITables(unsigned char*)>:
c00171b9:	57                   	push   edi
c00171ba:	56                   	push   esi
c00171bb:	53                   	push   ebx
c00171bc:	83 ec 60             	sub    esp,0x60
c00171bf:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00171c4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171ca:	83 e0 04             	and    eax,0x4
c00171cd:	84 c0                	test   al,al
c00171cf:	0f 84 33 02 00 00    	je     c0017408 <loadACPITables(unsigned char*)+0x24f>
c00171d5:	a0 40 01 03 c0       	mov    al,ds:0xc0030140
c00171da:	84 c0                	test   al,al
c00171dc:	74 75                	je     c0017253 <loadACPITables(unsigned char*)+0x9a>
c00171de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171e2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00171e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171ed:	83 e8 24             	sub    eax,0x24
c00171f0:	c1 e8 03             	shr    eax,0x3
c00171f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00171f7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00171ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017203:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017207:	0f 8d b2 00 00 00    	jge    c00172bf <loadACPITables(unsigned char*)+0x106>
c001720d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017211:	83 c0 24             	add    eax,0x24
c0017214:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017218:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001721c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017220:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017224:	c1 e0 03             	shl    eax,0x3
c0017227:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001722b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001722f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017232:	8b 00                	mov    eax,DWORD PTR [eax]
c0017234:	89 c1                	mov    ecx,eax
c0017236:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c001723b:	8d 50 01             	lea    edx,[eax+0x1]
c001723e:	89 15 2c ff 02 c0    	mov    DWORD PTR ds:0xc002ff2c,edx
c0017244:	89 ca                	mov    edx,ecx
c0017246:	89 14 c5 44 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd00bc],edx
c001724d:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017251:	eb ac                	jmp    c00171ff <loadACPITables(unsigned char*)+0x46>
c0017253:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017257:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001725b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001725f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017262:	83 e8 24             	sub    eax,0x24
c0017265:	c1 e8 02             	shr    eax,0x2
c0017268:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001726c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017274:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017278:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001727c:	7d 41                	jge    c00172bf <loadACPITables(unsigned char*)+0x106>
c001727e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017282:	83 c0 24             	add    eax,0x24
c0017285:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017289:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001728d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017291:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017295:	c1 e0 02             	shl    eax,0x2
c0017298:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001729c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172a2:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c00172a7:	8d 50 01             	lea    edx,[eax+0x1]
c00172aa:	89 15 2c ff 02 c0    	mov    DWORD PTR ds:0xc002ff2c,edx
c00172b0:	89 ca                	mov    edx,ecx
c00172b2:	89 14 c5 44 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd00bc],edx
c00172b9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00172bd:	eb b5                	jmp    c0017274 <loadACPITables(unsigned char*)+0xbb>
c00172bf:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00172c7:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c00172cc:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00172d0:	0f 8d 33 01 00 00    	jge    c0017409 <loadACPITables(unsigned char*)+0x250>
c00172d6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172da:	8b 04 c5 44 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd00bc]
c00172e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00172ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172f1:	25 ff 0f 00 00       	and    eax,0xfff
c00172f6:	89 c6                	mov    esi,eax
c00172f8:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c00172fe:	83 ec 0c             	sub    esp,0xc
c0017301:	6a 01                	push   0x1
c0017303:	e8 f7 9e ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0017308:	83 c4 10             	add    esp,0x10
c001730b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001730f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017315:	83 ec 0c             	sub    esp,0xc
c0017318:	6a 01                	push   0x1
c001731a:	6a 01                	push   0x1
c001731c:	50                   	push   eax
c001731d:	52                   	push   edx
c001731e:	53                   	push   ebx
c001731f:	e8 8e a9 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017324:	83 c4 20             	add    esp,0x20
c0017327:	09 f0                	or     eax,esi
c0017329:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001732d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017331:	c1 e0 03             	shl    eax,0x3
c0017334:	05 40 ff 02 c0       	add    eax,0xc002ff40
c0017339:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001733d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017341:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017345:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001734d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001735d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017361:	89 c6                	mov    esi,eax
c0017363:	89 d7                	mov    edi,edx
c0017365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017367:	89 c8                	mov    eax,ecx
c0017369:	89 fa                	mov    edx,edi
c001736b:	89 f3                	mov    ebx,esi
c001736d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017371:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017375:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001737d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017380:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017384:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017388:	05 00 10 00 00       	add    eax,0x1000
c001738d:	c1 e8 0c             	shr    eax,0xc
c0017390:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017394:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017398:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001739c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a0:	25 ff 0f 00 00       	and    eax,0xfff
c00173a5:	89 c6                	mov    esi,eax
c00173a7:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c00173ad:	83 ec 0c             	sub    esp,0xc
c00173b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00173b4:	e8 46 9e ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00173b9:	83 c4 10             	add    esp,0x10
c00173bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173c6:	83 ec 0c             	sub    esp,0xc
c00173c9:	6a 01                	push   0x1
c00173cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173cf:	50                   	push   eax
c00173d0:	52                   	push   edx
c00173d1:	53                   	push   ebx
c00173d2:	e8 db a8 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173d7:	83 c4 20             	add    esp,0x20
c00173da:	09 f0                	or     eax,esi
c00173dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e4:	83 ec 0c             	sub    esp,0xc
c00173e7:	50                   	push   eax
c00173e8:	e8 58 a2 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173f8:	89 14 c5 44 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd00bc],edx
c00173ff:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017403:	e9 bf fe ff ff       	jmp    c00172c7 <loadACPITables(unsigned char*)+0x10e>
c0017408:	90                   	nop
c0017409:	83 c4 60             	add    esp,0x60
c001740c:	5b                   	pop    ebx
c001740d:	5e                   	pop    esi
c001740e:	5f                   	pop    edi
c001740f:	c3                   	ret    

c0017410 <findRSDT(unsigned char*)>:
c0017410:	57                   	push   edi
c0017411:	56                   	push   esi
c0017412:	53                   	push   ebx
c0017413:	83 ec 50             	sub    esp,0x50
c0017416:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001741b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017421:	83 e0 04             	and    eax,0x4
c0017424:	84 c0                	test   al,al
c0017426:	75 0a                	jne    c0017432 <findRSDT(unsigned char*)+0x22>
c0017428:	b8 00 00 00 00       	mov    eax,0x0
c001742d:	e9 21 01 00 00       	jmp    c0017553 <findRSDT(unsigned char*)+0x143>
c0017432:	89 e0                	mov    eax,esp
c0017434:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017438:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001743c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017440:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017448:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001744c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017458:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001745c:	89 c6                	mov    esi,eax
c001745e:	89 d7                	mov    edi,edx
c0017460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017462:	89 c8                	mov    eax,ecx
c0017464:	89 fa                	mov    edx,edi
c0017466:	89 f3                	mov    ebx,esi
c0017468:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001746c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017470:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017474:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017478:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001747c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017484:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017488:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001748c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017498:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001749c:	25 ff 0f 00 00       	and    eax,0xfff
c00174a1:	89 c6                	mov    esi,eax
c00174a3:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c00174a9:	83 ec 0c             	sub    esp,0xc
c00174ac:	6a 02                	push   0x2
c00174ae:	e8 4c 9d ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174ba:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174c0:	83 ec 0c             	sub    esp,0xc
c00174c3:	6a 01                	push   0x1
c00174c5:	6a 02                	push   0x2
c00174c7:	50                   	push   eax
c00174c8:	52                   	push   edx
c00174c9:	53                   	push   ebx
c00174ca:	e8 e3 a7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174cf:	83 c4 20             	add    esp,0x20
c00174d2:	09 f0                	or     eax,esi
c00174d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174dc:	25 ff 0f 00 00       	and    eax,0xfff
c00174e1:	89 c6                	mov    esi,eax
c00174e3:	8b 1d f0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f0
c00174e9:	83 ec 0c             	sub    esp,0xc
c00174ec:	6a 02                	push   0x2
c00174ee:	e8 0c 9d ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174fa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	6a 01                	push   0x1
c0017505:	6a 02                	push   0x2
c0017507:	50                   	push   eax
c0017508:	52                   	push   edx
c0017509:	53                   	push   ebx
c001750a:	e8 a3 a7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001750f:	83 c4 20             	add    esp,0x20
c0017512:	09 f0                	or     eax,esi
c0017514:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017518:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001751d:	75 11                	jne    c0017530 <findRSDT(unsigned char*)+0x120>
c001751f:	c6 05 40 01 03 c0 00 	mov    BYTE PTR ds:0xc0030140,0x0
c0017526:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001752a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001752e:	eb 1f                	jmp    c001754f <findRSDT(unsigned char*)+0x13f>
c0017530:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017535:	75 11                	jne    c0017548 <findRSDT(unsigned char*)+0x138>
c0017537:	c6 05 40 01 03 c0 01 	mov    BYTE PTR ds:0xc0030140,0x1
c001753e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017542:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017546:	eb 07                	jmp    c001754f <findRSDT(unsigned char*)+0x13f>
c0017548:	b8 00 00 00 00       	mov    eax,0x0
c001754d:	eb 04                	jmp    c0017553 <findRSDT(unsigned char*)+0x143>
c001754f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017553:	83 c4 50             	add    esp,0x50
c0017556:	5b                   	pop    ebx
c0017557:	5e                   	pop    esi
c0017558:	5f                   	pop    edi
c0017559:	c3                   	ret    

c001755a <findDataTable(unsigned char*, char*)>:
c001755a:	83 ec 1c             	sub    esp,0x1c
c001755d:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017562:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017568:	83 e0 04             	and    eax,0x4
c001756b:	84 c0                	test   al,al
c001756d:	75 07                	jne    c0017576 <findDataTable(unsigned char*, char*)+0x1c>
c001756f:	b8 00 00 00 00       	mov    eax,0x0
c0017574:	eb 52                	jmp    c00175c8 <findDataTable(unsigned char*, char*)+0x6e>
c0017576:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001757e:	a1 2c ff 02 c0       	mov    eax,ds:0xc002ff2c
c0017583:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017587:	7d 3a                	jge    c00175c3 <findDataTable(unsigned char*, char*)+0x69>
c0017589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001758d:	c1 e0 03             	shl    eax,0x3
c0017590:	05 40 ff 02 c0       	add    eax,0xc002ff40
c0017595:	83 ec 04             	sub    esp,0x4
c0017598:	6a 04                	push   0x4
c001759a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001759e:	50                   	push   eax
c001759f:	e8 a8 90 fe ff       	call   c000064c <memcmp>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	85 c0                	test   eax,eax
c00175a9:	0f 94 c0             	sete   al
c00175ac:	84 c0                	test   al,al
c00175ae:	74 0d                	je     c00175bd <findDataTable(unsigned char*, char*)+0x63>
c00175b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175b4:	8b 04 c5 44 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd00bc]
c00175bb:	eb 0b                	jmp    c00175c8 <findDataTable(unsigned char*, char*)+0x6e>
c00175bd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175c1:	eb bb                	jmp    c001757e <findDataTable(unsigned char*, char*)+0x24>
c00175c3:	b8 00 00 00 00       	mov    eax,0x0
c00175c8:	83 c4 1c             	add    esp,0x1c
c00175cb:	c3                   	ret    

c00175cc <scanMADT()>:
c00175cc:	53                   	push   ebx
c00175cd:	83 ec 38             	sub    esp,0x38
c00175d0:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00175d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175db:	83 e0 04             	and    eax,0x4
c00175de:	84 c0                	test   al,al
c00175e0:	0f 84 4a 04 00 00    	je     c0017a30 <scanMADT()+0x464>
c00175e6:	e8 44 fb ff ff       	call   c001712f <findRSDP()>
c00175eb:	a3 4c 01 03 c0       	mov    ds:0xc003014c,eax
c00175f0:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c00175f5:	85 c0                	test   eax,eax
c00175f7:	75 19                	jne    c0017612 <scanMADT()+0x46>
c00175f9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00175fe:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017604:	83 e2 fb             	and    edx,0xfffffffb
c0017607:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001760d:	e9 22 04 00 00       	jmp    c0017a34 <scanMADT()+0x468>
c0017612:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c0017617:	83 ec 0c             	sub    esp,0xc
c001761a:	50                   	push   eax
c001761b:	e8 f0 fd ff ff       	call   c0017410 <findRSDT(unsigned char*)>
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	a3 48 01 03 c0       	mov    ds:0xc0030148,eax
c0017628:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c001762d:	85 c0                	test   eax,eax
c001762f:	75 19                	jne    c001764a <scanMADT()+0x7e>
c0017631:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017636:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001763c:	83 e2 fb             	and    edx,0xfffffffb
c001763f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017645:	e9 ea 03 00 00       	jmp    c0017a34 <scanMADT()+0x468>
c001764a:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	50                   	push   eax
c0017653:	e8 61 fb ff ff       	call   c00171b9 <loadACPITables(unsigned char*)>
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	68 c8 b0 02 c0       	push   0xc002b0c8
c0017668:	50                   	push   eax
c0017669:	e8 ec fe ff ff       	call   c001755a <findDataTable(unsigned char*, char*)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017675:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001767a:	75 19                	jne    c0017695 <scanMADT()+0xc9>
c001767c:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017681:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017687:	83 e2 fe             	and    edx,0xfffffffe
c001768a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017690:	e9 9f 03 00 00       	jmp    c0017a34 <scanMADT()+0x468>
c0017695:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001769d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176a4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00176a8:	0f 87 86 03 00 00    	ja     c0017a34 <scanMADT()+0x468>
c00176ae:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00176b6:	0f 87 78 03 00 00    	ja     c0017a34 <scanMADT()+0x468>
c00176bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c8:	8d 50 01             	lea    edx,[eax+0x1]
c00176cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176d7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00176db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176df:	8d 50 01             	lea    edx,[eax+0x1]
c00176e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176ee:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00176f2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00176f7:	0f 86 36 03 00 00    	jbe    c0017a33 <scanMADT()+0x467>
c00176fd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017702:	75 57                	jne    c001775b <scanMADT()+0x18f>
c0017704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017708:	8d 50 01             	lea    edx,[eax+0x1]
c001770b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001770f:	8a 15 40 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030340
c0017715:	0f b6 d2             	movzx  edx,dl
c0017718:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001771c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017720:	88 82 80 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc80],al
c0017726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772a:	8d 50 01             	lea    edx,[eax+0x1]
c001772d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017731:	8a 15 40 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030340
c0017737:	8d 4a 01             	lea    ecx,[edx+0x1]
c001773a:	88 0d 40 03 03 c0    	mov    BYTE PTR ds:0xc0030340,cl
c0017740:	0f b6 d2             	movzx  edx,dl
c0017743:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017747:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001774b:	88 82 60 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfca0],al
c0017751:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017756:	e9 c1 02 00 00       	jmp    c0017a1c <scanMADT()+0x450>
c001775b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017760:	0f 85 14 01 00 00    	jne    c001787a <scanMADT()+0x2ae>
c0017766:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776a:	8d 50 01             	lea    edx,[eax+0x1]
c001776d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017771:	8a 15 00 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030200
c0017777:	0f b6 d2             	movzx  edx,dl
c001777a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001777e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017782:	88 82 20 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfde0],al
c0017788:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001778c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017794:	01 d0                	add    eax,edx
c0017796:	83 c0 2c             	add    eax,0x2c
c0017799:	8a 00                	mov    al,BYTE PTR [eax]
c001779b:	0f b6 d0             	movzx  edx,al
c001779e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00177a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177ad:	0f b6 c0             	movzx  eax,al
c00177b0:	c1 e0 08             	shl    eax,0x8
c00177b3:	89 d1                	mov    ecx,edx
c00177b5:	09 c1                	or     ecx,eax
c00177b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177bb:	8d 50 02             	lea    edx,[eax+0x2]
c00177be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177c6:	0f b6 c0             	movzx  eax,al
c00177c9:	c1 e0 10             	shl    eax,0x10
c00177cc:	09 c1                	or     ecx,eax
c00177ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d2:	8d 50 03             	lea    edx,[eax+0x3]
c00177d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177dd:	0f b6 c0             	movzx  eax,al
c00177e0:	c1 e0 18             	shl    eax,0x18
c00177e3:	09 c1                	or     ecx,eax
c00177e5:	89 ca                	mov    edx,ecx
c00177e7:	a0 00 02 03 c0       	mov    al,ds:0xc0030200
c00177ec:	0f b6 c0             	movzx  eax,al
c00177ef:	89 14 85 40 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfdc0],edx
c00177f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017803:	01 d0                	add    eax,edx
c0017805:	83 c0 2c             	add    eax,0x2c
c0017808:	8a 00                	mov    al,BYTE PTR [eax]
c001780a:	0f b6 d0             	movzx  edx,al
c001780d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017811:	8d 48 01             	lea    ecx,[eax+0x1]
c0017814:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017818:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001781c:	0f b6 c0             	movzx  eax,al
c001781f:	c1 e0 08             	shl    eax,0x8
c0017822:	89 d1                	mov    ecx,edx
c0017824:	09 c1                	or     ecx,eax
c0017826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782a:	8d 50 02             	lea    edx,[eax+0x2]
c001782d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017831:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017835:	0f b6 c0             	movzx  eax,al
c0017838:	c1 e0 10             	shl    eax,0x10
c001783b:	09 c1                	or     ecx,eax
c001783d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017841:	8d 50 03             	lea    edx,[eax+0x3]
c0017844:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017848:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001784c:	0f b6 c0             	movzx  eax,al
c001784f:	c1 e0 18             	shl    eax,0x18
c0017852:	09 c1                	or     ecx,eax
c0017854:	89 ca                	mov    edx,ecx
c0017856:	a0 00 02 03 c0       	mov    al,ds:0xc0030200
c001785b:	0f b6 c0             	movzx  eax,al
c001785e:	89 14 85 c0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd40],edx
c0017865:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001786a:	a0 00 02 03 c0       	mov    al,ds:0xc0030200
c001786f:	40                   	inc    eax
c0017870:	a2 00 02 03 c0       	mov    ds:0xc0030200,al
c0017875:	e9 a2 01 00 00       	jmp    c0017a1c <scanMADT()+0x450>
c001787a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001787f:	0f 85 e9 00 00 00    	jne    c001796e <scanMADT()+0x3a2>
c0017885:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017889:	8d 50 01             	lea    edx,[eax+0x1]
c001788c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017890:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017894:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017898:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001789c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a0:	8d 50 01             	lea    edx,[eax+0x1]
c00178a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178ab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178af:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00178b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178bb:	01 d0                	add    eax,edx
c00178bd:	83 c0 2c             	add    eax,0x2c
c00178c0:	8a 00                	mov    al,BYTE PTR [eax]
c00178c2:	0f b6 d0             	movzx  edx,al
c00178c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00178cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178d4:	0f b6 c0             	movzx  eax,al
c00178d7:	c1 e0 08             	shl    eax,0x8
c00178da:	89 d1                	mov    ecx,edx
c00178dc:	09 c1                	or     ecx,eax
c00178de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e2:	8d 50 02             	lea    edx,[eax+0x2]
c00178e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178ed:	0f b6 c0             	movzx  eax,al
c00178f0:	c1 e0 10             	shl    eax,0x10
c00178f3:	09 c1                	or     ecx,eax
c00178f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f9:	8d 50 03             	lea    edx,[eax+0x3]
c00178fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017900:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017904:	0f b6 c0             	movzx  eax,al
c0017907:	c1 e0 18             	shl    eax,0x18
c001790a:	09 c8                	or     eax,ecx
c001790c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017910:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017919:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791d:	01 d0                	add    eax,edx
c001791f:	83 c0 2c             	add    eax,0x2c
c0017922:	8a 00                	mov    al,BYTE PTR [eax]
c0017924:	0f b6 c0             	movzx  eax,al
c0017927:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001792b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001792e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017932:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017936:	0f b6 d2             	movzx  edx,dl
c0017939:	c1 e2 08             	shl    edx,0x8
c001793c:	09 d0                	or     eax,edx
c001793e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017943:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017948:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001794d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017951:	88 90 e0 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd3520],dl
c0017957:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001795c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017961:	66 89 84 12 e0 01 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfe20],ax
c0017969:	e9 ae 00 00 00       	jmp    c0017a1c <scanMADT()+0x450>
c001796e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017973:	0f 85 97 00 00 00    	jne    c0017a10 <scanMADT()+0x444>
c0017979:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797d:	8d 50 01             	lea    edx,[eax+0x1]
c0017980:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017984:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017988:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001798c:	0f b6 c0             	movzx  eax,al
c001798f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017993:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017997:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001799b:	01 d0                	add    eax,edx
c001799d:	83 c0 2c             	add    eax,0x2c
c00179a0:	8a 00                	mov    al,BYTE PTR [eax]
c00179a2:	0f b6 d0             	movzx  edx,al
c00179a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00179ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179b4:	0f b6 c0             	movzx  eax,al
c00179b7:	c1 e0 08             	shl    eax,0x8
c00179ba:	09 d0                	or     eax,edx
c00179bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179c0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c9:	8d 50 01             	lea    edx,[eax+0x1]
c00179cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d8:	0f b6 c0             	movzx  eax,al
c00179db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e3:	c1 e0 08             	shl    eax,0x8
c00179e6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00179ea:	89 c1                	mov    ecx,eax
c00179ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f0:	c1 e0 18             	shl    eax,0x18
c00179f3:	89 c3                	mov    ebx,eax
c00179f5:	a1 50 01 03 c0       	mov    eax,ds:0xc0030150
c00179fa:	8d 50 01             	lea    edx,[eax+0x1]
c00179fd:	89 15 50 01 03 c0    	mov    DWORD PTR ds:0xc0030150,edx
c0017a03:	09 d9                	or     ecx,ebx
c0017a05:	89 ca                	mov    edx,ecx
c0017a07:	89 14 85 60 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfea0],edx
c0017a0e:	eb 0c                	jmp    c0017a1c <scanMADT()+0x450>
c0017a10:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a15:	75 05                	jne    c0017a1c <scanMADT()+0x450>
c0017a17:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a1c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a25:	01 d0                	add    eax,edx
c0017a27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a2b:	e9 6d fc ff ff       	jmp    c001769d <scanMADT()+0xd1>
c0017a30:	90                   	nop
c0017a31:	eb 01                	jmp    c0017a34 <scanMADT()+0x468>
c0017a33:	90                   	nop
c0017a34:	83 c4 38             	add    esp,0x38
c0017a37:	5b                   	pop    ebx
c0017a38:	c3                   	ret    
c0017a39:	90                   	nop

c0017a3a <ACPI::ACPI()>:
c0017a3a:	83 ec 0c             	sub    esp,0xc
c0017a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a41:	83 ec 08             	sub    esp,0x8
c0017a44:	68 cd b0 02 c0       	push   0xc002b0cd
c0017a49:	50                   	push   eax
c0017a4a:	e8 57 c2 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c0017a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5b:	89 10                	mov    DWORD PTR [eax],edx
c0017a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a61:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a7a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017a84:	e8 43 fb ff ff       	call   c00175cc <scanMADT()>
c0017a89:	90                   	nop
c0017a8a:	83 c4 0c             	add    esp,0xc
c0017a8d:	c3                   	ret    

c0017a8e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017a8e:	83 ec 2c             	sub    esp,0x2c
c0017a91:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017a95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a99:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a9d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017aa1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017aa6:	88 d0                	mov    al,dl
c0017aa8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017aac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ab1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ab9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017abd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ac3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017ac7:	0f 8d 97 00 00 00    	jge    c0017b64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017acd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ad1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ad5:	83 c2 2a             	add    edx,0x2a
c0017ad8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017adc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017ae1:	75 78                	jne    c0017b5b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ae3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017aeb:	83 c2 2a             	add    edx,0x2a
c0017aee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017af2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017af6:	75 63                	jne    c0017b5b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017af8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017afd:	74 3a                	je     c0017b39 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017aff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b07:	83 c2 2a             	add    edx,0x2a
c0017b0a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b15:	39 c2                	cmp    edx,eax
c0017b17:	74 10                	je     c0017b29 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b19:	83 ec 0c             	sub    esp,0xc
c0017b1c:	68 48 b0 02 c0       	push   0xc002b048
c0017b21:	e8 af 22 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0017b26:	83 c4 10             	add    esp,0x10
c0017b29:	83 ec 0c             	sub    esp,0xc
c0017b2c:	68 d2 b0 02 c0       	push   0xc002b0d2
c0017b31:	e8 9f 22 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b45:	83 c2 2a             	add    edx,0x2a
c0017b48:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017b4c:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b4e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017b51:	89 01                	mov    DWORD PTR [ecx],eax
c0017b53:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017b56:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b5b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017b5f:	e9 55 ff ff ff       	jmp    c0017ab9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017b64:	90                   	nop
c0017b65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b69:	83 c4 2c             	add    esp,0x2c
c0017b6c:	c2 04 00             	ret    0x4
c0017b6f:	90                   	nop

c0017b70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017b70:	83 ec 1c             	sub    esp,0x1c
c0017b73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b7f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017b84:	88 c8                	mov    al,cl
c0017b86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017b8a:	88 d0                	mov    al,dl
c0017b8c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b94:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b9e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ba1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ba5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bb7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017bba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bbe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bc7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bcd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017bd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd8:	83 c2 2a             	add    edx,0x2a
c0017bdb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bed:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017bf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017bf4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c02:	8d 50 01             	lea    edx,[eax+0x1]
c0017c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c09:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c13:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c19:	3d 00 02 00 00       	cmp    eax,0x200
c0017c1e:	75 10                	jne    c0017c30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	68 e1 b0 02 c0       	push   0xc002b0e1
c0017c28:	e8 a8 21 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	90                   	nop
c0017c31:	83 c4 1c             	add    esp,0x1c
c0017c34:	c3                   	ret    
c0017c35:	90                   	nop

c0017c36 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c36:	b8 00 00 00 00       	mov    eax,0x0
c0017c3b:	c3                   	ret    

c0017c3c <ACPI::detectPCI()>:
c0017c3c:	53                   	push   ebx
c0017c3d:	83 ec 28             	sub    esp,0x28
c0017c40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c45:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017c4a:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017c4f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c55:	83 e0 04             	and    eax,0x4
c0017c58:	84 c0                	test   al,al
c0017c5a:	74 2b                	je     c0017c87 <ACPI::detectPCI()+0x4b>
c0017c5c:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c0017c61:	83 ec 08             	sub    esp,0x8
c0017c64:	68 fe b0 02 c0       	push   0xc002b0fe
c0017c69:	50                   	push   eax
c0017c6a:	e8 eb f8 ff ff       	call   c001755a <findDataTable(unsigned char*, char*)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c76:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c7b:	74 0a                	je     c0017c87 <ACPI::detectPCI()+0x4b>
c0017c7d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c82:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c87:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c93:	8a 00                	mov    al,BYTE PTR [eax]
c0017c95:	3c 01                	cmp    al,0x1
c0017c97:	75 0c                	jne    c0017ca5 <ACPI::detectPCI()+0x69>
c0017c99:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c9e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ca3:	eb 26                	jmp    c0017ccb <ACPI::detectPCI()+0x8f>
c0017ca5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ca9:	8a 00                	mov    al,BYTE PTR [eax]
c0017cab:	3c 02                	cmp    al,0x2
c0017cad:	75 1c                	jne    c0017ccb <ACPI::detectPCI()+0x8f>
c0017caf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cb4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cb9:	74 10                	je     c0017ccb <ACPI::detectPCI()+0x8f>
c0017cbb:	83 ec 0c             	sub    esp,0xc
c0017cbe:	68 78 b0 02 c0       	push   0xc002b078
c0017cc3:	e8 0d 21 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ccf:	83 f0 01             	xor    eax,0x1
c0017cd2:	84 c0                	test   al,al
c0017cd4:	74 3f                	je     c0017d15 <ACPI::detectPCI()+0xd9>
c0017cd6:	e8 75 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017cdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cdf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017ce4:	75 0c                	jne    c0017cf2 <ACPI::detectPCI()+0xb6>
c0017ce6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ceb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cf0:	eb 23                	jmp    c0017d15 <ACPI::detectPCI()+0xd9>
c0017cf2:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017cf7:	75 1c                	jne    c0017d15 <ACPI::detectPCI()+0xd9>
c0017cf9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cfe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d03:	74 10                	je     c0017d15 <ACPI::detectPCI()+0xd9>
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	68 78 b0 02 c0       	push   0xc002b078
c0017d0d:	e8 c3 20 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d1a:	74 7e                	je     c0017d9a <ACPI::detectPCI()+0x15e>
c0017d1c:	83 ec 0c             	sub    esp,0xc
c0017d1f:	68 03 b1 02 c0       	push   0xc002b103
c0017d24:	e8 ca 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d34:	83 ec 0c             	sub    esp,0xc
c0017d37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d3b:	e8 59 78 ff ff       	call   c000f599 <malloc>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	89 c3                	mov    ebx,eax
c0017d45:	83 ec 0c             	sub    esp,0xc
c0017d48:	53                   	push   ebx
c0017d49:	e8 aa a5 00 00       	call   c00222f8 <PCI::PCI()>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017d55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d59:	83 ec 08             	sub    esp,0x8
c0017d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d60:	50                   	push   eax
c0017d61:	e8 3c bd ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0017d66:	83 c4 10             	add    esp,0x10
c0017d69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d6f:	83 c0 08             	add    eax,0x8
c0017d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d74:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d79:	74 07                	je     c0017d82 <ACPI::detectPCI()+0x146>
c0017d7b:	ba 01 00 00 00       	mov    edx,0x1
c0017d80:	eb 05                	jmp    c0017d87 <ACPI::detectPCI()+0x14b>
c0017d82:	ba 02 00 00 00       	mov    edx,0x2
c0017d87:	6a 00                	push   0x0
c0017d89:	6a 00                	push   0x0
c0017d8b:	52                   	push   edx
c0017d8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d90:	ff d0                	call   eax
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	e9 9e 00 00 00       	jmp    c0017e38 <ACPI::detectPCI()+0x1fc>
c0017d9a:	83 ec 0c             	sub    esp,0xc
c0017d9d:	68 1b b1 02 c0       	push   0xc002b11b
c0017da2:	e8 c2 a8 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	83 ec 0c             	sub    esp,0xc
c0017dad:	68 26 b1 02 c0       	push   0xc002b126
c0017db2:	e8 3c 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017db7:	83 c4 10             	add    esp,0x10
c0017dba:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017dc1:	83 ec 0c             	sub    esp,0xc
c0017dc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dc8:	e8 cc 77 ff ff       	call   c000f599 <malloc>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	89 c3                	mov    ebx,eax
c0017dd2:	83 ec 0c             	sub    esp,0xc
c0017dd5:	53                   	push   ebx
c0017dd6:	e8 87 b0 00 00       	call   c0022e62 <IDE::IDE()>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017de2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017de6:	83 ec 08             	sub    esp,0x8
c0017de9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ded:	50                   	push   eax
c0017dee:	e8 af bc ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dfa:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e08:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e15:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e24:	83 c0 08             	add    eax,0x8
c0017e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e29:	6a 00                	push   0x0
c0017e2b:	6a 00                	push   0x0
c0017e2d:	6a 00                	push   0x0
c0017e2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e33:	ff d0                	call   eax
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	90                   	nop
c0017e39:	83 c4 28             	add    esp,0x28
c0017e3c:	5b                   	pop    ebx
c0017e3d:	c3                   	ret    

c0017e3e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e3e:	83 ec 1c             	sub    esp,0x1c
c0017e41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e45:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e4c:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017e51:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e56:	83 ec 08             	sub    esp,0x8
c0017e59:	52                   	push   edx
c0017e5a:	50                   	push   eax
c0017e5b:	e8 50 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017e67:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017e6c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e71:	83 ec 04             	sub    esp,0x4
c0017e74:	6a 01                	push   0x1
c0017e76:	52                   	push   edx
c0017e77:	50                   	push   eax
c0017e78:	e8 65 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	90                   	nop
c0017e81:	83 c4 1c             	add    esp,0x1c
c0017e84:	c3                   	ret    
c0017e85:	90                   	nop

c0017e86 <ACPI::sleep()>:
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	a1 20 ff 02 c0       	mov    eax,ds:0xc002ff20
c0017e8e:	85 c0                	test   eax,eax
c0017e90:	74 07                	je     c0017e99 <ACPI::sleep()+0x13>
c0017e92:	a1 20 ff 02 c0       	mov    eax,ds:0xc002ff20
c0017e97:	ff d0                	call   eax
c0017e99:	90                   	nop
c0017e9a:	83 c4 0c             	add    esp,0xc
c0017e9d:	c3                   	ret    

c0017e9e <ACPI::open(int, int, void*)>:
c0017e9e:	57                   	push   edi
c0017e9f:	56                   	push   esi
c0017ea0:	53                   	push   ebx
c0017ea1:	81 ec 60 01 00 00    	sub    esp,0x160
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017eb1:	e8 86 fd ff ff       	call   c0017c3c <ACPI::detectPCI()>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	68 a0 b0 02 c0       	push   0xc002b0a0
c0017ec1:	e8 2d 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	83 ec 0c             	sub    esp,0xc
c0017ecc:	68 3b b1 02 c0       	push   0xc002b13b
c0017ed1:	e8 52 46 00 00       	call   c001c528 <Thr::loadKernelSymbolTable(char const*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	83 ec 0c             	sub    esp,0xc
c0017edc:	68 59 b1 02 c0       	push   0xc002b159
c0017ee1:	e8 0d 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	83 ec 04             	sub    esp,0x4
c0017eec:	6a 0c                	push   0xc
c0017eee:	68 74 b1 02 c0       	push   0xc002b174
c0017ef3:	68 85 b1 02 c0       	push   0xc002b185
c0017ef8:	e8 94 2c 00 00       	call   c001ab91 <Reg::readIntWithDefault(char*, char*, int)>
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f07:	83 ec 0c             	sub    esp,0xc
c0017f0a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f11:	e8 f3 94 ff ff       	call   c0011409 <Virt::setupPageSwapping(int)>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	83 ec 0c             	sub    esp,0xc
c0017f1c:	68 95 9d 02 c0       	push   0xc0029d95
c0017f21:	e8 cd 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c0017f2f:	83 ec 08             	sub    esp,0x8
c0017f32:	6a 01                	push   0x1
c0017f34:	68 8c b1 02 c0       	push   0xc002b18c
c0017f39:	e8 61 50 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	83 ec 08             	sub    esp,0x8
c0017f44:	53                   	push   ebx
c0017f45:	50                   	push   eax
c0017f46:	e8 7f 52 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017f55:	83 ec 08             	sub    esp,0x8
c0017f58:	6a 12                	push   0x12
c0017f5a:	50                   	push   eax
c0017f5b:	e8 c6 be ff ff       	call   c0013e26 <getDevicesOfType(DeviceType)>
c0017f60:	83 c4 0c             	add    esp,0xc
c0017f63:	83 ec 0c             	sub    esp,0xc
c0017f66:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f6d:	50                   	push   eax
c0017f6e:	e8 81 09 01 00       	call   c00288f4 <LinkedList<Device>::isEmpty()>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	83 f0 01             	xor    eax,0x1
c0017f79:	84 c0                	test   al,al
c0017f7b:	0f 84 43 01 00 00    	je     c00180c4 <ACPI::open(int, int, void*)+0x226>
c0017f81:	83 ec 0c             	sub    esp,0xc
c0017f84:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f8b:	50                   	push   eax
c0017f8c:	e8 7f 09 01 00       	call   c0028910 <LinkedList<Device>::getFirstElement()>
c0017f91:	83 c4 10             	add    esp,0x10
c0017f94:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017f9b:	83 ec 0c             	sub    esp,0xc
c0017f9e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fa5:	50                   	push   eax
c0017fa6:	e8 6d 09 01 00       	call   c0028918 <LinkedList<Device>::removeFirst()>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017fb5:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017fbc:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017fc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fc7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017fcd:	ba 09 00 00 00       	mov    edx,0x9
c0017fd2:	fc                   	cld    
c0017fd3:	89 c7                	mov    edi,eax
c0017fd5:	89 de                	mov    esi,ebx
c0017fd7:	89 d1                	mov    ecx,edx
c0017fd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017fdb:	83 ec 08             	sub    esp,0x8
c0017fde:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017fe2:	50                   	push   eax
c0017fe3:	83 ec 24             	sub    esp,0x24
c0017fe6:	89 e0                	mov    eax,esp
c0017fe8:	89 c3                	mov    ebx,eax
c0017fea:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017fee:	ba 09 00 00 00       	mov    edx,0x9
c0017ff3:	89 df                	mov    edi,ebx
c0017ff5:	89 c6                	mov    esi,eax
c0017ff7:	89 d1                	mov    ecx,edx
c0017ff9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017ffb:	e8 d6 a7 00 00       	call   c00227d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018000:	83 c4 30             	add    esp,0x30
c0018003:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001800a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018012:	0f 84 4b ff ff ff    	je     c0017f63 <ACPI::open(int, int, void*)+0xc5>
c0018018:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018023:	83 ec 0c             	sub    esp,0xc
c0018026:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001802d:	e8 67 75 ff ff       	call   c000f599 <malloc>
c0018032:	83 c4 10             	add    esp,0x10
c0018035:	89 c3                	mov    ebx,eax
c0018037:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001803c:	83 ec 04             	sub    esp,0x4
c001803f:	50                   	push   eax
c0018040:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018047:	53                   	push   ebx
c0018048:	e8 7b ab ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018057:	83 ec 0c             	sub    esp,0xc
c001805a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018061:	e8 34 ae ff ff       	call   c0012e9a <File::exists()>
c0018066:	83 c4 10             	add    esp,0x10
c0018069:	84 c0                	test   al,al
c001806b:	74 27                	je     c0018094 <ACPI::open(int, int, void*)+0x1f6>
c001806d:	83 ec 08             	sub    esp,0x8
c0018070:	6a 01                	push   0x1
c0018072:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018079:	e8 21 4f 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	83 ec 08             	sub    esp,0x8
c0018084:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001808b:	50                   	push   eax
c001808c:	e8 39 51 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001809c:	0f 84 c1 fe ff ff    	je     c0017f63 <ACPI::open(int, int, void*)+0xc5>
c00180a2:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00180a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ab:	83 c0 08             	add    eax,0x8
c00180ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180ba:	ff d0                	call   eax
c00180bc:	83 c4 10             	add    esp,0x10
c00180bf:	e9 9f fe ff ff       	jmp    c0017f63 <ACPI::open(int, int, void*)+0xc5>
c00180c4:	83 ec 0c             	sub    esp,0xc
c00180c7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180ce:	50                   	push   eax
c00180cf:	e8 1e 08 01 00       	call   c00288f2 <LinkedList<Device>::~LinkedList()>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c00180dd:	83 ec 08             	sub    esp,0x8
c00180e0:	6a 01                	push   0x1
c00180e2:	68 a7 b1 02 c0       	push   0xc002b1a7
c00180e7:	e8 b3 4e 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c00180ec:	83 c4 10             	add    esp,0x10
c00180ef:	83 ec 08             	sub    esp,0x8
c00180f2:	53                   	push   ebx
c00180f3:	50                   	push   eax
c00180f4:	e8 d1 50 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c00180f9:	83 c4 10             	add    esp,0x10
c00180fc:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c0018102:	83 ec 08             	sub    esp,0x8
c0018105:	6a 01                	push   0x1
c0018107:	68 c4 b1 02 c0       	push   0xc002b1c4
c001810c:	e8 8e 4e 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c0018111:	83 c4 10             	add    esp,0x10
c0018114:	83 ec 08             	sub    esp,0x8
c0018117:	53                   	push   ebx
c0018118:	50                   	push   eax
c0018119:	e8 ac 50 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0018126:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001812c:	83 e0 04             	and    eax,0x4
c001812f:	84 c0                	test   al,al
c0018131:	0f 84 0d 01 00 00    	je     c0018244 <ACPI::open(int, int, void*)+0x3a6>
c0018137:	83 ec 0c             	sub    esp,0xc
c001813a:	68 e1 b1 02 c0       	push   0xc002b1e1
c001813f:	e8 af 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018144:	83 c4 10             	add    esp,0x10
c0018147:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018152:	83 ec 0c             	sub    esp,0xc
c0018155:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001815c:	e8 38 74 ff ff       	call   c000f599 <malloc>
c0018161:	83 c4 10             	add    esp,0x10
c0018164:	89 c3                	mov    ebx,eax
c0018166:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001816b:	83 ec 04             	sub    esp,0x4
c001816e:	50                   	push   eax
c001816f:	68 fe b1 02 c0       	push   0xc002b1fe
c0018174:	53                   	push   ebx
c0018175:	e8 4e aa ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001817a:	83 c4 10             	add    esp,0x10
c001817d:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018184:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001818c:	74 1a                	je     c00181a8 <ACPI::open(int, int, void*)+0x30a>
c001818e:	83 ec 0c             	sub    esp,0xc
c0018191:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018198:	e8 fd ac ff ff       	call   c0012e9a <File::exists()>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	84 c0                	test   al,al
c00181a2:	74 04                	je     c00181a8 <ACPI::open(int, int, void*)+0x30a>
c00181a4:	b0 01                	mov    al,0x1
c00181a6:	eb 02                	jmp    c00181aa <ACPI::open(int, int, void*)+0x30c>
c00181a8:	b0 00                	mov    al,0x0
c00181aa:	84 c0                	test   al,al
c00181ac:	74 25                	je     c00181d3 <ACPI::open(int, int, void*)+0x335>
c00181ae:	83 ec 08             	sub    esp,0x8
c00181b1:	6a 01                	push   0x1
c00181b3:	68 fe b1 02 c0       	push   0xc002b1fe
c00181b8:	e8 e2 4d 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	83 ec 08             	sub    esp,0x8
c00181c3:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00181ca:	50                   	push   eax
c00181cb:	e8 fa 4f 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181db:	74 27                	je     c0018204 <ACPI::open(int, int, void*)+0x366>
c00181dd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181e5:	74 1d                	je     c0018204 <ACPI::open(int, int, void*)+0x366>
c00181e7:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00181ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00181f0:	83 c0 08             	add    eax,0x8
c00181f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00181f5:	83 ec 0c             	sub    esp,0xc
c00181f8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181ff:	ff d0                	call   eax
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c0018209:	83 ec 08             	sub    esp,0x8
c001820c:	68 1b b2 02 c0       	push   0xc002b21b
c0018211:	50                   	push   eax
c0018212:	e8 43 f3 ff ff       	call   c001755a <findDataTable(unsigned char*, char*)>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018221:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018229:	74 19                	je     c0018244 <ACPI::open(int, int, void*)+0x3a6>
c001822b:	83 ec 08             	sub    esp,0x8
c001822e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018235:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001823c:	e8 fd fb ff ff       	call   c0017e3e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	b8 00 00 00 00       	mov    eax,0x0
c0018249:	81 c4 60 01 00 00    	add    esp,0x160
c001824f:	5b                   	pop    ebx
c0018250:	5e                   	pop    esi
c0018251:	5f                   	pop    edi
c0018252:	c3                   	ret    
c0018253:	90                   	nop

c0018254 <CPU::close(int, int, void*)>:
c0018254:	31 c0                	xor    eax,eax
c0018256:	c3                   	ret    
c0018257:	90                   	nop

c0018258 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018258:	55                   	push   ebp
c0018259:	57                   	push   edi
c001825a:	56                   	push   esi
c001825b:	53                   	push   ebx
c001825c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018260:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018264:	89 ce                	mov    esi,ecx
c0018266:	89 d5                	mov    ebp,edx
c0018268:	80 f9 04             	cmp    cl,0x4
c001826b:	75 28                	jne    c0018295 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001826d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018270:	3c 03                	cmp    al,0x3
c0018272:	0f 86 63 01 00 00    	jbe    c00183db <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018278:	80 fa 03             	cmp    dl,0x3
c001827b:	0f 84 5a 01 00 00    	je     c00183db <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018281:	8d 7a f2             	lea    edi,[edx-0xe]
c0018284:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c0018289:	89 fb                	mov    ebx,edi
c001828b:	80 fb 01             	cmp    bl,0x1
c001828e:	77 4e                	ja     c00182de <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018290:	e9 52 01 00 00       	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018295:	80 f9 05             	cmp    cl,0x5
c0018298:	75 4d                	jne    c00182e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001829a:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c001829f:	80 fa 03             	cmp    dl,0x3
c00182a2:	0f 86 3f 01 00 00    	jbe    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a8:	8d 7a fa             	lea    edi,[edx-0x6]
c00182ab:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c00182b0:	89 fb                	mov    ebx,edi
c00182b2:	80 fb 01             	cmp    bl,0x1
c00182b5:	0f 86 2c 01 00 00    	jbe    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bb:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00182c0:	80 fa 08             	cmp    dl,0x8
c00182c3:	0f 84 1e 01 00 00    	je     c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c9:	89 d7                	mov    edi,edx
c00182cb:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00182d0:	83 e7 fb             	and    edi,0xfffffffb
c00182d3:	89 fb                	mov    ebx,edi
c00182d5:	80 fb 09             	cmp    bl,0x9
c00182d8:	0f 84 09 01 00 00    	je     c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182de:	31 c0                	xor    eax,eax
c00182e0:	89 eb                	mov    ebx,ebp
c00182e2:	0f b6 fb             	movzx  edi,bl
c00182e5:	eb 30                	jmp    c0018317 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00182e7:	31 c0                	xor    eax,eax
c00182e9:	80 f9 06             	cmp    cl,0x6
c00182ec:	75 f2                	jne    c00182e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182ee:	80 fa 0a             	cmp    dl,0xa
c00182f1:	77 ed                	ja     c00182e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182f3:	bf de 05 00 00       	mov    edi,0x5de
c00182f8:	0f a3 d7             	bt     edi,edx
c00182fb:	73 e3                	jae    c00182e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182fd:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018302:	e9 e0 00 00 00       	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018307:	39 c7                	cmp    edi,eax
c0018309:	0f 84 d3 00 00 00    	je     c00183e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001830f:	40                   	inc    eax
c0018310:	3d d0 00 00 00       	cmp    eax,0xd0
c0018315:	74 09                	je     c0018320 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018317:	89 f3                	mov    ebx,esi
c0018319:	80 fb 0f             	cmp    bl,0xf
c001831c:	75 f1                	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001831e:	eb e7                	jmp    c0018307 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018320:	80 f9 10             	cmp    cl,0x10
c0018323:	75 14                	jne    c0018339 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018325:	8d 42 fc             	lea    eax,[edx-0x4]
c0018328:	83 e0 fb             	and    eax,0xfffffffb
c001832b:	3c 02                	cmp    al,0x2
c001832d:	76 34                	jbe    c0018363 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001832f:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018334:	80 fa 02             	cmp    dl,0x2
c0018337:	eb 24                	jmp    c001835d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018339:	80 f9 11             	cmp    cl,0x11
c001833c:	75 13                	jne    c0018351 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001833e:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018343:	80 fa 03             	cmp    dl,0x3
c0018346:	0f 85 9b 00 00 00    	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001834c:	e9 91 00 00 00       	jmp    c00183e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018351:	80 f9 12             	cmp    cl,0x12
c0018354:	75 14                	jne    c001836a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018356:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c001835b:	fe ca                	dec    dl
c001835d:	0f 85 84 00 00 00    	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018363:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018368:	eb 7d                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836a:	80 f9 14             	cmp    cl,0x14
c001836d:	75 12                	jne    c0018381 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001836f:	4a                   	dec    edx
c0018370:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018375:	80 fa 01             	cmp    dl,0x1
c0018378:	77 6d                	ja     c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001837a:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001837f:	eb 66                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018381:	80 f9 15             	cmp    cl,0x15
c0018384:	75 31                	jne    c00183b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018386:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001838b:	80 fa 01             	cmp    dl,0x1
c001838e:	74 57                	je     c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018390:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018395:	80 fa 13             	cmp    dl,0x13
c0018398:	76 0c                	jbe    c00183a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001839a:	80 fa 30             	cmp    dl,0x30
c001839d:	75 48                	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839f:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00183a4:	eb 41                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183a6:	b9 04 00 09 00       	mov    ecx,0x90004
c00183ab:	0f a3 d1             	bt     ecx,edx
c00183ae:	73 37                	jae    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b0:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00183b5:	eb 30                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b7:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c00183bc:	80 f9 16             	cmp    cl,0x16
c00183bf:	75 26                	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c1:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00183c6:	84 d2                	test   dl,dl
c00183c8:	74 1d                	je     c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ca:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c00183cf:	80 fa 30             	cmp    dl,0x30
c00183d2:	75 13                	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d4:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c00183d9:	eb 0c                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183db:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00183e0:	eb 05                	jmp    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e2:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00183e7:	5b                   	pop    ebx
c00183e8:	5e                   	pop    esi
c00183e9:	5f                   	pop    edi
c00183ea:	5d                   	pop    ebp
c00183eb:	c3                   	ret    

c00183ec <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00183ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183f4:	80 f9 04             	cmp    cl,0x4
c00183f7:	75 6b                	jne    c0018464 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00183f9:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c00183fe:	80 fa 01             	cmp    dl,0x1
c0018401:	0f 86 92 02 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018407:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c001840c:	80 fa 02             	cmp    dl,0x2
c001840f:	0f 84 84 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018415:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c001841a:	80 fa 03             	cmp    dl,0x3
c001841d:	0f 84 76 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018423:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c0018428:	80 fa 04             	cmp    dl,0x4
c001842b:	0f 84 68 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018431:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c0018436:	80 fa 05             	cmp    dl,0x5
c0018439:	0f 84 5a 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001843f:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018444:	80 fa 07             	cmp    dl,0x7
c0018447:	0f 84 4c 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001844d:	83 ea 08             	sub    edx,0x8
c0018450:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018455:	80 fa 01             	cmp    dl,0x1
c0018458:	0f 87 3b 02 00 00    	ja     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845e:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c0018463:	c3                   	ret    
c0018464:	80 f9 05             	cmp    cl,0x5
c0018467:	75 45                	jne    c00184ae <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018469:	8d 4a ff             	lea    ecx,[edx-0x1]
c001846c:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018471:	80 f9 02             	cmp    cl,0x2
c0018474:	0f 86 1f 02 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847a:	80 fa 04             	cmp    dl,0x4
c001847d:	0f 84 f3 01 00 00    	je     c0018676 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018483:	80 fa 07             	cmp    dl,0x7
c0018486:	0f 84 0d 02 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848c:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c0018491:	80 fa 08             	cmp    dl,0x8
c0018494:	0f 84 ff 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849a:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c001849f:	80 fa 09             	cmp    dl,0x9
c00184a2:	0f 85 f1 01 00 00    	jne    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a8:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c00184ad:	c3                   	ret    
c00184ae:	80 f9 06             	cmp    cl,0x6
c00184b1:	0f 85 85 01 00 00    	jne    c001863c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00184b7:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c00184bc:	80 fa 01             	cmp    dl,0x1
c00184bf:	0f 84 d4 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c5:	8d 42 fb             	lea    eax,[edx-0x5]
c00184c8:	3c 01                	cmp    al,0x1
c00184ca:	0f 86 ac 01 00 00    	jbe    c001867c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00184d0:	80 fa 03             	cmp    dl,0x3
c00184d3:	0f 84 a3 01 00 00    	je     c001867c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00184d9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00184dc:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c00184e1:	80 f9 01             	cmp    cl,0x1
c00184e4:	0f 86 af 01 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	80 fa 09             	cmp    dl,0x9
c00184ed:	0f 84 8f 01 00 00    	je     c0018682 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00184f3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00184f6:	80 f9 01             	cmp    cl,0x1
c00184f9:	0f 86 9a 01 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ff:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018504:	80 fa 0d             	cmp    dl,0xd
c0018507:	0f 84 8c 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850d:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018512:	80 fa 0e             	cmp    dl,0xe
c0018515:	0f 84 7e 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851b:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c0018520:	80 fa 0f             	cmp    dl,0xf
c0018523:	0f 84 70 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018529:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c001852e:	80 fa 15             	cmp    dl,0x15
c0018531:	0f 84 62 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018537:	8d 4a ea             	lea    ecx,[edx-0x16]
c001853a:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c001853f:	80 f9 01             	cmp    cl,0x1
c0018542:	0f 86 51 01 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018548:	80 fa 1a             	cmp    dl,0x1a
c001854b:	0f 84 37 01 00 00    	je     c0018688 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018551:	80 fa 1c             	cmp    dl,0x1c
c0018554:	0f 84 34 01 00 00    	je     c001868e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001855a:	80 fa 1d             	cmp    dl,0x1d
c001855d:	0f 84 36 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018563:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018568:	80 fa 25             	cmp    dl,0x25
c001856b:	0f 84 28 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018571:	8d 4a da             	lea    ecx,[edx-0x26]
c0018574:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018579:	80 f9 01             	cmp    cl,0x1
c001857c:	0f 86 17 01 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018582:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018587:	80 fa 2a             	cmp    dl,0x2a
c001858a:	0f 84 09 01 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018590:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018595:	80 fa 2c             	cmp    dl,0x2c
c0018598:	0f 84 fb 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859e:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00185a3:	80 fa 2d             	cmp    dl,0x2d
c00185a6:	0f 84 ed 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ac:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00185b1:	80 fa 2e             	cmp    dl,0x2e
c00185b4:	0f 84 df 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ba:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00185bf:	80 fa 2f             	cmp    dl,0x2f
c00185c2:	0f 84 d1 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00185cb:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00185d0:	80 f9 01             	cmp    cl,0x1
c00185d3:	0f 86 c0 00 00 00    	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d9:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c00185de:	80 fa 37             	cmp    dl,0x37
c00185e1:	0f 84 b2 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e7:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00185ec:	80 fa 3a             	cmp    dl,0x3a
c00185ef:	0f 84 a4 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f5:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00185fa:	80 fa 3c             	cmp    dl,0x3c
c00185fd:	0f 84 96 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018603:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018608:	80 fa 3d             	cmp    dl,0x3d
c001860b:	0f 84 88 00 00 00    	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018611:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018616:	80 fa 3e             	cmp    dl,0x3e
c0018619:	74 7e                	je     c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861b:	8d 42 bb             	lea    eax,[edx-0x45]
c001861e:	3c 01                	cmp    al,0x1
c0018620:	76 72                	jbe    c0018694 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018622:	80 fa 3f             	cmp    dl,0x3f
c0018625:	74 6d                	je     c0018694 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018627:	80 fa 4a             	cmp    dl,0x4a
c001862a:	74 0a                	je     c0018636 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001862c:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018631:	80 fa 4d             	cmp    dl,0x4d
c0018634:	75 63                	jne    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018636:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c001863b:	c3                   	ret    
c001863c:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c0018641:	80 f9 0b             	cmp    cl,0xb
c0018644:	75 0a                	jne    c0018650 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018646:	fe ca                	dec    dl
c0018648:	75 4f                	jne    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864a:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001864f:	c3                   	ret    
c0018650:	80 f9 0f             	cmp    cl,0xf
c0018653:	75 44                	jne    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018655:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001865a:	80 fa 02             	cmp    dl,0x2
c001865d:	76 3a                	jbe    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018662:	3c 01                	cmp    al,0x1
c0018664:	76 0a                	jbe    c0018670 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018666:	b8 a1 b3 02 c0       	mov    eax,0xc002b3a1
c001866b:	80 fa 06             	cmp    dl,0x6
c001866e:	75 29                	jne    c0018699 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018670:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c0018675:	c3                   	ret    
c0018676:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c001867b:	c3                   	ret    
c001867c:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018681:	c3                   	ret    
c0018682:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018687:	c3                   	ret    
c0018688:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c001868d:	c3                   	ret    
c001868e:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018693:	c3                   	ret    
c0018694:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018699:	c3                   	ret    

c001869a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001869a:	60                   	pusha  
c001869b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001869f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186a7:	9c                   	pushf  
c00186a8:	fa                   	cli    
c00186a9:	0f 09                	wbinvd 
c00186ab:	0f 30                	wrmsr  
c00186ad:	9d                   	popf   
c00186ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186b2:	89 02                	mov    DWORD PTR [edx],eax
c00186b4:	61                   	popa   
c00186b5:	c3                   	ret    

c00186b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00186b6:	60                   	pusha  
c00186b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186bb:	9c                   	pushf  
c00186bc:	fa                   	cli    
c00186bd:	0f 09                	wbinvd 
c00186bf:	31 c0                	xor    eax,eax
c00186c1:	31 d2                	xor    edx,edx
c00186c3:	0f 32                	rdmsr  
c00186c5:	9d                   	popf   
c00186c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186ca:	89 02                	mov    DWORD PTR [edx],eax
c00186cc:	61                   	popa   
c00186cd:	c3                   	ret    

c00186ce <CPU::AMD_K6_writeback(int, int, int)>:
c00186ce:	56                   	push   esi
c00186cf:	53                   	push   ebx
c00186d0:	83 ec 10             	sub    esp,0x10
c00186d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00186dc:	75 5d                	jne    c001873b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186de:	83 f8 08             	cmp    eax,0x8
c00186e1:	75 09                	jne    c00186ec <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00186e3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00186e8:	7e 13                	jle    c00186fd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00186ea:	eb 30                	jmp    c001871c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00186ec:	83 f8 06             	cmp    eax,0x6
c00186ef:	7c 4a                	jl     c001873b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186f1:	83 f8 07             	cmp    eax,0x7
c00186f4:	7e 07                	jle    c00186fd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00186f6:	83 f8 09             	cmp    eax,0x9
c00186f9:	74 21                	je     c001871c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00186fb:	eb 3e                	jmp    c001873b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186fd:	89 e6                	mov    esi,esp
c00186ff:	8b 1d c8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8c8
c0018705:	56                   	push   esi
c0018706:	c1 eb 15             	shr    ebx,0x15
c0018709:	68 82 00 00 c0       	push   0xc0000082
c001870e:	83 e3 7e             	and    ebx,0x7e
c0018711:	e8 a0 ff ff ff       	call   c00186b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018716:	56                   	push   esi
c0018717:	6a 00                	push   0x0
c0018719:	53                   	push   ebx
c001871a:	eb 12                	jmp    c001872e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001871c:	89 e3                	mov    ebx,esp
c001871e:	53                   	push   ebx
c001871f:	68 82 00 00 c0       	push   0xc0000082
c0018724:	e8 8d ff ff ff       	call   c00186b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018729:	53                   	push   ebx
c001872a:	6a 00                	push   0x0
c001872c:	6a 00                	push   0x0
c001872e:	68 82 00 00 c0       	push   0xc0000082
c0018733:	e8 62 ff ff ff       	call   c001869a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018738:	83 c4 18             	add    esp,0x18
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	5b                   	pop    ebx
c001873f:	5e                   	pop    esi
c0018740:	c3                   	ret    
c0018741:	90                   	nop

c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018742:	55                   	push   ebp
c0018743:	57                   	push   edi
c0018744:	56                   	push   esi
c0018745:	53                   	push   ebx
c0018746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001874a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001874e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018752:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018756:	39 05 a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,eax
c001875c:	75 23                	jne    c0018781 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001875e:	a1 ac 03 03 c0       	mov    eax,ds:0xc00303ac
c0018763:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018767:	89 06                	mov    DWORD PTR [esi],eax
c0018769:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c001876e:	89 07                	mov    DWORD PTR [edi],eax
c0018770:	a1 a4 03 03 c0       	mov    eax,ds:0xc00303a4
c0018775:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018778:	a1 a0 03 03 c0       	mov    eax,ds:0xc00303a0
c001877d:	89 02                	mov    DWORD PTR [edx],eax
c001877f:	eb 3f                	jmp    c00187c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018781:	31 c9                	xor    ecx,ecx
c0018783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018787:	0f a2                	cpuid  
c0018789:	89 06                	mov    DWORD PTR [esi],eax
c001878b:	89 1f                	mov    DWORD PTR [edi],ebx
c001878d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018791:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018794:	89 10                	mov    DWORD PTR [eax],edx
c0018796:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001879a:	a3 a0 cd 02 c0       	mov    ds:0xc002cda0,eax
c001879f:	8b 06                	mov    eax,DWORD PTR [esi]
c00187a1:	a3 ac 03 03 c0       	mov    ds:0xc00303ac,eax
c00187a6:	8b 07                	mov    eax,DWORD PTR [edi]
c00187a8:	a3 a8 03 03 c0       	mov    ds:0xc00303a8,eax
c00187ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187b0:	a3 a4 03 03 c0       	mov    ds:0xc00303a4,eax
c00187b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00187bb:	a3 a0 03 03 c0       	mov    ds:0xc00303a0,eax
c00187c0:	5b                   	pop    ebx
c00187c1:	5e                   	pop    esi
c00187c2:	5f                   	pop    edi
c00187c3:	5d                   	pop    ebp
c00187c4:	c3                   	ret    
c00187c5:	90                   	nop

c00187c6 <CPU::cpuidCheckEDX(unsigned int)>:
c00187c6:	83 ec 10             	sub    esp,0x10
c00187c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187cd:	50                   	push   eax
c00187ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187d2:	50                   	push   eax
c00187d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187d7:	50                   	push   eax
c00187d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187dc:	50                   	push   eax
c00187dd:	6a 01                	push   0x1
c00187df:	e8 5e ff ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187e8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00187ec:	0f 95 c0             	setne  al
c00187ef:	83 c4 24             	add    esp,0x24
c00187f2:	c3                   	ret    
c00187f3:	90                   	nop

c00187f4 <CPU::cpuidCheckECX(unsigned int)>:
c00187f4:	83 ec 10             	sub    esp,0x10
c00187f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187fb:	50                   	push   eax
c00187fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018800:	50                   	push   eax
c0018801:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018805:	50                   	push   eax
c0018806:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001880a:	50                   	push   eax
c001880b:	6a 01                	push   0x1
c001880d:	e8 30 ff ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018816:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001881a:	0f 95 c0             	setne  al
c001881d:	83 c4 24             	add    esp,0x24
c0018820:	c3                   	ret    
c0018821:	90                   	nop

c0018822 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018822:	83 ec 10             	sub    esp,0x10
c0018825:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018829:	50                   	push   eax
c001882a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001882e:	50                   	push   eax
c001882f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018833:	50                   	push   eax
c0018834:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018838:	50                   	push   eax
c0018839:	6a 07                	push   0x7
c001883b:	e8 02 ff ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018844:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018848:	0f 95 c0             	setne  al
c001884b:	83 c4 24             	add    esp,0x24
c001884e:	c3                   	ret    
c001884f:	90                   	nop

c0018850 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018850:	83 ec 10             	sub    esp,0x10
c0018853:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018857:	50                   	push   eax
c0018858:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001885c:	50                   	push   eax
c001885d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018861:	50                   	push   eax
c0018862:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018866:	50                   	push   eax
c0018867:	6a 07                	push   0x7
c0018869:	e8 d4 fe ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001886e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018872:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018876:	0f 95 c0             	setne  al
c0018879:	83 c4 24             	add    esp,0x24
c001887c:	c3                   	ret    
c001887d:	90                   	nop

c001887e <CPU::CPU()>:
c001887e:	83 ec 0c             	sub    esp,0xc
c0018881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018885:	83 ec 08             	sub    esp,0x8
c0018888:	68 a1 b3 02 c0       	push   0xc002b3a1
c001888d:	50                   	push   eax
c001888e:	e8 13 b4 ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	ba 78 b4 02 c0       	mov    edx,0xc002b478
c001889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001889f:	89 10                	mov    DWORD PTR [eax],edx
c00188a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188a5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00188af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188b3:	05 78 01 00 00       	add    eax,0x178
c00188b8:	83 ec 0c             	sub    esp,0xc
c00188bb:	50                   	push   eax
c00188bc:	e8 0b 65 ff ff       	call   c000edcc <GDT::GDT()>
c00188c1:	83 c4 10             	add    esp,0x10
c00188c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188c8:	05 7c 09 00 00       	add    eax,0x97c
c00188cd:	83 ec 0c             	sub    esp,0xc
c00188d0:	50                   	push   eax
c00188d1:	e8 46 67 ff ff       	call   c000f01c <IDT::IDT()>
c00188d6:	83 c4 10             	add    esp,0x10
c00188d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188dd:	05 7c 11 00 00       	add    eax,0x117c
c00188e2:	83 ec 0c             	sub    esp,0xc
c00188e5:	50                   	push   eax
c00188e6:	e8 5b 82 ff ff       	call   c0010b46 <TSS::TSS()>
c00188eb:	83 c4 10             	add    esp,0x10
c00188ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188f2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00188f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188fd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018907:	90                   	nop
c0018908:	83 c4 0c             	add    esp,0xc
c001890b:	c3                   	ret    

c001890c <CPU::displayFeatures()>:
c001890c:	c3                   	ret    
c001890d:	90                   	nop

c001890e <CPU::detectFeatures()>:
c001890e:	55                   	push   ebp
c001890f:	57                   	push   edi
c0018910:	56                   	push   esi
c0018911:	53                   	push   ebx
c0018912:	83 ec 50             	sub    esp,0x50
c0018915:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018919:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018923:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001892a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018930:	6a 0d                	push   0xd
c0018932:	6a 00                	push   0x0
c0018934:	55                   	push   ebp
c0018935:	e8 16 7e fe ff       	call   c0000750 <memset>
c001893a:	83 c4 10             	add    esp,0x10
c001893d:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0018942:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018949:	0f 84 22 09 00 00    	je     c0019271 <CPU::detectFeatures()+0x963>
c001894f:	83 ec 0c             	sub    esp,0xc
c0018952:	89 ef                	mov    edi,ebp
c0018954:	6a 10                	push   0x10
c0018956:	e8 6b fe ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c001895b:	83 e0 01             	and    eax,0x1
c001895e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018961:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018967:	83 e0 fd             	and    eax,0xfffffffd
c001896a:	09 d0                	or     eax,edx
c001896c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018972:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018979:	e8 48 fe ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c001897e:	83 e0 01             	and    eax,0x1
c0018981:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018988:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001898e:	83 e0 fb             	and    eax,0xfffffffb
c0018991:	09 d0                	or     eax,edx
c0018993:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018999:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00189a0:	e8 21 fe ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c00189a5:	83 e0 01             	and    eax,0x1
c00189a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00189af:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189b5:	83 e0 f7             	and    eax,0xfffffff7
c00189b8:	09 d0                	or     eax,edx
c00189ba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189c0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00189c7:	e8 fa fd ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c00189cc:	83 e0 01             	and    eax,0x1
c00189cf:	c1 e0 04             	shl    eax,0x4
c00189d2:	88 c2                	mov    dl,al
c00189d4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189da:	83 e0 ef             	and    eax,0xffffffef
c00189dd:	09 d0                	or     eax,edx
c00189df:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189e5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00189ec:	e8 d5 fd ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c00189f1:	83 e0 01             	and    eax,0x1
c00189f4:	c1 e0 05             	shl    eax,0x5
c00189f7:	88 c2                	mov    dl,al
c00189f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189ff:	83 e0 df             	and    eax,0xffffffdf
c0018a02:	09 d0                	or     eax,edx
c0018a04:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a0a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a11:	e8 b0 fd ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c0018a16:	83 e0 01             	and    eax,0x1
c0018a19:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a1c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a22:	83 e0 fd             	and    eax,0xfffffffd
c0018a25:	09 d0                	or     eax,edx
c0018a27:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a2d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a34:	e8 8d fd ff ff       	call   c00187c6 <CPU::cpuidCheckEDX(unsigned int)>
c0018a39:	83 e0 01             	and    eax,0x1
c0018a3c:	c1 e0 06             	shl    eax,0x6
c0018a3f:	88 c2                	mov    dl,al
c0018a41:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a47:	83 e0 bf             	and    eax,0xffffffbf
c0018a4a:	09 d0                	or     eax,edx
c0018a4c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a52:	58                   	pop    eax
c0018a53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a57:	50                   	push   eax
c0018a58:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a5c:	50                   	push   eax
c0018a5d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018a61:	56                   	push   esi
c0018a62:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a66:	50                   	push   eax
c0018a67:	6a 00                	push   0x0
c0018a69:	e8 d4 fc ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a6e:	b8 04 00 00 00       	mov    eax,0x4
c0018a73:	89 c1                	mov    ecx,eax
c0018a75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a77:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018a7d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018a81:	89 c1                	mov    ecx,eax
c0018a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a85:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018a8b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018a8f:	89 c1                	mov    ecx,eax
c0018a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a93:	83 c4 18             	add    esp,0x18
c0018a96:	68 4c b2 02 c0       	push   0xc002b24c
c0018a9b:	55                   	push   ebp
c0018a9c:	e8 f7 7d fe ff       	call   c0000898 <strcmp>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	85 c0                	test   eax,eax
c0018aa6:	75 0f                	jne    c0018ab7 <CPU::detectFeatures()+0x1a9>
c0018aa8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018ab2:	e9 22 02 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018ab7:	50                   	push   eax
c0018ab8:	50                   	push   eax
c0018ab9:	68 59 b2 02 c0       	push   0xc002b259
c0018abe:	55                   	push   ebp
c0018abf:	e8 d4 7d fe ff       	call   c0000898 <strcmp>
c0018ac4:	83 c4 10             	add    esp,0x10
c0018ac7:	85 c0                	test   eax,eax
c0018ac9:	74 dd                	je     c0018aa8 <CPU::detectFeatures()+0x19a>
c0018acb:	50                   	push   eax
c0018acc:	50                   	push   eax
c0018acd:	68 66 b2 02 c0       	push   0xc002b266
c0018ad2:	55                   	push   ebp
c0018ad3:	e8 c0 7d fe ff       	call   c0000898 <strcmp>
c0018ad8:	83 c4 10             	add    esp,0x10
c0018adb:	85 c0                	test   eax,eax
c0018add:	74 2a                	je     c0018b09 <CPU::detectFeatures()+0x1fb>
c0018adf:	50                   	push   eax
c0018ae0:	50                   	push   eax
c0018ae1:	68 73 b2 02 c0       	push   0xc002b273
c0018ae6:	55                   	push   ebp
c0018ae7:	e8 ac 7d fe ff       	call   c0000898 <strcmp>
c0018aec:	83 c4 10             	add    esp,0x10
c0018aef:	85 c0                	test   eax,eax
c0018af1:	74 16                	je     c0018b09 <CPU::detectFeatures()+0x1fb>
c0018af3:	50                   	push   eax
c0018af4:	50                   	push   eax
c0018af5:	68 80 b2 02 c0       	push   0xc002b280
c0018afa:	55                   	push   ebp
c0018afb:	e8 98 7d fe ff       	call   c0000898 <strcmp>
c0018b00:	83 c4 10             	add    esp,0x10
c0018b03:	85 c0                	test   eax,eax
c0018b05:	74 48                	je     c0018b4f <CPU::detectFeatures()+0x241>
c0018b07:	eb 0f                	jmp    c0018b18 <CPU::detectFeatures()+0x20a>
c0018b09:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b13:	e9 c1 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018b18:	50                   	push   eax
c0018b19:	50                   	push   eax
c0018b1a:	68 8d b2 02 c0       	push   0xc002b28d
c0018b1f:	55                   	push   ebp
c0018b20:	e8 73 7d fe ff       	call   c0000898 <strcmp>
c0018b25:	83 c4 10             	add    esp,0x10
c0018b28:	85 c0                	test   eax,eax
c0018b2a:	74 23                	je     c0018b4f <CPU::detectFeatures()+0x241>
c0018b2c:	57                   	push   edi
c0018b2d:	57                   	push   edi
c0018b2e:	68 9a b2 02 c0       	push   0xc002b29a
c0018b33:	55                   	push   ebp
c0018b34:	e8 5f 7d fe ff       	call   c0000898 <strcmp>
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 1e                	jne    c0018b5e <CPU::detectFeatures()+0x250>
c0018b40:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018b4a:	e9 8a 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018b4f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018b59:	e9 7b 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018b5e:	56                   	push   esi
c0018b5f:	56                   	push   esi
c0018b60:	68 a7 b2 02 c0       	push   0xc002b2a7
c0018b65:	55                   	push   ebp
c0018b66:	e8 2d 7d fe ff       	call   c0000898 <strcmp>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	85 c0                	test   eax,eax
c0018b70:	75 0f                	jne    c0018b81 <CPU::detectFeatures()+0x273>
c0018b72:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018b7c:	e9 58 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018b81:	51                   	push   ecx
c0018b82:	51                   	push   ecx
c0018b83:	68 66 b2 02 c0       	push   0xc002b266
c0018b88:	55                   	push   ebp
c0018b89:	e8 0a 7d fe ff       	call   c0000898 <strcmp>
c0018b8e:	83 c4 10             	add    esp,0x10
c0018b91:	85 c0                	test   eax,eax
c0018b93:	75 0f                	jne    c0018ba4 <CPU::detectFeatures()+0x296>
c0018b95:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b9f:	e9 35 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018ba4:	52                   	push   edx
c0018ba5:	52                   	push   edx
c0018ba6:	68 b4 b2 02 c0       	push   0xc002b2b4
c0018bab:	55                   	push   ebp
c0018bac:	e8 e7 7c fe ff       	call   c0000898 <strcmp>
c0018bb1:	83 c4 10             	add    esp,0x10
c0018bb4:	85 c0                	test   eax,eax
c0018bb6:	75 0f                	jne    c0018bc7 <CPU::detectFeatures()+0x2b9>
c0018bb8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018bc2:	e9 12 01 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018bc7:	50                   	push   eax
c0018bc8:	50                   	push   eax
c0018bc9:	68 c1 b2 02 c0       	push   0xc002b2c1
c0018bce:	55                   	push   ebp
c0018bcf:	e8 c4 7c fe ff       	call   c0000898 <strcmp>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	85 c0                	test   eax,eax
c0018bd9:	75 0f                	jne    c0018bea <CPU::detectFeatures()+0x2dc>
c0018bdb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018be5:	e9 ef 00 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018bea:	50                   	push   eax
c0018beb:	50                   	push   eax
c0018bec:	68 ce b2 02 c0       	push   0xc002b2ce
c0018bf1:	55                   	push   ebp
c0018bf2:	e8 a1 7c fe ff       	call   c0000898 <strcmp>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	85 c0                	test   eax,eax
c0018bfc:	75 0f                	jne    c0018c0d <CPU::detectFeatures()+0x2ff>
c0018bfe:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c08:	e9 cc 00 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018c0d:	50                   	push   eax
c0018c0e:	50                   	push   eax
c0018c0f:	68 db b2 02 c0       	push   0xc002b2db
c0018c14:	55                   	push   ebp
c0018c15:	e8 7e 7c fe ff       	call   c0000898 <strcmp>
c0018c1a:	83 c4 10             	add    esp,0x10
c0018c1d:	85 c0                	test   eax,eax
c0018c1f:	75 0f                	jne    c0018c30 <CPU::detectFeatures()+0x322>
c0018c21:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c2b:	e9 a9 00 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018c30:	50                   	push   eax
c0018c31:	50                   	push   eax
c0018c32:	68 e8 b2 02 c0       	push   0xc002b2e8
c0018c37:	55                   	push   ebp
c0018c38:	e8 5b 7c fe ff       	call   c0000898 <strcmp>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	85 c0                	test   eax,eax
c0018c42:	75 0f                	jne    c0018c53 <CPU::detectFeatures()+0x345>
c0018c44:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018c4e:	e9 86 00 00 00       	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018c53:	50                   	push   eax
c0018c54:	50                   	push   eax
c0018c55:	68 f5 b2 02 c0       	push   0xc002b2f5
c0018c5a:	55                   	push   ebp
c0018c5b:	e8 38 7c fe ff       	call   c0000898 <strcmp>
c0018c60:	83 c4 10             	add    esp,0x10
c0018c63:	85 c0                	test   eax,eax
c0018c65:	75 0c                	jne    c0018c73 <CPU::detectFeatures()+0x365>
c0018c67:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018c71:	eb 66                	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018c73:	50                   	push   eax
c0018c74:	50                   	push   eax
c0018c75:	68 02 b3 02 c0       	push   0xc002b302
c0018c7a:	55                   	push   ebp
c0018c7b:	e8 18 7c fe ff       	call   c0000898 <strcmp>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	85 c0                	test   eax,eax
c0018c85:	75 0c                	jne    c0018c93 <CPU::detectFeatures()+0x385>
c0018c87:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018c91:	eb 46                	jmp    c0018cd9 <CPU::detectFeatures()+0x3cb>
c0018c93:	57                   	push   edi
c0018c94:	57                   	push   edi
c0018c95:	68 0f b3 02 c0       	push   0xc002b30f
c0018c9a:	55                   	push   ebp
c0018c9b:	e8 f8 7b fe ff       	call   c0000898 <strcmp>
c0018ca0:	83 c4 10             	add    esp,0x10
c0018ca3:	85 c0                	test   eax,eax
c0018ca5:	74 e0                	je     c0018c87 <CPU::detectFeatures()+0x379>
c0018ca7:	56                   	push   esi
c0018ca8:	56                   	push   esi
c0018ca9:	68 1c b3 02 c0       	push   0xc002b31c
c0018cae:	55                   	push   ebp
c0018caf:	e8 e4 7b fe ff       	call   c0000898 <strcmp>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	85 c0                	test   eax,eax
c0018cb9:	74 cc                	je     c0018c87 <CPU::detectFeatures()+0x379>
c0018cbb:	51                   	push   ecx
c0018cbc:	51                   	push   ecx
c0018cbd:	68 29 b3 02 c0       	push   0xc002b329
c0018cc2:	55                   	push   ebp
c0018cc3:	e8 d0 7b fe ff       	call   c0000898 <strcmp>
c0018cc8:	83 c4 10             	add    esp,0x10
c0018ccb:	85 c0                	test   eax,eax
c0018ccd:	74 b8                	je     c0018c87 <CPU::detectFeatures()+0x379>
c0018ccf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018cd9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018cde:	0f 86 be 00 00 00    	jbe    c0018da2 <CPU::detectFeatures()+0x494>
c0018ce4:	83 ec 0c             	sub    esp,0xc
c0018ce7:	68 80 00 00 00       	push   0x80
c0018cec:	e8 31 fb ff ff       	call   c0018822 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cf1:	83 e0 01             	and    eax,0x1
c0018cf4:	c1 e0 06             	shl    eax,0x6
c0018cf7:	88 c2                	mov    dl,al
c0018cf9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cff:	83 e0 bf             	and    eax,0xffffffbf
c0018d02:	09 d0                	or     eax,edx
c0018d04:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d0a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d11:	e8 0c fb ff ff       	call   c0018822 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d16:	83 e0 01             	and    eax,0x1
c0018d19:	c1 e0 04             	shl    eax,0x4
c0018d1c:	88 c2                	mov    dl,al
c0018d1e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d24:	83 e0 ef             	and    eax,0xffffffef
c0018d27:	09 d0                	or     eax,edx
c0018d29:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d2f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d36:	e8 e7 fa ff ff       	call   c0018822 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d3b:	c1 e0 07             	shl    eax,0x7
c0018d3e:	88 c2                	mov    dl,al
c0018d40:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d46:	83 e0 7f             	and    eax,0x7f
c0018d49:	09 d0                	or     eax,edx
c0018d4b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d51:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d58:	e8 f3 fa ff ff       	call   c0018850 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d5d:	83 e0 01             	and    eax,0x1
c0018d60:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d67:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d6d:	83 e0 f7             	and    eax,0xfffffff7
c0018d70:	09 d0                	or     eax,edx
c0018d72:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d78:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018d7f:	e8 cc fa ff ff       	call   c0018850 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d84:	83 c4 10             	add    esp,0x10
c0018d87:	83 e0 01             	and    eax,0x1
c0018d8a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d91:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d97:	83 e0 fb             	and    eax,0xfffffffb
c0018d9a:	09 d0                	or     eax,edx
c0018d9c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018da2:	83 ec 0c             	sub    esp,0xc
c0018da5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018da9:	50                   	push   eax
c0018daa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018dae:	50                   	push   eax
c0018daf:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018db3:	56                   	push   esi
c0018db4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018db8:	50                   	push   eax
c0018db9:	6a 01                	push   0x1
c0018dbb:	e8 82 f9 ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018dc4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018dca:	88 ca                	mov    dl,cl
c0018dcc:	83 e0 f0             	and    eax,0xfffffff0
c0018dcf:	83 e2 0f             	and    edx,0xf
c0018dd2:	09 d0                	or     eax,edx
c0018dd4:	88 ca                	mov    dl,cl
c0018dd6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018ddc:	c0 ea 04             	shr    dl,0x4
c0018ddf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018de3:	0f b6 c2             	movzx  eax,dl
c0018de6:	83 c4 20             	add    esp,0x20
c0018de9:	c1 e0 06             	shl    eax,0x6
c0018dec:	89 c7                	mov    edi,eax
c0018dee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018df4:	66 25 3f c0          	and    ax,0xc03f
c0018df8:	09 f8                	or     eax,edi
c0018dfa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e01:	89 c8                	mov    eax,ecx
c0018e03:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e0a:	c1 e8 08             	shr    eax,0x8
c0018e0d:	83 e5 3f             	and    ebp,0x3f
c0018e10:	83 e0 0f             	and    eax,0xf
c0018e13:	89 c7                	mov    edi,eax
c0018e15:	c1 e7 06             	shl    edi,0x6
c0018e18:	09 ef                	or     edi,ebp
c0018e1a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e21:	89 fa                	mov    edx,edi
c0018e23:	83 e5 c0             	and    ebp,0xffffffc0
c0018e26:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e2c:	88 c2                	mov    dl,al
c0018e2e:	c0 ea 02             	shr    dl,0x2
c0018e31:	89 d7                	mov    edi,edx
c0018e33:	09 ef                	or     edi,ebp
c0018e35:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e3b:	89 fa                	mov    edx,edi
c0018e3d:	83 e5 cf             	and    ebp,0xffffffcf
c0018e40:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018e46:	89 cf                	mov    edi,ecx
c0018e48:	c1 ef 0c             	shr    edi,0xc
c0018e4b:	83 e7 03             	and    edi,0x3
c0018e4e:	c1 e7 04             	shl    edi,0x4
c0018e51:	09 ef                	or     edi,ebp
c0018e53:	3c 06                	cmp    al,0x6
c0018e55:	89 fa                	mov    edx,edi
c0018e57:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018e5d:	74 04                	je     c0018e63 <CPU::detectFeatures()+0x555>
c0018e5f:	3c 0f                	cmp    al,0xf
c0018e61:	75 5c                	jne    c0018ebf <CPU::detectFeatures()+0x5b1>
c0018e63:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e67:	89 cf                	mov    edi,ecx
c0018e69:	c1 ef 10             	shr    edi,0x10
c0018e6c:	c1 e7 04             	shl    edi,0x4
c0018e6f:	09 fa                	or     edx,edi
c0018e71:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018e77:	0f b6 d2             	movzx  edx,dl
c0018e7a:	66 81 e7 3f c0       	and    di,0xc03f
c0018e7f:	c1 e2 06             	shl    edx,0x6
c0018e82:	09 fa                	or     edx,edi
c0018e84:	3c 0f                	cmp    al,0xf
c0018e86:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018e8d:	75 30                	jne    c0018ebf <CPU::detectFeatures()+0x5b1>
c0018e8f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018e95:	c1 e9 14             	shr    ecx,0x14
c0018e98:	83 e0 3f             	and    eax,0x3f
c0018e9b:	83 c1 0f             	add    ecx,0xf
c0018e9e:	88 ca                	mov    dl,cl
c0018ea0:	c0 e9 02             	shr    cl,0x2
c0018ea3:	c1 e2 06             	shl    edx,0x6
c0018ea6:	09 d0                	or     eax,edx
c0018ea8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018eae:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018eb4:	83 e0 c0             	and    eax,0xffffffc0
c0018eb7:	09 c1                	or     ecx,eax
c0018eb9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018ebf:	83 ec 0c             	sub    esp,0xc
c0018ec2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ec9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ecd:	50                   	push   eax
c0018ece:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ed2:	55                   	push   ebp
c0018ed3:	56                   	push   esi
c0018ed4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018ed8:	57                   	push   edi
c0018ed9:	68 00 00 00 80       	push   0x80000000
c0018ede:	e8 5f f8 ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ee3:	83 c4 20             	add    esp,0x20
c0018ee6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018eee:	76 22                	jbe    c0018f12 <CPU::detectFeatures()+0x604>
c0018ef0:	83 ec 0c             	sub    esp,0xc
c0018ef3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ef7:	50                   	push   eax
c0018ef8:	55                   	push   ebp
c0018ef9:	56                   	push   esi
c0018efa:	57                   	push   edi
c0018efb:	68 01 00 00 80       	push   0x80000001
c0018f00:	e8 3d f8 ff ff       	call   c0018742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f05:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f0f:	83 c4 20             	add    esp,0x20
c0018f12:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f18:	83 f8 01             	cmp    eax,0x1
c0018f1b:	75 6f                	jne    c0018f8c <CPU::detectFeatures()+0x67e>
c0018f1d:	51                   	push   ecx
c0018f1e:	51                   	push   ecx
c0018f1f:	68 35 b3 02 c0       	push   0xc002b335
c0018f24:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f28:	56                   	push   esi
c0018f29:	e8 de 78 fe ff       	call   c000080c <strcpy>
c0018f2e:	5f                   	pop    edi
c0018f2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f35:	5d                   	pop    ebp
c0018f36:	66 c1 e8 06          	shr    ax,0x6
c0018f3a:	0f b6 c0             	movzx  eax,al
c0018f3d:	50                   	push   eax
c0018f3e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f44:	c1 e8 0e             	shr    eax,0xe
c0018f47:	0f b6 c0             	movzx  eax,al
c0018f4a:	50                   	push   eax
c0018f4b:	e8 9c f4 ff ff       	call   c00183ec <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018f50:	5a                   	pop    edx
c0018f51:	59                   	pop    ecx
c0018f52:	50                   	push   eax
c0018f53:	56                   	push   esi
c0018f54:	e8 f3 79 fe ff       	call   c000094c <strcat>
c0018f59:	5f                   	pop    edi
c0018f5a:	5d                   	pop    ebp
c0018f5b:	56                   	push   esi
c0018f5c:	53                   	push   ebx
c0018f5d:	e8 36 ad ff ff       	call   c0013c98 <Device::setName(char const*)>
c0018f62:	58                   	pop    eax
c0018f63:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f69:	5a                   	pop    edx
c0018f6a:	68 3c b3 02 c0       	push   0xc002b33c
c0018f6f:	50                   	push   eax
c0018f70:	e8 23 79 fe ff       	call   c0000898 <strcmp>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	85 c0                	test   eax,eax
c0018f7a:	0f 85 71 03 00 00    	jne    c00192f1 <CPU::detectFeatures()+0x9e3>
c0018f80:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018f87:	e9 65 03 00 00       	jmp    c00192f1 <CPU::detectFeatures()+0x9e3>
c0018f8c:	83 f8 02             	cmp    eax,0x2
c0018f8f:	0f 85 b5 00 00 00    	jne    c001904a <CPU::detectFeatures()+0x73c>
c0018f95:	57                   	push   edi
c0018f96:	57                   	push   edi
c0018f97:	68 4e b3 02 c0       	push   0xc002b34e
c0018f9c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fa0:	56                   	push   esi
c0018fa1:	e8 66 78 fe ff       	call   c000080c <strcpy>
c0018fa6:	5d                   	pop    ebp
c0018fa7:	58                   	pop    eax
c0018fa8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fae:	66 c1 e8 06          	shr    ax,0x6
c0018fb2:	0f b6 c0             	movzx  eax,al
c0018fb5:	50                   	push   eax
c0018fb6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fbc:	c1 e8 0e             	shr    eax,0xe
c0018fbf:	0f b6 c0             	movzx  eax,al
c0018fc2:	50                   	push   eax
c0018fc3:	e8 90 f2 ff ff       	call   c0018258 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018fc8:	5a                   	pop    edx
c0018fc9:	59                   	pop    ecx
c0018fca:	50                   	push   eax
c0018fcb:	56                   	push   esi
c0018fcc:	e8 7b 79 fe ff       	call   c000094c <strcat>
c0018fd1:	5f                   	pop    edi
c0018fd2:	5d                   	pop    ebp
c0018fd3:	56                   	push   esi
c0018fd4:	53                   	push   ebx
c0018fd5:	e8 be ac ff ff       	call   c0013c98 <Device::setName(char const*)>
c0018fda:	58                   	pop    eax
c0018fdb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fe1:	5a                   	pop    edx
c0018fe2:	68 53 b3 02 c0       	push   0xc002b353
c0018fe7:	50                   	push   eax
c0018fe8:	e8 ab 78 fe ff       	call   c0000898 <strcmp>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	85 c0                	test   eax,eax
c0018ff2:	75 20                	jne    c0019014 <CPU::detectFeatures()+0x706>
c0018ff4:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c0018ffa:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019000:	a8 01                	test   al,0x1
c0019002:	74 10                	je     c0019014 <CPU::detectFeatures()+0x706>
c0019004:	83 e0 fe             	and    eax,0xfffffffe
c0019007:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001900d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019014:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001901a:	c1 e8 0e             	shr    eax,0xe
c001901d:	3c 05                	cmp    al,0x5
c001901f:	0f 85 cc 02 00 00    	jne    c00192f1 <CPU::detectFeatures()+0x9e3>
c0019025:	56                   	push   esi
c0019026:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001902c:	83 e0 0f             	and    eax,0xf
c001902f:	50                   	push   eax
c0019030:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019036:	66 c1 e8 06          	shr    ax,0x6
c001903a:	0f b6 c0             	movzx  eax,al
c001903d:	50                   	push   eax
c001903e:	6a 05                	push   0x5
c0019040:	e8 89 f6 ff ff       	call   c00186ce <CPU::AMD_K6_writeback(int, int, int)>
c0019045:	e9 1f 02 00 00       	jmp    c0019269 <CPU::detectFeatures()+0x95b>
c001904a:	8d 50 fd             	lea    edx,[eax-0x3]
c001904d:	83 fa 01             	cmp    edx,0x1
c0019050:	76 09                	jbe    c001905b <CPU::detectFeatures()+0x74d>
c0019052:	83 f8 06             	cmp    eax,0x6
c0019055:	0f 85 91 01 00 00    	jne    c00191ec <CPU::detectFeatures()+0x8de>
c001905b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019061:	c1 ea 0e             	shr    edx,0xe
c0019064:	80 fa 05             	cmp    dl,0x5
c0019067:	75 7b                	jne    c00190e4 <CPU::detectFeatures()+0x7d6>
c0019069:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001906f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019074:	66 81 fa 00 01       	cmp    dx,0x100
c0019079:	75 0c                	jne    c0019087 <CPU::detectFeatures()+0x779>
c001907b:	51                   	push   ecx
c001907c:	51                   	push   ecx
c001907d:	68 5a b3 02 c0       	push   0xc002b35a
c0019082:	e9 dc 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019087:	66 81 fa 00 02       	cmp    dx,0x200
c001908c:	75 0c                	jne    c001909a <CPU::detectFeatures()+0x78c>
c001908e:	52                   	push   edx
c001908f:	52                   	push   edx
c0019090:	68 6d b3 02 c0       	push   0xc002b36d
c0019095:	e9 c9 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c001909a:	66 81 fa 40 02       	cmp    dx,0x240
c001909f:	75 0c                	jne    c00190ad <CPU::detectFeatures()+0x79f>
c00190a1:	50                   	push   eax
c00190a2:	50                   	push   eax
c00190a3:	68 7f b3 02 c0       	push   0xc002b37f
c00190a8:	e9 b6 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00190ad:	83 f8 06             	cmp    eax,0x6
c00190b0:	75 0c                	jne    c00190be <CPU::detectFeatures()+0x7b0>
c00190b2:	50                   	push   eax
c00190b3:	50                   	push   eax
c00190b4:	68 91 b3 02 c0       	push   0xc002b391
c00190b9:	e9 a5 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00190be:	83 f8 04             	cmp    eax,0x4
c00190c1:	75 0c                	jne    c00190cf <CPU::detectFeatures()+0x7c1>
c00190c3:	50                   	push   eax
c00190c4:	50                   	push   eax
c00190c5:	68 9d b3 02 c0       	push   0xc002b39d
c00190ca:	e9 94 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00190cf:	83 f8 03             	cmp    eax,0x3
c00190d2:	0f 85 19 02 00 00    	jne    c00192f1 <CPU::detectFeatures()+0x9e3>
c00190d8:	50                   	push   eax
c00190d9:	50                   	push   eax
c00190da:	68 a5 b3 02 c0       	push   0xc002b3a5
c00190df:	e9 7f 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00190e4:	80 fa 06             	cmp    dl,0x6
c00190e7:	0f 85 db 00 00 00    	jne    c00191c8 <CPU::detectFeatures()+0x8ba>
c00190ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190f3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190f8:	66 81 fa 80 01       	cmp    dx,0x180
c00190fd:	75 0c                	jne    c001910b <CPU::detectFeatures()+0x7fd>
c00190ff:	50                   	push   eax
c0019100:	50                   	push   eax
c0019101:	68 b0 b3 02 c0       	push   0xc002b3b0
c0019106:	e9 58 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c001910b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019111:	66 f7 c1 80 ff       	test   cx,0xff80
c0019116:	75 0c                	jne    c0019124 <CPU::detectFeatures()+0x816>
c0019118:	50                   	push   eax
c0019119:	50                   	push   eax
c001911a:	68 c0 b3 02 c0       	push   0xc002b3c0
c001911f:	e9 3f 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019124:	66 81 fa 40 02       	cmp    dx,0x240
c0019129:	75 0c                	jne    c0019137 <CPU::detectFeatures()+0x829>
c001912b:	55                   	push   ebp
c001912c:	55                   	push   ebp
c001912d:	68 c7 b3 02 c0       	push   0xc002b3c7
c0019132:	e9 2c 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019137:	66 81 fa 80 02       	cmp    dx,0x280
c001913c:	75 0c                	jne    c001914a <CPU::detectFeatures()+0x83c>
c001913e:	57                   	push   edi
c001913f:	57                   	push   edi
c0019140:	68 d0 b3 02 c0       	push   0xc002b3d0
c0019145:	e9 19 01 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c001914a:	66 81 fa 40 03       	cmp    dx,0x340
c001914f:	74 ed                	je     c001913e <CPU::detectFeatures()+0x830>
c0019151:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019156:	75 0c                	jne    c0019164 <CPU::detectFeatures()+0x856>
c0019158:	56                   	push   esi
c0019159:	56                   	push   esi
c001915a:	68 d7 b3 02 c0       	push   0xc002b3d7
c001915f:	e9 ff 00 00 00       	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019164:	83 f8 06             	cmp    eax,0x6
c0019167:	0f 84 45 ff ff ff    	je     c00190b2 <CPU::detectFeatures()+0x7a4>
c001916d:	83 f8 04             	cmp    eax,0x4
c0019170:	0f 84 4d ff ff ff    	je     c00190c3 <CPU::detectFeatures()+0x7b5>
c0019176:	83 f8 03             	cmp    eax,0x3
c0019179:	0f 85 72 01 00 00    	jne    c00192f1 <CPU::detectFeatures()+0x9e3>
c001917f:	51                   	push   ecx
c0019180:	51                   	push   ecx
c0019181:	68 e0 b3 02 c0       	push   0xc002b3e0
c0019186:	53                   	push   ebx
c0019187:	e8 0c ab ff ff       	call   c0013c98 <Device::setName(char const*)>
c001918c:	b1 c1                	mov    cl,0xc1
c001918e:	88 c8                	mov    al,cl
c0019190:	e6 22                	out    0x22,al
c0019192:	e4 23                	in     al,0x23
c0019194:	88 c2                	mov    dl,al
c0019196:	88 c8                	mov    al,cl
c0019198:	e6 22                	out    0x22,al
c001919a:	88 d0                	mov    al,dl
c001919c:	83 c8 10             	or     eax,0x10
c001919f:	e6 23                	out    0x23,al
c00191a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00191a8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191ab:	89 d0                	mov    eax,edx
c00191ad:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00191b3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00191b7:	40                   	inc    eax
c00191b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00191be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00191c3:	e9 a1 00 00 00       	jmp    c0019269 <CPU::detectFeatures()+0x95b>
c00191c8:	83 f8 06             	cmp    eax,0x6
c00191cb:	0f 84 e1 fe ff ff    	je     c00190b2 <CPU::detectFeatures()+0x7a4>
c00191d1:	83 f8 04             	cmp    eax,0x4
c00191d4:	0f 84 e9 fe ff ff    	je     c00190c3 <CPU::detectFeatures()+0x7b5>
c00191da:	83 f8 03             	cmp    eax,0x3
c00191dd:	0f 85 0e 01 00 00    	jne    c00192f1 <CPU::detectFeatures()+0x9e3>
c00191e3:	52                   	push   edx
c00191e4:	52                   	push   edx
c00191e5:	68 eb b3 02 c0       	push   0xc002b3eb
c00191ea:	eb 77                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00191ec:	83 f8 07             	cmp    eax,0x7
c00191ef:	75 09                	jne    c00191fa <CPU::detectFeatures()+0x8ec>
c00191f1:	50                   	push   eax
c00191f2:	50                   	push   eax
c00191f3:	68 f5 b3 02 c0       	push   0xc002b3f5
c00191f8:	eb 69                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c00191fa:	83 f8 0a             	cmp    eax,0xa
c00191fd:	75 09                	jne    c0019208 <CPU::detectFeatures()+0x8fa>
c00191ff:	50                   	push   eax
c0019200:	50                   	push   eax
c0019201:	68 00 b4 02 c0       	push   0xc002b400
c0019206:	eb 5b                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019208:	83 f8 0b             	cmp    eax,0xb
c001920b:	75 09                	jne    c0019216 <CPU::detectFeatures()+0x908>
c001920d:	50                   	push   eax
c001920e:	50                   	push   eax
c001920f:	68 08 b4 02 c0       	push   0xc002b408
c0019214:	eb 4d                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019216:	83 f8 08             	cmp    eax,0x8
c0019219:	75 09                	jne    c0019224 <CPU::detectFeatures()+0x916>
c001921b:	50                   	push   eax
c001921c:	50                   	push   eax
c001921d:	68 11 b4 02 c0       	push   0xc002b411
c0019222:	eb 3f                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019224:	83 f8 09             	cmp    eax,0x9
c0019227:	75 09                	jne    c0019232 <CPU::detectFeatures()+0x924>
c0019229:	50                   	push   eax
c001922a:	50                   	push   eax
c001922b:	68 19 b4 02 c0       	push   0xc002b419
c0019230:	eb 31                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019232:	83 f8 05             	cmp    eax,0x5
c0019235:	75 09                	jne    c0019240 <CPU::detectFeatures()+0x932>
c0019237:	50                   	push   eax
c0019238:	50                   	push   eax
c0019239:	68 21 b4 02 c0       	push   0xc002b421
c001923e:	eb 23                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c0019240:	83 f8 0c             	cmp    eax,0xc
c0019243:	75 09                	jne    c001924e <CPU::detectFeatures()+0x940>
c0019245:	55                   	push   ebp
c0019246:	55                   	push   ebp
c0019247:	68 2f b4 02 c0       	push   0xc002b42f
c001924c:	eb 15                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c001924e:	83 f8 0d             	cmp    eax,0xd
c0019251:	75 09                	jne    c001925c <CPU::detectFeatures()+0x94e>
c0019253:	57                   	push   edi
c0019254:	57                   	push   edi
c0019255:	68 3a b4 02 c0       	push   0xc002b43a
c001925a:	eb 07                	jmp    c0019263 <CPU::detectFeatures()+0x955>
c001925c:	56                   	push   esi
c001925d:	56                   	push   esi
c001925e:	68 4e b4 02 c0       	push   0xc002b44e
c0019263:	53                   	push   ebx
c0019264:	e8 2f aa ff ff       	call   c0013c98 <Device::setName(char const*)>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	e9 80 00 00 00       	jmp    c00192f1 <CPU::detectFeatures()+0x9e3>
c0019271:	51                   	push   ecx
c0019272:	51                   	push   ecx
c0019273:	68 9a b2 02 c0       	push   0xc002b29a
c0019278:	55                   	push   ebp
c0019279:	e8 8e 75 fe ff       	call   c000080c <strcpy>
c001927e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019288:	e8 21 70 fe ff       	call   c00002ae <is486>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	85 c0                	test   eax,eax
c0019292:	74 2b                	je     c00192bf <CPU::detectFeatures()+0x9b1>
c0019294:	52                   	push   edx
c0019295:	52                   	push   edx
c0019296:	68 5a b4 02 c0       	push   0xc002b45a
c001929b:	53                   	push   ebx
c001929c:	e8 f7 a9 ff ff       	call   c0013c98 <Device::setName(char const*)>
c00192a1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192a8:	0f 20 c0             	mov    eax,cr0
c00192ab:	83 e0 14             	and    eax,0x14
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	83 f8 04             	cmp    eax,0x4
c00192b4:	75 1f                	jne    c00192d5 <CPU::detectFeatures()+0x9c7>
c00192b6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00192bd:	eb 32                	jmp    c00192f1 <CPU::detectFeatures()+0x9e3>
c00192bf:	50                   	push   eax
c00192c0:	50                   	push   eax
c00192c1:	68 65 b4 02 c0       	push   0xc002b465
c00192c6:	53                   	push   ebx
c00192c7:	e8 cc a9 ff ff       	call   c0013c98 <Device::setName(char const*)>
c00192cc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00192d3:	eb d3                	jmp    c00192a8 <CPU::detectFeatures()+0x99a>
c00192d5:	e8 af 6f fe ff       	call   c0000289 <hasLegacyFPU>
c00192da:	83 e0 01             	and    eax,0x1
c00192dd:	8d 14 00             	lea    edx,[eax+eax*1]
c00192e0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192e6:	83 e0 fd             	and    eax,0xfffffffd
c00192e9:	09 d0                	or     eax,edx
c00192eb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192f1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00192f8:	83 c4 4c             	add    esp,0x4c
c00192fb:	5b                   	pop    ebx
c00192fc:	5e                   	pop    esi
c00192fd:	5f                   	pop    edi
c00192fe:	5d                   	pop    ebp
c00192ff:	c3                   	ret    

c0019300 <CPU::setupSMEP()>:
c0019300:	0f 20 e0             	mov    eax,cr4
c0019303:	0d 00 00 10 00       	or     eax,0x100000
c0019308:	0f 22 e0             	mov    cr4,eax
c001930b:	c3                   	ret    

c001930c <CPU::setupUMIP()>:
c001930c:	0f 20 e0             	mov    eax,cr4
c001930f:	80 cc 08             	or     ah,0x8
c0019312:	0f 22 e0             	mov    cr4,eax
c0019315:	c3                   	ret    

c0019316 <CPU::setupTSC()>:
c0019316:	0f 20 e0             	mov    eax,cr4
c0019319:	83 c8 04             	or     eax,0x4
c001931c:	0f 22 e0             	mov    cr4,eax
c001931f:	c3                   	ret    

c0019320 <CPU::setupLargePages()>:
c0019320:	0f 20 e0             	mov    eax,cr4
c0019323:	83 c8 10             	or     eax,0x10
c0019326:	0f 22 e0             	mov    cr4,eax
c0019329:	c3                   	ret    

c001932a <CPU::setupPAT()>:
c001932a:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001932f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019336:	74 2c                	je     c0019364 <CPU::setupPAT()+0x3a>
c0019338:	53                   	push   ebx
c0019339:	83 ec 10             	sub    esp,0x10
c001933c:	68 77 02 00 00       	push   0x277
c0019341:	50                   	push   eax
c0019342:	e8 f9 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019347:	83 e2 f8             	and    edx,0xfffffff8
c001934a:	83 ca 01             	or     edx,0x1
c001934d:	52                   	push   edx
c001934e:	50                   	push   eax
c001934f:	68 77 02 00 00       	push   0x277
c0019354:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c001935a:	e8 0d 58 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c001935f:	83 c4 28             	add    esp,0x28
c0019362:	5b                   	pop    ebx
c0019363:	c3                   	ret    
c0019364:	c3                   	ret    
c0019365:	90                   	nop

c0019366 <CPU::setupMTRR()>:
c0019366:	c3                   	ret    
c0019367:	90                   	nop

c0019368 <CPU::setupGlobalPages()>:
c0019368:	0f 20 e0             	mov    eax,cr4
c001936b:	0c 80                	or     al,0x80
c001936d:	0f 22 e0             	mov    cr4,eax
c0019370:	c3                   	ret    
c0019371:	90                   	nop

c0019372 <CPU::allowUsermodeDataAccess()>:
c0019372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019376:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001937d:	74 03                	je     c0019382 <CPU::allowUsermodeDataAccess()+0x10>
c001937f:	0f 01 cb             	stac   
c0019382:	c3                   	ret    
c0019383:	90                   	nop

c0019384 <CPU::prohibitUsermodeDataAccess()>:
c0019384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019388:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001938f:	74 03                	je     c0019394 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019391:	0f 01 ca             	clac   
c0019394:	c3                   	ret    
c0019395:	90                   	nop

c0019396 <CPU::setupSMAP()>:
c0019396:	0f 20 e0             	mov    eax,cr4
c0019399:	0d 00 00 20 00       	or     eax,0x200000
c001939e:	0f 22 e0             	mov    cr4,eax
c00193a1:	eb e1                	jmp    c0019384 <CPU::prohibitUsermodeDataAccess()>
c00193a3:	90                   	nop

c00193a4 <CPU::setupFeatures()>:
c00193a4:	83 ec 0c             	sub    esp,0xc
c00193a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193ab:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00193b2:	74 07                	je     c00193bb <CPU::setupFeatures()+0x17>
c00193b4:	52                   	push   edx
c00193b5:	e8 46 ff ff ff       	call   c0019300 <CPU::setupSMEP()>
c00193ba:	58                   	pop    eax
c00193bb:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00193c2:	74 07                	je     c00193cb <CPU::setupFeatures()+0x27>
c00193c4:	52                   	push   edx
c00193c5:	e8 cc ff ff ff       	call   c0019396 <CPU::setupSMAP()>
c00193ca:	58                   	pop    eax
c00193cb:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00193d2:	74 07                	je     c00193db <CPU::setupFeatures()+0x37>
c00193d4:	52                   	push   edx
c00193d5:	e8 32 ff ff ff       	call   c001930c <CPU::setupUMIP()>
c00193da:	58                   	pop    eax
c00193db:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00193e2:	74 07                	je     c00193eb <CPU::setupFeatures()+0x47>
c00193e4:	52                   	push   edx
c00193e5:	e8 2c ff ff ff       	call   c0019316 <CPU::setupTSC()>
c00193ea:	58                   	pop    eax
c00193eb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00193f2:	74 07                	je     c00193fb <CPU::setupFeatures()+0x57>
c00193f4:	52                   	push   edx
c00193f5:	e8 26 ff ff ff       	call   c0019320 <CPU::setupLargePages()>
c00193fa:	59                   	pop    ecx
c00193fb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019402:	74 07                	je     c001940b <CPU::setupFeatures()+0x67>
c0019404:	52                   	push   edx
c0019405:	e8 5e ff ff ff       	call   c0019368 <CPU::setupGlobalPages()>
c001940a:	58                   	pop    eax
c001940b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019412:	74 0c                	je     c0019420 <CPU::setupFeatures()+0x7c>
c0019414:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019418:	83 c4 0c             	add    esp,0xc
c001941b:	e9 0a ff ff ff       	jmp    c001932a <CPU::setupPAT()>
c0019420:	83 c4 0c             	add    esp,0xc
c0019423:	c3                   	ret    

c0019424 <CPU::open(int, int, void*)>:
c0019424:	57                   	push   edi
c0019425:	56                   	push   esi
c0019426:	53                   	push   ebx
c0019427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001942b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001942f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019435:	83 ec 0c             	sub    esp,0xc
c0019438:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001943e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019444:	50                   	push   eax
c0019445:	e8 e4 59 ff ff       	call   c000ee2e <GDT::setup()>
c001944a:	83 c4 0c             	add    esp,0xc
c001944d:	6a 00                	push   0x0
c001944f:	68 ef be ad de       	push   0xdeadbeef
c0019454:	57                   	push   edi
c0019455:	e8 2c 77 ff ff       	call   c0010b86 <TSS::setup(unsigned long, unsigned long)>
c001945a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001945d:	e8 04 77 ff ff       	call   c0010b66 <TSS::flush()>
c0019462:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019468:	89 04 24             	mov    DWORD PTR [esp],eax
c001946b:	e8 22 5c ff ff       	call   c000f092 <IDT::setup()>
c0019470:	b8 00 04 00 00       	mov    eax,0x400
c0019475:	0f 23 f8             	mov    db7,eax
c0019478:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019482:	e8 ea 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c0019487:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001948d:	89 30                	mov    DWORD PTR [eax],esi
c001948f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019495:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019498:	58                   	pop    eax
c0019499:	5a                   	pop    edx
c001949a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194a4:	e8 ed 87 ff ff       	call   c0011c96 <VAS::setCPUSpecific(unsigned long)>
c00194a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194ac:	e8 5d f4 ff ff       	call   c001890e <CPU::detectFeatures()>
c00194b1:	e8 35 bc ff ff       	call   c00150eb <setupInterruptController()>
c00194b6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00194bc:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c00194c1:	83 e0 10             	and    eax,0x10
c00194c4:	83 f8 01             	cmp    eax,0x1
c00194c7:	19 c0                	sbb    eax,eax
c00194c9:	83 e0 46             	and    eax,0x46
c00194cc:	83 c0 1e             	add    eax,0x1e
c00194cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00194d2:	e8 02 d2 ff ff       	call   c00166d9 <setupTimer(int)>
c00194d7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00194dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194e0:	e8 bf fe ff ff       	call   c00193a4 <CPU::setupFeatures()>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	31 c0                	xor    eax,eax
c00194ea:	5b                   	pop    ebx
c00194eb:	5e                   	pop    esi
c00194ec:	5f                   	pop    edi
c00194ed:	c3                   	ret    

c00194ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00194ee:	57                   	push   edi
c00194ef:	56                   	push   esi
c00194f0:	53                   	push   ebx
c00194f1:	51                   	push   ecx
c00194f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194f6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00194f9:	0f 02 c0             	lar    eax,ax
c00194fc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00194ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019503:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019506:	88 ca                	mov    dl,cl
c0019508:	c0 ea 06             	shr    dl,0x6
c001950b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001950f:	89 ca                	mov    edx,ecx
c0019511:	66 c1 ea 03          	shr    dx,0x3
c0019515:	83 e2 07             	and    edx,0x7
c0019518:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001951d:	88 17                	mov    BYTE PTR [edi],dl
c001951f:	0f 84 a6 01 00 00    	je     c00196cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019525:	83 e1 07             	and    ecx,0x7
c0019528:	80 f9 04             	cmp    cl,0x4
c001952b:	0f 84 98 00 00 00    	je     c00195c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019531:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019536:	0f 95 c0             	setne  al
c0019539:	80 f9 05             	cmp    cl,0x5
c001953c:	0f 95 c2             	setne  dl
c001953f:	08 c2                	or     dl,al
c0019541:	74 79                	je     c00195bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019543:	84 c9                	test   cl,cl
c0019545:	75 05                	jne    c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019547:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001954a:	eb 3c                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001954c:	80 f9 01             	cmp    cl,0x1
c001954f:	75 05                	jne    c0019556 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019551:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019554:	eb 32                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019556:	80 f9 02             	cmp    cl,0x2
c0019559:	75 05                	jne    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001955b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001955e:	eb 28                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019560:	31 c0                	xor    eax,eax
c0019562:	80 f9 03             	cmp    cl,0x3
c0019565:	75 05                	jne    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019567:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001956a:	eb 1c                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001956c:	80 f9 05             	cmp    cl,0x5
c001956f:	75 05                	jne    c0019576 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019571:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019574:	eb 12                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019576:	80 f9 06             	cmp    cl,0x6
c0019579:	75 05                	jne    c0019580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001957b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001957e:	eb 08                	jmp    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019580:	80 f9 07             	cmp    cl,0x7
c0019583:	75 03                	jne    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019585:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019588:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001958d:	75 10                	jne    c001959f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001958f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019593:	b9 03 00 00 00       	mov    ecx,0x3
c0019598:	01 d0                	add    eax,edx
c001959a:	e9 37 01 00 00       	jmp    c00196d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001959f:	b9 02 00 00 00       	mov    ecx,0x2
c00195a4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00195a9:	0f 85 27 01 00 00    	jne    c00196d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195af:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00195b2:	b9 06 00 00 00       	mov    ecx,0x6
c00195b7:	e9 1a 01 00 00       	jmp    c00196d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195bc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00195bf:	b9 06 00 00 00       	mov    ecx,0x6
c00195c4:	e9 0f 01 00 00       	jmp    c00196d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195c9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00195cc:	88 ca                	mov    dl,cl
c00195ce:	c0 ea 06             	shr    dl,0x6
c00195d1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00195d5:	89 ca                	mov    edx,ecx
c00195d7:	66 c1 ea 03          	shr    dx,0x3
c00195db:	83 e2 07             	and    edx,0x7
c00195de:	80 e1 07             	and    cl,0x7
c00195e1:	75 05                	jne    c00195e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00195e3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00195e6:	eb 4c                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195e8:	80 f9 01             	cmp    cl,0x1
c00195eb:	75 05                	jne    c00195f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00195ed:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00195f0:	eb 42                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195f2:	80 f9 02             	cmp    cl,0x2
c00195f5:	75 05                	jne    c00195fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00195f7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00195fa:	eb 38                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195fc:	80 f9 03             	cmp    cl,0x3
c00195ff:	75 05                	jne    c0019606 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019601:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019604:	eb 2e                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019606:	80 f9 04             	cmp    cl,0x4
c0019609:	75 12                	jne    c001961d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001960b:	f6 c4 60             	test   ah,0x60
c001960e:	75 08                	jne    c0019618 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019610:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019613:	8d 78 14             	lea    edi,[eax+0x14]
c0019616:	eb 1c                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019618:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001961b:	eb 17                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001961d:	80 f9 05             	cmp    cl,0x5
c0019620:	75 05                	jne    c0019627 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019622:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019625:	eb 0d                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019627:	80 f9 06             	cmp    cl,0x6
c001962a:	75 05                	jne    c0019631 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001962c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001962f:	eb 03                	jmp    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019631:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019634:	84 d2                	test   dl,dl
c0019636:	75 05                	jne    c001963d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019638:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001963b:	eb 3c                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001963d:	80 fa 01             	cmp    dl,0x1
c0019640:	75 05                	jne    c0019647 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019642:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019645:	eb 32                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019647:	80 fa 02             	cmp    dl,0x2
c001964a:	75 05                	jne    c0019651 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001964c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001964f:	eb 28                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019651:	80 fa 03             	cmp    dl,0x3
c0019654:	75 05                	jne    c001965b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019656:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019659:	eb 1e                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001965b:	31 c0                	xor    eax,eax
c001965d:	80 fa 04             	cmp    dl,0x4
c0019660:	74 17                	je     c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019662:	80 fa 05             	cmp    dl,0x5
c0019665:	75 05                	jne    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019667:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001966a:	eb 0d                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001966c:	80 fa 06             	cmp    dl,0x6
c001966f:	75 05                	jne    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019671:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019674:	eb 03                	jmp    c0019679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019676:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019679:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001967e:	0f 94 c2             	sete   dl
c0019681:	80 f9 05             	cmp    cl,0x5
c0019684:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019688:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001968d:	d3 e0                	shl    eax,cl
c001968f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019693:	74 0a                	je     c001969f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019695:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019698:	b9 07 00 00 00       	mov    ecx,0x7
c001969d:	eb 37                	jmp    c00196d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001969f:	01 f8                	add    eax,edi
c00196a1:	b9 03 00 00 00       	mov    ecx,0x3
c00196a6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196ab:	74 2b                	je     c00196d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196ad:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196b2:	75 0d                	jne    c00196c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00196b4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00196b8:	01 c8                	add    eax,ecx
c00196ba:	b9 04 00 00 00       	mov    ecx,0x4
c00196bf:	eb 17                	jmp    c00196d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196c1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196c4:	b9 07 00 00 00       	mov    ecx,0x7
c00196c9:	eb 0d                	jmp    c00196d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196cb:	b9 02 00 00 00       	mov    ecx,0x2
c00196d0:	b2 01                	mov    dl,0x1
c00196d2:	31 c0                	xor    eax,eax
c00196d4:	eb 02                	jmp    c00196d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196d6:	31 d2                	xor    edx,edx
c00196d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00196dc:	89 0b                	mov    DWORD PTR [ebx],ecx
c00196de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196e2:	88 11                	mov    BYTE PTR [ecx],dl
c00196e4:	5a                   	pop    edx
c00196e5:	5b                   	pop    ebx
c00196e6:	5e                   	pop    esi
c00196e7:	5f                   	pop    edi
c00196e8:	c3                   	ret    

c00196e9 <Krnl::smpEntry()>:
c00196e9:	eb fe                	jmp    c00196e9 <Krnl::smpEntry()>

c00196eb <Krnl::startCPU(int)>:
c00196eb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00196f0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00196f7:	0f 84 36 01 00 00    	je     c0019833 <Krnl::startCPU(int)+0x148>
c00196fd:	53                   	push   ebx
c00196fe:	83 ec 10             	sub    esp,0x10
c0019701:	fa                   	cli    
c0019702:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c0019708:	6a 1b                	push   0x1b
c001970a:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c0019710:	e8 2b 54 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019715:	25 00 f0 ff ff       	and    eax,0xfffff000
c001971a:	89 c3                	mov    ebx,eax
c001971c:	58                   	pop    eax
c001971d:	5a                   	pop    edx
c001971e:	53                   	push   ebx
c001971f:	68 9c b4 02 c0       	push   0xc002b49c
c0019724:	e8 40 8f ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0019729:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019737:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019741:	c1 e0 18             	shl    eax,0x18
c0019744:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019753:	09 c2                	or     edx,eax
c0019755:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001975b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019761:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019767:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001976d:	80 cd c5             	or     ch,0xc5
c0019770:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019776:	f3 90                	pause  
c0019778:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001977a:	0f ba e1 0c          	bt     ecx,0xc
c001977e:	72 f6                	jb     c0019776 <Krnl::startCPU(int)+0x8b>
c0019780:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019786:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001978c:	09 c1                	or     ecx,eax
c001978e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019794:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001979a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197a0:	80 cd 85             	or     ch,0x85
c00197a3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197a9:	f3 90                	pause  
c00197ab:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197ad:	0f ba e1 0c          	bt     ecx,0xc
c00197b1:	72 f6                	jb     c00197a9 <Krnl::startCPU(int)+0xbe>
c00197b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197bd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197c3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197c9:	09 c1                	or     ecx,eax
c00197cb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197d1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197d7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00197dd:	81 c9 02 06 00 00    	or     ecx,0x602
c00197e3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197e9:	f3 90                	pause  
c00197eb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197ed:	0f ba e1 0c          	bt     ecx,0xc
c00197f1:	72 f6                	jb     c00197e9 <Krnl::startCPU(int)+0xfe>
c00197f3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197fd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019803:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019809:	09 c8                	or     eax,ecx
c001980b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019811:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019817:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001981c:	0d 02 06 00 00       	or     eax,0x602
c0019821:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019827:	f3 90                	pause  
c0019829:	8b 02                	mov    eax,DWORD PTR [edx]
c001982b:	0f ba e0 0c          	bt     eax,0xc
c001982f:	72 f6                	jb     c0019827 <Krnl::startCPU(int)+0x13c>
c0019831:	eb fe                	jmp    c0019831 <Krnl::startCPU(int)+0x146>
c0019833:	c3                   	ret    

c0019834 <Krnl::startCPUs()>:
c0019834:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0019839:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001983f:	88 c2                	mov    dl,al
c0019841:	83 e2 0a             	and    edx,0xa
c0019844:	80 fa 0a             	cmp    dl,0xa
c0019847:	75 09                	jne    c0019852 <Krnl::startCPUs()+0x1e>
c0019849:	a8 01                	test   al,0x1
c001984b:	74 05                	je     c0019852 <Krnl::startCPUs()+0x1e>
c001984d:	e9 49 69 fe ff       	jmp    c000019b <prepareTramp>
c0019852:	c3                   	ret    
c0019853:	90                   	nop

c0019854 <EnvVarContainer::getEnv(char const*)>:
c0019854:	57                   	push   edi
c0019855:	56                   	push   esi
c0019856:	53                   	push   ebx
c0019857:	31 db                	xor    ebx,ebx
c0019859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001985d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001985f:	7e 2b                	jle    c001988c <EnvVarContainer::getEnv(char const*)+0x38>
c0019861:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019868:	50                   	push   eax
c0019869:	50                   	push   eax
c001986a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001986d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019870:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019874:	e8 1f 70 fe ff       	call   c0000898 <strcmp>
c0019879:	83 c4 10             	add    esp,0x10
c001987c:	85 c0                	test   eax,eax
c001987e:	75 09                	jne    c0019889 <EnvVarContainer::getEnv(char const*)+0x35>
c0019880:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019883:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019887:	eb 05                	jmp    c001988e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019889:	43                   	inc    ebx
c001988a:	eb d1                	jmp    c001985d <EnvVarContainer::getEnv(char const*)+0x9>
c001988c:	31 c0                	xor    eax,eax
c001988e:	5b                   	pop    ebx
c001988f:	5e                   	pop    esi
c0019890:	5f                   	pop    edi
c0019891:	c3                   	ret    

c0019892 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019892:	55                   	push   ebp
c0019893:	57                   	push   edi
c0019894:	56                   	push   esi
c0019895:	53                   	push   ebx
c0019896:	83 ec 28             	sub    esp,0x28
c0019899:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001989d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00198a1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00198a5:	56                   	push   esi
c00198a6:	e8 c1 6e fe ff       	call   c000076c <strlen>
c00198ab:	40                   	inc    eax
c00198ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00198af:	e8 e5 5c ff ff       	call   c000f599 <malloc>
c00198b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198bb:	e8 ac 6e fe ff       	call   c000076c <strlen>
c00198c0:	40                   	inc    eax
c00198c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198c4:	e8 d0 5c ff ff       	call   c000f599 <malloc>
c00198c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00198cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00198d0:	e8 97 6e fe ff       	call   c000076c <strlen>
c00198d5:	83 c4 0c             	add    esp,0xc
c00198d8:	40                   	inc    eax
c00198d9:	50                   	push   eax
c00198da:	6a 00                	push   0x0
c00198dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00198e0:	e8 6b 6e fe ff       	call   c0000750 <memset>
c00198e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00198e8:	e8 7f 6e fe ff       	call   c000076c <strlen>
c00198ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00198f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198f9:	89 de                	mov    esi,ebx
c00198fb:	e8 6c 6e fe ff       	call   c000076c <strlen>
c0019900:	83 c4 0c             	add    esp,0xc
c0019903:	40                   	inc    eax
c0019904:	50                   	push   eax
c0019905:	6a 00                	push   0x0
c0019907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001990b:	e8 40 6e fe ff       	call   c0000750 <memset>
c0019910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019913:	e8 54 6e fe ff       	call   c000076c <strlen>
c0019918:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001991c:	8d 48 01             	lea    ecx,[eax+0x1]
c001991f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019921:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019924:	40                   	inc    eax
c0019925:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019928:	c1 e0 03             	shl    eax,0x3
c001992b:	5a                   	pop    edx
c001992c:	59                   	pop    ecx
c001992d:	50                   	push   eax
c001992e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019931:	e8 4f 5c ff ff       	call   c000f585 <realloc>
c0019936:	8d 74 24 18          	lea    esi,[esp+0x18]
c001993a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001993d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019940:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019944:	b9 08 00 00 00       	mov    ecx,0x8
c0019949:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001994b:	83 c4 2c             	add    esp,0x2c
c001994e:	5b                   	pop    ebx
c001994f:	5e                   	pop    esi
c0019950:	5f                   	pop    edi
c0019951:	5d                   	pop    ebp
c0019952:	c3                   	ret    
c0019953:	90                   	nop

c0019954 <EnvVarContainer::deleteEnv(char const*)>:
c0019954:	c3                   	ret    
c0019955:	90                   	nop

c0019956 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019956:	55                   	push   ebp
c0019957:	57                   	push   edi
c0019958:	56                   	push   esi
c0019959:	53                   	push   ebx
c001995a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019960:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019967:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001996e:	68 14 01 00 00       	push   0x114
c0019973:	e8 21 5c ff ff       	call   c000f599 <malloc>
c0019978:	83 c4 0c             	add    esp,0xc
c001997b:	89 c3                	mov    ebx,eax
c001997d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019980:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019987:	50                   	push   eax
c0019988:	e8 3b 92 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001998d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019990:	e8 05 95 ff ff       	call   c0012e9a <File::exists()>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	84 c0                	test   al,al
c001999a:	75 31                	jne    c00199cd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001999c:	50                   	push   eax
c001999d:	50                   	push   eax
c001999e:	6a 12                	push   0x12
c00199a0:	53                   	push   ebx
c00199a1:	e8 86 92 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c00199a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199a8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00199ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00199ae:	e8 b9 6d fe ff       	call   c000076c <strlen>
c00199b3:	5a                   	pop    edx
c00199b4:	31 d2                	xor    edx,edx
c00199b6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199ba:	51                   	push   ecx
c00199bb:	56                   	push   esi
c00199bc:	52                   	push   edx
c00199bd:	50                   	push   eax
c00199be:	53                   	push   ebx
c00199bf:	ff d7                	call   edi
c00199c1:	83 c4 14             	add    esp,0x14
c00199c4:	53                   	push   ebx
c00199c5:	e8 c0 92 ff ff       	call   c0012c8a <File::close()>
c00199ca:	83 c4 10             	add    esp,0x10
c00199cd:	56                   	push   esi
c00199ce:	31 f6                	xor    esi,esi
c00199d0:	68 00 01 00 00       	push   0x100
c00199d5:	6a 00                	push   0x0
c00199d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199db:	50                   	push   eax
c00199dc:	e8 6f 6d fe ff       	call   c0000750 <memset>
c00199e1:	5f                   	pop    edi
c00199e2:	58                   	pop    eax
c00199e3:	6a 01                	push   0x1
c00199e5:	53                   	push   ebx
c00199e6:	e8 41 92 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c00199eb:	83 c4 10             	add    esp,0x10
c00199ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199f6:	83 ec 0c             	sub    esp,0xc
c00199f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199fb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199ff:	51                   	push   ecx
c0019a00:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a04:	52                   	push   edx
c0019a05:	6a 00                	push   0x0
c0019a07:	6a 01                	push   0x1
c0019a09:	53                   	push   ebx
c0019a0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a0d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a11:	83 c4 20             	add    esp,0x20
c0019a14:	3c 0d                	cmp    al,0xd
c0019a16:	0f 84 09 01 00 00    	je     c0019b25 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a21:	0f 84 ef 00 00 00    	je     c0019b16 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a27:	3c 0a                	cmp    al,0xa
c0019a29:	74 13                	je     c0019a3e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a30:	74 0c                	je     c0019a3e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a32:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a38:	0f 8e d8 00 00 00    	jle    c0019b16 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a42:	83 ec 0c             	sub    esp,0xc
c0019a45:	8d 78 01             	lea    edi,[eax+0x1]
c0019a48:	57                   	push   edi
c0019a49:	e8 4b 5b ff ff       	call   c000f599 <malloc>
c0019a4e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019a52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a56:	8d 56 04             	lea    edx,[esi+0x4]
c0019a59:	89 14 24             	mov    DWORD PTR [esp],edx
c0019a5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019a60:	e8 34 5b ff ff       	call   c000f599 <malloc>
c0019a65:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019a69:	83 c4 0c             	add    esp,0xc
c0019a6c:	57                   	push   edi
c0019a6d:	6a 00                	push   0x0
c0019a6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019a73:	e8 d8 6c fe ff       	call   c0000750 <memset>
c0019a78:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019a7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019a80:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019a84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a86:	83 c4 0c             	add    esp,0xc
c0019a89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a8d:	52                   	push   edx
c0019a8e:	6a 00                	push   0x0
c0019a90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a94:	e8 b7 6c fe ff       	call   c0000750 <memset>
c0019a99:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019a9d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019aa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019aa4:	e8 c3 6c fe ff       	call   c000076c <strlen>
c0019aa9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019aad:	89 c1                	mov    ecx,eax
c0019aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ab1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ab4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019ab7:	40                   	inc    eax
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019abe:	85 d2                	test   edx,edx
c0019ac0:	75 0c                	jne    c0019ace <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	6a 08                	push   0x8
c0019ac7:	e8 cd 5a ff ff       	call   c000f599 <malloc>
c0019acc:	eb 0c                	jmp    c0019ada <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019ace:	c1 e0 03             	shl    eax,0x3
c0019ad1:	51                   	push   ecx
c0019ad2:	51                   	push   ecx
c0019ad3:	50                   	push   eax
c0019ad4:	52                   	push   edx
c0019ad5:	e8 ab 5a ff ff       	call   c000f585 <realloc>
c0019ada:	83 c4 10             	add    esp,0x10
c0019add:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ae0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ae3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019ae6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019aea:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019aee:	b9 08 00 00 00       	mov    ecx,0x8
c0019af3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019af5:	31 f6                	xor    esi,esi
c0019af7:	50                   	push   eax
c0019af8:	68 00 01 00 00       	push   0x100
c0019afd:	6a 00                	push   0x0
c0019aff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b03:	50                   	push   eax
c0019b04:	e8 47 6c fe ff       	call   c0000750 <memset>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b14:	eb 0f                	jmp    c0019b25 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b16:	3c 3d                	cmp    al,0x3d
c0019b18:	74 07                	je     c0019b21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b1a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b1e:	46                   	inc    esi
c0019b1f:	eb 04                	jmp    c0019b25 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b21:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b2a:	0f 85 c6 fe ff ff    	jne    c00199f6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b30:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b36:	5b                   	pop    ebx
c0019b37:	5e                   	pop    esi
c0019b38:	5f                   	pop    edi
c0019b39:	5d                   	pop    ebp
c0019b3a:	c3                   	ret    
c0019b3b:	90                   	nop

c0019b3c <EnvVarContainer::__loadSystem()>:
c0019b3c:	83 ec 10             	sub    esp,0x10
c0019b3f:	68 c0 cd 02 c0       	push   0xc002cdc0
c0019b44:	68 ad b4 02 c0       	push   0xc002b4ad
c0019b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b4d:	e8 04 fe ff ff       	call   c0019956 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019b52:	83 c4 1c             	add    esp,0x1c
c0019b55:	c3                   	ret    

c0019b56 <EnvVarContainer::__loadUser()>:
c0019b56:	c3                   	ret    
c0019b57:	90                   	nop

c0019b58 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019b6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019b78:	90                   	nop
c0019b79:	c3                   	ret    

c0019b7a <EnvVarContainer::~EnvVarContainer()>:
c0019b7a:	83 ec 0c             	sub    esp,0xc
c0019b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b84:	85 c0                	test   eax,eax
c0019b86:	74 1d                	je     c0019ba5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b8e:	85 c0                	test   eax,eax
c0019b90:	74 13                	je     c0019ba5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b99:	83 ec 0c             	sub    esp,0xc
c0019b9c:	50                   	push   eax
c0019b9d:	e8 07 5a ff ff       	call   c000f5a9 <free>
c0019ba2:	83 c4 10             	add    esp,0x10
c0019ba5:	90                   	nop
c0019ba6:	83 c4 0c             	add    esp,0xc
c0019ba9:	c3                   	ret    

c0019baa <Krnl::getEnv(Process*, char const*)>:
c0019baa:	53                   	push   ebx
c0019bab:	83 ec 08             	sub    esp,0x8
c0019bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019bb6:	39 05 d0 0d 03 c0    	cmp    DWORD PTR ds:0xc0030dd0,eax
c0019bbc:	74 04                	je     c0019bc2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019bbe:	85 c0                	test   eax,eax
c0019bc0:	75 0b                	jne    c0019bcd <Krnl::getEnv(Process*, char const*)+0x23>
c0019bc2:	a1 b4 03 03 c0       	mov    eax,ds:0xc00303b4
c0019bc7:	85 c0                	test   eax,eax
c0019bc9:	75 19                	jne    c0019be4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019bcb:	eb 27                	jmp    c0019bf4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019bcd:	52                   	push   edx
c0019bce:	52                   	push   edx
c0019bcf:	53                   	push   ebx
c0019bd0:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019bd6:	e8 79 fc ff ff       	call   c0019854 <EnvVarContainer::getEnv(char const*)>
c0019bdb:	83 c4 10             	add    esp,0x10
c0019bde:	85 c0                	test   eax,eax
c0019be0:	75 28                	jne    c0019c0a <Krnl::getEnv(Process*, char const*)+0x60>
c0019be2:	eb de                	jmp    c0019bc2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019be4:	52                   	push   edx
c0019be5:	52                   	push   edx
c0019be6:	53                   	push   ebx
c0019be7:	50                   	push   eax
c0019be8:	e8 67 fc ff ff       	call   c0019854 <EnvVarContainer::getEnv(char const*)>
c0019bed:	83 c4 10             	add    esp,0x10
c0019bf0:	85 c0                	test   eax,eax
c0019bf2:	75 16                	jne    c0019c0a <Krnl::getEnv(Process*, char const*)+0x60>
c0019bf4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019bf8:	a1 b8 03 03 c0       	mov    eax,ds:0xc00303b8
c0019bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c01:	83 c4 08             	add    esp,0x8
c0019c04:	5b                   	pop    ebx
c0019c05:	e9 4a fc ff ff       	jmp    c0019854 <EnvVarContainer::getEnv(char const*)>
c0019c0a:	83 c4 08             	add    esp,0x8
c0019c0d:	5b                   	pop    ebx
c0019c0e:	c3                   	ret    

c0019c0f <Krnl::setEnvSystem(char const*, char const*)>:
c0019c0f:	83 ec 10             	sub    esp,0x10
c0019c12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c1a:	ff 35 b8 03 03 c0    	push   DWORD PTR ds:0xc00303b8
c0019c20:	e8 6d fc ff ff       	call   c0019892 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c25:	83 c4 1c             	add    esp,0x1c
c0019c28:	c3                   	ret    

c0019c29 <Krnl::setEnvUser(char const*, char const*)>:
c0019c29:	a1 b4 03 03 c0       	mov    eax,ds:0xc00303b4
c0019c2e:	85 c0                	test   eax,eax
c0019c30:	74 15                	je     c0019c47 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c32:	83 ec 10             	sub    esp,0x10
c0019c35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c3d:	50                   	push   eax
c0019c3e:	e8 4f fc ff ff       	call   c0019892 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c43:	83 c4 1c             	add    esp,0x1c
c0019c46:	c3                   	ret    
c0019c47:	c3                   	ret    

c0019c48 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c4c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c56:	e9 37 fc ff ff       	jmp    c0019892 <EnvVarContainer::setEnv(char const*, char const*)>

c0019c5b <Krnl::deleteEnvSystem(char const*)>:
c0019c5b:	c3                   	ret    

c0019c5c <Krnl::deleteEnvUser(char const*)>:
c0019c5c:	c3                   	ret    

c0019c5d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019c5d:	c3                   	ret    

c0019c5e <Krnl::newProcessEnv(Process*)>:
c0019c5e:	83 ec 28             	sub    esp,0x28
c0019c61:	6a 0c                	push   0xc
c0019c63:	e8 31 59 ff ff       	call   c000f599 <malloc>
c0019c68:	5a                   	pop    edx
c0019c69:	59                   	pop    ecx
c0019c6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c6e:	50                   	push   eax
c0019c6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c73:	e8 e0 fe ff ff       	call   c0019b58 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c7c:	83 c4 2c             	add    esp,0x2c
c0019c7f:	c3                   	ret    

c0019c80 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019c80:	57                   	push   edi
c0019c81:	56                   	push   esi
c0019c82:	53                   	push   ebx
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	83 ec 0c             	sub    esp,0xc
c0019c8a:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019c90:	6a 0c                	push   0xc
c0019c92:	e8 02 59 ff ff       	call   c000f599 <malloc>
c0019c97:	89 c3                	mov    ebx,eax
c0019c99:	58                   	pop    eax
c0019c9a:	5a                   	pop    edx
c0019c9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c9f:	53                   	push   ebx
c0019ca0:	e8 b3 fe ff ff       	call   c0019b58 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ca5:	8b 07                	mov    eax,DWORD PTR [edi]
c0019ca7:	89 03                	mov    DWORD PTR [ebx],eax
c0019ca9:	c1 e0 03             	shl    eax,0x3
c0019cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0019caf:	e8 e5 58 ff ff       	call   c000f599 <malloc>
c0019cb4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019cb7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019cb9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019cbc:	c1 e1 03             	shl    ecx,0x3
c0019cbf:	89 c7                	mov    edi,eax
c0019cc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	89 d8                	mov    eax,ebx
c0019cc8:	5b                   	pop    ebx
c0019cc9:	5e                   	pop    esi
c0019cca:	5f                   	pop    edi
c0019ccb:	c3                   	ret    

c0019ccc <Krnl::loadSystemEnv()>:
c0019ccc:	53                   	push   ebx
c0019ccd:	83 ec 14             	sub    esp,0x14
c0019cd0:	6a 0c                	push   0xc
c0019cd2:	e8 c2 58 ff ff       	call   c000f599 <malloc>
c0019cd7:	89 c3                	mov    ebx,eax
c0019cd9:	58                   	pop    eax
c0019cda:	5a                   	pop    edx
c0019cdb:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c0019ce1:	53                   	push   ebx
c0019ce2:	e8 71 fe ff ff       	call   c0019b58 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ce7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cea:	89 1d b8 03 03 c0    	mov    DWORD PTR ds:0xc00303b8,ebx
c0019cf0:	e8 47 fe ff ff       	call   c0019b3c <EnvVarContainer::__loadSystem()>
c0019cf5:	83 c4 18             	add    esp,0x18
c0019cf8:	5b                   	pop    ebx
c0019cf9:	c3                   	ret    

c0019cfa <Krnl::loadUserEnv()>:
c0019cfa:	53                   	push   ebx
c0019cfb:	83 ec 14             	sub    esp,0x14
c0019cfe:	6a 0c                	push   0xc
c0019d00:	e8 94 58 ff ff       	call   c000f599 <malloc>
c0019d05:	89 c3                	mov    ebx,eax
c0019d07:	58                   	pop    eax
c0019d08:	5a                   	pop    edx
c0019d09:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c0019d0f:	53                   	push   ebx
c0019d10:	e8 43 fe ff ff       	call   c0019b58 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d15:	89 1d b4 03 03 c0    	mov    DWORD PTR ds:0xc00303b4,ebx
c0019d1b:	83 c4 18             	add    esp,0x18
c0019d1e:	5b                   	pop    ebx
c0019d1f:	c3                   	ret    

c0019d20 <Krnl::flushEnv()>:
c0019d20:	c3                   	ret    

c0019d21 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d25:	8b 15 b4 03 03 c0    	mov    edx,DWORD PTR ds:0xc00303b4
c0019d2b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d31:	a1 b8 03 03 c0       	mov    eax,ds:0xc00303b8
c0019d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d38:	03 01                	add    eax,DWORD PTR [ecx]
c0019d3a:	85 d2                	test   edx,edx
c0019d3c:	74 02                	je     c0019d40 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d3e:	03 02                	add    eax,DWORD PTR [edx]
c0019d40:	c3                   	ret    

c0019d41 <Krnl::getProcessEnvPair(Process*, int)>:
c0019d41:	57                   	push   edi
c0019d42:	56                   	push   esi
c0019d43:	8b 35 b4 03 03 c0    	mov    esi,DWORD PTR ds:0xc00303b4
c0019d49:	53                   	push   ebx
c0019d4a:	85 f6                	test   esi,esi
c0019d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d54:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d5e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019d60:	75 16                	jne    c0019d78 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019d62:	39 c2                	cmp    edx,eax
c0019d64:	7c 16                	jl     c0019d7c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019d66:	8b 0d b8 03 03 c0    	mov    ecx,DWORD PTR ds:0xc00303b8
c0019d6c:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019d6e:	01 c6                	add    esi,eax
c0019d70:	39 d6                	cmp    esi,edx
c0019d72:	7e 3c                	jle    c0019db0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019d74:	29 c2                	sub    edx,eax
c0019d76:	eb 04                	jmp    c0019d7c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019d78:	39 c2                	cmp    edx,eax
c0019d7a:	7d 05                	jge    c0019d81 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019d7c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019d7f:	eb 20                	jmp    c0019da1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019d81:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019d83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019d86:	39 d1                	cmp    ecx,edx
c0019d88:	7e 04                	jle    c0019d8e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019d8a:	29 c2                	sub    edx,eax
c0019d8c:	eb 10                	jmp    c0019d9e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019d8e:	8b 35 b8 03 03 c0    	mov    esi,DWORD PTR ds:0xc00303b8
c0019d94:	03 0e                	add    ecx,DWORD PTR [esi]
c0019d96:	39 d1                	cmp    ecx,edx
c0019d98:	7e 16                	jle    c0019db0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019d9a:	29 c2                	sub    edx,eax
c0019d9c:	29 fa                	sub    edx,edi
c0019d9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019da1:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019da4:	8b 02                	mov    eax,DWORD PTR [edx]
c0019da6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019da9:	89 03                	mov    DWORD PTR [ebx],eax
c0019dab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019dae:	eb 1d                	jmp    c0019dcd <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019db0:	83 ec 0c             	sub    esp,0xc
c0019db3:	68 cf b4 02 c0       	push   0xc002b4cf
c0019db8:	e8 18 00 00 00       	call   c0019dd5 <Krnl::panic(char const*)>
c0019dbd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019dc3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	89 d8                	mov    eax,ebx
c0019dcf:	5b                   	pop    ebx
c0019dd0:	5e                   	pop    esi
c0019dd1:	5f                   	pop    edi
c0019dd2:	c2 04 00             	ret    0x4

c0019dd5 <Krnl::panic(char const*)>:
c0019dd5:	55                   	push   ebp
c0019dd6:	89 e5                	mov    ebp,esp
c0019dd8:	53                   	push   ebx
c0019dd9:	83 ec 10             	sub    esp,0x10
c0019ddc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019ddf:	fa                   	cli    
c0019de0:	c6 05 c4 03 03 c0 01 	mov    BYTE PTR ds:0xc00303c4,0x1
c0019de7:	53                   	push   ebx
c0019de8:	e8 06 58 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019ded:	58                   	pop    eax
c0019dee:	c6 05 c0 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c7c0,0x0
c0019df5:	5a                   	pop    edx
c0019df6:	53                   	push   ebx
c0019df7:	68 e9 b4 02 c0       	push   0xc002b4e9
c0019dfc:	e8 68 88 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0019e01:	59                   	pop    ecx
c0019e02:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e0d:	e8 23 65 ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c0019e12:	83 c4 0c             	add    esp,0xc
c0019e15:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e1a:	6a 01                	push   0x1
c0019e1c:	6a 0f                	push   0xf
c0019e1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e24:	e8 6b 63 ff ff       	call   c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e29:	58                   	pop    eax
c0019e2a:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e35:	e8 7c 68 ff ff       	call   c00106b6 <VgaText::clearScreen()>
c0019e3a:	58                   	pop    eax
c0019e3b:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e40:	5a                   	pop    edx
c0019e41:	68 02 b5 02 c0       	push   0xc002b502
c0019e46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e4c:	e8 f1 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019e51:	59                   	pop    ecx
c0019e52:	58                   	pop    eax
c0019e53:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e58:	68 a8 b5 02 c0       	push   0xc002b5a8
c0019e5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e63:	e8 da 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019e68:	58                   	pop    eax
c0019e69:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e6e:	5a                   	pop    edx
c0019e6f:	68 1e b5 02 c0       	push   0xc002b51e
c0019e74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e7a:	e8 c3 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019e7f:	59                   	pop    ecx
c0019e80:	58                   	pop    eax
c0019e81:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e86:	53                   	push   ebx
c0019e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8d:	e8 b0 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019e92:	58                   	pop    eax
c0019e93:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019e98:	5a                   	pop    edx
c0019e99:	68 3e b5 02 c0       	push   0xc002b53e
c0019e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea4:	e8 99 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019ea9:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c0019eae:	83 c4 10             	add    esp,0x10
c0019eb1:	85 c0                	test   eax,eax
c0019eb3:	74 02                	je     c0019eb7 <Krnl::panic(char const*)+0xe2>
c0019eb5:	ff d0                	call   eax
c0019eb7:	83 ec 0c             	sub    esp,0xc
c0019eba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ebd:	e8 8c 30 00 00       	call   c001cf4e <Thr::getDriverNameFromAddress(unsigned long)>
c0019ec2:	83 c4 10             	add    esp,0x10
c0019ec5:	89 c3                	mov    ebx,eax
c0019ec7:	85 c0                	test   eax,eax
c0019ec9:	0f 84 4e 02 00 00    	je     c001a11d <Krnl::panic(char const*)+0x348>
c0019ecf:	83 ec 08             	sub    esp,0x8
c0019ed2:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019ed7:	68 e4 b5 02 c0       	push   0xc002b5e4
c0019edc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee2:	e8 5b 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019ee7:	58                   	pop    eax
c0019ee8:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019eed:	5a                   	pop    edx
c0019eee:	68 1e b5 02 c0       	push   0xc002b51e
c0019ef3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef9:	e8 44 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019efe:	59                   	pop    ecx
c0019eff:	58                   	pop    eax
c0019f00:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019f05:	53                   	push   ebx
c0019f06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0c:	e8 31 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f11:	83 c4 10             	add    esp,0x10
c0019f14:	83 ec 08             	sub    esp,0x8
c0019f17:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019f1c:	68 3d b5 02 c0       	push   0xc002b53d
c0019f21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f27:	e8 16 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f2c:	58                   	pop    eax
c0019f2d:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019f32:	5a                   	pop    edx
c0019f33:	68 3c b6 02 c0       	push   0xc002b63c
c0019f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3e:	e8 ff 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f43:	59                   	pop    ecx
c0019f44:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019f49:	5b                   	pop    ebx
c0019f4a:	68 7c b6 02 c0       	push   0xc002b67c
c0019f4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f55:	e8 e8 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f5a:	58                   	pop    eax
c0019f5b:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019f60:	5a                   	pop    edx
c0019f61:	68 29 b5 02 c0       	push   0xc002b529
c0019f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6c:	e8 d1 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f71:	59                   	pop    ecx
c0019f72:	5b                   	pop    ebx
c0019f73:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f76:	68 41 b5 02 c0       	push   0xc002b541
c0019f7b:	e8 e9 86 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0019f80:	58                   	pop    eax
c0019f81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f84:	5a                   	pop    edx
c0019f85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019f88:	68 4a b5 02 c0       	push   0xc002b54a
c0019f8d:	e8 d7 86 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0019f92:	59                   	pop    ecx
c0019f93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f96:	5b                   	pop    ebx
c0019f97:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f99:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019f9c:	68 53 b5 02 c0       	push   0xc002b553
c0019fa1:	e8 c3 86 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0019fa6:	58                   	pop    eax
c0019fa7:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019fac:	5a                   	pop    edx
c0019fad:	68 c0 b6 02 c0       	push   0xc002b6c0
c0019fb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb8:	e8 85 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019fbd:	59                   	pop    ecx
c0019fbe:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019fc3:	5b                   	pop    ebx
c0019fc4:	68 5c b5 02 c0       	push   0xc002b55c
c0019fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fcf:	e8 6e 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019fd4:	0f 20 c0             	mov    eax,cr0
c0019fd7:	5a                   	pop    edx
c0019fd8:	59                   	pop    ecx
c0019fd9:	50                   	push   eax
c0019fda:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019fdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe5:	e8 12 68 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0019fea:	5b                   	pop    ebx
c0019feb:	58                   	pop    eax
c0019fec:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c0019ff1:	68 66 b5 02 c0       	push   0xc002b566
c0019ff6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ffc:	e8 41 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a001:	0f 20 d0             	mov    eax,cr2
c001a004:	5a                   	pop    edx
c001a005:	59                   	pop    ecx
c001a006:	50                   	push   eax
c001a007:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a00c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a012:	e8 e5 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a017:	5b                   	pop    ebx
c001a018:	58                   	pop    eax
c001a019:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a01e:	68 70 b5 02 c0       	push   0xc002b570
c001a023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a029:	e8 14 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a02e:	0f 20 d8             	mov    eax,cr3
c001a031:	5a                   	pop    edx
c001a032:	59                   	pop    ecx
c001a033:	50                   	push   eax
c001a034:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a039:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a03f:	e8 b8 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a044:	5b                   	pop    ebx
c001a045:	58                   	pop    eax
c001a046:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a04b:	68 83 b5 02 c0       	push   0xc002b583
c001a050:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a056:	e8 e7 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a05b:	0f 20 e0             	mov    eax,cr4
c001a05e:	5a                   	pop    edx
c001a05f:	59                   	pop    ecx
c001a060:	50                   	push   eax
c001a061:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a066:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a06c:	e8 8b 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a071:	5b                   	pop    ebx
c001a072:	58                   	pop    eax
c001a073:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a078:	68 8d b5 02 c0       	push   0xc002b58d
c001a07d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a083:	e8 ba 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a088:	5a                   	pop    edx
c001a089:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a08e:	59                   	pop    ecx
c001a08f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a095:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a098:	50                   	push   eax
c001a099:	e8 5e 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a09e:	5b                   	pop    ebx
c001a09f:	58                   	pop    eax
c001a0a0:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a0a5:	68 a4 b5 02 c0       	push   0xc002b5a4
c001a0aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b0:	e8 8d 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a0b5:	5a                   	pop    edx
c001a0b6:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a0bb:	59                   	pop    ecx
c001a0bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0c5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a0c8:	50                   	push   eax
c001a0c9:	e8 2e 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a0ce:	5b                   	pop    ebx
c001a0cf:	58                   	pop    eax
c001a0d0:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a0d5:	68 a4 b5 02 c0       	push   0xc002b5a4
c001a0da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e0:	e8 5d 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a0e5:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a0ea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0f3:	8b 12                	mov    edx,DWORD PTR [edx]
c001a0f5:	59                   	pop    ecx
c001a0f6:	5b                   	pop    ebx
c001a0f7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a0fa:	50                   	push   eax
c001a0fb:	e8 fc 66 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a100:	83 c4 10             	add    esp,0x10
c001a103:	b2 fe                	mov    dl,0xfe
c001a105:	e4 60                	in     al,0x60
c001a107:	3c 1c                	cmp    al,0x1c
c001a109:	74 04                	je     c001a10f <Krnl::panic(char const*)+0x33a>
c001a10b:	3c 5a                	cmp    al,0x5a
c001a10d:	75 f6                	jne    c001a105 <Krnl::panic(char const*)+0x330>
c001a10f:	e4 64                	in     al,0x64
c001a111:	a8 02                	test   al,0x2
c001a113:	75 fa                	jne    c001a10f <Krnl::panic(char const*)+0x33a>
c001a115:	88 d0                	mov    al,dl
c001a117:	e6 64                	out    0x64,al
c001a119:	fa                   	cli    
c001a11a:	f4                   	hlt    
c001a11b:	eb e8                	jmp    c001a105 <Krnl::panic(char const*)+0x330>
c001a11d:	50                   	push   eax
c001a11e:	50                   	push   eax
c001a11f:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a124:	68 10 b6 02 c0       	push   0xc002b610
c001a129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a12f:	e8 0e 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a134:	58                   	pop    eax
c001a135:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a13a:	5a                   	pop    edx
c001a13b:	68 1e b5 02 c0       	push   0xc002b51e
c001a140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a146:	e8 f7 66 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a14b:	59                   	pop    ecx
c001a14c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a151:	5b                   	pop    ebx
c001a152:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a155:	83 c0 0c             	add    eax,0xc
c001a158:	50                   	push   eax
c001a159:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001a15e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a164:	e8 d9 66 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	e9 a3 fd ff ff       	jmp    c0019f14 <Krnl::panic(char const*)+0x13f>

c001a171 <Net::switchEndian16(unsigned short)>:
c001a171:	83 ec 04             	sub    esp,0x4
c001a174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a178:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a17c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a180:	c1 f8 08             	sar    eax,0x8
c001a183:	89 c2                	mov    edx,eax
c001a185:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a189:	c1 e0 08             	shl    eax,0x8
c001a18c:	09 d0                	or     eax,edx
c001a18e:	83 c4 04             	add    esp,0x4
c001a191:	c3                   	ret    

c001a192 <Net::switchEndian32(unsigned int)>:
c001a192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a196:	c1 e8 18             	shr    eax,0x18
c001a199:	89 c2                	mov    edx,eax
c001a19b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a19f:	c1 e0 08             	shl    eax,0x8
c001a1a2:	25 00 00 ff 00       	and    eax,0xff0000
c001a1a7:	09 c2                	or     edx,eax
c001a1a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ad:	c1 e8 08             	shr    eax,0x8
c001a1b0:	25 00 ff 00 00       	and    eax,0xff00
c001a1b5:	09 c2                	or     edx,eax
c001a1b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bb:	c1 e0 18             	shl    eax,0x18
c001a1be:	09 d0                	or     eax,edx
c001a1c0:	c3                   	ret    

c001a1c1 <Net::crc32Calc(unsigned char*, int)>:
c001a1c1:	83 ec 10             	sub    esp,0x10
c001a1c4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1c9:	75 07                	jne    c001a1d2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a1cb:	b8 00 00 00 00       	mov    eax,0x0
c001a1d0:	eb 7c                	jmp    c001a24e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a1d2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a1d7:	7f 07                	jg     c001a1e0 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a1d9:	b8 00 00 00 00       	mov    eax,0x0
c001a1de:	eb 6e                	jmp    c001a24e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a1e0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a1e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a1f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1f4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a1f8:	7d 4e                	jge    c001a248 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a1fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a202:	01 d0                	add    eax,edx
c001a204:	8a 00                	mov    al,BYTE PTR [eax]
c001a206:	0f b6 c0             	movzx  eax,al
c001a209:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a20d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a215:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a21a:	7f 26                	jg     c001a242 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a220:	83 e0 01             	and    eax,0x1
c001a223:	74 0d                	je     c001a232 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a229:	d1 e8                	shr    eax,1
c001a22b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a230:	eb 06                	jmp    c001a238 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a236:	d1 e8                	shr    eax,1
c001a238:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a23c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a240:	eb d3                	jmp    c001a215 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a242:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a246:	eb a8                	jmp    c001a1f0 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a24c:	f7 d0                	not    eax
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	c3                   	ret    

c001a252 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a252:	57                   	push   edi
c001a253:	56                   	push   esi
c001a254:	53                   	push   ebx
c001a255:	83 ec 60             	sub    esp,0x60
c001a258:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a25f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a263:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a26b:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a270:	7f 1a                	jg     c001a28c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a272:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a279:	8d 50 01             	lea    edx,[eax+0x1]
c001a27c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a283:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a286:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a28a:	eb df                	jmp    c001a26b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a28c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a293:	8d 50 01             	lea    edx,[eax+0x1]
c001a296:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a29d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a2a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2ab:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a2af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2b3:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a2bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a2cf:	89 c6                	mov    esi,eax
c001a2d1:	89 d7                	mov    edi,edx
c001a2d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2d5:	89 c8                	mov    eax,ecx
c001a2d7:	89 fa                	mov    edx,edi
c001a2d9:	89 f3                	mov    ebx,esi
c001a2db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a2df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a2e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2e6:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a2ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a2f9:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a2fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a301:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a309:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a30d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a311:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a315:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a319:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a31d:	89 c6                	mov    esi,eax
c001a31f:	89 d7                	mov    edi,edx
c001a321:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a323:	89 c8                	mov    eax,ecx
c001a325:	89 fa                	mov    edx,edi
c001a327:	89 f3                	mov    ebx,esi
c001a329:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a32d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a331:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a335:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a33d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a344:	0f b7 c0             	movzx  eax,ax
c001a347:	c1 f8 08             	sar    eax,0x8
c001a34a:	89 c1                	mov    ecx,eax
c001a34c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a353:	8d 50 01             	lea    edx,[eax+0x1]
c001a356:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a35d:	88 ca                	mov    dl,cl
c001a35f:	88 10                	mov    BYTE PTR [eax],dl
c001a361:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a368:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a36f:	8d 48 01             	lea    ecx,[eax+0x1]
c001a372:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a379:	88 10                	mov    BYTE PTR [eax],dl
c001a37b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a37f:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a383:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a38a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a38e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a392:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a396:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a39a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a39e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3a2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a3a6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a3aa:	89 c6                	mov    esi,eax
c001a3ac:	89 d7                	mov    edi,edx
c001a3ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3b0:	89 c8                	mov    eax,ecx
c001a3b2:	89 fa                	mov    edx,edi
c001a3b4:	89 f3                	mov    ebx,esi
c001a3b6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a3be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a3c2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3c6:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a3cd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3d4:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a3d8:	50                   	push   eax
c001a3d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a3dd:	e8 df fd ff ff       	call   c001a1c1 <Net::crc32Calc(unsigned char*, int)>
c001a3e2:	83 c4 08             	add    esp,0x8
c001a3e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a3e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a3ed:	c1 e8 18             	shr    eax,0x18
c001a3f0:	89 c1                	mov    ecx,eax
c001a3f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3f9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3fc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a403:	88 ca                	mov    dl,cl
c001a405:	88 10                	mov    BYTE PTR [eax],dl
c001a407:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a40b:	c1 e8 10             	shr    eax,0x10
c001a40e:	89 c1                	mov    ecx,eax
c001a410:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a417:	8d 50 01             	lea    edx,[eax+0x1]
c001a41a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a421:	88 ca                	mov    dl,cl
c001a423:	88 10                	mov    BYTE PTR [eax],dl
c001a425:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a429:	c1 e8 08             	shr    eax,0x8
c001a42c:	89 c1                	mov    ecx,eax
c001a42e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a435:	8d 50 01             	lea    edx,[eax+0x1]
c001a438:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a43f:	88 ca                	mov    dl,cl
c001a441:	88 10                	mov    BYTE PTR [eax],dl
c001a443:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a44a:	8d 50 01             	lea    edx,[eax+0x1]
c001a44d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a454:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a458:	88 10                	mov    BYTE PTR [eax],dl
c001a45a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a45e:	83 c4 60             	add    esp,0x60
c001a461:	5b                   	pop    ebx
c001a462:	5e                   	pop    esi
c001a463:	5f                   	pop    edi
c001a464:	c3                   	ret    

c001a465 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a465:	57                   	push   edi
c001a466:	56                   	push   esi
c001a467:	53                   	push   ebx
c001a468:	83 ec 70             	sub    esp,0x70
c001a46b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a472:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a476:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a47e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a485:	83 c0 0e             	add    eax,0xe
c001a488:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a48c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a493:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a497:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a49f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4ab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4b3:	89 c6                	mov    esi,eax
c001a4b5:	89 d7                	mov    edi,edx
c001a4b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4b9:	89 c8                	mov    eax,ecx
c001a4bb:	89 fa                	mov    edx,edi
c001a4bd:	89 f3                	mov    ebx,esi
c001a4bf:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a4c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a4c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4cb:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a4d3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4da:	83 c0 08             	add    eax,0x8
c001a4dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a4e1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a4ec:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a4f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a4f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a4fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a500:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a504:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a508:	89 c6                	mov    esi,eax
c001a50a:	89 d7                	mov    edi,edx
c001a50c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a50e:	89 c8                	mov    eax,ecx
c001a510:	89 fa                	mov    edx,edi
c001a512:	89 f3                	mov    ebx,esi
c001a514:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a518:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a51c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a520:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a528:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a52f:	8d 50 01             	lea    edx,[eax+0x1]
c001a532:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a539:	8a 00                	mov    al,BYTE PTR [eax]
c001a53b:	0f b6 c0             	movzx  eax,al
c001a53e:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a543:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a54a:	8d 50 01             	lea    edx,[eax+0x1]
c001a54d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a554:	8a 00                	mov    al,BYTE PTR [eax]
c001a556:	0f b6 c0             	movzx  eax,al
c001a559:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a55e:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a563:	c1 e0 08             	shl    eax,0x8
c001a566:	89 c2                	mov    edx,eax
c001a568:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a56c:	09 d0                	or     eax,edx
c001a56e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a575:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a579:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a581:	75 46                	jne    c001a5c9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a583:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a58a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a58d:	66 3d dc 05          	cmp    ax,0x5dc
c001a591:	77 16                	ja     c001a5a9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a593:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a59a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a59d:	0f b7 c0             	movzx  eax,ax
c001a5a0:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a5a7:	eb 20                	jmp    c001a5c9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5a9:	83 ec 0c             	sub    esp,0xc
c001a5ac:	68 e8 b6 02 c0       	push   0xc002b6e8
c001a5b1:	e8 b3 80 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5c0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a5c4:	e9 17 01 00 00       	jmp    c001a6e0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a5c9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5d0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5d7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a5d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a5dd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a5e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a5e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a5ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a5fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a600:	89 c6                	mov    esi,eax
c001a602:	89 d7                	mov    edi,edx
c001a604:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a606:	89 c8                	mov    eax,ecx
c001a608:	89 fa                	mov    edx,edi
c001a60a:	89 f3                	mov    ebx,esi
c001a60c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a610:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a614:	89 04 24             	mov    DWORD PTR [esp],eax
c001a617:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a61e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a625:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a62c:	8d 50 01             	lea    edx,[eax+0x1]
c001a62f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a636:	8a 00                	mov    al,BYTE PTR [eax]
c001a638:	0f b6 c0             	movzx  eax,al
c001a63b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a63f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a646:	8d 50 01             	lea    edx,[eax+0x1]
c001a649:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a650:	8a 00                	mov    al,BYTE PTR [eax]
c001a652:	0f b6 c0             	movzx  eax,al
c001a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a659:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a660:	8d 50 01             	lea    edx,[eax+0x1]
c001a663:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a66a:	8a 00                	mov    al,BYTE PTR [eax]
c001a66c:	0f b6 c0             	movzx  eax,al
c001a66f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a673:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a67a:	8d 50 01             	lea    edx,[eax+0x1]
c001a67d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a684:	8a 00                	mov    al,BYTE PTR [eax]
c001a686:	0f b6 c0             	movzx  eax,al
c001a689:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a68d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a691:	c1 e0 18             	shl    eax,0x18
c001a694:	89 c2                	mov    edx,eax
c001a696:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a69a:	c1 e0 10             	shl    eax,0x10
c001a69d:	09 c2                	or     edx,eax
c001a69f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a6a3:	c1 e0 08             	shl    eax,0x8
c001a6a6:	09 d0                	or     eax,edx
c001a6a8:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a6ac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a6b0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6b7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a6bb:	83 e8 04             	sub    eax,0x4
c001a6be:	83 ec 08             	sub    esp,0x8
c001a6c1:	50                   	push   eax
c001a6c2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a6c6:	e8 f6 fa ff ff       	call   c001a1c1 <Net::crc32Calc(unsigned char*, int)>
c001a6cb:	83 c4 10             	add    esp,0x10
c001a6ce:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a6d2:	0f 94 c2             	sete   dl
c001a6d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6dc:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a6df:	90                   	nop
c001a6e0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6e7:	83 c4 70             	add    esp,0x70
c001a6ea:	5b                   	pop    ebx
c001a6eb:	5e                   	pop    esi
c001a6ec:	5f                   	pop    edi
c001a6ed:	c2 04 00             	ret    0x4

c001a6f0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a6f0:	55                   	push   ebp
c001a6f1:	57                   	push   edi
c001a6f2:	56                   	push   esi
c001a6f3:	53                   	push   ebx
c001a6f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a6fa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a701:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a703:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a706:	80 fb 40             	cmp    bl,0x40
c001a709:	75 1b                	jne    c001a726 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a70b:	8a 16                	mov    dl,BYTE PTR [esi]
c001a70d:	84 d2                	test   dl,dl
c001a70f:	0f 84 f1 00 00 00    	je     c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a715:	8d 46 01             	lea    eax,[esi+0x1]
c001a718:	80 fa 3a             	cmp    dl,0x3a
c001a71b:	74 04                	je     c001a721 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a71d:	89 c6                	mov    esi,eax
c001a71f:	eb ea                	jmp    c001a70b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a721:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a724:	89 c6                	mov    esi,eax
c001a726:	50                   	push   eax
c001a727:	6a 40                	push   0x40
c001a729:	6a 00                	push   0x0
c001a72b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a72f:	50                   	push   eax
c001a730:	e8 1b 60 fe ff       	call   c0000750 <memset>
c001a735:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a73c:	31 c0                	xor    eax,eax
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a743:	84 c9                	test   cl,cl
c001a745:	0f 84 bb 00 00 00    	je     c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a74b:	3d c7 00 00 00       	cmp    eax,0xc7
c001a750:	0f 8f b0 00 00 00    	jg     c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a756:	80 f9 0a             	cmp    cl,0xa
c001a759:	0f 85 98 00 00 00    	jne    c001a7f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a75f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a764:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a768:	a8 df                	test   al,0xdf
c001a76a:	0f 94 c1             	sete   cl
c001a76d:	3c 23                	cmp    al,0x23
c001a76f:	0f 94 c2             	sete   dl
c001a772:	08 d1                	or     cl,dl
c001a774:	75 4a                	jne    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a776:	8d 50 f7             	lea    edx,[eax-0x9]
c001a779:	80 fa 01             	cmp    dl,0x1
c001a77c:	76 42                	jbe    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a77e:	3c 5b                	cmp    al,0x5b
c001a780:	75 42                	jne    c001a7c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a782:	80 fb 40             	cmp    bl,0x40
c001a785:	75 39                	jne    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a787:	83 ec 0c             	sub    esp,0xc
c001a78a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a78e:	52                   	push   edx
c001a78f:	e8 d8 5f fe ff       	call   c000076c <strlen>
c001a794:	83 c4 10             	add    esp,0x10
c001a797:	83 f8 3f             	cmp    eax,0x3f
c001a79a:	77 6a                	ja     c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a79c:	50                   	push   eax
c001a79d:	50                   	push   eax
c001a79e:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a7a2:	52                   	push   edx
c001a7a3:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7a7:	52                   	push   edx
c001a7a8:	e8 5f 60 fe ff       	call   c000080c <strcpy>
c001a7ad:	58                   	pop    eax
c001a7ae:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7b2:	52                   	push   edx
c001a7b3:	e8 b4 5f fe ff       	call   c000076c <strlen>
c001a7b8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	31 d2                	xor    edx,edx
c001a7c2:	eb 3a                	jmp    c001a7fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a7c4:	80 fb 40             	cmp    bl,0x40
c001a7c7:	74 06                	je     c001a7cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a7c9:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a7cd:	eb 20                	jmp    c001a7ef <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a7cf:	50                   	push   eax
c001a7d0:	50                   	push   eax
c001a7d1:	55                   	push   ebp
c001a7d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7d6:	50                   	push   eax
c001a7d7:	e8 bc 60 fe ff       	call   c0000898 <strcmp>
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	85 c0                	test   eax,eax
c001a7e1:	75 dd                	jne    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7e3:	eb e4                	jmp    c001a7c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a7e5:	8d 50 01             	lea    edx,[eax+0x1]
c001a7e8:	80 f9 3d             	cmp    cl,0x3d
c001a7eb:	74 1d                	je     c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a7ed:	89 d0                	mov    eax,edx
c001a7ef:	8a 08                	mov    cl,BYTE PTR [eax]
c001a7f1:	84 c9                	test   cl,cl
c001a7f3:	75 f0                	jne    c001a7e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a7f5:	eb 0f                	jmp    c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7f7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7fa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a7fe:	47                   	inc    edi
c001a7ff:	89 d0                	mov    eax,edx
c001a801:	e9 3b ff ff ff       	jmp    c001a741 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a806:	31 c0                	xor    eax,eax
c001a808:	eb 33                	jmp    c001a83d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a80a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a80e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a811:	50                   	push   eax
c001a812:	50                   	push   eax
c001a813:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a817:	50                   	push   eax
c001a818:	56                   	push   esi
c001a819:	e8 7a 60 fe ff       	call   c0000898 <strcmp>
c001a81e:	83 c4 10             	add    esp,0x10
c001a821:	85 c0                	test   eax,eax
c001a823:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a827:	75 97                	jne    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a829:	51                   	push   ecx
c001a82a:	51                   	push   ecx
c001a82b:	52                   	push   edx
c001a82c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a833:	e8 d4 5f fe ff       	call   c000080c <strcpy>
c001a838:	83 c4 10             	add    esp,0x10
c001a83b:	b0 01                	mov    al,0x1
c001a83d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a843:	5b                   	pop    ebx
c001a844:	5e                   	pop    esi
c001a845:	5f                   	pop    edi
c001a846:	5d                   	pop    ebp
c001a847:	c3                   	ret    

c001a848 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a848:	57                   	push   edi
c001a849:	56                   	push   esi
c001a84a:	53                   	push   ebx
c001a84b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a851:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a858:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a85f:	53                   	push   ebx
c001a860:	e8 07 5f fe ff       	call   c000076c <strlen>
c001a865:	89 34 24             	mov    DWORD PTR [esp],esi
c001a868:	89 c7                	mov    edi,eax
c001a86a:	e8 fd 5e fe ff       	call   c000076c <strlen>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a876:	3d ff 00 00 00       	cmp    eax,0xff
c001a87b:	0f 87 d3 00 00 00    	ja     c001a954 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a881:	57                   	push   edi
c001a882:	57                   	push   edi
c001a883:	56                   	push   esi
c001a884:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a888:	56                   	push   esi
c001a889:	e8 7e 5f fe ff       	call   c000080c <strcpy>
c001a88e:	58                   	pop    eax
c001a88f:	5a                   	pop    edx
c001a890:	68 8a ba 02 c0       	push   0xc002ba8a
c001a895:	56                   	push   esi
c001a896:	e8 b1 60 fe ff       	call   c000094c <strcat>
c001a89b:	59                   	pop    ecx
c001a89c:	5f                   	pop    edi
c001a89d:	53                   	push   ebx
c001a89e:	56                   	push   esi
c001a89f:	e8 a8 60 fe ff       	call   c000094c <strcat>
c001a8a4:	58                   	pop    eax
c001a8a5:	5a                   	pop    edx
c001a8a6:	68 34 b7 02 c0       	push   0xc002b734
c001a8ab:	56                   	push   esi
c001a8ac:	e8 9b 60 fe ff       	call   c000094c <strcat>
c001a8b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a8b8:	e8 dc 4c ff ff       	call   c000f599 <malloc>
c001a8bd:	83 c4 0c             	add    esp,0xc
c001a8c0:	89 c3                	mov    ebx,eax
c001a8c2:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c001a8c8:	56                   	push   esi
c001a8c9:	50                   	push   eax
c001a8ca:	e8 f9 82 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	85 db                	test   ebx,ebx
c001a8d4:	74 7e                	je     c001a954 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8d6:	51                   	push   ecx
c001a8d7:	51                   	push   ecx
c001a8d8:	6a 01                	push   0x1
c001a8da:	53                   	push   ebx
c001a8db:	e8 4c 83 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	85 c0                	test   eax,eax
c001a8e5:	74 08                	je     c001a8ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a8e7:	83 ec 0c             	sub    esp,0xc
c001a8ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8ec:	53                   	push   ebx
c001a8ed:	eb 5f                	jmp    c001a94e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a8ef:	52                   	push   edx
c001a8f0:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a8f4:	50                   	push   eax
c001a8f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a8f9:	50                   	push   eax
c001a8fa:	53                   	push   ebx
c001a8fb:	e8 d8 85 ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c001a900:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a904:	83 c4 10             	add    esp,0x10
c001a907:	89 c1                	mov    ecx,eax
c001a909:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a90d:	74 31                	je     c001a940 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a90f:	83 ec 0c             	sub    esp,0xc
c001a912:	50                   	push   eax
c001a913:	e8 81 4c ff ff       	call   c000f599 <malloc>
c001a918:	89 c6                	mov    esi,eax
c001a91a:	58                   	pop    eax
c001a91b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a91d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a921:	52                   	push   edx
c001a922:	56                   	push   esi
c001a923:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a927:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a92b:	53                   	push   ebx
c001a92c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a92f:	83 c4 20             	add    esp,0x20
c001a932:	85 c0                	test   eax,eax
c001a934:	75 0a                	jne    c001a940 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a93a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a93e:	74 18                	je     c001a958 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a940:	83 ec 0c             	sub    esp,0xc
c001a943:	53                   	push   ebx
c001a944:	e8 41 83 ff ff       	call   c0012c8a <File::close()>
c001a949:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a94b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a94e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a951:	83 c4 10             	add    esp,0x10
c001a954:	31 c0                	xor    eax,eax
c001a956:	eb 3b                	jmp    c001a993 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	53                   	push   ebx
c001a95c:	e8 29 83 ff ff       	call   c0012c8a <File::close()>
c001a961:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a966:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a969:	83 c4 0c             	add    esp,0xc
c001a96c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a973:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a97a:	56                   	push   esi
c001a97b:	e8 70 fd ff ff       	call   c001a6f0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a980:	89 34 24             	mov    DWORD PTR [esp],esi
c001a983:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a987:	e8 1d 4c ff ff       	call   c000f5a9 <free>
c001a98c:	83 c4 10             	add    esp,0x10
c001a98f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a993:	81 c4 20 01 00 00    	add    esp,0x120
c001a999:	5b                   	pop    ebx
c001a99a:	5e                   	pop    esi
c001a99b:	5f                   	pop    edi
c001a99c:	c3                   	ret    

c001a99d <Reg::getLine(char*, char*, char*)>:
c001a99d:	57                   	push   edi
c001a99e:	56                   	push   esi
c001a99f:	53                   	push   ebx
c001a9a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9a8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9ac:	57                   	push   edi
c001a9ad:	56                   	push   esi
c001a9ae:	53                   	push   ebx
c001a9af:	68 39 b7 02 c0       	push   0xc002b739
c001a9b4:	e8 8f fe ff ff       	call   c001a848 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a9b9:	83 c4 10             	add    esp,0x10
c001a9bc:	84 c0                	test   al,al
c001a9be:	75 10                	jne    c001a9d0 <Reg::getLine(char*, char*, char*)+0x33>
c001a9c0:	57                   	push   edi
c001a9c1:	56                   	push   esi
c001a9c2:	53                   	push   ebx
c001a9c3:	68 5e b7 02 c0       	push   0xc002b75e
c001a9c8:	e8 7b fe ff ff       	call   c001a848 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	5b                   	pop    ebx
c001a9d1:	5e                   	pop    esi
c001a9d2:	5f                   	pop    edi
c001a9d3:	c3                   	ret    

c001a9d4 <Reg::readInt(char*, char*, int*)>:
c001a9d4:	55                   	push   ebp
c001a9d5:	57                   	push   edi
c001a9d6:	56                   	push   esi
c001a9d7:	53                   	push   ebx
c001a9d8:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a9de:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a9e2:	57                   	push   edi
c001a9e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a9ea:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a9f1:	e8 a7 ff ff ff       	call   c001a99d <Reg::getLine(char*, char*, char*)>
c001a9f6:	83 c4 10             	add    esp,0x10
c001a9f9:	84 c0                	test   al,al
c001a9fb:	0f 84 b3 00 00 00    	je     c001aab4 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa01:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa05:	80 fa 2b             	cmp    dl,0x2b
c001aa08:	74 0c                	je     c001aa16 <Reg::readInt(char*, char*, int*)+0x42>
c001aa0a:	80 fa 2d             	cmp    dl,0x2d
c001aa0d:	75 0e                	jne    c001aa1d <Reg::readInt(char*, char*, int*)+0x49>
c001aa0f:	ba 01 00 00 00       	mov    edx,0x1
c001aa14:	eb 0b                	jmp    c001aa21 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa16:	ba 01 00 00 00       	mov    edx,0x1
c001aa1b:	eb 02                	jmp    c001aa1f <Reg::readInt(char*, char*, int*)+0x4b>
c001aa1d:	31 d2                	xor    edx,edx
c001aa1f:	31 c0                	xor    eax,eax
c001aa21:	be 0a 00 00 00       	mov    esi,0xa
c001aa26:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa2b:	75 20                	jne    c001aa4d <Reg::readInt(char*, char*, int*)+0x79>
c001aa2d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa31:	80 f9 78             	cmp    cl,0x78
c001aa34:	75 0a                	jne    c001aa40 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa36:	83 c2 02             	add    edx,0x2
c001aa39:	be 10 00 00 00       	mov    esi,0x10
c001aa3e:	eb 0d                	jmp    c001aa4d <Reg::readInt(char*, char*, int*)+0x79>
c001aa40:	80 f9 62             	cmp    cl,0x62
c001aa43:	75 08                	jne    c001aa4d <Reg::readInt(char*, char*, int*)+0x79>
c001aa45:	83 c2 02             	add    edx,0x2
c001aa48:	be 02 00 00 00       	mov    esi,0x2
c001aa4d:	01 d7                	add    edi,edx
c001aa4f:	31 d2                	xor    edx,edx
c001aa51:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aa53:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aa57:	80 fb 0d             	cmp    bl,0xd
c001aa5a:	0f 94 c3             	sete   bl
c001aa5d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aa62:	0f 94 c1             	sete   cl
c001aa65:	08 cb                	or     bl,cl
c001aa67:	75 3a                	jne    c001aaa3 <Reg::readInt(char*, char*, int*)+0xcf>
c001aa69:	0f af d6             	imul   edx,esi
c001aa6c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aa71:	83 fe 10             	cmp    esi,0x10
c001aa74:	75 26                	jne    c001aa9c <Reg::readInt(char*, char*, int*)+0xc8>
c001aa76:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aa7a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aa7d:	89 e9                	mov    ecx,ebp
c001aa7f:	80 f9 05             	cmp    cl,0x5
c001aa82:	77 06                	ja     c001aa8a <Reg::readInt(char*, char*, int*)+0xb6>
c001aa84:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aa88:	eb 16                	jmp    c001aaa0 <Reg::readInt(char*, char*, int*)+0xcc>
c001aa8a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aa8e:	83 e9 61             	sub    ecx,0x61
c001aa91:	80 f9 05             	cmp    cl,0x5
c001aa94:	77 06                	ja     c001aa9c <Reg::readInt(char*, char*, int*)+0xc8>
c001aa96:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aa9a:	eb 04                	jmp    c001aaa0 <Reg::readInt(char*, char*, int*)+0xcc>
c001aa9c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aaa0:	47                   	inc    edi
c001aaa1:	eb ae                	jmp    c001aa51 <Reg::readInt(char*, char*, int*)+0x7d>
c001aaa3:	84 c0                	test   al,al
c001aaa5:	74 02                	je     c001aaa9 <Reg::readInt(char*, char*, int*)+0xd5>
c001aaa7:	f7 da                	neg    edx
c001aaa9:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aab0:	89 10                	mov    DWORD PTR [eax],edx
c001aab2:	88 d8                	mov    al,bl
c001aab4:	81 c4 ec 00 00 00    	add    esp,0xec
c001aaba:	5b                   	pop    ebx
c001aabb:	5e                   	pop    esi
c001aabc:	5f                   	pop    edi
c001aabd:	5d                   	pop    ebp
c001aabe:	c3                   	ret    

c001aabf <Reg::readString(char*, char*, char*, int)>:
c001aabf:	57                   	push   edi
c001aac0:	56                   	push   esi
c001aac1:	53                   	push   ebx
c001aac2:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aac8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aacf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aad3:	57                   	push   edi
c001aad4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aadb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aae2:	e8 b6 fe ff ff       	call   c001a99d <Reg::getLine(char*, char*, char*)>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	89 c6                	mov    esi,eax
c001aaec:	84 c0                	test   al,al
c001aaee:	74 44                	je     c001ab34 <Reg::readString(char*, char*, char*, int)+0x75>
c001aaf0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001aaf7:	31 c0                	xor    eax,eax
c001aaf9:	4a                   	dec    edx
c001aafa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aafd:	84 c9                	test   cl,cl
c001aaff:	74 0f                	je     c001ab10 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab01:	39 c2                	cmp    edx,eax
c001ab03:	7e 0b                	jle    c001ab10 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab05:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab08:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab0d:	40                   	inc    eax
c001ab0e:	eb ea                	jmp    c001aafa <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab10:	83 ec 0c             	sub    esp,0xc
c001ab13:	53                   	push   ebx
c001ab14:	e8 53 5c fe ff       	call   c000076c <strlen>
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab21:	75 11                	jne    c001ab34 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab23:	83 ec 0c             	sub    esp,0xc
c001ab26:	53                   	push   ebx
c001ab27:	e8 40 5c fe ff       	call   c000076c <strlen>
c001ab2c:	83 c4 10             	add    esp,0x10
c001ab2f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab34:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab3a:	89 f0                	mov    eax,esi
c001ab3c:	5b                   	pop    ebx
c001ab3d:	5e                   	pop    esi
c001ab3e:	5f                   	pop    edi
c001ab3f:	c3                   	ret    

c001ab40 <Reg::readBool(char*, char*, bool*)>:
c001ab40:	83 ec 20             	sub    esp,0x20
c001ab43:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab47:	50                   	push   eax
c001ab48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab50:	e8 7f fe ff ff       	call   c001a9d4 <Reg::readInt(char*, char*, int*)>
c001ab55:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab5a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab5e:	0f 95 02             	setne  BYTE PTR [edx]
c001ab61:	83 c4 2c             	add    esp,0x2c
c001ab64:	c3                   	ret    

c001ab65 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ab65:	53                   	push   ebx
c001ab66:	83 ec 1c             	sub    esp,0x1c
c001ab69:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ab6d:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab71:	50                   	push   eax
c001ab72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab7a:	e8 c1 ff ff ff       	call   c001ab40 <Reg::readBool(char*, char*, bool*)>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	84 c0                	test   al,al
c001ab84:	74 04                	je     c001ab8a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ab86:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ab8a:	88 d8                	mov    al,bl
c001ab8c:	83 c4 18             	add    esp,0x18
c001ab8f:	5b                   	pop    ebx
c001ab90:	c3                   	ret    

c001ab91 <Reg::readIntWithDefault(char*, char*, int)>:
c001ab91:	53                   	push   ebx
c001ab92:	83 ec 1c             	sub    esp,0x1c
c001ab95:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ab99:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab9d:	50                   	push   eax
c001ab9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aba6:	e8 29 fe ff ff       	call   c001a9d4 <Reg::readInt(char*, char*, int*)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	84 c0                	test   al,al
c001abb0:	74 04                	je     c001abb6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001abb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001abb6:	89 d8                	mov    eax,ebx
c001abb8:	83 c4 18             	add    esp,0x18
c001abbb:	5b                   	pop    ebx
c001abbc:	c3                   	ret    

c001abbd <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001abbd:	57                   	push   edi
c001abbe:	56                   	push   esi
c001abbf:	56                   	push   esi
c001abc0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001abc4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001abc8:	56                   	push   esi
c001abc9:	57                   	push   edi
c001abca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd2:	e8 e8 fe ff ff       	call   c001aabf <Reg::readString(char*, char*, char*, int)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	84 c0                	test   al,al
c001abdc:	75 1a                	jne    c001abf8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001abde:	51                   	push   ecx
c001abdf:	56                   	push   esi
c001abe0:	6a 00                	push   0x0
c001abe2:	57                   	push   edi
c001abe3:	e8 68 5b fe ff       	call   c0000750 <memset>
c001abe8:	8d 4e ff             	lea    ecx,[esi-0x1]
c001abeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001abef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001abf8:	89 f8                	mov    eax,edi
c001abfa:	5a                   	pop    edx
c001abfb:	5e                   	pop    esi
c001abfc:	5f                   	pop    edi
c001abfd:	c3                   	ret    

c001abfe <Sys::eject(regs*)>:
c001abfe:	83 ec 0c             	sub    esp,0xc
c001ac01:	83 ca ff             	or     edx,0xffffffff
c001ac04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac08:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac10:	83 e9 41             	sub    ecx,0x41
c001ac13:	83 f9 19             	cmp    ecx,0x19
c001ac16:	77 18                	ja     c001ac30 <Sys::eject(regs*)+0x32>
c001ac18:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c001ac1f:	85 c9                	test   ecx,ecx
c001ac21:	74 0d                	je     c001ac30 <Sys::eject(regs*)+0x32>
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	51                   	push   ecx
c001ac27:	e8 28 b3 ff ff       	call   c0015f54 <LogicalDisk::eject()>
c001ac2c:	83 c4 10             	add    esp,0x10
c001ac2f:	99                   	cdq    
c001ac30:	83 c4 0c             	add    esp,0xc
c001ac33:	c3                   	ret    

c001ac34 <Sys::exit(regs*)>:
c001ac34:	83 ec 18             	sub    esp,0x18
c001ac37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac3e:	e8 bc 35 00 00       	call   c001e1ff <terminateTask(int)>
c001ac43:	83 c8 ff             	or     eax,0xffffffff
c001ac46:	83 c4 1c             	add    esp,0x1c
c001ac49:	89 c2                	mov    edx,eax
c001ac4b:	c3                   	ret    

c001ac4c <Sys::getCwd(regs*)>:
c001ac4c:	83 ec 10             	sub    esp,0x10
c001ac4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac53:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ac56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac5e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac61:	e8 64 7d ff ff       	call   c00129ca <Fs::getcwd(Process*, char*, int)>
c001ac66:	83 c4 1c             	add    esp,0x1c
c001ac69:	99                   	cdq    
c001ac6a:	c3                   	ret    

c001ac6b <Sys::getPID(regs*)>:
c001ac6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac75:	99                   	cdq    
c001ac76:	c3                   	ret    

c001ac77 <Sys::getRAMData(regs*)>:
c001ac77:	8b 0d d4 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8d4
c001ac7d:	6b 05 d0 d8 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d8d0,0x64
c001ac84:	99                   	cdq    
c001ac85:	f7 f9                	idiv   ecx
c001ac87:	c1 e0 18             	shl    eax,0x18
c001ac8a:	09 c8                	or     eax,ecx
c001ac8c:	99                   	cdq    
c001ac8d:	c3                   	ret    

c001ac8e <Sys::getVGAPtr(regs*)>:
c001ac8e:	55                   	push   ebp
c001ac8f:	57                   	push   edi
c001ac90:	56                   	push   esi
c001ac91:	53                   	push   ebx
c001ac92:	83 ec 18             	sub    esp,0x18
c001ac95:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac99:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ac9c:	e8 aa 30 00 00       	call   c001dd4b <Thr::processFromPID(int)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	89 c1                	mov    ecx,eax
c001aca6:	b8 01 00 00 00       	mov    eax,0x1
c001acab:	85 c9                	test   ecx,ecx
c001acad:	74 59                	je     c001ad08 <Sys::getVGAPtr(regs*)+0x7a>
c001acaf:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001acb5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001acb9:	74 0c                	je     c001acc7 <Sys::getVGAPtr(regs*)+0x39>
c001acbb:	83 ec 0c             	sub    esp,0xc
c001acbe:	53                   	push   ebx
c001acbf:	e8 71 56 ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001acca:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001accd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001acd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acd4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001acd7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001acda:	81 c3 82 00 00 00    	add    ebx,0x82
c001ace0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ace6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ace9:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001acec:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001acf2:	50                   	push   eax
c001acf3:	50                   	push   eax
c001acf4:	53                   	push   ebx
c001acf5:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001acf8:	05 a8 0f 00 00       	add    eax,0xfa8
c001acfd:	50                   	push   eax
c001acfe:	e8 09 5b fe ff       	call   c000080c <strcpy>
c001ad03:	83 c4 10             	add    esp,0x10
c001ad06:	31 c0                	xor    eax,eax
c001ad08:	83 c4 0c             	add    esp,0xc
c001ad0b:	31 d2                	xor    edx,edx
c001ad0d:	5b                   	pop    ebx
c001ad0e:	5e                   	pop    esi
c001ad0f:	5f                   	pop    edi
c001ad10:	5d                   	pop    ebp
c001ad11:	c3                   	ret    

c001ad12 <Sys::loadDLL(regs*)>:
c001ad12:	56                   	push   esi
c001ad13:	53                   	push   ebx
c001ad14:	31 d2                	xor    edx,edx
c001ad16:	51                   	push   ecx
c001ad17:	b8 01 00 00 00       	mov    eax,0x1
c001ad1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad20:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad24:	0f 84 8c 00 00 00    	je     c001adb6 <Sys::loadDLL(regs*)+0xa4>
c001ad2a:	83 ec 0c             	sub    esp,0xc
c001ad2d:	68 14 01 00 00       	push   0x114
c001ad32:	e8 62 48 ff ff       	call   c000f599 <malloc>
c001ad37:	83 c4 0c             	add    esp,0xc
c001ad3a:	89 c3                	mov    ebx,eax
c001ad3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad41:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad44:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad47:	53                   	push   ebx
c001ad48:	e8 7b 7e ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	31 d2                	xor    edx,edx
c001ad52:	b8 02 00 00 00       	mov    eax,0x2
c001ad57:	85 db                	test   ebx,ebx
c001ad59:	74 5b                	je     c001adb6 <Sys::loadDLL(regs*)+0xa4>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	53                   	push   ebx
c001ad5f:	e8 36 81 ff ff       	call   c0012e9a <File::exists()>
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	84 c0                	test   al,al
c001ad69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad6b:	75 11                	jne    c001ad7e <Sys::loadDLL(regs*)+0x6c>
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	53                   	push   ebx
c001ad71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad74:	83 c4 10             	add    esp,0x10
c001ad77:	b8 03 00 00 00       	mov    eax,0x3
c001ad7c:	eb 36                	jmp    c001adb4 <Sys::loadDLL(regs*)+0xa2>
c001ad7e:	83 ec 0c             	sub    esp,0xc
c001ad81:	53                   	push   ebx
c001ad82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad85:	58                   	pop    eax
c001ad86:	5a                   	pop    edx
c001ad87:	6a 00                	push   0x0
c001ad89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad8c:	e8 0e 22 00 00       	call   c001cf9f <Thr::loadDLL(char const*, bool)>
c001ad91:	83 c4 10             	add    esp,0x10
c001ad94:	89 c1                	mov    ecx,eax
c001ad96:	31 d2                	xor    edx,edx
c001ad98:	b8 04 00 00 00       	mov    eax,0x4
c001ad9d:	85 c9                	test   ecx,ecx
c001ad9f:	74 15                	je     c001adb6 <Sys::loadDLL(regs*)+0xa4>
c001ada1:	53                   	push   ebx
c001ada2:	53                   	push   ebx
c001ada3:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c001ada9:	51                   	push   ecx
c001adaa:	e8 1b 24 00 00       	call   c001d1ca <Thr::executeDLL(unsigned long, void*)>
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	31 c0                	xor    eax,eax
c001adb4:	31 d2                	xor    edx,edx
c001adb6:	59                   	pop    ecx
c001adb7:	5b                   	pop    ebx
c001adb8:	5e                   	pop    esi
c001adb9:	c3                   	ret    

c001adba <Sys::read(regs*)>:
c001adba:	57                   	push   edi
c001adbb:	56                   	push   esi
c001adbc:	53                   	push   ebx
c001adbd:	83 ec 10             	sub    esp,0x10
c001adc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adc7:	83 f8 02             	cmp    eax,0x2
c001adca:	77 10                	ja     c001addc <Sys::read(regs*)+0x22>
c001adcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001add4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001adda:	eb 0e                	jmp    c001adea <Sys::read(regs*)+0x30>
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	50                   	push   eax
c001ade0:	e8 c4 62 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	89 c1                	mov    ecx,eax
c001adea:	83 c8 ff             	or     eax,0xffffffff
c001aded:	85 c9                	test   ecx,ecx
c001adef:	89 c2                	mov    edx,eax
c001adf1:	74 28                	je     c001ae1b <Sys::read(regs*)+0x61>
c001adf3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adfb:	31 ff                	xor    edi,edi
c001adfd:	83 ec 0c             	sub    esp,0xc
c001ae00:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae02:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae06:	52                   	push   edx
c001ae07:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae0a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae0d:	57                   	push   edi
c001ae0e:	56                   	push   esi
c001ae0f:	51                   	push   ecx
c001ae10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae17:	83 c4 20             	add    esp,0x20
c001ae1a:	99                   	cdq    
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	5b                   	pop    ebx
c001ae1f:	5e                   	pop    esi
c001ae20:	5f                   	pop    edi
c001ae21:	c3                   	ret    

c001ae22 <Sys::sbrk(regs*)>:
c001ae22:	56                   	push   esi
c001ae23:	53                   	push   ebx
c001ae24:	50                   	push   eax
c001ae25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae31:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae34:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae3a:	85 db                	test   ebx,ebx
c001ae3c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae3f:	74 02                	je     c001ae43 <Sys::sbrk(regs*)+0x21>
c001ae41:	79 06                	jns    c001ae49 <Sys::sbrk(regs*)+0x27>
c001ae43:	89 f0                	mov    eax,esi
c001ae45:	31 d2                	xor    edx,edx
c001ae47:	eb 2a                	jmp    c001ae73 <Sys::sbrk(regs*)+0x51>
c001ae49:	83 c8 ff             	or     eax,0xffffffff
c001ae4c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae52:	89 c2                	mov    edx,eax
c001ae54:	77 1d                	ja     c001ae73 <Sys::sbrk(regs*)+0x51>
c001ae56:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae5c:	50                   	push   eax
c001ae5d:	c1 ea 0c             	shr    edx,0xc
c001ae60:	68 07 0c 00 00       	push   0xc07
c001ae65:	52                   	push   edx
c001ae66:	51                   	push   ecx
c001ae67:	e8 52 6c ff ff       	call   c0011abe <VAS::allocatePages(int, int)>
c001ae6c:	89 f0                	mov    eax,esi
c001ae6e:	31 d2                	xor    edx,edx
c001ae70:	83 c4 10             	add    esp,0x10
c001ae73:	59                   	pop    ecx
c001ae74:	5b                   	pop    ebx
c001ae75:	5e                   	pop    esi
c001ae76:	c3                   	ret    

c001ae77 <Sys::setCwd(regs*)>:
c001ae77:	83 ec 14             	sub    esp,0x14
c001ae7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae89:	e8 ab 80 ff ff       	call   c0012f39 <Fs::setcwd(Process*, char*)>
c001ae8e:	83 c4 1c             	add    esp,0x1c
c001ae91:	99                   	cdq    
c001ae92:	c3                   	ret    

c001ae93 <Sys::setTime(regs*)>:
c001ae93:	55                   	push   ebp
c001ae94:	31 c9                	xor    ecx,ecx
c001ae96:	57                   	push   edi
c001ae97:	bd 0c 00 00 00       	mov    ebp,0xc
c001ae9c:	56                   	push   esi
c001ae9d:	53                   	push   ebx
c001ae9e:	31 db                	xor    ebx,ebx
c001aea0:	83 ec 10             	sub    esp,0x10
c001aea3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aea7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001aeaa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001aead:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001aeb0:	89 c2                	mov    edx,eax
c001aeb2:	66 81 ef 6c 07       	sub    di,0x76c
c001aeb7:	83 e2 1f             	and    edx,0x1f
c001aeba:	c1 e7 10             	shl    edi,0x10
c001aebd:	42                   	inc    edx
c001aebe:	c1 e8 05             	shr    eax,0x5
c001aec1:	88 d1                	mov    cl,dl
c001aec3:	31 d2                	xor    edx,edx
c001aec5:	f7 f5                	div    ebp
c001aec7:	89 dd                	mov    ebp,ebx
c001aec9:	88 d5                	mov    ch,dl
c001aecb:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001aed1:	0f b7 c1             	movzx  eax,cx
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	09 f8                	or     eax,edi
c001aed8:	bf 3c 00 00 00       	mov    edi,0x3c
c001aedd:	89 c1                	mov    ecx,eax
c001aedf:	89 f0                	mov    eax,esi
c001aee1:	f7 f7                	div    edi
c001aee3:	c1 e2 10             	shl    edx,0x10
c001aee6:	09 d5                	or     ebp,edx
c001aee8:	31 d2                	xor    edx,edx
c001aeea:	89 eb                	mov    ebx,ebp
c001aeec:	f7 f7                	div    edi
c001aeee:	bf 10 0e 00 00       	mov    edi,0xe10
c001aef3:	88 d7                	mov    bh,dl
c001aef5:	89 f0                	mov    eax,esi
c001aef7:	31 d2                	xor    edx,edx
c001aef9:	f7 f7                	div    edi
c001aefb:	bf 18 00 00 00       	mov    edi,0x18
c001af00:	31 d2                	xor    edx,edx
c001af02:	f7 f7                	div    edi
c001af04:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001af09:	88 d3                	mov    bl,dl
c001af0b:	53                   	push   ebx
c001af0c:	51                   	push   ecx
c001af0d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af13:	e8 6a 88 ff ff       	call   c0013782 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af18:	83 c4 1c             	add    esp,0x1c
c001af1b:	83 f0 01             	xor    eax,0x1
c001af1e:	5b                   	pop    ebx
c001af1f:	0f b6 c0             	movzx  eax,al
c001af22:	5e                   	pop    esi
c001af23:	31 d2                	xor    edx,edx
c001af25:	5f                   	pop    edi
c001af26:	5d                   	pop    ebp
c001af27:	c3                   	ret    

c001af28 <Sys::timezone(regs*)>:
c001af28:	53                   	push   ebx
c001af29:	83 ec 08             	sub    esp,0x8
c001af2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af30:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af34:	75 17                	jne    c001af4d <Sys::timezone(regs*)+0x25>
c001af36:	83 ec 0c             	sub    esp,0xc
c001af39:	68 79 b7 02 c0       	push   0xc002b779
c001af3e:	e8 26 77 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001af43:	83 c8 ff             	or     eax,0xffffffff
c001af46:	83 c4 10             	add    esp,0x10
c001af49:	89 c2                	mov    edx,eax
c001af4b:	eb 20                	jmp    c001af6d <Sys::timezone(regs*)+0x45>
c001af4d:	83 ec 0c             	sub    esp,0xc
c001af50:	68 8e b7 02 c0       	push   0xc002b78e
c001af55:	e8 0f 77 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001af5a:	58                   	pop    eax
c001af5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001af5e:	e8 81 85 ff ff       	call   c00134e4 <User::loadClockSettings(int)>
c001af63:	83 c4 10             	add    esp,0x10
c001af66:	b8 01 00 00 00       	mov    eax,0x1
c001af6b:	31 d2                	xor    edx,edx
c001af6d:	83 c4 08             	add    esp,0x8
c001af70:	5b                   	pop    ebx
c001af71:	c3                   	ret    

c001af72 <Sys::write(regs*)>:
c001af72:	57                   	push   edi
c001af73:	56                   	push   esi
c001af74:	53                   	push   ebx
c001af75:	83 ec 10             	sub    esp,0x10
c001af78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af7f:	83 f8 02             	cmp    eax,0x2
c001af82:	77 10                	ja     c001af94 <Sys::write(regs*)+0x22>
c001af84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af8c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af92:	eb 0e                	jmp    c001afa2 <Sys::write(regs*)+0x30>
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	50                   	push   eax
c001af98:	e8 0c 61 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	89 c1                	mov    ecx,eax
c001afa2:	83 c8 ff             	or     eax,0xffffffff
c001afa5:	85 c9                	test   ecx,ecx
c001afa7:	89 c2                	mov    edx,eax
c001afa9:	74 28                	je     c001afd3 <Sys::write(regs*)+0x61>
c001afab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afb3:	31 ff                	xor    edi,edi
c001afb5:	83 ec 0c             	sub    esp,0xc
c001afb8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001afba:	8d 54 24 18          	lea    edx,[esp+0x18]
c001afbe:	52                   	push   edx
c001afbf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afc2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001afc5:	57                   	push   edi
c001afc6:	56                   	push   esi
c001afc7:	51                   	push   ecx
c001afc8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001afcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afcf:	83 c4 20             	add    esp,0x20
c001afd2:	99                   	cdq    
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	5b                   	pop    ebx
c001afd7:	5e                   	pop    esi
c001afd8:	5f                   	pop    edi
c001afd9:	c3                   	ret    

c001afda <Sys::wsbe(regs*)>:
c001afda:	57                   	push   edi
c001afdb:	b9 0b 00 00 00       	mov    ecx,0xb
c001afe0:	56                   	push   esi
c001afe1:	be cd b7 02 c0       	mov    esi,0xc002b7cd
c001afe6:	53                   	push   ebx
c001afe7:	83 ec 30             	sub    esp,0x30
c001afea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001afee:	fc                   	cld    
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aff4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001aff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001affd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b000:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b006:	8b 06                	mov    eax,DWORD PTR [esi]
c001b008:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b00b:	57                   	push   edi
c001b00c:	e8 5b 57 fe ff       	call   c000076c <strlen>
c001b011:	5a                   	pop    edx
c001b012:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b016:	52                   	push   edx
c001b017:	31 d2                	xor    edx,edx
c001b019:	57                   	push   edi
c001b01a:	52                   	push   edx
c001b01b:	50                   	push   eax
c001b01c:	56                   	push   esi
c001b01d:	ff d3                	call   ebx
c001b01f:	83 c4 14             	add    esp,0x14
c001b022:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b026:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b029:	e8 d1 31 00 00       	call   c001e1ff <terminateTask(int)>
c001b02e:	83 c4 40             	add    esp,0x40
c001b031:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b036:	5b                   	pop    ebx
c001b037:	31 d2                	xor    edx,edx
c001b039:	5e                   	pop    esi
c001b03a:	5f                   	pop    edi
c001b03b:	c3                   	ret    

c001b03c <Sys::yield(regs*)>:
c001b03c:	57                   	push   edi
c001b03d:	56                   	push   esi
c001b03e:	53                   	push   ebx
c001b03f:	fa                   	cli    
c001b040:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001b046:	e8 14 29 00 00       	call   c001d95f <schedule()>
c001b04b:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001b050:	48                   	dec    eax
c001b051:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001b056:	75 01                	jne    c001b059 <Sys::yield(regs*)+0x1d>
c001b058:	fb                   	sti    
c001b059:	8b 35 f0 de 02 c0    	mov    esi,DWORD PTR ds:0xc002def0
c001b05f:	8b 3d f4 de 02 c0    	mov    edi,DWORD PTR ds:0xc002def4
c001b065:	89 f0                	mov    eax,esi
c001b067:	89 fb                	mov    ebx,edi
c001b069:	89 f1                	mov    ecx,esi
c001b06b:	c1 e0 07             	shl    eax,0x7
c001b06e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b072:	25 80 30 0f 00       	and    eax,0xf3080
c001b077:	c1 eb 17             	shr    ebx,0x17
c001b07a:	31 c8                	xor    eax,ecx
c001b07c:	89 da                	mov    edx,ebx
c001b07e:	5b                   	pop    ebx
c001b07f:	5e                   	pop    esi
c001b080:	5f                   	pop    edi
c001b081:	c3                   	ret    

c001b082 <sysCallSeekDir(regs*)>:
c001b082:	31 c0                	xor    eax,eax
c001b084:	31 d2                	xor    edx,edx
c001b086:	c3                   	ret    

c001b087 <sysCallTellDir(regs*)>:
c001b087:	31 c0                	xor    eax,eax
c001b089:	31 d2                	xor    edx,edx
c001b08b:	c3                   	ret    

c001b08c <sysCallVerify(regs*)>:
c001b08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b090:	31 d2                	xor    edx,edx
c001b092:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b095:	c3                   	ret    

c001b096 <sysCallGetArgc(regs*)>:
c001b096:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b09b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b09e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0a4:	99                   	cdq    
c001b0a5:	c3                   	ret    

c001b0a6 <sysFormatDisk(regs*)>:
c001b0a6:	56                   	push   esi
c001b0a7:	53                   	push   ebx
c001b0a8:	53                   	push   ebx
c001b0a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0ad:	8b 1d f4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f4
c001b0b3:	eb 25                	jmp    c001b0da <sysFormatDisk(regs*)+0x34>
c001b0b5:	83 ec 0c             	sub    esp,0xc
c001b0b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0bd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b0c0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b0c3:	50                   	push   eax
c001b0c4:	ff 34 85 80 de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2180]
c001b0cb:	53                   	push   ebx
c001b0cc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b0cf:	83 c4 20             	add    esp,0x20
c001b0d2:	83 f8 08             	cmp    eax,0x8
c001b0d5:	75 12                	jne    c001b0e9 <sysFormatDisk(regs*)+0x43>
c001b0d7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b0da:	85 db                	test   ebx,ebx
c001b0dc:	75 d7                	jne    c001b0b5 <sysFormatDisk(regs*)+0xf>
c001b0de:	59                   	pop    ecx
c001b0df:	b8 03 00 00 00       	mov    eax,0x3
c001b0e4:	31 d2                	xor    edx,edx
c001b0e6:	5b                   	pop    ebx
c001b0e7:	5e                   	pop    esi
c001b0e8:	c3                   	ret    
c001b0e9:	85 c0                	test   eax,eax
c001b0eb:	74 1b                	je     c001b108 <sysFormatDisk(regs*)+0x62>
c001b0ed:	83 f8 09             	cmp    eax,0x9
c001b0f0:	74 0b                	je     c001b0fd <sysFormatDisk(regs*)+0x57>
c001b0f2:	59                   	pop    ecx
c001b0f3:	b8 02 00 00 00       	mov    eax,0x2
c001b0f8:	31 d2                	xor    edx,edx
c001b0fa:	5b                   	pop    ebx
c001b0fb:	5e                   	pop    esi
c001b0fc:	c3                   	ret    
c001b0fd:	59                   	pop    ecx
c001b0fe:	b8 01 00 00 00       	mov    eax,0x1
c001b103:	31 d2                	xor    edx,edx
c001b105:	5b                   	pop    ebx
c001b106:	5e                   	pop    esi
c001b107:	c3                   	ret    
c001b108:	59                   	pop    ecx
c001b109:	31 c0                	xor    eax,eax
c001b10b:	31 d2                	xor    edx,edx
c001b10d:	5b                   	pop    ebx
c001b10e:	5e                   	pop    esi
c001b10f:	c3                   	ret    

c001b110 <sysSetDiskVolumeLabel(regs*)>:
c001b110:	56                   	push   esi
c001b111:	53                   	push   ebx
c001b112:	53                   	push   ebx
c001b113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b117:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b11a:	83 f8 19             	cmp    eax,0x19
c001b11d:	77 29                	ja     c001b148 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b11f:	8b 0c 85 80 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2180]
c001b126:	85 c9                	test   ecx,ecx
c001b128:	74 1e                	je     c001b148 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b12a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b12d:	85 d2                	test   edx,edx
c001b12f:	74 17                	je     c001b148 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b131:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b137:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b139:	52                   	push   edx
c001b13a:	50                   	push   eax
c001b13b:	51                   	push   ecx
c001b13c:	53                   	push   ebx
c001b13d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b140:	83 c4 10             	add    esp,0x10
c001b143:	99                   	cdq    
c001b144:	59                   	pop    ecx
c001b145:	5b                   	pop    ebx
c001b146:	5e                   	pop    esi
c001b147:	c3                   	ret    
c001b148:	59                   	pop    ecx
c001b149:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b14e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b153:	5b                   	pop    ebx
c001b154:	5e                   	pop    esi
c001b155:	c3                   	ret    

c001b156 <sysGetDiskVolumeLabel(regs*)>:
c001b156:	57                   	push   edi
c001b157:	56                   	push   esi
c001b158:	53                   	push   ebx
c001b159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b160:	83 fa 19             	cmp    edx,0x19
c001b163:	77 34                	ja     c001b199 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b165:	8b 0c 95 80 de 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2180]
c001b16c:	85 c9                	test   ecx,ecx
c001b16e:	74 29                	je     c001b199 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b170:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b173:	85 db                	test   ebx,ebx
c001b175:	74 22                	je     c001b199 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b177:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b17a:	85 c0                	test   eax,eax
c001b17c:	74 1b                	je     c001b199 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b17e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b184:	83 ec 0c             	sub    esp,0xc
c001b187:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b189:	50                   	push   eax
c001b18a:	53                   	push   ebx
c001b18b:	52                   	push   edx
c001b18c:	51                   	push   ecx
c001b18d:	56                   	push   esi
c001b18e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b191:	83 c4 20             	add    esp,0x20
c001b194:	99                   	cdq    
c001b195:	5b                   	pop    ebx
c001b196:	5e                   	pop    esi
c001b197:	5f                   	pop    edi
c001b198:	c3                   	ret    
c001b199:	5b                   	pop    ebx
c001b19a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b19f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1a4:	5e                   	pop    esi
c001b1a5:	5f                   	pop    edi
c001b1a6:	c3                   	ret    

c001b1a7 <sysShutdown(regs*)>:
c001b1a7:	83 ec 0c             	sub    esp,0xc
c001b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1b1:	85 c0                	test   eax,eax
c001b1b3:	74 18                	je     c001b1cd <sysShutdown(regs*)+0x26>
c001b1b5:	83 f8 01             	cmp    eax,0x1
c001b1b8:	74 38                	je     c001b1f2 <sysShutdown(regs*)+0x4b>
c001b1ba:	83 f8 02             	cmp    eax,0x2
c001b1bd:	74 24                	je     c001b1e3 <sysShutdown(regs*)+0x3c>
c001b1bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1c9:	83 c4 0c             	add    esp,0xc
c001b1cc:	c3                   	ret    
c001b1cd:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001b1d2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1d4:	6a 00                	push   0x0
c001b1d6:	6a 00                	push   0x0
c001b1d8:	6a 00                	push   0x0
c001b1da:	50                   	push   eax
c001b1db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1de:	83 c4 10             	add    esp,0x10
c001b1e1:	eb dc                	jmp    c001b1bf <sysShutdown(regs*)+0x18>
c001b1e3:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001b1e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1ea:	6a 00                	push   0x0
c001b1ec:	6a 00                	push   0x0
c001b1ee:	6a 01                	push   0x1
c001b1f0:	eb e8                	jmp    c001b1da <sysShutdown(regs*)+0x33>
c001b1f2:	a1 20 ff 02 c0       	mov    eax,ds:0xc002ff20
c001b1f7:	85 c0                	test   eax,eax
c001b1f9:	74 02                	je     c001b1fd <sysShutdown(regs*)+0x56>
c001b1fb:	ff d0                	call   eax
c001b1fd:	31 c0                	xor    eax,eax
c001b1ff:	31 d2                	xor    edx,edx
c001b201:	83 c4 0c             	add    esp,0xc
c001b204:	c3                   	ret    

c001b205 <sysCallRealpath(regs*)>:
c001b205:	83 ec 0c             	sub    esp,0xc
c001b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b20c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b20f:	85 d2                	test   edx,edx
c001b211:	74 07                	je     c001b21a <sysCallRealpath(regs*)+0x15>
c001b213:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b216:	85 c0                	test   eax,eax
c001b218:	75 0b                	jne    c001b225 <sysCallRealpath(regs*)+0x20>
c001b21a:	b8 01 00 00 00       	mov    eax,0x1
c001b21f:	31 d2                	xor    edx,edx
c001b221:	83 c4 0c             	add    esp,0xc
c001b224:	c3                   	ret    
c001b225:	51                   	push   ecx
c001b226:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b22c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b22f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b235:	51                   	push   ecx
c001b236:	52                   	push   edx
c001b237:	50                   	push   eax
c001b238:	e8 e1 77 ff ff       	call   c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	31 c0                	xor    eax,eax
c001b242:	31 d2                	xor    edx,edx
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	c3                   	ret    

c001b248 <sysCallReadDir(regs*)>:
c001b248:	53                   	push   ebx
c001b249:	83 ec 18             	sub    esp,0x18
c001b24c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b250:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b253:	83 f8 02             	cmp    eax,0x2
c001b256:	76 60                	jbe    c001b2b8 <sysCallReadDir(regs*)+0x70>
c001b258:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b25f:	77 48                	ja     c001b2a9 <sysCallReadDir(regs*)+0x61>
c001b261:	83 ec 0c             	sub    esp,0xc
c001b264:	50                   	push   eax
c001b265:	e8 3f 5e ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b26a:	83 c4 10             	add    esp,0x10
c001b26d:	85 c0                	test   eax,eax
c001b26f:	74 38                	je     c001b2a9 <sysCallReadDir(regs*)+0x61>
c001b271:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b279:	83 ec 0c             	sub    esp,0xc
c001b27c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b27e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b282:	51                   	push   ecx
c001b283:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b286:	6a 00                	push   0x0
c001b288:	68 10 01 00 00       	push   0x110
c001b28d:	50                   	push   eax
c001b28e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b291:	83 c4 20             	add    esp,0x20
c001b294:	85 c0                	test   eax,eax
c001b296:	74 29                	je     c001b2c1 <sysCallReadDir(regs*)+0x79>
c001b298:	83 f8 07             	cmp    eax,0x7
c001b29b:	74 1b                	je     c001b2b8 <sysCallReadDir(regs*)+0x70>
c001b29d:	b8 02 00 00 00       	mov    eax,0x2
c001b2a2:	31 d2                	xor    edx,edx
c001b2a4:	83 c4 18             	add    esp,0x18
c001b2a7:	5b                   	pop    ebx
c001b2a8:	c3                   	ret    
c001b2a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2b3:	83 c4 18             	add    esp,0x18
c001b2b6:	5b                   	pop    ebx
c001b2b7:	c3                   	ret    
c001b2b8:	b8 01 00 00 00       	mov    eax,0x1
c001b2bd:	31 d2                	xor    edx,edx
c001b2bf:	eb e3                	jmp    c001b2a4 <sysCallReadDir(regs*)+0x5c>
c001b2c1:	31 c0                	xor    eax,eax
c001b2c3:	31 d2                	xor    edx,edx
c001b2c5:	eb dd                	jmp    c001b2a4 <sysCallReadDir(regs*)+0x5c>

c001b2c7 <sysCallIsATTY(regs*)>:
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2d1:	83 f8 02             	cmp    eax,0x2
c001b2d4:	76 07                	jbe    c001b2dd <sysCallIsATTY(regs*)+0x16>
c001b2d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b2db:	75 26                	jne    c001b303 <sysCallIsATTY(regs*)+0x3c>
c001b2dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2e5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b2eb:	85 c0                	test   eax,eax
c001b2ed:	74 24                	je     c001b313 <sysCallIsATTY(regs*)+0x4c>
c001b2ef:	83 ec 0c             	sub    esp,0xc
c001b2f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2f4:	50                   	push   eax
c001b2f5:	ff 12                	call   DWORD PTR [edx]
c001b2f7:	31 d2                	xor    edx,edx
c001b2f9:	0f b6 c0             	movzx  eax,al
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	83 c4 0c             	add    esp,0xc
c001b302:	c3                   	ret    
c001b303:	83 ec 0c             	sub    esp,0xc
c001b306:	50                   	push   eax
c001b307:	e8 9d 5d ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	85 c0                	test   eax,eax
c001b311:	75 dc                	jne    c001b2ef <sysCallIsATTY(regs*)+0x28>
c001b313:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b318:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b31d:	83 c4 0c             	add    esp,0xc
c001b320:	c3                   	ret    

c001b321 <sysCallSeek(regs*)>:
c001b321:	53                   	push   ebx
c001b322:	83 ec 08             	sub    esp,0x8
c001b325:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b329:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b32c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b32f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b335:	77 32                	ja     c001b369 <sysCallSeek(regs*)+0x48>
c001b337:	83 ec 0c             	sub    esp,0xc
c001b33a:	50                   	push   eax
c001b33b:	e8 69 5d ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b340:	83 c4 0c             	add    esp,0xc
c001b343:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b346:	31 db                	xor    ebx,ebx
c001b348:	53                   	push   ebx
c001b349:	51                   	push   ecx
c001b34a:	50                   	push   eax
c001b34b:	e8 9a 79 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	85 c0                	test   eax,eax
c001b355:	0f 95 c0             	setne  al
c001b358:	31 d2                	xor    edx,edx
c001b35a:	0f b6 c0             	movzx  eax,al
c001b35d:	f7 d8                	neg    eax
c001b35f:	83 d2 00             	adc    edx,0x0
c001b362:	83 c4 08             	add    esp,0x8
c001b365:	f7 da                	neg    edx
c001b367:	5b                   	pop    ebx
c001b368:	c3                   	ret    
c001b369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b36e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b373:	83 c4 08             	add    esp,0x8
c001b376:	5b                   	pop    ebx
c001b377:	c3                   	ret    

c001b378 <sysCallTell(regs*)>:
c001b378:	53                   	push   ebx
c001b379:	83 ec 08             	sub    esp,0x8
c001b37c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b383:	83 f8 02             	cmp    eax,0x2
c001b386:	76 4d                	jbe    c001b3d5 <sysCallTell(regs*)+0x5d>
c001b388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b38d:	76 19                	jbe    c001b3a8 <sysCallTell(regs*)+0x30>
c001b38f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b392:	31 d2                	xor    edx,edx
c001b394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b39a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3a1:	31 c0                	xor    eax,eax
c001b3a3:	83 c4 08             	add    esp,0x8
c001b3a6:	5b                   	pop    ebx
c001b3a7:	c3                   	ret    
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	50                   	push   eax
c001b3ac:	e8 f8 5c ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b3b1:	5a                   	pop    edx
c001b3b2:	59                   	pop    ecx
c001b3b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3b6:	50                   	push   eax
c001b3b7:	e8 84 79 ff ff       	call   c0012d40 <File::tell(unsigned long long*)>
c001b3bc:	83 c4 10             	add    esp,0x10
c001b3bf:	85 c0                	test   eax,eax
c001b3c1:	0f 95 c0             	setne  al
c001b3c4:	31 d2                	xor    edx,edx
c001b3c6:	0f b6 c0             	movzx  eax,al
c001b3c9:	f7 d8                	neg    eax
c001b3cb:	83 d2 00             	adc    edx,0x0
c001b3ce:	83 c4 08             	add    esp,0x8
c001b3d1:	f7 da                	neg    edx
c001b3d3:	5b                   	pop    ebx
c001b3d4:	c3                   	ret    
c001b3d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3df:	83 c4 08             	add    esp,0x8
c001b3e2:	5b                   	pop    ebx
c001b3e3:	c3                   	ret    

c001b3e4 <sysCallSize(regs*)>:
c001b3e4:	53                   	push   ebx
c001b3e5:	83 ec 18             	sub    esp,0x18
c001b3e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3ef:	83 f8 02             	cmp    eax,0x2
c001b3f2:	76 53                	jbe    c001b447 <sysCallSize(regs*)+0x63>
c001b3f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3f9:	76 19                	jbe    c001b414 <sysCallSize(regs*)+0x30>
c001b3fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3fe:	31 d2                	xor    edx,edx
c001b400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b406:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b40d:	31 c0                	xor    eax,eax
c001b40f:	83 c4 18             	add    esp,0x18
c001b412:	5b                   	pop    ebx
c001b413:	c3                   	ret    
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	50                   	push   eax
c001b418:	e8 8c 5c ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b41d:	83 c4 0c             	add    esp,0xc
c001b420:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b424:	52                   	push   edx
c001b425:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b428:	50                   	push   eax
c001b429:	e8 aa 7a ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c001b42e:	83 c4 10             	add    esp,0x10
c001b431:	85 c0                	test   eax,eax
c001b433:	0f 95 c0             	setne  al
c001b436:	31 d2                	xor    edx,edx
c001b438:	0f b6 c0             	movzx  eax,al
c001b43b:	f7 d8                	neg    eax
c001b43d:	83 d2 00             	adc    edx,0x0
c001b440:	83 c4 18             	add    esp,0x18
c001b443:	f7 da                	neg    edx
c001b445:	5b                   	pop    ebx
c001b446:	c3                   	ret    
c001b447:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b44c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b451:	83 c4 18             	add    esp,0x18
c001b454:	5b                   	pop    ebx
c001b455:	c3                   	ret    

c001b456 <sysCallSizeFromFilename(regs*)>:
c001b456:	57                   	push   edi
c001b457:	56                   	push   esi
c001b458:	53                   	push   ebx
c001b459:	83 ec 20             	sub    esp,0x20
c001b45c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b460:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b463:	83 fb 02             	cmp    ebx,0x2
c001b466:	0f 86 88 00 00 00    	jbe    c001b4f4 <sysCallSizeFromFilename(regs*)+0x9e>
c001b46c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b472:	76 1b                	jbe    c001b48f <sysCallSizeFromFilename(regs*)+0x39>
c001b474:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b477:	31 d2                	xor    edx,edx
c001b479:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b47f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b486:	83 c4 20             	add    esp,0x20
c001b489:	31 c0                	xor    eax,eax
c001b48b:	5b                   	pop    ebx
c001b48c:	5e                   	pop    esi
c001b48d:	5f                   	pop    edi
c001b48e:	c3                   	ret    
c001b48f:	83 ec 0c             	sub    esp,0xc
c001b492:	68 14 01 00 00       	push   0x114
c001b497:	e8 fd 40 ff ff       	call   c000f599 <malloc>
c001b49c:	83 c4 0c             	add    esp,0xc
c001b49f:	89 c7                	mov    edi,eax
c001b4a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4a9:	53                   	push   ebx
c001b4aa:	57                   	push   edi
c001b4ab:	e8 18 77 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001b4b0:	83 c4 0c             	add    esp,0xc
c001b4b3:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b4b7:	50                   	push   eax
c001b4b8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b4bb:	57                   	push   edi
c001b4bc:	e8 17 7a ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c001b4c1:	83 c4 10             	add    esp,0x10
c001b4c4:	85 ff                	test   edi,edi
c001b4c6:	74 14                	je     c001b4dc <sysCallSizeFromFilename(regs*)+0x86>
c001b4c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4cc:	8b 17                	mov    edx,DWORD PTR [edi]
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	57                   	push   edi
c001b4d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4dc:	85 c0                	test   eax,eax
c001b4de:	0f 95 c0             	setne  al
c001b4e1:	31 d2                	xor    edx,edx
c001b4e3:	0f b6 c0             	movzx  eax,al
c001b4e6:	f7 d8                	neg    eax
c001b4e8:	83 d2 00             	adc    edx,0x0
c001b4eb:	83 c4 20             	add    esp,0x20
c001b4ee:	f7 da                	neg    edx
c001b4f0:	5b                   	pop    ebx
c001b4f1:	5e                   	pop    esi
c001b4f2:	5f                   	pop    edi
c001b4f3:	c3                   	ret    
c001b4f4:	83 c4 20             	add    esp,0x20
c001b4f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4fc:	5b                   	pop    ebx
c001b4fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b502:	5e                   	pop    esi
c001b503:	5f                   	pop    edi
c001b504:	c3                   	ret    

c001b505 <sysCallClose(regs*)>:
c001b505:	53                   	push   ebx
c001b506:	83 ec 08             	sub    esp,0x8
c001b509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b510:	83 f8 02             	cmp    eax,0x2
c001b513:	76 41                	jbe    c001b556 <sysCallClose(regs*)+0x51>
c001b515:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b51b:	83 fa 01             	cmp    edx,0x1
c001b51e:	76 2d                	jbe    c001b54d <sysCallClose(regs*)+0x48>
c001b520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b525:	77 2f                	ja     c001b556 <sysCallClose(regs*)+0x51>
c001b527:	83 ec 0c             	sub    esp,0xc
c001b52a:	50                   	push   eax
c001b52b:	e8 79 5b ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b530:	89 c3                	mov    ebx,eax
c001b532:	89 04 24             	mov    DWORD PTR [esp],eax
c001b535:	e8 50 77 ff ff       	call   c0012c8a <File::close()>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	85 db                	test   ebx,ebx
c001b53f:	74 0c                	je     c001b54d <sysCallClose(regs*)+0x48>
c001b541:	83 ec 0c             	sub    esp,0xc
c001b544:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b546:	53                   	push   ebx
c001b547:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b54a:	83 c4 10             	add    esp,0x10
c001b54d:	31 c0                	xor    eax,eax
c001b54f:	31 d2                	xor    edx,edx
c001b551:	83 c4 08             	add    esp,0x8
c001b554:	5b                   	pop    ebx
c001b555:	c3                   	ret    
c001b556:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b55b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b560:	83 c4 08             	add    esp,0x8
c001b563:	5b                   	pop    ebx
c001b564:	c3                   	ret    

c001b565 <sysCallOpenDir(regs*)>:
c001b565:	56                   	push   esi
c001b566:	53                   	push   ebx
c001b567:	53                   	push   ebx
c001b568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b56c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b56f:	85 f6                	test   esi,esi
c001b571:	74 59                	je     c001b5cc <sysCallOpenDir(regs*)+0x67>
c001b573:	83 ec 0c             	sub    esp,0xc
c001b576:	68 14 01 00 00       	push   0x114
c001b57b:	e8 19 40 ff ff       	call   c000f599 <malloc>
c001b580:	83 c4 0c             	add    esp,0xc
c001b583:	89 c6                	mov    esi,eax
c001b585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b58a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b58d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b590:	56                   	push   esi
c001b591:	e8 de 7a ff ff       	call   c0013074 <Directory::Directory(char const*, Process*)>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	85 f6                	test   esi,esi
c001b59b:	74 2f                	je     c001b5cc <sysCallOpenDir(regs*)+0x67>
c001b59d:	83 ec 0c             	sub    esp,0xc
c001b5a0:	56                   	push   esi
c001b5a1:	e8 32 7b ff ff       	call   c00130d8 <Directory::open()>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	85 c0                	test   eax,eax
c001b5ab:	75 1f                	jne    c001b5cc <sysCallOpenDir(regs*)+0x67>
c001b5ad:	83 ec 0c             	sub    esp,0xc
c001b5b0:	56                   	push   esi
c001b5b1:	e8 fe 57 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001b5b6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b5b9:	83 c4 10             	add    esp,0x10
c001b5bc:	89 02                	mov    DWORD PTR [edx],eax
c001b5be:	c1 f8 1f             	sar    eax,0x1f
c001b5c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b5c4:	31 c0                	xor    eax,eax
c001b5c6:	59                   	pop    ecx
c001b5c7:	31 d2                	xor    edx,edx
c001b5c9:	5b                   	pop    ebx
c001b5ca:	5e                   	pop    esi
c001b5cb:	c3                   	ret    
c001b5cc:	59                   	pop    ecx
c001b5cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5d7:	5b                   	pop    ebx
c001b5d8:	5e                   	pop    esi
c001b5d9:	c3                   	ret    

c001b5da <sysCallCloseDir(regs*)>:
c001b5da:	53                   	push   ebx
c001b5db:	83 ec 08             	sub    esp,0x8
c001b5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5e5:	8d 50 fd             	lea    edx,[eax-0x3]
c001b5e8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b5ee:	77 2f                	ja     c001b61f <sysCallCloseDir(regs*)+0x45>
c001b5f0:	83 ec 0c             	sub    esp,0xc
c001b5f3:	50                   	push   eax
c001b5f4:	e8 b0 5a ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b5f9:	89 c3                	mov    ebx,eax
c001b5fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5fe:	e8 31 7b ff ff       	call   c0013134 <Directory::close()>
c001b603:	83 c4 10             	add    esp,0x10
c001b606:	85 db                	test   ebx,ebx
c001b608:	74 0c                	je     c001b616 <sysCallCloseDir(regs*)+0x3c>
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b60f:	53                   	push   ebx
c001b610:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b613:	83 c4 10             	add    esp,0x10
c001b616:	31 c0                	xor    eax,eax
c001b618:	31 d2                	xor    edx,edx
c001b61a:	83 c4 08             	add    esp,0x8
c001b61d:	5b                   	pop    ebx
c001b61e:	c3                   	ret    
c001b61f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b624:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b629:	83 c4 08             	add    esp,0x8
c001b62c:	5b                   	pop    ebx
c001b62d:	c3                   	ret    

c001b62e <sysCallMakeDir(regs*)>:
c001b62e:	56                   	push   esi
c001b62f:	53                   	push   ebx
c001b630:	83 ec 10             	sub    esp,0x10
c001b633:	68 14 01 00 00       	push   0x114
c001b638:	e8 5c 3f ff ff       	call   c000f599 <malloc>
c001b63d:	83 c4 0c             	add    esp,0xc
c001b640:	89 c3                	mov    ebx,eax
c001b642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b647:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b64a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b64e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b651:	53                   	push   ebx
c001b652:	e8 1d 7a ff ff       	call   c0013074 <Directory::Directory(char const*, Process*)>
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	85 db                	test   ebx,ebx
c001b65c:	74 32                	je     c001b690 <sysCallMakeDir(regs*)+0x62>
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	53                   	push   ebx
c001b662:	e8 51 7c ff ff       	call   c00132b8 <Directory::create()>
c001b667:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b66a:	89 c6                	mov    esi,eax
c001b66c:	e8 c3 7a ff ff       	call   c0013134 <Directory::close()>
c001b671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	31 c0                	xor    eax,eax
c001b67e:	59                   	pop    ecx
c001b67f:	85 f6                	test   esi,esi
c001b681:	5b                   	pop    ebx
c001b682:	0f 95 c0             	setne  al
c001b685:	5e                   	pop    esi
c001b686:	31 d2                	xor    edx,edx
c001b688:	f7 d8                	neg    eax
c001b68a:	83 d2 00             	adc    edx,0x0
c001b68d:	f7 da                	neg    edx
c001b68f:	c3                   	ret    
c001b690:	59                   	pop    ecx
c001b691:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b696:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b69b:	5b                   	pop    ebx
c001b69c:	5e                   	pop    esi
c001b69d:	c3                   	ret    

c001b69e <sysCallWait(regs*)>:
c001b69e:	83 ec 10             	sub    esp,0x10
c001b6a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6a5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b6a8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6ab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6ae:	e8 af 24 00 00       	call   c001db62 <waitTask(int, int*, int)>
c001b6b3:	83 c4 1c             	add    esp,0x1c
c001b6b6:	99                   	cdq    
c001b6b7:	c3                   	ret    

c001b6b8 <sysCallNotImpl(regs*)>:
c001b6b8:	83 ec 18             	sub    esp,0x18
c001b6bb:	68 f9 b7 02 c0       	push   0xc002b7f9
c001b6c0:	e8 10 e7 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001b6c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6cf:	83 c4 1c             	add    esp,0x1c
c001b6d2:	c3                   	ret    

c001b6d3 <sysPanic(regs*)>:
c001b6d3:	83 ec 18             	sub    esp,0x18
c001b6d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6da:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6dd:	e8 f3 e6 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001b6e2:	b8 01 00 00 00       	mov    eax,0x1
c001b6e7:	31 d2                	xor    edx,edx
c001b6e9:	83 c4 1c             	add    esp,0x1c
c001b6ec:	c3                   	ret    

c001b6ed <sysCallRmdir(regs*)>:
c001b6ed:	56                   	push   esi
c001b6ee:	53                   	push   ebx
c001b6ef:	83 ec 20             	sub    esp,0x20
c001b6f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6f6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b6f9:	68 14 01 00 00       	push   0x114
c001b6fe:	e8 96 3e ff ff       	call   c000f599 <malloc>
c001b703:	83 c4 0c             	add    esp,0xc
c001b706:	89 c3                	mov    ebx,eax
c001b708:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b70d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b710:	56                   	push   esi
c001b711:	53                   	push   ebx
c001b712:	e8 b1 74 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001b717:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b71a:	e8 85 76 ff ff       	call   c0012da4 <File::unlink()>
c001b71f:	83 c4 10             	add    esp,0x10
c001b722:	85 db                	test   ebx,ebx
c001b724:	74 14                	je     c001b73a <sysCallRmdir(regs*)+0x4d>
c001b726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b72a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b72c:	83 ec 0c             	sub    esp,0xc
c001b72f:	53                   	push   ebx
c001b730:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b73a:	85 c0                	test   eax,eax
c001b73c:	0f 95 c0             	setne  al
c001b73f:	31 d2                	xor    edx,edx
c001b741:	0f b6 c0             	movzx  eax,al
c001b744:	f7 d8                	neg    eax
c001b746:	83 d2 00             	adc    edx,0x0
c001b749:	83 c4 14             	add    esp,0x14
c001b74c:	f7 da                	neg    edx
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	c3                   	ret    

c001b751 <sysCallUnlink(regs*)>:
c001b751:	56                   	push   esi
c001b752:	53                   	push   ebx
c001b753:	83 ec 20             	sub    esp,0x20
c001b756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b75a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b75d:	68 14 01 00 00       	push   0x114
c001b762:	e8 32 3e ff ff       	call   c000f599 <malloc>
c001b767:	83 c4 0c             	add    esp,0xc
c001b76a:	89 c3                	mov    ebx,eax
c001b76c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b771:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b774:	56                   	push   esi
c001b775:	53                   	push   ebx
c001b776:	e8 4d 74 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001b77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b77e:	e8 21 76 ff ff       	call   c0012da4 <File::unlink()>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	85 db                	test   ebx,ebx
c001b788:	74 14                	je     c001b79e <sysCallUnlink(regs*)+0x4d>
c001b78a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	53                   	push   ebx
c001b794:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79e:	85 c0                	test   eax,eax
c001b7a0:	0f 95 c0             	setne  al
c001b7a3:	31 d2                	xor    edx,edx
c001b7a5:	0f b6 c0             	movzx  eax,al
c001b7a8:	f7 d8                	neg    eax
c001b7aa:	83 d2 00             	adc    edx,0x0
c001b7ad:	83 c4 14             	add    esp,0x14
c001b7b0:	f7 da                	neg    edx
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	c3                   	ret    

c001b7b5 <sysCallGetArgv(regs*)>:
c001b7b5:	83 ec 0c             	sub    esp,0xc
c001b7b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7bc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7bf:	85 c0                	test   eax,eax
c001b7c1:	78 2b                	js     c001b7ee <sysCallGetArgv(regs*)+0x39>
c001b7c3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7c9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7cc:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b7d2:	7d 1a                	jge    c001b7ee <sysCallGetArgv(regs*)+0x39>
c001b7d4:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b7db:	85 c0                	test   eax,eax
c001b7dd:	74 17                	je     c001b7f6 <sysCallGetArgv(regs*)+0x41>
c001b7df:	83 ec 08             	sub    esp,0x8
c001b7e2:	50                   	push   eax
c001b7e3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b7e6:	e8 21 50 fe ff       	call   c000080c <strcpy>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	31 c0                	xor    eax,eax
c001b7f0:	31 d2                	xor    edx,edx
c001b7f2:	83 c4 0c             	add    esp,0xc
c001b7f5:	c3                   	ret    
c001b7f6:	b8 01 00 00 00       	mov    eax,0x1
c001b7fb:	31 d2                	xor    edx,edx
c001b7fd:	83 c4 0c             	add    esp,0xc
c001b800:	c3                   	ret    

c001b801 <sysCallTTYName(regs*)>:
c001b801:	56                   	push   esi
c001b802:	53                   	push   ebx
c001b803:	53                   	push   ebx
c001b804:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b808:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b80b:	85 c0                	test   eax,eax
c001b80d:	74 5f                	je     c001b86e <sysCallTTYName(regs*)+0x6d>
c001b80f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b812:	83 f8 02             	cmp    eax,0x2
c001b815:	77 3e                	ja     c001b855 <sysCallTTYName(regs*)+0x54>
c001b817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b81c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b81f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b825:	85 db                	test   ebx,ebx
c001b827:	74 45                	je     c001b86e <sysCallTTYName(regs*)+0x6d>
c001b829:	83 ec 0c             	sub    esp,0xc
c001b82c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b82e:	53                   	push   ebx
c001b82f:	ff 10                	call   DWORD PTR [eax]
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	84 c0                	test   al,al
c001b836:	74 41                	je     c001b879 <sysCallTTYName(regs*)+0x78>
c001b838:	83 ec 08             	sub    esp,0x8
c001b83b:	81 c3 82 00 00 00    	add    ebx,0x82
c001b841:	53                   	push   ebx
c001b842:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b845:	e8 c2 4f fe ff       	call   c000080c <strcpy>
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	31 c0                	xor    eax,eax
c001b84f:	59                   	pop    ecx
c001b850:	31 d2                	xor    edx,edx
c001b852:	5b                   	pop    ebx
c001b853:	5e                   	pop    esi
c001b854:	c3                   	ret    
c001b855:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b85a:	74 bb                	je     c001b817 <sysCallTTYName(regs*)+0x16>
c001b85c:	83 ec 0c             	sub    esp,0xc
c001b85f:	50                   	push   eax
c001b860:	e8 44 58 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	89 c3                	mov    ebx,eax
c001b86a:	85 db                	test   ebx,ebx
c001b86c:	75 bb                	jne    c001b829 <sysCallTTYName(regs*)+0x28>
c001b86e:	59                   	pop    ecx
c001b86f:	b8 01 00 00 00       	mov    eax,0x1
c001b874:	31 d2                	xor    edx,edx
c001b876:	5b                   	pop    ebx
c001b877:	5e                   	pop    esi
c001b878:	c3                   	ret    
c001b879:	59                   	pop    ecx
c001b87a:	b8 02 00 00 00       	mov    eax,0x2
c001b87f:	31 d2                	xor    edx,edx
c001b881:	5b                   	pop    ebx
c001b882:	5e                   	pop    esi
c001b883:	c3                   	ret    

c001b884 <sysCallUSleep(regs*)>:
c001b884:	83 ec 14             	sub    esp,0x14
c001b887:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b88c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b890:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b897:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b89a:	01 ca                	add    edx,ecx
c001b89c:	52                   	push   edx
c001b89d:	50                   	push   eax
c001b89e:	e8 96 23 00 00       	call   c001dc39 <nanoSleep(unsigned long long)>
c001b8a3:	31 c0                	xor    eax,eax
c001b8a5:	31 d2                	xor    edx,edx
c001b8a7:	83 c4 1c             	add    esp,0x1c
c001b8aa:	c3                   	ret    

c001b8ab <sysCallSpawn(regs*)>:
c001b8ab:	56                   	push   esi
c001b8ac:	53                   	push   ebx
c001b8ad:	50                   	push   eax
c001b8ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8b5:	85 c0                	test   eax,eax
c001b8b7:	75 08                	jne    c001b8c1 <sysCallSpawn(regs*)+0x16>
c001b8b9:	59                   	pop    ecx
c001b8ba:	31 c0                	xor    eax,eax
c001b8bc:	31 d2                	xor    edx,edx
c001b8be:	5b                   	pop    ebx
c001b8bf:	5e                   	pop    esi
c001b8c0:	c3                   	ret    
c001b8c1:	83 ec 0c             	sub    esp,0xc
c001b8c4:	68 3f 07 00 00       	push   0x73f
c001b8c9:	e8 cb 3c ff ff       	call   c000f599 <malloc>
c001b8ce:	83 c4 10             	add    esp,0x10
c001b8d1:	89 c6                	mov    esi,eax
c001b8d3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b8d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8d9:	85 c0                	test   eax,eax
c001b8db:	75 32                	jne    c001b90f <sysCallSpawn(regs*)+0x64>
c001b8dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e5:	52                   	push   edx
c001b8e6:	50                   	push   eax
c001b8e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8ea:	56                   	push   esi
c001b8eb:	e8 6e 1a 00 00       	call   c001d35e <Process::Process(char const*, Process*, char**)>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b8fa:	75 bd                	jne    c001b8b9 <sysCallSpawn(regs*)+0xe>
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	56                   	push   esi
c001b900:	e8 3b 1f 00 00       	call   c001d840 <Process::createUserThread()>
c001b905:	8b 06                	mov    eax,DWORD PTR [esi]
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	99                   	cdq    
c001b90b:	59                   	pop    ecx
c001b90c:	5b                   	pop    ebx
c001b90d:	5e                   	pop    esi
c001b90e:	c3                   	ret    
c001b90f:	31 c0                	xor    eax,eax
c001b911:	eb d2                	jmp    c001b8e5 <sysCallSpawn(regs*)+0x3a>

c001b913 <sysCallGetEnv(regs*)>:
c001b913:	57                   	push   edi
c001b914:	56                   	push   esi
c001b915:	53                   	push   ebx
c001b916:	83 ec 1c             	sub    esp,0x1c
c001b919:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b922:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b925:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b928:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b92b:	e8 f1 e3 ff ff       	call   c0019d21 <Krnl::getProcessTotalEnvCount(Process*)>
c001b930:	83 c4 10             	add    esp,0x10
c001b933:	39 c7                	cmp    edi,eax
c001b935:	7c 14                	jl     c001b94b <sysCallGetEnv(regs*)+0x38>
c001b937:	85 f6                	test   esi,esi
c001b939:	75 0b                	jne    c001b946 <sysCallGetEnv(regs*)+0x33>
c001b93b:	83 c4 10             	add    esp,0x10
c001b93e:	31 c0                	xor    eax,eax
c001b940:	5b                   	pop    ebx
c001b941:	31 d2                	xor    edx,edx
c001b943:	5e                   	pop    esi
c001b944:	5f                   	pop    edi
c001b945:	c3                   	ret    
c001b946:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b949:	eb f0                	jmp    c001b93b <sysCallGetEnv(regs*)+0x28>
c001b94b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b94f:	52                   	push   edx
c001b950:	57                   	push   edi
c001b951:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b957:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b95a:	50                   	push   eax
c001b95b:	e8 e1 e3 ff ff       	call   c0019d41 <Krnl::getProcessEnvPair(Process*, int)>
c001b960:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b967:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b96b:	83 c4 0c             	add    esp,0xc
c001b96e:	85 c9                	test   ecx,ecx
c001b970:	75 23                	jne    c001b995 <sysCallGetEnv(regs*)+0x82>
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	50                   	push   eax
c001b976:	e8 f1 4d fe ff       	call   c000076c <strlen>
c001b97b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b97e:	89 c3                	mov    ebx,eax
c001b980:	e8 e7 4d fe ff       	call   c000076c <strlen>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b98c:	83 c4 10             	add    esp,0x10
c001b98f:	31 d2                	xor    edx,edx
c001b991:	5b                   	pop    ebx
c001b992:	5e                   	pop    esi
c001b993:	5f                   	pop    edi
c001b994:	c3                   	ret    
c001b995:	83 ec 08             	sub    esp,0x8
c001b998:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b99b:	50                   	push   eax
c001b99c:	56                   	push   esi
c001b99d:	e8 6a 4e fe ff       	call   c000080c <strcpy>
c001b9a2:	58                   	pop    eax
c001b9a3:	5a                   	pop    edx
c001b9a4:	68 13 b8 02 c0       	push   0xc002b813
c001b9a9:	56                   	push   esi
c001b9aa:	e8 9d 4f fe ff       	call   c000094c <strcat>
c001b9af:	59                   	pop    ecx
c001b9b0:	5b                   	pop    ebx
c001b9b1:	57                   	push   edi
c001b9b2:	56                   	push   esi
c001b9b3:	e8 94 4f fe ff       	call   c000094c <strcat>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	e9 7b ff ff ff       	jmp    c001b93b <sysCallGetEnv(regs*)+0x28>

c001b9c0 <sysAppSettings(regs*)>:
c001b9c0:	57                   	push   edi
c001b9c1:	56                   	push   esi
c001b9c2:	56                   	push   esi
c001b9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b9ca:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b9d0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b9d5:	66 3d c0 09          	cmp    ax,0x9c0
c001b9d9:	75 2e                	jne    c001ba09 <sysAppSettings(regs*)+0x49>
c001b9db:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b9e1:	83 e0 1f             	and    eax,0x1f
c001b9e4:	3c 01                	cmp    al,0x1
c001b9e6:	74 2c                	je     c001ba14 <sysAppSettings(regs*)+0x54>
c001b9e8:	3c 07                	cmp    al,0x7
c001b9ea:	0f 84 b3 00 00 00    	je     c001baa3 <sysAppSettings(regs*)+0xe3>
c001b9f0:	84 c0                	test   al,al
c001b9f2:	0f 84 d2 00 00 00    	je     c001baca <sysAppSettings(regs*)+0x10a>
c001b9f8:	3c 08                	cmp    al,0x8
c001b9fa:	74 63                	je     c001ba5f <sysAppSettings(regs*)+0x9f>
c001b9fc:	59                   	pop    ecx
c001b9fd:	0f b6 c0             	movzx  eax,al
c001ba00:	5e                   	pop    esi
c001ba01:	05 e8 03 00 00       	add    eax,0x3e8
c001ba06:	5f                   	pop    edi
c001ba07:	99                   	cdq    
c001ba08:	c3                   	ret    
c001ba09:	b8 01 00 00 00       	mov    eax,0x1
c001ba0e:	59                   	pop    ecx
c001ba0f:	31 d2                	xor    edx,edx
c001ba11:	5e                   	pop    esi
c001ba12:	5f                   	pop    edi
c001ba13:	c3                   	ret    
c001ba14:	50                   	push   eax
c001ba15:	68 00 01 00 00       	push   0x100
c001ba1a:	6a 00                	push   0x0
c001ba1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba24:	83 c0 0c             	add    eax,0xc
c001ba27:	50                   	push   eax
c001ba28:	e8 23 4d fe ff       	call   c0000750 <memset>
c001ba2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba32:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba37:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba3a:	83 c7 0c             	add    edi,0xc
c001ba3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba44:	5a                   	pop    edx
c001ba45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba48:	59                   	pop    ecx
c001ba49:	8d 50 0c             	lea    edx,[eax+0xc]
c001ba4c:	52                   	push   edx
c001ba4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba53:	e8 7c 47 ff ff       	call   c00101d4 <VgaText::setTitle(char*)>
c001ba58:	83 c4 10             	add    esp,0x10
c001ba5b:	31 c0                	xor    eax,eax
c001ba5d:	eb af                	jmp    c001ba0e <sysAppSettings(regs*)+0x4e>
c001ba5f:	83 ec 08             	sub    esp,0x8
c001ba62:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001ba68:	83 e0 0f             	and    eax,0xf
c001ba6b:	50                   	push   eax
c001ba6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba7a:	e8 45 47 ff ff       	call   c00101c4 <VgaText::setTitleColour(VgaColour)>
c001ba7f:	5f                   	pop    edi
c001ba80:	58                   	pop    eax
c001ba81:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001ba87:	c1 e8 04             	shr    eax,0x4
c001ba8a:	83 e0 0f             	and    eax,0xf
c001ba8d:	50                   	push   eax
c001ba8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba9c:	e8 13 47 ff ff       	call   c00101b4 <VgaText::setTitleTextColour(VgaColour)>
c001baa1:	eb b5                	jmp    c001ba58 <sysAppSettings(regs*)+0x98>
c001baa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baab:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bab1:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bab7:	c0 e8 06             	shr    al,0x6
c001baba:	83 e0 01             	and    eax,0x1
c001babd:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bac3:	31 c0                	xor    eax,eax
c001bac5:	e9 44 ff ff ff       	jmp    c001ba0e <sysAppSettings(regs*)+0x4e>
c001baca:	b8 02 00 00 00       	mov    eax,0x2
c001bacf:	e9 3a ff ff ff       	jmp    c001ba0e <sysAppSettings(regs*)+0x4e>

c001bad4 <sysSetFatAttrib(regs*)>:
c001bad4:	57                   	push   edi
c001bad5:	56                   	push   esi
c001bad6:	53                   	push   ebx
c001bad7:	83 ec 1c             	sub    esp,0x1c
c001bada:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bade:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bae1:	68 14 01 00 00       	push   0x114
c001bae6:	e8 ae 3a ff ff       	call   c000f599 <malloc>
c001baeb:	83 c4 0c             	add    esp,0xc
c001baee:	89 c3                	mov    ebx,eax
c001baf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baf8:	57                   	push   edi
c001baf9:	53                   	push   ebx
c001bafa:	e8 c9 70 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001baff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb02:	83 c4 0c             	add    esp,0xc
c001bb05:	0f b6 d4             	movzx  edx,ah
c001bb08:	0f b6 c0             	movzx  eax,al
c001bb0b:	52                   	push   edx
c001bb0c:	50                   	push   eax
c001bb0d:	53                   	push   ebx
c001bb0e:	e8 2b 73 ff ff       	call   c0012e3e <File::chfatattr(unsigned char, unsigned char)>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 db                	test   ebx,ebx
c001bb18:	74 14                	je     c001bb2e <sysSetFatAttrib(regs*)+0x5a>
c001bb1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb20:	83 ec 0c             	sub    esp,0xc
c001bb23:	53                   	push   ebx
c001bb24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb2e:	85 c0                	test   eax,eax
c001bb30:	0f 95 c0             	setne  al
c001bb33:	31 d2                	xor    edx,edx
c001bb35:	0f b6 c0             	movzx  eax,al
c001bb38:	f7 d8                	neg    eax
c001bb3a:	83 d2 00             	adc    edx,0x0
c001bb3d:	83 c4 10             	add    esp,0x10
c001bb40:	f7 da                	neg    edx
c001bb42:	5b                   	pop    ebx
c001bb43:	5e                   	pop    esi
c001bb44:	5f                   	pop    edi
c001bb45:	c3                   	ret    

c001bb46 <sysPipe(regs*)>:
c001bb46:	57                   	push   edi
c001bb47:	56                   	push   esi
c001bb48:	53                   	push   ebx
c001bb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4d:	83 ec 0c             	sub    esp,0xc
c001bb50:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bb53:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bb56:	6a 20                	push   0x20
c001bb58:	e8 3c 3a ff ff       	call   c000f599 <malloc>
c001bb5d:	89 c3                	mov    ebx,eax
c001bb5f:	58                   	pop    eax
c001bb60:	5a                   	pop    edx
c001bb61:	68 00 50 00 00       	push   0x5000
c001bb66:	53                   	push   ebx
c001bb67:	e8 e0 43 ff ff       	call   c000ff4c <Pipe::Pipe(int)>
c001bb6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb6f:	e8 40 52 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bb74:	89 07                	mov    DWORD PTR [edi],eax
c001bb76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb79:	e8 36 52 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bb7e:	83 c4 10             	add    esp,0x10
c001bb81:	89 06                	mov    DWORD PTR [esi],eax
c001bb83:	31 d2                	xor    edx,edx
c001bb85:	5b                   	pop    ebx
c001bb86:	31 c0                	xor    eax,eax
c001bb88:	5e                   	pop    esi
c001bb89:	5f                   	pop    edi
c001bb8a:	c3                   	ret    

c001bb8b <sysGetUnixTime(regs*)>:
c001bb8b:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001bb90:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb9a:	e9 1b 7a ff ff       	jmp    c00135ba <Clock::timeInSecondsLocal()>

c001bb9f <string_ends_with(char const*, char const*)>:
c001bb9f:	57                   	push   edi
c001bba0:	56                   	push   esi
c001bba1:	53                   	push   ebx
c001bba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bbaa:	83 ec 0c             	sub    esp,0xc
c001bbad:	53                   	push   ebx
c001bbae:	e8 b9 4b fe ff       	call   c000076c <strlen>
c001bbb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbb6:	89 c6                	mov    esi,eax
c001bbb8:	e8 af 4b fe ff       	call   c000076c <strlen>
c001bbbd:	83 c4 10             	add    esp,0x10
c001bbc0:	39 c6                	cmp    esi,eax
c001bbc2:	7d 06                	jge    c001bbca <string_ends_with(char const*, char const*)+0x2b>
c001bbc4:	5b                   	pop    ebx
c001bbc5:	31 c0                	xor    eax,eax
c001bbc7:	5e                   	pop    esi
c001bbc8:	5f                   	pop    edi
c001bbc9:	c3                   	ret    
c001bbca:	83 ec 08             	sub    esp,0x8
c001bbcd:	29 c6                	sub    esi,eax
c001bbcf:	57                   	push   edi
c001bbd0:	01 f3                	add    ebx,esi
c001bbd2:	53                   	push   ebx
c001bbd3:	e8 c0 4c fe ff       	call   c0000898 <strcmp>
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	85 c0                	test   eax,eax
c001bbdd:	5b                   	pop    ebx
c001bbde:	0f 94 c0             	sete   al
c001bbe1:	5e                   	pop    esi
c001bbe2:	0f b6 c0             	movzx  eax,al
c001bbe5:	5f                   	pop    edi
c001bbe6:	c3                   	ret    

c001bbe7 <sysCallOpen(regs*)>:
c001bbe7:	56                   	push   esi
c001bbe8:	53                   	push   ebx
c001bbe9:	81 ec 04 01 00 00    	sub    esp,0x104
c001bbef:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bbf6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bbf9:	85 c9                	test   ecx,ecx
c001bbfb:	0f 84 ad 01 00 00    	je     c001bdae <sysCallOpen(regs*)+0x1c7>
c001bc01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc04:	85 c0                	test   eax,eax
c001bc06:	0f 84 a2 01 00 00    	je     c001bdae <sysCallOpen(regs*)+0x1c7>
c001bc0c:	52                   	push   edx
c001bc0d:	68 15 b8 02 c0       	push   0xc002b815
c001bc12:	50                   	push   eax
c001bc13:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc17:	56                   	push   esi
c001bc18:	e8 01 6e ff ff       	call   c0012a1e <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc1d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc20:	e8 47 4b fe ff       	call   c000076c <strlen>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	48                   	dec    eax
c001bc29:	74 1d                	je     c001bc48 <sysCallOpen(regs*)+0x61>
c001bc2b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc2e:	eb 0f                	jmp    c001bc3f <sysCallOpen(regs*)+0x58>
c001bc30:	80 fa 3a             	cmp    dl,0x3a
c001bc33:	74 0f                	je     c001bc44 <sysCallOpen(regs*)+0x5d>
c001bc35:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc39:	48                   	dec    eax
c001bc3a:	74 0c                	je     c001bc48 <sysCallOpen(regs*)+0x61>
c001bc3c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc3f:	80 fa 2e             	cmp    dl,0x2e
c001bc42:	75 ec                	jne    c001bc30 <sysCallOpen(regs*)+0x49>
c001bc44:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bc48:	83 ec 08             	sub    esp,0x8
c001bc4b:	68 19 b8 02 c0       	push   0xc002b819
c001bc50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc53:	e8 47 ff ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	74 1d                	je     c001bc7c <sysCallOpen(regs*)+0x95>
c001bc5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc62:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bc68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc6f:	81 c4 04 01 00 00    	add    esp,0x104
c001bc75:	31 c0                	xor    eax,eax
c001bc77:	31 d2                	xor    edx,edx
c001bc79:	5b                   	pop    ebx
c001bc7a:	5e                   	pop    esi
c001bc7b:	c3                   	ret    
c001bc7c:	83 ec 08             	sub    esp,0x8
c001bc7f:	68 1e b8 02 c0       	push   0xc002b81e
c001bc84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc87:	e8 13 ff ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	85 c0                	test   eax,eax
c001bc91:	75 cc                	jne    c001bc5f <sysCallOpen(regs*)+0x78>
c001bc93:	83 ec 08             	sub    esp,0x8
c001bc96:	68 1a b8 02 c0       	push   0xc002b81a
c001bc9b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc9e:	e8 f5 4b fe ff       	call   c0000898 <strcmp>
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	85 c0                	test   eax,eax
c001bca8:	74 b5                	je     c001bc5f <sysCallOpen(regs*)+0x78>
c001bcaa:	83 ec 08             	sub    esp,0x8
c001bcad:	68 19 b8 02 c0       	push   0xc002b819
c001bcb2:	56                   	push   esi
c001bcb3:	e8 e7 fe ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	85 c0                	test   eax,eax
c001bcbd:	75 a0                	jne    c001bc5f <sysCallOpen(regs*)+0x78>
c001bcbf:	83 ec 08             	sub    esp,0x8
c001bcc2:	68 23 b8 02 c0       	push   0xc002b823
c001bcc7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcca:	e8 d0 fe ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	85 c0                	test   eax,eax
c001bcd4:	0f 85 e7 00 00 00    	jne    c001bdc1 <sysCallOpen(regs*)+0x1da>
c001bcda:	83 ec 08             	sub    esp,0x8
c001bcdd:	68 28 b8 02 c0       	push   0xc002b828
c001bce2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce5:	e8 b5 fe ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 c0                	test   eax,eax
c001bcef:	0f 85 cc 00 00 00    	jne    c001bdc1 <sysCallOpen(regs*)+0x1da>
c001bcf5:	83 ec 08             	sub    esp,0x8
c001bcf8:	68 24 b8 02 c0       	push   0xc002b824
c001bcfd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd00:	e8 93 4b fe ff       	call   c0000898 <strcmp>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	85 c0                	test   eax,eax
c001bd0a:	0f 84 b1 00 00 00    	je     c001bdc1 <sysCallOpen(regs*)+0x1da>
c001bd10:	83 ec 08             	sub    esp,0x8
c001bd13:	68 23 b8 02 c0       	push   0xc002b823
c001bd18:	56                   	push   esi
c001bd19:	e8 81 fe ff ff       	call   c001bb9f <string_ends_with(char const*, char const*)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	85 c0                	test   eax,eax
c001bd23:	0f 85 98 00 00 00    	jne    c001bdc1 <sysCallOpen(regs*)+0x1da>
c001bd29:	83 ec 0c             	sub    esp,0xc
c001bd2c:	68 14 01 00 00       	push   0x114
c001bd31:	e8 63 38 ff ff       	call   c000f599 <malloc>
c001bd36:	83 c4 0c             	add    esp,0xc
c001bd39:	89 c6                	mov    esi,eax
c001bd3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd40:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd43:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd46:	56                   	push   esi
c001bd47:	e8 7c 6e ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	85 f6                	test   esi,esi
c001bd51:	74 5b                	je     c001bdae <sysCallOpen(regs*)+0x1c7>
c001bd53:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bd56:	0f b6 c2             	movzx  eax,dl
c001bd59:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bd5c:	89 d0                	mov    eax,edx
c001bd5e:	83 e0 01             	and    eax,0x1
c001bd61:	f6 c2 02             	test   dl,0x2
c001bd64:	74 03                	je     c001bd69 <sysCallOpen(regs*)+0x182>
c001bd66:	83 c8 02             	or     eax,0x2
c001bd69:	f6 c2 04             	test   dl,0x4
c001bd6c:	74 03                	je     c001bd71 <sysCallOpen(regs*)+0x18a>
c001bd6e:	83 c8 04             	or     eax,0x4
c001bd71:	f6 c2 08             	test   dl,0x8
c001bd74:	74 03                	je     c001bd79 <sysCallOpen(regs*)+0x192>
c001bd76:	83 c8 0a             	or     eax,0xa
c001bd79:	83 e2 10             	and    edx,0x10
c001bd7c:	74 03                	je     c001bd81 <sysCallOpen(regs*)+0x19a>
c001bd7e:	83 c8 12             	or     eax,0x12
c001bd81:	83 ec 08             	sub    esp,0x8
c001bd84:	50                   	push   eax
c001bd85:	56                   	push   esi
c001bd86:	e8 a1 6e ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001bd8b:	83 c4 10             	add    esp,0x10
c001bd8e:	85 c0                	test   eax,eax
c001bd90:	75 1c                	jne    c001bdae <sysCallOpen(regs*)+0x1c7>
c001bd92:	83 ec 0c             	sub    esp,0xc
c001bd95:	56                   	push   esi
c001bd96:	e8 19 50 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bd9b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	89 02                	mov    DWORD PTR [edx],eax
c001bda3:	c1 f8 1f             	sar    eax,0x1f
c001bda6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bda9:	e9 c1 fe ff ff       	jmp    c001bc6f <sysCallOpen(regs*)+0x88>
c001bdae:	81 c4 04 01 00 00    	add    esp,0x104
c001bdb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdbe:	5b                   	pop    ebx
c001bdbf:	5e                   	pop    esi
c001bdc0:	c3                   	ret    
c001bdc1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdc4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bdca:	e9 99 fe ff ff       	jmp    c001bc68 <sysCallOpen(regs*)+0x81>

c001bdcf <Sys::loadSyscalls()>:
c001bdcf:	c7 05 e0 03 03 c0 3c b0 01 c0 	mov    DWORD PTR ds:0xc00303e0,0xc001b03c
c001bdd9:	c7 05 e4 03 03 c0 34 ac 01 c0 	mov    DWORD PTR ds:0xc00303e4,0xc001ac34
c001bde3:	c7 05 e8 03 03 c0 22 ae 01 c0 	mov    DWORD PTR ds:0xc00303e8,0xc001ae22
c001bded:	c7 05 ec 03 03 c0 72 af 01 c0 	mov    DWORD PTR ds:0xc00303ec,0xc001af72
c001bdf7:	c7 05 f0 03 03 c0 ba ad 01 c0 	mov    DWORD PTR ds:0xc00303f0,0xc001adba
c001be01:	c7 05 f4 03 03 c0 6b ac 01 c0 	mov    DWORD PTR ds:0xc00303f4,0xc001ac6b
c001be0b:	c7 05 f8 03 03 c0 4c ac 01 c0 	mov    DWORD PTR ds:0xc00303f8,0xc001ac4c
c001be15:	c7 05 fc 03 03 c0 77 ae 01 c0 	mov    DWORD PTR ds:0xc00303fc,0xc001ae77
c001be1f:	c7 05 04 04 03 c0 05 b5 01 c0 	mov    DWORD PTR ds:0xc0030404,0xc001b505
c001be29:	c7 05 00 04 03 c0 e7 bb 01 c0 	mov    DWORD PTR ds:0xc0030400,0xc001bbe7
c001be33:	c7 05 08 04 03 c0 65 b5 01 c0 	mov    DWORD PTR ds:0xc0030408,0xc001b565
c001be3d:	c7 05 0c 04 03 c0 48 b2 01 c0 	mov    DWORD PTR ds:0xc003040c,0xc001b248
c001be47:	c7 05 10 04 03 c0 82 b0 01 c0 	mov    DWORD PTR ds:0xc0030410,0xc001b082
c001be51:	c7 05 14 04 03 c0 87 b0 01 c0 	mov    DWORD PTR ds:0xc0030414,0xc001b087
c001be5b:	c7 05 18 04 03 c0 2e b6 01 c0 	mov    DWORD PTR ds:0xc0030418,0xc001b62e
c001be65:	c7 05 1c 04 03 c0 da b5 01 c0 	mov    DWORD PTR ds:0xc003041c,0xc001b5da
c001be6f:	c7 05 20 04 03 c0 21 b3 01 c0 	mov    DWORD PTR ds:0xc0030420,0xc001b321
c001be79:	c7 05 24 04 03 c0 78 b3 01 c0 	mov    DWORD PTR ds:0xc0030424,0xc001b378
c001be83:	c7 05 28 04 03 c0 e4 b3 01 c0 	mov    DWORD PTR ds:0xc0030428,0xc001b3e4
c001be8d:	c7 05 2c 04 03 c0 8c b0 01 c0 	mov    DWORD PTR ds:0xc003042c,0xc001b08c
c001be97:	c7 05 30 04 03 c0 9e b6 01 c0 	mov    DWORD PTR ds:0xc0030430,0xc001b69e
c001bea1:	c7 05 34 04 03 c0 b8 b6 01 c0 	mov    DWORD PTR ds:0xc0030434,0xc001b6b8
c001beab:	c7 05 38 04 03 c0 b8 b6 01 c0 	mov    DWORD PTR ds:0xc0030438,0xc001b6b8
c001beb5:	c7 05 3c 04 03 c0 ed b6 01 c0 	mov    DWORD PTR ds:0xc003043c,0xc001b6ed
c001bebf:	c7 05 40 04 03 c0 51 b7 01 c0 	mov    DWORD PTR ds:0xc0030440,0xc001b751
c001bec9:	c7 05 44 04 03 c0 96 b0 01 c0 	mov    DWORD PTR ds:0xc0030444,0xc001b096
c001bed3:	c7 05 48 04 03 c0 b5 b7 01 c0 	mov    DWORD PTR ds:0xc0030448,0xc001b7b5
c001bedd:	c7 05 4c 04 03 c0 05 b2 01 c0 	mov    DWORD PTR ds:0xc003044c,0xc001b205
c001bee7:	c7 05 50 04 03 c0 01 b8 01 c0 	mov    DWORD PTR ds:0xc0030450,0xc001b801
c001bef1:	c7 05 54 04 03 c0 c7 b2 01 c0 	mov    DWORD PTR ds:0xc0030454,0xc001b2c7
c001befb:	c7 05 58 04 03 c0 84 b8 01 c0 	mov    DWORD PTR ds:0xc0030458,0xc001b884
c001bf05:	c7 05 5c 04 03 c0 56 b4 01 c0 	mov    DWORD PTR ds:0xc003045c,0xc001b456
c001bf0f:	c7 05 60 04 03 c0 ab b8 01 c0 	mov    DWORD PTR ds:0xc0030460,0xc001b8ab
c001bf19:	c7 05 64 04 03 c0 13 b9 01 c0 	mov    DWORD PTR ds:0xc0030464,0xc001b913
c001bf23:	c7 05 68 04 03 c0 c0 b9 01 c0 	mov    DWORD PTR ds:0xc0030468,0xc001b9c0
c001bf2d:	c7 05 6c 04 03 c0 a6 b0 01 c0 	mov    DWORD PTR ds:0xc003046c,0xc001b0a6
c001bf37:	c7 05 70 04 03 c0 10 b1 01 c0 	mov    DWORD PTR ds:0xc0030470,0xc001b110
c001bf41:	c7 05 74 04 03 c0 56 b1 01 c0 	mov    DWORD PTR ds:0xc0030474,0xc001b156
c001bf4b:	c7 05 78 04 03 c0 d4 ba 01 c0 	mov    DWORD PTR ds:0xc0030478,0xc001bad4
c001bf55:	c7 05 7c 04 03 c0 d3 b6 01 c0 	mov    DWORD PTR ds:0xc003047c,0xc001b6d3
c001bf5f:	c7 05 80 04 03 c0 a7 b1 01 c0 	mov    DWORD PTR ds:0xc0030480,0xc001b1a7
c001bf69:	c7 05 84 04 03 c0 46 bb 01 c0 	mov    DWORD PTR ds:0xc0030484,0xc001bb46
c001bf73:	c7 05 88 04 03 c0 8b bb 01 c0 	mov    DWORD PTR ds:0xc0030488,0xc001bb8b
c001bf7d:	c7 05 8c 04 03 c0 12 ad 01 c0 	mov    DWORD PTR ds:0xc003048c,0xc001ad12
c001bf87:	c7 05 90 04 03 c0 93 ae 01 c0 	mov    DWORD PTR ds:0xc0030490,0xc001ae93
c001bf91:	c7 05 94 04 03 c0 28 af 01 c0 	mov    DWORD PTR ds:0xc0030494,0xc001af28
c001bf9b:	c7 05 98 04 03 c0 fe ab 01 c0 	mov    DWORD PTR ds:0xc0030498,0xc001abfe
c001bfa5:	c7 05 9c 04 03 c0 da af 01 c0 	mov    DWORD PTR ds:0xc003049c,0xc001afda
c001bfaf:	c7 05 a0 04 03 c0 77 ac 01 c0 	mov    DWORD PTR ds:0xc00304a0,0xc001ac77
c001bfb9:	c7 05 a4 04 03 c0 8e ac 01 c0 	mov    DWORD PTR ds:0xc00304a4,0xc001ac8e
c001bfc3:	c3                   	ret    

c001bfc4 <Sys::systemCall(regs*, void*)>:
c001bfc4:	53                   	push   ebx
c001bfc5:	83 ec 08             	sub    esp,0x8
c001bfc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfcc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bfcf:	83 f8 7f             	cmp    eax,0x7f
c001bfd2:	77 16                	ja     c001bfea <Sys::systemCall(regs*, void*)+0x26>
c001bfd4:	8b 14 85 e0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc20]
c001bfdb:	85 d2                	test   edx,edx
c001bfdd:	74 0b                	je     c001bfea <Sys::systemCall(regs*, void*)+0x26>
c001bfdf:	83 ec 0c             	sub    esp,0xc
c001bfe2:	53                   	push   ebx
c001bfe3:	ff d2                	call   edx
c001bfe5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bfe8:	eb 0d                	jmp    c001bff7 <Sys::systemCall(regs*, void*)+0x33>
c001bfea:	52                   	push   edx
c001bfeb:	52                   	push   edx
c001bfec:	50                   	push   eax
c001bfed:	68 2d b8 02 c0       	push   0xc002b82d
c001bff2:	e8 72 66 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001bff7:	83 c4 10             	add    esp,0x10
c001bffa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bfff:	31 d2                	xor    edx,edx
c001c001:	83 c4 08             	add    esp,0x8
c001c004:	5b                   	pop    ebx
c001c005:	c3                   	ret    

c001c006 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c006:	55                   	push   ebp
c001c007:	57                   	push   edi
c001c008:	56                   	push   esi
c001c009:	53                   	push   ebx
c001c00a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c010:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c017:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c01e:	85 c0                	test   eax,eax
c001c020:	0f 95 c1             	setne  cl
c001c023:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c02b:	0f 94 c2             	sete   dl
c001c02e:	84 d1                	test   cl,dl
c001c030:	74 23                	je     c001c055 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c032:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c038:	74 1b                	je     c001c055 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c03a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c040:	89 da                	mov    edx,ebx
c001c042:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c048:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c04e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c055:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c05c:	05 ff 0f 00 00       	add    eax,0xfff
c001c061:	83 ec 0c             	sub    esp,0xc
c001c064:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c068:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c06e:	c1 e8 0c             	shr    eax,0xc
c001c071:	89 fe                	mov    esi,edi
c001c073:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c077:	c1 ee 0c             	shr    esi,0xc
c001c07a:	6a 01                	push   0x1
c001c07c:	e8 7e 51 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c001c081:	89 c5                	mov    ebp,eax
c001c083:	58                   	pop    eax
c001c084:	5a                   	pop    edx
c001c085:	56                   	push   esi
c001c086:	68 41 b8 02 c0       	push   0xc002b841
c001c08b:	e8 d9 65 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001c090:	59                   	pop    ecx
c001c091:	58                   	pop    eax
c001c092:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c096:	68 53 b8 02 c0       	push   0xc002b853
c001c09b:	e8 c9 65 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c0a9:	0f 86 31 01 00 00    	jbe    c001c1e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c0af:	c1 e6 0c             	shl    esi,0xc
c001c0b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0b5:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c0b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0bc:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c0c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c0c6:	01 df                	add    edi,ebx
c001c0c8:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c0cb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c0cf:	0f 84 08 01 00 00    	je     c001c1dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c0d5:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c0db:	76 05                	jbe    c001c0e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c0dd:	bf 00 10 00 00       	mov    edi,0x1000
c001c0e2:	83 ec 0c             	sub    esp,0xc
c001c0e5:	31 d2                	xor    edx,edx
c001c0e7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c0ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c0f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c0f4:	50                   	push   eax
c001c0f5:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c0f9:	56                   	push   esi
c001c0fa:	52                   	push   edx
c001c0fb:	57                   	push   edi
c001c0fc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c103:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c106:	83 c4 20             	add    esp,0x20
c001c109:	85 c0                	test   eax,eax
c001c10b:	74 0a                	je     c001c117 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c10d:	53                   	push   ebx
c001c10e:	53                   	push   ebx
c001c10f:	50                   	push   eax
c001c110:	68 65 b8 02 c0       	push   0xc002b865
c001c115:	eb 0f                	jmp    c001c126 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c117:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c11b:	74 20                	je     c001c13d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c11d:	51                   	push   ecx
c001c11e:	51                   	push   ecx
c001c11f:	6a 00                	push   0x0
c001c121:	68 90 b8 02 c0       	push   0xc002b890
c001c126:	e8 3e 65 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001c12b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c12e:	e8 12 55 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001c133:	83 c4 10             	add    esp,0x10
c001c136:	31 c0                	xor    eax,eax
c001c138:	e9 68 01 00 00       	jmp    c001c2a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c13d:	fa                   	cli    
c001c13e:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001c144:	e8 28 38 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c149:	6a 07                	push   0x7
c001c14b:	89 c7                	mov    edi,eax
c001c14d:	55                   	push   ebp
c001c14e:	50                   	push   eax
c001c14f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c154:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c157:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c15d:	e8 5a 58 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c162:	83 c4 0c             	add    esp,0xc
c001c165:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c16c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c172:	6a 00                	push   0x0
c001c174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c179:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c17c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c182:	e8 8f 56 ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c001c187:	58                   	pop    eax
c001c188:	5a                   	pop    edx
c001c189:	68 07 0c 00 00       	push   0xc07
c001c18e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c192:	57                   	push   edi
c001c193:	89 ef                	mov    edi,ebp
c001c195:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c19c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1a2:	6a 00                	push   0x0
c001c1a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1b2:	e8 c1 5b ff ff       	call   c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1b7:	b9 00 10 00 00       	mov    ecx,0x1000
c001c1bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1be:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001c1c3:	83 c4 20             	add    esp,0x20
c001c1c6:	48                   	dec    eax
c001c1c7:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001c1cc:	85 c0                	test   eax,eax
c001c1ce:	75 01                	jne    c001c1d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c1d0:	fb                   	sti    
c001c1d1:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c1d8:	e9 df fe ff ff       	jmp    c001c0bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c1dd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c1e0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c1e8:	0f 86 a9 00 00 00    	jbe    c001c297 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c1ee:	fa                   	cli    
c001c1ef:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001c1f5:	51                   	push   ecx
c001c1f6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c203:	6a 00                	push   0x0
c001c205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c213:	e8 fe 55 ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c001c218:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c21c:	c1 e6 0c             	shl    esi,0xc
c001c21f:	01 de                	add    esi,ebx
c001c221:	83 c4 10             	add    esp,0x10
c001c224:	39 de                	cmp    esi,ebx
c001c226:	74 61                	je     c001c289 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c228:	e8 44 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c22d:	6a 07                	push   0x7
c001c22f:	89 c7                	mov    edi,eax
c001c231:	55                   	push   ebp
c001c232:	50                   	push   eax
c001c233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c238:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c241:	e8 76 57 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c246:	58                   	pop    eax
c001c247:	5a                   	pop    edx
c001c248:	68 07 0c 00 00       	push   0xc07
c001c24d:	53                   	push   ebx
c001c24e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c254:	57                   	push   edi
c001c255:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c25c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c262:	6a 00                	push   0x0
c001c264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c269:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c272:	e8 01 5b ff ff       	call   c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c277:	83 c4 1c             	add    esp,0x1c
c001c27a:	68 00 10 00 00       	push   0x1000
c001c27f:	6a 00                	push   0x0
c001c281:	55                   	push   ebp
c001c282:	e8 c9 44 fe ff       	call   c0000750 <memset>
c001c287:	eb 98                	jmp    c001c221 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c289:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001c28e:	48                   	dec    eax
c001c28f:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001c294:	75 01                	jne    c001c297 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c296:	fb                   	sti    
c001c297:	83 ec 0c             	sub    esp,0xc
c001c29a:	55                   	push   ebp
c001c29b:	e8 a5 53 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001c2a0:	83 c4 10             	add    esp,0x10
c001c2a3:	b0 01                	mov    al,0x1
c001c2a5:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c2ab:	5b                   	pop    ebx
c001c2ac:	5e                   	pop    esi
c001c2ad:	5f                   	pop    edi
c001c2ae:	5d                   	pop    ebp
c001c2af:	c3                   	ret    

c001c2b0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c2b0:	55                   	push   ebp
c001c2b1:	57                   	push   edi
c001c2b2:	56                   	push   esi
c001c2b3:	53                   	push   ebx
c001c2b4:	83 ec 48             	sub    esp,0x48
c001c2b7:	68 14 01 00 00       	push   0x114
c001c2bc:	e8 d8 32 ff ff       	call   c000f599 <malloc>
c001c2c1:	83 c4 0c             	add    esp,0xc
c001c2c4:	89 c6                	mov    esi,eax
c001c2c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c2ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c2ce:	50                   	push   eax
c001c2cf:	e8 f4 68 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001c2d4:	58                   	pop    eax
c001c2d5:	5a                   	pop    edx
c001c2d6:	6a 01                	push   0x1
c001c2d8:	56                   	push   esi
c001c2d9:	e8 4e 69 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001c2de:	83 c4 10             	add    esp,0x10
c001c2e1:	85 c0                	test   eax,eax
c001c2e3:	0f 85 47 01 00 00    	jne    c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2e9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c2f1:	83 ec 0c             	sub    esp,0xc
c001c2f4:	6a 34                	push   0x34
c001c2f6:	e8 9e 32 ff ff       	call   c000f599 <malloc>
c001c2fb:	89 c3                	mov    ebx,eax
c001c2fd:	58                   	pop    eax
c001c2fe:	8b 06                	mov    eax,DWORD PTR [esi]
c001c300:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c304:	57                   	push   edi
c001c305:	53                   	push   ebx
c001c306:	6a 00                	push   0x0
c001c308:	6a 34                	push   0x34
c001c30a:	56                   	push   esi
c001c30b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c30e:	83 c4 20             	add    esp,0x20
c001c311:	85 c0                	test   eax,eax
c001c313:	0f 85 17 01 00 00    	jne    c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c319:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c31f:	0f 85 0b 01 00 00    	jne    c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c325:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c328:	85 c0                	test   eax,eax
c001c32a:	0f 84 00 01 00 00    	je     c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c330:	31 d2                	xor    edx,edx
c001c332:	55                   	push   ebp
c001c333:	52                   	push   edx
c001c334:	50                   	push   eax
c001c335:	56                   	push   esi
c001c336:	e8 af 69 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c33b:	83 c4 10             	add    esp,0x10
c001c33e:	85 c0                	test   eax,eax
c001c340:	0f 85 ea 00 00 00    	jne    c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c34c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c350:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c354:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c358:	0f af c2             	imul   eax,edx
c001c35b:	50                   	push   eax
c001c35c:	e8 38 32 ff ff       	call   c000f599 <malloc>
c001c361:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c363:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c367:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c36a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c36e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c372:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c376:	0f af c2             	imul   eax,edx
c001c379:	99                   	cdq    
c001c37a:	52                   	push   edx
c001c37b:	50                   	push   eax
c001c37c:	56                   	push   esi
c001c37d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c380:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c383:	83 c4 20             	add    esp,0x20
c001c386:	85 c0                	test   eax,eax
c001c388:	0f 84 a2 00 00 00    	je     c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c38e:	31 d2                	xor    edx,edx
c001c390:	51                   	push   ecx
c001c391:	52                   	push   edx
c001c392:	50                   	push   eax
c001c393:	56                   	push   esi
c001c394:	e8 51 69 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c399:	83 c4 10             	add    esp,0x10
c001c39c:	85 c0                	test   eax,eax
c001c39e:	0f 85 8c 00 00 00    	jne    c001c430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3ab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3af:	31 ed                	xor    ebp,ebp
c001c3b1:	0f af c2             	imul   eax,edx
c001c3b4:	50                   	push   eax
c001c3b5:	e8 df 31 ff ff       	call   c000f599 <malloc>
c001c3ba:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c3c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3cb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3cf:	0f af c2             	imul   eax,edx
c001c3d2:	99                   	cdq    
c001c3d3:	52                   	push   edx
c001c3d4:	50                   	push   eax
c001c3d5:	56                   	push   esi
c001c3d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3d9:	83 c4 20             	add    esp,0x20
c001c3dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c3e4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c3e8:	0f 86 80 00 00 00    	jbe    c001c46e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c3ee:	0f b7 fd             	movzx  edi,bp
c001c3f1:	c1 e7 05             	shl    edi,0x5
c001c3f4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c3f8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c3fb:	75 6b                	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c3fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c404:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c40b:	52                   	push   edx
c001c40c:	31 d2                	xor    edx,edx
c001c40e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c411:	52                   	push   edx
c001c412:	50                   	push   eax
c001c413:	56                   	push   esi
c001c414:	e8 d1 68 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 17                	je     c001c437 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	68 bc b8 02 c0       	push   0xc002b8bc
c001c428:	e8 3c 62 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001c42d:	83 c4 10             	add    esp,0x10
c001c430:	31 c0                	xor    eax,eax
c001c432:	e9 87 00 00 00       	jmp    c001c4be <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c437:	83 ec 0c             	sub    esp,0xc
c001c43a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c43d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c440:	50                   	push   eax
c001c441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c449:	56                   	push   esi
c001c44a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c44e:	e8 b3 fb ff ff       	call   c001c006 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c453:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c457:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c45b:	83 c4 20             	add    esp,0x20
c001c45e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c462:	73 04                	jae    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c468:	45                   	inc    ebp
c001c469:	e9 76 ff ff ff       	jmp    c001c3e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c46e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c472:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c47a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c480:	83 ec 0c             	sub    esp,0xc
c001c483:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c489:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c48e:	05 00 10 00 00       	add    eax,0x1000
c001c493:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c49a:	e8 0a 31 ff ff       	call   c000f5a9 <free>
c001c49f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4a2:	e8 02 31 ff ff       	call   c000f5a9 <free>
c001c4a7:	58                   	pop    eax
c001c4a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4ac:	e8 f8 30 ff ff       	call   c000f5a9 <free>
c001c4b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4b4:	e8 d1 67 ff ff       	call   c0012c8a <File::close()>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	b0 01                	mov    al,0x1
c001c4be:	83 c4 3c             	add    esp,0x3c
c001c4c1:	5b                   	pop    ebx
c001c4c2:	5e                   	pop    esi
c001c4c3:	5f                   	pop    edi
c001c4c4:	5d                   	pop    ebp
c001c4c5:	c3                   	ret    

c001c4c6 <Thr::runtimeReferenceHelper()>:
c001c4c6:	83 ec 18             	sub    esp,0x18
c001c4c9:	68 c4 b8 02 c0       	push   0xc002b8c4
c001c4ce:	e8 96 61 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001c4d3:	fa                   	cli    
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	eb fe                	jmp    c001c4d7 <Thr::runtimeReferenceHelper()+0x11>

c001c4d9 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c4d9:	57                   	push   edi
c001c4da:	56                   	push   esi
c001c4db:	53                   	push   ebx
c001c4dc:	31 db                	xor    ebx,ebx
c001c4de:	39 1d 80 0d 03 c0    	cmp    DWORD PTR ds:0xc0030d80,ebx
c001c4e4:	7e 3c                	jle    c001c522 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c4e6:	8b 34 9d 00 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf300]
c001c4ed:	31 ff                	xor    edi,edi
c001c4ef:	39 3c 9d 00 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf400],edi
c001c4f6:	7e 27                	jle    c001c51f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c4f8:	50                   	push   eax
c001c4f9:	50                   	push   eax
c001c4fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4fe:	8b 06                	mov    eax,DWORD PTR [esi]
c001c500:	03 04 9d 80 0c 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf380]
c001c507:	50                   	push   eax
c001c508:	e8 8b 43 fe ff       	call   c0000898 <strcmp>
c001c50d:	83 c4 10             	add    esp,0x10
c001c510:	85 c0                	test   eax,eax
c001c512:	75 05                	jne    c001c519 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c514:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c517:	eb 0b                	jmp    c001c524 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c519:	83 c6 10             	add    esi,0x10
c001c51c:	47                   	inc    edi
c001c51d:	eb d0                	jmp    c001c4ef <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c51f:	43                   	inc    ebx
c001c520:	eb bc                	jmp    c001c4de <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c522:	31 c0                	xor    eax,eax
c001c524:	5b                   	pop    ebx
c001c525:	5e                   	pop    esi
c001c526:	5f                   	pop    edi
c001c527:	c3                   	ret    

c001c528 <Thr::loadKernelSymbolTable(char const*)>:
c001c528:	55                   	push   ebp
c001c529:	57                   	push   edi
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	83 ec 68             	sub    esp,0x68
c001c52f:	8b 35 d0 0d 03 c0    	mov    esi,DWORD PTR ds:0xc0030dd0
c001c535:	68 14 01 00 00       	push   0x114
c001c53a:	e8 5a 30 ff ff       	call   c000f599 <malloc>
c001c53f:	83 c4 0c             	add    esp,0xc
c001c542:	89 c3                	mov    ebx,eax
c001c544:	56                   	push   esi
c001c545:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c549:	50                   	push   eax
c001c54a:	e8 79 66 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001c54f:	5e                   	pop    esi
c001c550:	5f                   	pop    edi
c001c551:	6a 01                	push   0x1
c001c553:	53                   	push   ebx
c001c554:	e8 d3 66 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	85 c0                	test   eax,eax
c001c55e:	74 0a                	je     c001c56a <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c560:	83 ec 0c             	sub    esp,0xc
c001c563:	68 e6 b8 02 c0       	push   0xc002b8e6
c001c568:	eb 34                	jmp    c001c59e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c56a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	6a 34                	push   0x34
c001c577:	e8 1d 30 ff ff       	call   c000f599 <malloc>
c001c57c:	59                   	pop    ecx
c001c57d:	89 c7                	mov    edi,eax
c001c57f:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c583:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c585:	56                   	push   esi
c001c586:	57                   	push   edi
c001c587:	6a 00                	push   0x0
c001c589:	6a 34                	push   0x34
c001c58b:	53                   	push   ebx
c001c58c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c58f:	83 c4 20             	add    esp,0x20
c001c592:	85 c0                	test   eax,eax
c001c594:	74 17                	je     c001c5ad <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	68 fd b8 02 c0       	push   0xc002b8fd
c001c59e:	e8 32 d8 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	31 c0                	xor    eax,eax
c001c5a8:	e9 31 02 00 00       	jmp    c001c7de <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c5ad:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c5b3:	75 e1                	jne    c001c596 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5b5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c5b8:	85 c0                	test   eax,eax
c001c5ba:	74 da                	je     c001c596 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5bc:	52                   	push   edx
c001c5bd:	31 d2                	xor    edx,edx
c001c5bf:	52                   	push   edx
c001c5c0:	50                   	push   eax
c001c5c1:	53                   	push   ebx
c001c5c2:	e8 23 67 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	85 c0                	test   eax,eax
c001c5cc:	75 c8                	jne    c001c596 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5ce:	83 ec 0c             	sub    esp,0xc
c001c5d1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c5d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c5d9:	31 ed                	xor    ebp,ebp
c001c5db:	0f af c2             	imul   eax,edx
c001c5de:	50                   	push   eax
c001c5df:	e8 b5 2f ff ff       	call   c000f599 <malloc>
c001c5e4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c5e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5ea:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c5f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c5f9:	0f af c2             	imul   eax,edx
c001c5fc:	99                   	cdq    
c001c5fd:	52                   	push   edx
c001c5fe:	50                   	push   eax
c001c5ff:	53                   	push   ebx
c001c600:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c603:	83 c4 20             	add    esp,0x20
c001c606:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c60e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c616:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c61e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c626:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c62a:	0f 86 aa 00 00 00    	jbe    c001c6da <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c630:	0f b7 f5             	movzx  esi,bp
c001c633:	6b f6 28             	imul   esi,esi,0x28
c001c636:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c63a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c63d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c641:	50                   	push   eax
c001c642:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c646:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c64a:	8b 16                	mov    edx,DWORD PTR [esi]
c001c64c:	6b c0 28             	imul   eax,eax,0x28
c001c64f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c653:	89 d0                	mov    eax,edx
c001c655:	31 d2                	xor    edx,edx
c001c657:	52                   	push   edx
c001c658:	50                   	push   eax
c001c659:	53                   	push   ebx
c001c65a:	e8 8b 66 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c65f:	83 c4 0c             	add    esp,0xc
c001c662:	6a 20                	push   0x20
c001c664:	6a 00                	push   0x0
c001c666:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c66a:	52                   	push   edx
c001c66b:	e8 e0 40 fe ff       	call   c0000750 <memset>
c001c670:	58                   	pop    eax
c001c671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c673:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c677:	51                   	push   ecx
c001c678:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c67c:	52                   	push   edx
c001c67d:	6a 00                	push   0x0
c001c67f:	6a 1f                	push   0x1f
c001c681:	53                   	push   ebx
c001c682:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c685:	83 c4 18             	add    esp,0x18
c001c688:	68 14 b9 02 c0       	push   0xc002b914
c001c68d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c691:	52                   	push   edx
c001c692:	e8 01 42 fe ff       	call   c0000898 <strcmp>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	85 c0                	test   eax,eax
c001c69c:	75 0f                	jne    c001c6ad <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c69e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6ad:	50                   	push   eax
c001c6ae:	50                   	push   eax
c001c6af:	68 1c b9 02 c0       	push   0xc002b91c
c001c6b4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c6b8:	50                   	push   eax
c001c6b9:	e8 da 41 fe ff       	call   c0000898 <strcmp>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	85 c0                	test   eax,eax
c001c6c3:	75 0f                	jne    c001c6d4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c6c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6d4:	45                   	inc    ebp
c001c6d5:	e9 4c ff ff ff       	jmp    c001c626 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c6da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c6df:	75 10                	jne    c001c6f1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c6e1:	83 ec 0c             	sub    esp,0xc
c001c6e4:	68 24 b9 02 c0       	push   0xc002b924
c001c6e9:	e8 e7 d6 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001c6ee:	83 c4 10             	add    esp,0x10
c001c6f1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c6f6:	75 10                	jne    c001c708 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	68 24 b9 02 c0       	push   0xc002b924
c001c700:	e8 d0 d6 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	31 d2                	xor    edx,edx
c001c70a:	50                   	push   eax
c001c70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70f:	52                   	push   edx
c001c710:	50                   	push   eax
c001c711:	53                   	push   ebx
c001c712:	e8 d3 65 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c717:	5a                   	pop    edx
c001c718:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c71c:	e8 78 2e ff ff       	call   c000f599 <malloc>
c001c721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c729:	31 c9                	xor    ecx,ecx
c001c72b:	5e                   	pop    esi
c001c72c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c72e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c732:	55                   	push   ebp
c001c733:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c737:	51                   	push   ecx
c001c738:	52                   	push   edx
c001c739:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c73d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c741:	53                   	push   ebx
c001c742:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c745:	83 c4 14             	add    esp,0x14
c001c748:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c74c:	e8 48 2e ff ff       	call   c000f599 <malloc>
c001c751:	89 c6                	mov    esi,eax
c001c753:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c755:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c758:	56                   	push   esi
c001c759:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c75d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c761:	51                   	push   ecx
c001c762:	52                   	push   edx
c001c763:	53                   	push   ebx
c001c764:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c767:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c76b:	8b 15 80 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d80
c001c771:	83 c4 1c             	add    esp,0x1c
c001c774:	c1 e8 04             	shr    eax,0x4
c001c777:	89 04 95 00 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf400],eax
c001c77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c782:	31 d2                	xor    edx,edx
c001c784:	52                   	push   edx
c001c785:	50                   	push   eax
c001c786:	53                   	push   ebx
c001c787:	e8 5e 65 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c78c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c78e:	31 d2                	xor    edx,edx
c001c790:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c793:	56                   	push   esi
c001c794:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c798:	52                   	push   edx
c001c799:	50                   	push   eax
c001c79a:	53                   	push   ebx
c001c79b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c79e:	83 c4 14             	add    esp,0x14
c001c7a1:	53                   	push   ebx
c001c7a2:	e8 e3 64 ff ff       	call   c0012c8a <File::close()>
c001c7a7:	5d                   	pop    ebp
c001c7a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7ac:	e8 f8 2d ff ff       	call   c000f5a9 <free>
c001c7b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7b4:	e8 f0 2d ff ff       	call   c000f5a9 <free>
c001c7b9:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c001c7be:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c7c2:	8d 50 01             	lea    edx,[eax+0x1]
c001c7c5:	89 0c 85 00 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf300],ecx
c001c7cc:	89 34 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],esi
c001c7d3:	89 15 80 0d 03 c0    	mov    DWORD PTR ds:0xc0030d80,edx
c001c7d9:	83 c4 10             	add    esp,0x10
c001c7dc:	b0 01                	mov    al,0x1
c001c7de:	83 c4 5c             	add    esp,0x5c
c001c7e1:	5b                   	pop    ebx
c001c7e2:	5e                   	pop    esi
c001c7e3:	5f                   	pop    edi
c001c7e4:	5d                   	pop    ebp
c001c7e5:	c3                   	ret    

c001c7e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c7e6:	55                   	push   ebp
c001c7e7:	57                   	push   edi
c001c7e8:	56                   	push   esi
c001c7e9:	53                   	push   ebx
c001c7ea:	81 ec 68 03 00 00    	sub    esp,0x368
c001c7f0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c7f7:	8b 1d d0 0d 03 c0    	mov    ebx,DWORD PTR ds:0xc0030dd0
c001c7fd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c801:	68 14 01 00 00       	push   0x114
c001c806:	e8 8e 2d ff ff       	call   c000f599 <malloc>
c001c80b:	83 c4 0c             	add    esp,0xc
c001c80e:	89 c5                	mov    ebp,eax
c001c810:	53                   	push   ebx
c001c811:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c818:	50                   	push   eax
c001c819:	e8 aa 63 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001c81e:	5e                   	pop    esi
c001c81f:	5f                   	pop    edi
c001c820:	6a 01                	push   0x1
c001c822:	55                   	push   ebp
c001c823:	e8 04 64 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	85 c0                	test   eax,eax
c001c82d:	0f 85 a7 06 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c833:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	6a 34                	push   0x34
c001c840:	e8 54 2d ff ff       	call   c000f599 <malloc>
c001c845:	5b                   	pop    ebx
c001c846:	89 c7                	mov    edi,eax
c001c848:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c84c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c84f:	53                   	push   ebx
c001c850:	57                   	push   edi
c001c851:	6a 00                	push   0x0
c001c853:	6a 34                	push   0x34
c001c855:	55                   	push   ebp
c001c856:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c859:	83 c4 20             	add    esp,0x20
c001c85c:	85 c0                	test   eax,eax
c001c85e:	0f 85 76 06 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c864:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c86a:	0f 85 6a 06 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c870:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c873:	85 c0                	test   eax,eax
c001c875:	0f 84 5f 06 00 00    	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c87b:	31 d2                	xor    edx,edx
c001c87d:	51                   	push   ecx
c001c87e:	52                   	push   edx
c001c87f:	50                   	push   eax
c001c880:	55                   	push   ebp
c001c881:	e8 64 64 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c886:	83 c4 10             	add    esp,0x10
c001c889:	85 c0                	test   eax,eax
c001c88b:	0f 85 49 06 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c891:	83 ec 0c             	sub    esp,0xc
c001c894:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c897:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c89b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c89f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8a3:	0f af c2             	imul   eax,edx
c001c8a6:	50                   	push   eax
c001c8a7:	e8 ed 2c ff ff       	call   c000f599 <malloc>
c001c8ac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8ba:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8c2:	0f af c2             	imul   eax,edx
c001c8c5:	99                   	cdq    
c001c8c6:	52                   	push   edx
c001c8c7:	50                   	push   eax
c001c8c8:	55                   	push   ebp
c001c8c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8cc:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c8cf:	83 c4 20             	add    esp,0x20
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	0f 84 00 06 00 00    	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8da:	52                   	push   edx
c001c8db:	31 d2                	xor    edx,edx
c001c8dd:	52                   	push   edx
c001c8de:	50                   	push   eax
c001c8df:	55                   	push   ebp
c001c8e0:	e8 05 64 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	85 c0                	test   eax,eax
c001c8ea:	0f 85 ea 05 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f0:	83 ec 0c             	sub    esp,0xc
c001c8f3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c8f7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c8fb:	31 f6                	xor    esi,esi
c001c8fd:	0f af c2             	imul   eax,edx
c001c900:	50                   	push   eax
c001c901:	e8 93 2c ff ff       	call   c000f599 <malloc>
c001c906:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c909:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c90d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c910:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c914:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c918:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c91c:	0f af c2             	imul   eax,edx
c001c91f:	99                   	cdq    
c001c920:	52                   	push   edx
c001c921:	50                   	push   eax
c001c922:	55                   	push   ebp
c001c923:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c926:	83 c4 20             	add    esp,0x20
c001c929:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c92d:	0f 86 8a 00 00 00    	jbe    c001c9bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c933:	0f b7 de             	movzx  ebx,si
c001c936:	c1 e3 05             	shl    ebx,0x5
c001c939:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c93d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c940:	75 75                	jne    c001c9b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c942:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c945:	31 d2                	xor    edx,edx
c001c947:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c94b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c94e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c952:	50                   	push   eax
c001c953:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c956:	52                   	push   edx
c001c957:	50                   	push   eax
c001c958:	55                   	push   ebp
c001c959:	e8 8c 63 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	85 c0                	test   eax,eax
c001c963:	0f 85 71 05 00 00    	jne    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c969:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c970:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c973:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c977:	31 d2                	xor    edx,edx
c001c979:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c97d:	83 ec 0c             	sub    esp,0xc
c001c980:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c984:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c98b:	50                   	push   eax
c001c98c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c994:	52                   	push   edx
c001c995:	50                   	push   eax
c001c996:	55                   	push   ebp
c001c997:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c99a:	83 c4 1c             	add    esp,0x1c
c001c99d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9a0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c9a3:	50                   	push   eax
c001c9a4:	6a 00                	push   0x0
c001c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9aa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c9ae:	50                   	push   eax
c001c9af:	e8 9c 3d fe ff       	call   c0000750 <memset>
c001c9b4:	83 c4 10             	add    esp,0x10
c001c9b7:	46                   	inc    esi
c001c9b8:	e9 6c ff ff ff       	jmp    c001c929 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c9bd:	53                   	push   ebx
c001c9be:	31 db                	xor    ebx,ebx
c001c9c0:	68 00 01 00 00       	push   0x100
c001c9c5:	6a 00                	push   0x0
c001c9c7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c9cb:	50                   	push   eax
c001c9cc:	e8 7f 3d fe ff       	call   c0000750 <memset>
c001c9d1:	83 c4 0c             	add    esp,0xc
c001c9d4:	68 00 01 00 00       	push   0x100
c001c9d9:	6a 00                	push   0x0
c001c9db:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c9e2:	50                   	push   eax
c001c9e3:	e8 68 3d fe ff       	call   c0000750 <memset>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c9f3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c9fb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca13:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca17:	0f 86 30 01 00 00    	jbe    c001cb4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca1d:	0f b7 f3             	movzx  esi,bx
c001ca20:	6b f6 28             	imul   esi,esi,0x28
c001ca23:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca27:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca2e:	52                   	push   edx
c001ca2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca33:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca37:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca39:	6b d2 28             	imul   edx,edx,0x28
c001ca3c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca40:	31 d2                	xor    edx,edx
c001ca42:	52                   	push   edx
c001ca43:	50                   	push   eax
c001ca44:	55                   	push   ebp
c001ca45:	e8 a0 62 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001ca4a:	83 c4 0c             	add    esp,0xc
c001ca4d:	6a 20                	push   0x20
c001ca4f:	6a 00                	push   0x0
c001ca51:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ca58:	51                   	push   ecx
c001ca59:	e8 f2 3c fe ff       	call   c0000750 <memset>
c001ca5e:	59                   	pop    ecx
c001ca5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca62:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ca66:	52                   	push   edx
c001ca67:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ca6e:	51                   	push   ecx
c001ca6f:	6a 00                	push   0x0
c001ca71:	6a 1f                	push   0x1f
c001ca73:	55                   	push   ebp
c001ca74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca77:	83 c4 1c             	add    esp,0x1c
c001ca7a:	6a 09                	push   0x9
c001ca7c:	68 3e b9 02 c0       	push   0xc002b93e
c001ca81:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ca88:	51                   	push   ecx
c001ca89:	e8 be 3b fe ff       	call   c000064c <memcmp>
c001ca8e:	83 c4 10             	add    esp,0x10
c001ca91:	85 c0                	test   eax,eax
c001ca93:	75 21                	jne    c001cab6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ca95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca9d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001caa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caa5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caa8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001caaf:	89 d0                	mov    eax,edx
c001cab1:	40                   	inc    eax
c001cab2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cab6:	50                   	push   eax
c001cab7:	6a 09                	push   0x9
c001cab9:	68 48 b9 02 c0       	push   0xc002b948
c001cabe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cac5:	50                   	push   eax
c001cac6:	e8 81 3b fe ff       	call   c000064c <memcmp>
c001cacb:	83 c4 10             	add    esp,0x10
c001cace:	85 c0                	test   eax,eax
c001cad0:	75 21                	jne    c001caf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cada:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cae2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cae5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001caec:	89 d0                	mov    eax,edx
c001caee:	40                   	inc    eax
c001caef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caf3:	50                   	push   eax
c001caf4:	50                   	push   eax
c001caf5:	68 14 b9 02 c0       	push   0xc002b914
c001cafa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb01:	50                   	push   eax
c001cb02:	e8 91 3d fe ff       	call   c0000898 <strcmp>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	85 c0                	test   eax,eax
c001cb0c:	75 0f                	jne    c001cb1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb1d:	50                   	push   eax
c001cb1e:	50                   	push   eax
c001cb1f:	68 1c b9 02 c0       	push   0xc002b91c
c001cb24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb2b:	50                   	push   eax
c001cb2c:	e8 67 3d fe ff       	call   c0000898 <strcmp>
c001cb31:	83 c4 10             	add    esp,0x10
c001cb34:	85 c0                	test   eax,eax
c001cb36:	75 0f                	jne    c001cb47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb38:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cb47:	43                   	inc    ebx
c001cb48:	e9 c6 fe ff ff       	jmp    c001ca13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cb4d:	31 d2                	xor    edx,edx
c001cb4f:	50                   	push   eax
c001cb50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb54:	52                   	push   edx
c001cb55:	50                   	push   eax
c001cb56:	55                   	push   ebp
c001cb57:	e8 8e 61 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001cb5c:	58                   	pop    eax
c001cb5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb61:	e8 33 2a ff ff       	call   c000f599 <malloc>
c001cb66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb69:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cb6d:	31 d2                	xor    edx,edx
c001cb6f:	58                   	pop    eax
c001cb70:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cb74:	53                   	push   ebx
c001cb75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cb79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb7d:	52                   	push   edx
c001cb7e:	50                   	push   eax
c001cb7f:	55                   	push   ebp
c001cb80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb83:	83 c4 14             	add    esp,0x14
c001cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb8a:	e8 0a 2a ff ff       	call   c000f599 <malloc>
c001cb8f:	31 d2                	xor    edx,edx
c001cb91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb95:	83 c4 0c             	add    esp,0xc
c001cb98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb9c:	52                   	push   edx
c001cb9d:	50                   	push   eax
c001cb9e:	55                   	push   ebp
c001cb9f:	e8 46 61 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001cba4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cba7:	31 d2                	xor    edx,edx
c001cba9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbb4:	52                   	push   edx
c001cbb5:	50                   	push   eax
c001cbb6:	55                   	push   ebp
c001cbb7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbba:	83 c4 20             	add    esp,0x20
c001cbbd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbc5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cbc9:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cbcd:	0f 84 0b 03 00 00    	je     c001cede <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cbd3:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cbda:	31 d2                	xor    edx,edx
c001cbdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbe0:	c1 e8 03             	shr    eax,0x3
c001cbe3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cbe7:	51                   	push   ecx
c001cbe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbec:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cbf0:	52                   	push   edx
c001cbf1:	50                   	push   eax
c001cbf2:	55                   	push   ebp
c001cbf3:	e8 f2 60 ff ff       	call   c0012cea <File::seek(unsigned long long)>
c001cbf8:	5b                   	pop    ebx
c001cbf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbfd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc04:	e8 90 29 ff ff       	call   c000f599 <malloc>
c001cc09:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc10:	31 d2                	xor    edx,edx
c001cc12:	5e                   	pop    esi
c001cc13:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc17:	50                   	push   eax
c001cc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc20:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc27:	52                   	push   edx
c001cc28:	50                   	push   eax
c001cc29:	55                   	push   ebp
c001cc2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc2d:	83 c4 20             	add    esp,0x20
c001cc30:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc38:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc3c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc40:	0f 8d 7c 02 00 00    	jge    c001cec2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cc46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc4e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cc53:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cc56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cc5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc5e:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cc62:	89 d8                	mov    eax,ebx
c001cc64:	c1 e8 08             	shr    eax,0x8
c001cc67:	89 c6                	mov    esi,eax
c001cc69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cc6d:	c1 e6 04             	shl    esi,0x4
c001cc70:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cc74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cc77:	85 d2                	test   edx,edx
c001cc79:	0f 85 bf 00 00 00    	jne    c001cd3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc7f:	83 ec 0c             	sub    esp,0xc
c001cc82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc86:	03 06                	add    eax,DWORD PTR [esi]
c001cc88:	50                   	push   eax
c001cc89:	e8 4b f8 ff ff       	call   c001c4d9 <Thr::getAddressOfKernelSymbol(char const*)>
c001cc8e:	83 c4 10             	add    esp,0x10
c001cc91:	89 c2                	mov    edx,eax
c001cc93:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cc98:	85 c0                	test   eax,eax
c001cc9a:	0f 85 9e 00 00 00    	jne    c001cd3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cca7:	03 06                	add    eax,DWORD PTR [esi]
c001cca9:	50                   	push   eax
c001ccaa:	e8 90 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	89 c2                	mov    edx,eax
c001ccb4:	85 c0                	test   eax,eax
c001ccb6:	0f 85 82 00 00 00    	jne    c001cd3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccbc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ccc0:	50                   	push   eax
c001ccc1:	50                   	push   eax
c001ccc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccc6:	03 06                	add    eax,DWORD PTR [esi]
c001ccc8:	50                   	push   eax
c001ccc9:	68 52 b9 02 c0       	push   0xc002b952
c001ccce:	e8 96 59 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001ccd3:	58                   	pop    eax
c001ccd4:	5a                   	pop    edx
c001ccd5:	68 6c b9 02 c0       	push   0xc002b96c
c001ccda:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cce1:	50                   	push   eax
c001cce2:	e8 25 3b fe ff       	call   c000080c <strcpy>
c001cce7:	59                   	pop    ecx
c001cce8:	58                   	pop    eax
c001cce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cced:	03 06                	add    eax,DWORD PTR [esi]
c001ccef:	50                   	push   eax
c001ccf0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccf7:	50                   	push   eax
c001ccf8:	e8 4f 3c fe ff       	call   c000094c <strcat>
c001ccfd:	58                   	pop    eax
c001ccfe:	5a                   	pop    edx
c001ccff:	68 02 ba 02 c0       	push   0xc002ba02
c001cd04:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd0b:	50                   	push   eax
c001cd0c:	e8 3b 3c fe ff       	call   c000094c <strcat>
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd19:	0f 84 5d 01 00 00    	je     c001ce7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd29:	50                   	push   eax
c001cd2a:	e8 a6 d0 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd36:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd3a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd3e:	80 fb 01             	cmp    bl,0x1
c001cd41:	0f 85 88 00 00 00    	jne    c001cdcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cd47:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cd4e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd52:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cd56:	01 ce                	add    esi,ecx
c001cd58:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd5e:	0f 94 c0             	sete   al
c001cd61:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd67:	0f 94 c3             	sete   bl
c001cd6a:	09 c3                	or     ebx,eax
c001cd6c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd6e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd73:	74 41                	je     c001cdb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cd75:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cd78:	84 db                	test   bl,bl
c001cd7a:	75 15                	jne    c001cd91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cd7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd80:	66 83 f8 0c          	cmp    ax,0xc
c001cd84:	76 05                	jbe    c001cd8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cd86:	b8 0c 00 00 00       	mov    eax,0xc
c001cd8b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd8f:	76 37                	jbe    c001cdc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cd95:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd9a:	0f 84 dc 00 00 00    	je     c001ce7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cda0:	83 ec 0c             	sub    esp,0xc
c001cda3:	68 83 b9 02 c0       	push   0xc002b983
c001cda8:	e8 28 d0 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001cdad:	83 c4 10             	add    esp,0x10
c001cdb0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cdb4:	eb 12                	jmp    c001cdc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdb6:	01 c1                	add    ecx,eax
c001cdb8:	84 db                	test   bl,bl
c001cdba:	75 0c                	jne    c001cdc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdbc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdc0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdc4:	77 02                	ja     c001cdc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdc6:	01 d1                	add    ecx,edx
c001cdc8:	89 0e                	mov    DWORD PTR [esi],ecx
c001cdca:	e9 ea 00 00 00       	jmp    c001ceb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdcf:	80 fb 02             	cmp    bl,0x2
c001cdd2:	75 7c                	jne    c001ce50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cdd4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cddb:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cddf:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cde3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cde9:	74 20                	je     c001ce0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cdeb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdf1:	74 18                	je     c001ce0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cdf3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdf7:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdfc:	66 83 f8 0e          	cmp    ax,0xe
c001ce00:	77 03                	ja     c001ce05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce02:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce05:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce09:	76 1f                	jbe    c001ce2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce0b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce0f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce14:	74 66                	je     c001ce7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	68 9f b9 02 c0       	push   0xc002b99f
c001ce1e:	e8 b2 cf ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001ce23:	83 c4 10             	add    esp,0x10
c001ce26:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce2a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce2c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce31:	74 13                	je     c001ce46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce33:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce37:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce3e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ce42:	01 c8                	add    eax,ecx
c001ce44:	eb 04                	jmp    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ce46:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ce4a:	01 c2                	add    edx,eax
c001ce4c:	89 16                	mov    DWORD PTR [esi],edx
c001ce4e:	eb 69                	jmp    c001ceb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce50:	0f b6 db             	movzx  ebx,bl
c001ce53:	50                   	push   eax
c001ce54:	50                   	push   eax
c001ce55:	53                   	push   ebx
c001ce56:	68 bb b9 02 c0       	push   0xc002b9bb
c001ce5b:	e8 09 58 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001ce60:	83 c4 10             	add    esp,0x10
c001ce63:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce68:	74 12                	je     c001ce7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce6a:	83 ec 0c             	sub    esp,0xc
c001ce6d:	68 c6 b9 02 c0       	push   0xc002b9c6
c001ce72:	e8 5e cf ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001ce77:	83 c4 10             	add    esp,0x10
c001ce7a:	eb 3d                	jmp    c001ceb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce7c:	83 ec 0c             	sub    esp,0xc
c001ce7f:	55                   	push   ebp
c001ce80:	e8 05 5e ff ff       	call   c0012c8a <File::close()>
c001ce85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce8e:	59                   	pop    ecx
c001ce8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce93:	e8 11 27 ff ff       	call   c000f5a9 <free>
c001ce98:	5b                   	pop    ebx
c001ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce9d:	e8 07 27 ff ff       	call   c000f5a9 <free>
c001cea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cea5:	e8 ff 26 ff ff       	call   c000f5a9 <free>
c001ceaa:	5e                   	pop    esi
c001ceab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceaf:	e8 f5 26 ff ff       	call   c000f5a9 <free>
c001ceb4:	83 c4 10             	add    esp,0x10
c001ceb7:	eb 21                	jmp    c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ceb9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cebd:	e9 76 fd ff ff       	jmp    c001cc38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cec2:	83 ec 0c             	sub    esp,0xc
c001cec5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cec9:	e8 db 26 ff ff       	call   c000f5a9 <free>
c001cece:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ced2:	83 c4 10             	add    esp,0x10
c001ced5:	e9 eb fc ff ff       	jmp    c001cbc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ceda:	31 c0                	xor    eax,eax
c001cedc:	eb 33                	jmp    c001cf11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cede:	83 ec 0c             	sub    esp,0xc
c001cee1:	55                   	push   ebp
c001cee2:	e8 a3 5d ff ff       	call   c0012c8a <File::close()>
c001cee7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cef0:	58                   	pop    eax
c001cef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cef5:	e8 af 26 ff ff       	call   c000f5a9 <free>
c001cefa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cefd:	e8 a7 26 ff ff       	call   c000f5a9 <free>
c001cf02:	5a                   	pop    edx
c001cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf07:	e8 9d 26 ff ff       	call   c000f5a9 <free>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	b0 01                	mov    al,0x1
c001cf11:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf17:	5b                   	pop    ebx
c001cf18:	5e                   	pop    esi
c001cf19:	5f                   	pop    edi
c001cf1a:	5d                   	pop    ebp
c001cf1b:	c3                   	ret    

c001cf1c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf1c:	56                   	push   esi
c001cf1d:	31 d2                	xor    edx,edx
c001cf1f:	53                   	push   ebx
c001cf20:	8b 1d e0 05 03 c0    	mov    ebx,DWORD PTR ds:0xc00305e0
c001cf26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf2a:	39 d3                	cmp    ebx,edx
c001cf2c:	7e 1b                	jle    c001cf49 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf2e:	8b 04 95 00 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf800]
c001cf35:	39 c8                	cmp    eax,ecx
c001cf37:	77 0d                	ja     c001cf46 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf39:	8b 34 95 00 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfa00]
c001cf40:	01 c6                	add    esi,eax
c001cf42:	39 ce                	cmp    esi,ecx
c001cf44:	77 05                	ja     c001cf4b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cf46:	42                   	inc    edx
c001cf47:	eb e1                	jmp    c001cf2a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cf49:	31 c0                	xor    eax,eax
c001cf4b:	5b                   	pop    ebx
c001cf4c:	5e                   	pop    esi
c001cf4d:	c3                   	ret    

c001cf4e <Thr::getDriverNameFromAddress(unsigned long)>:
c001cf4e:	53                   	push   ebx
c001cf4f:	31 c0                	xor    eax,eax
c001cf51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf55:	8b 1d e0 05 03 c0    	mov    ebx,DWORD PTR ds:0xc00305e0
c001cf5b:	39 c3                	cmp    ebx,eax
c001cf5d:	7e 22                	jle    c001cf81 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cf5f:	8b 14 85 00 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf800]
c001cf66:	39 ca                	cmp    edx,ecx
c001cf68:	77 14                	ja     c001cf7e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cf6a:	03 14 85 00 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfa00]
c001cf71:	39 ca                	cmp    edx,ecx
c001cf73:	76 09                	jbe    c001cf7e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cf75:	8b 04 85 00 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf600]
c001cf7c:	eb 05                	jmp    c001cf83 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cf7e:	40                   	inc    eax
c001cf7f:	eb da                	jmp    c001cf5b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cf81:	31 c0                	xor    eax,eax
c001cf83:	5b                   	pop    ebx
c001cf84:	c3                   	ret    

c001cf85 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cf85:	53                   	push   ebx
c001cf86:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cf8a:	53                   	push   ebx
c001cf8b:	e8 8c ff ff ff       	call   c001cf1c <Thr::getDriverBaseFromAddress(unsigned long)>
c001cf90:	5a                   	pop    edx
c001cf91:	31 d2                	xor    edx,edx
c001cf93:	85 c0                	test   eax,eax
c001cf95:	74 04                	je     c001cf9b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cf97:	89 da                	mov    edx,ebx
c001cf99:	29 c2                	sub    edx,eax
c001cf9b:	89 d0                	mov    eax,edx
c001cf9d:	5b                   	pop    ebx
c001cf9e:	c3                   	ret    

c001cf9f <Thr::loadDLL(char const*, bool)>:
c001cf9f:	55                   	push   ebp
c001cfa0:	57                   	push   edi
c001cfa1:	56                   	push   esi
c001cfa2:	53                   	push   ebx
c001cfa3:	81 ec 34 01 00 00    	sub    esp,0x134
c001cfa9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cfb0:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cfb7:	56                   	push   esi
c001cfb8:	68 de b9 02 c0       	push   0xc002b9de
c001cfbd:	e8 a7 56 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001cfc2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cfc9:	e8 cb 25 ff ff       	call   c000f599 <malloc>
c001cfce:	83 c4 0c             	add    esp,0xc
c001cfd1:	89 c3                	mov    ebx,eax
c001cfd3:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c001cfd9:	56                   	push   esi
c001cfda:	50                   	push   eax
c001cfdb:	e8 e8 5b ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	85 db                	test   ebx,ebx
c001cfe5:	75 3c                	jne    c001d023 <Thr::loadDLL(char const*, bool)+0x84>
c001cfe7:	89 f8                	mov    eax,edi
c001cfe9:	84 c0                	test   al,al
c001cfeb:	0f 84 cc 01 00 00    	je     c001d1bd <Thr::loadDLL(char const*, bool)+0x21e>
c001cff1:	55                   	push   ebp
c001cff2:	55                   	push   ebp
c001cff3:	68 ef b9 02 c0       	push   0xc002b9ef
c001cff8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cffc:	55                   	push   ebp
c001cffd:	e8 0a 38 fe ff       	call   c000080c <strcpy>
c001d002:	58                   	pop    eax
c001d003:	5a                   	pop    edx
c001d004:	56                   	push   esi
c001d005:	55                   	push   ebp
c001d006:	e8 41 39 fe ff       	call   c000094c <strcat>
c001d00b:	59                   	pop    ecx
c001d00c:	58                   	pop    eax
c001d00d:	68 02 ba 02 c0       	push   0xc002ba02
c001d012:	55                   	push   ebp
c001d013:	e8 34 39 fe ff       	call   c000094c <strcat>
c001d018:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d01b:	e8 b5 cd ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001d020:	83 c4 10             	add    esp,0x10
c001d023:	51                   	push   ecx
c001d024:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d028:	50                   	push   eax
c001d029:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d02d:	50                   	push   eax
c001d02e:	53                   	push   ebx
c001d02f:	e8 a4 5e ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c001d034:	83 c4 10             	add    esp,0x10
c001d037:	85 db                	test   ebx,ebx
c001d039:	74 0c                	je     c001d047 <Thr::loadDLL(char const*, bool)+0xa8>
c001d03b:	83 ec 0c             	sub    esp,0xc
c001d03e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d040:	53                   	push   ebx
c001d041:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d04c:	75 0a                	jne    c001d058 <Thr::loadDLL(char const*, bool)+0xb9>
c001d04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d052:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d056:	75 3c                	jne    c001d094 <Thr::loadDLL(char const*, bool)+0xf5>
c001d058:	89 f8                	mov    eax,edi
c001d05a:	84 c0                	test   al,al
c001d05c:	0f 84 43 01 00 00    	je     c001d1a5 <Thr::loadDLL(char const*, bool)+0x206>
c001d062:	51                   	push   ecx
c001d063:	51                   	push   ecx
c001d064:	68 ef b9 02 c0       	push   0xc002b9ef
c001d069:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d06d:	53                   	push   ebx
c001d06e:	e8 99 37 fe ff       	call   c000080c <strcpy>
c001d073:	5d                   	pop    ebp
c001d074:	58                   	pop    eax
c001d075:	56                   	push   esi
c001d076:	53                   	push   ebx
c001d077:	e8 d0 38 fe ff       	call   c000094c <strcat>
c001d07c:	58                   	pop    eax
c001d07d:	5a                   	pop    edx
c001d07e:	68 02 ba 02 c0       	push   0xc002ba02
c001d083:	53                   	push   ebx
c001d084:	e8 c3 38 fe ff       	call   c000094c <strcat>
c001d089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d08c:	e8 44 cd ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001d091:	83 c4 10             	add    esp,0x10
c001d094:	52                   	push   edx
c001d095:	6a 03                	push   0x3
c001d097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d09b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d09f:	05 ff 0f 00 00       	add    eax,0xfff
c001d0a4:	83 d2 00             	adc    edx,0x0
c001d0a7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0ab:	50                   	push   eax
c001d0ac:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c001d0b2:	e8 07 4a ff ff       	call   c0011abe <VAS::allocatePages(int, int)>
c001d0b7:	59                   	pop    ecx
c001d0b8:	89 c3                	mov    ebx,eax
c001d0ba:	5d                   	pop    ebp
c001d0bb:	50                   	push   eax
c001d0bc:	68 02 a0 02 c0       	push   0xc002a002
c001d0c1:	e8 a3 55 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001d0c6:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0c9:	e8 9e 36 fe ff       	call   c000076c <strlen>
c001d0ce:	8b 2d e0 05 03 c0    	mov    ebp,DWORD PTR ds:0xc00305e0
c001d0d4:	40                   	inc    eax
c001d0d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0d8:	e8 bc 24 ff ff       	call   c000f599 <malloc>
c001d0dd:	89 04 ad 00 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf600],eax
c001d0e4:	58                   	pop    eax
c001d0e5:	a1 e0 05 03 c0       	mov    eax,ds:0xc00305e0
c001d0ea:	5a                   	pop    edx
c001d0eb:	56                   	push   esi
c001d0ec:	ff 34 85 00 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf600]
c001d0f3:	e8 14 37 fe ff       	call   c000080c <strcpy>
c001d0f8:	a1 e0 05 03 c0       	mov    eax,ds:0xc00305e0
c001d0fd:	8d 50 01             	lea    edx,[eax+0x1]
c001d100:	89 1c 85 00 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf800],ebx
c001d107:	89 15 e0 05 03 c0    	mov    DWORD PTR ds:0xc00305e0,edx
c001d10d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d111:	83 c4 0c             	add    esp,0xc
c001d114:	89 14 85 00 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa00],edx
c001d11b:	6a 01                	push   0x1
c001d11d:	53                   	push   ebx
c001d11e:	56                   	push   esi
c001d11f:	e8 c2 f6 ff ff       	call   c001c7e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d124:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d130:	0f 85 83 00 00 00    	jne    c001d1b9 <Thr::loadDLL(char const*, bool)+0x21a>
c001d136:	89 f8                	mov    eax,edi
c001d138:	84 c0                	test   al,al
c001d13a:	74 6d                	je     c001d1a9 <Thr::loadDLL(char const*, bool)+0x20a>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	68 04 ba 02 c0       	push   0xc002ba04
c001d144:	e8 8c cc ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	eb 5b                	jmp    c001d1a9 <Thr::loadDLL(char const*, bool)+0x20a>
c001d14e:	89 ee                	mov    esi,ebp
c001d150:	50                   	push   eax
c001d151:	c1 e6 0c             	shl    esi,0xc
c001d154:	50                   	push   eax
c001d155:	01 de                	add    esi,ebx
c001d157:	56                   	push   esi
c001d158:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c001d15e:	e8 c3 44 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c001d163:	83 c4 10             	add    esp,0x10
c001d166:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d169:	75 0c                	jne    c001d177 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d16b:	83 ec 0c             	sub    esp,0xc
c001d16e:	56                   	push   esi
c001d16f:	e8 8c 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	45                   	inc    ebp
c001d178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d17c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d180:	05 ff 0f 00 00       	add    eax,0xfff
c001d185:	bf 00 00 00 00       	mov    edi,0x0
c001d18a:	83 d2 00             	adc    edx,0x0
c001d18d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d191:	c1 ea 0c             	shr    edx,0xc
c001d194:	39 c5                	cmp    ebp,eax
c001d196:	89 d1                	mov    ecx,edx
c001d198:	89 f8                	mov    eax,edi
c001d19a:	19 c8                	sbb    eax,ecx
c001d19c:	72 b0                	jb     c001d14e <Thr::loadDLL(char const*, bool)+0x1af>
c001d19e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1a3:	75 18                	jne    c001d1bd <Thr::loadDLL(char const*, bool)+0x21e>
c001d1a5:	31 db                	xor    ebx,ebx
c001d1a7:	eb 14                	jmp    c001d1bd <Thr::loadDLL(char const*, bool)+0x21e>
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	68 23 ba 02 c0       	push   0xc002ba23
c001d1b1:	e8 1f cc ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001d1b6:	83 c4 10             	add    esp,0x10
c001d1b9:	31 ed                	xor    ebp,ebp
c001d1bb:	eb bb                	jmp    c001d178 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d1bd:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1c3:	89 d8                	mov    eax,ebx
c001d1c5:	5b                   	pop    ebx
c001d1c6:	5e                   	pop    esi
c001d1c7:	5f                   	pop    edi
c001d1c8:	5d                   	pop    ebp
c001d1c9:	c3                   	ret    

c001d1ca <Thr::executeDLL(unsigned long, void*)>:
c001d1ca:	56                   	push   esi
c001d1cb:	53                   	push   ebx
c001d1cc:	52                   	push   edx
c001d1cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d1d5:	85 db                	test   ebx,ebx
c001d1d7:	75 10                	jne    c001d1e9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d1d9:	83 ec 0c             	sub    esp,0xc
c001d1dc:	68 3f ba 02 c0       	push   0xc002ba3f
c001d1e1:	e8 ef cb ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	50                   	push   eax
c001d1ea:	50                   	push   eax
c001d1eb:	53                   	push   ebx
c001d1ec:	68 69 ba 02 c0       	push   0xc002ba69
c001d1f1:	e8 73 54 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001d1f6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d1fa:	89 d8                	mov    eax,ebx
c001d1fc:	83 c4 14             	add    esp,0x14
c001d1ff:	5b                   	pop    ebx
c001d200:	5e                   	pop    esi
c001d201:	ff e0                	jmp    eax
c001d203:	90                   	nop

c001d204 <userModeEntryPoint(void*)>:
c001d204:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001d209:	48                   	dec    eax
c001d20a:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001d20f:	75 01                	jne    c001d212 <userModeEntryPoint(void*)+0xe>
c001d211:	fb                   	sti    
c001d212:	fb                   	sti    
c001d213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d218:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d21b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d221:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d225:	e9 00 31 fe ff       	jmp    c000032a <goToUsermode>

c001d22a <changeTSS>:
c001d22a:	83 ec 14             	sub    esp,0x14
c001d22d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d232:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d235:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d23a:	c1 e2 15             	shl    edx,0x15
c001d23d:	29 d0                	sub    eax,edx
c001d23f:	50                   	push   eax
c001d240:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001d245:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d24b:	05 7c 11 00 00       	add    eax,0x117c
c001d250:	50                   	push   eax
c001d251:	e8 fe 38 ff ff       	call   c0010b54 <TSS::setESP(unsigned long)>
c001d256:	83 c4 1c             	add    esp,0x1c
c001d259:	c3                   	ret    

c001d25a <switchToThread(ThreadControlBlock*)>:
c001d25a:	57                   	push   edi
c001d25b:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001d260:	56                   	push   esi
c001d261:	85 c0                	test   eax,eax
c001d263:	53                   	push   ebx
c001d264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d268:	0f 85 88 00 00 00    	jne    c001d2f6 <switchToThread(ThreadControlBlock*)+0x9c>
c001d26e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d271:	3c ff                	cmp    al,0xff
c001d273:	74 7d                	je     c001d2f2 <switchToThread(ThreadControlBlock*)+0x98>
c001d275:	0f b6 d0             	movzx  edx,al
c001d278:	b8 84 03 00 00       	mov    eax,0x384
c001d27d:	29 d0                	sub    eax,edx
c001d27f:	c1 e0 10             	shl    eax,0x10
c001d282:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d285:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d288:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001d28d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d293:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d29a:	74 4a                	je     c001d2e6 <switchToThread(ThreadControlBlock*)+0x8c>
c001d29c:	0f 31                	rdtsc  
c001d29e:	a3 e8 0d 03 c0       	mov    ds:0xc0030de8,eax
c001d2a3:	89 c6                	mov    esi,eax
c001d2a5:	89 d7                	mov    edi,edx
c001d2a7:	2b 35 d8 0d 03 c0    	sub    esi,DWORD PTR ds:0xc0030dd8
c001d2ad:	89 15 ec 0d 03 c0    	mov    DWORD PTR ds:0xc0030dec,edx
c001d2b3:	1b 3d dc 0d 03 c0    	sbb    edi,DWORD PTR ds:0xc0030ddc
c001d2b9:	89 35 e0 0d 03 c0    	mov    DWORD PTR ds:0xc0030de0,esi
c001d2bf:	a3 d8 0d 03 c0       	mov    ds:0xc0030dd8,eax
c001d2c4:	89 3d e4 0d 03 c0    	mov    DWORD PTR ds:0xc0030de4,edi
c001d2ca:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d2d0:	89 15 dc 0d 03 c0    	mov    DWORD PTR ds:0xc0030ddc,edx
c001d2d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d2d9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d2dc:	01 c6                	add    esi,eax
c001d2de:	11 d7                	adc    edi,edx
c001d2e0:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d2e3:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d2e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d2ea:	5b                   	pop    ebx
c001d2eb:	5e                   	pop    esi
c001d2ec:	5f                   	pop    edi
c001d2ed:	e9 70 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d2f2:	31 c0                	xor    eax,eax
c001d2f4:	eb 8f                	jmp    c001d285 <switchToThread(ThreadControlBlock*)+0x2b>
c001d2f6:	5b                   	pop    ebx
c001d2f7:	c7 05 a0 0d 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x1
c001d301:	5e                   	pop    esi
c001d302:	5f                   	pop    edi
c001d303:	c3                   	ret    

c001d304 <Process::addArgs(char**)>:
c001d304:	57                   	push   edi
c001d305:	56                   	push   esi
c001d306:	53                   	push   ebx
c001d307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d30b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d30f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d319:	85 ff                	test   edi,edi
c001d31b:	74 3d                	je     c001d35a <Process::addArgs(char**)+0x56>
c001d31d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d31f:	85 c0                	test   eax,eax
c001d321:	74 37                	je     c001d35a <Process::addArgs(char**)+0x56>
c001d323:	31 db                	xor    ebx,ebx
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	50                   	push   eax
c001d329:	e8 3e 34 fe ff       	call   c000076c <strlen>
c001d32e:	40                   	inc    eax
c001d32f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d332:	e8 62 22 ff ff       	call   c000f599 <malloc>
c001d337:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d33e:	5a                   	pop    edx
c001d33f:	59                   	pop    ecx
c001d340:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d343:	43                   	inc    ebx
c001d344:	50                   	push   eax
c001d345:	e8 c2 34 fe ff       	call   c000080c <strcpy>
c001d34a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d356:	85 c0                	test   eax,eax
c001d358:	75 cb                	jne    c001d325 <Process::addArgs(char**)+0x21>
c001d35a:	5b                   	pop    ebx
c001d35b:	5e                   	pop    esi
c001d35c:	5f                   	pop    edi
c001d35d:	c3                   	ret    

c001d35e <Process::Process(char const*, Process*, char**)>:
c001d35e:	56                   	push   esi
c001d35f:	53                   	push   ebx
c001d360:	83 ec 14             	sub    esp,0x14
c001d363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d367:	05 0c 02 00 00       	add    eax,0x20c
c001d36c:	bb 07 00 00 00       	mov    ebx,0x7
c001d371:	89 c6                	mov    esi,eax
c001d373:	85 db                	test   ebx,ebx
c001d375:	78 12                	js     c001d389 <Process::Process(char const*, Process*, char**)+0x2b>
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	56                   	push   esi
c001d37b:	e8 96 b6 00 00       	call   c0028a16 <ThreadControlBlock::ThreadControlBlock()>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	83 c6 63             	add    esi,0x63
c001d386:	4b                   	dec    ebx
c001d387:	eb ea                	jmp    c001d373 <Process::Process(char const*, Process*, char**)+0x15>
c001d389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d394:	83 ec 0c             	sub    esp,0xc
c001d397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d39b:	e8 be c8 ff ff       	call   c0019c5e <Krnl::newProcessEnv(Process*)>
c001d3a0:	83 c4 10             	add    esp,0x10
c001d3a3:	89 c2                	mov    edx,eax
c001d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d3af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d3bc:	a1 10 ce 02 c0       	mov    eax,ds:0xc002ce10
c001d3c1:	8d 50 01             	lea    edx,[eax+0x1]
c001d3c4:	89 15 10 ce 02 c0    	mov    DWORD PTR ds:0xc002ce10,edx
c001d3ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3ce:	89 02                	mov    DWORD PTR [edx],eax
c001d3d0:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d3d8:	83 ec 0c             	sub    esp,0xc
c001d3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3df:	e8 b5 21 ff ff       	call   c000f599 <malloc>
c001d3e4:	83 c4 10             	add    esp,0x10
c001d3e7:	89 c3                	mov    ebx,eax
c001d3e9:	83 ec 08             	sub    esp,0x8
c001d3ec:	6a 00                	push   0x0
c001d3ee:	53                   	push   ebx
c001d3ef:	e8 72 4a ff ff       	call   c0011e66 <VAS::VAS(bool)>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d405:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d40f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d413:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d417:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d41d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d421:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d427:	85 c0                	test   eax,eax
c001d429:	74 42                	je     c001d46d <Process::Process(char const*, Process*, char**)+0x10f>
c001d42b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d435:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d43b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d449:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d44f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d459:	05 0c 01 00 00       	add    eax,0x10c
c001d45e:	83 ec 08             	sub    esp,0x8
c001d461:	52                   	push   edx
c001d462:	50                   	push   eax
c001d463:	e8 a4 33 fe ff       	call   c000080c <strcpy>
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	eb 63                	jmp    c001d4d0 <Process::Process(char const*, Process*, char**)+0x172>
c001d46d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d475:	83 ec 0c             	sub    esp,0xc
c001d478:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d47c:	e8 18 21 ff ff       	call   c000f599 <malloc>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	89 c3                	mov    ebx,eax
c001d486:	83 ec 08             	sub    esp,0x8
c001d489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d48d:	53                   	push   ebx
c001d48e:	e8 d5 33 ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d4a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	50                   	push   eax
c001d4ae:	e8 74 2b ff ff       	call   c0010027 <addToTerminalCycle(VgaText*)>
c001d4b3:	83 c4 10             	add    esp,0x10
c001d4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ba:	05 0c 01 00 00       	add    eax,0x10c
c001d4bf:	83 ec 08             	sub    esp,0x8
c001d4c2:	68 88 ba 02 c0       	push   0xc002ba88
c001d4c7:	50                   	push   eax
c001d4c8:	e8 3f 33 fe ff       	call   c000080c <strcpy>
c001d4cd:	83 c4 10             	add    esp,0x10
c001d4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d4:	83 c0 0c             	add    eax,0xc
c001d4d7:	83 ec 08             	sub    esp,0x8
c001d4da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4de:	50                   	push   eax
c001d4df:	e8 28 33 fe ff       	call   c000080c <strcpy>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	83 ec 08             	sub    esp,0x8
c001d4ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d4ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f2:	e8 0d fe ff ff       	call   c001d304 <Process::addArgs(char**)>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	83 ec 08             	sub    esp,0x8
c001d4fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d501:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d505:	e8 a6 ed ff ff       	call   c001c2b0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d511:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d515:	83 f0 01             	xor    eax,0x1
c001d518:	88 c2                	mov    dl,al
c001d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d524:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d529:	83 ec 08             	sub    esp,0x8
c001d52c:	50                   	push   eax
c001d52d:	68 e0 ba 02 c0       	push   0xc002bae0
c001d532:	e8 32 51 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001d537:	83 c4 10             	add    esp,0x10
c001d53a:	90                   	nop
c001d53b:	83 c4 14             	add    esp,0x14
c001d53e:	5b                   	pop    ebx
c001d53f:	5e                   	pop    esi
c001d540:	c3                   	ret    
c001d541:	90                   	nop

c001d542 <Process::Process(bool, char const*, Process*, char**)>:
c001d542:	56                   	push   esi
c001d543:	53                   	push   ebx
c001d544:	83 ec 24             	sub    esp,0x24
c001d547:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d54b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d54f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d553:	05 0c 02 00 00       	add    eax,0x20c
c001d558:	bb 07 00 00 00       	mov    ebx,0x7
c001d55d:	89 c6                	mov    esi,eax
c001d55f:	85 db                	test   ebx,ebx
c001d561:	78 12                	js     c001d575 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d563:	83 ec 0c             	sub    esp,0xc
c001d566:	56                   	push   esi
c001d567:	e8 aa b4 00 00       	call   c0028a16 <ThreadControlBlock::ThreadControlBlock()>
c001d56c:	83 c4 10             	add    esp,0x10
c001d56f:	83 c6 63             	add    esi,0x63
c001d572:	4b                   	dec    ebx
c001d573:	eb ea                	jmp    c001d55f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d579:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d580:	83 ec 0c             	sub    esp,0xc
c001d583:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d587:	e8 d2 c6 ff ff       	call   c0019c5e <Krnl::newProcessEnv(Process*)>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	89 c2                	mov    edx,eax
c001d591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d595:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d59f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d5a8:	a1 10 ce 02 c0       	mov    eax,ds:0xc002ce10
c001d5ad:	8d 50 01             	lea    edx,[eax+0x1]
c001d5b0:	89 15 10 ce 02 c0    	mov    DWORD PTR ds:0xc002ce10,edx
c001d5b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5ba:	89 02                	mov    DWORD PTR [edx],eax
c001d5bc:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d5c4:	83 ec 0c             	sub    esp,0xc
c001d5c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d5cb:	e8 c9 1f ff ff       	call   c000f599 <malloc>
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	89 c3                	mov    ebx,eax
c001d5d5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d5da:	83 ec 08             	sub    esp,0x8
c001d5dd:	50                   	push   eax
c001d5de:	53                   	push   ebx
c001d5df:	e8 82 48 ff ff       	call   c0011e66 <VAS::VAS(bool)>
c001d5e4:	83 c4 10             	add    esp,0x10
c001d5e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5eb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d603:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d607:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d611:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d617:	85 c0                	test   eax,eax
c001d619:	74 42                	je     c001d65d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d61b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d61f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d625:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d62b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d62f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d639:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d63f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d649:	05 0c 01 00 00       	add    eax,0x10c
c001d64e:	83 ec 08             	sub    esp,0x8
c001d651:	52                   	push   edx
c001d652:	50                   	push   eax
c001d653:	e8 b4 31 fe ff       	call   c000080c <strcpy>
c001d658:	83 c4 10             	add    esp,0x10
c001d65b:	eb 63                	jmp    c001d6c0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d65d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d66c:	e8 28 1f ff ff       	call   c000f599 <malloc>
c001d671:	83 c4 10             	add    esp,0x10
c001d674:	89 c3                	mov    ebx,eax
c001d676:	83 ec 08             	sub    esp,0x8
c001d679:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d67d:	53                   	push   ebx
c001d67e:	e8 e5 31 ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c001d683:	83 c4 10             	add    esp,0x10
c001d686:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d68a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d694:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d69a:	83 ec 0c             	sub    esp,0xc
c001d69d:	50                   	push   eax
c001d69e:	e8 84 29 ff ff       	call   c0010027 <addToTerminalCycle(VgaText*)>
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6aa:	05 0c 01 00 00       	add    eax,0x10c
c001d6af:	83 ec 08             	sub    esp,0x8
c001d6b2:	68 88 ba 02 c0       	push   0xc002ba88
c001d6b7:	50                   	push   eax
c001d6b8:	e8 4f 31 fe ff       	call   c000080c <strcpy>
c001d6bd:	83 c4 10             	add    esp,0x10
c001d6c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c4:	83 c0 0c             	add    eax,0xc
c001d6c7:	83 ec 08             	sub    esp,0x8
c001d6ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6ce:	50                   	push   eax
c001d6cf:	e8 38 31 fe ff       	call   c000080c <strcpy>
c001d6d4:	83 c4 10             	add    esp,0x10
c001d6d7:	83 ec 08             	sub    esp,0x8
c001d6da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6e2:	e8 1d fc ff ff       	call   c001d304 <Process::addArgs(char**)>
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	90                   	nop
c001d6eb:	83 c4 24             	add    esp,0x24
c001d6ee:	5b                   	pop    ebx
c001d6ef:	5e                   	pop    esi
c001d6f0:	c3                   	ret    

c001d6f1 <taskStartupFunction>:
c001d6f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6f6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d6f9:	c3                   	ret    

c001d6fa <Semaphore::Semaphore(int)>:
c001d6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d702:	89 10                	mov    DWORD PTR [eax],edx
c001d704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d708:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d70f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d713:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d71e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d725:	90                   	nop
c001d726:	c3                   	ret    
c001d727:	90                   	nop

c001d728 <Mutex::Mutex()>:
c001d728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d72c:	6a 01                	push   0x1
c001d72e:	50                   	push   eax
c001d72f:	e8 c6 ff ff ff       	call   c001d6fa <Semaphore::Semaphore(int)>
c001d734:	83 c4 08             	add    esp,0x8
c001d737:	90                   	nop
c001d738:	c3                   	ret    
c001d739:	90                   	nop

c001d73a <Process::createThread(void (*)(void*), void*, int)>:
c001d73a:	55                   	push   ebp
c001d73b:	31 c9                	xor    ecx,ecx
c001d73d:	57                   	push   edi
c001d73e:	56                   	push   esi
c001d73f:	53                   	push   ebx
c001d740:	83 ec 1c             	sub    esp,0x1c
c001d743:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d747:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d74e:	89 f2                	mov    edx,esi
c001d750:	0f b7 c2             	movzx  eax,dx
c001d753:	83 e2 01             	and    edx,0x1
c001d756:	74 16                	je     c001d76e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d758:	d1 f8                	sar    eax,1
c001d75a:	41                   	inc    ecx
c001d75b:	89 c2                	mov    edx,eax
c001d75d:	83 f9 10             	cmp    ecx,0x10
c001d760:	75 ee                	jne    c001d750 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d762:	83 c4 1c             	add    esp,0x1c
c001d765:	31 db                	xor    ebx,ebx
c001d767:	89 d8                	mov    eax,ebx
c001d769:	5b                   	pop    ebx
c001d76a:	5e                   	pop    esi
c001d76b:	5f                   	pop    edi
c001d76c:	5d                   	pop    ebp
c001d76d:	c3                   	ret    
c001d76e:	b8 01 00 00 00       	mov    eax,0x1
c001d773:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d776:	d3 e0                	shl    eax,cl
c001d778:	09 c6                	or     esi,eax
c001d77a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d77d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d784:	89 c6                	mov    esi,eax
c001d786:	c1 e6 05             	shl    esi,0x5
c001d789:	01 f0                	add    eax,esi
c001d78b:	01 d8                	add    eax,ebx
c001d78d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d794:	75 0a                	jne    c001d7a0 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d796:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d7a0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7a6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d7aa:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d7ad:	01 ca                	add    edx,ecx
c001d7af:	83 ec 08             	sub    esp,0x8
c001d7b2:	89 d0                	mov    eax,edx
c001d7b4:	c1 e0 05             	shl    eax,0x5
c001d7b7:	01 d0                	add    eax,edx
c001d7b9:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d7bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7c1:	01 d8                	add    eax,ebx
c001d7c3:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d7c9:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d7cf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d7d5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d7db:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d7e1:	89 cd                	mov    ebp,ecx
c001d7e3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d7e7:	f7 dd                	neg    ebp
c001d7e9:	c1 e5 15             	shl    ebp,0x15
c001d7ec:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d7f2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d7f8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d802:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d808:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d812:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d81c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d820:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d827:	53                   	push   ebx
c001d828:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d82d:	e8 9e af 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d832:	89 d8                	mov    eax,ebx
c001d834:	83 c4 10             	add    esp,0x10
c001d837:	83 c4 1c             	add    esp,0x1c
c001d83a:	5b                   	pop    ebx
c001d83b:	5e                   	pop    esi
c001d83c:	5f                   	pop    edi
c001d83d:	5d                   	pop    ebp
c001d83e:	c3                   	ret    
c001d83f:	90                   	nop

c001d840 <Process::createUserThread()>:
c001d840:	83 ec 0c             	sub    esp,0xc
c001d843:	68 80 00 00 00       	push   0x80
c001d848:	6a 00                	push   0x0
c001d84a:	68 04 d2 01 c0       	push   0xc001d204
c001d84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d853:	e8 e2 fe ff ff       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c001d858:	83 c4 1c             	add    esp,0x1c
c001d85b:	c3                   	ret    

c001d85c <setupMultitasking(void (*)())>:
c001d85c:	56                   	push   esi
c001d85d:	53                   	push   ebx
c001d85e:	51                   	push   ecx
c001d85f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d863:	eb 10                	jmp    c001d875 <setupMultitasking(void (*)())+0x19>
c001d865:	83 ec 0c             	sub    esp,0xc
c001d868:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d86d:	e8 b0 ae 00 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d87d:	e8 7c ae 00 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d882:	83 c4 10             	add    esp,0x10
c001d885:	84 c0                	test   al,al
c001d887:	74 dc                	je     c001d865 <setupMultitasking(void (*)())+0x9>
c001d889:	83 ec 0c             	sub    esp,0xc
c001d88c:	68 3f 07 00 00       	push   0x73f
c001d891:	e8 03 1d ff ff       	call   c000f599 <malloc>
c001d896:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d89d:	89 c3                	mov    ebx,eax
c001d89f:	6a 00                	push   0x0
c001d8a1:	68 8c ba 02 c0       	push   0xc002ba8c
c001d8a6:	6a 01                	push   0x1
c001d8a8:	50                   	push   eax
c001d8a9:	e8 94 fc ff ff       	call   c001d542 <Process::Process(bool, char const*, Process*, char**)>
c001d8ae:	83 c4 14             	add    esp,0x14
c001d8b1:	89 1d d0 0d 03 c0    	mov    DWORD PTR ds:0xc0030dd0,ebx
c001d8b7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d8bd:	e8 73 2a ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c001d8c2:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d8ca:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d8d4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d8da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d8dd:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d8e7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d8ed:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d8f3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d8fd:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d907:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d911:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d917:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d921:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d927:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d931:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d937:	58                   	pop    eax
c001d938:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d93e:	5a                   	pop    edx
c001d93f:	68 88 ba 02 c0       	push   0xc002ba88
c001d944:	50                   	push   eax
c001d945:	e8 c2 2e fe ff       	call   c000080c <strcpy>
c001d94a:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d951:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d955:	83 c4 14             	add    esp,0x14
c001d958:	5b                   	pop    ebx
c001d959:	5e                   	pop    esi
c001d95a:	e9 f5 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d95f <schedule()>:
c001d95f:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001d964:	85 c0                	test   eax,eax
c001d966:	74 0b                	je     c001d973 <schedule()+0x14>
c001d968:	c7 05 a0 0d 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x1
c001d972:	c3                   	ret    
c001d973:	53                   	push   ebx
c001d974:	83 ec 14             	sub    esp,0x14
c001d977:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d97c:	e8 7d ad 00 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	84 c0                	test   al,al
c001d986:	75 38                	jne    c001d9c0 <schedule()+0x61>
c001d988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d98d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d990:	4a                   	dec    edx
c001d991:	74 32                	je     c001d9c5 <schedule()+0x66>
c001d993:	83 ec 0c             	sub    esp,0xc
c001d996:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d99b:	e8 7a ad 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9a0:	c7 04 24 c4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dc4
c001d9a7:	89 c3                	mov    ebx,eax
c001d9a9:	e8 74 ad 00 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9ae:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d9b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9b8:	e8 9d f8 ff ff       	call   c001d25a <switchToThread(ThreadControlBlock*)>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	83 c4 08             	add    esp,0x8
c001d9c3:	5b                   	pop    ebx
c001d9c4:	c3                   	ret    
c001d9c5:	83 ec 08             	sub    esp,0x8
c001d9c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d9cf:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d9d5:	68 c4 0d 03 c0       	push   0xc0030dc4
c001d9da:	e8 f1 ad 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	eb af                	jmp    c001d993 <schedule()+0x34>

c001d9e4 <Semaphore::tryAcquire()>:
c001d9e4:	53                   	push   ebx
c001d9e5:	83 ec 08             	sub    esp,0x8
c001d9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9ec:	fa                   	cli    
c001d9ed:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001d9f2:	8d 50 01             	lea    edx,[eax+0x1]
c001d9f5:	89 15 a8 0d 03 c0    	mov    DWORD PTR ds:0xc0030da8,edx
c001d9fb:	8b 15 a4 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da4
c001da01:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da04:	89 1d a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,ebx
c001da0a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da0d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da0f:	7c 2a                	jl     c001da3b <Semaphore::tryAcquire()+0x57>
c001da11:	89 15 a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,edx
c001da17:	85 d2                	test   edx,edx
c001da19:	75 0a                	jne    c001da25 <Semaphore::tryAcquire()+0x41>
c001da1b:	8b 15 a0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da0
c001da21:	85 d2                	test   edx,edx
c001da23:	75 5b                	jne    c001da80 <Semaphore::tryAcquire()+0x9c>
c001da25:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001da2a:	85 c0                	test   eax,eax
c001da2c:	74 07                	je     c001da35 <Semaphore::tryAcquire()+0x51>
c001da2e:	31 c0                	xor    eax,eax
c001da30:	83 c4 08             	add    esp,0x8
c001da33:	5b                   	pop    ebx
c001da34:	c3                   	ret    
c001da35:	fb                   	sti    
c001da36:	83 c4 08             	add    esp,0x8
c001da39:	5b                   	pop    ebx
c001da3a:	c3                   	ret    
c001da3b:	43                   	inc    ebx
c001da3c:	89 15 a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,edx
c001da42:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001da45:	85 d2                	test   edx,edx
c001da47:	75 1f                	jne    c001da68 <Semaphore::tryAcquire()+0x84>
c001da49:	8b 0d a0 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030da0
c001da4f:	85 c9                	test   ecx,ecx
c001da51:	74 15                	je     c001da68 <Semaphore::tryAcquire()+0x84>
c001da53:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001da5d:	e8 fd fe ff ff       	call   c001d95f <schedule()>
c001da62:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001da67:	48                   	dec    eax
c001da68:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001da6d:	85 c0                	test   eax,eax
c001da6f:	75 08                	jne    c001da79 <Semaphore::tryAcquire()+0x95>
c001da71:	fb                   	sti    
c001da72:	b0 01                	mov    al,0x1
c001da74:	83 c4 08             	add    esp,0x8
c001da77:	5b                   	pop    ebx
c001da78:	c3                   	ret    
c001da79:	b0 01                	mov    al,0x1
c001da7b:	83 c4 08             	add    esp,0x8
c001da7e:	5b                   	pop    ebx
c001da7f:	c3                   	ret    
c001da80:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001da8a:	e8 d0 fe ff ff       	call   c001d95f <schedule()>
c001da8f:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001da94:	48                   	dec    eax
c001da95:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001da9a:	85 c0                	test   eax,eax
c001da9c:	75 90                	jne    c001da2e <Semaphore::tryAcquire()+0x4a>
c001da9e:	eb 95                	jmp    c001da35 <Semaphore::tryAcquire()+0x51>

c001daa0 <Semaphore::assertLocked(char const*)>:
c001daa0:	83 ec 0c             	sub    esp,0xc
c001daa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daa7:	fa                   	cli    
c001daa8:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001daae:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001dab3:	8d 48 01             	lea    ecx,[eax+0x1]
c001dab6:	89 0d a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,ecx
c001dabc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dabe:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dac1:	7c 24                	jl     c001dae7 <Semaphore::assertLocked(char const*)+0x47>
c001dac3:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001dac8:	85 c0                	test   eax,eax
c001daca:	75 09                	jne    c001dad5 <Semaphore::assertLocked(char const*)+0x35>
c001dacc:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001dad1:	85 c0                	test   eax,eax
c001dad3:	75 29                	jne    c001dafe <Semaphore::assertLocked(char const*)+0x5e>
c001dad5:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001dada:	48                   	dec    eax
c001dadb:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001dae0:	75 01                	jne    c001dae3 <Semaphore::assertLocked(char const*)+0x43>
c001dae2:	fb                   	sti    
c001dae3:	83 c4 0c             	add    esp,0xc
c001dae6:	c3                   	ret    
c001dae7:	83 ec 0c             	sub    esp,0xc
c001daea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001daee:	e8 e2 c2 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001daf3:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001daf8:	83 c4 10             	add    esp,0x10
c001dafb:	48                   	dec    eax
c001dafc:	eb c5                	jmp    c001dac3 <Semaphore::assertLocked(char const*)+0x23>
c001dafe:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001db08:	e8 52 fe ff ff       	call   c001d95f <schedule()>
c001db0d:	eb c6                	jmp    c001dad5 <Semaphore::assertLocked(char const*)+0x35>

c001db0f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db0f:	83 ec 0c             	sub    esp,0xc
c001db12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db1b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db1e:	e8 3c fe ff ff       	call   c001d95f <schedule()>
c001db23:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001db28:	48                   	dec    eax
c001db29:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001db2e:	75 01                	jne    c001db31 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db30:	fb                   	sti    
c001db31:	83 c4 0c             	add    esp,0xc
c001db34:	c3                   	ret    

c001db35 <blockTask(TaskState)>:
c001db35:	83 ec 0c             	sub    esp,0xc
c001db38:	fa                   	cli    
c001db39:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001db3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db48:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db4b:	e8 0f fe ff ff       	call   c001d95f <schedule()>
c001db50:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001db55:	48                   	dec    eax
c001db56:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001db5b:	75 01                	jne    c001db5e <blockTask(TaskState)+0x29>
c001db5d:	fb                   	sti    
c001db5e:	83 c4 0c             	add    esp,0xc
c001db61:	c3                   	ret    

c001db62 <waitTask(int, int*, int)>:
c001db62:	83 ec 18             	sub    esp,0x18
c001db65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db6e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001db71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001db7d:	6a 07                	push   0x7
c001db7f:	e8 b1 ff ff ff       	call   c001db35 <blockTask(TaskState)>
c001db84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001db8f:	85 d2                	test   edx,edx
c001db91:	74 0a                	je     c001db9d <waitTask(int, int*, int)+0x3b>
c001db93:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001db96:	89 02                	mov    DWORD PTR [edx],eax
c001db98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db9d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dba0:	83 c4 0c             	add    esp,0xc
c001dba3:	c3                   	ret    

c001dba4 <nanoSleepUntil(unsigned long long)>:
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbaf:	3b 05 f0 de 02 c0    	cmp    eax,DWORD PTR ds:0xc002def0
c001dbb5:	89 d1                	mov    ecx,edx
c001dbb7:	1b 0d f4 de 02 c0    	sbb    ecx,DWORD PTR ds:0xc002def4
c001dbbd:	73 04                	jae    c001dbc3 <nanoSleepUntil(unsigned long long)+0x1f>
c001dbbf:	83 c4 0c             	add    esp,0xc
c001dbc2:	c3                   	ret    
c001dbc3:	fa                   	cli    
c001dbc4:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001dbca:	83 ec 08             	sub    esp,0x8
c001dbcd:	ff 05 a4 0d 03 c0    	inc    DWORD PTR ds:0xc0030da4
c001dbd3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dbd9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dbdc:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dbdf:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dbe5:	68 b8 0d 03 c0       	push   0xc0030db8
c001dbea:	e8 e1 ab 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbef:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dbf6:	e8 3a ff ff ff       	call   c001db35 <blockTask(TaskState)>
c001dbfb:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001dc00:	83 c4 10             	add    esp,0x10
c001dc03:	48                   	dec    eax
c001dc04:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001dc09:	85 c0                	test   eax,eax
c001dc0b:	75 09                	jne    c001dc16 <nanoSleepUntil(unsigned long long)+0x72>
c001dc0d:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001dc12:	85 c0                	test   eax,eax
c001dc14:	75 12                	jne    c001dc28 <nanoSleepUntil(unsigned long long)+0x84>
c001dc16:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001dc1b:	48                   	dec    eax
c001dc1c:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001dc21:	75 9c                	jne    c001dbbf <nanoSleepUntil(unsigned long long)+0x1b>
c001dc23:	fb                   	sti    
c001dc24:	83 c4 0c             	add    esp,0xc
c001dc27:	c3                   	ret    
c001dc28:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001dc32:	e8 28 fd ff ff       	call   c001d95f <schedule()>
c001dc37:	eb dd                	jmp    c001dc16 <nanoSleepUntil(unsigned long long)+0x72>

c001dc39 <nanoSleep(unsigned long long)>:
c001dc39:	a1 f0 de 02 c0       	mov    eax,ds:0xc002def0
c001dc3e:	8b 15 f4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002def4
c001dc44:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc48:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc4c:	e9 53 ff ff ff       	jmp    c001dba4 <nanoSleepUntil(unsigned long long)>

c001dc51 <sleep(unsigned long long)>:
c001dc51:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dc59:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dc5e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dc62:	01 ca                	add    edx,ecx
c001dc64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dc68:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc6c:	eb cb                	jmp    c001dc39 <nanoSleep(unsigned long long)>

c001dc6e <Semaphore::acquire()>:
c001dc6e:	83 ec 0c             	sub    esp,0xc
c001dc71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc75:	fa                   	cli    
c001dc76:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001dc7b:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001dc81:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc84:	89 0d a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,ecx
c001dc8a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dc8d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dc8f:	7d 28                	jge    c001dcb9 <Semaphore::acquire()+0x4b>
c001dc91:	41                   	inc    ecx
c001dc92:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dc95:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001dc9a:	85 c0                	test   eax,eax
c001dc9c:	75 09                	jne    c001dca7 <Semaphore::acquire()+0x39>
c001dc9e:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001dca3:	85 c0                	test   eax,eax
c001dca5:	75 4e                	jne    c001dcf5 <Semaphore::acquire()+0x87>
c001dca7:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001dcac:	48                   	dec    eax
c001dcad:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001dcb2:	75 01                	jne    c001dcb5 <Semaphore::acquire()+0x47>
c001dcb4:	fb                   	sti    
c001dcb5:	83 c4 0c             	add    esp,0xc
c001dcb8:	c3                   	ret    
c001dcb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcbe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dcc5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dcc8:	85 c9                	test   ecx,ecx
c001dcca:	74 3a                	je     c001dd06 <Semaphore::acquire()+0x98>
c001dccc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dccf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dcd5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dcd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dce3:	6a 05                	push   0x5
c001dce5:	e8 4b fe ff ff       	call   c001db35 <blockTask(TaskState)>
c001dcea:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001dcef:	83 c4 10             	add    esp,0x10
c001dcf2:	48                   	dec    eax
c001dcf3:	eb a0                	jmp    c001dc95 <Semaphore::acquire()+0x27>
c001dcf5:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001dcff:	e8 5b fc ff ff       	call   c001d95f <schedule()>
c001dd04:	eb a1                	jmp    c001dca7 <Semaphore::acquire()+0x39>
c001dd06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd0e:	eb c8                	jmp    c001dcd8 <Semaphore::acquire()+0x6a>

c001dd10 <taskReturned>:
c001dd10:	83 ec 18             	sub    esp,0x18
c001dd13:	68 08 bb 02 c0       	push   0xc002bb08
c001dd18:	e8 b8 c0 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001dd1d:	83 c4 10             	add    esp,0x10
c001dd20:	83 ec 0c             	sub    esp,0xc
c001dd23:	6a 02                	push   0x2
c001dd25:	e8 0b fe ff ff       	call   c001db35 <blockTask(TaskState)>
c001dd2a:	fa                   	cli    
c001dd2b:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001dd31:	e8 29 fc ff ff       	call   c001d95f <schedule()>
c001dd36:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001dd3b:	83 c4 10             	add    esp,0x10
c001dd3e:	48                   	dec    eax
c001dd3f:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001dd44:	85 c0                	test   eax,eax
c001dd46:	75 d8                	jne    c001dd20 <taskReturned+0x10>
c001dd48:	fb                   	sti    
c001dd49:	eb d5                	jmp    c001dd20 <taskReturned+0x10>

c001dd4b <Thr::processFromPID(int)>:
c001dd4b:	57                   	push   edi
c001dd4c:	56                   	push   esi
c001dd4d:	53                   	push   ebx
c001dd4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd52:	fa                   	cli    
c001dd53:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001dd59:	83 ec 0c             	sub    esp,0xc
c001dd5c:	68 c4 0d 03 c0       	push   0xc0030dc4
c001dd61:	e8 b4 a9 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd66:	83 c4 10             	add    esp,0x10
c001dd69:	89 c7                	mov    edi,eax
c001dd6b:	eb 14                	jmp    c001dd81 <Thr::processFromPID(int)+0x36>
c001dd6d:	83 ec 0c             	sub    esp,0xc
c001dd70:	68 c4 0d 03 c0       	push   0xc0030dc4
c001dd75:	e8 a0 a9 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	39 f8                	cmp    eax,edi
c001dd7f:	74 49                	je     c001ddca <Thr::processFromPID(int)+0x7f>
c001dd81:	83 ec 0c             	sub    esp,0xc
c001dd84:	68 c4 0d 03 c0       	push   0xc0030dc4
c001dd89:	e8 8c a9 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd8e:	c7 04 24 c4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dc4
c001dd95:	89 c3                	mov    ebx,eax
c001dd97:	e8 86 a9 00 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd9c:	58                   	pop    eax
c001dd9d:	5a                   	pop    edx
c001dd9e:	53                   	push   ebx
c001dd9f:	68 c4 0d 03 c0       	push   0xc0030dc4
c001dda4:	e8 27 aa 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dda9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	39 30                	cmp    DWORD PTR [eax],esi
c001ddb1:	75 ba                	jne    c001dd6d <Thr::processFromPID(int)+0x22>
c001ddb3:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001ddb8:	48                   	dec    eax
c001ddb9:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001ddbe:	74 07                	je     c001ddc7 <Thr::processFromPID(int)+0x7c>
c001ddc0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddc3:	5b                   	pop    ebx
c001ddc4:	5e                   	pop    esi
c001ddc5:	5f                   	pop    edi
c001ddc6:	c3                   	ret    
c001ddc7:	fb                   	sti    
c001ddc8:	eb f6                	jmp    c001ddc0 <Thr::processFromPID(int)+0x75>
c001ddca:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001ddcf:	48                   	dec    eax
c001ddd0:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001ddd5:	75 05                	jne    c001dddc <Thr::processFromPID(int)+0x91>
c001ddd7:	fb                   	sti    
c001ddd8:	5b                   	pop    ebx
c001ddd9:	5e                   	pop    esi
c001ddda:	5f                   	pop    edi
c001dddb:	c3                   	ret    
c001dddc:	5b                   	pop    ebx
c001dddd:	31 c0                	xor    eax,eax
c001dddf:	5e                   	pop    esi
c001dde0:	5f                   	pop    edi
c001dde1:	c3                   	ret    

c001dde2 <unblockTask(ThreadControlBlock*)>:
c001dde2:	53                   	push   ebx
c001dde3:	83 ec 08             	sub    esp,0x8
c001dde6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddea:	fa                   	cli    
c001ddeb:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001ddf1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ddf4:	85 c0                	test   eax,eax
c001ddf6:	74 5a                	je     c001de52 <unblockTask(ThreadControlBlock*)+0x70>
c001ddf8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ddfb:	48                   	dec    eax
c001ddfc:	74 31                	je     c001de2f <unblockTask(ThreadControlBlock*)+0x4d>
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	68 c4 0d 03 c0       	push   0xc0030dc4
c001de06:	e8 0f a9 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de0b:	83 c4 10             	add    esp,0x10
c001de0e:	85 c0                	test   eax,eax
c001de10:	75 17                	jne    c001de29 <unblockTask(ThreadControlBlock*)+0x47>
c001de12:	eb 50                	jmp    c001de64 <unblockTask(ThreadControlBlock*)+0x82>
c001de14:	83 ec 08             	sub    esp,0x8
c001de17:	50                   	push   eax
c001de18:	68 c4 0d 03 c0       	push   0xc0030dc4
c001de1d:	e8 80 ac 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de22:	83 c4 10             	add    esp,0x10
c001de25:	85 c0                	test   eax,eax
c001de27:	74 3b                	je     c001de64 <unblockTask(ThreadControlBlock*)+0x82>
c001de29:	39 c3                	cmp    ebx,eax
c001de2b:	75 e7                	jne    c001de14 <unblockTask(ThreadControlBlock*)+0x32>
c001de2d:	eb 10                	jmp    c001de3f <unblockTask(ThreadControlBlock*)+0x5d>
c001de2f:	83 ec 0c             	sub    esp,0xc
c001de32:	68 aa ba 02 c0       	push   0xc002baaa
c001de37:	e8 2d 48 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001de44:	48                   	dec    eax
c001de45:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001de4a:	75 01                	jne    c001de4d <unblockTask(ThreadControlBlock*)+0x6b>
c001de4c:	fb                   	sti    
c001de4d:	83 c4 08             	add    esp,0x8
c001de50:	5b                   	pop    ebx
c001de51:	c3                   	ret    
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	68 93 ba 02 c0       	push   0xc002ba93
c001de5a:	e8 0a 48 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001de5f:	83 c4 10             	add    esp,0x10
c001de62:	eb db                	jmp    c001de3f <unblockTask(ThreadControlBlock*)+0x5d>
c001de64:	83 ec 08             	sub    esp,0x8
c001de67:	53                   	push   ebx
c001de68:	68 c4 0d 03 c0       	push   0xc0030dc4
c001de6d:	e8 5e a9 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de72:	83 c4 10             	add    esp,0x10
c001de75:	eb c8                	jmp    c001de3f <unblockTask(ThreadControlBlock*)+0x5d>

c001de77 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001de77:	55                   	push   ebp
c001de78:	57                   	push   edi
c001de79:	56                   	push   esi
c001de7a:	53                   	push   ebx
c001de7b:	83 ec 1c             	sub    esp,0x1c
c001de7e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de82:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de85:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001de8b:	85 ff                	test   edi,edi
c001de8d:	7e 20                	jle    c001deaf <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001de8f:	31 f6                	xor    esi,esi
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001de9b:	46                   	inc    esi
c001de9c:	e8 08 17 ff ff       	call   c000f5a9 <free>
c001dea1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dead:	7f e2                	jg     c001de91 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001deaf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001deb9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001debe:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dec1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dec4:	d3 c0                	rol    eax,cl
c001dec6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001decd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ded0:	89 f7                	mov    edi,esi
c001ded2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001deda:	0f 85 64 01 00 00    	jne    c001e044 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dee0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dee6:	85 ed                	test   ebp,ebp
c001dee8:	74 1b                	je     c001df05 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	55                   	push   ebp
c001deee:	e8 87 bc ff ff       	call   c0019b7a <EnvVarContainer::~EnvVarContainer()>
c001def3:	59                   	pop    ecx
c001def4:	5e                   	pop    esi
c001def5:	6a 0c                	push   0xc
c001def7:	55                   	push   ebp
c001def8:	e8 94 46 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001defd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	89 f7                	mov    edi,esi
c001df05:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df0b:	85 c0                	test   eax,eax
c001df0d:	0f 84 aa 00 00 00    	je     c001dfbd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df13:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df16:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df1a:	31 c9                	xor    ecx,ecx
c001df1c:	eb 10                	jmp    c001df2e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df1e:	41                   	inc    ecx
c001df1f:	83 f9 10             	cmp    ecx,0x10
c001df22:	0f 84 95 00 00 00    	je     c001dfbd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df28:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df2e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df35:	d3 fa                	sar    edx,cl
c001df37:	83 e2 01             	and    edx,0x1
c001df3a:	74 e2                	je     c001df1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df3c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df3f:	01 ca                	add    edx,ecx
c001df41:	89 d5                	mov    ebp,edx
c001df43:	c1 e5 05             	shl    ebp,0x5
c001df46:	01 ea                	add    edx,ebp
c001df48:	01 d0                	add    eax,edx
c001df4a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001df50:	83 fd 07             	cmp    ebp,0x7
c001df53:	75 c9                	jne    c001df1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df55:	05 40 02 00 00       	add    eax,0x240
c001df5a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001df5d:	83 fd ff             	cmp    ebp,0xffffffff
c001df60:	0f 8c e6 00 00 00    	jl     c001e04c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001df66:	0f 84 97 01 00 00    	je     c001e103 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001df6c:	85 ed                	test   ebp,ebp
c001df6e:	0f 84 7e 01 00 00    	je     c001e0f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001df74:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001df76:	75 a6                	jne    c001df1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df78:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df82:	01 d0                	add    eax,edx
c001df84:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001df88:	83 ec 0c             	sub    esp,0xc
c001df8b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001df91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df94:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df9a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dfa1:	50                   	push   eax
c001dfa2:	e8 3b fe ff ff       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c001dfa7:	83 c4 10             	add    esp,0x10
c001dfaa:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfb1:	89 f7                	mov    edi,esi
c001dfb3:	41                   	inc    ecx
c001dfb4:	83 f9 10             	cmp    ecx,0x10
c001dfb7:	0f 85 6b ff ff ff    	jne    c001df28 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dfbd:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dfc3:	85 c0                	test   eax,eax
c001dfc5:	74 5d                	je     c001e024 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dfc7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dfcd:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dfd3:	74 4f                	je     c001e024 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	68 c4 0d 03 c0       	push   0xc0030dc4
c001dfdd:	e8 38 a7 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfe2:	c7 04 24 c4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dc4
c001dfe9:	89 c7                	mov    edi,eax
c001dfeb:	e8 0e a7 00 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dff0:	83 c4 10             	add    esp,0x10
c001dff3:	84 c0                	test   al,al
c001dff5:	0f 84 c2 00 00 00    	je     c001e0bd <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001dffb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dffe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e004:	85 d2                	test   edx,edx
c001e006:	74 0f                	je     c001e017 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e00d:	52                   	push   edx
c001e00e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e011:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e021:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e024:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e02a:	85 db                	test   ebx,ebx
c001e02c:	74 16                	je     c001e044 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e02e:	83 ec 0c             	sub    esp,0xc
c001e031:	53                   	push   ebx
c001e032:	e8 09 38 ff ff       	call   c0011840 <VAS::~VAS()>
c001e037:	58                   	pop    eax
c001e038:	5a                   	pop    edx
c001e039:	6a 14                	push   0x14
c001e03b:	53                   	push   ebx
c001e03c:	e8 50 45 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001e041:	83 c4 10             	add    esp,0x10
c001e044:	83 c4 1c             	add    esp,0x1c
c001e047:	5b                   	pop    ebx
c001e048:	5e                   	pop    esi
c001e049:	5f                   	pop    edi
c001e04a:	5d                   	pop    ebp
c001e04b:	c3                   	ret    
c001e04c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e050:	83 ec 0c             	sub    esp,0xc
c001e053:	68 3c bb 02 c0       	push   0xc002bb3c
c001e058:	e8 78 bd ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001e05d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e060:	83 c4 10             	add    esp,0x10
c001e063:	89 f7                	mov    edi,esi
c001e065:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e069:	e9 b0 fe ff ff       	jmp    c001df1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e06e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e074:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e07a:	75 1c                	jne    c001e098 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	68 a4 bb 02 c0       	push   0xc002bba4
c001e084:	e8 e0 45 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001e089:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e090:	e8 a0 fa ff ff       	call   c001db35 <blockTask(TaskState)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	83 ec 08             	sub    esp,0x8
c001e09b:	56                   	push   esi
c001e09c:	68 c4 0d 03 c0       	push   0xc0030dc4
c001e0a1:	e8 2a a7 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0a6:	c7 04 24 c4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dc4
c001e0ad:	e8 68 a6 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	39 f8                	cmp    eax,edi
c001e0b7:	0f 84 3e ff ff ff    	je     c001dffb <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	68 c4 0d 03 c0       	push   0xc0030dc4
c001e0c5:	e8 50 a6 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0ca:	c7 04 24 c4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dc4
c001e0d1:	89 c6                	mov    esi,eax
c001e0d3:	e8 4a a6 00 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	39 f3                	cmp    ebx,esi
c001e0dd:	74 b9                	je     c001e098 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0df:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e0e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0e5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e0eb:	75 ab                	jne    c001e098 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0ed:	e9 7c ff ff ff       	jmp    c001e06e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e0f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	68 70 bb 02 c0       	push   0xc002bb70
c001e0fe:	e9 55 ff ff ff       	jmp    c001e058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e103:	8b 36                	mov    esi,DWORD PTR [esi]
c001e105:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e109:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e10c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e10f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e115:	01 d7                	add    edi,edx
c001e117:	89 f8                	mov    eax,edi
c001e119:	e9 66 fe ff ff       	jmp    c001df84 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e11e <cleanerTaskFunction(void*)>:
c001e11e:	53                   	push   ebx
c001e11f:	83 ec 08             	sub    esp,0x8
c001e122:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e127:	48                   	dec    eax
c001e128:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e12d:	75 01                	jne    c001e130 <cleanerTaskFunction(void*)+0x12>
c001e12f:	fb                   	sti    
c001e130:	fa                   	cli    
c001e131:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e136:	80 3d 8c 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d8c,0x0
c001e13d:	8d 50 01             	lea    edx,[eax+0x1]
c001e140:	89 15 a8 0d 03 c0    	mov    DWORD PTR ds:0xc0030da8,edx
c001e146:	0f 84 a1 00 00 00    	je     c001e1ed <cleanerTaskFunction(void*)+0xcf>
c001e14c:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e151:	85 c0                	test   eax,eax
c001e153:	75 01                	jne    c001e156 <cleanerTaskFunction(void*)+0x38>
c001e155:	fb                   	sti    
c001e156:	c6 05 8c 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d8c,0x0
c001e15d:	fa                   	cli    
c001e15e:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e164:	ff 05 a4 0d 03 c0    	inc    DWORD PTR ds:0xc0030da4
c001e16a:	fa                   	cli    
c001e16b:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e171:	eb 26                	jmp    c001e199 <cleanerTaskFunction(void*)+0x7b>
c001e173:	83 ec 0c             	sub    esp,0xc
c001e176:	68 ac 0d 03 c0       	push   0xc0030dac
c001e17b:	e8 9a a5 00 00       	call   c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e180:	c7 04 24 ac 0d 03 c0 	mov    DWORD PTR [esp],0xc0030dac
c001e187:	89 c3                	mov    ebx,eax
c001e189:	e8 94 a5 00 00       	call   c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e18e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e191:	e8 e1 fc ff ff       	call   c001de77 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	83 ec 0c             	sub    esp,0xc
c001e19c:	68 ac 0d 03 c0       	push   0xc0030dac
c001e1a1:	e8 58 a5 00 00       	call   c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1a6:	83 c4 10             	add    esp,0x10
c001e1a9:	84 c0                	test   al,al
c001e1ab:	74 c6                	je     c001e173 <cleanerTaskFunction(void*)+0x55>
c001e1ad:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e1b2:	48                   	dec    eax
c001e1b3:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e1b8:	75 01                	jne    c001e1bb <cleanerTaskFunction(void*)+0x9d>
c001e1ba:	fb                   	sti    
c001e1bb:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001e1c0:	48                   	dec    eax
c001e1c1:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001e1c6:	0f 85 56 ff ff ff    	jne    c001e122 <cleanerTaskFunction(void*)+0x4>
c001e1cc:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001e1d1:	85 c0                	test   eax,eax
c001e1d3:	0f 84 49 ff ff ff    	je     c001e122 <cleanerTaskFunction(void*)+0x4>
c001e1d9:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001e1e3:	e8 77 f7 ff ff       	call   c001d95f <schedule()>
c001e1e8:	e9 35 ff ff ff       	jmp    c001e122 <cleanerTaskFunction(void*)+0x4>
c001e1ed:	83 ec 0c             	sub    esp,0xc
c001e1f0:	6a 02                	push   0x2
c001e1f2:	e8 18 f9 ff ff       	call   c001db0f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	e9 57 ff ff ff       	jmp    c001e156 <cleanerTaskFunction(void*)+0x38>

c001e1ff <terminateTask(int)>:
c001e1ff:	83 ec 14             	sub    esp,0x14
c001e202:	fa                   	cli    
c001e203:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e209:	ff 05 a4 0d 03 c0    	inc    DWORD PTR ds:0xc0030da4
c001e20f:	fa                   	cli    
c001e210:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e216:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e21a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e21f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e227:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e22a:	50                   	push   eax
c001e22b:	68 ac 0d 03 c0       	push   0xc0030dac
c001e230:	e8 9b a5 00 00       	call   c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e235:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e23a:	83 c4 10             	add    esp,0x10
c001e23d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e244:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c001e249:	85 c0                	test   eax,eax
c001e24b:	74 53                	je     c001e2a0 <terminateTask(int)+0xa1>
c001e24d:	83 ec 0c             	sub    esp,0xc
c001e250:	c6 05 8c 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d8c,0x1
c001e257:	50                   	push   eax
c001e258:	e8 85 fb ff ff       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e265:	48                   	dec    eax
c001e266:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e26b:	75 01                	jne    c001e26e <terminateTask(int)+0x6f>
c001e26d:	fb                   	sti    
c001e26e:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001e273:	48                   	dec    eax
c001e274:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001e279:	75 09                	jne    c001e284 <terminateTask(int)+0x85>
c001e27b:	83 3d a0 0d 03 c0 00 	cmp    DWORD PTR ds:0xc0030da0,0x0
c001e282:	75 2e                	jne    c001e2b2 <terminateTask(int)+0xb3>
c001e284:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e289:	48                   	dec    eax
c001e28a:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e28f:	75 01                	jne    c001e292 <terminateTask(int)+0x93>
c001e291:	fb                   	sti    
c001e292:	fa                   	cli    
c001e293:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e299:	e8 c1 f6 ff ff       	call   c001d95f <schedule()>
c001e29e:	eb e4                	jmp    c001e284 <terminateTask(int)+0x85>
c001e2a0:	83 ec 0c             	sub    esp,0xc
c001e2a3:	68 c1 ba 02 c0       	push   0xc002bac1
c001e2a8:	e8 bc 43 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001e2ad:	83 c4 10             	add    esp,0x10
c001e2b0:	eb ae                	jmp    c001e260 <terminateTask(int)+0x61>
c001e2b2:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001e2bc:	eb db                	jmp    c001e299 <terminateTask(int)+0x9a>

c001e2be <Thr::terminateFromIRQ(int)>:
c001e2be:	83 ec 18             	sub    esp,0x18
c001e2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2c5:	e8 35 ff ff ff       	call   c001e1ff <terminateTask(int)>

c001e2ca <Semaphore::release()>:
c001e2ca:	83 ec 0c             	sub    esp,0xc
c001e2cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2d1:	fa                   	cli    
c001e2d2:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001e2d7:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e2dd:	8d 48 01             	lea    ecx,[eax+0x1]
c001e2e0:	89 0d a4 0d 03 c0    	mov    DWORD PTR ds:0xc0030da4,ecx
c001e2e6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e2e9:	85 c9                	test   ecx,ecx
c001e2eb:	74 3c                	je     c001e329 <Semaphore::release()+0x5f>
c001e2ed:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e2f6:	51                   	push   ecx
c001e2f7:	e8 e6 fa ff ff       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c001e2fc:	a1 a4 0d 03 c0       	mov    eax,ds:0xc0030da4
c001e301:	83 c4 10             	add    esp,0x10
c001e304:	48                   	dec    eax
c001e305:	a3 a4 0d 03 c0       	mov    ds:0xc0030da4,eax
c001e30a:	85 c0                	test   eax,eax
c001e30c:	75 09                	jne    c001e317 <Semaphore::release()+0x4d>
c001e30e:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001e313:	85 c0                	test   eax,eax
c001e315:	75 17                	jne    c001e32e <Semaphore::release()+0x64>
c001e317:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e31c:	48                   	dec    eax
c001e31d:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e322:	75 01                	jne    c001e325 <Semaphore::release()+0x5b>
c001e324:	fb                   	sti    
c001e325:	83 c4 0c             	add    esp,0xc
c001e328:	c3                   	ret    
c001e329:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e32c:	eb d7                	jmp    c001e305 <Semaphore::release()+0x3b>
c001e32e:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c001e338:	e8 22 f6 ff ff       	call   c001d95f <schedule()>
c001e33d:	eb d8                	jmp    c001e317 <Semaphore::release()+0x4d>

c001e33f <__static_initialization_and_destruction_0(int, int)>:
c001e33f:	83 ec 0c             	sub    esp,0xc
c001e342:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e347:	0f 85 88 00 00 00    	jne    c001e3d5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e34d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e355:	75 7e                	jne    c001e3d5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e357:	83 ec 0c             	sub    esp,0xc
c001e35a:	68 c4 0d 03 c0       	push   0xc0030dc4
c001e35f:	e8 fc a6 00 00       	call   c0028a60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e364:	83 c4 10             	add    esp,0x10
c001e367:	83 ec 04             	sub    esp,0x4
c001e36a:	68 58 c6 02 c0       	push   0xc002c658
c001e36f:	68 c4 0d 03 c0       	push   0xc0030dc4
c001e374:	68 14 8a 02 c0       	push   0xc0028a14
c001e379:	e8 8d 41 ff ff       	call   c001250b <__cxa_atexit>
c001e37e:	83 c4 10             	add    esp,0x10
c001e381:	83 ec 0c             	sub    esp,0xc
c001e384:	68 b8 0d 03 c0       	push   0xc0030db8
c001e389:	e8 d2 a6 00 00       	call   c0028a60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	83 ec 04             	sub    esp,0x4
c001e394:	68 58 c6 02 c0       	push   0xc002c658
c001e399:	68 b8 0d 03 c0       	push   0xc0030db8
c001e39e:	68 14 8a 02 c0       	push   0xc0028a14
c001e3a3:	e8 63 41 ff ff       	call   c001250b <__cxa_atexit>
c001e3a8:	83 c4 10             	add    esp,0x10
c001e3ab:	83 ec 0c             	sub    esp,0xc
c001e3ae:	68 ac 0d 03 c0       	push   0xc0030dac
c001e3b3:	e8 a8 a6 00 00       	call   c0028a60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3b8:	83 c4 10             	add    esp,0x10
c001e3bb:	83 ec 04             	sub    esp,0x4
c001e3be:	68 58 c6 02 c0       	push   0xc002c658
c001e3c3:	68 ac 0d 03 c0       	push   0xc0030dac
c001e3c8:	68 14 8a 02 c0       	push   0xc0028a14
c001e3cd:	e8 39 41 ff ff       	call   c001250b <__cxa_atexit>
c001e3d2:	83 c4 10             	add    esp,0x10
c001e3d5:	90                   	nop
c001e3d6:	83 c4 0c             	add    esp,0xc
c001e3d9:	c3                   	ret    

c001e3da <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e3da:	83 ec 0c             	sub    esp,0xc
c001e3dd:	83 ec 08             	sub    esp,0x8
c001e3e0:	68 ff ff 00 00       	push   0xffff
c001e3e5:	6a 01                	push   0x1
c001e3e7:	e8 53 ff ff ff       	call   c001e33f <__static_initialization_and_destruction_0(int, int)>
c001e3ec:	83 c4 10             	add    esp,0x10
c001e3ef:	83 c4 0c             	add    esp,0xc
c001e3f2:	c3                   	ret    

c001e3f3 <Vm::inbv(unsigned short)>:
c001e3f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e3f7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e3fc:	75 06                	jne    c001e404 <Vm::inbv(unsigned short)+0x11>
c001e3fe:	a0 0c 0e 03 c0       	mov    al,ds:0xc0030e0c
c001e403:	c3                   	ret    
c001e404:	ec                   	in     al,dx
c001e405:	c3                   	ret    

c001e406 <Vm::outbv(unsigned short, unsigned char)>:
c001e406:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e40e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e413:	75 25                	jne    c001e43a <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e415:	8b 0d 0c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e0c
c001e41b:	8d 51 01             	lea    edx,[ecx+0x1]
c001e41e:	88 81 20 0e 03 c0    	mov    BYTE PTR [ecx-0x3ffcf1e0],al
c001e424:	89 15 0c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e0c,edx
c001e42a:	83 fa 20             	cmp    edx,0x20
c001e42d:	75 0c                	jne    c001e43b <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e42f:	c7 05 0c 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030e0c,0x1f
c001e439:	c3                   	ret    
c001e43a:	ee                   	out    dx,al
c001e43b:	c3                   	ret    

c001e43c <Vm::realToLinear(unsigned short, unsigned short)>:
c001e43c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e441:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e446:	c1 e0 04             	shl    eax,0x4
c001e449:	01 d0                	add    eax,edx
c001e44b:	c3                   	ret    

c001e44c <Vm::getSegment(unsigned int)>:
c001e44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e450:	c1 e8 10             	shr    eax,0x10
c001e453:	c3                   	ret    

c001e454 <Vm::getOffset(unsigned int)>:
c001e454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e458:	c3                   	ret    

c001e459 <Vm::mainloop2()>:
c001e459:	83 ec 18             	sub    esp,0x18
c001e45c:	fa                   	cli    
c001e45d:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e463:	6a 02                	push   0x2
c001e465:	c6 05 05 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e05,0x1
c001e46c:	e8 9e f6 ff ff       	call   c001db0f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e476:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e47a:	52                   	push   edx
c001e47b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e47f:	52                   	push   edx
c001e480:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e484:	52                   	push   edx
c001e485:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e489:	50                   	push   eax
c001e48a:	e8 6b 1e fe ff       	call   c00002fa <goToVM86>
c001e48f:	83 c4 2c             	add    esp,0x2c
c001e492:	c3                   	ret    

c001e493 <Vm::mainVm8086Loop(void*)>:
c001e493:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e498:	48                   	dec    eax
c001e499:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e49e:	75 01                	jne    c001e4a1 <Vm::mainVm8086Loop(void*)+0xe>
c001e4a0:	fb                   	sti    
c001e4a1:	eb b6                	jmp    c001e459 <Vm::mainloop2()>

c001e4a3 <Vm::mainloop3(unsigned long)>:
c001e4a3:	83 ec 18             	sub    esp,0x18
c001e4a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4aa:	fa                   	cli    
c001e4ab:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e4b1:	6a 02                	push   0x2
c001e4b3:	c6 05 04 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e04,0x1
c001e4ba:	a3 00 0e 03 c0       	mov    ds:0xc0030e00,eax
c001e4bf:	e8 4b f6 ff ff       	call   c001db0f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4c4:	83 c4 1c             	add    esp,0x1c
c001e4c7:	eb 90                	jmp    c001e459 <Vm::mainloop2()>

c001e4c9 <Vm::initialise8086()>:
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	68 80 00 00 00       	push   0x80
c001e4d1:	6a 00                	push   0x0
c001e4d3:	68 93 e4 01 c0       	push   0xc001e493
c001e4d8:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c001e4de:	e8 57 f2 ff ff       	call   c001d73a <Process::createThread(void (*)(void*), void*, int)>
c001e4e3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e4ea:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e4ef:	68 00 01 00 00       	push   0x100
c001e4f4:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c001e4f9:	6a 00                	push   0x0
c001e4fb:	6a 00                	push   0x0
c001e4fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e503:	e8 aa 37 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e508:	83 c4 2c             	add    esp,0x2c
c001e50b:	c3                   	ret    

c001e50c <Vm::finish8086()>:
c001e50c:	53                   	push   ebx
c001e50d:	83 ec 08             	sub    esp,0x8
c001e510:	fa                   	cli    
c001e511:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e517:	80 3d 04 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e04,0x0
c001e51e:	75 15                	jne    c001e535 <Vm::finish8086()+0x29>
c001e520:	e8 3a f4 ff ff       	call   c001d95f <schedule()>
c001e525:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e52a:	48                   	dec    eax
c001e52b:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e530:	75 de                	jne    c001e510 <Vm::finish8086()+0x4>
c001e532:	fb                   	sti    
c001e533:	eb db                	jmp    c001e510 <Vm::finish8086()+0x4>
c001e535:	83 ec 0c             	sub    esp,0xc
c001e538:	8b 1d 00 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e00
c001e53e:	ff 35 08 0e 03 c0    	push   DWORD PTR ds:0xc0030e08
c001e544:	c6 05 04 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e04,0x0
c001e54b:	e8 92 f8 ff ff       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c001e550:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	8d 50 ff             	lea    edx,[eax-0x1]
c001e55b:	89 15 a8 0d 03 c0    	mov    DWORD PTR ds:0xc0030da8,edx
c001e561:	85 d2                	test   edx,edx
c001e563:	75 01                	jne    c001e566 <Vm::finish8086()+0x5a>
c001e565:	fb                   	sti    
c001e566:	89 d8                	mov    eax,ebx
c001e568:	83 c4 08             	add    esp,0x8
c001e56b:	5b                   	pop    ebx
c001e56c:	c3                   	ret    

c001e56d <Vm::getOutput8086(unsigned char*)>:
c001e56d:	57                   	push   edi
c001e56e:	8b 0d 0c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e0c
c001e574:	56                   	push   esi
c001e575:	be 20 0e 03 c0       	mov    esi,0xc0030e20
c001e57a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e57e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e580:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c001e585:	5e                   	pop    esi
c001e586:	c7 05 0c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e0c,0x0
c001e590:	5f                   	pop    edi
c001e591:	c3                   	ret    

c001e592 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e592:	55                   	push   ebp
c001e593:	57                   	push   edi
c001e594:	56                   	push   esi
c001e595:	53                   	push   ebx
c001e596:	83 ec 2c             	sub    esp,0x2c
c001e599:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e59d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5a1:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5a5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e5a9:	fa                   	cli    
c001e5aa:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c001e5b0:	0f b6 35 05 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030e05
c001e5b7:	89 f0                	mov    eax,esi
c001e5b9:	84 c0                	test   al,al
c001e5bb:	75 1d                	jne    c001e5da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e5bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5c1:	e8 99 f3 ff ff       	call   c001d95f <schedule()>
c001e5c6:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e5cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5cf:	48                   	dec    eax
c001e5d0:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e5d5:	75 d2                	jne    c001e5a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e5d7:	fb                   	sti    
c001e5d8:	eb cf                	jmp    c001e5a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e5da:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e5df:	c7 05 0c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e0c,0x0
c001e5e9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e5ed:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e5f1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e5f5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e5f9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e5fd:	50                   	push   eax
c001e5fe:	6a 20                	push   0x20
c001e600:	6a 00                	push   0x0
c001e602:	68 20 0e 03 c0       	push   0xc0030e20
c001e607:	e8 44 21 fe ff       	call   c0000750 <memset>
c001e60c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e613:	e8 81 0f ff ff       	call   c000f599 <malloc>
c001e618:	83 c4 0c             	add    esp,0xc
c001e61b:	89 c3                	mov    ebx,eax
c001e61d:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c001e623:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e627:	50                   	push   eax
c001e628:	e8 9b 45 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	85 db                	test   ebx,ebx
c001e632:	75 0a                	jne    c001e63e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e634:	83 ec 0c             	sub    esp,0xc
c001e637:	68 cc bb 02 c0       	push   0xc002bbcc
c001e63c:	eb 3e                	jmp    c001e67c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e63e:	50                   	push   eax
c001e63f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e643:	50                   	push   eax
c001e644:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e648:	50                   	push   eax
c001e649:	53                   	push   ebx
c001e64a:	e8 89 48 ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e657:	74 0a                	je     c001e663 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e659:	83 ec 0c             	sub    esp,0xc
c001e65c:	68 e0 bb 02 c0       	push   0xc002bbe0
c001e661:	eb 19                	jmp    c001e67c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e663:	51                   	push   ecx
c001e664:	51                   	push   ecx
c001e665:	6a 01                	push   0x1
c001e667:	53                   	push   ebx
c001e668:	e8 bf 45 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	85 c0                	test   eax,eax
c001e672:	74 24                	je     c001e698 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	68 f9 bb 02 c0       	push   0xc002bbf9
c001e67c:	e8 54 b7 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001e681:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e686:	83 c4 10             	add    esp,0x10
c001e689:	48                   	dec    eax
c001e68a:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e68f:	85 c0                	test   eax,eax
c001e691:	75 01                	jne    c001e694 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e693:	fb                   	sti    
c001e694:	31 f6                	xor    esi,esi
c001e696:	eb 58                	jmp    c001e6f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e698:	0f b7 ed             	movzx  ebp,bp
c001e69b:	50                   	push   eax
c001e69c:	0f b7 ff             	movzx  edi,di
c001e69f:	50                   	push   eax
c001e6a0:	55                   	push   ebp
c001e6a1:	57                   	push   edi
c001e6a2:	e8 95 fd ff ff       	call   c001e43c <Vm::realToLinear(unsigned short, unsigned short)>
c001e6a7:	5a                   	pop    edx
c001e6a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e6aa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e6ae:	51                   	push   ecx
c001e6af:	50                   	push   eax
c001e6b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6b8:	53                   	push   ebx
c001e6b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e6bc:	83 c4 14             	add    esp,0x14
c001e6bf:	53                   	push   ebx
c001e6c0:	e8 c5 45 ff ff       	call   c0012c8a <File::close()>
c001e6c5:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c001e6ca:	83 c4 10             	add    esp,0x10
c001e6cd:	48                   	dec    eax
c001e6ce:	c6 05 05 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e05,0x0
c001e6d5:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c001e6da:	85 c0                	test   eax,eax
c001e6dc:	75 01                	jne    c001e6df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e6de:	fb                   	sti    
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	ff 35 08 0e 03 c0    	push   DWORD PTR ds:0xc0030e08
c001e6e8:	e8 f5 f6 ff ff       	call   c001dde2 <unblockTask(ThreadControlBlock*)>
c001e6ed:	83 c4 10             	add    esp,0x10
c001e6f0:	83 c4 2c             	add    esp,0x2c
c001e6f3:	89 f0                	mov    eax,esi
c001e6f5:	5b                   	pop    ebx
c001e6f6:	5e                   	pop    esi
c001e6f7:	5f                   	pop    edi
c001e6f8:	5d                   	pop    ebp
c001e6f9:	c3                   	ret    

c001e6fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e6fa:	57                   	push   edi
c001e6fb:	56                   	push   esi
c001e6fc:	53                   	push   ebx
c001e6fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e705:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e709:	83 e8 06             	sub    eax,0x6
c001e70c:	0f b7 c0             	movzx  eax,ax
c001e70f:	50                   	push   eax
c001e710:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e715:	50                   	push   eax
c001e716:	e8 21 fd ff ff       	call   c001e43c <Vm::realToLinear(unsigned short, unsigned short)>
c001e71b:	5a                   	pop    edx
c001e71c:	5e                   	pop    esi
c001e71d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e720:	8d 56 fa             	lea    edx,[esi-0x6]
c001e723:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e729:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e72c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e72f:	83 c2 02             	add    edx,0x2
c001e732:	66 89 10             	mov    WORD PTR [eax],dx
c001e735:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e738:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e73c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e73f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e743:	89 d6                	mov    esi,edx
c001e745:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e74b:	66 81 e6 ff fd       	and    si,0xfdff
c001e750:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e754:	74 07                	je     c001e75d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e756:	89 d6                	mov    esi,edx
c001e758:	66 81 ce 00 02       	or     si,0x200
c001e75d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e761:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e766:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e76a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e772:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e775:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e77d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e780:	5b                   	pop    ebx
c001e781:	5e                   	pop    esi
c001e782:	5f                   	pop    edi
c001e783:	c3                   	ret    

c001e784 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e784:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e789:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e78e:	c1 e0 04             	shl    eax,0x4
c001e791:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e794:	c3                   	ret    

c001e795 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e795:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e79a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e79f:	c1 e0 04             	shl    eax,0x4
c001e7a2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e7a6:	c3                   	ret    

c001e7a7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e7a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7b1:	c1 e0 04             	shl    eax,0x4
c001e7b4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e7b7:	c3                   	ret    

c001e7b8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e7b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7c2:	c1 e0 04             	shl    eax,0x4
c001e7c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7c9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e7cc:	c3                   	ret    

c001e7cd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e7cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7d2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7d7:	c1 e0 04             	shl    eax,0x4
c001e7da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7de:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e7e2:	c3                   	ret    

c001e7e3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e7e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7ed:	c1 e0 04             	shl    eax,0x4
c001e7f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7f4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e7f7:	c3                   	ret    

c001e7f8 <Vm::faultHandler(regs*)>:
c001e7f8:	55                   	push   ebp
c001e7f9:	57                   	push   edi
c001e7fa:	56                   	push   esi
c001e7fb:	53                   	push   ebx
c001e7fc:	83 ec 1c             	sub    esp,0x1c
c001e7ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e803:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e806:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e80a:	0f b7 f8             	movzx  edi,ax
c001e80d:	52                   	push   edx
c001e80e:	0f b7 c0             	movzx  eax,ax
c001e811:	50                   	push   eax
c001e812:	e8 25 fc ff ff       	call   c001e43c <Vm::realToLinear(unsigned short, unsigned short)>
c001e817:	5a                   	pop    edx
c001e818:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e81b:	59                   	pop    ecx
c001e81c:	89 c1                	mov    ecx,eax
c001e81e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e821:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e825:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e82a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e82e:	0f b7 c5             	movzx  eax,bp
c001e831:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e835:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e839:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e83d:	e8 fa fb ff ff       	call   c001e43c <Vm::realToLinear(unsigned short, unsigned short)>
c001e842:	5e                   	pop    esi
c001e843:	be 06 00 00 00       	mov    esi,0x6
c001e848:	5a                   	pop    edx
c001e849:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e84e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e853:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e856:	80 fa 9d             	cmp    dl,0x9d
c001e859:	0f 84 2c 02 00 00    	je     c001ea8b <Vm::faultHandler(regs*)+0x293>
c001e85f:	0f 87 91 00 00 00    	ja     c001e8f6 <Vm::faultHandler(regs*)+0xfe>
c001e865:	80 fa 66             	cmp    dl,0x66
c001e868:	0f 84 98 01 00 00    	je     c001ea06 <Vm::faultHandler(regs*)+0x20e>
c001e86e:	77 47                	ja     c001e8b7 <Vm::faultHandler(regs*)+0xbf>
c001e870:	80 fa 36             	cmp    dl,0x36
c001e873:	0f 84 80 01 00 00    	je     c001e9f9 <Vm::faultHandler(regs*)+0x201>
c001e879:	77 1a                	ja     c001e895 <Vm::faultHandler(regs*)+0x9d>
c001e87b:	80 fa 26             	cmp    dl,0x26
c001e87e:	0f 84 4e 01 00 00    	je     c001e9d2 <Vm::faultHandler(regs*)+0x1da>
c001e884:	80 fa 2e             	cmp    dl,0x2e
c001e887:	0f 85 e2 05 00 00    	jne    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e88d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e890:	31 f6                	xor    esi,esi
c001e892:	41                   	inc    ecx
c001e893:	eb be                	jmp    c001e853 <Vm::faultHandler(regs*)+0x5b>
c001e895:	80 fa 64             	cmp    dl,0x64
c001e898:	0f 84 41 01 00 00    	je     c001e9df <Vm::faultHandler(regs*)+0x1e7>
c001e89e:	0f 87 48 01 00 00    	ja     c001e9ec <Vm::faultHandler(regs*)+0x1f4>
c001e8a4:	80 fa 3e             	cmp    dl,0x3e
c001e8a7:	0f 85 c2 05 00 00    	jne    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e8ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8b0:	be 01 00 00 00       	mov    esi,0x1
c001e8b5:	eb db                	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001e8b7:	80 fa 6d             	cmp    dl,0x6d
c001e8ba:	0f 84 ec 02 00 00    	je     c001ebac <Vm::faultHandler(regs*)+0x3b4>
c001e8c0:	77 17                	ja     c001e8d9 <Vm::faultHandler(regs*)+0xe1>
c001e8c2:	80 fa 67             	cmp    dl,0x67
c001e8c5:	0f 84 48 01 00 00    	je     c001ea13 <Vm::faultHandler(regs*)+0x21b>
c001e8cb:	80 fa 6c             	cmp    dl,0x6c
c001e8ce:	0f 84 69 02 00 00    	je     c001eb3d <Vm::faultHandler(regs*)+0x345>
c001e8d4:	e9 96 05 00 00       	jmp    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e8d9:	80 fa 6f             	cmp    dl,0x6f
c001e8dc:	0f 84 f4 03 00 00    	je     c001ecd6 <Vm::faultHandler(regs*)+0x4de>
c001e8e2:	0f 82 59 03 00 00    	jb     c001ec41 <Vm::faultHandler(regs*)+0x449>
c001e8e8:	80 fa 9c             	cmp    dl,0x9c
c001e8eb:	0f 84 2f 01 00 00    	je     c001ea20 <Vm::faultHandler(regs*)+0x228>
c001e8f1:	e9 79 05 00 00       	jmp    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e8f6:	80 fa ec             	cmp    dl,0xec
c001e8f9:	0f 84 14 05 00 00    	je     c001ee13 <Vm::faultHandler(regs*)+0x61b>
c001e8ff:	77 7b                	ja     c001e97c <Vm::faultHandler(regs*)+0x184>
c001e901:	80 fa e4             	cmp    dl,0xe4
c001e904:	0f 84 93 04 00 00    	je     c001ed9d <Vm::faultHandler(regs*)+0x5a5>
c001e90a:	77 53                	ja     c001e95f <Vm::faultHandler(regs*)+0x167>
c001e90c:	80 fa cd             	cmp    dl,0xcd
c001e90f:	0f 84 d9 01 00 00    	je     c001eaee <Vm::faultHandler(regs*)+0x2f6>
c001e915:	80 fa cf             	cmp    dl,0xcf
c001e918:	0f 85 51 05 00 00    	jne    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e91e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e921:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e924:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e928:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e92b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e92f:	81 ca 00 02 02 00    	or     edx,0x20200
c001e935:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e938:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e93c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e942:	66 c1 e8 09          	shr    ax,0x9
c001e946:	83 e0 01             	and    eax,0x1
c001e949:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e94c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e94f:	83 c0 06             	add    eax,0x6
c001e952:	25 ff ff 00 00       	and    eax,0xffff
c001e957:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e95a:	e9 0c 05 00 00       	jmp    c001ee6b <Vm::faultHandler(regs*)+0x673>
c001e95f:	80 fa e6             	cmp    dl,0xe6
c001e962:	0f 84 7f 04 00 00    	je     c001ede7 <Vm::faultHandler(regs*)+0x5ef>
c001e968:	0f 82 4b 04 00 00    	jb     c001edb9 <Vm::faultHandler(regs*)+0x5c1>
c001e96e:	80 fa e7             	cmp    dl,0xe7
c001e971:	0f 84 87 04 00 00    	je     c001edfe <Vm::faultHandler(regs*)+0x606>
c001e977:	e9 f3 04 00 00       	jmp    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e97c:	80 fa ef             	cmp    dl,0xef
c001e97f:	0f 84 d1 04 00 00    	je     c001ee56 <Vm::faultHandler(regs*)+0x65e>
c001e985:	77 28                	ja     c001e9af <Vm::faultHandler(regs*)+0x1b7>
c001e987:	80 fa ed             	cmp    dl,0xed
c001e98a:	0f 84 9f 04 00 00    	je     c001ee2f <Vm::faultHandler(regs*)+0x637>
c001e990:	80 fa ee             	cmp    dl,0xee
c001e993:	0f 85 d6 04 00 00    	jne    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e999:	50                   	push   eax
c001e99a:	50                   	push   eax
c001e99b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e99f:	50                   	push   eax
c001e9a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e9a4:	50                   	push   eax
c001e9a5:	e8 5c fa ff ff       	call   c001e406 <Vm::outbv(unsigned short, unsigned char)>
c001e9aa:	e9 9f 04 00 00       	jmp    c001ee4e <Vm::faultHandler(regs*)+0x656>
c001e9af:	80 fa fa             	cmp    dl,0xfa
c001e9b2:	0f 84 69 01 00 00    	je     c001eb21 <Vm::faultHandler(regs*)+0x329>
c001e9b8:	80 fa fb             	cmp    dl,0xfb
c001e9bb:	0f 84 6e 01 00 00    	je     c001eb2f <Vm::faultHandler(regs*)+0x337>
c001e9c1:	80 fa f3             	cmp    dl,0xf3
c001e9c4:	0f 85 a5 04 00 00    	jne    c001ee6f <Vm::faultHandler(regs*)+0x677>
c001e9ca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9cd:	e9 c0 fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001e9d2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9d5:	be 02 00 00 00       	mov    esi,0x2
c001e9da:	e9 b3 fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001e9df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9e2:	be 03 00 00 00       	mov    esi,0x3
c001e9e7:	e9 a6 fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001e9ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9ef:	be 04 00 00 00       	mov    esi,0x4
c001e9f4:	e9 99 fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001e9f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9fc:	be 05 00 00 00       	mov    esi,0x5
c001ea01:	e9 8c fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001ea06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea09:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea0e:	e9 7f fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001ea13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea16:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea1b:	e9 72 fe ff ff       	jmp    c001e892 <Vm::faultHandler(regs*)+0x9a>
c001ea20:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea23:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea2c:	74 30                	je     c001ea5e <Vm::faultHandler(regs*)+0x266>
c001ea2e:	83 e9 04             	sub    ecx,0x4
c001ea31:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea37:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea3d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea40:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea49:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea4d:	0f 84 15 04 00 00    	je     c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ea53:	80 ce 02             	or     dh,0x2
c001ea56:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea59:	e9 0a 04 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ea5e:	83 e9 02             	sub    ecx,0x2
c001ea61:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea67:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea6a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ea6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea74:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea78:	74 05                	je     c001ea7f <Vm::faultHandler(regs*)+0x287>
c001ea7a:	80 ce 02             	or     dh,0x2
c001ea7d:	eb 03                	jmp    c001ea82 <Vm::faultHandler(regs*)+0x28a>
c001ea7f:	80 e6 fd             	and    dh,0xfd
c001ea82:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ea86:	e9 dd 03 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ea8b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea90:	74 2a                	je     c001eabc <Vm::faultHandler(regs*)+0x2c4>
c001ea92:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea94:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea9a:	81 ca 00 02 02 00    	or     edx,0x20200
c001eaa0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eaa3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eaab:	c1 e8 09             	shr    eax,0x9
c001eaae:	83 e0 01             	and    eax,0x1
c001eab1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eab4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eab7:	83 c0 04             	add    eax,0x4
c001eaba:	eb 25                	jmp    c001eae1 <Vm::faultHandler(regs*)+0x2e9>
c001eabc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eabf:	81 ca 00 02 02 00    	or     edx,0x20200
c001eac5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eac8:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eacb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ead1:	66 c1 e8 09          	shr    ax,0x9
c001ead5:	83 e0 01             	and    eax,0x1
c001ead8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eadb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eade:	83 c0 02             	add    eax,0x2
c001eae1:	25 ff ff 00 00       	and    eax,0xffff
c001eae6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eae9:	e9 7a 03 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001eaee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eaf2:	3c ee                	cmp    al,0xee
c001eaf4:	75 10                	jne    c001eb06 <Vm::faultHandler(regs*)+0x30e>
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eafc:	e8 a2 f9 ff ff       	call   c001e4a3 <Vm::mainloop3(unsigned long)>
c001eb01:	e9 4b 03 00 00       	jmp    c001ee51 <Vm::faultHandler(regs*)+0x659>
c001eb06:	83 ec 0c             	sub    esp,0xc
c001eb09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb11:	51                   	push   ecx
c001eb12:	50                   	push   eax
c001eb13:	53                   	push   ebx
c001eb14:	e8 e1 fb ff ff       	call   c001e6fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb19:	83 c4 20             	add    esp,0x20
c001eb1c:	e9 4a 03 00 00       	jmp    c001ee6b <Vm::faultHandler(regs*)+0x673>
c001eb21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb26:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb2a:	e9 39 03 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001eb2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb34:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb38:	e9 2b 03 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001eb3d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb40:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb45:	74 2b                	je     c001eb72 <Vm::faultHandler(regs*)+0x37a>
c001eb47:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eb4e:	76 22                	jbe    c001eb72 <Vm::faultHandler(regs*)+0x37a>
c001eb50:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb54:	50                   	push   eax
c001eb55:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb59:	50                   	push   eax
c001eb5a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb5e:	50                   	push   eax
c001eb5f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb63:	50                   	push   eax
c001eb64:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb68:	50                   	push   eax
c001eb69:	6a 6c                	push   0x6c
c001eb6b:	6a 6c                	push   0x6c
c001eb6d:	e9 b9 01 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x533>
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb79:	0f b7 f6             	movzx  esi,si
c001eb7c:	50                   	push   eax
c001eb7d:	e8 71 f8 ff ff       	call   c001e3f3 <Vm::inbv(unsigned short)>
c001eb82:	83 c4 0c             	add    esp,0xc
c001eb85:	0f b6 c0             	movzx  eax,al
c001eb88:	50                   	push   eax
c001eb89:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eb8d:	50                   	push   eax
c001eb8e:	56                   	push   esi
c001eb8f:	e8 24 fc ff ff       	call   c001e7b8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb9a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb9e:	74 03                	je     c001eba3 <Vm::faultHandler(regs*)+0x3ab>
c001eba0:	48                   	dec    eax
c001eba1:	eb 01                	jmp    c001eba4 <Vm::faultHandler(regs*)+0x3ac>
c001eba3:	40                   	inc    eax
c001eba4:	0f b7 c0             	movzx  eax,ax
c001eba7:	e9 8d 00 00 00       	jmp    c001ec39 <Vm::faultHandler(regs*)+0x441>
c001ebac:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebaf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebb2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebb7:	74 29                	je     c001ebe2 <Vm::faultHandler(regs*)+0x3ea>
c001ebb9:	3d ff ff 00 00       	cmp    eax,0xffff
c001ebbe:	76 22                	jbe    c001ebe2 <Vm::faultHandler(regs*)+0x3ea>
c001ebc0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebc4:	50                   	push   eax
c001ebc5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebc9:	50                   	push   eax
c001ebca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebce:	50                   	push   eax
c001ebcf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebd3:	50                   	push   eax
c001ebd4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebd8:	50                   	push   eax
c001ebd9:	6a 6d                	push   0x6d
c001ebdb:	6a 6d                	push   0x6d
c001ebdd:	e9 49 01 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x533>
c001ebe2:	0f b7 c8             	movzx  ecx,ax
c001ebe5:	0f b7 f6             	movzx  esi,si
c001ebe8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ebeb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebf0:	74 20                	je     c001ec12 <Vm::faultHandler(regs*)+0x41a>
c001ebf2:	ed                   	in     eax,dx
c001ebf3:	55                   	push   ebp
c001ebf4:	50                   	push   eax
c001ebf5:	51                   	push   ecx
c001ebf6:	56                   	push   esi
c001ebf7:	e8 e7 fb ff ff       	call   c001e7e3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ebfc:	83 c4 10             	add    esp,0x10
c001ebff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec02:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec06:	74 05                	je     c001ec0d <Vm::faultHandler(regs*)+0x415>
c001ec08:	83 e8 04             	sub    eax,0x4
c001ec0b:	eb 27                	jmp    c001ec34 <Vm::faultHandler(regs*)+0x43c>
c001ec0d:	83 c0 04             	add    eax,0x4
c001ec10:	eb 22                	jmp    c001ec34 <Vm::faultHandler(regs*)+0x43c>
c001ec12:	66 ed                	in     ax,dx
c001ec14:	0f b7 c0             	movzx  eax,ax
c001ec17:	57                   	push   edi
c001ec18:	50                   	push   eax
c001ec19:	51                   	push   ecx
c001ec1a:	56                   	push   esi
c001ec1b:	e8 ad fb ff ff       	call   c001e7cd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec20:	83 c4 10             	add    esp,0x10
c001ec23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec26:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec2a:	74 05                	je     c001ec31 <Vm::faultHandler(regs*)+0x439>
c001ec2c:	83 e8 02             	sub    eax,0x2
c001ec2f:	eb 03                	jmp    c001ec34 <Vm::faultHandler(regs*)+0x43c>
c001ec31:	83 c0 02             	add    eax,0x2
c001ec34:	25 ff ff 00 00       	and    eax,0xffff
c001ec39:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ec3c:	e9 27 02 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ec41:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec44:	3c 05                	cmp    al,0x5
c001ec46:	77 24                	ja     c001ec6c <Vm::faultHandler(regs*)+0x474>
c001ec48:	0f b6 c0             	movzx  eax,al
c001ec4b:	ff 24 85 6c bc 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4394]
c001ec52:	0f b7 fd             	movzx  edi,bp
c001ec55:	eb 15                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x474>
c001ec57:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ec5b:	eb 0f                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x474>
c001ec5d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ec61:	eb 09                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x474>
c001ec63:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ec67:	eb 03                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x474>
c001ec69:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ec6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec6f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec74:	74 29                	je     c001ec9f <Vm::faultHandler(regs*)+0x4a7>
c001ec76:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec7b:	76 22                	jbe    c001ec9f <Vm::faultHandler(regs*)+0x4a7>
c001ec7d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec81:	50                   	push   eax
c001ec82:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec86:	50                   	push   eax
c001ec87:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec8b:	50                   	push   eax
c001ec8c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec90:	50                   	push   eax
c001ec91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec95:	50                   	push   eax
c001ec96:	6a 6e                	push   0x6e
c001ec98:	6a 6e                	push   0x6e
c001ec9a:	e9 8c 00 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x533>
c001ec9f:	0f b7 c0             	movzx  eax,ax
c001eca2:	52                   	push   edx
c001eca3:	52                   	push   edx
c001eca4:	50                   	push   eax
c001eca5:	57                   	push   edi
c001eca6:	e8 d9 fa ff ff       	call   c001e784 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ecab:	59                   	pop    ecx
c001ecac:	0f b6 c0             	movzx  eax,al
c001ecaf:	5e                   	pop    esi
c001ecb0:	50                   	push   eax
c001ecb1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecb5:	50                   	push   eax
c001ecb6:	e8 4b f7 ff ff       	call   c001e406 <Vm::outbv(unsigned short, unsigned char)>
c001ecbb:	83 c4 10             	add    esp,0x10
c001ecbe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecc5:	74 03                	je     c001ecca <Vm::faultHandler(regs*)+0x4d2>
c001ecc7:	48                   	dec    eax
c001ecc8:	eb 01                	jmp    c001eccb <Vm::faultHandler(regs*)+0x4d3>
c001ecca:	40                   	inc    eax
c001eccb:	0f b7 c0             	movzx  eax,ax
c001ecce:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ecd1:	e9 92 01 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ecd6:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecd9:	3c 05                	cmp    al,0x5
c001ecdb:	77 1f                	ja     c001ecfc <Vm::faultHandler(regs*)+0x504>
c001ecdd:	0f b6 c0             	movzx  eax,al
c001ece0:	ff 24 85 84 bc 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd437c]
c001ece7:	89 ef                	mov    edi,ebp
c001ece9:	eb 11                	jmp    c001ecfc <Vm::faultHandler(regs*)+0x504>
c001eceb:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ecee:	eb 0c                	jmp    c001ecfc <Vm::faultHandler(regs*)+0x504>
c001ecf0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ecf3:	eb 07                	jmp    c001ecfc <Vm::faultHandler(regs*)+0x504>
c001ecf5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ecf8:	eb 02                	jmp    c001ecfc <Vm::faultHandler(regs*)+0x504>
c001ecfa:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ecfc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ecff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed04:	74 37                	je     c001ed3d <Vm::faultHandler(regs*)+0x545>
c001ed06:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed0c:	76 2f                	jbe    c001ed3d <Vm::faultHandler(regs*)+0x545>
c001ed0e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed12:	50                   	push   eax
c001ed13:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed17:	50                   	push   eax
c001ed18:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed1c:	50                   	push   eax
c001ed1d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed21:	50                   	push   eax
c001ed22:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed26:	50                   	push   eax
c001ed27:	6a 6f                	push   0x6f
c001ed29:	6a 6f                	push   0x6f
c001ed2b:	68 12 bc 02 c0       	push   0xc002bc12
c001ed30:	e8 34 39 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001ed35:	83 c4 20             	add    esp,0x20
c001ed38:	e9 86 01 00 00       	jmp    c001eec3 <Vm::faultHandler(regs*)+0x6cb>
c001ed3d:	0f b7 d7             	movzx  edx,di
c001ed40:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ed43:	0f b7 c6             	movzx  eax,si
c001ed46:	81 e1 00 04 00 00    	and    ecx,0x400
c001ed4c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ed4f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed54:	74 1d                	je     c001ed73 <Vm::faultHandler(regs*)+0x57b>
c001ed56:	55                   	push   ebp
c001ed57:	55                   	push   ebp
c001ed58:	50                   	push   eax
c001ed59:	52                   	push   edx
c001ed5a:	e8 48 fa ff ff       	call   c001e7a7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ed5f:	83 c4 10             	add    esp,0x10
c001ed62:	89 fa                	mov    edx,edi
c001ed64:	ef                   	out    dx,eax
c001ed65:	85 c9                	test   ecx,ecx
c001ed67:	74 05                	je     c001ed6e <Vm::faultHandler(regs*)+0x576>
c001ed69:	83 ee 04             	sub    esi,0x4
c001ed6c:	eb 21                	jmp    c001ed8f <Vm::faultHandler(regs*)+0x597>
c001ed6e:	83 c6 04             	add    esi,0x4
c001ed71:	eb 1c                	jmp    c001ed8f <Vm::faultHandler(regs*)+0x597>
c001ed73:	55                   	push   ebp
c001ed74:	55                   	push   ebp
c001ed75:	50                   	push   eax
c001ed76:	52                   	push   edx
c001ed77:	e8 19 fa ff ff       	call   c001e795 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	89 fa                	mov    edx,edi
c001ed81:	66 ef                	out    dx,ax
c001ed83:	85 c9                	test   ecx,ecx
c001ed85:	74 05                	je     c001ed8c <Vm::faultHandler(regs*)+0x594>
c001ed87:	83 ee 02             	sub    esi,0x2
c001ed8a:	eb 03                	jmp    c001ed8f <Vm::faultHandler(regs*)+0x597>
c001ed8c:	83 c6 02             	add    esi,0x2
c001ed8f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ed95:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ed98:	e9 cb 00 00 00       	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ed9d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eda4:	83 ec 0c             	sub    esp,0xc
c001eda7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edab:	50                   	push   eax
c001edac:	e8 42 f6 ff ff       	call   c001e3f3 <Vm::inbv(unsigned short)>
c001edb1:	0f b6 c0             	movzx  eax,al
c001edb4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001edb7:	eb 3f                	jmp    c001edf8 <Vm::faultHandler(regs*)+0x600>
c001edb9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edbe:	74 07                	je     c001edc7 <Vm::faultHandler(regs*)+0x5cf>
c001edc0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001edc4:	ed                   	in     eax,dx
c001edc5:	eb 14                	jmp    c001eddb <Vm::faultHandler(regs*)+0x5e3>
c001edc7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001edca:	66 31 f6             	xor    si,si
c001edcd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001edd0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001edd4:	66 ed                	in     ax,dx
c001edd6:	0f b7 c0             	movzx  eax,ax
c001edd9:	09 f0                	or     eax,esi
c001eddb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001edde:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ede2:	e9 84 00 00 00       	jmp    c001ee6b <Vm::faultHandler(regs*)+0x673>
c001ede7:	52                   	push   edx
c001ede8:	52                   	push   edx
c001ede9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eded:	50                   	push   eax
c001edee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edf2:	50                   	push   eax
c001edf3:	e8 0e f6 ff ff       	call   c001e406 <Vm::outbv(unsigned short, unsigned char)>
c001edf8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001edfc:	eb 53                	jmp    c001ee51 <Vm::faultHandler(regs*)+0x659>
c001edfe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee01:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee05:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee0a:	74 03                	je     c001ee0f <Vm::faultHandler(regs*)+0x617>
c001ee0c:	ef                   	out    dx,eax
c001ee0d:	eb cf                	jmp    c001edde <Vm::faultHandler(regs*)+0x5e6>
c001ee0f:	66 ef                	out    dx,ax
c001ee11:	eb cb                	jmp    c001edde <Vm::faultHandler(regs*)+0x5e6>
c001ee13:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee1a:	83 ec 0c             	sub    esp,0xc
c001ee1d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee21:	50                   	push   eax
c001ee22:	e8 cc f5 ff ff       	call   c001e3f3 <Vm::inbv(unsigned short)>
c001ee27:	0f b6 c0             	movzx  eax,al
c001ee2a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee2d:	eb 1f                	jmp    c001ee4e <Vm::faultHandler(regs*)+0x656>
c001ee2f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee32:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee37:	74 03                	je     c001ee3c <Vm::faultHandler(regs*)+0x644>
c001ee39:	ed                   	in     eax,dx
c001ee3a:	eb 0d                	jmp    c001ee49 <Vm::faultHandler(regs*)+0x651>
c001ee3c:	66 ed                	in     ax,dx
c001ee3e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ee41:	0f b7 c0             	movzx  eax,ax
c001ee44:	66 31 d2             	xor    dx,dx
c001ee47:	09 d0                	or     eax,edx
c001ee49:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee4c:	eb 1a                	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ee4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	eb 15                	jmp    c001ee6b <Vm::faultHandler(regs*)+0x673>
c001ee56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee59:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee5c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee61:	74 03                	je     c001ee66 <Vm::faultHandler(regs*)+0x66e>
c001ee63:	ef                   	out    dx,eax
c001ee64:	eb 02                	jmp    c001ee68 <Vm::faultHandler(regs*)+0x670>
c001ee66:	66 ef                	out    dx,ax
c001ee68:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee6b:	b0 01                	mov    al,0x1
c001ee6d:	eb 56                	jmp    c001eec5 <Vm::faultHandler(regs*)+0x6cd>
c001ee6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee73:	50                   	push   eax
c001ee74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee78:	50                   	push   eax
c001ee79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee7d:	50                   	push   eax
c001ee7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee82:	50                   	push   eax
c001ee83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee87:	50                   	push   eax
c001ee88:	52                   	push   edx
c001ee89:	52                   	push   edx
c001ee8a:	68 3f bc 02 c0       	push   0xc002bc3f
c001ee8f:	e8 d5 37 ff ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c001ee94:	83 c4 20             	add    esp,0x20
c001ee97:	83 ec 0c             	sub    esp,0xc
c001ee9a:	6a 60                	push   0x60
c001ee9c:	e8 52 f5 ff ff       	call   c001e3f3 <Vm::inbv(unsigned short)>
c001eea1:	83 c4 10             	add    esp,0x10
c001eea4:	3c 1c                	cmp    al,0x1c
c001eea6:	74 04                	je     c001eeac <Vm::faultHandler(regs*)+0x6b4>
c001eea8:	3c 5a                	cmp    al,0x5a
c001eeaa:	75 eb                	jne    c001ee97 <Vm::faultHandler(regs*)+0x69f>
c001eeac:	3c 5a                	cmp    al,0x5a
c001eeae:	74 04                	je     c001eeb4 <Vm::faultHandler(regs*)+0x6bc>
c001eeb0:	3c 1c                	cmp    al,0x1c
c001eeb2:	75 0f                	jne    c001eec3 <Vm::faultHandler(regs*)+0x6cb>
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	6a 60                	push   0x60
c001eeb9:	e8 35 f5 ff ff       	call   c001e3f3 <Vm::inbv(unsigned short)>
c001eebe:	83 c4 10             	add    esp,0x10
c001eec1:	eb e9                	jmp    c001eeac <Vm::faultHandler(regs*)+0x6b4>
c001eec3:	31 c0                	xor    eax,eax
c001eec5:	83 c4 1c             	add    esp,0x1c
c001eec8:	5b                   	pop    ebx
c001eec9:	5e                   	pop    esi
c001eeca:	5f                   	pop    edi
c001eecb:	5d                   	pop    ebp
c001eecc:	c3                   	ret    

c001eecd <Vm::fpuInternalTo32(unsigned long long)>:
c001eecd:	57                   	push   edi
c001eece:	56                   	push   esi
c001eecf:	53                   	push   ebx
c001eed0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed8:	89 d6                	mov    esi,edx
c001eeda:	89 d7                	mov    edi,edx
c001eedc:	89 c1                	mov    ecx,eax
c001eede:	c1 ef 14             	shr    edi,0x14
c001eee1:	89 d3                	mov    ebx,edx
c001eee3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001eee9:	31 d2                	xor    edx,edx
c001eeeb:	89 f8                	mov    eax,edi
c001eeed:	81 e6 00 00 00 80    	and    esi,0x80000000
c001eef3:	bf ff 00 00 00       	mov    edi,0xff
c001eef8:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eefd:	83 d2 ff             	adc    edx,0xffffffff
c001ef00:	39 c7                	cmp    edi,eax
c001ef02:	bf 00 00 00 00       	mov    edi,0x0
c001ef07:	19 d7                	sbb    edi,edx
c001ef09:	72 15                	jb     c001ef20 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef0b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef0f:	c1 e0 17             	shl    eax,0x17
c001ef12:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef18:	09 f1                	or     ecx,esi
c001ef1a:	09 c1                	or     ecx,eax
c001ef1c:	89 cf                	mov    edi,ecx
c001ef1e:	eb 02                	jmp    c001ef22 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef20:	31 ff                	xor    edi,edi
c001ef22:	89 f8                	mov    eax,edi
c001ef24:	5b                   	pop    ebx
c001ef25:	5e                   	pop    esi
c001ef26:	5f                   	pop    edi
c001ef27:	c3                   	ret    

c001ef28 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef30:	c3                   	ret    

c001ef31 <Vm::fpu32ToInternal(unsigned int)>:
c001ef31:	57                   	push   edi
c001ef32:	31 ff                	xor    edi,edi
c001ef34:	56                   	push   esi
c001ef35:	53                   	push   ebx
c001ef36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef3a:	89 cb                	mov    ebx,ecx
c001ef3c:	89 ce                	mov    esi,ecx
c001ef3e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef44:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef4a:	c1 e9 17             	shr    ecx,0x17
c001ef4d:	89 f0                	mov    eax,esi
c001ef4f:	0f b6 d1             	movzx  edx,cl
c001ef52:	81 c2 80 03 00 00    	add    edx,0x380
c001ef58:	89 d1                	mov    ecx,edx
c001ef5a:	89 fa                	mov    edx,edi
c001ef5c:	c1 e1 14             	shl    ecx,0x14
c001ef5f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ef63:	c1 e0 1d             	shl    eax,0x1d
c001ef66:	89 d7                	mov    edi,edx
c001ef68:	89 c6                	mov    esi,eax
c001ef6a:	89 ca                	mov    edx,ecx
c001ef6c:	89 f0                	mov    eax,esi
c001ef6e:	09 fa                	or     edx,edi
c001ef70:	09 da                	or     edx,ebx
c001ef72:	5b                   	pop    ebx
c001ef73:	5e                   	pop    esi
c001ef74:	5f                   	pop    edi
c001ef75:	c3                   	ret    

c001ef76 <Vm::fpu64ToInternal(unsigned long long)>:
c001ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef7e:	c3                   	ret    

c001ef7f <Vm::fpuFloatToLong(unsigned long long)>:
c001ef7f:	57                   	push   edi
c001ef80:	31 c0                	xor    eax,eax
c001ef82:	56                   	push   esi
c001ef83:	31 d2                	xor    edx,edx
c001ef85:	53                   	push   ebx
c001ef86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef8e:	89 d9                	mov    ecx,ebx
c001ef90:	c1 e9 14             	shr    ecx,0x14
c001ef93:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ef99:	89 cf                	mov    edi,ecx
c001ef9b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efa1:	78 33                	js     c001efd6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efa3:	89 d9                	mov    ecx,ebx
c001efa5:	89 f0                	mov    eax,esi
c001efa7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efad:	81 c9 00 00 10 00    	or     ecx,0x100000
c001efb3:	89 ca                	mov    edx,ecx
c001efb5:	b9 34 00 00 00       	mov    ecx,0x34
c001efba:	29 f9                	sub    ecx,edi
c001efbc:	0f ad d0             	shrd   eax,edx,cl
c001efbf:	d3 fa                	sar    edx,cl
c001efc1:	f6 c1 20             	test   cl,0x20
c001efc4:	74 05                	je     c001efcb <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001efc6:	89 d0                	mov    eax,edx
c001efc8:	c1 fa 1f             	sar    edx,0x1f
c001efcb:	85 db                	test   ebx,ebx
c001efcd:	79 07                	jns    c001efd6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efcf:	f7 d8                	neg    eax
c001efd1:	83 d2 00             	adc    edx,0x0
c001efd4:	f7 da                	neg    edx
c001efd6:	5b                   	pop    ebx
c001efd7:	5e                   	pop    esi
c001efd8:	5f                   	pop    edi
c001efd9:	c3                   	ret    

c001efda <Vm::fpuULongToFloat(unsigned long long)>:
c001efda:	57                   	push   edi
c001efdb:	31 c9                	xor    ecx,ecx
c001efdd:	56                   	push   esi
c001efde:	53                   	push   ebx
c001efdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efe3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001efe7:	0f ba e7 14          	bt     edi,0x14
c001efeb:	72 07                	jb     c001eff4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001efed:	01 f6                	add    esi,esi
c001efef:	11 ff                	adc    edi,edi
c001eff1:	41                   	inc    ecx
c001eff2:	eb f3                	jmp    c001efe7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eff4:	89 fa                	mov    edx,edi
c001eff6:	89 f0                	mov    eax,esi
c001eff8:	bb 33 04 00 00       	mov    ebx,0x433
c001effd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f003:	29 cb                	sub    ebx,ecx
c001f005:	89 d9                	mov    ecx,ebx
c001f007:	5b                   	pop    ebx
c001f008:	c1 e1 14             	shl    ecx,0x14
c001f00b:	5e                   	pop    esi
c001f00c:	09 ca                	or     edx,ecx
c001f00e:	5f                   	pop    edi
c001f00f:	c3                   	ret    

c001f010 <Vm::fpuLongToFloat(long long)>:
c001f010:	56                   	push   esi
c001f011:	31 c0                	xor    eax,eax
c001f013:	53                   	push   ebx
c001f014:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f018:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f01c:	39 c8                	cmp    eax,ecx
c001f01e:	19 d8                	sbb    eax,ebx
c001f020:	7d 04                	jge    c001f026 <Vm::fpuLongToFloat(long long)+0x16>
c001f022:	31 f6                	xor    esi,esi
c001f024:	eb 0c                	jmp    c001f032 <Vm::fpuLongToFloat(long long)+0x22>
c001f026:	f7 d9                	neg    ecx
c001f028:	be 01 00 00 00       	mov    esi,0x1
c001f02d:	83 d3 00             	adc    ebx,0x0
c001f030:	f7 db                	neg    ebx
c001f032:	31 c0                	xor    eax,eax
c001f034:	0f ba e3 14          	bt     ebx,0x14
c001f038:	72 07                	jb     c001f041 <Vm::fpuLongToFloat(long long)+0x31>
c001f03a:	01 c9                	add    ecx,ecx
c001f03c:	11 db                	adc    ebx,ebx
c001f03e:	40                   	inc    eax
c001f03f:	eb f3                	jmp    c001f034 <Vm::fpuLongToFloat(long long)+0x24>
c001f041:	ba 33 04 00 00       	mov    edx,0x433
c001f046:	29 c2                	sub    edx,eax
c001f048:	89 c8                	mov    eax,ecx
c001f04a:	c1 e2 14             	shl    edx,0x14
c001f04d:	89 d9                	mov    ecx,ebx
c001f04f:	89 f3                	mov    ebx,esi
c001f051:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f057:	09 ca                	or     edx,ecx
c001f059:	84 db                	test   bl,bl
c001f05b:	74 06                	je     c001f063 <Vm::fpuLongToFloat(long long)+0x53>
c001f05d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f063:	5b                   	pop    ebx
c001f064:	5e                   	pop    esi
c001f065:	c3                   	ret    

c001f066 <Vm::fpuGet0()>:
c001f066:	31 c0                	xor    eax,eax
c001f068:	31 d2                	xor    edx,edx
c001f06a:	c3                   	ret    

c001f06b <Vm::fpuGet1()>:
c001f06b:	b8 01 00 00 00       	mov    eax,0x1
c001f070:	31 d2                	xor    edx,edx
c001f072:	c3                   	ret    

c001f073 <Vm::fpuGetPi()>:
c001f073:	b8 03 00 00 00       	mov    eax,0x3
c001f078:	31 d2                	xor    edx,edx
c001f07a:	c3                   	ret    

c001f07b <Vm::fpuGetLog2E()>:
c001f07b:	83 ec 18             	sub    esp,0x18
c001f07e:	68 9c bc 02 c0       	push   0xc002bc9c
c001f083:	e8 4d ad ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f088:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f08d:	31 d2                	xor    edx,edx
c001f08f:	83 c4 1c             	add    esp,0x1c
c001f092:	c3                   	ret    

c001f093 <Vm::fpuGetLogE2()>:
c001f093:	83 ec 18             	sub    esp,0x18
c001f096:	68 a8 bc 02 c0       	push   0xc002bca8
c001f09b:	e8 35 ad ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f0a0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0a5:	31 d2                	xor    edx,edx
c001f0a7:	83 c4 1c             	add    esp,0x1c
c001f0aa:	c3                   	ret    

c001f0ab <Vm::fpuGetLog210()>:
c001f0ab:	83 ec 18             	sub    esp,0x18
c001f0ae:	68 b4 bc 02 c0       	push   0xc002bcb4
c001f0b3:	e8 1d ad ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f0b8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0bd:	31 d2                	xor    edx,edx
c001f0bf:	83 c4 1c             	add    esp,0x1c
c001f0c2:	c3                   	ret    

c001f0c3 <Vm::fpuGetLog102()>:
c001f0c3:	83 ec 18             	sub    esp,0x18
c001f0c6:	68 c1 bc 02 c0       	push   0xc002bcc1
c001f0cb:	e8 05 ad ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f0d0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0d5:	31 d2                	xor    edx,edx
c001f0d7:	83 c4 1c             	add    esp,0x1c
c001f0da:	c3                   	ret    

c001f0db <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f0db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0df:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f0e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0e7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f0eb:	0f 92 c0             	setb   al
c001f0ee:	c3                   	ret    

c001f0ef <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f0ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f0fb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f0ff:	09 c2                	or     edx,eax
c001f101:	0f 94 c0             	sete   al
c001f104:	c3                   	ret    

c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f105:	57                   	push   edi
c001f106:	56                   	push   esi
c001f107:	53                   	push   ebx
c001f108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f10c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f110:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f114:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f118:	57                   	push   edi
c001f119:	56                   	push   esi
c001f11a:	53                   	push   ebx
c001f11b:	51                   	push   ecx
c001f11c:	e8 ce ff ff ff       	call   c001f0ef <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	88 c2                	mov    dl,al
c001f126:	31 c0                	xor    eax,eax
c001f128:	84 d2                	test   dl,dl
c001f12a:	75 0c                	jne    c001f138 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f12c:	57                   	push   edi
c001f12d:	56                   	push   esi
c001f12e:	53                   	push   ebx
c001f12f:	51                   	push   ecx
c001f130:	e8 a6 ff ff ff       	call   c001f0db <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f135:	83 c4 10             	add    esp,0x10
c001f138:	83 e0 01             	and    eax,0x1
c001f13b:	5b                   	pop    ebx
c001f13c:	88 c1                	mov    cl,al
c001f13e:	83 e2 01             	and    edx,0x1
c001f141:	a0 41 0e 03 c0       	mov    al,ds:0xc0030e41
c001f146:	c1 e2 06             	shl    edx,0x6
c001f149:	83 e0 ba             	and    eax,0xffffffba
c001f14c:	5e                   	pop    esi
c001f14d:	09 c8                	or     eax,ecx
c001f14f:	5f                   	pop    edi
c001f150:	09 d0                	or     eax,edx
c001f152:	a2 41 0e 03 c0       	mov    ds:0xc0030e41,al
c001f157:	c3                   	ret    

c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f15c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f160:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f164:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f168:	c3                   	ret    

c001f169 <Vm::fpuAbs(unsigned long long)>:
c001f169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f16d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f171:	c3                   	ret    

c001f172 <Vm::fpuChs(unsigned long long)>:
c001f172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f176:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f17a:	f7 d8                	neg    eax
c001f17c:	83 d2 00             	adc    edx,0x0
c001f17f:	f7 da                	neg    edx
c001f181:	c3                   	ret    

c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f182:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f186:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f18b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f18f:	eb c7                	jmp    c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f191:	53                   	push   ebx
c001f192:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f19a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f19e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1a2:	0f af ca             	imul   ecx,edx
c001f1a5:	0f af d8             	imul   ebx,eax
c001f1a8:	f7 e2                	mul    edx
c001f1aa:	01 d9                	add    ecx,ebx
c001f1ac:	5b                   	pop    ebx
c001f1ad:	01 ca                	add    edx,ecx
c001f1af:	c3                   	ret    

c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c3:	e8 dc 74 00 00       	call   c00266a4 <__udivdi3>
c001f1c8:	83 c4 1c             	add    esp,0x1c
c001f1cb:	c3                   	ret    

c001f1cc <Vm::fpuSquare(unsigned long long)>:
c001f1cc:	50                   	push   eax
c001f1cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1d5:	52                   	push   edx
c001f1d6:	50                   	push   eax
c001f1d7:	52                   	push   edx
c001f1d8:	50                   	push   eax
c001f1d9:	e8 b3 ff ff ff       	call   c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f1de:	83 c4 14             	add    esp,0x14
c001f1e1:	c3                   	ret    

c001f1e2 <Vm::fpuGetReg(int)>:
c001f1e2:	83 ec 0c             	sub    esp,0xc
c001f1e5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f1ea:	76 10                	jbe    c001f1fc <Vm::fpuGetReg(int)+0x1a>
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	68 ce bc 02 c0       	push   0xc002bcce
c001f1f4:	e8 dc ab ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f1f9:	83 c4 10             	add    esp,0x10
c001f1fc:	a0 41 0e 03 c0       	mov    al,ds:0xc0030e41
c001f201:	b9 08 00 00 00       	mov    ecx,0x8
c001f206:	c0 e8 03             	shr    al,0x3
c001f209:	83 e0 07             	and    eax,0x7
c001f20c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f210:	99                   	cdq    
c001f211:	f7 f9                	idiv   ecx
c001f213:	8b 04 d5 44 0e 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf1bc]
c001f21a:	8b 14 d5 48 0e 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf1b8]
c001f221:	83 c4 0c             	add    esp,0xc
c001f224:	c3                   	ret    

c001f225 <Vm::fpuSetReg(int, unsigned long long)>:
c001f225:	57                   	push   edi
c001f226:	56                   	push   esi
c001f227:	52                   	push   edx
c001f228:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f22c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f230:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f235:	76 10                	jbe    c001f247 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	68 e1 bc 02 c0       	push   0xc002bce1
c001f23f:	e8 91 ab ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c001f244:	83 c4 10             	add    esp,0x10
c001f247:	a0 41 0e 03 c0       	mov    al,ds:0xc0030e41
c001f24c:	b9 08 00 00 00       	mov    ecx,0x8
c001f251:	c0 e8 03             	shr    al,0x3
c001f254:	83 e0 07             	and    eax,0x7
c001f257:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f25b:	99                   	cdq    
c001f25c:	f7 f9                	idiv   ecx
c001f25e:	89 34 d5 44 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf1bc],esi
c001f265:	89 3c d5 48 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf1b8],edi
c001f26c:	58                   	pop    eax
c001f26d:	5e                   	pop    esi
c001f26e:	5f                   	pop    edi
c001f26f:	c3                   	ret    

c001f270 <Vm::fpuPush(unsigned long long)>:
c001f270:	a0 41 0e 03 c0       	mov    al,ds:0xc0030e41
c001f275:	c0 e8 03             	shr    al,0x3
c001f278:	83 e0 07             	and    eax,0x7
c001f27b:	83 c0 07             	add    eax,0x7
c001f27e:	88 c2                	mov    dl,al
c001f280:	83 e0 07             	and    eax,0x7
c001f283:	83 e2 07             	and    edx,0x7
c001f286:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f28d:	8a 15 41 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e41
c001f293:	83 e2 c7             	and    edx,0xffffffc7
c001f296:	09 ca                	or     edx,ecx
c001f298:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f29c:	88 15 41 0e 03 c0    	mov    BYTE PTR ds:0xc0030e41,dl
c001f2a2:	89 0c c5 48 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1b8],ecx
c001f2a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2ad:	89 14 c5 44 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1bc],edx
c001f2b4:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001f2b9:	83 f8 08             	cmp    eax,0x8
c001f2bc:	75 08                	jne    c001f2c6 <Vm::fpuPush(unsigned long long)+0x56>
c001f2be:	80 0d 40 0e 03 c0 40 	or     BYTE PTR ds:0xc0030e40,0x40
c001f2c5:	c3                   	ret    
c001f2c6:	40                   	inc    eax
c001f2c7:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001f2cc:	c3                   	ret    

c001f2cd <Vm::fpuPop()>:
c001f2cd:	8a 0d 41 0e 03 c0    	mov    cl,BYTE PTR ds:0xc0030e41
c001f2d3:	53                   	push   ebx
c001f2d4:	c0 e9 03             	shr    cl,0x3
c001f2d7:	8a 1d 41 0e 03 c0    	mov    bl,BYTE PTR ds:0xc0030e41
c001f2dd:	83 e1 07             	and    ecx,0x7
c001f2e0:	83 e3 c7             	and    ebx,0xffffffc7
c001f2e3:	8b 04 cd 44 0e 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf1bc]
c001f2ea:	8b 14 cd 48 0e 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf1b8]
c001f2f1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f2f8:	83 e1 38             	and    ecx,0x38
c001f2fb:	09 d9                	or     ecx,ebx
c001f2fd:	88 0d 41 0e 03 c0    	mov    BYTE PTR ds:0xc0030e41,cl
c001f303:	8b 0d 84 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e84
c001f309:	85 c9                	test   ecx,ecx
c001f30b:	74 09                	je     c001f316 <Vm::fpuPop()+0x49>
c001f30d:	49                   	dec    ecx
c001f30e:	89 0d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,ecx
c001f314:	eb 07                	jmp    c001f31d <Vm::fpuPop()+0x50>
c001f316:	80 0d 40 0e 03 c0 40 	or     BYTE PTR ds:0xc0030e40,0x40
c001f31d:	5b                   	pop    ebx
c001f31e:	c3                   	ret    

c001f31f <Vm::x87Handler(regs*)>:
c001f31f:	55                   	push   ebp
c001f320:	57                   	push   edi
c001f321:	56                   	push   esi
c001f322:	53                   	push   ebx
c001f323:	83 ec 1c             	sub    esp,0x1c
c001f326:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f32a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f32f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f332:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f33a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f33e:	50                   	push   eax
c001f33f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f343:	50                   	push   eax
c001f344:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f348:	50                   	push   eax
c001f349:	53                   	push   ebx
c001f34a:	e8 9f a1 ff ff       	call   c00194ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f34f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	89 c6                	mov    esi,eax
c001f357:	80 fa d9             	cmp    dl,0xd9
c001f35a:	0f 85 52 01 00 00    	jne    c001f4b2 <Vm::x87Handler(regs*)+0x193>
c001f360:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f364:	8d 50 20             	lea    edx,[eax+0x20]
c001f367:	80 fa 0e             	cmp    dl,0xe
c001f36a:	0f 87 86 00 00 00    	ja     c001f3f6 <Vm::x87Handler(regs*)+0xd7>
c001f370:	0f b6 d2             	movzx  edx,dl
c001f373:	ff 24 95 f4 bc 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd430c]
c001f37a:	e8 e7 fc ff ff       	call   c001f066 <Vm::fpuGet0()>
c001f37f:	eb 05                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f381:	e8 e5 fc ff ff       	call   c001f06b <Vm::fpuGet1()>
c001f386:	57                   	push   edi
c001f387:	57                   	push   edi
c001f388:	52                   	push   edx
c001f389:	50                   	push   eax
c001f38a:	e8 e1 fe ff ff       	call   c001f270 <Vm::fpuPush(unsigned long long)>
c001f38f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	b0 01                	mov    al,0x1
c001f398:	e9 e3 09 00 00       	jmp    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001f39d:	83 ec 0c             	sub    esp,0xc
c001f3a0:	6a 00                	push   0x0
c001f3a2:	e8 3b fe ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f3a7:	59                   	pop    ecx
c001f3a8:	5e                   	pop    esi
c001f3a9:	52                   	push   edx
c001f3aa:	50                   	push   eax
c001f3ab:	e8 c2 fd ff ff       	call   c001f172 <Vm::fpuChs(unsigned long long)>
c001f3b0:	eb 13                	jmp    c001f3c5 <Vm::x87Handler(regs*)+0xa6>
c001f3b2:	83 ec 0c             	sub    esp,0xc
c001f3b5:	6a 00                	push   0x0
c001f3b7:	e8 26 fe ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f3bc:	5f                   	pop    edi
c001f3bd:	5d                   	pop    ebp
c001f3be:	52                   	push   edx
c001f3bf:	50                   	push   eax
c001f3c0:	e8 a4 fd ff ff       	call   c001f169 <Vm::fpuAbs(unsigned long long)>
c001f3c5:	83 c4 0c             	add    esp,0xc
c001f3c8:	52                   	push   edx
c001f3c9:	50                   	push   eax
c001f3ca:	6a 00                	push   0x0
c001f3cc:	e8 54 fe ff ff       	call   c001f225 <Vm::fpuSetReg(int, unsigned long long)>
c001f3d1:	eb bc                	jmp    c001f38f <Vm::x87Handler(regs*)+0x70>
c001f3d3:	e8 d3 fc ff ff       	call   c001f0ab <Vm::fpuGetLog210()>
c001f3d8:	eb ac                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f3da:	e8 9c fc ff ff       	call   c001f07b <Vm::fpuGetLog2E()>
c001f3df:	eb a5                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f3e1:	e8 8d fc ff ff       	call   c001f073 <Vm::fpuGetPi()>
c001f3e6:	eb 9e                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f3e8:	e8 d6 fc ff ff       	call   c001f0c3 <Vm::fpuGetLog102()>
c001f3ed:	eb 97                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f3ef:	e8 9f fc ff ff       	call   c001f093 <Vm::fpuGetLogE2()>
c001f3f4:	eb 90                	jmp    c001f386 <Vm::x87Handler(regs*)+0x67>
c001f3f6:	8d 50 40             	lea    edx,[eax+0x40]
c001f3f9:	80 fa 07             	cmp    dl,0x7
c001f3fc:	77 15                	ja     c001f413 <Vm::x87Handler(regs*)+0xf4>
c001f3fe:	83 ec 0c             	sub    esp,0xc
c001f401:	2d c0 00 00 00       	sub    eax,0xc0
c001f406:	50                   	push   eax
c001f407:	e8 d6 fd ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f40c:	59                   	pop    ecx
c001f40d:	5e                   	pop    esi
c001f40e:	e9 75 ff ff ff       	jmp    c001f388 <Vm::x87Handler(regs*)+0x69>
c001f413:	8d 50 38             	lea    edx,[eax+0x38]
c001f416:	80 fa 07             	cmp    dl,0x7
c001f419:	77 3c                	ja     c001f457 <Vm::x87Handler(regs*)+0x138>
c001f41b:	83 ec 0c             	sub    esp,0xc
c001f41e:	2d c8 00 00 00       	sub    eax,0xc8
c001f423:	50                   	push   eax
c001f424:	e8 b9 fd ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f429:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f430:	89 c6                	mov    esi,eax
c001f432:	89 d7                	mov    edi,edx
c001f434:	e8 a9 fd ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f439:	83 c4 0c             	add    esp,0xc
c001f43c:	52                   	push   edx
c001f43d:	50                   	push   eax
c001f43e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f442:	2d c8 00 00 00       	sub    eax,0xc8
c001f447:	50                   	push   eax
c001f448:	e8 d8 fd ff ff       	call   c001f225 <Vm::fpuSetReg(int, unsigned long long)>
c001f44d:	83 c4 0c             	add    esp,0xc
c001f450:	57                   	push   edi
c001f451:	56                   	push   esi
c001f452:	e9 73 ff ff ff       	jmp    c001f3ca <Vm::x87Handler(regs*)+0xab>
c001f457:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f45b:	84 d2                	test   dl,dl
c001f45d:	75 0f                	jne    c001f46e <Vm::x87Handler(regs*)+0x14f>
c001f45f:	83 ec 0c             	sub    esp,0xc
c001f462:	ff 36                	push   DWORD PTR [esi]
c001f464:	e8 c8 fa ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001f469:	e9 bf 00 00 00       	jmp    c001f52d <Vm::x87Handler(regs*)+0x20e>
c001f46e:	80 fa 03             	cmp    dl,0x3
c001f471:	75 13                	jne    c001f486 <Vm::x87Handler(regs*)+0x167>
c001f473:	e8 55 fe ff ff       	call   c001f2cd <Vm::fpuPop()>
c001f478:	55                   	push   ebp
c001f479:	55                   	push   ebp
c001f47a:	52                   	push   edx
c001f47b:	50                   	push   eax
c001f47c:	e8 4c fa ff ff       	call   c001eecd <Vm::fpuInternalTo32(unsigned long long)>
c001f481:	e9 88 00 00 00       	jmp    c001f50e <Vm::x87Handler(regs*)+0x1ef>
c001f486:	80 fa 05             	cmp    dl,0x5
c001f489:	75 0e                	jne    c001f499 <Vm::x87Handler(regs*)+0x17a>
c001f48b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f48e:	66 a3 42 0e 03 c0    	mov    ds:0xc0030e42,ax
c001f494:	e9 df 00 00 00       	jmp    c001f578 <Vm::x87Handler(regs*)+0x259>
c001f499:	31 c0                	xor    eax,eax
c001f49b:	80 fa 07             	cmp    dl,0x7
c001f49e:	0f 85 dc 08 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001f4a4:	66 a1 42 0e 03 c0    	mov    ax,ds:0xc0030e42
c001f4aa:	66 89 06             	mov    WORD PTR [esi],ax
c001f4ad:	e9 c6 00 00 00       	jmp    c001f578 <Vm::x87Handler(regs*)+0x259>
c001f4b2:	80 fa d8             	cmp    dl,0xd8
c001f4b5:	0f 84 c9 00 00 00    	je     c001f584 <Vm::x87Handler(regs*)+0x265>
c001f4bb:	80 fa dc             	cmp    dl,0xdc
c001f4be:	0f 84 0d 02 00 00    	je     c001f6d1 <Vm::x87Handler(regs*)+0x3b2>
c001f4c4:	80 fa de             	cmp    dl,0xde
c001f4c7:	0f 84 cd 02 00 00    	je     c001f79a <Vm::x87Handler(regs*)+0x47b>
c001f4cd:	80 fa dd             	cmp    dl,0xdd
c001f4d0:	0f 84 5f 04 00 00    	je     c001f935 <Vm::x87Handler(regs*)+0x616>
c001f4d6:	80 fa da             	cmp    dl,0xda
c001f4d9:	0f 84 24 05 00 00    	je     c001fa03 <Vm::x87Handler(regs*)+0x6e4>
c001f4df:	80 fa df             	cmp    dl,0xdf
c001f4e2:	0f 84 68 05 00 00    	je     c001fa50 <Vm::x87Handler(regs*)+0x731>
c001f4e8:	31 c0                	xor    eax,eax
c001f4ea:	80 fa db             	cmp    dl,0xdb
c001f4ed:	0f 85 8d 08 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001f4f3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4f7:	80 fa 03             	cmp    dl,0x3
c001f4fa:	0f 85 70 06 00 00    	jne    c001fb70 <Vm::x87Handler(regs*)+0x851>
c001f500:	e8 c8 fd ff ff       	call   c001f2cd <Vm::fpuPop()>
c001f505:	55                   	push   ebp
c001f506:	55                   	push   ebp
c001f507:	52                   	push   edx
c001f508:	50                   	push   eax
c001f509:	e8 71 fa ff ff       	call   c001ef7f <Vm::fpuFloatToLong(unsigned long long)>
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	89 06                	mov    DWORD PTR [esi],eax
c001f513:	eb 63                	jmp    c001f578 <Vm::x87Handler(regs*)+0x259>
c001f515:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f519:	84 d2                	test   dl,dl
c001f51b:	0f 85 e6 05 00 00    	jne    c001fb07 <Vm::x87Handler(regs*)+0x7e8>
c001f521:	57                   	push   edi
c001f522:	57                   	push   edi
c001f523:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f526:	ff 36                	push   DWORD PTR [esi]
c001f528:	e8 49 fa ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001f52d:	5e                   	pop    esi
c001f52e:	5f                   	pop    edi
c001f52f:	52                   	push   edx
c001f530:	50                   	push   eax
c001f531:	e8 3a fd ff ff       	call   c001f270 <Vm::fpuPush(unsigned long long)>
c001f536:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f53a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f53d:	e9 51 fe ff ff       	jmp    c001f393 <Vm::x87Handler(regs*)+0x74>
c001f542:	80 fa 03             	cmp    dl,0x3
c001f545:	0f 85 d7 06 00 00    	jne    c001fc22 <Vm::x87Handler(regs*)+0x903>
c001f54b:	57                   	push   edi
c001f54c:	57                   	push   edi
c001f54d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f550:	ff 36                	push   DWORD PTR [esi]
c001f552:	e8 1f fa ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001f557:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f55e:	89 c6                	mov    esi,eax
c001f560:	89 d7                	mov    edi,edx
c001f562:	e8 7b fc ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f567:	57                   	push   edi
c001f568:	56                   	push   esi
c001f569:	52                   	push   edx
c001f56a:	50                   	push   eax
c001f56b:	e8 95 fb ff ff       	call   c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f570:	83 c4 20             	add    esp,0x20
c001f573:	e8 55 fd ff ff       	call   c001f2cd <Vm::fpuPop()>
c001f578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f57c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f57f:	e9 12 fe ff ff       	jmp    c001f396 <Vm::x87Handler(regs*)+0x77>
c001f584:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f588:	8d 50 40             	lea    edx,[eax+0x40]
c001f58b:	80 fa 07             	cmp    dl,0x7
c001f58e:	77 29                	ja     c001f5b9 <Vm::x87Handler(regs*)+0x29a>
c001f590:	83 ec 0c             	sub    esp,0xc
c001f593:	2d c0 00 00 00       	sub    eax,0xc0
c001f598:	50                   	push   eax
c001f599:	e8 44 fc ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f59e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a5:	89 c6                	mov    esi,eax
c001f5a7:	89 d7                	mov    edi,edx
c001f5a9:	e8 34 fc ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f5ae:	57                   	push   edi
c001f5af:	56                   	push   esi
c001f5b0:	52                   	push   edx
c001f5b1:	50                   	push   eax
c001f5b2:	e8 a1 fb ff ff       	call   c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5b7:	eb 2f                	jmp    c001f5e8 <Vm::x87Handler(regs*)+0x2c9>
c001f5b9:	8d 50 38             	lea    edx,[eax+0x38]
c001f5bc:	80 fa 07             	cmp    dl,0x7
c001f5bf:	77 2f                	ja     c001f5f0 <Vm::x87Handler(regs*)+0x2d1>
c001f5c1:	83 ec 0c             	sub    esp,0xc
c001f5c4:	2d c8 00 00 00       	sub    eax,0xc8
c001f5c9:	50                   	push   eax
c001f5ca:	e8 13 fc ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f5cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5d6:	89 c6                	mov    esi,eax
c001f5d8:	89 d7                	mov    edi,edx
c001f5da:	e8 03 fc ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f5df:	57                   	push   edi
c001f5e0:	56                   	push   esi
c001f5e1:	52                   	push   edx
c001f5e2:	50                   	push   eax
c001f5e3:	e8 a9 fb ff ff       	call   c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5e8:	83 c4 1c             	add    esp,0x1c
c001f5eb:	e9 d8 fd ff ff       	jmp    c001f3c8 <Vm::x87Handler(regs*)+0xa9>
c001f5f0:	8d 50 30             	lea    edx,[eax+0x30]
c001f5f3:	80 fa 07             	cmp    dl,0x7
c001f5f6:	77 0d                	ja     c001f605 <Vm::x87Handler(regs*)+0x2e6>
c001f5f8:	83 ec 0c             	sub    esp,0xc
c001f5fb:	2d d0 00 00 00       	sub    eax,0xd0
c001f600:	e9 99 03 00 00       	jmp    c001f99e <Vm::x87Handler(regs*)+0x67f>
c001f605:	8d 50 28             	lea    edx,[eax+0x28]
c001f608:	80 fa 07             	cmp    dl,0x7
c001f60b:	77 0d                	ja     c001f61a <Vm::x87Handler(regs*)+0x2fb>
c001f60d:	83 ec 0c             	sub    esp,0xc
c001f610:	2d d8 00 00 00       	sub    eax,0xd8
c001f615:	e9 c0 03 00 00       	jmp    c001f9da <Vm::x87Handler(regs*)+0x6bb>
c001f61a:	8d 50 20             	lea    edx,[eax+0x20]
c001f61d:	80 fa 07             	cmp    dl,0x7
c001f620:	77 1b                	ja     c001f63d <Vm::x87Handler(regs*)+0x31e>
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	2d e0 00 00 00       	sub    eax,0xe0
c001f62a:	50                   	push   eax
c001f62b:	e8 b2 fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f630:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f637:	89 c6                	mov    esi,eax
c001f639:	89 d7                	mov    edi,edx
c001f63b:	eb 22                	jmp    c001f65f <Vm::x87Handler(regs*)+0x340>
c001f63d:	8d 50 18             	lea    edx,[eax+0x18]
c001f640:	80 fa 07             	cmp    dl,0x7
c001f643:	77 2d                	ja     c001f672 <Vm::x87Handler(regs*)+0x353>
c001f645:	83 ec 0c             	sub    esp,0xc
c001f648:	6a 00                	push   0x0
c001f64a:	e8 93 fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f64f:	89 c6                	mov    esi,eax
c001f651:	89 d7                	mov    edi,edx
c001f653:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f657:	2d e8 00 00 00       	sub    eax,0xe8
c001f65c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f65f:	e8 7e fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f664:	57                   	push   edi
c001f665:	56                   	push   esi
c001f666:	52                   	push   edx
c001f667:	50                   	push   eax
c001f668:	e8 15 fb ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f66d:	e9 76 ff ff ff       	jmp    c001f5e8 <Vm::x87Handler(regs*)+0x2c9>
c001f672:	8d 50 10             	lea    edx,[eax+0x10]
c001f675:	80 fa 07             	cmp    dl,0x7
c001f678:	77 1b                	ja     c001f695 <Vm::x87Handler(regs*)+0x376>
c001f67a:	83 ec 0c             	sub    esp,0xc
c001f67d:	2d f0 00 00 00       	sub    eax,0xf0
c001f682:	50                   	push   eax
c001f683:	e8 5a fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f688:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f68f:	89 c6                	mov    esi,eax
c001f691:	89 d7                	mov    edi,edx
c001f693:	eb 22                	jmp    c001f6b7 <Vm::x87Handler(regs*)+0x398>
c001f695:	3c f7                	cmp    al,0xf7
c001f697:	0f 86 d1 03 00 00    	jbe    c001fa6e <Vm::x87Handler(regs*)+0x74f>
c001f69d:	83 ec 0c             	sub    esp,0xc
c001f6a0:	6a 00                	push   0x0
c001f6a2:	e8 3b fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f6a7:	89 c6                	mov    esi,eax
c001f6a9:	89 d7                	mov    edi,edx
c001f6ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6af:	2d f8 00 00 00       	sub    eax,0xf8
c001f6b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6b7:	e8 26 fb ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f6bc:	57                   	push   edi
c001f6bd:	56                   	push   esi
c001f6be:	52                   	push   edx
c001f6bf:	50                   	push   eax
c001f6c0:	e8 eb fa ff ff       	call   c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6c5:	83 c4 1c             	add    esp,0x1c
c001f6c8:	52                   	push   edx
c001f6c9:	50                   	push   eax
c001f6ca:	6a 00                	push   0x0
c001f6cc:	e9 51 02 00 00       	jmp    c001f922 <Vm::x87Handler(regs*)+0x603>
c001f6d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d5:	8d 50 40             	lea    edx,[eax+0x40]
c001f6d8:	80 fa 07             	cmp    dl,0x7
c001f6db:	77 37                	ja     c001f714 <Vm::x87Handler(regs*)+0x3f5>
c001f6dd:	83 ec 0c             	sub    esp,0xc
c001f6e0:	2d c0 00 00 00       	sub    eax,0xc0
c001f6e5:	50                   	push   eax
c001f6e6:	e8 f7 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f6eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f2:	89 c6                	mov    esi,eax
c001f6f4:	89 d7                	mov    edi,edx
c001f6f6:	e8 e7 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f6fb:	57                   	push   edi
c001f6fc:	56                   	push   esi
c001f6fd:	52                   	push   edx
c001f6fe:	50                   	push   eax
c001f6ff:	e8 54 fa ff ff       	call   c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f704:	83 c4 1c             	add    esp,0x1c
c001f707:	52                   	push   edx
c001f708:	50                   	push   eax
c001f709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70d:	2d c0 00 00 00       	sub    eax,0xc0
c001f712:	eb 3d                	jmp    c001f751 <Vm::x87Handler(regs*)+0x432>
c001f714:	8d 50 38             	lea    edx,[eax+0x38]
c001f717:	80 fa 07             	cmp    dl,0x7
c001f71a:	77 3b                	ja     c001f757 <Vm::x87Handler(regs*)+0x438>
c001f71c:	83 ec 0c             	sub    esp,0xc
c001f71f:	2d c8 00 00 00       	sub    eax,0xc8
c001f724:	50                   	push   eax
c001f725:	e8 b8 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f72a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f731:	89 c6                	mov    esi,eax
c001f733:	89 d7                	mov    edi,edx
c001f735:	e8 a8 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f73a:	57                   	push   edi
c001f73b:	56                   	push   esi
c001f73c:	52                   	push   edx
c001f73d:	50                   	push   eax
c001f73e:	e8 4e fa ff ff       	call   c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f743:	83 c4 1c             	add    esp,0x1c
c001f746:	52                   	push   edx
c001f747:	50                   	push   eax
c001f748:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f74c:	2d c8 00 00 00       	sub    eax,0xc8
c001f751:	50                   	push   eax
c001f752:	e9 75 fc ff ff       	jmp    c001f3cc <Vm::x87Handler(regs*)+0xad>
c001f757:	83 c0 18             	add    eax,0x18
c001f75a:	3c 07                	cmp    al,0x7
c001f75c:	0f 87 3b 04 00 00    	ja     c001fb9d <Vm::x87Handler(regs*)+0x87e>
c001f762:	83 ec 0c             	sub    esp,0xc
c001f765:	6a 00                	push   0x0
c001f767:	e8 76 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f76c:	89 c6                	mov    esi,eax
c001f76e:	89 d7                	mov    edi,edx
c001f770:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f774:	2d e8 00 00 00       	sub    eax,0xe8
c001f779:	89 04 24             	mov    DWORD PTR [esp],eax
c001f77c:	e8 61 fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f781:	57                   	push   edi
c001f782:	56                   	push   esi
c001f783:	52                   	push   edx
c001f784:	50                   	push   eax
c001f785:	e8 f8 f9 ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f78a:	83 c4 1c             	add    esp,0x1c
c001f78d:	52                   	push   edx
c001f78e:	50                   	push   eax
c001f78f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f793:	2d e8 00 00 00       	sub    eax,0xe8
c001f798:	eb b7                	jmp    c001f751 <Vm::x87Handler(regs*)+0x432>
c001f79a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f79e:	8d 50 40             	lea    edx,[eax+0x40]
c001f7a1:	80 fa 07             	cmp    dl,0x7
c001f7a4:	77 3a                	ja     c001f7e0 <Vm::x87Handler(regs*)+0x4c1>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	2d c0 00 00 00       	sub    eax,0xc0
c001f7ae:	50                   	push   eax
c001f7af:	e8 2e fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f7b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7bb:	89 c6                	mov    esi,eax
c001f7bd:	89 d7                	mov    edi,edx
c001f7bf:	e8 1e fa ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f7c4:	57                   	push   edi
c001f7c5:	56                   	push   esi
c001f7c6:	52                   	push   edx
c001f7c7:	50                   	push   eax
c001f7c8:	e8 8b f9 ff ff       	call   c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f7cd:	83 c4 1c             	add    esp,0x1c
c001f7d0:	52                   	push   edx
c001f7d1:	50                   	push   eax
c001f7d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d6:	2d c0 00 00 00       	sub    eax,0xc0
c001f7db:	e9 9e 01 00 00       	jmp    c001f97e <Vm::x87Handler(regs*)+0x65f>
c001f7e0:	8d 50 20             	lea    edx,[eax+0x20]
c001f7e3:	80 fa 07             	cmp    dl,0x7
c001f7e6:	77 3a                	ja     c001f822 <Vm::x87Handler(regs*)+0x503>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	2d e0 00 00 00       	sub    eax,0xe0
c001f7f0:	50                   	push   eax
c001f7f1:	e8 ec f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f7f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fd:	89 c6                	mov    esi,eax
c001f7ff:	89 d7                	mov    edi,edx
c001f801:	e8 dc f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f806:	57                   	push   edi
c001f807:	56                   	push   esi
c001f808:	52                   	push   edx
c001f809:	50                   	push   eax
c001f80a:	e8 73 f9 ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f80f:	83 c4 1c             	add    esp,0x1c
c001f812:	52                   	push   edx
c001f813:	50                   	push   eax
c001f814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f818:	2d e0 00 00 00       	sub    eax,0xe0
c001f81d:	e9 5c 01 00 00       	jmp    c001f97e <Vm::x87Handler(regs*)+0x65f>
c001f822:	8d 50 18             	lea    edx,[eax+0x18]
c001f825:	80 fa 07             	cmp    dl,0x7
c001f828:	77 3b                	ja     c001f865 <Vm::x87Handler(regs*)+0x546>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	6a 00                	push   0x0
c001f82f:	e8 ae f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f834:	89 c6                	mov    esi,eax
c001f836:	89 d7                	mov    edi,edx
c001f838:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83c:	2d e8 00 00 00       	sub    eax,0xe8
c001f841:	89 04 24             	mov    DWORD PTR [esp],eax
c001f844:	e8 99 f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f849:	57                   	push   edi
c001f84a:	56                   	push   esi
c001f84b:	52                   	push   edx
c001f84c:	50                   	push   eax
c001f84d:	e8 30 f9 ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f852:	83 c4 1c             	add    esp,0x1c
c001f855:	52                   	push   edx
c001f856:	50                   	push   eax
c001f857:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f85b:	2d e8 00 00 00       	sub    eax,0xe8
c001f860:	e9 19 01 00 00       	jmp    c001f97e <Vm::x87Handler(regs*)+0x65f>
c001f865:	8d 50 38             	lea    edx,[eax+0x38]
c001f868:	80 fa 07             	cmp    dl,0x7
c001f86b:	77 37                	ja     c001f8a4 <Vm::x87Handler(regs*)+0x585>
c001f86d:	83 ec 0c             	sub    esp,0xc
c001f870:	2d c8 00 00 00       	sub    eax,0xc8
c001f875:	50                   	push   eax
c001f876:	e8 67 f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f87b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f882:	89 c6                	mov    esi,eax
c001f884:	89 d7                	mov    edi,edx
c001f886:	e8 57 f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f88b:	57                   	push   edi
c001f88c:	56                   	push   esi
c001f88d:	52                   	push   edx
c001f88e:	50                   	push   eax
c001f88f:	e8 fd f8 ff ff       	call   c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f894:	83 c4 1c             	add    esp,0x1c
c001f897:	52                   	push   edx
c001f898:	50                   	push   eax
c001f899:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89d:	2d c8 00 00 00       	sub    eax,0xc8
c001f8a2:	eb 7d                	jmp    c001f921 <Vm::x87Handler(regs*)+0x602>
c001f8a4:	3c f7                	cmp    al,0xf7
c001f8a6:	76 38                	jbe    c001f8e0 <Vm::x87Handler(regs*)+0x5c1>
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	6a 00                	push   0x0
c001f8ad:	e8 30 f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f8b2:	89 c6                	mov    esi,eax
c001f8b4:	89 d7                	mov    edi,edx
c001f8b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ba:	2d f8 00 00 00       	sub    eax,0xf8
c001f8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8c2:	e8 1b f9 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f8c7:	57                   	push   edi
c001f8c8:	56                   	push   esi
c001f8c9:	52                   	push   edx
c001f8ca:	50                   	push   eax
c001f8cb:	e8 e0 f8 ff ff       	call   c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8d0:	83 c4 1c             	add    esp,0x1c
c001f8d3:	52                   	push   edx
c001f8d4:	50                   	push   eax
c001f8d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d9:	2d f8 00 00 00       	sub    eax,0xf8
c001f8de:	eb 41                	jmp    c001f921 <Vm::x87Handler(regs*)+0x602>
c001f8e0:	8d 50 10             	lea    edx,[eax+0x10]
c001f8e3:	80 fa 07             	cmp    dl,0x7
c001f8e6:	0f 87 5a 01 00 00    	ja     c001fa46 <Vm::x87Handler(regs*)+0x727>
c001f8ec:	83 ec 0c             	sub    esp,0xc
c001f8ef:	2d f0 00 00 00       	sub    eax,0xf0
c001f8f4:	50                   	push   eax
c001f8f5:	e8 e8 f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f8fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f901:	89 c6                	mov    esi,eax
c001f903:	89 d7                	mov    edi,edx
c001f905:	e8 d8 f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f90a:	57                   	push   edi
c001f90b:	56                   	push   esi
c001f90c:	52                   	push   edx
c001f90d:	50                   	push   eax
c001f90e:	e8 9d f8 ff ff       	call   c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f913:	83 c4 1c             	add    esp,0x1c
c001f916:	52                   	push   edx
c001f917:	50                   	push   eax
c001f918:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91c:	2d f0 00 00 00       	sub    eax,0xf0
c001f921:	50                   	push   eax
c001f922:	e8 fe f8 ff ff       	call   c001f225 <Vm::fpuSetReg(int, unsigned long long)>
c001f927:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f92b:	e8 9d f9 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001f930:	e9 5e fa ff ff       	jmp    c001f393 <Vm::x87Handler(regs*)+0x74>
c001f935:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f939:	8d 50 30             	lea    edx,[eax+0x30]
c001f93c:	80 fa 07             	cmp    dl,0x7
c001f93f:	77 1d                	ja     c001f95e <Vm::x87Handler(regs*)+0x63f>
c001f941:	83 ec 0c             	sub    esp,0xc
c001f944:	6a 00                	push   0x0
c001f946:	e8 97 f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f94b:	83 c4 0c             	add    esp,0xc
c001f94e:	52                   	push   edx
c001f94f:	50                   	push   eax
c001f950:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f954:	2d d0 00 00 00       	sub    eax,0xd0
c001f959:	e9 f3 fd ff ff       	jmp    c001f751 <Vm::x87Handler(regs*)+0x432>
c001f95e:	8d 50 28             	lea    edx,[eax+0x28]
c001f961:	80 fa 07             	cmp    dl,0x7
c001f964:	77 28                	ja     c001f98e <Vm::x87Handler(regs*)+0x66f>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	6a 00                	push   0x0
c001f96b:	e8 72 f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f970:	83 c4 0c             	add    esp,0xc
c001f973:	52                   	push   edx
c001f974:	50                   	push   eax
c001f975:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f979:	2d d8 00 00 00       	sub    eax,0xd8
c001f97e:	50                   	push   eax
c001f97f:	e8 a1 f8 ff ff       	call   c001f225 <Vm::fpuSetReg(int, unsigned long long)>
c001f984:	e8 44 f9 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001f989:	e9 01 fa ff ff       	jmp    c001f38f <Vm::x87Handler(regs*)+0x70>
c001f98e:	8d 50 20             	lea    edx,[eax+0x20]
c001f991:	80 fa 07             	cmp    dl,0x7
c001f994:	77 30                	ja     c001f9c6 <Vm::x87Handler(regs*)+0x6a7>
c001f996:	83 ec 0c             	sub    esp,0xc
c001f999:	2d e0 00 00 00       	sub    eax,0xe0
c001f99e:	50                   	push   eax
c001f99f:	e8 3e f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f9a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ab:	89 c6                	mov    esi,eax
c001f9ad:	89 d7                	mov    edi,edx
c001f9af:	e8 2e f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f9b4:	57                   	push   edi
c001f9b5:	56                   	push   esi
c001f9b6:	52                   	push   edx
c001f9b7:	50                   	push   eax
c001f9b8:	e8 48 f7 ff ff       	call   c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9c1:	e9 54 02 00 00       	jmp    c001fc1a <Vm::x87Handler(regs*)+0x8fb>
c001f9c6:	8d 50 18             	lea    edx,[eax+0x18]
c001f9c9:	80 fa 07             	cmp    dl,0x7
c001f9cc:	0f 87 43 fb ff ff    	ja     c001f515 <Vm::x87Handler(regs*)+0x1f6>
c001f9d2:	83 ec 0c             	sub    esp,0xc
c001f9d5:	2d e8 00 00 00       	sub    eax,0xe8
c001f9da:	50                   	push   eax
c001f9db:	e8 02 f8 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f9e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9e7:	89 c6                	mov    esi,eax
c001f9e9:	89 d7                	mov    edi,edx
c001f9eb:	e8 f2 f7 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001f9f0:	57                   	push   edi
c001f9f1:	56                   	push   esi
c001f9f2:	52                   	push   edx
c001f9f3:	50                   	push   eax
c001f9f4:	e8 0c f7 ff ff       	call   c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9f9:	83 c4 20             	add    esp,0x20
c001f9fc:	e8 cc f8 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001fa01:	eb 62                	jmp    c001fa65 <Vm::x87Handler(regs*)+0x746>
c001fa03:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa07:	0f 85 0f 01 00 00    	jne    c001fb1c <Vm::x87Handler(regs*)+0x7fd>
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	6a 01                	push   0x1
c001fa12:	e8 cb f7 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fa17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa1e:	89 c6                	mov    esi,eax
c001fa20:	89 d7                	mov    edi,edx
c001fa22:	e8 bb f7 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fa27:	57                   	push   edi
c001fa28:	56                   	push   esi
c001fa29:	52                   	push   edx
c001fa2a:	50                   	push   eax
c001fa2b:	e8 d5 f6 ff ff       	call   c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa30:	83 c4 20             	add    esp,0x20
c001fa33:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa37:	e8 91 f8 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001fa3c:	e8 8c f8 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001fa41:	e9 50 f9 ff ff       	jmp    c001f396 <Vm::x87Handler(regs*)+0x77>
c001fa46:	3c d9                	cmp    al,0xd9
c001fa48:	0f 85 b5 02 00 00    	jne    c001fd03 <Vm::x87Handler(regs*)+0x9e4>
c001fa4e:	eb bd                	jmp    c001fa0d <Vm::x87Handler(regs*)+0x6ee>
c001fa50:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa54:	0f 85 ea 02 00 00    	jne    c001fd44 <Vm::x87Handler(regs*)+0xa25>
c001fa5a:	0f b7 05 40 0e 03 c0 	movzx  eax,WORD PTR ds:0xc0030e40
c001fa61:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fa65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa69:	e9 28 f9 ff ff       	jmp    c001f396 <Vm::x87Handler(regs*)+0x77>
c001fa6e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa72:	84 d2                	test   dl,dl
c001fa74:	75 0f                	jne    c001fa85 <Vm::x87Handler(regs*)+0x766>
c001fa76:	83 ec 0c             	sub    esp,0xc
c001fa79:	ff 36                	push   DWORD PTR [esi]
c001fa7b:	e8 b1 f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001fa80:	e9 2c 01 00 00       	jmp    c001fbb1 <Vm::x87Handler(regs*)+0x892>
c001fa85:	80 fa 01             	cmp    dl,0x1
c001fa88:	75 0f                	jne    c001fa99 <Vm::x87Handler(regs*)+0x77a>
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	ff 36                	push   DWORD PTR [esi]
c001fa8f:	e8 9d f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001fa94:	e9 81 02 00 00       	jmp    c001fd1a <Vm::x87Handler(regs*)+0x9fb>
c001fa99:	80 fa 04             	cmp    dl,0x4
c001fa9c:	75 0f                	jne    c001faad <Vm::x87Handler(regs*)+0x78e>
c001fa9e:	83 ec 0c             	sub    esp,0xc
c001faa1:	ff 36                	push   DWORD PTR [esi]
c001faa3:	e8 89 f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001faa8:	e9 86 01 00 00       	jmp    c001fc33 <Vm::x87Handler(regs*)+0x914>
c001faad:	80 fa 05             	cmp    dl,0x5
c001fab0:	75 1b                	jne    c001facd <Vm::x87Handler(regs*)+0x7ae>
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	6a 00                	push   0x0
c001fab7:	e8 26 f7 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fabc:	89 c7                	mov    edi,eax
c001fabe:	89 d5                	mov    ebp,edx
c001fac0:	58                   	pop    eax
c001fac1:	ff 36                	push   DWORD PTR [esi]
c001fac3:	e8 69 f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001fac8:	e9 a3 01 00 00       	jmp    c001fc70 <Vm::x87Handler(regs*)+0x951>
c001facd:	80 fa 06             	cmp    dl,0x6
c001fad0:	75 0f                	jne    c001fae1 <Vm::x87Handler(regs*)+0x7c2>
c001fad2:	83 ec 0c             	sub    esp,0xc
c001fad5:	ff 36                	push   DWORD PTR [esi]
c001fad7:	e8 55 f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001fadc:	e9 ae 01 00 00       	jmp    c001fc8f <Vm::x87Handler(regs*)+0x970>
c001fae1:	31 c0                	xor    eax,eax
c001fae3:	80 fa 07             	cmp    dl,0x7
c001fae6:	0f 85 94 02 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	6a 00                	push   0x0
c001faf1:	e8 ec f6 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001faf6:	89 c7                	mov    edi,eax
c001faf8:	89 d5                	mov    ebp,edx
c001fafa:	58                   	pop    eax
c001fafb:	ff 36                	push   DWORD PTR [esi]
c001fafd:	e8 2f f4 ff ff       	call   c001ef31 <Vm::fpu32ToInternal(unsigned int)>
c001fb02:	e9 cb 01 00 00       	jmp    c001fcd2 <Vm::x87Handler(regs*)+0x9b3>
c001fb07:	80 fa 03             	cmp    dl,0x3
c001fb0a:	0f 85 d3 01 00 00    	jne    c001fce3 <Vm::x87Handler(regs*)+0x9c4>
c001fb10:	e8 b8 f7 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001fb15:	51                   	push   ecx
c001fb16:	51                   	push   ecx
c001fb17:	e9 de 01 00 00       	jmp    c001fcfa <Vm::x87Handler(regs*)+0x9db>
c001fb1c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb20:	80 fa 01             	cmp    dl,0x1
c001fb23:	75 09                	jne    c001fb2e <Vm::x87Handler(regs*)+0x80f>
c001fb25:	57                   	push   edi
c001fb26:	57                   	push   edi
c001fb27:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb29:	e9 e3 01 00 00       	jmp    c001fd11 <Vm::x87Handler(regs*)+0x9f2>
c001fb2e:	80 fa 04             	cmp    dl,0x4
c001fb31:	75 12                	jne    c001fb45 <Vm::x87Handler(regs*)+0x826>
c001fb33:	31 d2                	xor    edx,edx
c001fb35:	51                   	push   ecx
c001fb36:	51                   	push   ecx
c001fb37:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb39:	52                   	push   edx
c001fb3a:	50                   	push   eax
c001fb3b:	e8 d0 f4 ff ff       	call   c001f010 <Vm::fpuLongToFloat(long long)>
c001fb40:	e9 ee 00 00 00       	jmp    c001fc33 <Vm::x87Handler(regs*)+0x914>
c001fb45:	31 c0                	xor    eax,eax
c001fb47:	80 fa 07             	cmp    dl,0x7
c001fb4a:	0f 85 30 02 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	6a 00                	push   0x0
c001fb55:	e8 88 f6 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fb5a:	89 c7                	mov    edi,eax
c001fb5c:	89 d5                	mov    ebp,edx
c001fb5e:	58                   	pop    eax
c001fb5f:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb61:	5a                   	pop    edx
c001fb62:	31 d2                	xor    edx,edx
c001fb64:	52                   	push   edx
c001fb65:	50                   	push   eax
c001fb66:	e8 a5 f4 ff ff       	call   c001f010 <Vm::fpuLongToFloat(long long)>
c001fb6b:	e9 62 01 00 00       	jmp    c001fcd2 <Vm::x87Handler(regs*)+0x9b3>
c001fb70:	84 d2                	test   dl,dl
c001fb72:	75 0d                	jne    c001fb81 <Vm::x87Handler(regs*)+0x862>
c001fb74:	31 d2                	xor    edx,edx
c001fb76:	55                   	push   ebp
c001fb77:	55                   	push   ebp
c001fb78:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb7a:	52                   	push   edx
c001fb7b:	50                   	push   eax
c001fb7c:	e9 d3 01 00 00       	jmp    c001fd54 <Vm::x87Handler(regs*)+0xa35>
c001fb81:	31 c0                	xor    eax,eax
c001fb83:	80 fa 02             	cmp    dl,0x2
c001fb86:	0f 85 f4 01 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	6a 00                	push   0x0
c001fb91:	e8 4c f6 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fb96:	59                   	pop    ecx
c001fb97:	5f                   	pop    edi
c001fb98:	e9 6a f9 ff ff       	jmp    c001f507 <Vm::x87Handler(regs*)+0x1e8>
c001fb9d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba1:	84 d2                	test   dl,dl
c001fba3:	75 2a                	jne    c001fbcf <Vm::x87Handler(regs*)+0x8b0>
c001fba5:	50                   	push   eax
c001fba6:	50                   	push   eax
c001fba7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbaa:	ff 36                	push   DWORD PTR [esi]
c001fbac:	e8 c5 f3 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fbb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb8:	89 c6                	mov    esi,eax
c001fbba:	89 d7                	mov    edi,edx
c001fbbc:	e8 21 f6 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fbc1:	57                   	push   edi
c001fbc2:	56                   	push   esi
c001fbc3:	52                   	push   edx
c001fbc4:	50                   	push   eax
c001fbc5:	e8 8e f5 ff ff       	call   c001f158 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbca:	e9 64 01 00 00       	jmp    c001fd33 <Vm::x87Handler(regs*)+0xa14>
c001fbcf:	80 fa 01             	cmp    dl,0x1
c001fbd2:	75 11                	jne    c001fbe5 <Vm::x87Handler(regs*)+0x8c6>
c001fbd4:	50                   	push   eax
c001fbd5:	50                   	push   eax
c001fbd6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbd9:	ff 36                	push   DWORD PTR [esi]
c001fbdb:	e8 96 f3 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fbe0:	e9 35 01 00 00       	jmp    c001fd1a <Vm::x87Handler(regs*)+0x9fb>
c001fbe5:	80 fa 02             	cmp    dl,0x2
c001fbe8:	0f 85 54 f9 ff ff    	jne    c001f542 <Vm::x87Handler(regs*)+0x223>
c001fbee:	55                   	push   ebp
c001fbef:	55                   	push   ebp
c001fbf0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbf3:	ff 36                	push   DWORD PTR [esi]
c001fbf5:	e8 7c f3 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fbfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc01:	89 c6                	mov    esi,eax
c001fc03:	89 d7                	mov    edi,edx
c001fc05:	e8 d8 f5 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fc0a:	57                   	push   edi
c001fc0b:	56                   	push   esi
c001fc0c:	52                   	push   edx
c001fc0d:	50                   	push   eax
c001fc0e:	e8 f2 f4 ff ff       	call   c001f105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc17:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc1a:	83 c4 20             	add    esp,0x20
c001fc1d:	e9 74 f7 ff ff       	jmp    c001f396 <Vm::x87Handler(regs*)+0x77>
c001fc22:	80 fa 04             	cmp    dl,0x4
c001fc25:	75 2a                	jne    c001fc51 <Vm::x87Handler(regs*)+0x932>
c001fc27:	51                   	push   ecx
c001fc28:	51                   	push   ecx
c001fc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2c:	ff 36                	push   DWORD PTR [esi]
c001fc2e:	e8 43 f3 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fc33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3a:	89 c6                	mov    esi,eax
c001fc3c:	89 d7                	mov    edi,edx
c001fc3e:	e8 9f f5 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fc43:	57                   	push   edi
c001fc44:	56                   	push   esi
c001fc45:	52                   	push   edx
c001fc46:	50                   	push   eax
c001fc47:	e8 36 f5 ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc4c:	e9 e2 00 00 00       	jmp    c001fd33 <Vm::x87Handler(regs*)+0xa14>
c001fc51:	80 fa 05             	cmp    dl,0x5
c001fc54:	75 28                	jne    c001fc7e <Vm::x87Handler(regs*)+0x95f>
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	6a 00                	push   0x0
c001fc5b:	e8 82 f5 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fc60:	89 c7                	mov    edi,eax
c001fc62:	89 d5                	mov    ebp,edx
c001fc64:	58                   	pop    eax
c001fc65:	5a                   	pop    edx
c001fc66:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc69:	ff 36                	push   DWORD PTR [esi]
c001fc6b:	e8 06 f3 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fc70:	83 c4 10             	add    esp,0x10
c001fc73:	55                   	push   ebp
c001fc74:	57                   	push   edi
c001fc75:	52                   	push   edx
c001fc76:	50                   	push   eax
c001fc77:	e8 06 f5 ff ff       	call   c001f182 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc7c:	eb 60                	jmp    c001fcde <Vm::x87Handler(regs*)+0x9bf>
c001fc7e:	80 fa 06             	cmp    dl,0x6
c001fc81:	75 2a                	jne    c001fcad <Vm::x87Handler(regs*)+0x98e>
c001fc83:	51                   	push   ecx
c001fc84:	51                   	push   ecx
c001fc85:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc88:	ff 36                	push   DWORD PTR [esi]
c001fc8a:	e8 e7 f2 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fc8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc96:	89 c6                	mov    esi,eax
c001fc98:	89 d7                	mov    edi,edx
c001fc9a:	e8 43 f5 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fc9f:	57                   	push   edi
c001fca0:	56                   	push   esi
c001fca1:	52                   	push   edx
c001fca2:	50                   	push   eax
c001fca3:	e8 08 f5 ff ff       	call   c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fca8:	e9 86 00 00 00       	jmp    c001fd33 <Vm::x87Handler(regs*)+0xa14>
c001fcad:	31 c0                	xor    eax,eax
c001fcaf:	80 fa 07             	cmp    dl,0x7
c001fcb2:	0f 85 c8 00 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	6a 00                	push   0x0
c001fcbd:	e8 20 f5 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fcc2:	89 c7                	mov    edi,eax
c001fcc4:	89 d5                	mov    ebp,edx
c001fcc6:	58                   	pop    eax
c001fcc7:	5a                   	pop    edx
c001fcc8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fccb:	ff 36                	push   DWORD PTR [esi]
c001fccd:	e8 a4 f2 ff ff       	call   c001ef76 <Vm::fpu64ToInternal(unsigned long long)>
c001fcd2:	83 c4 10             	add    esp,0x10
c001fcd5:	55                   	push   ebp
c001fcd6:	57                   	push   edi
c001fcd7:	52                   	push   edx
c001fcd8:	50                   	push   eax
c001fcd9:	e8 d2 f4 ff ff       	call   c001f1b0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	eb 53                	jmp    c001fd36 <Vm::x87Handler(regs*)+0xa17>
c001fce3:	31 c0                	xor    eax,eax
c001fce5:	80 fa 02             	cmp    dl,0x2
c001fce8:	0f 85 92 00 00 00    	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	6a 00                	push   0x0
c001fcf3:	e8 ea f4 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fcf8:	59                   	pop    ecx
c001fcf9:	5f                   	pop    edi
c001fcfa:	52                   	push   edx
c001fcfb:	50                   	push   eax
c001fcfc:	e8 27 f2 ff ff       	call   c001ef28 <Vm::fpuInternalTo64(unsigned long long)>
c001fd01:	eb 70                	jmp    c001fd73 <Vm::x87Handler(regs*)+0xa54>
c001fd03:	31 c0                	xor    eax,eax
c001fd05:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd0a:	75 74                	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fd0c:	50                   	push   eax
c001fd0d:	50                   	push   eax
c001fd0e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd11:	31 d2                	xor    edx,edx
c001fd13:	52                   	push   edx
c001fd14:	50                   	push   eax
c001fd15:	e8 f6 f2 ff ff       	call   c001f010 <Vm::fpuLongToFloat(long long)>
c001fd1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd21:	89 c6                	mov    esi,eax
c001fd23:	89 d7                	mov    edi,edx
c001fd25:	e8 b8 f4 ff ff       	call   c001f1e2 <Vm::fpuGetReg(int)>
c001fd2a:	57                   	push   edi
c001fd2b:	56                   	push   esi
c001fd2c:	52                   	push   edx
c001fd2d:	50                   	push   eax
c001fd2e:	e8 5e f4 ff ff       	call   c001f191 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd33:	83 c4 1c             	add    esp,0x1c
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	6a 00                	push   0x0
c001fd3a:	e8 e6 f4 ff ff       	call   c001f225 <Vm::fpuSetReg(int, unsigned long long)>
c001fd3f:	e9 f2 f7 ff ff       	jmp    c001f536 <Vm::x87Handler(regs*)+0x217>
c001fd44:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd48:	80 fa 05             	cmp    dl,0x5
c001fd4b:	75 11                	jne    c001fd5e <Vm::x87Handler(regs*)+0xa3f>
c001fd4d:	55                   	push   ebp
c001fd4e:	55                   	push   ebp
c001fd4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd52:	ff 36                	push   DWORD PTR [esi]
c001fd54:	e8 81 f2 ff ff       	call   c001efda <Vm::fpuULongToFloat(unsigned long long)>
c001fd59:	e9 cf f7 ff ff       	jmp    c001f52d <Vm::x87Handler(regs*)+0x20e>
c001fd5e:	31 c0                	xor    eax,eax
c001fd60:	80 fa 07             	cmp    dl,0x7
c001fd63:	75 1b                	jne    c001fd80 <Vm::x87Handler(regs*)+0xa61>
c001fd65:	e8 63 f5 ff ff       	call   c001f2cd <Vm::fpuPop()>
c001fd6a:	51                   	push   ecx
c001fd6b:	51                   	push   ecx
c001fd6c:	52                   	push   edx
c001fd6d:	50                   	push   eax
c001fd6e:	e8 0c f2 ff ff       	call   c001ef7f <Vm::fpuFloatToLong(unsigned long long)>
c001fd73:	83 c4 10             	add    esp,0x10
c001fd76:	89 06                	mov    DWORD PTR [esi],eax
c001fd78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fd7b:	e9 f8 f7 ff ff       	jmp    c001f578 <Vm::x87Handler(regs*)+0x259>
c001fd80:	83 c4 1c             	add    esp,0x1c
c001fd83:	5b                   	pop    ebx
c001fd84:	5e                   	pop    esi
c001fd85:	5f                   	pop    edi
c001fd86:	5d                   	pop    ebp
c001fd87:	c3                   	ret    

c001fd88 <__static_initialization_and_destruction_0(int, int)>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fd90:	75 1a                	jne    c001fdac <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd92:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fd9a:	75 10                	jne    c001fdac <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	68 40 0e 03 c0       	push   0xc0030e40
c001fda4:	e8 01 8d 00 00       	call   c0028aaa <Vm::_FPUState::_FPUState()>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	90                   	nop
c001fdad:	83 c4 0c             	add    esp,0xc
c001fdb0:	c3                   	ret    

c001fdb1 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fdb1:	83 ec 0c             	sub    esp,0xc
c001fdb4:	83 ec 08             	sub    esp,0x8
c001fdb7:	68 ff ff 00 00       	push   0xffff
c001fdbc:	6a 01                	push   0x1
c001fdbe:	e8 c5 ff ff ff       	call   c001fd88 <__static_initialization_and_destruction_0(int, int)>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	83 c4 0c             	add    esp,0xc
c001fdc9:	c3                   	ret    

c001fdca <FAT::getName()>:
c001fdca:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c001fdcf:	c3                   	ret    

c001fdd0 <FAT::tell(void*, unsigned long long*)>:
c001fdd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fdd5:	75 06                	jne    c001fddd <FAT::tell(void*, unsigned long long*)+0xd>
c001fdd7:	b8 04 00 00 00       	mov    eax,0x4
c001fddc:	c3                   	ret    
c001fddd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fde2:	75 06                	jne    c001fdea <FAT::tell(void*, unsigned long long*)+0x1a>
c001fde4:	b8 04 00 00 00       	mov    eax,0x4
c001fde9:	c3                   	ret    
c001fdea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdee:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fdf1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fdf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdf8:	89 01                	mov    DWORD PTR [ecx],eax
c001fdfa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fdfd:	b8 00 00 00 00       	mov    eax,0x0
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <FAT::stat(void*, unsigned long long*)>:
c001fe04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe09:	75 06                	jne    c001fe11 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe0b:	b8 04 00 00 00       	mov    eax,0x4
c001fe10:	c3                   	ret    
c001fe11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe16:	75 06                	jne    c001fe1e <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe18:	b8 04 00 00 00       	mov    eax,0x4
c001fe1d:	c3                   	ret    
c001fe1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe2c:	89 01                	mov    DWORD PTR [ecx],eax
c001fe2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe31:	b8 00 00 00 00       	mov    eax,0x0
c001fe36:	c3                   	ret    
c001fe37:	90                   	nop

c001fe38 <FAT::~FAT()>:
c001fe38:	83 ec 0c             	sub    esp,0xc
c001fe3b:	ba 7c bd 02 c0       	mov    edx,0xc002bd7c
c001fe40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe44:	89 10                	mov    DWORD PTR [eax],edx
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	50                   	push   eax
c001fe4e:	e8 45 2b ff ff       	call   c0012998 <Filesystem::~Filesystem()>
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	90                   	nop
c001fe57:	83 c4 0c             	add    esp,0xc
c001fe5a:	c3                   	ret    
c001fe5b:	90                   	nop

c001fe5c <FAT::~FAT()>:
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	83 ec 0c             	sub    esp,0xc
c001fe62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe66:	e8 cd ff ff ff       	call   c001fe38 <FAT::~FAT()>
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	83 ec 08             	sub    esp,0x8
c001fe71:	6a 08                	push   0x8
c001fe73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe77:	e8 15 27 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c001fe7c:	83 c4 10             	add    esp,0x10
c001fe7f:	83 c4 0c             	add    esp,0xc
c001fe82:	c3                   	ret    
c001fe83:	90                   	nop

c001fe84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fe84:	83 ec 1c             	sub    esp,0x1c
c001fe87:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fe8e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fe93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe97:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c001fe9e:	83 f8 ff             	cmp    eax,0xffffffff
c001fea1:	75 34                	jne    c001fed7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fea3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fea7:	88 c2                	mov    dl,al
c001fea9:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c001feae:	01 d0                	add    eax,edx
c001feb0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001feb4:	8b 15 a0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ea0
c001feba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001febe:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c001fec5:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c001feca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fece:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c001fed5:	eb 17                	jmp    c001feee <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fed7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fedb:	88 c2                	mov    dl,al
c001fedd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fee1:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c001fee8:	01 d0                	add    eax,edx
c001feea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001feee:	83 ec 04             	sub    esp,0x4
c001fef1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fef5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fef9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fefd:	50                   	push   eax
c001fefe:	e8 fb 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff0a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff0f:	75 07                	jne    c001ff18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff11:	b8 00 00 00 00       	mov    eax,0x0
c001ff16:	eb 05                	jmp    c001ff1d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff18:	b8 01 00 00 00       	mov    eax,0x1
c001ff1d:	83 c4 1c             	add    esp,0x1c
c001ff20:	c3                   	ret    
c001ff21:	90                   	nop

c001ff22 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff22:	57                   	push   edi
c001ff23:	83 ec 58             	sub    esp,0x58
c001ff26:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff32:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff37:	b8 00 00 00 00       	mov    eax,0x0
c001ff3c:	fc                   	cld    
c001ff3d:	89 d7                	mov    edi,edx
c001ff3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff41:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff45:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c001ff4c:	83 f8 ff             	cmp    eax,0xffffffff
c001ff4f:	75 34                	jne    c001ff85 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff51:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff55:	88 c2                	mov    dl,al
c001ff57:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c001ff5c:	01 d0                	add    eax,edx
c001ff5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff62:	8b 15 a0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ea0
c001ff68:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff6c:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c001ff73:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c001ff78:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ff7c:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c001ff83:	eb 17                	jmp    c001ff9c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ff85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff89:	88 c2                	mov    dl,al
c001ff8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff8f:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c001ff96:	01 d0                	add    eax,edx
c001ff98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff9c:	83 ec 08             	sub    esp,0x8
c001ff9f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffa3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffa7:	50                   	push   eax
c001ffa8:	e8 9f 09 fe ff       	call   c000094c <strcat>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffb7:	50                   	push   eax
c001ffb8:	e8 2f 6f fe ff       	call   c0006eec <f_setlabel>
c001ffbd:	83 c4 10             	add    esp,0x10
c001ffc0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ffc4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ffc9:	75 07                	jne    c001ffd2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ffcb:	b8 00 00 00 00       	mov    eax,0x0
c001ffd0:	eb 05                	jmp    c001ffd7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ffd2:	b8 01 00 00 00       	mov    eax,0x1
c001ffd7:	83 c4 58             	add    esp,0x58
c001ffda:	5f                   	pop    edi
c001ffdb:	c3                   	ret    

c001ffdc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ffdc:	83 ec 2c             	sub    esp,0x2c
c001ffdf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ffe7:	83 ec 08             	sub    esp,0x8
c001ffea:	68 54 bd 02 c0       	push   0xc002bd54
c001ffef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fff3:	e8 a0 08 fe ff       	call   c0000898 <strcmp>
c001fff8:	83 c4 10             	add    esp,0x10
c001fffb:	85 c0                	test   eax,eax
c001fffd:	0f 94 c0             	sete   al
c0020000:	84 c0                	test   al,al
c0020002:	74 0d                	je     c0020011 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020004:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002000c:	e9 a6 00 00 00       	jmp    c00200b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020011:	83 ec 08             	sub    esp,0x8
c0020014:	68 46 bd 02 c0       	push   0xc002bd46
c0020019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002001d:	e8 76 08 fe ff       	call   c0000898 <strcmp>
c0020022:	83 c4 10             	add    esp,0x10
c0020025:	85 c0                	test   eax,eax
c0020027:	0f 94 c0             	sete   al
c002002a:	84 c0                	test   al,al
c002002c:	74 0a                	je     c0020038 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002002e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020036:	eb 7f                	jmp    c00200b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020038:	83 ec 08             	sub    esp,0x8
c002003b:	68 4c bd 02 c0       	push   0xc002bd4c
c0020040:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020044:	e8 4f 08 fe ff       	call   c0000898 <strcmp>
c0020049:	83 c4 10             	add    esp,0x10
c002004c:	85 c0                	test   eax,eax
c002004e:	0f 94 c0             	sete   al
c0020051:	84 c0                	test   al,al
c0020053:	74 0a                	je     c002005f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020055:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002005d:	eb 58                	jmp    c00200b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002005f:	83 ec 08             	sub    esp,0x8
c0020062:	68 0c 92 02 c0       	push   0xc002920c
c0020067:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002006b:	e8 28 08 fe ff       	call   c0000898 <strcmp>
c0020070:	83 c4 10             	add    esp,0x10
c0020073:	85 c0                	test   eax,eax
c0020075:	0f 94 c0             	sete   al
c0020078:	84 c0                	test   al,al
c002007a:	74 0a                	je     c0020086 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002007c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020084:	eb 31                	jmp    c00200b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020086:	83 ec 08             	sub    esp,0x8
c0020089:	68 52 bd 02 c0       	push   0xc002bd52
c002008e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020092:	e8 01 08 fe ff       	call   c0000898 <strcmp>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	85 c0                	test   eax,eax
c002009c:	0f 94 c0             	sete   al
c002009f:	84 c0                	test   al,al
c00200a1:	74 0a                	je     c00200ad <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200a3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200ab:	eb 0a                	jmp    c00200b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ad:	b8 08 00 00 00       	mov    eax,0x8
c00200b2:	e9 df 00 00 00       	jmp    c0020196 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200b7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00200be:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00200c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200c7:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00200ce:	83 f8 ff             	cmp    eax,0xffffffff
c00200d1:	75 34                	jne    c0020107 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00200d3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00200d7:	88 c2                	mov    dl,al
c00200d9:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c00200de:	01 d0                	add    eax,edx
c00200e0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00200e4:	8b 15 a0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ea0
c00200ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200ee:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c00200f5:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c00200fa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00200fe:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c0020105:	eb 17                	jmp    c002011e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020107:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002010b:	88 c2                	mov    dl,al
c002010d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020111:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c0020118:	01 d0                	add    eax,edx
c002011a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002011e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020122:	88 04 24             	mov    BYTE PTR [esp],al
c0020125:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002012d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020135:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002013a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020142:	83 ec 0c             	sub    esp,0xc
c0020145:	68 00 20 00 00       	push   0x2000
c002014a:	e8 4a f4 fe ff       	call   c000f599 <malloc>
c002014f:	83 c4 10             	add    esp,0x10
c0020152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020156:	68 00 20 00 00       	push   0x2000
c002015b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020163:	50                   	push   eax
c0020164:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020168:	50                   	push   eax
c0020169:	e8 c9 71 fe ff       	call   c0007337 <f_mkfs>
c002016e:	83 c4 10             	add    esp,0x10
c0020171:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020175:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002017a:	75 07                	jne    c0020183 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002017c:	b8 00 00 00 00       	mov    eax,0x0
c0020181:	eb 13                	jmp    c0020196 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020183:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020188:	75 07                	jne    c0020191 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002018a:	b8 09 00 00 00       	mov    eax,0x9
c002018f:	eb 05                	jmp    c0020196 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020191:	b8 01 00 00 00       	mov    eax,0x1
c0020196:	83 c4 2c             	add    esp,0x2c
c0020199:	c3                   	ret    

c002019a <FAT::tryMount(LogicalDisk*, int)>:
c002019a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201a0:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c00201a5:	83 f8 14             	cmp    eax,0x14
c00201a8:	75 17                	jne    c00201c1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00201aa:	83 ec 0c             	sub    esp,0xc
c00201ad:	68 58 bd 02 c0       	push   0xc002bd58
c00201b2:	e8 1e 9c ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00201b7:	83 c4 10             	add    esp,0x10
c00201ba:	b0 00                	mov    al,0x0
c00201bc:	e9 d7 01 00 00       	jmp    c0020398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201c1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00201c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00201ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00201d4:	3d 00 02 00 00       	cmp    eax,0x200
c00201d9:	74 07                	je     c00201e2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00201db:	b0 00                	mov    al,0x0
c00201dd:	e9 b6 01 00 00       	jmp    c0020398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201e2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00201ea:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00201f1:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00201f8:	83 f8 ff             	cmp    eax,0xffffffff
c00201fb:	74 07                	je     c0020204 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00201fd:	b0 01                	mov    al,0x1
c00201ff:	e9 94 01 00 00       	jmp    c0020398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020204:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002020e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020216:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002021d:	88 c2                	mov    dl,al
c002021f:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c0020224:	01 d0                	add    eax,edx
c0020226:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002022d:	8b 15 a0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ea0
c0020233:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002023a:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0020241:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c0020246:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002024d:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	68 54 02 00 00       	push   0x254
c002025c:	e8 38 f3 fe ff       	call   c000f599 <malloc>
c0020261:	83 c4 10             	add    esp,0x10
c0020264:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002026b:	83 ec 04             	sub    esp,0x4
c002026e:	6a 00                	push   0x0
c0020270:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020277:	50                   	push   eax
c0020278:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002027f:	e8 71 4c fe ff       	call   c0004ef5 <f_mount>
c0020284:	83 c4 10             	add    esp,0x10
c0020287:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002028e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020296:	74 19                	je     c00202b1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202a2:	e8 12 f3 fe ff       	call   c000f5b9 <rfree>
c00202a7:	83 c4 10             	add    esp,0x10
c00202aa:	b0 00                	mov    al,0x0
c00202ac:	e9 e7 00 00 00       	jmp    c0020398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202b1:	83 ec 04             	sub    esp,0x4
c00202b4:	68 00 01 00 00       	push   0x100
c00202b9:	6a 00                	push   0x0
c00202bb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202c2:	50                   	push   eax
c00202c3:	e8 88 04 fe ff       	call   c0000750 <memset>
c00202c8:	83 c4 10             	add    esp,0x10
c00202cb:	83 ec 08             	sub    esp,0x8
c00202ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202d5:	50                   	push   eax
c00202d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202dd:	50                   	push   eax
c00202de:	e8 69 06 fe ff       	call   c000094c <strcat>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 ec 08             	sub    esp,0x8
c00202e9:	68 66 bd 02 c0       	push   0xc002bd66
c00202ee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202f5:	50                   	push   eax
c00202f6:	e8 51 06 fe ff       	call   c000094c <strcat>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	83 ec 04             	sub    esp,0x4
c0020301:	6a 01                	push   0x1
c0020303:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002030a:	50                   	push   eax
c002030b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002030f:	50                   	push   eax
c0020310:	e8 42 4c fe ff       	call   c0004f57 <f_open>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002031f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020326:	85 c0                	test   eax,eax
c0020328:	74 0a                	je     c0020334 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002032a:	78 2d                	js     c0020359 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002032c:	83 e8 04             	sub    eax,0x4
c002032f:	83 f8 01             	cmp    eax,0x1
c0020332:	77 25                	ja     c0020359 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020334:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020343:	50                   	push   eax
c0020344:	e8 60 57 fe ff       	call   c0005aa9 <f_close>
c0020349:	83 c4 10             	add    esp,0x10
c002034c:	90                   	nop
c002034d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020355:	74 3a                	je     c0020391 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020357:	eb 2d                	jmp    c0020386 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020363:	e8 51 f2 fe ff       	call   c000f5b9 <rfree>
c0020368:	83 c4 10             	add    esp,0x10
c002036b:	83 ec 04             	sub    esp,0x4
c002036e:	6a 00                	push   0x0
c0020370:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020377:	50                   	push   eax
c0020378:	6a 00                	push   0x0
c002037a:	e8 76 4b fe ff       	call   c0004ef5 <f_mount>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	b0 00                	mov    al,0x0
c0020384:	eb 12                	jmp    c0020398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020386:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c002038b:	40                   	inc    eax
c002038c:	a3 a0 0e 03 c0       	mov    ds:0xc0030ea0,eax
c0020391:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020398:	81 c4 6c 03 00 00    	add    esp,0x36c
c002039e:	c3                   	ret    
c002039f:	90                   	nop

c00203a0 <FAT::getFileFirstSector(char const*)>:
c00203a0:	53                   	push   ebx
c00203a1:	83 ec 28             	sub    esp,0x28
c00203a4:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00203ac:	83 ec 0c             	sub    esp,0xc
c00203af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b3:	e8 e1 f1 fe ff       	call   c000f599 <malloc>
c00203b8:	83 c4 10             	add    esp,0x10
c00203bb:	89 c3                	mov    ebx,eax
c00203bd:	a1 d0 0d 03 c0       	mov    eax,ds:0xc0030dd0
c00203c2:	83 ec 04             	sub    esp,0x4
c00203c5:	50                   	push   eax
c00203c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00203ca:	53                   	push   ebx
c00203cb:	e8 f8 27 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c00203d0:	83 c4 10             	add    esp,0x10
c00203d3:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00203d7:	83 ec 08             	sub    esp,0x8
c00203da:	6a 01                	push   0x1
c00203dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00203e0:	e8 47 28 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c00203e5:	83 c4 10             	add    esp,0x10
c00203e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00203ee:	83 c0 0c             	add    eax,0xc
c00203f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00203f3:	83 ec 0c             	sub    esp,0xc
c00203f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00203fa:	52                   	push   edx
c00203fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00203ff:	52                   	push   edx
c0020400:	6a 00                	push   0x0
c0020402:	6a 04                	push   0x4
c0020404:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020408:	ff d0                	call   eax
c002040a:	83 c4 20             	add    esp,0x20
c002040d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020411:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002041b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002041f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020422:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020425:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020429:	83 ec 0c             	sub    esp,0xc
c002042c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020430:	e8 55 28 ff ff       	call   c0012c8a <File::close()>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002043c:	ba 00 00 00 00       	mov    edx,0x0
c0020441:	83 c4 28             	add    esp,0x28
c0020444:	5b                   	pop    ebx
c0020445:	c3                   	ret    

c0020446 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020446:	57                   	push   edi
c0020447:	56                   	push   esi
c0020448:	53                   	push   ebx
c0020449:	81 ec 50 02 00 00    	sub    esp,0x250
c002044f:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020457:	74 0a                	je     c0020463 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020459:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020461:	75 0a                	jne    c002046d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020463:	b8 04 00 00 00       	mov    eax,0x4
c0020468:	e9 29 01 00 00       	jmp    c0020596 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002046d:	83 ec 08             	sub    esp,0x8
c0020470:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020477:	50                   	push   eax
c0020478:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002047f:	e8 2f 5c fe ff       	call   c00060b3 <f_readdir>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002048e:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020495:	83 ec 0c             	sub    esp,0xc
c0020498:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002049f:	83 c0 1a             	add    eax,0x1a
c00204a2:	50                   	push   eax
c00204a3:	e8 c4 02 fe ff       	call   c000076c <strlen>
c00204a8:	83 c4 10             	add    esp,0x10
c00204ab:	ba 00 00 00 00       	mov    edx,0x0
c00204b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204b8:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00204bf:	0f b6 c0             	movzx  eax,al
c00204c2:	83 e0 10             	and    eax,0x10
c00204c5:	74 07                	je     c00204ce <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00204c7:	b8 02 00 00 00       	mov    eax,0x2
c00204cc:	eb 05                	jmp    c00204d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00204ce:	b8 01 00 00 00       	mov    eax,0x1
c00204d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00204d7:	83 ec 08             	sub    esp,0x8
c00204da:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204e1:	83 c0 1a             	add    eax,0x1a
c00204e4:	50                   	push   eax
c00204e5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00204e9:	83 c0 10             	add    eax,0x10
c00204ec:	50                   	push   eax
c00204ed:	e8 1a 03 fe ff       	call   c000080c <strcpy>
c00204f2:	83 c4 10             	add    esp,0x10
c00204f5:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00204fc:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020503:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020507:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002050e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020515:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002051c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020523:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002052a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020531:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020538:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002053f:	89 c6                	mov    esi,eax
c0020541:	89 d7                	mov    edi,edx
c0020543:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020545:	89 c8                	mov    eax,ecx
c0020547:	89 fa                	mov    edx,edi
c0020549:	89 f3                	mov    ebx,esi
c002054b:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020552:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020559:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020560:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020567:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002056d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020574:	84 c0                	test   al,al
c0020576:	75 07                	jne    c002057f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020578:	b8 07 00 00 00       	mov    eax,0x7
c002057d:	eb 17                	jmp    c0020596 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002057f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020586:	85 c0                	test   eax,eax
c0020588:	75 07                	jne    c0020591 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002058a:	b8 00 00 00 00       	mov    eax,0x0
c002058f:	eb 05                	jmp    c0020596 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020591:	b8 01 00 00 00       	mov    eax,0x1
c0020596:	81 c4 50 02 00 00    	add    esp,0x250
c002059c:	5b                   	pop    ebx
c002059d:	5e                   	pop    esi
c002059e:	5f                   	pop    edi
c002059f:	c3                   	ret    

c00205a0 <FAT::read(void*, unsigned long, void*, int*)>:
c00205a0:	83 ec 1c             	sub    esp,0x1c
c00205a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205a8:	74 07                	je     c00205b1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00205aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00205af:	75 07                	jne    c00205b8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00205b1:	b8 04 00 00 00       	mov    eax,0x4
c00205b6:	eb 3d                	jmp    c00205f5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00205b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205bc:	50                   	push   eax
c00205bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00205c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205c9:	e8 c5 4d fe ff       	call   c0005393 <f_read>
c00205ce:	83 c4 10             	add    esp,0x10
c00205d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205d9:	89 c2                	mov    edx,eax
c00205db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00205df:	89 10                	mov    DWORD PTR [eax],edx
c00205e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205e5:	85 c0                	test   eax,eax
c00205e7:	75 07                	jne    c00205f0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00205e9:	b8 00 00 00 00       	mov    eax,0x0
c00205ee:	eb 05                	jmp    c00205f5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00205f0:	b8 01 00 00 00       	mov    eax,0x1
c00205f5:	83 c4 1c             	add    esp,0x1c
c00205f8:	c3                   	ret    
c00205f9:	90                   	nop

c00205fa <FAT::write(void*, unsigned long, void*, int*)>:
c00205fa:	83 ec 1c             	sub    esp,0x1c
c00205fd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020602:	74 07                	je     c002060b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020604:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020609:	75 07                	jne    c0020612 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002060b:	b8 04 00 00 00       	mov    eax,0x4
c0020610:	eb 3d                	jmp    c002064f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020612:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020616:	50                   	push   eax
c0020617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002061b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002061f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020623:	e8 eb 4f fe ff       	call   c0005613 <f_write>
c0020628:	83 c4 10             	add    esp,0x10
c002062b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002062f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020633:	89 c2                	mov    edx,eax
c0020635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020639:	89 10                	mov    DWORD PTR [eax],edx
c002063b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002063f:	85 c0                	test   eax,eax
c0020641:	75 07                	jne    c002064a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020643:	b8 00 00 00 00       	mov    eax,0x0
c0020648:	eb 05                	jmp    c002064f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002064a:	b8 01 00 00 00       	mov    eax,0x1
c002064f:	83 c4 1c             	add    esp,0x1c
c0020652:	c3                   	ret    
c0020653:	90                   	nop

c0020654 <FAT::close(void*)>:
c0020654:	83 ec 1c             	sub    esp,0x1c
c0020657:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002065c:	75 07                	jne    c0020665 <FAT::close(void*)+0x11>
c002065e:	b8 04 00 00 00       	mov    eax,0x4
c0020663:	eb 36                	jmp    c002069b <FAT::close(void*)+0x47>
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002066c:	e8 38 54 fe ff       	call   c0005aa9 <f_close>
c0020671:	83 c4 10             	add    esp,0x10
c0020674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020678:	83 ec 0c             	sub    esp,0xc
c002067b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002067f:	e8 25 ef fe ff       	call   c000f5a9 <free>
c0020684:	83 c4 10             	add    esp,0x10
c0020687:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002068b:	85 c0                	test   eax,eax
c002068d:	75 07                	jne    c0020696 <FAT::close(void*)+0x42>
c002068f:	b8 00 00 00 00       	mov    eax,0x0
c0020694:	eb 05                	jmp    c002069b <FAT::close(void*)+0x47>
c0020696:	b8 01 00 00 00       	mov    eax,0x1
c002069b:	83 c4 1c             	add    esp,0x1c
c002069e:	c3                   	ret    
c002069f:	90                   	nop

c00206a0 <FAT::closeDir(void*)>:
c00206a0:	83 ec 1c             	sub    esp,0x1c
c00206a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206a8:	75 07                	jne    c00206b1 <FAT::closeDir(void*)+0x11>
c00206aa:	b8 04 00 00 00       	mov    eax,0x4
c00206af:	eb 36                	jmp    c00206e7 <FAT::closeDir(void*)+0x47>
c00206b1:	83 ec 0c             	sub    esp,0xc
c00206b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b8:	e8 d4 59 fe ff       	call   c0006091 <f_closedir>
c00206bd:	83 c4 10             	add    esp,0x10
c00206c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c4:	83 ec 0c             	sub    esp,0xc
c00206c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206cb:	e8 d9 ee fe ff       	call   c000f5a9 <free>
c00206d0:	83 c4 10             	add    esp,0x10
c00206d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206d7:	85 c0                	test   eax,eax
c00206d9:	75 07                	jne    c00206e2 <FAT::closeDir(void*)+0x42>
c00206db:	b8 00 00 00 00       	mov    eax,0x0
c00206e0:	eb 05                	jmp    c00206e7 <FAT::closeDir(void*)+0x47>
c00206e2:	b8 01 00 00 00       	mov    eax,0x1
c00206e7:	83 c4 1c             	add    esp,0x1c
c00206ea:	c3                   	ret    
c00206eb:	90                   	nop

c00206ec <FAT::seek(void*, unsigned long long)>:
c00206ec:	83 ec 2c             	sub    esp,0x2c
c00206ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00206f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00206fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020704:	75 07                	jne    c002070d <FAT::seek(void*, unsigned long long)+0x21>
c0020706:	b8 04 00 00 00       	mov    eax,0x4
c002070b:	eb 2f                	jmp    c002073c <FAT::seek(void*, unsigned long long)+0x50>
c002070d:	83 ec 04             	sub    esp,0x4
c0020710:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020714:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020718:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002071c:	e8 b7 53 fe ff       	call   c0005ad8 <f_lseek>
c0020721:	83 c4 10             	add    esp,0x10
c0020724:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002072c:	85 c0                	test   eax,eax
c002072e:	75 07                	jne    c0020737 <FAT::seek(void*, unsigned long long)+0x4b>
c0020730:	b8 00 00 00 00       	mov    eax,0x0
c0020735:	eb 05                	jmp    c002073c <FAT::seek(void*, unsigned long long)+0x50>
c0020737:	b8 01 00 00 00       	mov    eax,0x1
c002073c:	83 c4 2c             	add    esp,0x2c
c002073f:	c3                   	ret    

c0020740 <fatWrapperReadDisk>:
c0020740:	83 ec 1c             	sub    esp,0x1c
c0020743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020747:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002074b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002074f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020756:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002075a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002075f:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c0020766:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002076a:	83 ec 0c             	sub    esp,0xc
c002076d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020771:	52                   	push   edx
c0020772:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002077a:	50                   	push   eax
c002077b:	e8 3e 58 ff ff       	call   c0015fbe <LogicalDisk::read(unsigned long long, int, void*)>
c0020780:	83 c4 20             	add    esp,0x20
c0020783:	83 c4 1c             	add    esp,0x1c
c0020786:	c3                   	ret    

c0020787 <fatWrapperWriteDisk>:
c0020787:	83 ec 1c             	sub    esp,0x1c
c002078a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002078e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020792:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020796:	89 04 24             	mov    DWORD PTR [esp],eax
c0020799:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002079d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207a1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207a6:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c00207ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207b1:	83 ec 0c             	sub    esp,0xc
c00207b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207b8:	52                   	push   edx
c00207b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207c1:	50                   	push   eax
c00207c2:	e8 63 58 ff ff       	call   c001602a <LogicalDisk::write(unsigned long long, int, void*)>
c00207c7:	83 c4 20             	add    esp,0x20
c00207ca:	83 c4 1c             	add    esp,0x1c
c00207cd:	c3                   	ret    

c00207ce <fatWrapperIoctl>:
c00207ce:	53                   	push   ebx
c00207cf:	83 ec 28             	sub    esp,0x28
c00207d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00207da:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00207de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00207e2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00207e7:	75 31                	jne    c002081a <fatWrapperIoctl+0x4c>
c00207e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207f6:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c00207fd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020803:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020809:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002080d:	66 89 02             	mov    WORD PTR [edx],ax
c0020810:	b8 00 00 00 00       	mov    eax,0x0
c0020815:	e9 b2 00 00 00       	jmp    c00208cc <fatWrapperIoctl+0xfe>
c002081a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002081f:	75 6a                	jne    c002088b <fatWrapperIoctl+0xbd>
c0020821:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020825:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020829:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002082e:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c0020835:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002083b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020841:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020847:	89 c8                	mov    eax,ecx
c0020849:	89 da                	mov    edx,ebx
c002084b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002084f:	c1 e0 0a             	shl    eax,0xa
c0020852:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020857:	8b 0c 8d 80 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2180]
c002085e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020864:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002086a:	89 cb                	mov    ebx,ecx
c002086c:	c1 fb 1f             	sar    ebx,0x1f
c002086f:	53                   	push   ebx
c0020870:	51                   	push   ecx
c0020871:	52                   	push   edx
c0020872:	50                   	push   eax
c0020873:	e8 2c 5e 00 00       	call   c00266a4 <__udivdi3>
c0020878:	83 c4 10             	add    esp,0x10
c002087b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002087f:	89 01                	mov    DWORD PTR [ecx],eax
c0020881:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020884:	b8 00 00 00 00       	mov    eax,0x0
c0020889:	eb 41                	jmp    c00208cc <fatWrapperIoctl+0xfe>
c002088b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020890:	75 07                	jne    c0020899 <fatWrapperIoctl+0xcb>
c0020892:	b8 00 00 00 00       	mov    eax,0x0
c0020897:	eb 33                	jmp    c00208cc <fatWrapperIoctl+0xfe>
c0020899:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002089e:	75 19                	jne    c00208b9 <fatWrapperIoctl+0xeb>
c00208a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208ac:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00208b2:	b8 00 00 00 00       	mov    eax,0x0
c00208b7:	eb 13                	jmp    c00208cc <fatWrapperIoctl+0xfe>
c00208b9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00208be:	75 07                	jne    c00208c7 <fatWrapperIoctl+0xf9>
c00208c0:	b8 00 00 00 00       	mov    eax,0x0
c00208c5:	eb 05                	jmp    c00208cc <fatWrapperIoctl+0xfe>
c00208c7:	b8 04 00 00 00       	mov    eax,0x4
c00208cc:	83 c4 28             	add    esp,0x28
c00208cf:	5b                   	pop    ebx
c00208d0:	c3                   	ret    
c00208d1:	90                   	nop

c00208d2 <FAT::FAT()>:
c00208d2:	83 ec 1c             	sub    esp,0x1c
c00208d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208d9:	83 ec 0c             	sub    esp,0xc
c00208dc:	50                   	push   eax
c00208dd:	e8 92 20 ff ff       	call   c0012974 <Filesystem::Filesystem()>
c00208e2:	83 c4 10             	add    esp,0x10
c00208e5:	ba 7c bd 02 c0       	mov    edx,0xc002bd7c
c00208ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ee:	89 10                	mov    DWORD PTR [eax],edx
c00208f0:	c7 05 a0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ea0,0x0
c00208fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020902:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020907:	7f 15                	jg     c002091e <FAT::FAT()+0x4c>
c0020909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002090d:	c7 04 85 c0 0e 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf140],0xffffffff
c0020918:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002091c:	eb e4                	jmp    c0020902 <FAT::FAT()+0x30>
c002091e:	90                   	nop
c002091f:	83 c4 1c             	add    esp,0x1c
c0020922:	c3                   	ret    
c0020923:	90                   	nop

c0020924 <FAT::fixFilepath(char*)>:
c0020924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020928:	8a 00                	mov    al,BYTE PTR [eax]
c002092a:	3c 40                	cmp    al,0x40
c002092c:	7e 2c                	jle    c002095a <FAT::fixFilepath(char*)+0x36>
c002092e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020932:	8a 00                	mov    al,BYTE PTR [eax]
c0020934:	83 e8 41             	sub    eax,0x41
c0020937:	88 c2                	mov    dl,al
c0020939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002093d:	88 10                	mov    BYTE PTR [eax],dl
c002093f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020943:	8a 00                	mov    al,BYTE PTR [eax]
c0020945:	0f be c0             	movsx  eax,al
c0020948:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c002094f:	83 c0 30             	add    eax,0x30
c0020952:	88 c2                	mov    dl,al
c0020954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020958:	88 10                	mov    BYTE PTR [eax],dl
c002095a:	90                   	nop
c002095b:	c3                   	ret    

c002095c <FAT::open(char const*, void**, FileOpenMode)>:
c002095c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020962:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002096a:	74 0a                	je     c0020976 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002096c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020974:	75 0a                	jne    c0020980 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020976:	b8 04 00 00 00       	mov    eax,0x4
c002097b:	e9 fd 00 00 00       	jmp    c0020a7d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020980:	83 ec 08             	sub    esp,0x8
c0020983:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002098a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002098e:	50                   	push   eax
c002098f:	e8 78 fe fd ff       	call   c000080c <strcpy>
c0020994:	83 c4 10             	add    esp,0x10
c0020997:	83 ec 08             	sub    esp,0x8
c002099a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002099e:	50                   	push   eax
c002099f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209a6:	e8 79 ff ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c00209ab:	83 c4 10             	add    esp,0x10
c00209ae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00209b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209bd:	83 e0 01             	and    eax,0x1
c00209c0:	74 08                	je     c00209ca <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00209c2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00209ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209d1:	83 e0 04             	and    eax,0x4
c00209d4:	74 10                	je     c00209e6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00209d6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00209de:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00209e6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209ed:	83 e0 02             	and    eax,0x2
c00209f0:	74 08                	je     c00209fa <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00209f2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00209fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a01:	83 e0 08             	and    eax,0x8
c0020a04:	74 08                	je     c0020a0e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a06:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a15:	83 e0 10             	and    eax,0x10
c0020a18:	74 08                	je     c0020a22 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a1a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a22:	83 ec 0c             	sub    esp,0xc
c0020a25:	68 50 02 00 00       	push   0x250
c0020a2a:	e8 6a eb fe ff       	call   c000f599 <malloc>
c0020a2f:	83 c4 10             	add    esp,0x10
c0020a32:	89 c2                	mov    edx,eax
c0020a34:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a3b:	89 10                	mov    DWORD PTR [eax],edx
c0020a3d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020a45:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a4e:	83 ec 04             	sub    esp,0x4
c0020a51:	52                   	push   edx
c0020a52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020a56:	52                   	push   edx
c0020a57:	50                   	push   eax
c0020a58:	e8 fa 44 fe ff       	call   c0004f57 <f_open>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020a67:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020a6f:	74 07                	je     c0020a78 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020a71:	b8 01 00 00 00       	mov    eax,0x1
c0020a76:	eb 05                	jmp    c0020a7d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a78:	b8 00 00 00 00       	mov    eax,0x0
c0020a7d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a83:	c3                   	ret    

c0020a84 <FAT::openDir(char const*, void**)>:
c0020a84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a92:	74 0a                	je     c0020a9e <FAT::openDir(char const*, void**)+0x1a>
c0020a94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a9c:	75 07                	jne    c0020aa5 <FAT::openDir(char const*, void**)+0x21>
c0020a9e:	b8 04 00 00 00       	mov    eax,0x4
c0020aa3:	eb 7d                	jmp    c0020b22 <FAT::openDir(char const*, void**)+0x9e>
c0020aa5:	83 ec 08             	sub    esp,0x8
c0020aa8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020aaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ab3:	50                   	push   eax
c0020ab4:	e8 53 fd fd ff       	call   c000080c <strcpy>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	83 ec 08             	sub    esp,0x8
c0020abf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ac3:	50                   	push   eax
c0020ac4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020acb:	e8 54 fe ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020ad0:	83 c4 10             	add    esp,0x10
c0020ad3:	83 ec 0c             	sub    esp,0xc
c0020ad6:	6a 4c                	push   0x4c
c0020ad8:	e8 bc ea fe ff       	call   c000f599 <malloc>
c0020add:	83 c4 10             	add    esp,0x10
c0020ae0:	89 c2                	mov    edx,eax
c0020ae2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ae9:	89 10                	mov    DWORD PTR [eax],edx
c0020aeb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020af4:	83 ec 08             	sub    esp,0x8
c0020af7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020afb:	52                   	push   edx
c0020afc:	50                   	push   eax
c0020afd:	e8 8d 54 fe ff       	call   c0005f8f <f_opendir>
c0020b02:	83 c4 10             	add    esp,0x10
c0020b05:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b0c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b14:	74 07                	je     c0020b1d <FAT::openDir(char const*, void**)+0x99>
c0020b16:	b8 01 00 00 00       	mov    eax,0x1
c0020b1b:	eb 05                	jmp    c0020b22 <FAT::openDir(char const*, void**)+0x9e>
c0020b1d:	b8 00 00 00 00       	mov    eax,0x0
c0020b22:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b28:	c3                   	ret    
c0020b29:	90                   	nop

c0020b2a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b2a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b30:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b38:	75 0a                	jne    c0020b44 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b3a:	b8 04 00 00 00       	mov    eax,0x4
c0020b3f:	e9 c9 00 00 00       	jmp    c0020c0d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b44:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020b4c:	75 0a                	jne    c0020b58 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020b4e:	b8 04 00 00 00       	mov    eax,0x4
c0020b53:	e9 b5 00 00 00       	jmp    c0020c0d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b58:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020b60:	75 0a                	jne    c0020b6c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020b62:	b8 04 00 00 00       	mov    eax,0x4
c0020b67:	e9 a1 00 00 00       	jmp    c0020c0d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b6c:	83 ec 08             	sub    esp,0x8
c0020b6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b76:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b7d:	50                   	push   eax
c0020b7e:	e8 89 fc fd ff       	call   c000080c <strcpy>
c0020b83:	83 c4 10             	add    esp,0x10
c0020b86:	83 ec 08             	sub    esp,0x8
c0020b89:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020b90:	50                   	push   eax
c0020b91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b98:	e8 87 fd ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	83 ec 08             	sub    esp,0x8
c0020ba3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ba7:	50                   	push   eax
c0020ba8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020baf:	50                   	push   eax
c0020bb0:	e8 99 55 fe ff       	call   c000614e <f_stat>
c0020bb5:	83 c4 10             	add    esp,0x10
c0020bb8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020bbf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020bc6:	85 c0                	test   eax,eax
c0020bc8:	74 07                	je     c0020bd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020bca:	83 f8 04             	cmp    eax,0x4
c0020bcd:	74 32                	je     c0020c01 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020bcf:	eb 37                	jmp    c0020c08 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020bd1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020bd5:	0f b6 c0             	movzx  eax,al
c0020bd8:	83 e0 10             	and    eax,0x10
c0020bdb:	0f 95 c2             	setne  dl
c0020bde:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020be5:	88 10                	mov    BYTE PTR [eax],dl
c0020be7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020bee:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020bf5:	89 01                	mov    DWORD PTR [ecx],eax
c0020bf7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bfa:	b8 00 00 00 00       	mov    eax,0x0
c0020bff:	eb 0c                	jmp    c0020c0d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c01:	b8 02 00 00 00       	mov    eax,0x2
c0020c06:	eb 05                	jmp    c0020c0d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c08:	b8 01 00 00 00       	mov    eax,0x1
c0020c0d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c13:	c3                   	ret    

c0020c14 <FAT::unlink(char const*)>:
c0020c14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c22:	75 07                	jne    c0020c2b <FAT::unlink(char const*)+0x17>
c0020c24:	b8 04 00 00 00       	mov    eax,0x4
c0020c29:	eb 5c                	jmp    c0020c87 <FAT::unlink(char const*)+0x73>
c0020c2b:	83 ec 08             	sub    esp,0x8
c0020c2e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c39:	50                   	push   eax
c0020c3a:	e8 cd fb fd ff       	call   c000080c <strcpy>
c0020c3f:	83 c4 10             	add    esp,0x10
c0020c42:	83 ec 08             	sub    esp,0x8
c0020c45:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c49:	50                   	push   eax
c0020c4a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c51:	e8 ce fc ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020c56:	83 c4 10             	add    esp,0x10
c0020c59:	83 ec 0c             	sub    esp,0xc
c0020c5c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c60:	50                   	push   eax
c0020c61:	e8 3a 58 fe ff       	call   c00064a0 <f_unlink>
c0020c66:	83 c4 10             	add    esp,0x10
c0020c69:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c70:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c77:	85 c0                	test   eax,eax
c0020c79:	75 07                	jne    c0020c82 <FAT::unlink(char const*)+0x6e>
c0020c7b:	b8 00 00 00 00       	mov    eax,0x0
c0020c80:	eb 05                	jmp    c0020c87 <FAT::unlink(char const*)+0x73>
c0020c82:	b8 01 00 00 00       	mov    eax,0x1
c0020c87:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c8d:	c3                   	ret    

c0020c8e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020c8e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020c94:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020c9b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020ca2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ca6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020caa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020cb2:	75 0a                	jne    c0020cbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020cb4:	b8 04 00 00 00       	mov    eax,0x4
c0020cb9:	e9 1c 01 00 00       	jmp    c0020dda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020cbe:	83 ec 08             	sub    esp,0x8
c0020cc1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020cc8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ccc:	50                   	push   eax
c0020ccd:	e8 3a fb fd ff       	call   c000080c <strcpy>
c0020cd2:	83 c4 10             	add    esp,0x10
c0020cd5:	83 ec 08             	sub    esp,0x8
c0020cd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020cdc:	50                   	push   eax
c0020cdd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020ce4:	e8 3b fc ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020ce9:	83 c4 10             	add    esp,0x10
c0020cec:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020cf4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020cfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d01:	83 e0 01             	and    eax,0x1
c0020d04:	74 08                	je     c0020d0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d06:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d13:	83 e0 02             	and    eax,0x2
c0020d16:	74 08                	je     c0020d20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d18:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d25:	83 e0 04             	and    eax,0x4
c0020d28:	74 08                	je     c0020d32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d2a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d32:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d37:	83 e0 08             	and    eax,0x8
c0020d3a:	74 08                	je     c0020d44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020d3c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020d44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d49:	83 e0 01             	and    eax,0x1
c0020d4c:	74 08                	je     c0020d56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020d4e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020d56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d5b:	83 e0 02             	and    eax,0x2
c0020d5e:	74 08                	je     c0020d68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020d60:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020d68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d6d:	83 e0 04             	and    eax,0x4
c0020d70:	74 08                	je     c0020d7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020d72:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020d7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d7f:	83 e0 08             	and    eax,0x8
c0020d82:	74 08                	je     c0020d8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020d84:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020d8c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020d93:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020d9a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020da2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020daa:	83 ec 04             	sub    esp,0x4
c0020dad:	52                   	push   edx
c0020dae:	50                   	push   eax
c0020daf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020db3:	50                   	push   eax
c0020db4:	e8 89 5d fe ff       	call   c0006b42 <f_chmod>
c0020db9:	83 c4 10             	add    esp,0x10
c0020dbc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020dc3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020dca:	85 c0                	test   eax,eax
c0020dcc:	75 07                	jne    c0020dd5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020dce:	b8 00 00 00 00       	mov    eax,0x0
c0020dd3:	eb 05                	jmp    c0020dda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020dd5:	b8 01 00 00 00       	mov    eax,0x1
c0020dda:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020de0:	c3                   	ret    
c0020de1:	90                   	nop

c0020de2 <FAT::rename(char const*, char const*)>:
c0020de2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020de8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020df0:	74 0a                	je     c0020dfc <FAT::rename(char const*, char const*)+0x1a>
c0020df2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020dfa:	75 0a                	jne    c0020e06 <FAT::rename(char const*, char const*)+0x24>
c0020dfc:	b8 04 00 00 00       	mov    eax,0x4
c0020e01:	e9 98 00 00 00       	jmp    c0020e9e <FAT::rename(char const*, char const*)+0xbc>
c0020e06:	83 ec 08             	sub    esp,0x8
c0020e09:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e10:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e17:	50                   	push   eax
c0020e18:	e8 ef f9 fd ff       	call   c000080c <strcpy>
c0020e1d:	83 c4 10             	add    esp,0x10
c0020e20:	83 ec 08             	sub    esp,0x8
c0020e23:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e2a:	50                   	push   eax
c0020e2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e32:	e8 ed fa ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	83 ec 08             	sub    esp,0x8
c0020e3d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020e44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e48:	50                   	push   eax
c0020e49:	e8 be f9 fd ff       	call   c000080c <strcpy>
c0020e4e:	83 c4 10             	add    esp,0x10
c0020e51:	83 ec 08             	sub    esp,0x8
c0020e54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e58:	50                   	push   eax
c0020e59:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e60:	e8 bf fa ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020e65:	83 c4 10             	add    esp,0x10
c0020e68:	83 ec 08             	sub    esp,0x8
c0020e6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e6f:	50                   	push   eax
c0020e70:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e77:	50                   	push   eax
c0020e78:	e8 d2 59 fe ff       	call   c000684f <f_rename>
c0020e7d:	83 c4 10             	add    esp,0x10
c0020e80:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020e87:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020e8e:	85 c0                	test   eax,eax
c0020e90:	75 07                	jne    c0020e99 <FAT::rename(char const*, char const*)+0xb7>
c0020e92:	b8 00 00 00 00       	mov    eax,0x0
c0020e97:	eb 05                	jmp    c0020e9e <FAT::rename(char const*, char const*)+0xbc>
c0020e99:	b8 01 00 00 00       	mov    eax,0x1
c0020e9e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020ea4:	c3                   	ret    
c0020ea5:	90                   	nop

c0020ea6 <FAT::mkdir(char const*)>:
c0020ea6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020eac:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020eb4:	75 07                	jne    c0020ebd <FAT::mkdir(char const*)+0x17>
c0020eb6:	b8 04 00 00 00       	mov    eax,0x4
c0020ebb:	eb 5c                	jmp    c0020f19 <FAT::mkdir(char const*)+0x73>
c0020ebd:	83 ec 08             	sub    esp,0x8
c0020ec0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ec7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ecb:	50                   	push   eax
c0020ecc:	e8 3b f9 fd ff       	call   c000080c <strcpy>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	83 ec 08             	sub    esp,0x8
c0020ed7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020edb:	50                   	push   eax
c0020edc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ee3:	e8 3c fa ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020ee8:	83 c4 10             	add    esp,0x10
c0020eeb:	83 ec 0c             	sub    esp,0xc
c0020eee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ef2:	50                   	push   eax
c0020ef3:	e8 2b 57 fe ff       	call   c0006623 <f_mkdir>
c0020ef8:	83 c4 10             	add    esp,0x10
c0020efb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f02:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f09:	85 c0                	test   eax,eax
c0020f0b:	75 07                	jne    c0020f14 <FAT::mkdir(char const*)+0x6e>
c0020f0d:	b8 00 00 00 00       	mov    eax,0x0
c0020f12:	eb 05                	jmp    c0020f19 <FAT::mkdir(char const*)+0x73>
c0020f14:	b8 01 00 00 00       	mov    eax,0x1
c0020f19:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f1f:	c3                   	ret    

c0020f20 <FAT::exists(char const*)>:
c0020f20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f26:	83 ec 08             	sub    esp,0x8
c0020f29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f34:	50                   	push   eax
c0020f35:	e8 d2 f8 fd ff       	call   c000080c <strcpy>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	83 ec 08             	sub    esp,0x8
c0020f40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f44:	50                   	push   eax
c0020f45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f4c:	e8 d3 f9 ff ff       	call   c0020924 <FAT::fixFilepath(char*)>
c0020f51:	83 c4 10             	add    esp,0x10
c0020f54:	83 ec 08             	sub    esp,0x8
c0020f57:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020f5e:	50                   	push   eax
c0020f5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f63:	50                   	push   eax
c0020f64:	e8 e5 51 fe ff       	call   c000614e <f_stat>
c0020f69:	83 c4 10             	add    esp,0x10
c0020f6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020f73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020f7a:	85 c0                	test   eax,eax
c0020f7c:	75 04                	jne    c0020f82 <FAT::exists(char const*)+0x62>
c0020f7e:	b0 01                	mov    al,0x1
c0020f80:	eb 02                	jmp    c0020f84 <FAT::exists(char const*)+0x64>
c0020f82:	b0 00                	mov    al,0x0
c0020f84:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020f8a:	c3                   	ret    
c0020f8b:	90                   	nop

c0020f8c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020f8c:	b8 08 00 00 00       	mov    eax,0x8
c0020f91:	c3                   	ret    

c0020f92 <ISO9660::seek(void*, unsigned long long)>:
c0020f92:	53                   	push   ebx
c0020f93:	b8 04 00 00 00       	mov    eax,0x4
c0020f98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fa0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020fa4:	85 d2                	test   edx,edx
c0020fa6:	74 17                	je     c0020fbf <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020fa8:	89 c8                	mov    eax,ecx
c0020faa:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020fad:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020fb0:	b8 01 00 00 00       	mov    eax,0x1
c0020fb5:	73 08                	jae    c0020fbf <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020fb7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020fba:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020fbd:	31 c0                	xor    eax,eax
c0020fbf:	5b                   	pop    ebx
c0020fc0:	c3                   	ret    
c0020fc1:	90                   	nop

c0020fc2 <ISO9660::tell(void*, unsigned long long*)>:
c0020fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fca:	85 d2                	test   edx,edx
c0020fcc:	74 12                	je     c0020fe0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020fce:	85 c0                	test   eax,eax
c0020fd0:	74 0e                	je     c0020fe0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020fd2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020fd5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020fd8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020fdb:	89 10                	mov    DWORD PTR [eax],edx
c0020fdd:	31 c0                	xor    eax,eax
c0020fdf:	c3                   	ret    
c0020fe0:	b8 04 00 00 00       	mov    eax,0x4
c0020fe5:	c3                   	ret    

c0020fe6 <ISO9660::getName()>:
c0020fe6:	b8 dc bd 02 c0       	mov    eax,0xc002bddc
c0020feb:	c3                   	ret    

c0020fec <ISO9660::stat(void*, unsigned long long*)>:
c0020fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ff4:	85 d2                	test   edx,edx
c0020ff6:	74 12                	je     c002100a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ff8:	85 c0                	test   eax,eax
c0020ffa:	74 0e                	je     c002100a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ffc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020fff:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021002:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021005:	89 10                	mov    DWORD PTR [eax],edx
c0021007:	31 c0                	xor    eax,eax
c0021009:	c3                   	ret    
c002100a:	b8 04 00 00 00       	mov    eax,0x4
c002100f:	c3                   	ret    

c0021010 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021010:	b8 01 00 00 00       	mov    eax,0x1
c0021015:	c3                   	ret    

c0021016 <ISO9660::unlink(char const*)>:
c0021016:	b8 01 00 00 00       	mov    eax,0x1
c002101b:	c3                   	ret    

c002101c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002101c:	b8 01 00 00 00       	mov    eax,0x1
c0021021:	c3                   	ret    

c0021022 <ISO9660::rename(char const*, char const*)>:
c0021022:	b8 01 00 00 00       	mov    eax,0x1
c0021027:	c3                   	ret    

c0021028 <ISO9660::mkdir(char const*)>:
c0021028:	b8 01 00 00 00       	mov    eax,0x1
c002102d:	c3                   	ret    

c002102e <ISO9660::close(void*)>:
c002102e:	83 ec 0c             	sub    esp,0xc
c0021031:	b8 04 00 00 00       	mov    eax,0x4
c0021036:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002103a:	85 d2                	test   edx,edx
c002103c:	74 0e                	je     c002104c <ISO9660::close(void*)+0x1e>
c002103e:	83 ec 0c             	sub    esp,0xc
c0021041:	52                   	push   edx
c0021042:	e8 62 e5 fe ff       	call   c000f5a9 <free>
c0021047:	83 c4 10             	add    esp,0x10
c002104a:	31 c0                	xor    eax,eax
c002104c:	83 c4 0c             	add    esp,0xc
c002104f:	c3                   	ret    

c0021050 <ISO9660::closeDir(void*)>:
c0021050:	83 ec 0c             	sub    esp,0xc
c0021053:	b8 04 00 00 00       	mov    eax,0x4
c0021058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002105c:	85 d2                	test   edx,edx
c002105e:	74 0e                	je     c002106e <ISO9660::closeDir(void*)+0x1e>
c0021060:	83 ec 0c             	sub    esp,0xc
c0021063:	52                   	push   edx
c0021064:	e8 40 e5 fe ff       	call   c000f5a9 <free>
c0021069:	83 c4 10             	add    esp,0x10
c002106c:	31 c0                	xor    eax,eax
c002106e:	83 c4 0c             	add    esp,0xc
c0021071:	c3                   	ret    

c0021072 <ISO9660::~ISO9660()>:
c0021072:	83 ec 0c             	sub    esp,0xc
c0021075:	ba 00 be 02 c0       	mov    edx,0xc002be00
c002107a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002107e:	89 10                	mov    DWORD PTR [eax],edx
c0021080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021084:	83 ec 0c             	sub    esp,0xc
c0021087:	50                   	push   eax
c0021088:	e8 0b 19 ff ff       	call   c0012998 <Filesystem::~Filesystem()>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	90                   	nop
c0021091:	83 c4 0c             	add    esp,0xc
c0021094:	c3                   	ret    
c0021095:	90                   	nop

c0021096 <ISO9660::~ISO9660()>:
c0021096:	83 ec 0c             	sub    esp,0xc
c0021099:	83 ec 0c             	sub    esp,0xc
c002109c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210a0:	e8 cd ff ff ff       	call   c0021072 <ISO9660::~ISO9660()>
c00210a5:	83 c4 10             	add    esp,0x10
c00210a8:	83 ec 08             	sub    esp,0x8
c00210ab:	6a 08                	push   0x8
c00210ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210b1:	e8 db 14 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00210b6:	83 c4 10             	add    esp,0x10
c00210b9:	83 c4 0c             	add    esp,0xc
c00210bc:	c3                   	ret    

c00210bd <__memmem(unsigned char*, int, unsigned char*, int)>:
c00210bd:	55                   	push   ebp
c00210be:	31 c9                	xor    ecx,ecx
c00210c0:	57                   	push   edi
c00210c1:	56                   	push   esi
c00210c2:	53                   	push   ebx
c00210c3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00210c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00210cb:	89 eb                	mov    ebx,ebp
c00210cd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00210d1:	39 ce                	cmp    esi,ecx
c00210d3:	7e 17                	jle    c00210ec <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00210d5:	31 d2                	xor    edx,edx
c00210d7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00210db:	7d 13                	jge    c00210f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00210dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00210e1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00210e4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00210e7:	75 0d                	jne    c00210f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00210e9:	42                   	inc    edx
c00210ea:	eb eb                	jmp    c00210d7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00210ec:	31 c0                	xor    eax,eax
c00210ee:	eb 0a                	jmp    c00210fa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00210f0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00210f4:	eb 04                	jmp    c00210fa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00210f6:	41                   	inc    ecx
c00210f7:	43                   	inc    ebx
c00210f8:	eb d7                	jmp    c00210d1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00210fa:	5b                   	pop    ebx
c00210fb:	5e                   	pop    esi
c00210fc:	5f                   	pop    edi
c00210fd:	5d                   	pop    ebp
c00210fe:	c3                   	ret    

c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00210ff:	57                   	push   edi
c0021100:	56                   	push   esi
c0021101:	53                   	push   ebx
c0021102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021106:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002110a:	39 0d a0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fa0,ecx
c0021110:	75 08                	jne    c002111a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021112:	38 05 14 ce 02 c0    	cmp    BYTE PTR ds:0xc002ce14,al
c0021118:	74 2b                	je     c0021145 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002111a:	83 ec 0c             	sub    esp,0xc
c002111d:	a2 14 ce 02 c0       	mov    ds:0xc002ce14,al
c0021122:	68 c0 0f 03 c0       	push   0xc0030fc0
c0021127:	0f be c0             	movsx  eax,al
c002112a:	6a 01                	push   0x1
c002112c:	89 0d a0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa0,ecx
c0021132:	31 db                	xor    ebx,ebx
c0021134:	53                   	push   ebx
c0021135:	51                   	push   ecx
c0021136:	ff 34 85 7c dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2284]
c002113d:	e8 7c 4e ff ff       	call   c0015fbe <LogicalDisk::read(unsigned long long, int, void*)>
c0021142:	83 c4 20             	add    esp,0x20
c0021145:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021149:	be c0 0f 03 c0       	mov    esi,0xc0030fc0
c002114e:	b9 00 08 00 00       	mov    ecx,0x800
c0021153:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021155:	5b                   	pop    ebx
c0021156:	5e                   	pop    esi
c0021157:	5f                   	pop    edi
c0021158:	c3                   	ret    
c0021159:	90                   	nop

c002115a <ISO9660::tryMount(LogicalDisk*, int)>:
c002115a:	81 ec 10 08 00 00    	sub    esp,0x810
c0021160:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021167:	83 c0 41             	add    eax,0x41
c002116a:	0f be c0             	movsx  eax,al
c002116d:	50                   	push   eax
c002116e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021172:	50                   	push   eax
c0021173:	6a 10                	push   0x10
c0021175:	e8 85 ff ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002117a:	83 c4 10             	add    esp,0x10
c002117d:	31 c0                	xor    eax,eax
c002117f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021184:	75 1d                	jne    c00211a3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021186:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002118b:	75 16                	jne    c00211a3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002118d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021192:	75 0f                	jne    c00211a3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021194:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021199:	75 08                	jne    c00211a3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002119b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00211a0:	0f 94 c0             	sete   al
c00211a3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00211a9:	c3                   	ret    

c00211aa <ISO9660::read(void*, unsigned long, void*, int*)>:
c00211aa:	55                   	push   ebp
c00211ab:	57                   	push   edi
c00211ac:	56                   	push   esi
c00211ad:	53                   	push   ebx
c00211ae:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00211b4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00211bb:	85 ed                	test   ebp,ebp
c00211bd:	0f 84 da 01 00 00    	je     c002139d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00211c3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00211cb:	0f 84 cc 01 00 00    	je     c002139d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00211d1:	b8 01 00 00 00       	mov    eax,0x1
c00211d6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00211da:	0f 85 c2 01 00 00    	jne    c00213a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00211e0:	31 d2                	xor    edx,edx
c00211e2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00211e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00211ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00211ef:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00211f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00211f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211f9:	01 c8                	add    eax,ecx
c00211fb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00211fe:	11 da                	adc    edx,ebx
c0021200:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021204:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021208:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002120c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021210:	19 d7                	sbb    edi,edx
c0021212:	72 11                	jb     c0021225 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021214:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021217:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002121b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002121f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021223:	eb 0c                	jmp    c0021231 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021225:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021229:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002122d:	29 ce                	sub    esi,ecx
c002122f:	19 df                	sbb    edi,ebx
c0021231:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021234:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021237:	0f a4 c2 0b          	shld   edx,eax,0xb
c002123b:	c1 e0 0b             	shl    eax,0xb
c002123e:	01 c8                	add    eax,ecx
c0021240:	11 da                	adc    edx,ebx
c0021242:	89 04 24             	mov    DWORD PTR [esp],eax
c0021245:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021249:	51                   	push   ecx
c002124a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002124e:	50                   	push   eax
c002124f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021253:	53                   	push   ebx
c0021254:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002125c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021260:	50                   	push   eax
c0021261:	e8 99 fe ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021266:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021269:	b8 00 08 00 00       	mov    eax,0x800
c002126e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021274:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021278:	29 d0                	sub    eax,edx
c002127a:	83 c4 10             	add    esp,0x10
c002127d:	89 f9                	mov    ecx,edi
c002127f:	39 c6                	cmp    esi,eax
c0021281:	83 d9 00             	sbb    ecx,0x0
c0021284:	7d 1b                	jge    c00212a1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021286:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002128b:	75 12                	jne    c002129f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002128d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021294:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002129a:	e9 fa 00 00 00       	jmp    c0021399 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002129f:	89 f0                	mov    eax,esi
c00212a1:	01 d3                	add    ebx,edx
c00212a3:	31 d2                	xor    edx,edx
c00212a5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00212a9:	39 c2                	cmp    edx,eax
c00212ab:	7d 14                	jge    c00212c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00212ad:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00212b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00212b8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00212bb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00212be:	42                   	inc    edx
c00212bf:	eb e8                	jmp    c00212a9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00212c1:	89 c2                	mov    edx,eax
c00212c3:	85 c0                	test   eax,eax
c00212c5:	79 02                	jns    c00212c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00212c7:	31 d2                	xor    edx,edx
c00212c9:	01 c2                	add    edx,eax
c00212cb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00212ce:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00212d5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00212d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00212dd:	99                   	cdq    
c00212de:	01 c1                	add    ecx,eax
c00212e0:	11 d3                	adc    ebx,edx
c00212e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00212e6:	29 c6                	sub    esi,eax
c00212e8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00212ec:	19 d7                	sbb    edi,edx
c00212ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00212f1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00212f5:	b8 ff 07 00 00       	mov    eax,0x7ff
c00212fa:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00212fd:	b8 00 00 00 00       	mov    eax,0x0
c0021302:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021306:	7d 43                	jge    c002134b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021308:	52                   	push   edx
c0021309:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002130d:	50                   	push   eax
c002130e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021316:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002131a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002131e:	50                   	push   eax
c002131f:	e8 db fd ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021324:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002132c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021331:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021339:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021341:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	eb aa                	jmp    c00212f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002134b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002134f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021352:	74 2a                	je     c002137e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021354:	50                   	push   eax
c0021355:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021359:	50                   	push   eax
c002135a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002135e:	56                   	push   esi
c002135f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021363:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021367:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002136b:	51                   	push   ecx
c002136c:	e8 8e fd ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021371:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021375:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021379:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021385:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021389:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002138d:	89 18                	mov    DWORD PTR [eax],ebx
c002138f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021393:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021396:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021399:	31 c0                	xor    eax,eax
c002139b:	eb 05                	jmp    c00213a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002139d:	b8 04 00 00 00       	mov    eax,0x4
c00213a2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00213a8:	5b                   	pop    ebx
c00213a9:	5e                   	pop    esi
c00213aa:	5f                   	pop    edi
c00213ab:	5d                   	pop    ebp
c00213ac:	c3                   	ret    
c00213ad:	90                   	nop

c00213ae <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00213ae:	55                   	push   ebp
c00213af:	57                   	push   edi
c00213b0:	56                   	push   esi
c00213b1:	53                   	push   ebx
c00213b2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00213b8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00213bf:	85 ed                	test   ebp,ebp
c00213c1:	0f 84 51 02 00 00    	je     c0021618 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00213c7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00213cf:	0f 84 43 02 00 00    	je     c0021618 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00213d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00213d8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00213db:	75 0a                	jne    c00213e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00213dd:	b8 07 00 00 00       	mov    eax,0x7
c00213e2:	e9 36 02 00 00       	jmp    c002161d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00213e7:	50                   	push   eax
c00213e8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213ec:	50                   	push   eax
c00213ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00213f4:	53                   	push   ebx
c00213f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00213f8:	c1 e0 0b             	shl    eax,0xb
c00213fb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00213fe:	c1 e8 0b             	shr    eax,0xb
c0021401:	50                   	push   eax
c0021402:	e8 f8 fc ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021407:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002140a:	83 c4 10             	add    esp,0x10
c002140d:	89 c1                	mov    ecx,eax
c002140f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021412:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021418:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002141b:	84 db                	test   bl,bl
c002141d:	0f 85 8b 00 00 00    	jne    c00214ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021423:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021429:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002142c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021432:	29 c6                	sub    esi,eax
c0021434:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021438:	89 f3                	mov    ebx,esi
c002143a:	89 f1                	mov    ecx,esi
c002143c:	c1 fb 1f             	sar    ebx,0x1f
c002143f:	01 f0                	add    eax,esi
c0021441:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021444:	11 da                	adc    edx,ebx
c0021446:	89 04 24             	mov    DWORD PTR [esp],eax
c0021449:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002144d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021450:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021453:	89 d8                	mov    eax,ebx
c0021455:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021459:	ba 00 00 00 00       	mov    edx,0x0
c002145e:	19 f8                	sbb    eax,edi
c0021460:	b8 00 00 00 00       	mov    eax,0x0
c0021465:	73 08                	jae    c002146f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021467:	89 f0                	mov    eax,esi
c0021469:	89 fa                	mov    edx,edi
c002146b:	29 c8                	sub    eax,ecx
c002146d:	19 da                	sbb    edx,ebx
c002146f:	89 d7                	mov    edi,edx
c0021471:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021474:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021477:	09 c7                	or     edi,eax
c0021479:	0f 84 5e ff ff ff    	je     c00213dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002147f:	57                   	push   edi
c0021480:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021484:	50                   	push   eax
c0021485:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002148c:	53                   	push   ebx
c002148d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021490:	c1 e0 0b             	shl    eax,0xb
c0021493:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021497:	c1 e8 0b             	shr    eax,0xb
c002149a:	50                   	push   eax
c002149b:	e8 5f fc ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214a3:	83 c4 10             	add    esp,0x10
c00214a6:	25 ff 07 00 00       	and    eax,0x7ff
c00214ab:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00214ae:	31 ff                	xor    edi,edi
c00214b0:	56                   	push   esi
c00214b1:	6a 28                	push   0x28
c00214b3:	6a 00                	push   0x0
c00214b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214b9:	50                   	push   eax
c00214ba:	e8 91 f2 fd ff       	call   c0000750 <memset>
c00214bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214c2:	25 ff 07 00 00       	and    eax,0x7ff
c00214c7:	89 c6                	mov    esi,eax
c00214c9:	83 c6 21             	add    esi,0x21
c00214cc:	83 d7 00             	adc    edi,0x0
c00214cf:	83 c4 10             	add    esp,0x10
c00214d2:	31 c9                	xor    ecx,ecx
c00214d4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00214db:	83 f9 28             	cmp    ecx,0x28
c00214de:	88 04 24             	mov    BYTE PTR [esp],al
c00214e1:	0f 94 c2             	sete   dl
c00214e4:	88 d0                	mov    al,dl
c00214e6:	ba ff 07 00 00       	mov    edx,0x7ff
c00214eb:	39 f2                	cmp    edx,esi
c00214ed:	ba 00 00 00 00       	mov    edx,0x0
c00214f2:	19 fa                	sbb    edx,edi
c00214f4:	0f 92 c2             	setb   dl
c00214f7:	09 c2                	or     edx,eax
c00214f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00214fd:	0f 94 c0             	sete   al
c0021500:	08 d0                	or     al,dl
c0021502:	75 16                	jne    c002151a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021504:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021508:	74 10                	je     c002151a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002150a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002150d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021511:	41                   	inc    ecx
c0021512:	83 c6 01             	add    esi,0x1
c0021515:	83 d7 00             	adc    edi,0x0
c0021518:	eb ba                	jmp    c00214d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002151a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021521:	83 ec 0c             	sub    esp,0xc
c0021524:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021528:	56                   	push   esi
c0021529:	e8 3e f2 fd ff       	call   c000076c <strlen>
c002152e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021535:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021539:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021541:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021544:	5a                   	pop    edx
c0021545:	25 ff 07 00 00       	and    eax,0x7ff
c002154a:	59                   	pop    ecx
c002154b:	01 f8                	add    eax,edi
c002154d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021553:	83 e0 02             	and    eax,0x2
c0021556:	3c 01                	cmp    al,0x1
c0021558:	19 c0                	sbb    eax,eax
c002155a:	83 c0 02             	add    eax,0x2
c002155d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021561:	56                   	push   esi
c0021562:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021566:	50                   	push   eax
c0021567:	e8 a0 f2 fd ff       	call   c000080c <strcpy>
c002156c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	84 c0                	test   al,al
c0021575:	75 21                	jne    c0021598 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021577:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002157f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021587:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002158f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021596:	eb 28                	jmp    c00215c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021598:	fe c8                	dec    al
c002159a:	75 24                	jne    c00215c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002159c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00215a4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215ac:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215b4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00215bb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00215c0:	8d 74 24 40          	lea    esi,[esp+0x40]
c00215c4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00215cb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00215d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215d4:	0f b6 f3             	movzx  esi,bl
c00215d7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00215de:	31 db                	xor    ebx,ebx
c00215e0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00215e6:	89 df                	mov    edi,ebx
c00215e8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00215eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215ee:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00215f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00215f4:	39 c6                	cmp    esi,eax
c00215f6:	19 d7                	sbb    edi,edx
c00215f8:	72 10                	jb     c002160a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00215fa:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021601:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021608:	eb 0a                	jmp    c0021614 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002160a:	29 f0                	sub    eax,esi
c002160c:	19 da                	sbb    edx,ebx
c002160e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021611:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021614:	31 c0                	xor    eax,eax
c0021616:	eb 05                	jmp    c002161d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021618:	b8 04 00 00 00       	mov    eax,0x4
c002161d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021623:	5b                   	pop    ebx
c0021624:	5e                   	pop    esi
c0021625:	5f                   	pop    edi
c0021626:	5d                   	pop    ebp
c0021627:	c3                   	ret    

c0021628 <readRoot(unsigned int*, unsigned int*, char)>:
c0021628:	57                   	push   edi
c0021629:	56                   	push   esi
c002162a:	81 ec 38 08 00 00    	sub    esp,0x838
c0021630:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021638:	50                   	push   eax
c0021639:	8d 44 24 38          	lea    eax,[esp+0x38]
c002163d:	50                   	push   eax
c002163e:	6a 10                	push   0x10
c0021640:	e8 ba fa ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021645:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002164c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021650:	b9 22 00 00 00       	mov    ecx,0x22
c0021655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021657:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002165e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021662:	89 10                	mov    DWORD PTR [eax],edx
c0021664:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002166b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002166f:	89 10                	mov    DWORD PTR [eax],edx
c0021671:	81 c4 44 08 00 00    	add    esp,0x844
c0021677:	b0 01                	mov    al,0x1
c0021679:	5e                   	pop    esi
c002167a:	5f                   	pop    edi
c002167b:	c3                   	ret    

c002167c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002167c:	55                   	push   ebp
c002167d:	57                   	push   edi
c002167e:	56                   	push   esi
c002167f:	53                   	push   ebx
c0021680:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021686:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002168d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021698:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002169c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00216a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216a4:	75 03                	jne    c00216a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216a6:	83 c3 02             	add    ebx,0x2
c00216a9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00216ac:	75 03                	jne    c00216b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00216ae:	43                   	inc    ebx
c00216af:	eb f8                	jmp    c00216a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216b1:	51                   	push   ecx
c00216b2:	68 00 01 00 00       	push   0x100
c00216b7:	6a 00                	push   0x0
c00216b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216bd:	50                   	push   eax
c00216be:	e8 8d f0 fd ff       	call   c0000750 <memset>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	31 d2                	xor    edx,edx
c00216c8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00216cb:	84 c0                	test   al,al
c00216cd:	74 21                	je     c00216f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00216cf:	3c 2f                	cmp    al,0x2f
c00216d1:	75 0b                	jne    c00216de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00216d3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00216d7:	bd 01 00 00 00       	mov    ebp,0x1
c00216dc:	eb 14                	jmp    c00216f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00216de:	8d 48 9f             	lea    ecx,[eax-0x61]
c00216e1:	80 f9 19             	cmp    cl,0x19
c00216e4:	77 03                	ja     c00216e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00216e6:	83 e8 20             	sub    eax,0x20
c00216e9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00216ed:	42                   	inc    edx
c00216ee:	eb d8                	jmp    c00216c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00216f0:	31 ed                	xor    ebp,ebp
c00216f2:	83 ec 0c             	sub    esp,0xc
c00216f5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00216fc:	e8 98 de fe ff       	call   c000f599 <malloc>
c0021701:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021708:	89 c6                	mov    esi,eax
c002170a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021710:	c1 ef 0b             	shr    edi,0xb
c0021713:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002171a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002171e:	83 c4 10             	add    esp,0x10
c0021721:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021726:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002172a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021731:	74 28                	je     c002175b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021733:	52                   	push   edx
c0021734:	57                   	push   edi
c0021735:	50                   	push   eax
c0021736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002173a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021741:	e8 b9 f9 ff ff       	call   c00210ff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002174a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021751:	05 00 08 00 00       	add    eax,0x800
c0021756:	83 c4 10             	add    esp,0x10
c0021759:	eb cb                	jmp    c0021726 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002175b:	83 ec 0c             	sub    esp,0xc
c002175e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021762:	57                   	push   edi
c0021763:	e8 04 f0 fd ff       	call   c000076c <strlen>
c0021768:	50                   	push   eax
c0021769:	57                   	push   edi
c002176a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021771:	56                   	push   esi
c0021772:	e8 46 f9 ff ff       	call   c00210bd <__memmem(unsigned char*, int, unsigned char*, int)>
c0021777:	83 c4 20             	add    esp,0x20
c002177a:	85 c0                	test   eax,eax
c002177c:	75 13                	jne    c0021791 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002177e:	83 ec 0c             	sub    esp,0xc
c0021781:	56                   	push   esi
c0021782:	e8 22 de fe ff       	call   c000f5a9 <free>
c0021787:	83 c4 10             	add    esp,0x10
c002178a:	31 c0                	xor    eax,eax
c002178c:	e9 b3 00 00 00       	jmp    c0021844 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021791:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021795:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021799:	c1 e7 08             	shl    edi,0x8
c002179c:	c1 e2 10             	shl    edx,0x10
c002179f:	09 d7                	or     edi,edx
c00217a1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00217a5:	09 d7                	or     edi,edx
c00217a7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00217ab:	c1 e2 18             	shl    edx,0x18
c00217ae:	09 d7                	or     edi,edx
c00217b0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00217b4:	89 d1                	mov    ecx,edx
c00217b6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00217ba:	c1 e1 08             	shl    ecx,0x8
c00217bd:	c1 e2 10             	shl    edx,0x10
c00217c0:	09 ca                	or     edx,ecx
c00217c2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00217c6:	09 ca                	or     edx,ecx
c00217c8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00217cc:	c1 e1 18             	shl    ecx,0x18
c00217cf:	09 ca                	or     edx,ecx
c00217d1:	89 e9                	mov    ecx,ebp
c00217d3:	84 c9                	test   cl,cl
c00217d5:	74 3c                	je     c0021813 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00217d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00217db:	83 ec 0c             	sub    esp,0xc
c00217de:	56                   	push   esi
c00217df:	e8 c5 dd fe ff       	call   c000f5a9 <free>
c00217e4:	83 c4 0c             	add    esp,0xc
c00217e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00217ee:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00217f3:	50                   	push   eax
c00217f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00217fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021802:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021806:	52                   	push   edx
c0021807:	57                   	push   edi
c0021808:	53                   	push   ebx
c0021809:	e8 6e fe ff ff       	call   c002167c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002180e:	83 c4 20             	add    esp,0x20
c0021811:	eb 31                	jmp    c0021844 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021813:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021816:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002181d:	d0 e8                	shr    al,1
c002181f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021821:	83 e0 01             	and    eax,0x1
c0021824:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002182b:	83 ec 0c             	sub    esp,0xc
c002182e:	89 13                	mov    DWORD PTR [ebx],edx
c0021830:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021837:	89 03                	mov    DWORD PTR [ebx],eax
c0021839:	56                   	push   esi
c002183a:	e8 6a dd fe ff       	call   c000f5a9 <free>
c002183f:	83 c4 10             	add    esp,0x10
c0021842:	b0 01                	mov    al,0x1
c0021844:	81 c4 1c 01 00 00    	add    esp,0x11c
c002184a:	5b                   	pop    ebx
c002184b:	5e                   	pop    esi
c002184c:	5f                   	pop    edi
c002184d:	5d                   	pop    ebp
c002184e:	c3                   	ret    

c002184f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002184f:	55                   	push   ebp
c0021850:	57                   	push   edi
c0021851:	56                   	push   esi
c0021852:	53                   	push   ebx
c0021853:	83 ec 20             	sub    esp,0x20
c0021856:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002185a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002185e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021862:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002186a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021872:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021877:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002187d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021883:	57                   	push   edi
c0021884:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021888:	50                   	push   eax
c0021889:	8d 44 24 14          	lea    eax,[esp+0x14]
c002188d:	50                   	push   eax
c002188e:	e8 95 fd ff ff       	call   c0021628 <readRoot(unsigned int*, unsigned int*, char)>
c0021893:	5a                   	pop    edx
c0021894:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021898:	e8 cf ee fd ff       	call   c000076c <strlen>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	83 f8 03             	cmp    eax,0x3
c00218a3:	77 17                	ja     c00218bc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a9:	89 03                	mov    DWORD PTR [ebx],eax
c00218ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218af:	89 06                	mov    DWORD PTR [esi],eax
c00218b1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00218b8:	b0 01                	mov    al,0x1
c00218ba:	eb 19                	jmp    c00218d5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00218bc:	50                   	push   eax
c00218bd:	55                   	push   ebp
c00218be:	57                   	push   edi
c00218bf:	56                   	push   esi
c00218c0:	53                   	push   ebx
c00218c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00218c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00218c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218cd:	e8 aa fd ff ff       	call   c002167c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00218d2:	83 c4 20             	add    esp,0x20
c00218d5:	83 c4 1c             	add    esp,0x1c
c00218d8:	5b                   	pop    ebx
c00218d9:	5e                   	pop    esi
c00218da:	5f                   	pop    edi
c00218db:	5d                   	pop    ebp
c00218dc:	c3                   	ret    
c00218dd:	90                   	nop

c00218de <ISO9660::open(char const*, void**, FileOpenMode)>:
c00218de:	57                   	push   edi
c00218df:	56                   	push   esi
c00218e0:	53                   	push   ebx
c00218e1:	83 ec 10             	sub    esp,0x10
c00218e4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218ec:	85 ff                	test   edi,edi
c00218ee:	0f 84 8b 00 00 00    	je     c002197f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00218f4:	85 f6                	test   esi,esi
c00218f6:	0f 84 83 00 00 00    	je     c002197f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00218fc:	b8 03 00 00 00       	mov    eax,0x3
c0021901:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021906:	75 7c                	jne    c0021984 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021908:	83 ec 0c             	sub    esp,0xc
c002190b:	6a 1c                	push   0x1c
c002190d:	e8 87 dc fe ff       	call   c000f599 <malloc>
c0021912:	89 07                	mov    DWORD PTR [edi],eax
c0021914:	89 c3                	mov    ebx,eax
c0021916:	58                   	pop    eax
c0021917:	8d 44 24 18          	lea    eax,[esp+0x18]
c002191b:	50                   	push   eax
c002191c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002191f:	50                   	push   eax
c0021920:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021924:	50                   	push   eax
c0021925:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021929:	50                   	push   eax
c002192a:	56                   	push   esi
c002192b:	e8 1f ff ff ff       	call   c002184f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021930:	83 c4 20             	add    esp,0x20
c0021933:	84 c0                	test   al,al
c0021935:	74 07                	je     c002193e <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021937:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002193c:	74 0b                	je     c0021949 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c002193e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021942:	b8 01 00 00 00       	mov    eax,0x1
c0021947:	eb 3b                	jmp    c0021984 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002194d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021951:	89 03                	mov    DWORD PTR [ebx],eax
c0021953:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002195a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002195e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021965:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002196c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002196f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021976:	8a 06                	mov    al,BYTE PTR [esi]
c0021978:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002197b:	31 c0                	xor    eax,eax
c002197d:	eb 05                	jmp    c0021984 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002197f:	b8 04 00 00 00       	mov    eax,0x4
c0021984:	83 c4 10             	add    esp,0x10
c0021987:	5b                   	pop    ebx
c0021988:	5e                   	pop    esi
c0021989:	5f                   	pop    edi
c002198a:	c3                   	ret    
c002198b:	90                   	nop

c002198c <ISO9660::exists(char const*)>:
c002198c:	83 ec 28             	sub    esp,0x28
c002198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021993:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021997:	52                   	push   edx
c0021998:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002199b:	52                   	push   edx
c002199c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219a0:	52                   	push   edx
c00219a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219a5:	52                   	push   edx
c00219a6:	50                   	push   eax
c00219a7:	e8 a3 fe ff ff       	call   c002184f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219ac:	83 c4 3c             	add    esp,0x3c
c00219af:	c3                   	ret    

c00219b0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00219b0:	56                   	push   esi
c00219b1:	53                   	push   ebx
c00219b2:	83 ec 14             	sub    esp,0x14
c00219b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00219b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00219bd:	85 db                	test   ebx,ebx
c00219bf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00219c3:	0f 94 c2             	sete   dl
c00219c6:	85 f6                	test   esi,esi
c00219c8:	0f 94 c0             	sete   al
c00219cb:	08 c2                	or     dl,al
c00219cd:	75 68                	jne    c0021a37 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00219cf:	85 c9                	test   ecx,ecx
c00219d1:	74 64                	je     c0021a37 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00219d3:	83 ec 0c             	sub    esp,0xc
c00219d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00219d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219dd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00219e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ea:	50                   	push   eax
c00219eb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00219ee:	50                   	push   eax
c00219ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219f3:	50                   	push   eax
c00219f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219f8:	50                   	push   eax
c00219f9:	51                   	push   ecx
c00219fa:	e8 50 fe ff ff       	call   c002184f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219ff:	83 c4 20             	add    esp,0x20
c0021a02:	ba 01 00 00 00       	mov    edx,0x1
c0021a07:	84 c0                	test   al,al
c0021a09:	74 31                	je     c0021a3c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a16:	89 03                	mov    DWORD PTR [ebx],eax
c0021a18:	ba 00 00 00 00       	mov    edx,0x0
c0021a1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a21:	85 c0                	test   eax,eax
c0021a23:	0f 95 06             	setne  BYTE PTR [esi]
c0021a26:	74 14                	je     c0021a3c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a28:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a2e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a35:	eb 05                	jmp    c0021a3c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a37:	ba 04 00 00 00       	mov    edx,0x4
c0021a3c:	83 c4 14             	add    esp,0x14
c0021a3f:	89 d0                	mov    eax,edx
c0021a41:	5b                   	pop    ebx
c0021a42:	5e                   	pop    esi
c0021a43:	c3                   	ret    

c0021a44 <ISO9660::openDir(char const*, void**)>:
c0021a44:	57                   	push   edi
c0021a45:	56                   	push   esi
c0021a46:	53                   	push   ebx
c0021a47:	83 ec 10             	sub    esp,0x10
c0021a4a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a4e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a52:	85 ff                	test   edi,edi
c0021a54:	74 7b                	je     c0021ad1 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a56:	85 f6                	test   esi,esi
c0021a58:	74 77                	je     c0021ad1 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a5a:	83 ec 0c             	sub    esp,0xc
c0021a5d:	6a 1c                	push   0x1c
c0021a5f:	e8 35 db fe ff       	call   c000f599 <malloc>
c0021a64:	89 07                	mov    DWORD PTR [edi],eax
c0021a66:	89 c3                	mov    ebx,eax
c0021a68:	58                   	pop    eax
c0021a69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a6d:	50                   	push   eax
c0021a6e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a71:	50                   	push   eax
c0021a72:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a76:	50                   	push   eax
c0021a77:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a7b:	50                   	push   eax
c0021a7c:	56                   	push   esi
c0021a7d:	e8 cd fd ff ff       	call   c002184f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a82:	83 c4 20             	add    esp,0x20
c0021a85:	84 c0                	test   al,al
c0021a87:	74 07                	je     c0021a90 <ISO9660::openDir(char const*, void**)+0x4c>
c0021a89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a8e:	75 0b                	jne    c0021a9b <ISO9660::openDir(char const*, void**)+0x57>
c0021a90:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a94:	b8 01 00 00 00       	mov    eax,0x1
c0021a99:	eb 3b                	jmp    c0021ad6 <ISO9660::openDir(char const*, void**)+0x92>
c0021a9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a9f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021aa3:	89 03                	mov    DWORD PTR [ebx],eax
c0021aa5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021aac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ab0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ab7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021abe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021ac1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ac8:	8a 06                	mov    al,BYTE PTR [esi]
c0021aca:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021acd:	31 c0                	xor    eax,eax
c0021acf:	eb 05                	jmp    c0021ad6 <ISO9660::openDir(char const*, void**)+0x92>
c0021ad1:	b8 04 00 00 00       	mov    eax,0x4
c0021ad6:	83 c4 10             	add    esp,0x10
c0021ad9:	5b                   	pop    ebx
c0021ada:	5e                   	pop    esi
c0021adb:	5f                   	pop    edi
c0021adc:	c3                   	ret    
c0021add:	90                   	nop

c0021ade <ISO9660::ISO9660()>:
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae5:	83 ec 0c             	sub    esp,0xc
c0021ae8:	50                   	push   eax
c0021ae9:	e8 86 0e ff ff       	call   c0012974 <Filesystem::Filesystem()>
c0021aee:	83 c4 10             	add    esp,0x10
c0021af1:	ba 00 be 02 c0       	mov    edx,0xc002be00
c0021af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afa:	89 10                	mov    DWORD PTR [eax],edx
c0021afc:	90                   	nop
c0021afd:	83 c4 0c             	add    esp,0xc
c0021b00:	c3                   	ret    
c0021b01:	90                   	nop

c0021b02 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b02:	83 ec 1c             	sub    esp,0x1c
c0021b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b0d:	89 10                	mov    DWORD PTR [eax],edx
c0021b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b1e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b25:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b2a:	75 23                	jne    c0021b4f <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b30:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b39:	0f af c2             	imul   eax,edx
c0021b3c:	85 c0                	test   eax,eax
c0021b3e:	79 03                	jns    c0021b43 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021b40:	83 c0 03             	add    eax,0x3
c0021b43:	c1 f8 02             	sar    eax,0x2
c0021b46:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b57:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b5e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b69:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021b77:	c1 e0 02             	shl    eax,0x2
c0021b7a:	83 ec 0c             	sub    esp,0xc
c0021b7d:	50                   	push   eax
c0021b7e:	e8 16 da fe ff       	call   c000f599 <malloc>
c0021b83:	83 c4 10             	add    esp,0x10
c0021b86:	89 c2                	mov    edx,eax
c0021b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b8c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021b8f:	83 ec 04             	sub    esp,0x4
c0021b92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b96:	50                   	push   eax
c0021b97:	6a 01                	push   0x1
c0021b99:	6a 04                	push   0x4
c0021b9b:	e8 c5 6f fe ff       	call   c0008b65 <src_new>
c0021ba0:	83 c4 10             	add    esp,0x10
c0021ba3:	89 c2                	mov    edx,eax
c0021ba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb0:	85 c0                	test   eax,eax
c0021bb2:	74 10                	je     c0021bc4 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021bb4:	83 ec 0c             	sub    esp,0xc
c0021bb7:	68 60 be 02 c0       	push   0xc002be60
c0021bbc:	e8 14 82 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0021bc1:	83 c4 10             	add    esp,0x10
c0021bc4:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c0021bc9:	83 f0 01             	xor    eax,0x1
c0021bcc:	84 c0                	test   al,al
c0021bce:	74 57                	je     c0021c27 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021bd0:	a1 7c be 02 c0       	mov    eax,ds:0xc002be7c
c0021bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021be1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021be9:	7f 35                	jg     c0021c20 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021beb:	83 ec 0c             	sub    esp,0xc
c0021bee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021bf2:	e8 d8 53 00 00       	call   c0026fcf <__floatsisf>
c0021bf7:	83 c4 10             	add    esp,0x10
c0021bfa:	8b 15 7c be 02 c0    	mov    edx,DWORD PTR ds:0xc002be7c
c0021c00:	83 ec 08             	sub    esp,0x8
c0021c03:	52                   	push   edx
c0021c04:	50                   	push   eax
c0021c05:	e8 d7 4f 00 00       	call   c0026be1 <__mulsf3>
c0021c0a:	83 c4 10             	add    esp,0x10
c0021c0d:	89 c2                	mov    edx,eax
c0021c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c13:	89 14 85 c0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce840],edx
c0021c1a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c1e:	eb c1                	jmp    c0021be1 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c20:	c6 05 c0 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031bc0,0x1
c0021c27:	90                   	nop
c0021c28:	83 c4 1c             	add    esp,0x1c
c0021c2b:	c3                   	ret    

c0021c2c <SoundChannel::~SoundChannel()>:
c0021c2c:	83 ec 0c             	sub    esp,0xc
c0021c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c33:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	50                   	push   eax
c0021c3a:	e8 6a d9 fe ff       	call   c000f5a9 <free>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	90                   	nop
c0021c43:	83 c4 0c             	add    esp,0xc
c0021c46:	c3                   	ret    
c0021c47:	90                   	nop

c0021c48 <SoundChannel::getSampleRate()>:
c0021c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c4e:	c3                   	ret    
c0021c4f:	90                   	nop

c0021c50 <SoundChannel::getBits()>:
c0021c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c57:	c3                   	ret    

c0021c58 <SoundChannel::getBufferUsed()>:
c0021c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c5c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021c5f:	c3                   	ret    

c0021c60 <SoundChannel::getBufferSize()>:
c0021c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c67:	c3                   	ret    

c0021c68 <SoundChannel::unbuffer(float*, int, int)>:
c0021c68:	56                   	push   esi
c0021c69:	53                   	push   ebx
c0021c6a:	83 ec 40             	sub    esp,0x40
c0021c6d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021c71:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021c74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c78:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021c7b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021c7f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021c83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021c87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021c8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021c93:	e8 37 53 00 00       	call   c0026fcf <__floatsisf>
c0021c98:	5a                   	pop    edx
c0021c99:	89 c6                	mov    esi,eax
c0021c9b:	ff 33                	push   DWORD PTR [ebx]
c0021c9d:	e8 2d 53 00 00       	call   c0026fcf <__floatsisf>
c0021ca2:	59                   	pop    ecx
c0021ca3:	5a                   	pop    edx
c0021ca4:	50                   	push   eax
c0021ca5:	56                   	push   esi
c0021ca6:	e8 f9 50 00 00       	call   c0026da4 <__divsf3>
c0021cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cae:	e8 ec 65 00 00       	call   c002829f <__extendsfdf2>
c0021cb3:	59                   	pop    ecx
c0021cb4:	5e                   	pop    esi
c0021cb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021cbd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021cc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cc9:	50                   	push   eax
c0021cca:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021ccd:	e8 88 6a fe ff       	call   c000875a <src_process>
c0021cd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cd6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021cd9:	83 c4 0c             	add    esp,0xc
c0021cdc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021cdf:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021ce2:	29 d0                	sub    eax,edx
c0021ce4:	c1 e0 02             	shl    eax,0x2
c0021ce7:	50                   	push   eax
c0021ce8:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021ceb:	50                   	push   eax
c0021cec:	51                   	push   ecx
c0021ced:	e8 96 e9 fd ff       	call   c0000688 <memmove>
c0021cf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021cf6:	83 c4 44             	add    esp,0x44
c0021cf9:	5b                   	pop    ebx
c0021cfa:	5e                   	pop    esi
c0021cfb:	c3                   	ret    

c0021cfc <SoundChannel::buffer16(short*, int)>:
c0021cfc:	55                   	push   ebp
c0021cfd:	57                   	push   edi
c0021cfe:	56                   	push   esi
c0021cff:	53                   	push   ebx
c0021d00:	83 ec 1c             	sub    esp,0x1c
c0021d03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d07:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d0a:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d0d:	0f 84 d2 00 00 00    	je     c0021de5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d13:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d17:	85 ed                	test   ebp,ebp
c0021d19:	0f 8e c6 00 00 00    	jle    c0021de5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d23:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d28:	83 ec 0c             	sub    esp,0xc
c0021d2b:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d2e:	50                   	push   eax
c0021d2f:	e8 9b 52 00 00       	call   c0026fcf <__floatsisf>
c0021d34:	59                   	pop    ecx
c0021d35:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d38:	5f                   	pop    edi
c0021d39:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d3c:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d3f:	55                   	push   ebp
c0021d40:	50                   	push   eax
c0021d41:	e8 9b 4e 00 00       	call   c0026be1 <__mulsf3>
c0021d46:	83 c4 10             	add    esp,0x10
c0021d49:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d4c:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d4f:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d52:	0f 84 99 00 00 00    	je     c0021df1 <SoundChannel::buffer16(short*, int)+0xf5>
c0021d58:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021d5d:	74 78                	je     c0021dd7 <SoundChannel::buffer16(short*, int)+0xdb>
c0021d5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d63:	83 ec 0c             	sub    esp,0xc
c0021d66:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021d6a:	50                   	push   eax
c0021d6b:	e8 5f 52 00 00       	call   c0026fcf <__floatsisf>
c0021d70:	5f                   	pop    edi
c0021d71:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d74:	5a                   	pop    edx
c0021d75:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d78:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d7b:	55                   	push   ebp
c0021d7c:	50                   	push   eax
c0021d7d:	e8 5f 4e 00 00       	call   c0026be1 <__mulsf3>
c0021d82:	83 c4 10             	add    esp,0x10
c0021d85:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d88:	be 02 00 00 00       	mov    esi,0x2
c0021d8d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d90:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d93:	74 46                	je     c0021ddb <SoundChannel::buffer16(short*, int)+0xdf>
c0021d95:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021d99:	eb 36                	jmp    c0021dd1 <SoundChannel::buffer16(short*, int)+0xd5>
c0021d9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d9f:	83 ec 0c             	sub    esp,0xc
c0021da2:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021da6:	46                   	inc    esi
c0021da7:	50                   	push   eax
c0021da8:	e8 22 52 00 00       	call   c0026fcf <__floatsisf>
c0021dad:	5a                   	pop    edx
c0021dae:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021db1:	59                   	pop    ecx
c0021db2:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021db5:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dbc:	50                   	push   eax
c0021dbd:	e8 1f 4e 00 00       	call   c0026be1 <__mulsf3>
c0021dc2:	83 c4 10             	add    esp,0x10
c0021dc5:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021dc9:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dcc:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021dcf:	74 0a                	je     c0021ddb <SoundChannel::buffer16(short*, int)+0xdf>
c0021dd1:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021dd5:	75 c4                	jne    c0021d9b <SoundChannel::buffer16(short*, int)+0x9f>
c0021dd7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021ddb:	83 c4 1c             	add    esp,0x1c
c0021dde:	89 f0                	mov    eax,esi
c0021de0:	5b                   	pop    ebx
c0021de1:	5e                   	pop    esi
c0021de2:	5f                   	pop    edi
c0021de3:	5d                   	pop    ebp
c0021de4:	c3                   	ret    
c0021de5:	83 c4 1c             	add    esp,0x1c
c0021de8:	31 f6                	xor    esi,esi
c0021dea:	5b                   	pop    ebx
c0021deb:	89 f0                	mov    eax,esi
c0021ded:	5e                   	pop    esi
c0021dee:	5f                   	pop    edi
c0021def:	5d                   	pop    ebp
c0021df0:	c3                   	ret    
c0021df1:	be 01 00 00 00       	mov    esi,0x1
c0021df6:	eb e3                	jmp    c0021ddb <SoundChannel::buffer16(short*, int)+0xdf>

c0021df8 <SoundChannel::buffer8(unsigned char*, int)>:
c0021df8:	55                   	push   ebp
c0021df9:	57                   	push   edi
c0021dfa:	56                   	push   esi
c0021dfb:	53                   	push   ebx
c0021dfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e00:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e04:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e0b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e0e:	74 7a                	je     c0021e8a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e10:	85 ff                	test   edi,edi
c0021e12:	7e 76                	jle    c0021e8a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e14:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e18:	8d 70 01             	lea    esi,[eax+0x1]
c0021e1b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e1e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e21:	8b 1c 9d c0 17 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce840]
c0021e28:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e2b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e2e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e31:	74 5e                	je     c0021e91 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e33:	83 ff 01             	cmp    edi,0x1
c0021e36:	74 4b                	je     c0021e83 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e38:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021e3c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e3f:	8d 70 01             	lea    esi,[eax+0x1]
c0021e42:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e45:	8b 1c 9d c0 17 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce840]
c0021e4c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e4f:	b8 02 00 00 00       	mov    eax,0x2
c0021e54:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021e57:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021e5a:	75 23                	jne    c0021e7f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021e5c:	eb 27                	jmp    c0021e85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021e5e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021e63:	8d 71 01             	lea    esi,[ecx+0x1]
c0021e66:	40                   	inc    eax
c0021e67:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e6a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021e6d:	8b 1c 9d c0 17 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce840]
c0021e74:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021e77:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021e7a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021e7d:	74 06                	je     c0021e85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021e7f:	39 c7                	cmp    edi,eax
c0021e81:	75 db                	jne    c0021e5e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021e83:	89 f8                	mov    eax,edi
c0021e85:	5b                   	pop    ebx
c0021e86:	5e                   	pop    esi
c0021e87:	5f                   	pop    edi
c0021e88:	5d                   	pop    ebp
c0021e89:	c3                   	ret    
c0021e8a:	5b                   	pop    ebx
c0021e8b:	31 c0                	xor    eax,eax
c0021e8d:	5e                   	pop    esi
c0021e8e:	5f                   	pop    edi
c0021e8f:	5d                   	pop    ebp
c0021e90:	c3                   	ret    
c0021e91:	b8 01 00 00 00       	mov    eax,0x1
c0021e96:	eb ed                	jmp    c0021e85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021e98 <SoundDevice::SoundDevice(char const*)>:
c0021e98:	83 ec 1c             	sub    esp,0x1c
c0021e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e9f:	83 ec 08             	sub    esp,0x8
c0021ea2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ea6:	50                   	push   eax
c0021ea7:	e8 fa 1d ff ff       	call   c0013ca6 <Device::Device(char const*)>
c0021eac:	83 c4 10             	add    esp,0x10
c0021eaf:	ba 88 be 02 c0       	mov    edx,0xc002be88
c0021eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eb8:	89 10                	mov    DWORD PTR [eax],edx
c0021eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ebe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ecc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021ed6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ede:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021ee3:	7f 19                	jg     c0021efe <SoundDevice::SoundDevice(char const*)+0x66>
c0021ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021eed:	83 c2 54             	add    edx,0x54
c0021ef0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021ef8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021efc:	eb e0                	jmp    c0021ede <SoundDevice::SoundDevice(char const*)+0x46>
c0021efe:	90                   	nop
c0021eff:	83 c4 1c             	add    esp,0x1c
c0021f02:	c3                   	ret    
c0021f03:	90                   	nop

c0021f04 <SoundDevice::~SoundDevice()>:
c0021f04:	53                   	push   ebx
c0021f05:	83 ec 18             	sub    esp,0x18
c0021f08:	ba 88 be 02 c0       	mov    edx,0xc002be88
c0021f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f11:	89 10                	mov    DWORD PTR [eax],edx
c0021f13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f1b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f20:	7f 46                	jg     c0021f68 <SoundDevice::~SoundDevice()+0x64>
c0021f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f2a:	83 c2 54             	add    edx,0x54
c0021f2d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f31:	85 c0                	test   eax,eax
c0021f33:	74 2d                	je     c0021f62 <SoundDevice::~SoundDevice()+0x5e>
c0021f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f3d:	83 c2 54             	add    edx,0x54
c0021f40:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021f44:	85 db                	test   ebx,ebx
c0021f46:	74 1a                	je     c0021f62 <SoundDevice::~SoundDevice()+0x5e>
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	53                   	push   ebx
c0021f4c:	e8 db fc ff ff       	call   c0021c2c <SoundChannel::~SoundChannel()>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	83 ec 08             	sub    esp,0x8
c0021f57:	6a 2c                	push   0x2c
c0021f59:	53                   	push   ebx
c0021f5a:	e8 32 06 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f66:	eb b3                	jmp    c0021f1b <SoundDevice::~SoundDevice()+0x17>
c0021f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f6c:	83 ec 0c             	sub    esp,0xc
c0021f6f:	50                   	push   eax
c0021f70:	e8 fb 19 ff ff       	call   c0013970 <Device::~Device()>
c0021f75:	83 c4 10             	add    esp,0x10
c0021f78:	90                   	nop
c0021f79:	83 c4 18             	add    esp,0x18
c0021f7c:	5b                   	pop    ebx
c0021f7d:	c3                   	ret    

c0021f7e <SoundDevice::~SoundDevice()>:
c0021f7e:	83 ec 0c             	sub    esp,0xc
c0021f81:	83 ec 0c             	sub    esp,0xc
c0021f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f88:	e8 77 ff ff ff       	call   c0021f04 <SoundDevice::~SoundDevice()>
c0021f8d:	83 c4 10             	add    esp,0x10
c0021f90:	83 ec 08             	sub    esp,0x8
c0021f93:	68 e4 01 00 00       	push   0x1e4
c0021f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f9c:	e8 f0 05 ff ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0021fa1:	83 c4 10             	add    esp,0x10
c0021fa4:	83 c4 0c             	add    esp,0xc
c0021fa7:	c3                   	ret    

c0021fa8 <SoundDevice::getFreeChannelNum()>:
c0021fa8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fac:	31 c0                	xor    eax,eax
c0021fae:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021fb6:	74 09                	je     c0021fc1 <SoundDevice::getFreeChannelNum()+0x19>
c0021fb8:	40                   	inc    eax
c0021fb9:	83 f8 20             	cmp    eax,0x20
c0021fbc:	75 f0                	jne    c0021fae <SoundDevice::getFreeChannelNum()+0x6>
c0021fbe:	83 c8 ff             	or     eax,0xffffffff
c0021fc1:	c3                   	ret    

c0021fc2 <SoundDevice::addChannel(SoundChannel*)>:
c0021fc2:	56                   	push   esi
c0021fc3:	53                   	push   ebx
c0021fc4:	51                   	push   ecx
c0021fc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021fcd:	53                   	push   ebx
c0021fce:	e8 d5 ff ff ff       	call   c0021fa8 <SoundDevice::getFreeChannelNum()>
c0021fd3:	5a                   	pop    edx
c0021fd4:	83 f8 ff             	cmp    eax,0xffffffff
c0021fd7:	74 51                	je     c002202a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021fd9:	85 f6                	test   esi,esi
c0021fdb:	74 4d                	je     c002202a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021fdd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021fe4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021feb:	75 30                	jne    c002201d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021fed:	83 ec 0c             	sub    esp,0xc
c0021ff0:	56                   	push   esi
c0021ff1:	e8 52 fc ff ff       	call   c0021c48 <SoundChannel::getSampleRate()>
c0021ff6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021ffc:	89 34 24             	mov    DWORD PTR [esp],esi
c0021fff:	e8 4c fc ff ff       	call   c0021c50 <SoundChannel::getBits()>
c0022004:	83 c4 0c             	add    esp,0xc
c0022007:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002200d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002200f:	50                   	push   eax
c0022010:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022016:	53                   	push   ebx
c0022017:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002201a:	83 c4 10             	add    esp,0x10
c002201d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022023:	b8 01 00 00 00       	mov    eax,0x1
c0022028:	eb 03                	jmp    c002202d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002202a:	83 c8 ff             	or     eax,0xffffffff
c002202d:	5a                   	pop    edx
c002202e:	5b                   	pop    ebx
c002202f:	5e                   	pop    esi
c0022030:	c3                   	ret    
c0022031:	90                   	nop

c0022032 <SoundDevice::removeChannel(int)>:
c0022032:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002203a:	83 fa 1f             	cmp    edx,0x1f
c002203d:	77 23                	ja     c0022062 <SoundDevice::removeChannel(int)+0x30>
c002203f:	8d 14 90             	lea    edx,[eax+edx*4]
c0022042:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022049:	74 17                	je     c0022062 <SoundDevice::removeChannel(int)+0x30>
c002204b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022055:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002205b:	75 05                	jne    c0022062 <SoundDevice::removeChannel(int)+0x30>
c002205d:	8b 00                	mov    eax,DWORD PTR [eax]
c002205f:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022062:	c3                   	ret    
c0022063:	90                   	nop

c0022064 <SoundDevice::floatTo16(float*, short*, int)>:
c0022064:	57                   	push   edi
c0022065:	56                   	push   esi
c0022066:	53                   	push   ebx
c0022067:	31 db                	xor    ebx,ebx
c0022069:	83 ec 10             	sub    esp,0x10
c002206c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022070:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022074:	0f 8d d0 00 00 00    	jge    c002214a <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022081:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022084:	e8 16 62 00 00       	call   c002829f <__extendsfdf2>
c0022089:	83 c4 10             	add    esp,0x10
c002208c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022090:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022094:	68 00 00 f0 3f       	push   0x3ff00000
c0022099:	6a 00                	push   0x0
c002209b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002209f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220a3:	e8 83 51 00 00       	call   c002722b <__adddf3>
c00220a8:	83 c4 10             	add    esp,0x10
c00220ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220b3:	68 00 00 e0 3f       	push   0x3fe00000
c00220b8:	6a 00                	push   0x0
c00220ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220c2:	e8 e1 57 00 00       	call   c00278a8 <__muldf3>
c00220c7:	83 c4 10             	add    esp,0x10
c00220ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220d2:	68 c0 ff df 40       	push   0x40dfffc0
c00220d7:	6a 00                	push   0x0
c00220d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e1:	e8 c2 57 00 00       	call   c00278a8 <__muldf3>
c00220e6:	59                   	pop    ecx
c00220e7:	5f                   	pop    edi
c00220e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00220ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00220f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220f8:	e8 7e 60 00 00       	call   c002817b <__truncdfsf2>
c00220fd:	5a                   	pop    edx
c00220fe:	89 c7                	mov    edi,eax
c0022100:	59                   	pop    ecx
c0022101:	68 00 fe ff 46       	push   0x46fffe00
c0022106:	50                   	push   eax
c0022107:	e8 19 51 00 00       	call   c0027225 <__gesf2>
c002210c:	83 c4 10             	add    esp,0x10
c002210f:	85 c0                	test   eax,eax
c0022111:	78 08                	js     c002211b <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022113:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022119:	eb 29                	jmp    c0022144 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002211b:	50                   	push   eax
c002211c:	50                   	push   eax
c002211d:	6a 00                	push   0x0
c002211f:	57                   	push   edi
c0022120:	e8 04 51 00 00       	call   c0027229 <__lesf2>
c0022125:	83 c4 10             	add    esp,0x10
c0022128:	85 c0                	test   eax,eax
c002212a:	7f 08                	jg     c0022134 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002212c:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022132:	eb 10                	jmp    c0022144 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022134:	83 ec 0c             	sub    esp,0xc
c0022137:	57                   	push   edi
c0022138:	e8 ff 61 00 00       	call   c002833c <lrintf>
c002213d:	83 c4 10             	add    esp,0x10
c0022140:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022144:	43                   	inc    ebx
c0022145:	e9 26 ff ff ff       	jmp    c0022070 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	5b                   	pop    ebx
c002214e:	5e                   	pop    esi
c002214f:	5f                   	pop    edi
c0022150:	c3                   	ret    
c0022151:	90                   	nop

c0022152 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022152:	57                   	push   edi
c0022153:	56                   	push   esi
c0022154:	53                   	push   ebx
c0022155:	31 db                	xor    ebx,ebx
c0022157:	83 ec 10             	sub    esp,0x10
c002215a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002215e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022162:	0f 8d cb 00 00 00    	jge    c0022233 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022168:	83 ec 0c             	sub    esp,0xc
c002216b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002216f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022172:	e8 28 61 00 00       	call   c002829f <__extendsfdf2>
c0022177:	83 c4 10             	add    esp,0x10
c002217a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002217e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022182:	68 00 00 f0 3f       	push   0x3ff00000
c0022187:	6a 00                	push   0x0
c0022189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002218d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022191:	e8 95 50 00 00       	call   c002722b <__adddf3>
c0022196:	83 c4 10             	add    esp,0x10
c0022199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002219d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221a1:	68 00 00 e0 3f       	push   0x3fe00000
c00221a6:	6a 00                	push   0x0
c00221a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221b0:	e8 f3 56 00 00       	call   c00278a8 <__muldf3>
c00221b5:	83 c4 10             	add    esp,0x10
c00221b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221c0:	68 00 00 60 40       	push   0x40600000
c00221c5:	6a 00                	push   0x0
c00221c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221cf:	e8 d4 56 00 00       	call   c00278a8 <__muldf3>
c00221d4:	59                   	pop    ecx
c00221d5:	5f                   	pop    edi
c00221d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00221da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00221de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221e6:	e8 90 5f 00 00       	call   c002817b <__truncdfsf2>
c00221eb:	5a                   	pop    edx
c00221ec:	89 c7                	mov    edi,eax
c00221ee:	59                   	pop    ecx
c00221ef:	68 00 00 fe 42       	push   0x42fe0000
c00221f4:	50                   	push   eax
c00221f5:	e8 2b 50 00 00       	call   c0027225 <__gesf2>
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	85 c0                	test   eax,eax
c00221ff:	78 06                	js     c0022207 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022201:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022205:	eb 26                	jmp    c002222d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022207:	50                   	push   eax
c0022208:	50                   	push   eax
c0022209:	6a 00                	push   0x0
c002220b:	57                   	push   edi
c002220c:	e8 18 50 00 00       	call   c0027229 <__lesf2>
c0022211:	83 c4 10             	add    esp,0x10
c0022214:	85 c0                	test   eax,eax
c0022216:	7f 06                	jg     c002221e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022218:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002221c:	eb 0f                	jmp    c002222d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002221e:	83 ec 0c             	sub    esp,0xc
c0022221:	57                   	push   edi
c0022222:	e8 15 61 00 00       	call   c002833c <lrintf>
c0022227:	83 c4 10             	add    esp,0x10
c002222a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002222d:	43                   	inc    ebx
c002222e:	e9 2b ff ff ff       	jmp    c002215e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022233:	83 c4 10             	add    esp,0x10
c0022236:	5b                   	pop    ebx
c0022237:	5e                   	pop    esi
c0022238:	5f                   	pop    edi
c0022239:	c3                   	ret    

c002223a <SoundDevice::getAudio(int, float*, float*)>:
c002223a:	55                   	push   ebp
c002223b:	31 ed                	xor    ebp,ebp
c002223d:	57                   	push   edi
c002223e:	56                   	push   esi
c002223f:	31 f6                	xor    esi,esi
c0022241:	53                   	push   ebx
c0022242:	83 ec 20             	sub    esp,0x20
c0022245:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022249:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002224d:	c1 e0 02             	shl    eax,0x2
c0022250:	50                   	push   eax
c0022251:	6a 00                	push   0x0
c0022253:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022257:	e8 f4 e4 fd ff       	call   c0000750 <memset>
c002225c:	83 c4 10             	add    esp,0x10
c002225f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022267:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002226e:	85 c9                	test   ecx,ecx
c0022270:	74 52                	je     c00222c4 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022272:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022276:	99                   	cdq    
c0022277:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002227d:	50                   	push   eax
c002227e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022284:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022288:	51                   	push   ecx
c0022289:	e8 da f9 ff ff       	call   c0021c68 <SoundChannel::unbuffer(float*, int, int)>
c002228e:	31 d2                	xor    edx,edx
c0022290:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022294:	83 c4 10             	add    esp,0x10
c0022297:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002229b:	7d 1e                	jge    c00222bb <SoundDevice::getAudio(int, float*, float*)+0x81>
c002229d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00222a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00222a5:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00222a8:	89 cf                	mov    edi,ecx
c00222aa:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00222b0:	0f af ca             	imul   ecx,edx
c00222b3:	42                   	inc    edx
c00222b4:	01 e9                	add    ecx,ebp
c00222b6:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00222b9:	eb dc                	jmp    c0022297 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00222bb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00222bf:	45                   	inc    ebp
c00222c0:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00222c4:	46                   	inc    esi
c00222c5:	83 fe 20             	cmp    esi,0x20
c00222c8:	75 9d                	jne    c0022267 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00222ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ce:	83 c4 1c             	add    esp,0x1c
c00222d1:	5b                   	pop    ebx
c00222d2:	5e                   	pop    esi
c00222d3:	5f                   	pop    edi
c00222d4:	5d                   	pop    ebp
c00222d5:	c3                   	ret    

c00222d6 <PCI::open(int, int, void*)>:
c00222d6:	83 ec 18             	sub    esp,0x18
c00222d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00222dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00222e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00222e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00222e9:	50                   	push   eax
c00222ea:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00222ed:	31 c0                	xor    eax,eax
c00222ef:	83 c4 1c             	add    esp,0x1c
c00222f2:	c3                   	ret    
c00222f3:	90                   	nop

c00222f4 <PCI::close(int, int, void*)>:
c00222f4:	31 c0                	xor    eax,eax
c00222f6:	c3                   	ret    
c00222f7:	90                   	nop

c00222f8 <PCI::PCI()>:
c00222f8:	83 ec 0c             	sub    esp,0xc
c00222fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ff:	83 ec 08             	sub    esp,0x8
c0022302:	68 b8 be 02 c0       	push   0xc002beb8
c0022307:	50                   	push   eax
c0022308:	e8 fd 0f ff ff       	call   c001330a <Bus::Bus(char const*)>
c002230d:	83 c4 10             	add    esp,0x10
c0022310:	ba a4 bf 02 c0       	mov    edx,0xc002bfa4
c0022315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022319:	89 10                	mov    DWORD PTR [eax],edx
c002231b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232d:	a3 c4 1b 03 c0       	mov    ds:0xc0031bc4,eax
c0022332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022336:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002233c:	0f b6 d0             	movzx  edx,al
c002233f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022343:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002234a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022354:	0f b6 d0             	movzx  edx,al
c0022357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022364:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002236a:	8d 50 01             	lea    edx,[eax+0x1]
c002236d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022371:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022377:	0f b6 d0             	movzx  edx,al
c002237a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022382:	83 c9 c0             	or     ecx,0xffffffc0
c0022385:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022389:	90                   	nop
c002238a:	83 c4 0c             	add    esp,0xc
c002238d:	c3                   	ret    

c002238e <PCI::readBAR8(unsigned int, int)>:
c002238e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022396:	f6 c2 01             	test   dl,0x1
c0022399:	74 07                	je     c00223a2 <PCI::readBAR8(unsigned int, int)+0x14>
c002239b:	83 e2 fc             	and    edx,0xfffffffc
c002239e:	01 c2                	add    edx,eax
c00223a0:	ec                   	in     al,dx
c00223a1:	c3                   	ret    
c00223a2:	83 e2 f0             	and    edx,0xfffffff0
c00223a5:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00223a8:	c3                   	ret    
c00223a9:	90                   	nop

c00223aa <PCI::readBAR16(unsigned int, int)>:
c00223aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223b2:	f6 c2 01             	test   dl,0x1
c00223b5:	74 08                	je     c00223bf <PCI::readBAR16(unsigned int, int)+0x15>
c00223b7:	83 e2 fc             	and    edx,0xfffffffc
c00223ba:	01 c2                	add    edx,eax
c00223bc:	66 ed                	in     ax,dx
c00223be:	c3                   	ret    
c00223bf:	83 e2 f0             	and    edx,0xfffffff0
c00223c2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00223c6:	c3                   	ret    
c00223c7:	90                   	nop

c00223c8 <PCI::readBAR32(unsigned int, int)>:
c00223c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223d0:	f6 c2 01             	test   dl,0x1
c00223d3:	74 07                	je     c00223dc <PCI::readBAR32(unsigned int, int)+0x14>
c00223d5:	83 e2 fc             	and    edx,0xfffffffc
c00223d8:	01 c2                	add    edx,eax
c00223da:	ed                   	in     eax,dx
c00223db:	c3                   	ret    
c00223dc:	83 e2 f0             	and    edx,0xfffffff0
c00223df:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00223e2:	c3                   	ret    
c00223e3:	90                   	nop

c00223e4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00223e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223f0:	f6 c2 01             	test   dl,0x1
c00223f3:	74 07                	je     c00223fc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00223f5:	83 e2 fc             	and    edx,0xfffffffc
c00223f8:	01 ca                	add    edx,ecx
c00223fa:	ee                   	out    dx,al
c00223fb:	c3                   	ret    
c00223fc:	83 e2 f0             	and    edx,0xfffffff0
c00223ff:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022402:	c3                   	ret    
c0022403:	90                   	nop

c0022404 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002240c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022410:	f6 c2 01             	test   dl,0x1
c0022413:	74 08                	je     c002241d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022415:	83 e2 fc             	and    edx,0xfffffffc
c0022418:	01 ca                	add    edx,ecx
c002241a:	66 ef                	out    dx,ax
c002241c:	c3                   	ret    
c002241d:	83 e2 f0             	and    edx,0xfffffff0
c0022420:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022424:	c3                   	ret    
c0022425:	90                   	nop

c0022426 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002242a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002242e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022432:	f6 c2 01             	test   dl,0x1
c0022435:	74 07                	je     c002243e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022437:	83 e2 fc             	and    edx,0xfffffffc
c002243a:	01 ca                	add    edx,ecx
c002243c:	ef                   	out    dx,eax
c002243d:	c3                   	ret    
c002243e:	83 e2 f0             	and    edx,0xfffffff0
c0022441:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022444:	c3                   	ret    
c0022445:	90                   	nop

c0022446 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022446:	55                   	push   ebp
c0022447:	57                   	push   edi
c0022448:	56                   	push   esi
c0022449:	53                   	push   ebx
c002244a:	83 ec 0c             	sub    esp,0xc
c002244d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022451:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022455:	89 f0                	mov    eax,esi
c0022457:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002245b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002245f:	3c 07                	cmp    al,0x7
c0022461:	76 10                	jbe    c0022473 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022463:	83 ec 0c             	sub    esp,0xc
c0022466:	68 c0 be 02 c0       	push   0xc002bec0
c002246b:	e8 65 79 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0022470:	83 c4 10             	add    esp,0x10
c0022473:	80 fb 0f             	cmp    bl,0xf
c0022476:	76 10                	jbe    c0022488 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	68 f0 be 02 c0       	push   0xc002bef0
c0022480:	e8 50 79 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	8d 04 36             	lea    eax,[esi+esi*1]
c002248b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022490:	83 c8 f0             	or     eax,0xfffffff0
c0022493:	ee                   	out    dx,al
c0022494:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022499:	89 e8                	mov    eax,ebp
c002249b:	ee                   	out    dx,al
c002249c:	83 c4 0c             	add    esp,0xc
c002249f:	89 d8                	mov    eax,ebx
c00224a1:	66 81 e7 fc 00       	and    di,0xfc
c00224a6:	5b                   	pop    ebx
c00224a7:	c1 e0 08             	shl    eax,0x8
c00224aa:	5e                   	pop    esi
c00224ab:	09 f8                	or     eax,edi
c00224ad:	5f                   	pop    edi
c00224ae:	66 0d 00 c0          	or     ax,0xc000
c00224b2:	5d                   	pop    ebp
c00224b3:	c3                   	ret    

c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224b4:	57                   	push   edi
c00224b5:	56                   	push   esi
c00224b6:	53                   	push   ebx
c00224b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00224bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224bf:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00224c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00224c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00224cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00224d1:	83 ff 01             	cmp    edi,0x1
c00224d4:	75 3e                	jne    c0022514 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00224d6:	89 de                	mov    esi,ebx
c00224d8:	0f b6 c0             	movzx  eax,al
c00224db:	81 e6 fc 00 00 00    	and    esi,0xfc
c00224e1:	c1 e0 10             	shl    eax,0x10
c00224e4:	0f b6 c9             	movzx  ecx,cl
c00224e7:	09 f0                	or     eax,esi
c00224e9:	c1 e1 08             	shl    ecx,0x8
c00224ec:	0f b6 d2             	movzx  edx,dl
c00224ef:	09 c8                	or     eax,ecx
c00224f1:	c1 e2 0b             	shl    edx,0xb
c00224f4:	09 d0                	or     eax,edx
c00224f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224fb:	0d 00 00 00 80       	or     eax,0x80000000
c0022500:	ef                   	out    dx,eax
c0022501:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022506:	ed                   	in     eax,dx
c0022507:	83 e3 02             	and    ebx,0x2
c002250a:	0f b6 cb             	movzx  ecx,bl
c002250d:	c1 e1 03             	shl    ecx,0x3
c0022510:	d3 e8                	shr    eax,cl
c0022512:	eb 43                	jmp    c0022557 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022514:	83 ff 02             	cmp    edi,0x2
c0022517:	75 2c                	jne    c0022545 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022519:	83 ec 0c             	sub    esp,0xc
c002251c:	0f b6 c9             	movzx  ecx,cl
c002251f:	0f b6 d2             	movzx  edx,dl
c0022522:	0f b6 fb             	movzx  edi,bl
c0022525:	0f b6 c0             	movzx  eax,al
c0022528:	57                   	push   edi
c0022529:	51                   	push   ecx
c002252a:	52                   	push   edx
c002252b:	50                   	push   eax
c002252c:	56                   	push   esi
c002252d:	e8 14 ff ff ff       	call   c0022446 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022532:	89 c2                	mov    edx,eax
c0022534:	ed                   	in     eax,dx
c0022535:	83 e3 02             	and    ebx,0x2
c0022538:	83 c4 20             	add    esp,0x20
c002253b:	0f b6 cb             	movzx  ecx,bl
c002253e:	c1 e1 03             	shl    ecx,0x3
c0022541:	d3 e8                	shr    eax,cl
c0022543:	eb 12                	jmp    c0022557 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022545:	83 ec 0c             	sub    esp,0xc
c0022548:	68 20 bf 02 c0       	push   0xc002bf20
c002254d:	e8 83 78 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0022552:	83 c4 10             	add    esp,0x10
c0022555:	31 c0                	xor    eax,eax
c0022557:	5b                   	pop    ebx
c0022558:	5e                   	pop    esi
c0022559:	5f                   	pop    edi
c002255a:	c3                   	ret    
c002255b:	90                   	nop

c002255c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002255c:	83 ec 18             	sub    esp,0x18
c002255f:	6a 00                	push   0x0
c0022561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022566:	50                   	push   eax
c0022567:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002256c:	50                   	push   eax
c002256d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022572:	50                   	push   eax
c0022573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022577:	e8 38 ff ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002257c:	83 c4 2c             	add    esp,0x2c
c002257f:	c3                   	ret    

c0022580 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022580:	83 ec 18             	sub    esp,0x18
c0022583:	6a 0e                	push   0xe
c0022585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002258a:	50                   	push   eax
c002258b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022590:	50                   	push   eax
c0022591:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022596:	50                   	push   eax
c0022597:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002259b:	e8 14 ff ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225a0:	83 c4 2c             	add    esp,0x2c
c00225a3:	0f b6 c0             	movzx  eax,al
c00225a6:	c3                   	ret    
c00225a7:	90                   	nop

c00225a8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00225a8:	55                   	push   ebp
c00225a9:	57                   	push   edi
c00225aa:	56                   	push   esi
c00225ab:	53                   	push   ebx
c00225ac:	83 ec 18             	sub    esp,0x18
c00225af:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00225b4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00225b9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00225be:	6a 0a                	push   0xa
c00225c0:	56                   	push   esi
c00225c1:	55                   	push   ebp
c00225c2:	57                   	push   edi
c00225c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00225c7:	e8 e8 fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225cc:	83 c4 14             	add    esp,0x14
c00225cf:	89 c3                	mov    ebx,eax
c00225d1:	6a 0a                	push   0xa
c00225d3:	0f b6 db             	movzx  ebx,bl
c00225d6:	56                   	push   esi
c00225d7:	55                   	push   ebp
c00225d8:	57                   	push   edi
c00225d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00225dd:	e8 d2 fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e2:	83 c4 2c             	add    esp,0x2c
c00225e5:	25 00 ff 00 00       	and    eax,0xff00
c00225ea:	09 d8                	or     eax,ebx
c00225ec:	5b                   	pop    ebx
c00225ed:	5e                   	pop    esi
c00225ee:	5f                   	pop    edi
c00225ef:	5d                   	pop    ebp
c00225f0:	c3                   	ret    
c00225f1:	90                   	nop

c00225f2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00225f2:	83 ec 18             	sub    esp,0x18
c00225f5:	6a 08                	push   0x8
c00225f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225fc:	50                   	push   eax
c00225fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022602:	50                   	push   eax
c0022603:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022608:	50                   	push   eax
c0022609:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002260d:	e8 a2 fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022612:	83 c4 2c             	add    esp,0x2c
c0022615:	0f b6 c4             	movzx  eax,ah
c0022618:	c3                   	ret    
c0022619:	90                   	nop

c002261a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002261a:	83 ec 18             	sub    esp,0x18
c002261d:	6a 08                	push   0x8
c002261f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022624:	50                   	push   eax
c0022625:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002262a:	50                   	push   eax
c002262b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022630:	50                   	push   eax
c0022631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022635:	e8 7a fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002263a:	83 c4 2c             	add    esp,0x2c
c002263d:	c3                   	ret    

c002263e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002263e:	83 ec 18             	sub    esp,0x18
c0022641:	6a 3c                	push   0x3c
c0022643:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022648:	50                   	push   eax
c0022649:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002264e:	50                   	push   eax
c002264f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022654:	50                   	push   eax
c0022655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022659:	e8 56 fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002265e:	83 c4 2c             	add    esp,0x2c
c0022661:	c3                   	ret    

c0022662 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022662:	83 ec 18             	sub    esp,0x18
c0022665:	6a 18                	push   0x18
c0022667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266c:	50                   	push   eax
c002266d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022672:	50                   	push   eax
c0022673:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022678:	50                   	push   eax
c0022679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002267d:	e8 32 fe ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022682:	83 c4 2c             	add    esp,0x2c
c0022685:	0f b6 c4             	movzx  eax,ah
c0022688:	c3                   	ret    
c0022689:	90                   	nop

c002268a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002268a:	55                   	push   ebp
c002268b:	57                   	push   edi
c002268c:	56                   	push   esi
c002268d:	53                   	push   ebx
c002268e:	83 ec 28             	sub    esp,0x28
c0022691:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022695:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002269a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002269f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00226a4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00226ab:	8d 43 12             	lea    eax,[ebx+0x12]
c00226ae:	83 c3 10             	add    ebx,0x10
c00226b1:	0f b6 c0             	movzx  eax,al
c00226b4:	0f b6 db             	movzx  ebx,bl
c00226b7:	50                   	push   eax
c00226b8:	51                   	push   ecx
c00226b9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00226bd:	57                   	push   edi
c00226be:	55                   	push   ebp
c00226bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226c3:	e8 ec fd ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c8:	83 c4 14             	add    esp,0x14
c00226cb:	89 c6                	mov    esi,eax
c00226cd:	53                   	push   ebx
c00226ce:	c1 e6 10             	shl    esi,0x10
c00226d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00226d5:	51                   	push   ecx
c00226d6:	57                   	push   edi
c00226d7:	55                   	push   ebp
c00226d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226dc:	e8 d3 fd ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e1:	83 c4 3c             	add    esp,0x3c
c00226e4:	0f b7 c0             	movzx  eax,ax
c00226e7:	5b                   	pop    ebx
c00226e8:	09 f0                	or     eax,esi
c00226ea:	5e                   	pop    esi
c00226eb:	5f                   	pop    edi
c00226ec:	5d                   	pop    ebp
c00226ed:	c3                   	ret    

c00226ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00226ee:	55                   	push   ebp
c00226ef:	57                   	push   edi
c00226f0:	56                   	push   esi
c00226f1:	53                   	push   ebx
c00226f2:	83 ec 0c             	sub    esp,0xc
c00226f5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00226f9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00226fd:	89 f5                	mov    ebp,esi
c00226ff:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022709:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002270d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022711:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022715:	83 f9 01             	cmp    ecx,0x1
c0022718:	75 5d                	jne    c0022777 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002271a:	0f b6 c8             	movzx  ecx,al
c002271d:	0f b6 d2             	movzx  edx,dl
c0022720:	c1 e1 10             	shl    ecx,0x10
c0022723:	c1 e2 0b             	shl    edx,0xb
c0022726:	89 f0                	mov    eax,esi
c0022728:	25 fc 00 00 00       	and    eax,0xfc
c002272d:	09 c1                	or     ecx,eax
c002272f:	89 e8                	mov    eax,ebp
c0022731:	0f b6 c0             	movzx  eax,al
c0022734:	c1 e0 08             	shl    eax,0x8
c0022737:	09 c1                	or     ecx,eax
c0022739:	09 d1                	or     ecx,edx
c002273b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022740:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022746:	89 c8                	mov    eax,ecx
c0022748:	ef                   	out    dx,eax
c0022749:	ba fc 0c 00 00       	mov    edx,0xcfc
c002274e:	ed                   	in     eax,dx
c002274f:	0f b7 db             	movzx  ebx,bx
c0022752:	83 e6 02             	and    esi,0x2
c0022755:	74 0a                	je     c0022761 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022757:	0f b7 d0             	movzx  edx,ax
c002275a:	c1 e3 10             	shl    ebx,0x10
c002275d:	09 d3                	or     ebx,edx
c002275f:	eb 05                	jmp    c0022766 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022761:	66 31 c0             	xor    ax,ax
c0022764:	09 c3                	or     ebx,eax
c0022766:	ba f8 0c 00 00       	mov    edx,0xcf8
c002276b:	89 c8                	mov    eax,ecx
c002276d:	ef                   	out    dx,eax
c002276e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022773:	89 d8                	mov    eax,ebx
c0022775:	eb 41                	jmp    c00227b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022777:	83 f9 02             	cmp    ecx,0x2
c002277a:	75 45                	jne    c00227c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002277c:	83 ec 0c             	sub    esp,0xc
c002277f:	0f b6 d2             	movzx  edx,dl
c0022782:	89 f1                	mov    ecx,esi
c0022784:	0f b6 c0             	movzx  eax,al
c0022787:	0f b6 f1             	movzx  esi,cl
c002278a:	89 e9                	mov    ecx,ebp
c002278c:	56                   	push   esi
c002278d:	0f b6 c9             	movzx  ecx,cl
c0022790:	51                   	push   ecx
c0022791:	52                   	push   edx
c0022792:	50                   	push   eax
c0022793:	57                   	push   edi
c0022794:	e8 ad fc ff ff       	call   c0022446 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022799:	89 c2                	mov    edx,eax
c002279b:	ed                   	in     eax,dx
c002279c:	83 c4 20             	add    esp,0x20
c002279f:	0f b7 db             	movzx  ebx,bx
c00227a2:	f6 c2 02             	test   dl,0x2
c00227a5:	74 0c                	je     c00227b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00227a7:	0f b7 c8             	movzx  ecx,ax
c00227aa:	89 d8                	mov    eax,ebx
c00227ac:	c1 e0 10             	shl    eax,0x10
c00227af:	09 c8                	or     eax,ecx
c00227b1:	eb 05                	jmp    c00227b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227b3:	66 31 c0             	xor    ax,ax
c00227b6:	09 d8                	or     eax,ebx
c00227b8:	ef                   	out    dx,eax
c00227b9:	83 c4 0c             	add    esp,0xc
c00227bc:	5b                   	pop    ebx
c00227bd:	5e                   	pop    esi
c00227be:	5f                   	pop    edi
c00227bf:	5d                   	pop    ebp
c00227c0:	c3                   	ret    
c00227c1:	c7 44 24 20 20 bf 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bf20
c00227c9:	83 c4 0c             	add    esp,0xc
c00227cc:	5b                   	pop    ebx
c00227cd:	5e                   	pop    esi
c00227ce:	5f                   	pop    edi
c00227cf:	5d                   	pop    ebp
c00227d0:	e9 00 76 ff ff       	jmp    c0019dd5 <Krnl::panic(char const*)>
c00227d5:	90                   	nop

c00227d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00227d6:	55                   	push   ebp
c00227d7:	57                   	push   edi
c00227d8:	56                   	push   esi
c00227d9:	53                   	push   ebx
c00227da:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00227e0:	80 3d d0 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031bd0,0x0
c00227e7:	0f 85 84 00 00 00    	jne    c0022871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00227ed:	83 ec 0c             	sub    esp,0xc
c00227f0:	68 14 01 00 00       	push   0x114
c00227f5:	e8 9f cd fe ff       	call   c000f599 <malloc>
c00227fa:	83 c4 0c             	add    esp,0xc
c00227fd:	89 c3                	mov    ebx,eax
c00227ff:	ff 35 d0 0d 03 c0    	push   DWORD PTR ds:0xc0030dd0
c0022805:	68 26 bf 02 c0       	push   0xc002bf26
c002280a:	50                   	push   eax
c002280b:	e8 b8 03 ff ff       	call   c0012bc8 <File::File(char const*, Process*)>
c0022810:	5a                   	pop    edx
c0022811:	59                   	pop    ecx
c0022812:	6a 01                	push   0x1
c0022814:	53                   	push   ebx
c0022815:	e8 12 04 ff ff       	call   c0012c2c <File::open(FileOpenMode)>
c002281a:	83 c4 0c             	add    esp,0xc
c002281d:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022821:	50                   	push   eax
c0022822:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022826:	50                   	push   eax
c0022827:	53                   	push   ebx
c0022828:	e8 ab 06 ff ff       	call   c0012ed8 <File::stat(unsigned long long*, bool*)>
c002282d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022831:	40                   	inc    eax
c0022832:	89 04 24             	mov    DWORD PTR [esp],eax
c0022835:	e8 5f cd fe ff       	call   c000f599 <malloc>
c002283a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002283e:	a3 cc 1b 03 c0       	mov    ds:0xc0031bcc,eax
c0022843:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022847:	5e                   	pop    esi
c0022848:	8b 13                	mov    edx,DWORD PTR [ebx]
c002284a:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002284e:	51                   	push   ecx
c002284f:	50                   	push   eax
c0022850:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022854:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022858:	53                   	push   ebx
c0022859:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002285c:	83 c4 14             	add    esp,0x14
c002285f:	53                   	push   ebx
c0022860:	e8 25 04 ff ff       	call   c0012c8a <File::close()>
c0022865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022869:	83 c4 10             	add    esp,0x10
c002286c:	a3 c8 1b 03 c0       	mov    ds:0xc0031bc8,eax
c0022871:	a1 c8 1b 03 c0       	mov    eax,ds:0xc0031bc8
c0022876:	8b 15 cc 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bcc
c002287c:	89 04 24             	mov    DWORD PTR [esp],eax
c002287f:	31 ff                	xor    edi,edi
c0022881:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022889:	31 f6                	xor    esi,esi
c002288b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022890:	31 db                	xor    ebx,ebx
c0022892:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002289a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002289f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00228a6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00228aa:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00228b1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00228b5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00228b8:	0f 8e 6b 01 00 00    	jle    c0022a29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00228be:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00228c1:	d4 40                	aam    0x40
c00228c3:	d5 39                	aad    0x39
c00228c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00228c9:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00228cd:	d4 40                	aam    0x40
c00228cf:	d5 39                	aad    0x39
c00228d1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00228d5:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00228d9:	d4 40                	aam    0x40
c00228db:	d5 39                	aad    0x39
c00228dd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00228e1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00228e5:	d4 40                	aam    0x40
c00228e7:	d5 39                	aad    0x39
c00228e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00228ed:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00228f1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00228f5:	3c 56                	cmp    al,0x56
c00228f7:	74 45                	je     c002293e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00228f9:	d4 40                	aam    0x40
c00228fb:	d5 39                	aad    0x39
c00228fd:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022900:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022904:	0f b6 c9             	movzx  ecx,cl
c0022907:	c1 e1 04             	shl    ecx,0x4
c002290a:	d4 40                	aam    0x40
c002290c:	d5 39                	aad    0x39
c002290e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022911:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022915:	0f b6 db             	movzx  ebx,bl
c0022918:	09 cb                	or     ebx,ecx
c002291a:	c1 e3 04             	shl    ebx,0x4
c002291d:	d4 40                	aam    0x40
c002291f:	d5 39                	aad    0x39
c0022921:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022924:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022928:	0f b6 c9             	movzx  ecx,cl
c002292b:	09 cb                	or     ebx,ecx
c002292d:	c1 e3 04             	shl    ebx,0x4
c0022930:	89 d9                	mov    ecx,ebx
c0022932:	d4 40                	aam    0x40
c0022934:	d5 39                	aad    0x39
c0022936:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022939:	0f b6 db             	movzx  ebx,bl
c002293c:	09 cb                	or     ebx,ecx
c002293e:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022942:	80 f9 44             	cmp    cl,0x44
c0022945:	74 47                	je     c002298e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022947:	88 c8                	mov    al,cl
c0022949:	d4 40                	aam    0x40
c002294b:	d5 39                	aad    0x39
c002294d:	83 e8 30             	sub    eax,0x30
c0022950:	0f b6 e8             	movzx  ebp,al
c0022953:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022957:	c1 e5 04             	shl    ebp,0x4
c002295a:	d4 40                	aam    0x40
c002295c:	d5 39                	aad    0x39
c002295e:	83 e8 30             	sub    eax,0x30
c0022961:	0f b6 f0             	movzx  esi,al
c0022964:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022968:	09 ee                	or     esi,ebp
c002296a:	c1 e6 04             	shl    esi,0x4
c002296d:	d4 40                	aam    0x40
c002296f:	d5 39                	aad    0x39
c0022971:	83 e8 30             	sub    eax,0x30
c0022974:	0f b6 e8             	movzx  ebp,al
c0022977:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002297b:	09 ee                	or     esi,ebp
c002297d:	c1 e6 04             	shl    esi,0x4
c0022980:	89 f5                	mov    ebp,esi
c0022982:	d4 40                	aam    0x40
c0022984:	d5 39                	aad    0x39
c0022986:	83 e8 30             	sub    eax,0x30
c0022989:	0f b6 f0             	movzx  esi,al
c002298c:	09 ee                	or     esi,ebp
c002298e:	83 c7 10             	add    edi,0x10
c0022991:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022995:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022998:	3c 0a                	cmp    al,0xa
c002299a:	74 09                	je     c00229a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002299c:	45                   	inc    ebp
c002299d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229a0:	75 16                	jne    c00229b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00229a2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00229a5:	3c 0a                	cmp    al,0xa
c00229a7:	0f 94 c0             	sete   al
c00229aa:	0f b6 c0             	movzx  eax,al
c00229ad:	01 c7                	add    edi,eax
c00229af:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00229b4:	75 0c                	jne    c00229c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00229b6:	eb 15                	jmp    c00229cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00229b8:	47                   	inc    edi
c00229b9:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00229bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00229c0:	eb d3                	jmp    c0022995 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00229c2:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00229c7:	0f 85 e8 fe ff ff    	jne    c00228b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00229cd:	80 f9 44             	cmp    cl,0x44
c00229d0:	74 0b                	je     c00229dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00229d2:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00229d7:	0f 85 d8 fe ff ff    	jne    c00228b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00229dd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00229e1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00229e5:	c1 e1 04             	shl    ecx,0x4
c00229e8:	83 e8 30             	sub    eax,0x30
c00229eb:	09 c8                	or     eax,ecx
c00229ed:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00229f1:	0f 85 be fe ff ff    	jne    c00228b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00229f7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00229fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00229ff:	c1 e1 04             	shl    ecx,0x4
c0022a02:	83 e8 30             	sub    eax,0x30
c0022a05:	09 c8                	or     eax,ecx
c0022a07:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a0b:	0f 85 a4 fe ff ff    	jne    c00228b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a11:	50                   	push   eax
c0022a12:	50                   	push   eax
c0022a13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a17:	50                   	push   eax
c0022a18:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a1f:	e8 e8 dd fd ff       	call   c000080c <strcpy>
c0022a24:	83 c4 10             	add    esp,0x10
c0022a27:	eb 15                	jmp    c0022a3e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a29:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a30:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a3b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a3e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a45:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022a4b:	5b                   	pop    ebx
c0022a4c:	5e                   	pop    esi
c0022a4d:	5f                   	pop    edi
c0022a4e:	5d                   	pop    ebp
c0022a4f:	c3                   	ret    

c0022a50 <PCI::checkBus(unsigned char)>:
c0022a50:	56                   	push   esi
c0022a51:	53                   	push   ebx
c0022a52:	31 db                	xor    ebx,ebx
c0022a54:	51                   	push   ecx
c0022a55:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a5a:	52                   	push   edx
c0022a5b:	53                   	push   ebx
c0022a5c:	43                   	inc    ebx
c0022a5d:	56                   	push   esi
c0022a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a62:	e8 37 03 00 00       	call   c0022d9e <PCI::checkDevice(unsigned char, unsigned char)>
c0022a67:	83 c4 10             	add    esp,0x10
c0022a6a:	83 fb 20             	cmp    ebx,0x20
c0022a6d:	75 eb                	jne    c0022a5a <PCI::checkBus(unsigned char)+0xa>
c0022a6f:	58                   	pop    eax
c0022a70:	5b                   	pop    ebx
c0022a71:	5e                   	pop    esi
c0022a72:	c3                   	ret    
c0022a73:	90                   	nop

c0022a74 <PCI::foundDevice(PCIDeviceInfo)>:
c0022a74:	55                   	push   ebp
c0022a75:	57                   	push   edi
c0022a76:	56                   	push   esi
c0022a77:	53                   	push   ebx
c0022a78:	83 ec 1c             	sub    esp,0x1c
c0022a7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a7f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a85:	0f 84 52 01 00 00    	je     c0022bdd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a8b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a8f:	66 81 f9 06 04       	cmp    cx,0x406
c0022a94:	75 2c                	jne    c0022ac2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a96:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a9b:	50                   	push   eax
c0022a9c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022aa1:	50                   	push   eax
c0022aa2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022aa7:	50                   	push   eax
c0022aa8:	56                   	push   esi
c0022aa9:	e8 b4 fb ff ff       	call   c0022662 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022aae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ab2:	0f b6 c0             	movzx  eax,al
c0022ab5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ab9:	83 c4 2c             	add    esp,0x2c
c0022abc:	5b                   	pop    ebx
c0022abd:	5e                   	pop    esi
c0022abe:	5f                   	pop    edi
c0022abf:	5d                   	pop    ebp
c0022ac0:	eb 8e                	jmp    c0022a50 <PCI::checkBus(unsigned char)>
c0022ac2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ac6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022acc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ad0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ad4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ad8:	88 d3                	mov    bl,dl
c0022ada:	85 c0                	test   eax,eax
c0022adc:	74 33                	je     c0022b11 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ade:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ae1:	85 d2                	test   edx,edx
c0022ae3:	74 28                	je     c0022b0d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ae5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022aeb:	31 ef                	xor    edi,ebp
c0022aed:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022af3:	75 18                	jne    c0022b0d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022af5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022af9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022aff:	75 0c                	jne    c0022b0d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b01:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b07:	0f 84 d0 00 00 00    	je     c0022bdd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b0f:	eb c9                	jmp    c0022ada <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b11:	66 81 f9 01 06       	cmp    cx,0x601
c0022b16:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b1a:	75 19                	jne    c0022b35 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	68 64 01 00 00       	push   0x164
c0022b24:	e8 70 ca fe ff       	call   c000f599 <malloc>
c0022b29:	89 c5                	mov    ebp,eax
c0022b2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b2e:	e8 85 0e 00 00       	call   c00239b8 <SATABus::SATABus()>
c0022b33:	eb 1e                	jmp    c0022b53 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b35:	66 81 f9 01 01       	cmp    cx,0x101
c0022b3a:	75 60                	jne    c0022b9c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b3c:	83 ec 0c             	sub    esp,0xc
c0022b3f:	68 70 02 00 00       	push   0x270
c0022b44:	e8 50 ca fe ff       	call   c000f599 <malloc>
c0022b49:	89 c5                	mov    ebp,eax
c0022b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b4e:	e8 0f 03 00 00       	call   c0022e62 <IDE::IDE()>
c0022b53:	58                   	pop    eax
c0022b54:	5a                   	pop    edx
c0022b55:	55                   	push   ebp
c0022b56:	56                   	push   esi
c0022b57:	e8 46 0f ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0022b5c:	83 ec 1c             	sub    esp,0x1c
c0022b5f:	b9 09 00 00 00       	mov    ecx,0x9
c0022b64:	fc                   	cld    
c0022b65:	89 e7                	mov    edi,esp
c0022b67:	89 de                	mov    esi,ebx
c0022b69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b6b:	55                   	push   ebp
c0022b6c:	e8 43 0e ff ff       	call   c00139b4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b74:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b78:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b80:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b88:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b93:	83 c4 4c             	add    esp,0x4c
c0022b96:	5b                   	pop    ebx
c0022b97:	5e                   	pop    esi
c0022b98:	5f                   	pop    edi
c0022b99:	5d                   	pop    ebp
c0022b9a:	ff e0                	jmp    eax
c0022b9c:	83 ec 0c             	sub    esp,0xc
c0022b9f:	68 58 01 00 00       	push   0x158
c0022ba4:	e8 f0 c9 fe ff       	call   c000f599 <malloc>
c0022ba9:	89 c5                	mov    ebp,eax
c0022bab:	58                   	pop    eax
c0022bac:	5a                   	pop    edx
c0022bad:	68 3f bf 02 c0       	push   0xc002bf3f
c0022bb2:	55                   	push   ebp
c0022bb3:	e8 f4 11 ff ff       	call   c0013dac <DriverlessDevice::DriverlessDevice(char const*)>
c0022bb8:	59                   	pop    ecx
c0022bb9:	5f                   	pop    edi
c0022bba:	55                   	push   ebp
c0022bbb:	56                   	push   esi
c0022bbc:	e8 e1 0e ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c0022bc1:	b9 09 00 00 00       	mov    ecx,0x9
c0022bc6:	fc                   	cld    
c0022bc7:	89 df                	mov    edi,ebx
c0022bc9:	89 de                	mov    esi,ebx
c0022bcb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bcd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022bd1:	83 c4 2c             	add    esp,0x2c
c0022bd4:	5b                   	pop    ebx
c0022bd5:	5e                   	pop    esi
c0022bd6:	5f                   	pop    edi
c0022bd7:	5d                   	pop    ebp
c0022bd8:	e9 d7 0d ff ff       	jmp    c00139b4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bdd:	83 c4 1c             	add    esp,0x1c
c0022be0:	5b                   	pop    ebx
c0022be1:	5e                   	pop    esi
c0022be2:	5f                   	pop    edi
c0022be3:	5d                   	pop    ebp
c0022be4:	c3                   	ret    
c0022be5:	90                   	nop

c0022be6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022be6:	55                   	push   ebp
c0022be7:	57                   	push   edi
c0022be8:	56                   	push   esi
c0022be9:	53                   	push   ebx
c0022bea:	83 ec 68             	sub    esp,0x68
c0022bed:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022bf1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022bf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022bfc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c03:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c0c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c13:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c1c:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c21:	6a 0c                	push   0xc
c0022c23:	57                   	push   edi
c0022c24:	53                   	push   ebx
c0022c25:	56                   	push   esi
c0022c26:	55                   	push   ebp
c0022c27:	e8 88 f8 ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c2c:	83 c4 20             	add    esp,0x20
c0022c2f:	57                   	push   edi
c0022c30:	53                   	push   ebx
c0022c31:	56                   	push   esi
c0022c32:	55                   	push   ebp
c0022c33:	e8 70 f9 ff ff       	call   c00225a8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c38:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022c3d:	57                   	push   edi
c0022c3e:	53                   	push   ebx
c0022c3f:	56                   	push   esi
c0022c40:	55                   	push   ebp
c0022c41:	e8 f8 f9 ff ff       	call   c002263e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c46:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022c4a:	83 c4 14             	add    esp,0x14
c0022c4d:	6a 3c                	push   0x3c
c0022c4f:	57                   	push   edi
c0022c50:	53                   	push   ebx
c0022c51:	56                   	push   esi
c0022c52:	55                   	push   ebp
c0022c53:	e8 5c f8 ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c58:	0f b6 c4             	movzx  eax,ah
c0022c5b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022c5f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022c63:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022c67:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0022c6c:	83 c4 20             	add    esp,0x20
c0022c6f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c75:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c7c:	74 7c                	je     c0022cfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022c7e:	31 c0                	xor    eax,eax
c0022c80:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c0022c86:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c8c:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022c92:	7e 66                	jle    c0022cfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022c94:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022c97:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c9e:	39 cb                	cmp    ebx,ecx
c0022ca0:	75 55                	jne    c0022cf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022ca2:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ca9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022cad:	75 48                	jne    c0022cf7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022caf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022cb3:	83 ec 0c             	sub    esp,0xc
c0022cb6:	68 59 bf 02 c0       	push   0xc002bf59
c0022cbb:	e8 a9 f9 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0022cc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022cc4:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c0022cca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022cce:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cd4:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022cdc:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022ce0:	52                   	push   edx
c0022ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ce5:	53                   	push   ebx
c0022ce6:	68 7e bf 02 c0       	push   0xc002bf7e
c0022ceb:	e8 79 f9 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0022cf0:	83 c4 20             	add    esp,0x20
c0022cf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cf7:	40                   	inc    eax
c0022cf8:	eb 86                	jmp    c0022c80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022cfa:	31 d2                	xor    edx,edx
c0022cfc:	83 ec 0c             	sub    esp,0xc
c0022cff:	57                   	push   edi
c0022d00:	53                   	push   ebx
c0022d01:	56                   	push   esi
c0022d02:	52                   	push   edx
c0022d03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d07:	55                   	push   ebp
c0022d08:	e8 7d f9 ff ff       	call   c002268a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d15:	42                   	inc    edx
c0022d16:	83 c4 20             	add    esp,0x20
c0022d19:	83 fa 06             	cmp    edx,0x6
c0022d1c:	75 de                	jne    c0022cfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d1e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d23:	83 ec 0c             	sub    esp,0xc
c0022d26:	86 e0                	xchg   al,ah
c0022d28:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d2d:	6a 02                	push   0x2
c0022d2f:	57                   	push   edi
c0022d30:	53                   	push   ebx
c0022d31:	56                   	push   esi
c0022d32:	55                   	push   ebp
c0022d33:	e8 7c f7 ff ff       	call   c00224b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d38:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022d3d:	83 c4 20             	add    esp,0x20
c0022d40:	57                   	push   edi
c0022d41:	53                   	push   ebx
c0022d42:	56                   	push   esi
c0022d43:	55                   	push   ebp
c0022d44:	e8 a9 f8 ff ff       	call   c00225f2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d49:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d4d:	57                   	push   edi
c0022d4e:	53                   	push   ebx
c0022d4f:	56                   	push   esi
c0022d50:	55                   	push   ebp
c0022d51:	e8 06 f8 ff ff       	call   c002255c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d56:	b9 09 00 00 00       	mov    ecx,0x9
c0022d5b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022d60:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022d64:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022d68:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022d6c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022d70:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d74:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022d78:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022d7c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022d80:	83 ec 0c             	sub    esp,0xc
c0022d83:	fc                   	cld    
c0022d84:	89 e7                	mov    edi,esp
c0022d86:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022d8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d8c:	55                   	push   ebp
c0022d8d:	e8 e2 fc ff ff       	call   c0022a74 <PCI::foundDevice(PCIDeviceInfo)>
c0022d92:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d98:	5b                   	pop    ebx
c0022d99:	5e                   	pop    esi
c0022d9a:	5f                   	pop    edi
c0022d9b:	5d                   	pop    ebp
c0022d9c:	c3                   	ret    
c0022d9d:	90                   	nop

c0022d9e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d9e:	55                   	push   ebp
c0022d9f:	57                   	push   edi
c0022da0:	56                   	push   esi
c0022da1:	53                   	push   ebx
c0022da2:	83 ec 0c             	sub    esp,0xc
c0022da5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022da9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022dae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022db3:	6a 00                	push   0x0
c0022db5:	56                   	push   esi
c0022db6:	57                   	push   edi
c0022db7:	55                   	push   ebp
c0022db8:	e8 9f f7 ff ff       	call   c002255c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dbd:	6a 00                	push   0x0
c0022dbf:	56                   	push   esi
c0022dc0:	57                   	push   edi
c0022dc1:	55                   	push   ebp
c0022dc2:	e8 1f fe ff ff       	call   c0022be6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022dc7:	83 c4 20             	add    esp,0x20
c0022dca:	6a 00                	push   0x0
c0022dcc:	56                   	push   esi
c0022dcd:	57                   	push   edi
c0022dce:	55                   	push   ebp
c0022dcf:	e8 ac f7 ff ff       	call   c0022580 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dd4:	83 c4 10             	add    esp,0x10
c0022dd7:	84 c0                	test   al,al
c0022dd9:	79 27                	jns    c0022e02 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0022de0:	53                   	push   ebx
c0022de1:	56                   	push   esi
c0022de2:	57                   	push   edi
c0022de3:	55                   	push   ebp
c0022de4:	e8 73 f7 ff ff       	call   c002255c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022de9:	83 c4 10             	add    esp,0x10
c0022dec:	66 40                	inc    ax
c0022dee:	74 0c                	je     c0022dfc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022df0:	53                   	push   ebx
c0022df1:	56                   	push   esi
c0022df2:	57                   	push   edi
c0022df3:	55                   	push   ebp
c0022df4:	e8 ed fd ff ff       	call   c0022be6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022df9:	83 c4 10             	add    esp,0x10
c0022dfc:	43                   	inc    ebx
c0022dfd:	83 fb 08             	cmp    ebx,0x8
c0022e00:	75 de                	jne    c0022de0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e02:	83 c4 0c             	add    esp,0xc
c0022e05:	5b                   	pop    ebx
c0022e06:	5e                   	pop    esi
c0022e07:	5f                   	pop    edi
c0022e08:	5d                   	pop    ebp
c0022e09:	c3                   	ret    

c0022e0a <PCI::detect()>:
c0022e0a:	56                   	push   esi
c0022e0b:	53                   	push   ebx
c0022e0c:	53                   	push   ebx
c0022e0d:	31 db                	xor    ebx,ebx
c0022e0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e13:	6a 00                	push   0x0
c0022e15:	6a 00                	push   0x0
c0022e17:	6a 00                	push   0x0
c0022e19:	56                   	push   esi
c0022e1a:	e8 61 f7 ff ff       	call   c0022580 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e1f:	83 c4 10             	add    esp,0x10
c0022e22:	a8 80                	test   al,0x80
c0022e24:	75 21                	jne    c0022e47 <PCI::detect()+0x3d>
c0022e26:	51                   	push   ecx
c0022e27:	51                   	push   ecx
c0022e28:	6a 00                	push   0x0
c0022e2a:	56                   	push   esi
c0022e2b:	e8 20 fc ff ff       	call   c0022a50 <PCI::checkBus(unsigned char)>
c0022e30:	83 c4 10             	add    esp,0x10
c0022e33:	eb 24                	jmp    c0022e59 <PCI::detect()+0x4f>
c0022e35:	52                   	push   edx
c0022e36:	52                   	push   edx
c0022e37:	53                   	push   ebx
c0022e38:	43                   	inc    ebx
c0022e39:	56                   	push   esi
c0022e3a:	e8 11 fc ff ff       	call   c0022a50 <PCI::checkBus(unsigned char)>
c0022e3f:	83 c4 10             	add    esp,0x10
c0022e42:	83 fb 08             	cmp    ebx,0x8
c0022e45:	74 12                	je     c0022e59 <PCI::detect()+0x4f>
c0022e47:	53                   	push   ebx
c0022e48:	6a 00                	push   0x0
c0022e4a:	6a 00                	push   0x0
c0022e4c:	56                   	push   esi
c0022e4d:	e8 0a f7 ff ff       	call   c002255c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e52:	83 c4 10             	add    esp,0x10
c0022e55:	66 40                	inc    ax
c0022e57:	74 dc                	je     c0022e35 <PCI::detect()+0x2b>
c0022e59:	58                   	pop    eax
c0022e5a:	5b                   	pop    ebx
c0022e5b:	5e                   	pop    esi
c0022e5c:	c3                   	ret    
c0022e5d:	90                   	nop

c0022e5e <IDE::close(int, int, void*)>:
c0022e5e:	83 c8 ff             	or     eax,0xffffffff
c0022e61:	c3                   	ret    

c0022e62 <IDE::IDE()>:
c0022e62:	83 ec 0c             	sub    esp,0xc
c0022e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e69:	83 ec 08             	sub    esp,0x8
c0022e6c:	68 c8 bf 02 c0       	push   0xc002bfc8
c0022e71:	50                   	push   eax
c0022e72:	e8 d9 0f ff ff       	call   c0013e50 <HardDiskController::HardDiskController(char const*)>
c0022e77:	83 c4 10             	add    esp,0x10
c0022e7a:	ba 58 c0 02 c0       	mov    edx,0xc002c058
c0022e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e83:	89 10                	mov    DWORD PTR [eax],edx
c0022e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e89:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e90:	90                   	nop
c0022e91:	83 c4 0c             	add    esp,0xc
c0022e94:	c3                   	ret    
c0022e95:	90                   	nop

c0022e96 <IDE::prepareInterrupt(unsigned char)>:
c0022e96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e9f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ea7:	c3                   	ret    

c0022ea8 <selectDrive(unsigned char, unsigned char)>:
c0022ea8:	c3                   	ret    
c0022ea9:	90                   	nop

c0022eaa <IDE::getBase(unsigned char)>:
c0022eaa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022eaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eb3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022ebb:	c3                   	ret    

c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022ebc:	55                   	push   ebp
c0022ebd:	57                   	push   edi
c0022ebe:	56                   	push   esi
c0022ebf:	53                   	push   ebx
c0022ec0:	83 ec 1c             	sub    esp,0x1c
c0022ec3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ec7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ecb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ece:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ed2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ed6:	80 f9 03             	cmp    cl,0x3
c0022ed9:	77 51                	ja     c0022f2c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022edb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022edf:	0f b6 f2             	movzx  esi,dl
c0022ee2:	0f b6 db             	movzx  ebx,bl
c0022ee5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ee8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022eec:	83 ca 80             	or     edx,0xffffff80
c0022eef:	0f b6 d2             	movzx  edx,dl
c0022ef2:	52                   	push   edx
c0022ef3:	6a 0c                	push   0xc
c0022ef5:	56                   	push   esi
c0022ef6:	57                   	push   edi
c0022ef7:	e8 c0 ff ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022efc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f05:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f09:	ee                   	out    dx,al
c0022f0a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f0f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f13:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f17:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f1b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f23:	83 c4 2c             	add    esp,0x2c
c0022f26:	5b                   	pop    ebx
c0022f27:	5e                   	pop    esi
c0022f28:	5f                   	pop    edi
c0022f29:	5d                   	pop    ebp
c0022f2a:	eb 90                	jmp    c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f2c:	80 fb 07             	cmp    bl,0x7
c0022f2f:	77 12                	ja     c0022f43 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f31:	0f b6 d2             	movzx  edx,dl
c0022f34:	0f b6 db             	movzx  ebx,bl
c0022f37:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f3f:	89 da                	mov    edx,ebx
c0022f41:	eb 2f                	jmp    c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f43:	80 fb 0d             	cmp    bl,0xd
c0022f46:	77 13                	ja     c0022f5b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f48:	0f b6 d2             	movzx  edx,dl
c0022f4b:	0f b6 db             	movzx  ebx,bl
c0022f4e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f55:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f59:	eb 17                	jmp    c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f5b:	80 fb 15             	cmp    bl,0x15
c0022f5e:	77 13                	ja     c0022f73 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f60:	0f b6 d2             	movzx  edx,dl
c0022f63:	0f b6 db             	movzx  ebx,bl
c0022f66:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f6e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f72:	ee                   	out    dx,al
c0022f73:	83 c4 1c             	add    esp,0x1c
c0022f76:	5b                   	pop    ebx
c0022f77:	5e                   	pop    esi
c0022f78:	5f                   	pop    edi
c0022f79:	5d                   	pop    ebp
c0022f7a:	c3                   	ret    
c0022f7b:	90                   	nop

c0022f7c <IDE::read(unsigned char, unsigned char)>:
c0022f7c:	55                   	push   ebp
c0022f7d:	57                   	push   edi
c0022f7e:	56                   	push   esi
c0022f7f:	53                   	push   ebx
c0022f80:	83 ec 1c             	sub    esp,0x1c
c0022f83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f8b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f92:	3c 03                	cmp    al,0x3
c0022f94:	77 43                	ja     c0022fd9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f96:	0f b6 f2             	movzx  esi,dl
c0022f99:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f9c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fa0:	83 c8 80             	or     eax,0xffffff80
c0022fa3:	0f b6 c0             	movzx  eax,al
c0022fa6:	50                   	push   eax
c0022fa7:	6a 0c                	push   0xc
c0022fa9:	56                   	push   esi
c0022faa:	57                   	push   edi
c0022fab:	e8 0c ff ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fb0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fb5:	0f b6 c3             	movzx  eax,bl
c0022fb8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fbc:	ec                   	in     al,dx
c0022fbd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fc1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fc6:	52                   	push   edx
c0022fc7:	6a 0c                	push   0xc
c0022fc9:	56                   	push   esi
c0022fca:	57                   	push   edi
c0022fcb:	e8 ec fe ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fd0:	83 c4 20             	add    esp,0x20
c0022fd3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fd7:	eb 49                	jmp    c0023022 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fd9:	80 fb 07             	cmp    bl,0x7
c0022fdc:	77 12                	ja     c0022ff0 <IDE::read(unsigned char, unsigned char)+0x74>
c0022fde:	0f b6 d2             	movzx  edx,dl
c0022fe1:	0f b6 c3             	movzx  eax,bl
c0022fe4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fec:	89 c2                	mov    edx,eax
c0022fee:	eb 31                	jmp    c0023021 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ff0:	80 fb 0d             	cmp    bl,0xd
c0022ff3:	77 13                	ja     c0023008 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022ff5:	0f b6 d2             	movzx  edx,dl
c0022ff8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022fff:	0f b6 d3             	movzx  edx,bl
c0023002:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023006:	eb 19                	jmp    c0023021 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023008:	31 c0                	xor    eax,eax
c002300a:	80 fb 15             	cmp    bl,0x15
c002300d:	77 13                	ja     c0023022 <IDE::read(unsigned char, unsigned char)+0xa6>
c002300f:	0f b6 d2             	movzx  edx,dl
c0023012:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002301a:	0f b6 d3             	movzx  edx,bl
c002301d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023021:	ec                   	in     al,dx
c0023022:	83 c4 1c             	add    esp,0x1c
c0023025:	5b                   	pop    ebx
c0023026:	5e                   	pop    esi
c0023027:	5f                   	pop    edi
c0023028:	5d                   	pop    ebp
c0023029:	c3                   	ret    

c002302a <IDE::waitInterrupt(unsigned char)>:
c002302a:	55                   	push   ebp
c002302b:	57                   	push   edi
c002302c:	56                   	push   esi
c002302d:	53                   	push   ebx
c002302e:	31 db                	xor    ebx,ebx
c0023030:	83 ec 0c             	sub    esp,0xc
c0023033:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023037:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002303c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023044:	89 e8                	mov    eax,ebp
c0023046:	84 c0                	test   al,al
c0023048:	75 34                	jne    c002307e <IDE::waitInterrupt(unsigned char)+0x54>
c002304a:	52                   	push   edx
c002304b:	6a 0c                	push   0xc
c002304d:	56                   	push   esi
c002304e:	57                   	push   edi
c002304f:	e8 28 ff ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023054:	83 c4 10             	add    esp,0x10
c0023057:	a8 01                	test   al,0x1
c0023059:	75 2b                	jne    c0023086 <IDE::waitInterrupt(unsigned char)+0x5c>
c002305b:	f6 c3 04             	test   bl,0x4
c002305e:	75 16                	jne    c0023076 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023060:	83 fb 32             	cmp    ebx,0x32
c0023063:	7e 11                	jle    c0023076 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023065:	50                   	push   eax
c0023066:	50                   	push   eax
c0023067:	6a 00                	push   0x0
c0023069:	68 80 96 98 00       	push   0x989680
c002306e:	e8 c6 ab ff ff       	call   c001dc39 <nanoSleep(unsigned long long)>
c0023073:	83 c4 10             	add    esp,0x10
c0023076:	83 fb 3c             	cmp    ebx,0x3c
c0023079:	74 0b                	je     c0023086 <IDE::waitInterrupt(unsigned char)+0x5c>
c002307b:	43                   	inc    ebx
c002307c:	eb be                	jmp    c002303c <IDE::waitInterrupt(unsigned char)+0x12>
c002307e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023086:	83 c4 0c             	add    esp,0xc
c0023089:	89 e8                	mov    eax,ebp
c002308b:	5b                   	pop    ebx
c002308c:	5e                   	pop    esi
c002308d:	5f                   	pop    edi
c002308e:	5d                   	pop    ebp
c002308f:	c3                   	ret    

c0023090 <ideChannel0IRQHandler(regs*, void*)>:
c0023090:	83 ec 10             	sub    esp,0x10
c0023093:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023097:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002309e:	6a 07                	push   0x7
c00230a0:	6a 00                	push   0x0
c00230a2:	50                   	push   eax
c00230a3:	e8 d4 fe ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00230a8:	83 c4 1c             	add    esp,0x1c
c00230ab:	c3                   	ret    

c00230ac <ideChannel1IRQHandler(regs*, void*)>:
c00230ac:	83 ec 10             	sub    esp,0x10
c00230af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230b3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230ba:	6a 07                	push   0x7
c00230bc:	6a 01                	push   0x1
c00230be:	50                   	push   eax
c00230bf:	e8 b8 fe ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00230c4:	83 c4 1c             	add    esp,0x1c
c00230c7:	c3                   	ret    

c00230c8 <IDE::enableIRQs(unsigned char, bool)>:
c00230c8:	57                   	push   edi
c00230c9:	56                   	push   esi
c00230ca:	be 04 00 00 00       	mov    esi,0x4
c00230cf:	53                   	push   ebx
c00230d0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230d9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230de:	0f 94 c0             	sete   al
c00230e1:	d1 e0                	shl    eax,1
c00230e3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230ea:	0f b6 c0             	movzx  eax,al
c00230ed:	50                   	push   eax
c00230ee:	6a 0c                	push   0xc
c00230f0:	57                   	push   edi
c00230f1:	53                   	push   ebx
c00230f2:	e8 c5 fd ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f7:	83 c4 10             	add    esp,0x10
c00230fa:	50                   	push   eax
c00230fb:	6a 0c                	push   0xc
c00230fd:	57                   	push   edi
c00230fe:	53                   	push   ebx
c00230ff:	e8 78 fe ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023104:	83 c4 10             	add    esp,0x10
c0023107:	4e                   	dec    esi
c0023108:	75 f0                	jne    c00230fa <IDE::enableIRQs(unsigned char, bool)+0x32>
c002310a:	5b                   	pop    ebx
c002310b:	5e                   	pop    esi
c002310c:	5f                   	pop    edi
c002310d:	c3                   	ret    

c002310e <IDE::open(int, int, void*)>:
c002310e:	55                   	push   ebp
c002310f:	57                   	push   edi
c0023110:	56                   	push   esi
c0023111:	53                   	push   ebx
c0023112:	83 ec 1c             	sub    esp,0x1c
c0023115:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023119:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023122:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002312b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023132:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023139:	0f 85 b0 02 00 00    	jne    c00233ef <IDE::open(int, int, void*)+0x2e1>
c002313f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023145:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023149:	83 e0 7f             	and    eax,0x7f
c002314c:	3c 05                	cmp    al,0x5
c002314e:	74 04                	je     c0023154 <IDE::open(int, int, void*)+0x46>
c0023150:	3c 0f                	cmp    al,0xf
c0023152:	75 32                	jne    c0023186 <IDE::open(int, int, void*)+0x78>
c0023154:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002315a:	83 e0 fc             	and    eax,0xfffffffc
c002315d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023164:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002316a:	83 e0 fc             	and    eax,0xfffffffc
c002316d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023174:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002317a:	83 e0 fc             	and    eax,0xfffffffc
c002317d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023184:	eb 14                	jmp    c002319a <IDE::open(int, int, void*)+0x8c>
c0023186:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023190:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002319a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231a1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231ac:	89 c6                	mov    esi,eax
c00231ae:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231b3:	c1 e6 10             	shl    esi,0x10
c00231b6:	89 e8                	mov    eax,ebp
c00231b8:	89 fa                	mov    edx,edi
c00231ba:	c1 e0 0b             	shl    eax,0xb
c00231bd:	09 f0                	or     eax,esi
c00231bf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231c6:	c1 e6 08             	shl    esi,0x8
c00231c9:	09 c6                	or     esi,eax
c00231cb:	89 f0                	mov    eax,esi
c00231cd:	0d 08 00 00 80       	or     eax,0x80000008
c00231d2:	ef                   	out    dx,eax
c00231d3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231d8:	89 ca                	mov    edx,ecx
c00231da:	ed                   	in     eax,dx
c00231db:	c1 e8 10             	shr    eax,0x10
c00231de:	3d ff ff 00 00       	cmp    eax,0xffff
c00231e3:	0f 84 f5 00 00 00    	je     c00232de <IDE::open(int, int, void*)+0x1d0>
c00231e9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231ef:	89 fa                	mov    edx,edi
c00231f1:	89 f0                	mov    eax,esi
c00231f3:	ef                   	out    dx,eax
c00231f4:	b0 fe                	mov    al,0xfe
c00231f6:	89 ca                	mov    edx,ecx
c00231f8:	ee                   	out    dx,al
c00231f9:	89 f0                	mov    eax,esi
c00231fb:	89 fa                	mov    edx,edi
c00231fd:	ef                   	out    dx,eax
c00231fe:	89 ca                	mov    edx,ecx
c0023200:	ed                   	in     eax,dx
c0023201:	3c fe                	cmp    al,0xfe
c0023203:	0f 85 a9 00 00 00    	jne    c00232b2 <IDE::open(int, int, void*)+0x1a4>
c0023209:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c002320f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023216:	74 33                	je     c002324b <IDE::open(int, int, void*)+0x13d>
c0023218:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002321e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023222:	40                   	inc    eax
c0023223:	83 ec 0c             	sub    esp,0xc
c0023226:	0f b6 c0             	movzx  eax,al
c0023229:	50                   	push   eax
c002322a:	55                   	push   ebp
c002322b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002322f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023235:	51                   	push   ecx
c0023236:	e8 53 48 ff ff       	call   c0017a8e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002323b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023240:	83 c4 1c             	add    esp,0x1c
c0023243:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023249:	eb 0a                	jmp    c0023255 <IDE::open(int, int, void*)+0x147>
c002324b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023255:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002325c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023263:	c1 e1 10             	shl    ecx,0x10
c0023266:	c1 e0 08             	shl    eax,0x8
c0023269:	bf f8 0c 00 00       	mov    edi,0xcf8
c002326e:	09 c1                	or     ecx,eax
c0023270:	89 fa                	mov    edx,edi
c0023272:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023279:	c1 e0 0b             	shl    eax,0xb
c002327c:	09 c1                	or     ecx,eax
c002327e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023284:	89 c8                	mov    eax,ecx
c0023286:	ef                   	out    dx,eax
c0023287:	be fc 0c 00 00       	mov    esi,0xcfc
c002328c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023292:	89 f2                	mov    edx,esi
c0023294:	ee                   	out    dx,al
c0023295:	89 c8                	mov    eax,ecx
c0023297:	89 fa                	mov    edx,edi
c0023299:	ef                   	out    dx,eax
c002329a:	89 f2                	mov    edx,esi
c002329c:	ed                   	in     eax,dx
c002329d:	0f b6 c0             	movzx  eax,al
c00232a0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232a6:	74 46                	je     c00232ee <IDE::open(int, int, void*)+0x1e0>
c00232a8:	83 ec 0c             	sub    esp,0xc
c00232ab:	68 e0 bf 02 c0       	push   0xc002bfe0
c00232b0:	eb 34                	jmp    c00232e6 <IDE::open(int, int, void*)+0x1d8>
c00232b2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232bb:	75 17                	jne    c00232d4 <IDE::open(int, int, void*)+0x1c6>
c00232bd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232c2:	74 07                	je     c00232cb <IDE::open(int, int, void*)+0x1bd>
c00232c4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232c9:	75 09                	jne    c00232d4 <IDE::open(int, int, void*)+0x1c6>
c00232cb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232d2:	eb 1a                	jmp    c00232ee <IDE::open(int, int, void*)+0x1e0>
c00232d4:	83 ec 0c             	sub    esp,0xc
c00232d7:	68 e8 bf 02 c0       	push   0xc002bfe8
c00232dc:	eb 08                	jmp    c00232e6 <IDE::open(int, int, void*)+0x1d8>
c00232de:	83 ec 0c             	sub    esp,0xc
c00232e1:	68 19 c0 02 c0       	push   0xc002c019
c00232e6:	e8 ea 6a ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232f5:	79 1a                	jns    c0023311 <IDE::open(int, int, void*)+0x203>
c00232f7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232fd:	83 e0 fc             	and    eax,0xfffffffc
c0023300:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023307:	83 c0 08             	add    eax,0x8
c002330a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023311:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023317:	89 c2                	mov    edx,eax
c0023319:	83 e2 0f             	and    edx,0xf
c002331c:	66 83 fa 08          	cmp    dx,0x8
c0023320:	75 0a                	jne    c002332c <IDE::open(int, int, void*)+0x21e>
c0023322:	83 e8 02             	sub    eax,0x2
c0023325:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002332c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023332:	89 c2                	mov    edx,eax
c0023334:	83 e2 0f             	and    edx,0xf
c0023337:	66 83 fa 08          	cmp    dx,0x8
c002333b:	75 0a                	jne    c0023347 <IDE::open(int, int, void*)+0x239>
c002333d:	83 e8 02             	sub    eax,0x2
c0023340:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023347:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002334e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023355:	89 d0                	mov    eax,edx
c0023357:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002335a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002335e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023362:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023365:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002336a:	0f b6 c9             	movzx  ecx,cl
c002336d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023374:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023377:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002337b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002337f:	8d 50 02             	lea    edx,[eax+0x2]
c0023382:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023387:	0f b6 d2             	movzx  edx,dl
c002338a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023390:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023393:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023397:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002339b:	8d 48 03             	lea    ecx,[eax+0x3]
c002339e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233a3:	0f b6 c9             	movzx  ecx,cl
c00233a6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233ac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233af:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233b3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233b7:	8d 50 04             	lea    edx,[eax+0x4]
c00233ba:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233c0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233c5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233cc:	66 85 f6             	test   si,si
c00233cf:	74 5b                	je     c002342c <IDE::open(int, int, void*)+0x31e>
c00233d1:	0f b6 d2             	movzx  edx,dl
c00233d4:	83 c0 05             	add    eax,0x5
c00233d7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233da:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233de:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233e2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233e8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233ed:	eb 3d                	jmp    c002342c <IDE::open(int, int, void*)+0x31e>
c00233ef:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00233f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023403:	66 05 06 02          	add    ax,0x206
c0023407:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002340e:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023415:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002341c:	66 05 06 02          	add    ax,0x206
c0023420:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023427:	e9 e5 fe ff ff       	jmp    c0023311 <IDE::open(int, int, void*)+0x203>
c002342c:	50                   	push   eax
c002342d:	50                   	push   eax
c002342e:	6a 00                	push   0x0
c0023430:	53                   	push   ebx
c0023431:	e8 60 fa ff ff       	call   c0022e96 <IDE::prepareInterrupt(unsigned char)>
c0023436:	5a                   	pop    edx
c0023437:	59                   	pop    ecx
c0023438:	6a 01                	push   0x1
c002343a:	53                   	push   ebx
c002343b:	e8 56 fa ff ff       	call   c0022e96 <IDE::prepareInterrupt(unsigned char)>
c0023440:	83 c4 0c             	add    esp,0xc
c0023443:	6a 00                	push   0x0
c0023445:	6a 00                	push   0x0
c0023447:	53                   	push   ebx
c0023448:	e8 7b fc ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c002344d:	83 c4 0c             	add    esp,0xc
c0023450:	6a 00                	push   0x0
c0023452:	6a 01                	push   0x1
c0023454:	53                   	push   ebx
c0023455:	e8 6e fc ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c002345a:	83 c4 10             	add    esp,0x10
c002345d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023464:	74 34                	je     c002349a <IDE::open(int, int, void*)+0x38c>
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	53                   	push   ebx
c002346a:	6a 01                	push   0x1
c002346c:	68 90 30 02 c0       	push   0xc0023090
c0023471:	6a 0e                	push   0xe
c0023473:	53                   	push   ebx
c0023474:	e8 a1 05 ff ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023479:	83 c4 14             	add    esp,0x14
c002347c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023482:	53                   	push   ebx
c0023483:	6a 01                	push   0x1
c0023485:	68 ac 30 02 c0       	push   0xc00230ac
c002348a:	6a 0f                	push   0xf
c002348c:	53                   	push   ebx
c002348d:	e8 88 05 ff ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023492:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023498:	eb 38                	jmp    c00234d2 <IDE::open(int, int, void*)+0x3c4>
c002349a:	83 ec 0c             	sub    esp,0xc
c002349d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234a7:	53                   	push   ebx
c00234a8:	6a 00                	push   0x0
c00234aa:	68 90 30 02 c0       	push   0xc0023090
c00234af:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234b5:	53                   	push   ebx
c00234b6:	e8 5f 05 ff ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234bb:	83 c4 14             	add    esp,0x14
c00234be:	53                   	push   ebx
c00234bf:	6a 00                	push   0x0
c00234c1:	68 ac 30 02 c0       	push   0xc00230ac
c00234c6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234cc:	53                   	push   ebx
c00234cd:	e8 48 05 ff ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234d4:	83 c4 20             	add    esp,0x20
c00234d7:	83 ec 0c             	sub    esp,0xc
c00234da:	53                   	push   ebx
c00234db:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234de:	83 c4 0c             	add    esp,0xc
c00234e1:	6a 07                	push   0x7
c00234e3:	6a 00                	push   0x0
c00234e5:	53                   	push   ebx
c00234e6:	e8 91 fa ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00234eb:	83 c4 0c             	add    esp,0xc
c00234ee:	6a 07                	push   0x7
c00234f0:	6a 01                	push   0x1
c00234f2:	53                   	push   ebx
c00234f3:	e8 84 fa ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00234f8:	83 c4 0c             	add    esp,0xc
c00234fb:	6a 01                	push   0x1
c00234fd:	6a 00                	push   0x0
c00234ff:	53                   	push   ebx
c0023500:	e8 c3 fb ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c0023505:	83 c4 0c             	add    esp,0xc
c0023508:	6a 01                	push   0x1
c002350a:	6a 01                	push   0x1
c002350c:	53                   	push   ebx
c002350d:	e8 b6 fb ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c0023512:	83 c4 2c             	add    esp,0x2c
c0023515:	31 c0                	xor    eax,eax
c0023517:	5b                   	pop    ebx
c0023518:	5e                   	pop    esi
c0023519:	5f                   	pop    edi
c002351a:	5d                   	pop    ebp
c002351b:	c3                   	ret    

c002351c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002351c:	55                   	push   ebp
c002351d:	57                   	push   edi
c002351e:	56                   	push   esi
c002351f:	53                   	push   ebx
c0023520:	83 ec 1c             	sub    esp,0x1c
c0023523:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023527:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002352b:	8d 50 f8             	lea    edx,[eax-0x8]
c002352e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023532:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023536:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002353a:	80 fa 03             	cmp    dl,0x3
c002353d:	77 5d                	ja     c002359c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002353f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023547:	0f b6 db             	movzx  ebx,bl
c002354a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002354d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023551:	83 ca 80             	or     edx,0xffffff80
c0023554:	0f b6 d2             	movzx  edx,dl
c0023557:	52                   	push   edx
c0023558:	6a 0c                	push   0xc
c002355a:	53                   	push   ebx
c002355b:	56                   	push   esi
c002355c:	e8 5b f9 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023561:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002356a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002356e:	0f b6 c0             	movzx  eax,al
c0023571:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023575:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023577:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002357c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023580:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023584:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023588:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023590:	83 c4 2c             	add    esp,0x2c
c0023593:	5b                   	pop    ebx
c0023594:	5e                   	pop    esi
c0023595:	5f                   	pop    edi
c0023596:	5d                   	pop    ebp
c0023597:	e9 20 f9 ff ff       	jmp    c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002359c:	3c 07                	cmp    al,0x7
c002359e:	77 10                	ja     c00235b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235a0:	0f b6 db             	movzx  ebx,bl
c00235a3:	0f b6 d0             	movzx  edx,al
c00235a6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235ae:	eb 2d                	jmp    c00235dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235b0:	3c 0d                	cmp    al,0xd
c00235b2:	77 13                	ja     c00235c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235b4:	0f b6 db             	movzx  ebx,bl
c00235b7:	0f b6 c0             	movzx  eax,al
c00235ba:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235c1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235c5:	eb 16                	jmp    c00235dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235c7:	3c 15                	cmp    al,0x15
c00235c9:	77 14                	ja     c00235df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235cb:	0f b6 db             	movzx  ebx,bl
c00235ce:	0f b6 c0             	movzx  eax,al
c00235d1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235d9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235dd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235df:	83 c4 1c             	add    esp,0x1c
c00235e2:	5b                   	pop    ebx
c00235e3:	5e                   	pop    esi
c00235e4:	5f                   	pop    edi
c00235e5:	5d                   	pop    ebp
c00235e6:	c3                   	ret    
c00235e7:	90                   	nop

c00235e8 <IDE::detect()>:
c00235e8:	55                   	push   ebp
c00235e9:	57                   	push   edi
c00235ea:	56                   	push   esi
c00235eb:	53                   	push   ebx
c00235ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235f2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235f9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023600:	0f 85 9d 02 00 00    	jne    c00238a3 <IDE::detect()+0x2bb>
c0023606:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002360d:	31 f6                	xor    esi,esi
c002360f:	31 ed                	xor    ebp,ebp
c0023611:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023619:	89 e8                	mov    eax,ebp
c002361b:	c1 e0 06             	shl    eax,0x6
c002361e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023626:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002362a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002362e:	c1 e0 04             	shl    eax,0x4
c0023631:	83 c8 a0             	or     eax,0xffffffa0
c0023634:	0f b6 c0             	movzx  eax,al
c0023637:	50                   	push   eax
c0023638:	6a 06                	push   0x6
c002363a:	56                   	push   esi
c002363b:	53                   	push   ebx
c002363c:	e8 7b f8 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023641:	83 c4 0c             	add    esp,0xc
c0023644:	6a 0c                	push   0xc
c0023646:	56                   	push   esi
c0023647:	53                   	push   ebx
c0023648:	e8 2f f9 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c002364d:	83 c4 0c             	add    esp,0xc
c0023650:	6a 0c                	push   0xc
c0023652:	56                   	push   esi
c0023653:	53                   	push   ebx
c0023654:	e8 23 f9 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023659:	83 c4 0c             	add    esp,0xc
c002365c:	6a 0c                	push   0xc
c002365e:	56                   	push   esi
c002365f:	53                   	push   ebx
c0023660:	e8 17 f9 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023665:	83 c4 0c             	add    esp,0xc
c0023668:	6a 0c                	push   0xc
c002366a:	56                   	push   esi
c002366b:	53                   	push   ebx
c002366c:	e8 0b f9 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023671:	68 ec 00 00 00       	push   0xec
c0023676:	6a 07                	push   0x7
c0023678:	56                   	push   esi
c0023679:	53                   	push   ebx
c002367a:	e8 3d f8 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002367f:	83 c4 1c             	add    esp,0x1c
c0023682:	6a 0c                	push   0xc
c0023684:	56                   	push   esi
c0023685:	53                   	push   ebx
c0023686:	e8 f1 f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c002368b:	83 c4 0c             	add    esp,0xc
c002368e:	6a 0c                	push   0xc
c0023690:	56                   	push   esi
c0023691:	53                   	push   ebx
c0023692:	e8 e5 f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023697:	83 c4 0c             	add    esp,0xc
c002369a:	6a 0c                	push   0xc
c002369c:	56                   	push   esi
c002369d:	53                   	push   ebx
c002369e:	e8 d9 f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00236a3:	83 c4 0c             	add    esp,0xc
c00236a6:	6a 0c                	push   0xc
c00236a8:	56                   	push   esi
c00236a9:	53                   	push   ebx
c00236aa:	e8 cd f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00236af:	83 c4 0c             	add    esp,0xc
c00236b2:	6a 0c                	push   0xc
c00236b4:	56                   	push   esi
c00236b5:	53                   	push   ebx
c00236b6:	e8 c1 f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00236bb:	83 c4 10             	add    esp,0x10
c00236be:	84 c0                	test   al,al
c00236c0:	0f 84 63 01 00 00    	je     c0023829 <IDE::detect()+0x241>
c00236c6:	31 ff                	xor    edi,edi
c00236c8:	50                   	push   eax
c00236c9:	6a 0c                	push   0xc
c00236cb:	56                   	push   esi
c00236cc:	53                   	push   ebx
c00236cd:	e8 aa f8 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c00236d2:	83 c4 10             	add    esp,0x10
c00236d5:	a8 01                	test   al,0x1
c00236d7:	0f 85 6d 01 00 00    	jne    c002384a <IDE::detect()+0x262>
c00236dd:	84 c0                	test   al,al
c00236df:	78 04                	js     c00236e5 <IDE::detect()+0xfd>
c00236e1:	a8 08                	test   al,0x8
c00236e3:	75 27                	jne    c002370c <IDE::detect()+0x124>
c00236e5:	47                   	inc    edi
c00236e6:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236ec:	7e da                	jle    c00236c8 <IDE::detect()+0xe0>
c00236ee:	50                   	push   eax
c00236ef:	50                   	push   eax
c00236f0:	6a 00                	push   0x0
c00236f2:	68 40 4b 4c 00       	push   0x4c4b40
c00236f7:	e8 3d a5 ff ff       	call   c001dc39 <nanoSleep(unsigned long long)>
c00236fc:	83 c4 10             	add    esp,0x10
c00236ff:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023705:	75 c1                	jne    c00236c8 <IDE::detect()+0xe0>
c0023707:	e9 3e 01 00 00       	jmp    c002384a <IDE::detect()+0x262>
c002370c:	31 c9                	xor    ecx,ecx
c002370e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023712:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023716:	83 ec 0c             	sub    esp,0xc
c0023719:	68 80 00 00 00       	push   0x80
c002371e:	57                   	push   edi
c002371f:	6a 00                	push   0x0
c0023721:	56                   	push   esi
c0023722:	53                   	push   ebx
c0023723:	e8 f4 fd ff ff       	call   c002351c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023728:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002372d:	89 e8                	mov    eax,ebp
c002372f:	89 d1                	mov    ecx,edx
c0023731:	c1 e0 06             	shl    eax,0x6
c0023734:	01 d8                	add    eax,ebx
c0023736:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002373d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023744:	89 f2                	mov    edx,esi
c0023746:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002374c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023750:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023756:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002375a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023761:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023769:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023770:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023778:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002377e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023785:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002378b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002378f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023793:	83 c4 20             	add    esp,0x20
c0023796:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023799:	83 c0 02             	add    eax,0x2
c002379c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237a2:	83 c7 02             	add    edi,0x2
c00237a5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237a8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237ae:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237b2:	75 e2                	jne    c0023796 <IDE::detect()+0x1ae>
c00237b4:	89 e8                	mov    eax,ebp
c00237b6:	c1 e0 06             	shl    eax,0x6
c00237b9:	01 d8                	add    eax,ebx
c00237bb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237c1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237c8:	66 c1 ea 09          	shr    dx,0x9
c00237cc:	83 e2 01             	and    edx,0x1
c00237cf:	84 c9                	test   cl,cl
c00237d1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237d7:	75 22                	jne    c00237fb <IDE::detect()+0x213>
c00237d9:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00237e0:	74 46                	je     c0023828 <IDE::detect()+0x240>
c00237e2:	83 ec 0c             	sub    esp,0xc
c00237e5:	68 7c 01 00 00       	push   0x17c
c00237ea:	e8 aa bd fe ff       	call   c000f599 <malloc>
c00237ef:	89 c7                	mov    edi,eax
c00237f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00237f4:	e8 15 05 00 00       	call   c0023d0e <ATA::ATA()>
c00237f9:	eb 17                	jmp    c0023812 <IDE::detect()+0x22a>
c00237fb:	83 ec 0c             	sub    esp,0xc
c00237fe:	68 80 01 00 00       	push   0x180
c0023803:	e8 91 bd fe ff       	call   c000f599 <malloc>
c0023808:	89 c7                	mov    edi,eax
c002380a:	89 04 24             	mov    DWORD PTR [esp],eax
c002380d:	e8 04 0b 00 00       	call   c0024316 <ATAPI::ATAPI()>
c0023812:	5a                   	pop    edx
c0023813:	59                   	pop    ecx
c0023814:	57                   	push   edi
c0023815:	53                   	push   ebx
c0023816:	e8 87 02 ff ff       	call   c0013aa2 <Device::addChild(Device*)>
c002381b:	8b 07                	mov    eax,DWORD PTR [edi]
c002381d:	53                   	push   ebx
c002381e:	55                   	push   ebp
c002381f:	6a 00                	push   0x0
c0023821:	57                   	push   edi
c0023822:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023825:	83 c4 20             	add    esp,0x20
c0023828:	45                   	inc    ebp
c0023829:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002382e:	74 0d                	je     c002383d <IDE::detect()+0x255>
c0023830:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023838:	e9 dc fd ff ff       	jmp    c0023619 <IDE::detect()+0x31>
c002383d:	4e                   	dec    esi
c002383e:	74 63                	je     c00238a3 <IDE::detect()+0x2bb>
c0023840:	be 01 00 00 00       	mov    esi,0x1
c0023845:	e9 c7 fd ff ff       	jmp    c0023611 <IDE::detect()+0x29>
c002384a:	50                   	push   eax
c002384b:	6a 04                	push   0x4
c002384d:	56                   	push   esi
c002384e:	53                   	push   ebx
c002384f:	e8 28 f7 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023854:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023858:	83 c4 0c             	add    esp,0xc
c002385b:	6a 05                	push   0x5
c002385d:	56                   	push   esi
c002385e:	53                   	push   ebx
c002385f:	e8 18 f7 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023864:	83 c4 10             	add    esp,0x10
c0023867:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002386b:	80 fa 14             	cmp    dl,0x14
c002386e:	75 04                	jne    c0023874 <IDE::detect()+0x28c>
c0023870:	3c eb                	cmp    al,0xeb
c0023872:	eb 07                	jmp    c002387b <IDE::detect()+0x293>
c0023874:	3c 96                	cmp    al,0x96
c0023876:	75 b1                	jne    c0023829 <IDE::detect()+0x241>
c0023878:	80 fa 69             	cmp    dl,0x69
c002387b:	75 ac                	jne    c0023829 <IDE::detect()+0x241>
c002387d:	68 a1 00 00 00       	push   0xa1
c0023882:	6a 07                	push   0x7
c0023884:	56                   	push   esi
c0023885:	53                   	push   ebx
c0023886:	e8 31 f6 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002388b:	5f                   	pop    edi
c002388c:	58                   	pop    eax
c002388d:	6a 00                	push   0x0
c002388f:	68 40 42 0f 00       	push   0xf4240
c0023894:	e8 a0 a3 ff ff       	call   c001dc39 <nanoSleep(unsigned long long)>
c0023899:	83 c4 10             	add    esp,0x10
c002389c:	b1 01                	mov    cl,0x1
c002389e:	e9 6b fe ff ff       	jmp    c002370e <IDE::detect()+0x126>
c00238a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238a9:	5b                   	pop    ebx
c00238aa:	5e                   	pop    esi
c00238ab:	5f                   	pop    edi
c00238ac:	5d                   	pop    ebp
c00238ad:	c3                   	ret    

c00238ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238ae:	55                   	push   ebp
c00238af:	57                   	push   edi
c00238b0:	56                   	push   esi
c00238b1:	53                   	push   ebx
c00238b2:	83 ec 1c             	sub    esp,0x1c
c00238b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238c5:	88 c3                	mov    bl,al
c00238c7:	84 c0                	test   al,al
c00238c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238cd:	0f 84 81 00 00 00    	je     c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238d3:	83 ec 0c             	sub    esp,0xc
c00238d6:	68 43 c0 02 c0       	push   0xc002c043
c00238db:	e8 89 ed fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00238e0:	83 c4 10             	add    esp,0x10
c00238e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238e7:	3c 01                	cmp    al,0x1
c00238e9:	74 63                	je     c002394e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00238eb:	3c 02                	cmp    al,0x2
c00238ed:	75 53                	jne    c0023942 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00238ef:	d1 e6                	shl    esi,1
c00238f1:	09 ee                	or     esi,ebp
c00238f3:	50                   	push   eax
c00238f4:	89 f0                	mov    eax,esi
c00238f6:	6a 01                	push   0x1
c00238f8:	0f b6 f0             	movzx  esi,al
c00238fb:	c1 e6 06             	shl    esi,0x6
c00238fe:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023906:	50                   	push   eax
c0023907:	57                   	push   edi
c0023908:	e8 6f f6 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c002390d:	83 c4 10             	add    esp,0x10
c0023910:	a8 01                	test   al,0x1
c0023912:	74 02                	je     c0023916 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023914:	b3 07                	mov    bl,0x7
c0023916:	a8 02                	test   al,0x2
c0023918:	74 02                	je     c002391c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002391a:	b3 03                	mov    bl,0x3
c002391c:	a8 04                	test   al,0x4
c002391e:	74 02                	je     c0023922 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023920:	b3 14                	mov    bl,0x14
c0023922:	a8 08                	test   al,0x8
c0023924:	74 02                	je     c0023928 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023926:	b3 03                	mov    bl,0x3
c0023928:	a8 10                	test   al,0x10
c002392a:	74 02                	je     c002392e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002392c:	b3 15                	mov    bl,0x15
c002392e:	a8 20                	test   al,0x20
c0023930:	74 02                	je     c0023934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023932:	b3 03                	mov    bl,0x3
c0023934:	a8 40                	test   al,0x40
c0023936:	74 02                	je     c002393a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023938:	b3 16                	mov    bl,0x16
c002393a:	84 c0                	test   al,al
c002393c:	79 16                	jns    c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002393e:	b3 0d                	mov    bl,0xd
c0023940:	eb 12                	jmp    c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023942:	3c 03                	cmp    al,0x3
c0023944:	74 0c                	je     c0023952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023946:	3c 04                	cmp    al,0x4
c0023948:	75 0a                	jne    c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002394a:	b3 08                	mov    bl,0x8
c002394c:	eb 06                	jmp    c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002394e:	b3 13                	mov    bl,0x13
c0023950:	eb 02                	jmp    c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023952:	b3 17                	mov    bl,0x17
c0023954:	83 c4 1c             	add    esp,0x1c
c0023957:	88 d8                	mov    al,bl
c0023959:	5b                   	pop    ebx
c002395a:	5e                   	pop    esi
c002395b:	5f                   	pop    edi
c002395c:	5d                   	pop    ebp
c002395d:	c3                   	ret    

c002395e <IDE::polling(unsigned char, unsigned int)>:
c002395e:	57                   	push   edi
c002395f:	56                   	push   esi
c0023960:	53                   	push   ebx
c0023961:	bb 04 00 00 00       	mov    ebx,0x4
c0023966:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002396a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002396f:	52                   	push   edx
c0023970:	6a 0c                	push   0xc
c0023972:	56                   	push   esi
c0023973:	57                   	push   edi
c0023974:	e8 03 f6 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023979:	83 c4 10             	add    esp,0x10
c002397c:	4b                   	dec    ebx
c002397d:	75 f0                	jne    c002396f <IDE::polling(unsigned char, unsigned int)+0x11>
c002397f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023984:	50                   	push   eax
c0023985:	6a 0c                	push   0xc
c0023987:	56                   	push   esi
c0023988:	57                   	push   edi
c0023989:	e8 ee f5 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c002398e:	83 c4 10             	add    esp,0x10
c0023991:	a8 01                	test   al,0x1
c0023993:	75 17                	jne    c00239ac <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023995:	a8 20                	test   al,0x20
c0023997:	75 0f                	jne    c00239a8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023999:	4b                   	dec    ebx
c002399a:	74 10                	je     c00239ac <IDE::polling(unsigned char, unsigned int)+0x4e>
c002399c:	84 c0                	test   al,al
c002399e:	78 e4                	js     c0023984 <IDE::polling(unsigned char, unsigned int)+0x26>
c00239a0:	a8 08                	test   al,0x8
c00239a2:	74 e0                	je     c0023984 <IDE::polling(unsigned char, unsigned int)+0x26>
c00239a4:	31 c0                	xor    eax,eax
c00239a6:	eb 06                	jmp    c00239ae <IDE::polling(unsigned char, unsigned int)+0x50>
c00239a8:	b0 01                	mov    al,0x1
c00239aa:	eb 02                	jmp    c00239ae <IDE::polling(unsigned char, unsigned int)+0x50>
c00239ac:	b0 02                	mov    al,0x2
c00239ae:	5b                   	pop    ebx
c00239af:	5e                   	pop    esi
c00239b0:	5f                   	pop    edi
c00239b1:	c3                   	ret    

c00239b2 <SATABus::close(int, int, void*)>:
c00239b2:	31 c0                	xor    eax,eax
c00239b4:	c3                   	ret    
c00239b5:	90                   	nop

c00239b6 <SATABus::detect()>:
c00239b6:	c3                   	ret    
c00239b7:	90                   	nop

c00239b8 <SATABus::SATABus()>:
c00239b8:	83 ec 0c             	sub    esp,0xc
c00239bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239bf:	83 ec 08             	sub    esp,0x8
c00239c2:	68 7c c0 02 c0       	push   0xc002c07c
c00239c7:	50                   	push   eax
c00239c8:	e8 83 04 ff ff       	call   c0013e50 <HardDiskController::HardDiskController(char const*)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	ba d0 c0 02 c0       	mov    edx,0xc002c0d0
c00239d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239d9:	89 10                	mov    DWORD PTR [eax],edx
c00239db:	83 ec 0c             	sub    esp,0xc
c00239de:	6a 50                	push   0x50
c00239e0:	e8 63 c0 fe ff       	call   c000fa48 <Phys::allocateContiguousPages(int)>
c00239e5:	83 c4 10             	add    esp,0x10
c00239e8:	89 c2                	mov    edx,eax
c00239ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00239f4:	83 ec 0c             	sub    esp,0xc
c00239f7:	6a 50                	push   0x50
c00239f9:	e8 01 d8 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00239fe:	83 c4 10             	add    esp,0x10
c0023a01:	89 c2                	mov    edx,eax
c0023a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a0d:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c0023a12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a16:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a20:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a26:	83 ec 0c             	sub    esp,0xc
c0023a29:	6a 03                	push   0x3
c0023a2b:	6a 50                	push   0x50
c0023a2d:	51                   	push   ecx
c0023a2e:	52                   	push   edx
c0023a2f:	50                   	push   eax
c0023a30:	e8 7d e2 fe ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a35:	83 c4 20             	add    esp,0x20
c0023a38:	90                   	nop
c0023a39:	83 c4 0c             	add    esp,0xc
c0023a3c:	c3                   	ret    
c0023a3d:	90                   	nop

c0023a3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023a3e:	83 ec 0c             	sub    esp,0xc
c0023a41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a45:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023a48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023a4b:	09 c2                	or     edx,eax
c0023a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023a57:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023a59:	31 c0                	xor    eax,eax
c0023a5b:	c1 e9 08             	shr    ecx,0x8
c0023a5e:	83 e1 0f             	and    ecx,0xf
c0023a61:	39 c8                	cmp    eax,ecx
c0023a63:	74 0a                	je     c0023a6f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023a65:	f6 c2 01             	test   dl,0x1
c0023a68:	74 18                	je     c0023a82 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a6a:	d1 ea                	shr    edx,1
c0023a6c:	40                   	inc    eax
c0023a6d:	eb f2                	jmp    c0023a61 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023a6f:	83 ec 0c             	sub    esp,0xc
c0023a72:	68 a0 c0 02 c0       	push   0xc002c0a0
c0023a77:	e8 59 63 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0023a7c:	83 c4 10             	add    esp,0x10
c0023a7f:	83 c8 ff             	or     eax,0xffffffff
c0023a82:	83 c4 0c             	add    esp,0xc
c0023a85:	c3                   	ret    

c0023a86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023a86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023a8a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023a8d:	89 c2                	mov    edx,eax
c0023a8f:	c1 ea 08             	shr    edx,0x8
c0023a92:	83 e2 0f             	and    edx,0xf
c0023a95:	fe ca                	dec    dl
c0023a97:	75 31                	jne    c0023aca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a99:	83 e0 0f             	and    eax,0xf
c0023a9c:	3c 03                	cmp    al,0x3
c0023a9e:	75 2a                	jne    c0023aca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aa0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023aa3:	b8 02 00 00 00       	mov    eax,0x2
c0023aa8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023aae:	74 1c                	je     c0023acc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ab0:	b8 04 00 00 00       	mov    eax,0x4
c0023ab5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023abb:	74 0f                	je     c0023acc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023abd:	31 c0                	xor    eax,eax
c0023abf:	83 fa 03             	cmp    edx,0x3
c0023ac2:	0f 94 c0             	sete   al
c0023ac5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023ac9:	c3                   	ret    
c0023aca:	31 c0                	xor    eax,eax
c0023acc:	c3                   	ret    
c0023acd:	90                   	nop

c0023ace <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ad2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ad5:	0f ba e2 0f          	bt     edx,0xf
c0023ad9:	72 f7                	jb     c0023ad2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023adb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ade:	83 ca 10             	or     edx,0x10
c0023ae1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ae4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ae7:	83 ca 01             	or     edx,0x1
c0023aea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023aed:	c3                   	ret    

c0023aee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023aee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023af2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023af5:	83 e2 fe             	and    edx,0xfffffffe
c0023af8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023afb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023afe:	83 e2 ef             	and    edx,0xffffffef
c0023b01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b07:	0f ba e2 0e          	bt     edx,0xe
c0023b0b:	72 f7                	jb     c0023b04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b10:	0f ba e2 0f          	bt     edx,0xf
c0023b14:	72 ee                	jb     c0023b04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b16:	c3                   	ret    
c0023b17:	90                   	nop

c0023b18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b18:	55                   	push   ebp
c0023b19:	57                   	push   edi
c0023b1a:	56                   	push   esi
c0023b1b:	53                   	push   ebx
c0023b1c:	83 ec 1c             	sub    esp,0x1c
c0023b1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b27:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b2b:	53                   	push   ebx
c0023b2c:	89 fd                	mov    ebp,edi
c0023b2e:	56                   	push   esi
c0023b2f:	c1 e5 0a             	shl    ebp,0xa
c0023b32:	e8 b7 ff ff ff       	call   c0023aee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b37:	83 ec 0c             	sub    esp,0xc
c0023b3a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023b40:	01 e8                	add    eax,ebp
c0023b42:	89 03                	mov    DWORD PTR [ebx],eax
c0023b44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b46:	68 00 04 00 00       	push   0x400
c0023b4b:	6a 00                	push   0x0
c0023b4d:	50                   	push   eax
c0023b4e:	e8 fd cb fd ff       	call   c0000750 <memset>
c0023b53:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023b59:	89 fa                	mov    edx,edi
c0023b5b:	01 e8                	add    eax,ebp
c0023b5d:	c1 e7 0d             	shl    edi,0xd
c0023b60:	89 03                	mov    DWORD PTR [ebx],eax
c0023b62:	c1 e2 08             	shl    edx,0x8
c0023b65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023b6c:	81 c2 00 80 00 00    	add    edx,0x8000
c0023b72:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023b76:	89 d0                	mov    eax,edx
c0023b78:	83 c4 1c             	add    esp,0x1c
c0023b7b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b81:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023b84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023b87:	68 00 01 00 00       	push   0x100
c0023b8c:	6a 00                	push   0x0
c0023b8e:	50                   	push   eax
c0023b8f:	e8 bc cb fd ff       	call   c0000750 <memset>
c0023b94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b98:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023b9e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ba4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ba8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023bab:	83 c4 10             	add    esp,0x10
c0023bae:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023bb5:	31 ff                	xor    edi,edi
c0023bb7:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023bbd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bc7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bcd:	83 c5 20             	add    ebp,0x20
c0023bd0:	01 f8                	add    eax,edi
c0023bd2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023bd5:	52                   	push   edx
c0023bd6:	68 00 01 00 00       	push   0x100
c0023bdb:	6a 00                	push   0x0
c0023bdd:	50                   	push   eax
c0023bde:	e8 6d cb fd ff       	call   c0000750 <memset>
c0023be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023bf0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023bf7:	01 f8                	add    eax,edi
c0023bf9:	81 c7 00 01 00 00    	add    edi,0x100
c0023bff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c02:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c08:	75 b3                	jne    c0023bbd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c0a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c0e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c12:	83 c4 1c             	add    esp,0x1c
c0023c15:	5b                   	pop    ebx
c0023c16:	5e                   	pop    esi
c0023c17:	5f                   	pop    edi
c0023c18:	5d                   	pop    ebp
c0023c19:	e9 b0 fe ff ff       	jmp    c0023ace <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c1e:	55                   	push   ebp
c0023c1f:	57                   	push   edi
c0023c20:	56                   	push   esi
c0023c21:	53                   	push   ebx
c0023c22:	31 db                	xor    ebx,ebx
c0023c24:	83 ec 0c             	sub    esp,0xc
c0023c27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c2b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c2f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c32:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c38:	74 7a                	je     c0023cb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c3a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023c3e:	89 d8                	mov    eax,ebx
c0023c40:	c1 e0 07             	shl    eax,0x7
c0023c43:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023c4a:	55                   	push   ebp
c0023c4b:	56                   	push   esi
c0023c4c:	e8 35 fe ff ff       	call   c0023a86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023c51:	5a                   	pop    edx
c0023c52:	83 f8 01             	cmp    eax,0x1
c0023c55:	59                   	pop    ecx
c0023c56:	75 21                	jne    c0023c79 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023c58:	50                   	push   eax
c0023c59:	53                   	push   ebx
c0023c5a:	55                   	push   ebp
c0023c5b:	56                   	push   esi
c0023c5c:	e8 b7 fe ff ff       	call   c0023b18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023c61:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023c68:	e8 2c b9 fe ff       	call   c000f599 <malloc>
c0023c6d:	89 c5                	mov    ebp,eax
c0023c6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c72:	e8 03 0d 00 00       	call   c002497a <SATA::SATA()>
c0023c77:	eb 24                	jmp    c0023c9d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023c79:	83 f8 04             	cmp    eax,0x4
c0023c7c:	75 36                	jne    c0023cb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c7e:	51                   	push   ecx
c0023c7f:	53                   	push   ebx
c0023c80:	55                   	push   ebp
c0023c81:	56                   	push   esi
c0023c82:	e8 91 fe ff ff       	call   c0023b18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023c87:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023c8e:	e8 06 b9 fe ff       	call   c000f599 <malloc>
c0023c93:	89 c5                	mov    ebp,eax
c0023c95:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c98:	e8 53 10 00 00       	call   c0024cf0 <SATAPI::SATAPI()>
c0023c9d:	58                   	pop    eax
c0023c9e:	5a                   	pop    edx
c0023c9f:	55                   	push   ebp
c0023ca0:	56                   	push   esi
c0023ca1:	e8 fc fd fe ff       	call   c0013aa2 <Device::addChild(Device*)>
c0023ca6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ca9:	56                   	push   esi
c0023caa:	6a 00                	push   0x0
c0023cac:	53                   	push   ebx
c0023cad:	55                   	push   ebp
c0023cae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023cb1:	83 c4 20             	add    esp,0x20
c0023cb4:	d1 ef                	shr    edi,1
c0023cb6:	43                   	inc    ebx
c0023cb7:	83 fb 20             	cmp    ebx,0x20
c0023cba:	0f 85 72 ff ff ff    	jne    c0023c32 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023cc0:	83 c4 0c             	add    esp,0xc
c0023cc3:	5b                   	pop    ebx
c0023cc4:	5e                   	pop    esi
c0023cc5:	5f                   	pop    edi
c0023cc6:	5d                   	pop    ebp
c0023cc7:	c3                   	ret    

c0023cc8 <SATABus::open(int, int, void*)>:
c0023cc8:	83 ec 14             	sub    esp,0x14
c0023ccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ccf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023cd5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023cdb:	52                   	push   edx
c0023cdc:	50                   	push   eax
c0023cdd:	e8 3c ff ff ff       	call   c0023c1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023ce2:	31 c0                	xor    eax,eax
c0023ce4:	83 c4 1c             	add    esp,0x1c
c0023ce7:	c3                   	ret    

c0023ce8 <ATA::close(int, int, void*)>:
c0023ce8:	83 ec 0c             	sub    esp,0xc
c0023ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023cf5:	85 c0                	test   eax,eax
c0023cf7:	74 0c                	je     c0023d05 <ATA::close(int, int, void*)+0x1d>
c0023cf9:	83 ec 0c             	sub    esp,0xc
c0023cfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0023cfe:	50                   	push   eax
c0023cff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d02:	83 c4 10             	add    esp,0x10
c0023d05:	31 c0                	xor    eax,eax
c0023d07:	83 c4 0c             	add    esp,0xc
c0023d0a:	c3                   	ret    
c0023d0b:	90                   	nop

c0023d0c <ATA::powerSaving(PowerSavingLevel)>:
c0023d0c:	c3                   	ret    
c0023d0d:	90                   	nop

c0023d0e <ATA::ATA()>:
c0023d0e:	83 ec 0c             	sub    esp,0xc
c0023d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d15:	83 ec 04             	sub    esp,0x4
c0023d18:	68 00 02 00 00       	push   0x200
c0023d1d:	68 99 c1 02 c0       	push   0xc002c199
c0023d22:	50                   	push   eax
c0023d23:	e8 b0 01 ff ff       	call   c0013ed8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d28:	83 c4 10             	add    esp,0x10
c0023d2b:	ba 1c c1 02 c0       	mov    edx,0xc002c11c
c0023d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d34:	89 10                	mov    DWORD PTR [eax],edx
c0023d36:	90                   	nop
c0023d37:	83 c4 0c             	add    esp,0xc
c0023d3a:	c3                   	ret    
c0023d3b:	90                   	nop

c0023d3c <ATA::flush(bool)>:
c0023d3c:	53                   	push   ebx
c0023d3d:	83 ec 08             	sub    esp,0x8
c0023d40:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d49:	19 c0                	sbb    eax,eax
c0023d4b:	83 e0 fd             	and    eax,0xfffffffd
c0023d4e:	05 ea 00 00 00       	add    eax,0xea
c0023d53:	50                   	push   eax
c0023d54:	6a 07                	push   0x7
c0023d56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d5d:	50                   	push   eax
c0023d5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d64:	e8 53 f1 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d69:	83 c4 0c             	add    esp,0xc
c0023d6c:	6a 00                	push   0x0
c0023d6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d75:	50                   	push   eax
c0023d76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d7c:	e8 dd fb ff ff       	call   c002395e <IDE::polling(unsigned char, unsigned int)>
c0023d81:	83 c4 18             	add    esp,0x18
c0023d84:	5b                   	pop    ebx
c0023d85:	c3                   	ret    

c0023d86 <ATA::readyForCommand()>:
c0023d86:	56                   	push   esi
c0023d87:	53                   	push   ebx
c0023d88:	31 db                	xor    ebx,ebx
c0023d8a:	50                   	push   eax
c0023d8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d8f:	50                   	push   eax
c0023d90:	6a 0c                	push   0xc
c0023d92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d99:	50                   	push   eax
c0023d9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023da0:	e8 d7 f1 ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0023da5:	83 c4 10             	add    esp,0x10
c0023da8:	a8 88                	test   al,0x88
c0023daa:	74 23                	je     c0023dcf <ATA::readyForCommand()+0x49>
c0023dac:	43                   	inc    ebx
c0023dad:	83 fb 63             	cmp    ebx,0x63
c0023db0:	7e dd                	jle    c0023d8f <ATA::readyForCommand()+0x9>
c0023db2:	51                   	push   ecx
c0023db3:	51                   	push   ecx
c0023db4:	6a 00                	push   0x0
c0023db6:	68 40 42 0f 00       	push   0xf4240
c0023dbb:	e8 79 9e ff ff       	call   c001dc39 <nanoSleep(unsigned long long)>
c0023dc0:	83 c4 10             	add    esp,0x10
c0023dc3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023dc9:	75 c4                	jne    c0023d8f <ATA::readyForCommand()+0x9>
c0023dcb:	31 c0                	xor    eax,eax
c0023dcd:	eb 02                	jmp    c0023dd1 <ATA::readyForCommand()+0x4b>
c0023dcf:	b0 01                	mov    al,0x1
c0023dd1:	5a                   	pop    edx
c0023dd2:	5b                   	pop    ebx
c0023dd3:	5e                   	pop    esi
c0023dd4:	c3                   	ret    
c0023dd5:	90                   	nop

c0023dd6 <ATA::access(unsigned long long, int, void*, bool)>:
c0023dd6:	55                   	push   ebp
c0023dd7:	57                   	push   edi
c0023dd8:	56                   	push   esi
c0023dd9:	53                   	push   ebx
c0023dda:	83 ec 2c             	sub    esp,0x2c
c0023ddd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023de1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023de5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023de9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ded:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023df1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023df5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023df9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023dff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e03:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e0d:	c1 e0 06             	shl    eax,0x6
c0023e10:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e18:	74 5d                	je     c0023e77 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e1a:	89 fa                	mov    edx,edi
c0023e1c:	89 f0                	mov    eax,esi
c0023e1e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e22:	c1 ea 1c             	shr    edx,0x1c
c0023e25:	89 d1                	mov    ecx,edx
c0023e27:	09 c1                	or     ecx,eax
c0023e29:	74 25                	je     c0023e50 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e2b:	31 ed                	xor    ebp,ebp
c0023e2d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e34:	89 fa                	mov    edx,edi
c0023e36:	89 f0                	mov    eax,esi
c0023e38:	0f ad d0             	shrd   eax,edx,cl
c0023e3b:	d3 ea                	shr    edx,cl
c0023e3d:	f6 c1 20             	test   cl,0x20
c0023e40:	74 02                	je     c0023e44 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023e42:	89 d0                	mov    eax,edx
c0023e44:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023e48:	45                   	inc    ebp
c0023e49:	83 fd 06             	cmp    ebp,0x6
c0023e4c:	75 df                	jne    c0023e2d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023e4e:	eb 76                	jmp    c0023ec6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023e50:	89 f0                	mov    eax,esi
c0023e52:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023e57:	89 fa                	mov    edx,edi
c0023e59:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e60:	0f ac d0 10          	shrd   eax,edx,0x10
c0023e64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023e69:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023e6d:	c1 ee 18             	shr    esi,0x18
c0023e70:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023e75:	eb 56                	jmp    c0023ecd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e77:	6a 00                	push   0x0
c0023e79:	6a 3f                	push   0x3f
c0023e7b:	57                   	push   edi
c0023e7c:	56                   	push   esi
c0023e7d:	e8 22 29 00 00       	call   c00267a4 <__umoddi3>
c0023e82:	83 c4 10             	add    esp,0x10
c0023e85:	40                   	inc    eax
c0023e86:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023e8a:	6a 00                	push   0x0
c0023e8c:	68 f0 03 00 00       	push   0x3f0
c0023e91:	57                   	push   edi
c0023e92:	56                   	push   esi
c0023e93:	e8 0c 28 00 00       	call   c00266a4 <__udivdi3>
c0023e98:	83 c4 10             	add    esp,0x10
c0023e9b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023ea0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ea7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023eac:	6a 00                	push   0x0
c0023eae:	6a 3f                	push   0x3f
c0023eb0:	57                   	push   edi
c0023eb1:	56                   	push   esi
c0023eb2:	e8 ed 27 00 00       	call   c00266a4 <__udivdi3>
c0023eb7:	83 c4 10             	add    esp,0x10
c0023eba:	89 c6                	mov    esi,eax
c0023ebc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023ec1:	83 e6 0f             	and    esi,0xf
c0023ec4:	eb 07                	jmp    c0023ecd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ec6:	31 f6                	xor    esi,esi
c0023ec8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023ecd:	bf 01 00 00 00       	mov    edi,0x1
c0023ed2:	50                   	push   eax
c0023ed3:	6a 00                	push   0x0
c0023ed5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023edc:	50                   	push   eax
c0023edd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023ee1:	e8 e2 f1 ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c0023ee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ee9:	e8 98 fe ff ff       	call   c0023d86 <ATA::readyForCommand()>
c0023eee:	83 c4 10             	add    esp,0x10
c0023ef1:	84 c0                	test   al,al
c0023ef3:	0f 84 5a 02 00 00    	je     c0024153 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023ef9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023eff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f05:	c1 e0 04             	shl    eax,0x4
c0023f08:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f0f:	09 c6                	or     esi,eax
c0023f11:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f16:	75 05                	jne    c0023f1d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f18:	83 ce a0             	or     esi,0xffffffa0
c0023f1b:	eb 03                	jmp    c0023f20 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f1d:	83 ce e0             	or     esi,0xffffffe0
c0023f20:	89 f0                	mov    eax,esi
c0023f22:	0f b6 f0             	movzx  esi,al
c0023f25:	56                   	push   esi
c0023f26:	6a 06                	push   0x6
c0023f28:	51                   	push   ecx
c0023f29:	52                   	push   edx
c0023f2a:	e8 8d ef ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f2f:	83 c4 10             	add    esp,0x10
c0023f32:	6a 00                	push   0x0
c0023f34:	6a 01                	push   0x1
c0023f36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f3d:	50                   	push   eax
c0023f3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f44:	e8 73 ef ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f49:	83 c4 10             	add    esp,0x10
c0023f4c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f51:	75 6e                	jne    c0023fc1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023f53:	6a 00                	push   0x0
c0023f55:	6a 08                	push   0x8
c0023f57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5e:	50                   	push   eax
c0023f5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f65:	e8 52 ef ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f6a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023f6f:	50                   	push   eax
c0023f70:	6a 09                	push   0x9
c0023f72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f79:	50                   	push   eax
c0023f7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f80:	e8 37 ef ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f85:	83 c4 20             	add    esp,0x20
c0023f88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023f8d:	50                   	push   eax
c0023f8e:	6a 0a                	push   0xa
c0023f90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f97:	50                   	push   eax
c0023f98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f9e:	e8 19 ef ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023fa8:	50                   	push   eax
c0023fa9:	6a 0b                	push   0xb
c0023fab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fb2:	50                   	push   eax
c0023fb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fb9:	e8 fe ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fbe:	83 c4 20             	add    esp,0x20
c0023fc1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023fc6:	50                   	push   eax
c0023fc7:	6a 02                	push   0x2
c0023fc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd0:	50                   	push   eax
c0023fd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd7:	e8 e0 ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fdc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023fe1:	50                   	push   eax
c0023fe2:	6a 03                	push   0x3
c0023fe4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023feb:	50                   	push   eax
c0023fec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ff2:	e8 c5 ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ff7:	83 c4 20             	add    esp,0x20
c0023ffa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023fff:	50                   	push   eax
c0024000:	6a 04                	push   0x4
c0024002:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024009:	50                   	push   eax
c002400a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024010:	e8 a7 ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024015:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002401a:	50                   	push   eax
c002401b:	6a 05                	push   0x5
c002401d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024024:	50                   	push   eax
c0024025:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002402b:	e8 8c ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024030:	83 c4 20             	add    esp,0x20
c0024033:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024038:	0f 94 c0             	sete   al
c002403b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024040:	74 09                	je     c002404b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024042:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024049:	eb 07                	jmp    c0024052 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002404b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024052:	0f b6 c0             	movzx  eax,al
c0024055:	50                   	push   eax
c0024056:	6a 07                	push   0x7
c0024058:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002405f:	50                   	push   eax
c0024060:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024066:	e8 51 ee ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002406b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002406f:	83 c4 10             	add    esp,0x10
c0024072:	85 f6                	test   esi,esi
c0024074:	0f 84 ba 00 00 00    	je     c0024134 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002407a:	50                   	push   eax
c002407b:	6a 01                	push   0x1
c002407d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024084:	50                   	push   eax
c0024085:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002408b:	e8 ce f8 ff ff       	call   c002395e <IDE::polling(unsigned char, unsigned int)>
c0024090:	83 c4 10             	add    esp,0x10
c0024093:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024099:	84 c0                	test   al,al
c002409b:	74 2c                	je     c00240c9 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002409d:	0f b6 f8             	movzx  edi,al
c00240a0:	0f b6 d2             	movzx  edx,dl
c00240a3:	57                   	push   edi
c00240a4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00240ab:	50                   	push   eax
c00240ac:	52                   	push   edx
c00240ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b3:	e8 f6 f7 ff ff       	call   c00238ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00240b8:	c7 04 24 f4 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0f4
c00240bf:	e8 a5 e5 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00240c4:	e9 87 00 00 00       	jmp    c0024150 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00240c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00240ce:	74 33                	je     c0024103 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00240d0:	31 ed                	xor    ebp,ebp
c00240d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00240d6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00240da:	50                   	push   eax
c00240db:	50                   	push   eax
c00240dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e3:	50                   	push   eax
c00240e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ea:	e8 bb ed ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c00240ef:	89 c2                	mov    edx,eax
c00240f1:	89 f8                	mov    eax,edi
c00240f3:	66 ef                	out    dx,ax
c00240f5:	45                   	inc    ebp
c00240f6:	83 c4 10             	add    esp,0x10
c00240f9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00240ff:	75 d1                	jne    c00240d2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024101:	eb 23                	jmp    c0024126 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024103:	0f b6 d2             	movzx  edx,dl
c0024106:	51                   	push   ecx
c0024107:	51                   	push   ecx
c0024108:	52                   	push   edx
c0024109:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410f:	e8 96 ed ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c0024114:	b9 00 01 00 00       	mov    ecx,0x100
c0024119:	89 c2                	mov    edx,eax
c002411b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002411f:	fc                   	cld    
c0024120:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024123:	83 c4 10             	add    esp,0x10
c0024126:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002412e:	4e                   	dec    esi
c002412f:	e9 3e ff ff ff       	jmp    c0024072 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024134:	31 ff                	xor    edi,edi
c0024136:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002413b:	74 16                	je     c0024153 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002413d:	50                   	push   eax
c002413e:	50                   	push   eax
c002413f:	31 c0                	xor    eax,eax
c0024141:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024146:	0f 94 c0             	sete   al
c0024149:	50                   	push   eax
c002414a:	53                   	push   ebx
c002414b:	e8 ec fb ff ff       	call   c0023d3c <ATA::flush(bool)>
c0024150:	83 c4 10             	add    esp,0x10
c0024153:	83 c4 2c             	add    esp,0x2c
c0024156:	89 f8                	mov    eax,edi
c0024158:	5b                   	pop    ebx
c0024159:	5e                   	pop    esi
c002415a:	5f                   	pop    edi
c002415b:	5d                   	pop    ebp
c002415c:	c3                   	ret    
c002415d:	90                   	nop

c002415e <ATA::read(unsigned long long, int, void*)>:
c002415e:	57                   	push   edi
c002415f:	b8 04 00 00 00       	mov    eax,0x4
c0024164:	56                   	push   esi
c0024165:	53                   	push   ebx
c0024166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002416a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002416e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024171:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024175:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024179:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002417f:	77 25                	ja     c00241a6 <ATA::read(unsigned long long, int, void*)+0x48>
c0024181:	b8 06 00 00 00       	mov    eax,0x6
c0024186:	85 f6                	test   esi,esi
c0024188:	74 1c                	je     c00241a6 <ATA::read(unsigned long long, int, void*)+0x48>
c002418a:	50                   	push   eax
c002418b:	50                   	push   eax
c002418c:	6a 00                	push   0x0
c002418e:	56                   	push   esi
c002418f:	52                   	push   edx
c0024190:	53                   	push   ebx
c0024191:	51                   	push   ecx
c0024192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024196:	e8 3b fc ff ff       	call   c0023dd6 <ATA::access(unsigned long long, int, void*, bool)>
c002419b:	83 c4 20             	add    esp,0x20
c002419e:	85 c0                	test   eax,eax
c00241a0:	0f 95 c0             	setne  al
c00241a3:	0f b6 c0             	movzx  eax,al
c00241a6:	5b                   	pop    ebx
c00241a7:	5e                   	pop    esi
c00241a8:	5f                   	pop    edi
c00241a9:	c3                   	ret    

c00241aa <ATA::write(unsigned long long, int, void*)>:
c00241aa:	57                   	push   edi
c00241ab:	b8 04 00 00 00       	mov    eax,0x4
c00241b0:	56                   	push   esi
c00241b1:	53                   	push   ebx
c00241b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241ba:	8d 7a ff             	lea    edi,[edx-0x1]
c00241bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241c5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241cb:	77 25                	ja     c00241f2 <ATA::write(unsigned long long, int, void*)+0x48>
c00241cd:	b8 06 00 00 00       	mov    eax,0x6
c00241d2:	85 f6                	test   esi,esi
c00241d4:	74 1c                	je     c00241f2 <ATA::write(unsigned long long, int, void*)+0x48>
c00241d6:	50                   	push   eax
c00241d7:	50                   	push   eax
c00241d8:	6a 01                	push   0x1
c00241da:	56                   	push   esi
c00241db:	52                   	push   edx
c00241dc:	53                   	push   ebx
c00241dd:	51                   	push   ecx
c00241de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241e2:	e8 ef fb ff ff       	call   c0023dd6 <ATA::access(unsigned long long, int, void*, bool)>
c00241e7:	83 c4 20             	add    esp,0x20
c00241ea:	85 c0                	test   eax,eax
c00241ec:	0f 95 c0             	setne  al
c00241ef:	0f b6 c0             	movzx  eax,al
c00241f2:	5b                   	pop    ebx
c00241f3:	5e                   	pop    esi
c00241f4:	5f                   	pop    edi
c00241f5:	c3                   	ret    

c00241f6 <ATA::detectCHS()>:
c00241f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00241fa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024200:	c1 e0 06             	shl    eax,0x6
c0024203:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024209:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024213:	c7 44 24 04 ff c0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c0ff
c002421b:	e9 b5 5b ff ff       	jmp    c0019dd5 <Krnl::panic(char const*)>

c0024220 <ATA::open(int, int, void*)>:
c0024220:	53                   	push   ebx
c0024221:	83 ec 08             	sub    esp,0x8
c0024224:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024228:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002422c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024230:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024236:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002423c:	c1 e0 06             	shl    eax,0x6
c002423f:	01 d0                	add    eax,edx
c0024241:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024248:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002424e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024255:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002425f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024265:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002426c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024273:	75 0c                	jne    c0024281 <ATA::open(int, int, void*)+0x61>
c0024275:	83 ec 0c             	sub    esp,0xc
c0024278:	53                   	push   ebx
c0024279:	e8 78 ff ff ff       	call   c00241f6 <ATA::detectCHS()>
c002427e:	83 c4 10             	add    esp,0x10
c0024281:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024287:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002428d:	c1 e0 06             	shl    eax,0x6
c0024290:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024297:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242a1:	d1 e8                	shr    eax,1
c00242a3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00242a9:	6a 04                	push   0x4
c00242ab:	6a 0c                	push   0xc
c00242ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b4:	50                   	push   eax
c00242b5:	52                   	push   edx
c00242b6:	e8 01 ec ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242bb:	90                   	nop
c00242bc:	90                   	nop
c00242bd:	6a 00                	push   0x0
c00242bf:	6a 0c                	push   0xc
c00242c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c8:	50                   	push   eax
c00242c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cf:	e8 e8 eb ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d4:	83 c4 14             	add    esp,0x14
c00242d7:	53                   	push   ebx
c00242d8:	e8 63 fc fe ff       	call   c0013f40 <PhysicalDisk::startCache()>
c00242dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242e0:	e8 dd 1e ff ff       	call   c00161c2 <createPartitionsForDisk(PhysicalDisk*)>
c00242e5:	31 c0                	xor    eax,eax
c00242e7:	83 c4 18             	add    esp,0x18
c00242ea:	5b                   	pop    ebx
c00242eb:	c3                   	ret    

c00242ec <ATAPI::write(unsigned long long, int, void*)>:
c00242ec:	b8 03 00 00 00       	mov    eax,0x3
c00242f1:	c3                   	ret    

c00242f2 <ATAPI::close(int, int, void*)>:
c00242f2:	83 ec 0c             	sub    esp,0xc
c00242f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00242ff:	85 c0                	test   eax,eax
c0024301:	74 0c                	je     c002430f <ATAPI::close(int, int, void*)+0x1d>
c0024303:	83 ec 0c             	sub    esp,0xc
c0024306:	8b 10                	mov    edx,DWORD PTR [eax]
c0024308:	50                   	push   eax
c0024309:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002430c:	83 c4 10             	add    esp,0x10
c002430f:	31 c0                	xor    eax,eax
c0024311:	83 c4 0c             	add    esp,0xc
c0024314:	c3                   	ret    
c0024315:	90                   	nop

c0024316 <ATAPI::ATAPI()>:
c0024316:	83 ec 0c             	sub    esp,0xc
c0024319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002431d:	83 ec 04             	sub    esp,0x4
c0024320:	68 00 08 00 00       	push   0x800
c0024325:	68 39 c2 02 c0       	push   0xc002c239
c002432a:	50                   	push   eax
c002432b:	e8 a8 fb fe ff       	call   c0013ed8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024330:	83 c4 10             	add    esp,0x10
c0024333:	ba 54 c1 02 c0       	mov    edx,0xc002c154
c0024338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433c:	89 10                	mov    DWORD PTR [eax],edx
c002433e:	90                   	nop
c002433f:	83 c4 0c             	add    esp,0xc
c0024342:	c3                   	ret    
c0024343:	90                   	nop

c0024344 <ATAPI::readyForCommand()>:
c0024344:	56                   	push   esi
c0024345:	53                   	push   ebx
c0024346:	31 db                	xor    ebx,ebx
c0024348:	50                   	push   eax
c0024349:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002434d:	50                   	push   eax
c002434e:	6a 0c                	push   0xc
c0024350:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024357:	50                   	push   eax
c0024358:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002435e:	e8 19 ec ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0024363:	83 c4 10             	add    esp,0x10
c0024366:	a8 88                	test   al,0x88
c0024368:	74 23                	je     c002438d <ATAPI::readyForCommand()+0x49>
c002436a:	43                   	inc    ebx
c002436b:	83 fb 63             	cmp    ebx,0x63
c002436e:	7e dd                	jle    c002434d <ATAPI::readyForCommand()+0x9>
c0024370:	51                   	push   ecx
c0024371:	51                   	push   ecx
c0024372:	6a 00                	push   0x0
c0024374:	68 40 42 0f 00       	push   0xf4240
c0024379:	e8 bb 98 ff ff       	call   c001dc39 <nanoSleep(unsigned long long)>
c002437e:	83 c4 10             	add    esp,0x10
c0024381:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024387:	75 c4                	jne    c002434d <ATAPI::readyForCommand()+0x9>
c0024389:	31 c0                	xor    eax,eax
c002438b:	eb 02                	jmp    c002438f <ATAPI::readyForCommand()+0x4b>
c002438d:	b0 01                	mov    al,0x1
c002438f:	5a                   	pop    edx
c0024390:	5b                   	pop    ebx
c0024391:	5e                   	pop    esi
c0024392:	c3                   	ret    
c0024393:	90                   	nop

c0024394 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024394:	55                   	push   ebp
c0024395:	57                   	push   edi
c0024396:	56                   	push   esi
c0024397:	53                   	push   ebx
c0024398:	83 ec 20             	sub    esp,0x20
c002439b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002439f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00243a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00243a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00243ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00243af:	6a 01                	push   0x1
c00243b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b8:	50                   	push   eax
c00243b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243bf:	e8 04 ed ff ff       	call   c00230c8 <IDE::enableIRQs(unsigned char, bool)>
c00243c4:	5e                   	pop    esi
c00243c5:	58                   	pop    eax
c00243c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243cd:	50                   	push   eax
c00243ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243d4:	e8 bd ea ff ff       	call   c0022e96 <IDE::prepareInterrupt(unsigned char)>
c00243d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00243dc:	e8 63 ff ff ff       	call   c0024344 <ATAPI::readyForCommand()>
c00243e1:	83 c4 10             	add    esp,0x10
c00243e4:	84 c0                	test   al,al
c00243e6:	75 0a                	jne    c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00243e8:	bb 01 00 00 00       	mov    ebx,0x1
c00243ed:	e9 57 02 00 00       	jmp    c0024649 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00243f2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00243f8:	c1 e0 04             	shl    eax,0x4
c00243fb:	0f b6 c0             	movzx  eax,al
c00243fe:	50                   	push   eax
c00243ff:	6a 06                	push   0x6
c0024401:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024408:	50                   	push   eax
c0024409:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002440f:	e8 a8 ea ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024414:	6a 00                	push   0x0
c0024416:	6a 01                	push   0x1
c0024418:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002441f:	50                   	push   eax
c0024420:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024426:	e8 91 ea ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002442b:	83 c4 20             	add    esp,0x20
c002442e:	0f b6 c3             	movzx  eax,bl
c0024431:	0f b6 df             	movzx  ebx,bh
c0024434:	50                   	push   eax
c0024435:	6a 04                	push   0x4
c0024437:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002443e:	50                   	push   eax
c002443f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024445:	e8 72 ea ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444a:	53                   	push   ebx
c002444b:	6a 05                	push   0x5
c002444d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024454:	50                   	push   eax
c0024455:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002445b:	e8 5c ea ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024460:	83 c4 20             	add    esp,0x20
c0024463:	68 a0 00 00 00       	push   0xa0
c0024468:	6a 07                	push   0x7
c002446a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024471:	50                   	push   eax
c0024472:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024478:	e8 3f ea ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002447d:	83 c4 0c             	add    esp,0xc
c0024480:	6a 01                	push   0x1
c0024482:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024489:	50                   	push   eax
c002448a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024490:	e8 c9 f4 ff ff       	call   c002395e <IDE::polling(unsigned char, unsigned int)>
c0024495:	83 c4 10             	add    esp,0x10
c0024498:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002449e:	84 c0                	test   al,al
c00244a0:	74 23                	je     c00244c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00244a2:	0f b6 d8             	movzx  ebx,al
c00244a5:	0f b6 d2             	movzx  edx,dl
c00244a8:	53                   	push   ebx
c00244a9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00244b0:	50                   	push   eax
c00244b1:	52                   	push   edx
c00244b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b8:	e8 f1 f3 ff ff       	call   c00238ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00244bd:	83 c4 10             	add    esp,0x10
c00244c0:	e9 84 01 00 00       	jmp    c0024649 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244c5:	0f b6 d2             	movzx  edx,dl
c00244c8:	53                   	push   ebx
c00244c9:	53                   	push   ebx
c00244ca:	52                   	push   edx
c00244cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d1:	e8 d4 e9 ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c00244d6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00244da:	b9 06 00 00 00       	mov    ecx,0x6
c00244df:	89 c2                	mov    edx,eax
c00244e1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00244e4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00244e8:	83 c4 10             	add    esp,0x10
c00244eb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244f1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244f8:	85 db                	test   ebx,ebx
c00244fa:	0f 84 ec 00 00 00    	je     c00245ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024500:	51                   	push   ecx
c0024501:	51                   	push   ecx
c0024502:	52                   	push   edx
c0024503:	50                   	push   eax
c0024504:	e8 21 eb ff ff       	call   c002302a <IDE::waitInterrupt(unsigned char)>
c0024509:	83 c4 10             	add    esp,0x10
c002450c:	84 c0                	test   al,al
c002450e:	0f 84 d4 fe ff ff    	je     c00243e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024514:	56                   	push   esi
c0024515:	56                   	push   esi
c0024516:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002451d:	50                   	push   eax
c002451e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024524:	e8 6d e9 ff ff       	call   c0022e96 <IDE::prepareInterrupt(unsigned char)>
c0024529:	83 c4 0c             	add    esp,0xc
c002452c:	6a 04                	push   0x4
c002452e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024535:	50                   	push   eax
c0024536:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002453c:	e8 3b ea ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c0024541:	83 c4 0c             	add    esp,0xc
c0024544:	89 c6                	mov    esi,eax
c0024546:	6a 05                	push   0x5
c0024548:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002454f:	50                   	push   eax
c0024550:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024556:	e8 21 ea ff ff       	call   c0022f7c <IDE::read(unsigned char, unsigned char)>
c002455b:	89 f1                	mov    ecx,esi
c002455d:	0f b6 c0             	movzx  eax,al
c0024560:	0f b6 f1             	movzx  esi,cl
c0024563:	c1 e0 08             	shl    eax,0x8
c0024566:	09 c6                	or     esi,eax
c0024568:	d1 fe                	sar    esi,1
c002456a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002456e:	83 c4 10             	add    esp,0x10
c0024571:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024576:	74 41                	je     c00245b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024578:	31 c9                	xor    ecx,ecx
c002457a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024580:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024587:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002458b:	75 0a                	jne    c0024597 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002458d:	01 c9                	add    ecx,ecx
c002458f:	01 cd                	add    ebp,ecx
c0024591:	4b                   	dec    ebx
c0024592:	e9 54 ff ff ff       	jmp    c00244eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024597:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002459c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00245a0:	51                   	push   ecx
c00245a1:	51                   	push   ecx
c00245a2:	52                   	push   edx
c00245a3:	50                   	push   eax
c00245a4:	e8 01 e9 ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c00245a9:	89 c2                	mov    edx,eax
c00245ab:	89 f0                	mov    eax,esi
c00245ad:	66 ef                	out    dx,ax
c00245af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00245b3:	83 c4 10             	add    esp,0x10
c00245b6:	41                   	inc    ecx
c00245b7:	eb c1                	jmp    c002457a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00245b9:	31 f6                	xor    esi,esi
c00245bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245c1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245c8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00245cc:	75 06                	jne    c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00245ce:	01 f6                	add    esi,esi
c00245d0:	01 f5                	add    ebp,esi
c00245d2:	eb bd                	jmp    c0024591 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00245d4:	51                   	push   ecx
c00245d5:	51                   	push   ecx
c00245d6:	52                   	push   edx
c00245d7:	50                   	push   eax
c00245d8:	e8 cd e8 ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c00245dd:	89 c2                	mov    edx,eax
c00245df:	66 ed                	in     ax,dx
c00245e1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00245e6:	83 c4 10             	add    esp,0x10
c00245e9:	46                   	inc    esi
c00245ea:	eb cf                	jmp    c00245bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00245ec:	51                   	push   ecx
c00245ed:	51                   	push   ecx
c00245ee:	52                   	push   edx
c00245ef:	50                   	push   eax
c00245f0:	e8 35 ea ff ff       	call   c002302a <IDE::waitInterrupt(unsigned char)>
c00245f5:	83 c4 10             	add    esp,0x10
c00245f8:	84 c0                	test   al,al
c00245fa:	0f 84 e8 fd ff ff    	je     c00243e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024600:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024605:	52                   	push   edx
c0024606:	52                   	push   edx
c0024607:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002460e:	50                   	push   eax
c002460f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024615:	e8 7c e8 ff ff       	call   c0022e96 <IDE::prepareInterrupt(unsigned char)>
c002461a:	83 c4 10             	add    esp,0x10
c002461d:	50                   	push   eax
c002461e:	50                   	push   eax
c002461f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024626:	50                   	push   eax
c0024627:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002462d:	e8 78 e8 ff ff       	call   c0022eaa <IDE::getBase(unsigned char)>
c0024632:	8d 50 07             	lea    edx,[eax+0x7]
c0024635:	ec                   	in     al,dx
c0024636:	83 c4 10             	add    esp,0x10
c0024639:	a8 88                	test   al,0x88
c002463b:	74 0a                	je     c0024647 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002463d:	4b                   	dec    ebx
c002463e:	75 dd                	jne    c002461d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024640:	bb 02 00 00 00       	mov    ebx,0x2
c0024645:	eb 02                	jmp    c0024649 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024647:	31 db                	xor    ebx,ebx
c0024649:	83 c4 1c             	add    esp,0x1c
c002464c:	89 d8                	mov    eax,ebx
c002464e:	5b                   	pop    ebx
c002464f:	5e                   	pop    esi
c0024650:	5f                   	pop    edi
c0024651:	5d                   	pop    ebp
c0024652:	c3                   	ret    
c0024653:	90                   	nop

c0024654 <ATAPI::diskRemoved()>:
c0024654:	83 ec 18             	sub    esp,0x18
c0024657:	68 45 c2 02 c0       	push   0xc002c245
c002465c:	e8 08 e0 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0024661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024665:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002466c:	83 c4 1c             	add    esp,0x1c
c002466f:	c3                   	ret    

c0024670 <ATAPI::eject()>:
c0024670:	57                   	push   edi
c0024671:	b9 03 00 00 00       	mov    ecx,0x3
c0024676:	53                   	push   ebx
c0024677:	83 ec 14             	sub    esp,0x14
c002467a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002467e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024682:	fc                   	cld    
c0024683:	31 c0                	xor    eax,eax
c0024685:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024687:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002468c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024691:	50                   	push   eax
c0024692:	50                   	push   eax
c0024693:	6a 00                	push   0x0
c0024695:	6a 00                	push   0x0
c0024697:	6a 00                	push   0x0
c0024699:	6a 02                	push   0x2
c002469b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002469f:	50                   	push   eax
c00246a0:	53                   	push   ebx
c00246a1:	e8 ee fc ff ff       	call   c0024394 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246a6:	83 c4 14             	add    esp,0x14
c00246a9:	53                   	push   ebx
c00246aa:	e8 a5 ff ff ff       	call   c0024654 <ATAPI::diskRemoved()>
c00246af:	83 c4 24             	add    esp,0x24
c00246b2:	31 c0                	xor    eax,eax
c00246b4:	5b                   	pop    ebx
c00246b5:	5f                   	pop    edi
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <ATAPI::diskInserted()>:
c00246b8:	53                   	push   ebx
c00246b9:	83 ec 14             	sub    esp,0x14
c00246bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00246c0:	68 5c c2 02 c0       	push   0xc002c25c
c00246c5:	e8 9f df fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00246ca:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00246d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246d4:	e8 67 f8 fe ff       	call   c0013f40 <PhysicalDisk::startCache()>
c00246d9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00246dd:	83 c4 18             	add    esp,0x18
c00246e0:	5b                   	pop    ebx
c00246e1:	e9 dc 1a ff ff       	jmp    c00161c2 <createPartitionsForDisk(PhysicalDisk*)>

c00246e6 <ATAPI::detectMedia()>:
c00246e6:	56                   	push   esi
c00246e7:	53                   	push   ebx
c00246e8:	83 ec 28             	sub    esp,0x28
c00246eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246ef:	6a 0c                	push   0xc
c00246f1:	6a 00                	push   0x0
c00246f3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00246f7:	56                   	push   esi
c00246f8:	e8 53 c0 fd ff       	call   c0000750 <memset>
c00246fd:	58                   	pop    eax
c00246fe:	5a                   	pop    edx
c00246ff:	6a 00                	push   0x0
c0024701:	6a 00                	push   0x0
c0024703:	6a 00                	push   0x0
c0024705:	6a 00                	push   0x0
c0024707:	56                   	push   esi
c0024708:	53                   	push   ebx
c0024709:	e8 86 fc ff ff       	call   c0024394 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002470e:	83 c4 1c             	add    esp,0x1c
c0024711:	6a 0c                	push   0xc
c0024713:	6a 00                	push   0x0
c0024715:	56                   	push   esi
c0024716:	e8 35 c0 fd ff       	call   c0000750 <memset>
c002471b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024720:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024725:	59                   	pop    ecx
c0024726:	58                   	pop    eax
c0024727:	6a 01                	push   0x1
c0024729:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002472d:	50                   	push   eax
c002472e:	6a 00                	push   0x0
c0024730:	6a 12                	push   0x12
c0024732:	56                   	push   esi
c0024733:	53                   	push   ebx
c0024734:	e8 5b fc ff ff       	call   c0024394 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024739:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002473d:	83 c4 20             	add    esp,0x20
c0024740:	83 e0 7f             	and    eax,0x7f
c0024743:	3c 70                	cmp    al,0x70
c0024745:	74 15                	je     c002475c <ATAPI::detectMedia()+0x76>
c0024747:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002474e:	75 0c                	jne    c002475c <ATAPI::detectMedia()+0x76>
c0024750:	83 ec 0c             	sub    esp,0xc
c0024753:	53                   	push   ebx
c0024754:	e8 5f ff ff ff       	call   c00246b8 <ATAPI::diskInserted()>
c0024759:	83 c4 10             	add    esp,0x10
c002475c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024760:	83 e0 0f             	and    eax,0xf
c0024763:	3c 02                	cmp    al,0x2
c0024765:	75 1b                	jne    c0024782 <ATAPI::detectMedia()+0x9c>
c0024767:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002476c:	75 2d                	jne    c002479b <ATAPI::detectMedia()+0xb5>
c002476e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024775:	74 24                	je     c002479b <ATAPI::detectMedia()+0xb5>
c0024777:	83 ec 0c             	sub    esp,0xc
c002477a:	53                   	push   ebx
c002477b:	e8 d4 fe ff ff       	call   c0024654 <ATAPI::diskRemoved()>
c0024780:	eb 16                	jmp    c0024798 <ATAPI::detectMedia()+0xb2>
c0024782:	84 c0                	test   al,al
c0024784:	75 15                	jne    c002479b <ATAPI::detectMedia()+0xb5>
c0024786:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002478d:	75 0c                	jne    c002479b <ATAPI::detectMedia()+0xb5>
c002478f:	83 ec 0c             	sub    esp,0xc
c0024792:	53                   	push   ebx
c0024793:	e8 20 ff ff ff       	call   c00246b8 <ATAPI::diskInserted()>
c0024798:	83 c4 10             	add    esp,0x10
c002479b:	83 c4 24             	add    esp,0x24
c002479e:	5b                   	pop    ebx
c002479f:	5e                   	pop    esi
c00247a0:	c3                   	ret    
c00247a1:	90                   	nop

c00247a2 <ATAPI::open(int, int, void*)>:
c00247a2:	53                   	push   ebx
c00247a3:	83 ec 08             	sub    esp,0x8
c00247a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247b8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00247be:	c1 e0 06             	shl    eax,0x6
c00247c1:	01 d0                	add    eax,edx
c00247c3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00247ca:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00247d0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00247d7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00247e1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00247e7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00247ee:	6a 04                	push   0x4
c00247f0:	6a 0c                	push   0xc
c00247f2:	51                   	push   ecx
c00247f3:	52                   	push   edx
c00247f4:	e8 c3 e6 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f9:	90                   	nop
c00247fa:	90                   	nop
c00247fb:	6a 00                	push   0x0
c00247fd:	6a 0c                	push   0xc
c00247ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024806:	50                   	push   eax
c0024807:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002480d:	e8 aa e6 ff ff       	call   c0022ebc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024812:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024819:	83 c4 14             	add    esp,0x14
c002481c:	53                   	push   ebx
c002481d:	e8 c4 fe ff ff       	call   c00246e6 <ATAPI::detectMedia()>
c0024822:	31 c0                	xor    eax,eax
c0024824:	83 c4 18             	add    esp,0x18
c0024827:	5b                   	pop    ebx
c0024828:	c3                   	ret    
c0024829:	90                   	nop

c002482a <ATAPI::read(unsigned long long, int, void*)>:
c002482a:	55                   	push   ebp
c002482b:	57                   	push   edi
c002482c:	56                   	push   esi
c002482d:	53                   	push   ebx
c002482e:	83 ec 1c             	sub    esp,0x1c
c0024831:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024835:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024839:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002483d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024844:	74 41                	je     c0024887 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024846:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002484a:	b9 03 00 00 00       	mov    ecx,0x3
c002484f:	fc                   	cld    
c0024850:	31 c0                	xor    eax,eax
c0024852:	86 fb                	xchg   bl,bh
c0024854:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024856:	c1 c3 10             	rol    ebx,0x10
c0024859:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002485e:	89 e8                	mov    eax,ebp
c0024860:	86 fb                	xchg   bl,bh
c0024862:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024866:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002486a:	50                   	push   eax
c002486b:	50                   	push   eax
c002486c:	55                   	push   ebp
c002486d:	c1 e5 0b             	shl    ebp,0xb
c0024870:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024874:	6a 00                	push   0x0
c0024876:	55                   	push   ebp
c0024877:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002487b:	50                   	push   eax
c002487c:	56                   	push   esi
c002487d:	e8 12 fb ff ff       	call   c0024394 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024882:	83 c4 20             	add    esp,0x20
c0024885:	eb 1a                	jmp    c00248a1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024887:	83 ec 0c             	sub    esp,0xc
c002488a:	56                   	push   esi
c002488b:	e8 56 fe ff ff       	call   c00246e6 <ATAPI::detectMedia()>
c0024890:	83 c4 10             	add    esp,0x10
c0024893:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002489a:	75 aa                	jne    c0024846 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002489c:	b8 02 00 00 00       	mov    eax,0x2
c00248a1:	83 c4 1c             	add    esp,0x1c
c00248a4:	5b                   	pop    ebx
c00248a5:	5e                   	pop    esi
c00248a6:	5f                   	pop    edi
c00248a7:	5d                   	pop    ebp
c00248a8:	c3                   	ret    
c00248a9:	90                   	nop

c00248aa <SATA::close(int, int, void*)>:
c00248aa:	83 ec 0c             	sub    esp,0xc
c00248ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248b7:	85 c0                	test   eax,eax
c00248b9:	74 0c                	je     c00248c7 <SATA::close(int, int, void*)+0x1d>
c00248bb:	83 ec 0c             	sub    esp,0xc
c00248be:	8b 10                	mov    edx,DWORD PTR [eax]
c00248c0:	50                   	push   eax
c00248c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248c4:	83 c4 10             	add    esp,0x10
c00248c7:	31 c0                	xor    eax,eax
c00248c9:	83 c4 0c             	add    esp,0xc
c00248cc:	c3                   	ret    
c00248cd:	90                   	nop

c00248ce <SATA::powerSaving(PowerSavingLevel)>:
c00248ce:	c3                   	ret    
c00248cf:	90                   	nop

c00248d0 <SATA::open(int, int, void*)>:
c00248d0:	56                   	push   esi
c00248d1:	53                   	push   ebx
c00248d2:	50                   	push   eax
c00248d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248db:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00248e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00248eb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00248f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00248f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024903:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024909:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024910:	e8 5c b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c0024915:	89 c6                	mov    esi,eax
c0024917:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002491d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024923:	e8 49 b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c0024928:	39 c6                	cmp    esi,eax
c002492a:	74 10                	je     c002493c <SATA::open(int, int, void*)+0x6c>
c002492c:	83 ec 0c             	sub    esp,0xc
c002492f:	68 84 c1 02 c0       	push   0xc002c184
c0024934:	e8 9c 54 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0024939:	83 c4 10             	add    esp,0x10
c002493c:	83 ec 0c             	sub    esp,0xc
c002493f:	6a 02                	push   0x2
c0024941:	e8 b9 c8 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0024946:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002494c:	6a 03                	push   0x3
c002494e:	50                   	push   eax
c002494f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024955:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c002495b:	e8 5c d0 fe ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0024960:	83 c4 14             	add    esp,0x14
c0024963:	53                   	push   ebx
c0024964:	e8 d7 f5 fe ff       	call   c0013f40 <PhysicalDisk::startCache()>
c0024969:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002496c:	e8 51 18 ff ff       	call   c00161c2 <createPartitionsForDisk(PhysicalDisk*)>
c0024971:	83 c4 14             	add    esp,0x14
c0024974:	31 c0                	xor    eax,eax
c0024976:	5b                   	pop    ebx
c0024977:	5e                   	pop    esi
c0024978:	c3                   	ret    
c0024979:	90                   	nop

c002497a <SATA::SATA()>:
c002497a:	83 ec 0c             	sub    esp,0xc
c002497d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024981:	83 ec 04             	sub    esp,0x4
c0024984:	68 00 02 00 00       	push   0x200
c0024989:	68 98 c1 02 c0       	push   0xc002c198
c002498e:	50                   	push   eax
c002498f:	e8 44 f5 fe ff       	call   c0013ed8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024994:	83 c4 10             	add    esp,0x10
c0024997:	ba 08 c2 02 c0       	mov    edx,0xc002c208
c002499c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249a0:	89 10                	mov    DWORD PTR [eax],edx
c00249a2:	90                   	nop
c00249a3:	83 c4 0c             	add    esp,0xc
c00249a6:	c3                   	ret    
c00249a7:	90                   	nop

c00249a8 <SATA::access(unsigned long long, int, void*, bool)>:
c00249a8:	55                   	push   ebp
c00249a9:	57                   	push   edi
c00249aa:	56                   	push   esi
c00249ab:	53                   	push   ebx
c00249ac:	83 ec 2c             	sub    esp,0x2c
c00249af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00249b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00249b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00249bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00249c3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00249c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00249cc:	7e 10                	jle    c00249de <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00249ce:	83 ec 0c             	sub    esp,0xc
c00249d1:	68 a8 c1 02 c0       	push   0xc002c1a8
c00249d6:	e8 fa 53 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00249db:	83 c4 10             	add    esp,0x10
c00249de:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249e4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00249ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249f4:	89 d0                	mov    eax,edx
c00249f6:	c1 e0 07             	shl    eax,0x7
c00249f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249fd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a07:	51                   	push   ecx
c0024a08:	8d 42 02             	lea    eax,[edx+0x2]
c0024a0b:	51                   	push   ecx
c0024a0c:	c1 e0 07             	shl    eax,0x7
c0024a0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a13:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a17:	50                   	push   eax
c0024a18:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a1e:	e8 1b f0 ff ff       	call   c0023a3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a23:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a27:	83 c4 10             	add    esp,0x10
c0024a2a:	b8 01 00 00 00       	mov    eax,0x1
c0024a2f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a34:	0f 84 cb 01 00 00    	je     c0024c05 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a42:	c1 e0 09             	shl    eax,0x9
c0024a45:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024a4e:	74 0e                	je     c0024a5e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024a50:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024a56:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024a5a:	89 c1                	mov    ecx,eax
c0024a5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024a5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024a62:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024a68:	8d 42 02             	lea    eax,[edx+0x2]
c0024a6b:	c1 e0 07             	shl    eax,0x7
c0024a6e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a74:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024a7a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024a80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024a84:	c1 e1 05             	shl    ecx,0x5
c0024a87:	01 c8                	add    eax,ecx
c0024a89:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024a8d:	83 e1 01             	and    ecx,0x1
c0024a90:	89 ce                	mov    esi,ecx
c0024a92:	8a 08                	mov    cl,BYTE PTR [eax]
c0024a94:	c1 e6 06             	shl    esi,0x6
c0024a97:	83 e1 bf             	and    ecx,0xffffffbf
c0024a9a:	09 f1                	or     ecx,esi
c0024a9c:	88 08                	mov    BYTE PTR [eax],cl
c0024a9e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024aa0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024aa6:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024aac:	89 08                	mov    DWORD PTR [eax],ecx
c0024aae:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ab4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024aba:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024ac0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024ac3:	50                   	push   eax
c0024ac4:	68 90 00 00 00       	push   0x90
c0024ac9:	6a 00                	push   0x0
c0024acb:	56                   	push   esi
c0024acc:	e8 7f bc fd ff       	call   c0000750 <memset>
c0024ad1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024ad7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024adb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024ae1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024ae5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024ae9:	83 c4 10             	add    esp,0x10
c0024aec:	48                   	dec    eax
c0024aed:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024af2:	89 c1                	mov    ecx,eax
c0024af4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024afa:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024aff:	09 c8                	or     eax,ecx
c0024b01:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b07:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b0a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b11:	66 25 00 7f          	and    ax,0x7f00
c0024b15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b19:	66 0d 27 80          	or     ax,0x8027
c0024b1d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b22:	66 89 06             	mov    WORD PTR [esi],ax
c0024b25:	19 c0                	sbb    eax,eax
c0024b27:	83 e0 f0             	and    eax,0xfffffff0
c0024b2a:	83 c0 35             	add    eax,0x35
c0024b2d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b30:	89 e8                	mov    eax,ebp
c0024b32:	c1 e8 10             	shr    eax,0x10
c0024b35:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b38:	89 e8                	mov    eax,ebp
c0024b3a:	c1 e8 18             	shr    eax,0x18
c0024b3d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024b40:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024b44:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024b47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b4b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024b4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b52:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024b56:	89 d6                	mov    esi,edx
c0024b58:	31 c0                	xor    eax,eax
c0024b5a:	c1 e6 07             	shl    esi,0x7
c0024b5d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024b61:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024b67:	80 e1 88             	and    cl,0x88
c0024b6a:	74 0a                	je     c0024b76 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024b6c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024b71:	74 0a                	je     c0024b7d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024b73:	40                   	inc    eax
c0024b74:	eb eb                	jmp    c0024b61 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024b76:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024b7b:	75 0a                	jne    c0024b87 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024b7d:	83 ec 0c             	sub    esp,0xc
c0024b80:	68 e1 c1 02 c0       	push   0xc002c1e1
c0024b85:	eb 56                	jmp    c0024bdd <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024b87:	b8 01 00 00 00       	mov    eax,0x1
c0024b8c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024b90:	c1 e2 07             	shl    edx,0x7
c0024b93:	d3 e0                	shl    eax,cl
c0024b95:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024b99:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024b9f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024ba5:	85 c8                	test   eax,ecx
c0024ba7:	74 20                	je     c0024bc9 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024ba9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024baf:	0f ba e1 1e          	bt     ecx,0x1e
c0024bb3:	73 ea                	jae    c0024b9f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024bb5:	83 ec 0c             	sub    esp,0xc
c0024bb8:	68 ef c1 02 c0       	push   0xc002c1ef
c0024bbd:	e8 13 52 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0024bc2:	83 c4 10             	add    esp,0x10
c0024bc5:	31 c0                	xor    eax,eax
c0024bc7:	eb 3c                	jmp    c0024c05 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024bc9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024bcf:	0f ba e0 1e          	bt     eax,0x1e
c0024bd3:	73 17                	jae    c0024bec <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024bd5:	83 ec 0c             	sub    esp,0xc
c0024bd8:	68 ef c1 02 c0       	push   0xc002c1ef
c0024bdd:	e8 f3 51 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0024be2:	83 c4 10             	add    esp,0x10
c0024be5:	b8 01 00 00 00       	mov    eax,0x1
c0024bea:	eb 19                	jmp    c0024c05 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024bec:	31 c0                	xor    eax,eax
c0024bee:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024bf3:	75 10                	jne    c0024c05 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024bf5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024bfb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024bff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c05:	83 c4 2c             	add    esp,0x2c
c0024c08:	5b                   	pop    ebx
c0024c09:	5e                   	pop    esi
c0024c0a:	5f                   	pop    edi
c0024c0b:	5d                   	pop    ebp
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <SATA::read(unsigned long long, int, void*)>:
c0024c0e:	57                   	push   edi
c0024c0f:	b8 04 00 00 00       	mov    eax,0x4
c0024c14:	56                   	push   esi
c0024c15:	53                   	push   ebx
c0024c16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c1e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c29:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c2f:	77 25                	ja     c0024c56 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c31:	b8 06 00 00 00       	mov    eax,0x6
c0024c36:	85 f6                	test   esi,esi
c0024c38:	74 1c                	je     c0024c56 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c3a:	50                   	push   eax
c0024c3b:	50                   	push   eax
c0024c3c:	6a 00                	push   0x0
c0024c3e:	56                   	push   esi
c0024c3f:	52                   	push   edx
c0024c40:	53                   	push   ebx
c0024c41:	51                   	push   ecx
c0024c42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c46:	e8 5d fd ff ff       	call   c00249a8 <SATA::access(unsigned long long, int, void*, bool)>
c0024c4b:	83 c4 20             	add    esp,0x20
c0024c4e:	85 c0                	test   eax,eax
c0024c50:	0f 95 c0             	setne  al
c0024c53:	0f b6 c0             	movzx  eax,al
c0024c56:	5b                   	pop    ebx
c0024c57:	5e                   	pop    esi
c0024c58:	5f                   	pop    edi
c0024c59:	c3                   	ret    

c0024c5a <SATA::write(unsigned long long, int, void*)>:
c0024c5a:	55                   	push   ebp
c0024c5b:	b8 04 00 00 00       	mov    eax,0x4
c0024c60:	57                   	push   edi
c0024c61:	56                   	push   esi
c0024c62:	53                   	push   ebx
c0024c63:	83 ec 0c             	sub    esp,0xc
c0024c66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024c6e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024c71:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024c75:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024c79:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024c7f:	77 3d                	ja     c0024cbe <SATA::write(unsigned long long, int, void*)+0x64>
c0024c81:	b8 06 00 00 00       	mov    eax,0x6
c0024c86:	85 ed                	test   ebp,ebp
c0024c88:	74 34                	je     c0024cbe <SATA::write(unsigned long long, int, void*)+0x64>
c0024c8a:	c1 e3 09             	shl    ebx,0x9
c0024c8d:	01 eb                	add    ebx,ebp
c0024c8f:	89 d6                	mov    esi,edx
c0024c91:	89 cf                	mov    edi,ecx
c0024c93:	83 c6 01             	add    esi,0x1
c0024c96:	83 d7 00             	adc    edi,0x0
c0024c99:	50                   	push   eax
c0024c9a:	50                   	push   eax
c0024c9b:	6a 01                	push   0x1
c0024c9d:	55                   	push   ebp
c0024c9e:	81 c5 00 02 00 00    	add    ebp,0x200
c0024ca4:	6a 01                	push   0x1
c0024ca6:	51                   	push   ecx
c0024ca7:	52                   	push   edx
c0024ca8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cac:	e8 f7 fc ff ff       	call   c00249a8 <SATA::access(unsigned long long, int, void*, bool)>
c0024cb1:	83 c4 20             	add    esp,0x20
c0024cb4:	89 f2                	mov    edx,esi
c0024cb6:	89 f9                	mov    ecx,edi
c0024cb8:	39 dd                	cmp    ebp,ebx
c0024cba:	75 d3                	jne    c0024c8f <SATA::write(unsigned long long, int, void*)+0x35>
c0024cbc:	31 c0                	xor    eax,eax
c0024cbe:	83 c4 0c             	add    esp,0xc
c0024cc1:	5b                   	pop    ebx
c0024cc2:	5e                   	pop    esi
c0024cc3:	5f                   	pop    edi
c0024cc4:	5d                   	pop    ebp
c0024cc5:	c3                   	ret    

c0024cc6 <SATAPI::write(unsigned long long, int, void*)>:
c0024cc6:	b8 03 00 00 00       	mov    eax,0x3
c0024ccb:	c3                   	ret    

c0024ccc <SATAPI::close(int, int, void*)>:
c0024ccc:	83 ec 0c             	sub    esp,0xc
c0024ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024cd9:	85 c0                	test   eax,eax
c0024cdb:	74 0c                	je     c0024ce9 <SATAPI::close(int, int, void*)+0x1d>
c0024cdd:	83 ec 0c             	sub    esp,0xc
c0024ce0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ce2:	50                   	push   eax
c0024ce3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ce6:	83 c4 10             	add    esp,0x10
c0024ce9:	31 c0                	xor    eax,eax
c0024ceb:	83 c4 0c             	add    esp,0xc
c0024cee:	c3                   	ret    
c0024cef:	90                   	nop

c0024cf0 <SATAPI::SATAPI()>:
c0024cf0:	83 ec 0c             	sub    esp,0xc
c0024cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf7:	83 ec 04             	sub    esp,0x4
c0024cfa:	68 00 08 00 00       	push   0x800
c0024cff:	68 38 c2 02 c0       	push   0xc002c238
c0024d04:	50                   	push   eax
c0024d05:	e8 ce f1 fe ff       	call   c0013ed8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d0a:	83 c4 10             	add    esp,0x10
c0024d0d:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0024d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d16:	89 10                	mov    DWORD PTR [eax],edx
c0024d18:	90                   	nop
c0024d19:	83 c4 0c             	add    esp,0xc
c0024d1c:	c3                   	ret    
c0024d1d:	90                   	nop

c0024d1e <SATAPI::diskRemoved()>:
c0024d1e:	83 ec 18             	sub    esp,0x18
c0024d21:	68 44 c2 02 c0       	push   0xc002c244
c0024d26:	e8 3e d9 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0024d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d2f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d36:	83 c4 1c             	add    esp,0x1c
c0024d39:	c3                   	ret    

c0024d3a <SATAPI::diskInserted()>:
c0024d3a:	53                   	push   ebx
c0024d3b:	83 ec 14             	sub    esp,0x14
c0024d3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024d42:	68 5b c2 02 c0       	push   0xc002c25b
c0024d47:	e8 1d d9 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0024d4c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024d53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d56:	e8 e5 f1 fe ff       	call   c0013f40 <PhysicalDisk::startCache()>
c0024d5b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024d5f:	83 c4 18             	add    esp,0x18
c0024d62:	5b                   	pop    ebx
c0024d63:	e9 5a 14 ff ff       	jmp    c00161c2 <createPartitionsForDisk(PhysicalDisk*)>

c0024d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024d68:	55                   	push   ebp
c0024d69:	57                   	push   edi
c0024d6a:	56                   	push   esi
c0024d6b:	53                   	push   ebx
c0024d6c:	83 ec 34             	sub    esp,0x34
c0024d6f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024d73:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024d77:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024d7b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d7f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024d83:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d93:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024d99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d9d:	c1 e0 07             	shl    eax,0x7
c0024da0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024da4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024da8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024db2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024db6:	8d 58 02             	lea    ebx,[eax+0x2]
c0024db9:	c1 e3 07             	shl    ebx,0x7
c0024dbc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024dc0:	53                   	push   ebx
c0024dc1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024dc7:	e8 72 ec ff ff       	call   c0023a3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024dd0:	83 c4 10             	add    esp,0x10
c0024dd3:	b8 01 00 00 00       	mov    eax,0x1
c0024dd8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024ddd:	0f 84 85 01 00 00    	je     c0024f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024de3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024de9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024deb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024df1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024df7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dfb:	c1 e1 05             	shl    ecx,0x5
c0024dfe:	01 c8                	add    eax,ecx
c0024e00:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e02:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e08:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e0e:	89 08                	mov    DWORD PTR [eax],ecx
c0024e10:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e16:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e1c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e22:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e25:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e28:	50                   	push   eax
c0024e29:	68 90 00 00 00       	push   0x90
c0024e2e:	6a 00                	push   0x0
c0024e30:	53                   	push   ebx
c0024e31:	e8 1a b9 fd ff       	call   c0000750 <memset>
c0024e36:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e3a:	b9 0c 00 00 00       	mov    ecx,0xc
c0024e3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e41:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024e47:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024e4b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e51:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e55:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e59:	48                   	dec    eax
c0024e5a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024e5f:	89 c1                	mov    ecx,eax
c0024e61:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e67:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e6c:	09 c8                	or     eax,ecx
c0024e6e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e74:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e77:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e7e:	66 25 00 7f          	and    ax,0x7f00
c0024e82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024e86:	66 0d 27 80          	or     ax,0x8027
c0024e8a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024e8e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e91:	89 d0                	mov    eax,edx
c0024e93:	c1 ea 18             	shr    edx,0x18
c0024e96:	c1 e8 10             	shr    eax,0x10
c0024e99:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024e9c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e9f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024ea3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ea6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024eaa:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ead:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024eb1:	83 c4 10             	add    esp,0x10
c0024eb4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024eb8:	31 c0                	xor    eax,eax
c0024eba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024ebe:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024ec4:	80 e2 88             	and    dl,0x88
c0024ec7:	74 0a                	je     c0024ed3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024ec9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ece:	74 0a                	je     c0024eda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024ed0:	40                   	inc    eax
c0024ed1:	eb eb                	jmp    c0024ebe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024ed3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ed8:	75 0f                	jne    c0024ee9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024eda:	83 ec 0c             	sub    esp,0xc
c0024edd:	68 e1 c1 02 c0       	push   0xc002c1e1
c0024ee2:	e8 ee 4e ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0024ee7:	eb 3f                	jmp    c0024f28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024ee9:	ba 01 00 00 00       	mov    edx,0x1
c0024eee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ef6:	d3 e2                	shl    edx,cl
c0024ef8:	c1 e0 07             	shl    eax,0x7
c0024efb:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f01:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f05:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f0b:	85 ca                	test   edx,ecx
c0024f0d:	74 23                	je     c0024f32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f0f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f15:	0f ba e1 1e          	bt     ecx,0x1e
c0024f19:	73 ea                	jae    c0024f05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f1b:	83 ec 0c             	sub    esp,0xc
c0024f1e:	68 73 c2 02 c0       	push   0xc002c273
c0024f23:	e8 41 d7 fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0024f28:	83 c4 10             	add    esp,0x10
c0024f2b:	b8 01 00 00 00       	mov    eax,0x1
c0024f30:	eb 36                	jmp    c0024f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f32:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f38:	0f ba e0 1e          	bt     eax,0x1e
c0024f3c:	73 0a                	jae    c0024f48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024f3e:	83 ec 0c             	sub    esp,0xc
c0024f41:	68 86 c2 02 c0       	push   0xc002c286
c0024f46:	eb db                	jmp    c0024f23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024f48:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024f4d:	74 17                	je     c0024f66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f4f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024f54:	74 10                	je     c0024f66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f56:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024f5c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024f60:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f66:	31 c0                	xor    eax,eax
c0024f68:	83 c4 2c             	add    esp,0x2c
c0024f6b:	5b                   	pop    ebx
c0024f6c:	5e                   	pop    esi
c0024f6d:	5f                   	pop    edi
c0024f6e:	5d                   	pop    ebp
c0024f6f:	c3                   	ret    

c0024f70 <SATAPI::eject()>:
c0024f70:	57                   	push   edi
c0024f71:	b9 03 00 00 00       	mov    ecx,0x3
c0024f76:	53                   	push   ebx
c0024f77:	83 ec 14             	sub    esp,0x14
c0024f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024f7e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f82:	fc                   	cld    
c0024f83:	31 c0                	xor    eax,eax
c0024f85:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f87:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024f8c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f91:	50                   	push   eax
c0024f92:	6a 00                	push   0x0
c0024f94:	6a 00                	push   0x0
c0024f96:	6a 00                	push   0x0
c0024f98:	6a 00                	push   0x0
c0024f9a:	6a 02                	push   0x2
c0024f9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fa0:	50                   	push   eax
c0024fa1:	53                   	push   ebx
c0024fa2:	e8 c1 fd ff ff       	call   c0024d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fa7:	83 c4 14             	add    esp,0x14
c0024faa:	53                   	push   ebx
c0024fab:	e8 6e fd ff ff       	call   c0024d1e <SATAPI::diskRemoved()>
c0024fb0:	83 c4 24             	add    esp,0x24
c0024fb3:	31 c0                	xor    eax,eax
c0024fb5:	5b                   	pop    ebx
c0024fb6:	5f                   	pop    edi
c0024fb7:	c3                   	ret    

c0024fb8 <SATAPI::detectMedia()>:
c0024fb8:	56                   	push   esi
c0024fb9:	53                   	push   ebx
c0024fba:	83 ec 28             	sub    esp,0x28
c0024fbd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fc1:	6a 0c                	push   0xc
c0024fc3:	6a 00                	push   0x0
c0024fc5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024fc9:	56                   	push   esi
c0024fca:	e8 81 b7 fd ff       	call   c0000750 <memset>
c0024fcf:	83 c4 0c             	add    esp,0xc
c0024fd2:	6a 00                	push   0x0
c0024fd4:	6a 00                	push   0x0
c0024fd6:	6a 00                	push   0x0
c0024fd8:	6a 00                	push   0x0
c0024fda:	6a 00                	push   0x0
c0024fdc:	56                   	push   esi
c0024fdd:	53                   	push   ebx
c0024fde:	e8 85 fd ff ff       	call   c0024d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fe3:	83 c4 1c             	add    esp,0x1c
c0024fe6:	6a 0c                	push   0xc
c0024fe8:	6a 00                	push   0x0
c0024fea:	56                   	push   esi
c0024feb:	e8 60 b7 fd ff       	call   c0000750 <memset>
c0024ff0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ff5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ffa:	83 c4 0c             	add    esp,0xc
c0024ffd:	6a 01                	push   0x1
c0024fff:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025003:	50                   	push   eax
c0025004:	6a 00                	push   0x0
c0025006:	6a 00                	push   0x0
c0025008:	6a 12                	push   0x12
c002500a:	56                   	push   esi
c002500b:	53                   	push   ebx
c002500c:	e8 57 fd ff ff       	call   c0024d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025011:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025015:	83 c4 20             	add    esp,0x20
c0025018:	83 e0 7f             	and    eax,0x7f
c002501b:	3c 70                	cmp    al,0x70
c002501d:	74 15                	je     c0025034 <SATAPI::detectMedia()+0x7c>
c002501f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025026:	75 0c                	jne    c0025034 <SATAPI::detectMedia()+0x7c>
c0025028:	83 ec 0c             	sub    esp,0xc
c002502b:	53                   	push   ebx
c002502c:	e8 09 fd ff ff       	call   c0024d3a <SATAPI::diskInserted()>
c0025031:	83 c4 10             	add    esp,0x10
c0025034:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025038:	83 e0 0f             	and    eax,0xf
c002503b:	3c 02                	cmp    al,0x2
c002503d:	75 1b                	jne    c002505a <SATAPI::detectMedia()+0xa2>
c002503f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025044:	75 2d                	jne    c0025073 <SATAPI::detectMedia()+0xbb>
c0025046:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002504d:	74 24                	je     c0025073 <SATAPI::detectMedia()+0xbb>
c002504f:	83 ec 0c             	sub    esp,0xc
c0025052:	53                   	push   ebx
c0025053:	e8 c6 fc ff ff       	call   c0024d1e <SATAPI::diskRemoved()>
c0025058:	eb 16                	jmp    c0025070 <SATAPI::detectMedia()+0xb8>
c002505a:	84 c0                	test   al,al
c002505c:	75 15                	jne    c0025073 <SATAPI::detectMedia()+0xbb>
c002505e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025065:	75 0c                	jne    c0025073 <SATAPI::detectMedia()+0xbb>
c0025067:	83 ec 0c             	sub    esp,0xc
c002506a:	53                   	push   ebx
c002506b:	e8 ca fc ff ff       	call   c0024d3a <SATAPI::diskInserted()>
c0025070:	83 c4 10             	add    esp,0x10
c0025073:	83 c4 24             	add    esp,0x24
c0025076:	5b                   	pop    ebx
c0025077:	5e                   	pop    esi
c0025078:	c3                   	ret    
c0025079:	90                   	nop

c002507a <SATAPI::open(int, int, void*)>:
c002507a:	56                   	push   esi
c002507b:	53                   	push   ebx
c002507c:	50                   	push   eax
c002507d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025085:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002508f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025095:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002509f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250a3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00250ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00250b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00250ba:	e8 b2 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c00250bf:	89 c6                	mov    esi,eax
c00250c1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00250c7:	81 c6 00 10 00 00    	add    esi,0x1000
c00250cd:	e8 9f a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c00250d2:	39 c6                	cmp    esi,eax
c00250d4:	74 10                	je     c00250e6 <SATAPI::open(int, int, void*)+0x6c>
c00250d6:	83 ec 0c             	sub    esp,0xc
c00250d9:	68 9b c2 02 c0       	push   0xc002c29b
c00250de:	e8 f2 4c ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00250e3:	83 c4 10             	add    esp,0x10
c00250e6:	83 ec 0c             	sub    esp,0xc
c00250e9:	6a 02                	push   0x2
c00250eb:	e8 0f c1 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00250f0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00250f6:	6a 03                	push   0x3
c00250f8:	50                   	push   eax
c00250f9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00250ff:	ff 35 f0 d9 02 c0    	push   DWORD PTR ds:0xc002d9f0
c0025105:	e8 b2 c8 fe ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c002510a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025111:	83 c4 14             	add    esp,0x14
c0025114:	53                   	push   ebx
c0025115:	e8 9e fe ff ff       	call   c0024fb8 <SATAPI::detectMedia()>
c002511a:	83 c4 14             	add    esp,0x14
c002511d:	31 c0                	xor    eax,eax
c002511f:	5b                   	pop    ebx
c0025120:	5e                   	pop    esi
c0025121:	c3                   	ret    

c0025122 <SATAPI::read(unsigned long long, int, void*)>:
c0025122:	55                   	push   ebp
c0025123:	57                   	push   edi
c0025124:	56                   	push   esi
c0025125:	53                   	push   ebx
c0025126:	83 ec 1c             	sub    esp,0x1c
c0025129:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002512d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025131:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025135:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002513c:	74 19                	je     c0025157 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002513e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025143:	7e 2e                	jle    c0025173 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025145:	83 ec 0c             	sub    esp,0xc
c0025148:	68 b1 c2 02 c0       	push   0xc002c2b1
c002514d:	e8 83 4c ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0025152:	83 c4 10             	add    esp,0x10
c0025155:	eb 1c                	jmp    c0025173 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025157:	83 ec 0c             	sub    esp,0xc
c002515a:	55                   	push   ebp
c002515b:	e8 58 fe ff ff       	call   c0024fb8 <SATAPI::detectMedia()>
c0025160:	83 c4 10             	add    esp,0x10
c0025163:	b8 02 00 00 00       	mov    eax,0x2
c0025168:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002516f:	75 cd                	jne    c002513e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025171:	eb 49                	jmp    c00251bc <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025173:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025177:	b9 03 00 00 00       	mov    ecx,0x3
c002517c:	fc                   	cld    
c002517d:	31 c0                	xor    eax,eax
c002517f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025181:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025186:	89 d8                	mov    eax,ebx
c0025188:	86 e0                	xchg   al,ah
c002518a:	c1 c0 10             	rol    eax,0x10
c002518d:	86 e0                	xchg   al,ah
c002518f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025193:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025197:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002519b:	50                   	push   eax
c002519c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251a4:	56                   	push   esi
c00251a5:	53                   	push   ebx
c00251a6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00251aa:	c1 e0 0b             	shl    eax,0xb
c00251ad:	50                   	push   eax
c00251ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251b2:	50                   	push   eax
c00251b3:	55                   	push   ebp
c00251b4:	e8 af fb ff ff       	call   c0024d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251b9:	83 c4 20             	add    esp,0x20
c00251bc:	83 c4 1c             	add    esp,0x1c
c00251bf:	5b                   	pop    ebx
c00251c0:	5e                   	pop    esi
c00251c1:	5f                   	pop    edi
c00251c2:	5d                   	pop    ebp
c00251c3:	c3                   	ret    

c00251c4 <AVX::open(int, int, void*)>:
c00251c4:	83 ec 0c             	sub    esp,0xc
c00251c7:	e8 3c 11 00 00       	call   c0026308 <avxInit>
c00251cc:	b8 00 00 00 00       	mov    eax,0x0
c00251d1:	83 c4 0c             	add    esp,0xc
c00251d4:	c3                   	ret    
c00251d5:	90                   	nop

c00251d6 <AVX::close(int, int, void*)>:
c00251d6:	83 ec 0c             	sub    esp,0xc
c00251d9:	e8 2b 11 00 00       	call   c0026309 <avxClose>
c00251de:	b8 00 00 00 00       	mov    eax,0x0
c00251e3:	83 c4 0c             	add    esp,0xc
c00251e6:	c3                   	ret    
c00251e7:	90                   	nop

c00251e8 <AVX::available()>:
c00251e8:	83 ec 0c             	sub    esp,0xc
c00251eb:	e8 10 11 00 00       	call   c0026300 <avxDetect>
c00251f0:	85 c0                	test   eax,eax
c00251f2:	0f 95 c0             	setne  al
c00251f5:	83 c4 0c             	add    esp,0xc
c00251f8:	c3                   	ret    
c00251f9:	90                   	nop

c00251fa <AVX::save(void*)>:
c00251fa:	83 ec 0c             	sub    esp,0xc
c00251fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	50                   	push   eax
c0025205:	e8 fc 10 00 00       	call   c0026306 <avxSave>
c002520a:	83 c4 10             	add    esp,0x10
c002520d:	90                   	nop
c002520e:	83 c4 0c             	add    esp,0xc
c0025211:	c3                   	ret    

c0025212 <AVX::load(void*)>:
c0025212:	83 ec 0c             	sub    esp,0xc
c0025215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025219:	83 ec 0c             	sub    esp,0xc
c002521c:	50                   	push   eax
c002521d:	e8 e5 10 00 00       	call   c0026307 <avxLoad>
c0025222:	83 c4 10             	add    esp,0x10
c0025225:	90                   	nop
c0025226:	83 c4 0c             	add    esp,0xc
c0025229:	c3                   	ret    

c002522a <AVX::AVX()>:
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025231:	83 ec 08             	sub    esp,0x8
c0025234:	68 14 c3 02 c0       	push   0xc002c314
c0025239:	50                   	push   eax
c002523a:	e8 77 ed fe ff       	call   c0013fb6 <FPU::FPU(char const*)>
c002523f:	83 c4 10             	add    esp,0x10
c0025242:	ba 24 c3 02 c0       	mov    edx,0xc002c324
c0025247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524b:	89 10                	mov    DWORD PTR [eax],edx
c002524d:	90                   	nop
c002524e:	83 c4 0c             	add    esp,0xc
c0025251:	c3                   	ret    

c0025252 <MMX::available()>:
c0025252:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0025257:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002525d:	83 e0 20             	and    eax,0x20
c0025260:	84 c0                	test   al,al
c0025262:	0f 95 c0             	setne  al
c0025265:	c3                   	ret    

c0025266 <MMX::open(int, int, void*)>:
c0025266:	83 ec 0c             	sub    esp,0xc
c0025269:	e8 24 11 00 00       	call   c0026392 <x87Init>
c002526e:	b8 00 00 00 00       	mov    eax,0x0
c0025273:	83 c4 0c             	add    esp,0xc
c0025276:	c3                   	ret    
c0025277:	90                   	nop

c0025278 <MMX::close(int, int, void*)>:
c0025278:	83 ec 0c             	sub    esp,0xc
c002527b:	e8 2c 11 00 00       	call   c00263ac <x87Close>
c0025280:	b8 00 00 00 00       	mov    eax,0x0
c0025285:	83 c4 0c             	add    esp,0xc
c0025288:	c3                   	ret    
c0025289:	90                   	nop

c002528a <MMX::save(void*)>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025291:	83 ec 0c             	sub    esp,0xc
c0025294:	50                   	push   eax
c0025295:	e8 e7 10 00 00       	call   c0026381 <x87Save>
c002529a:	83 c4 10             	add    esp,0x10
c002529d:	90                   	nop
c002529e:	83 c4 0c             	add    esp,0xc
c00252a1:	c3                   	ret    

c00252a2 <MMX::load(void*)>:
c00252a2:	83 ec 0c             	sub    esp,0xc
c00252a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252a9:	83 ec 0c             	sub    esp,0xc
c00252ac:	50                   	push   eax
c00252ad:	e8 d8 10 00 00       	call   c002638a <x87Load>
c00252b2:	83 c4 10             	add    esp,0x10
c00252b5:	90                   	nop
c00252b6:	83 c4 0c             	add    esp,0xc
c00252b9:	c3                   	ret    

c00252ba <MMX::MMX()>:
c00252ba:	83 ec 0c             	sub    esp,0xc
c00252bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c1:	83 ec 08             	sub    esp,0x8
c00252c4:	68 54 c3 02 c0       	push   0xc002c354
c00252c9:	50                   	push   eax
c00252ca:	e8 e7 ec fe ff       	call   c0013fb6 <FPU::FPU(char const*)>
c00252cf:	83 c4 10             	add    esp,0x10
c00252d2:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c00252d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252db:	89 10                	mov    DWORD PTR [eax],edx
c00252dd:	90                   	nop
c00252de:	83 c4 0c             	add    esp,0xc
c00252e1:	c3                   	ret    

c00252e2 <SSE::open(int, int, void*)>:
c00252e2:	83 ec 0c             	sub    esp,0xc
c00252e5:	e8 5a 10 00 00       	call   c0026344 <sseInit>
c00252ea:	b8 00 00 00 00       	mov    eax,0x0
c00252ef:	83 c4 0c             	add    esp,0xc
c00252f2:	c3                   	ret    
c00252f3:	90                   	nop

c00252f4 <SSE::close(int, int, void*)>:
c00252f4:	83 ec 0c             	sub    esp,0xc
c00252f7:	e8 58 10 00 00       	call   c0026354 <sseClose>
c00252fc:	b8 00 00 00 00       	mov    eax,0x0
c0025301:	83 c4 0c             	add    esp,0xc
c0025304:	c3                   	ret    
c0025305:	90                   	nop

c0025306 <SSE::available()>:
c0025306:	83 ec 1c             	sub    esp,0x1c
c0025309:	e8 12 10 00 00       	call   c0026320 <absolutelyNoChanceInHell>
c002530e:	85 c0                	test   eax,eax
c0025310:	0f 95 c0             	setne  al
c0025313:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025317:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002531b:	83 c4 1c             	add    esp,0x1c
c002531e:	c3                   	ret    
c002531f:	90                   	nop

c0025320 <SSE::save(void*)>:
c0025320:	83 ec 0c             	sub    esp,0xc
c0025323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025327:	83 ec 0c             	sub    esp,0xc
c002532a:	50                   	push   eax
c002532b:	e8 08 10 00 00       	call   c0026338 <sseSave>
c0025330:	83 c4 10             	add    esp,0x10
c0025333:	90                   	nop
c0025334:	83 c4 0c             	add    esp,0xc
c0025337:	c3                   	ret    

c0025338 <SSE::load(void*)>:
c0025338:	83 ec 0c             	sub    esp,0xc
c002533b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533f:	83 ec 0c             	sub    esp,0xc
c0025342:	50                   	push   eax
c0025343:	e8 f6 0f 00 00       	call   c002633e <sseLoad>
c0025348:	83 c4 10             	add    esp,0x10
c002534b:	90                   	nop
c002534c:	83 c4 0c             	add    esp,0xc
c002534f:	c3                   	ret    

c0025350 <SSE::SSE()>:
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025357:	83 ec 08             	sub    esp,0x8
c002535a:	68 94 c3 02 c0       	push   0xc002c394
c002535f:	50                   	push   eax
c0025360:	e8 51 ec fe ff       	call   c0013fb6 <FPU::FPU(char const*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	ba a4 c3 02 c0       	mov    edx,0xc002c3a4
c002536d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025371:	89 10                	mov    DWORD PTR [eax],edx
c0025373:	90                   	nop
c0025374:	83 c4 0c             	add    esp,0xc
c0025377:	c3                   	ret    

c0025378 <x87::open(int, int, void*)>:
c0025378:	83 ec 0c             	sub    esp,0xc
c002537b:	e8 12 10 00 00       	call   c0026392 <x87Init>
c0025380:	b8 00 00 00 00       	mov    eax,0x0
c0025385:	83 c4 0c             	add    esp,0xc
c0025388:	c3                   	ret    
c0025389:	90                   	nop

c002538a <x87::close(int, int, void*)>:
c002538a:	83 ec 0c             	sub    esp,0xc
c002538d:	e8 1a 10 00 00       	call   c00263ac <x87Close>
c0025392:	b8 00 00 00 00       	mov    eax,0x0
c0025397:	83 c4 0c             	add    esp,0xc
c002539a:	c3                   	ret    
c002539b:	90                   	nop

c002539c <x87::available()>:
c002539c:	83 ec 0c             	sub    esp,0xc
c002539f:	e8 c2 0f 00 00       	call   c0026366 <x87Detect>
c00253a4:	85 c0                	test   eax,eax
c00253a6:	0f 95 c0             	setne  al
c00253a9:	83 c4 0c             	add    esp,0xc
c00253ac:	c3                   	ret    
c00253ad:	90                   	nop

c00253ae <x87::save(void*)>:
c00253ae:	83 ec 0c             	sub    esp,0xc
c00253b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b5:	83 ec 0c             	sub    esp,0xc
c00253b8:	50                   	push   eax
c00253b9:	e8 c3 0f 00 00       	call   c0026381 <x87Save>
c00253be:	83 c4 10             	add    esp,0x10
c00253c1:	90                   	nop
c00253c2:	83 c4 0c             	add    esp,0xc
c00253c5:	c3                   	ret    

c00253c6 <x87::load(void*)>:
c00253c6:	83 ec 0c             	sub    esp,0xc
c00253c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253cd:	83 ec 0c             	sub    esp,0xc
c00253d0:	50                   	push   eax
c00253d1:	e8 b4 0f 00 00       	call   c002638a <x87Load>
c00253d6:	83 c4 10             	add    esp,0x10
c00253d9:	90                   	nop
c00253da:	83 c4 0c             	add    esp,0xc
c00253dd:	c3                   	ret    

c00253de <x87::x87()>:
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e5:	83 ec 08             	sub    esp,0x8
c00253e8:	68 d4 c3 02 c0       	push   0xc002c3d4
c00253ed:	50                   	push   eax
c00253ee:	e8 c3 eb fe ff       	call   c0013fb6 <FPU::FPU(char const*)>
c00253f3:	83 c4 10             	add    esp,0x10
c00253f6:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c00253fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ff:	89 10                	mov    DWORD PTR [eax],edx
c0025401:	90                   	nop
c0025402:	83 c4 0c             	add    esp,0xc
c0025405:	c3                   	ret    

c0025406 <APIC::disable()>:
c0025406:	90                   	nop
c0025407:	c3                   	ret    

c0025408 <APIC::close(int, int, void*)>:
c0025408:	55                   	push   ebp
c0025409:	89 e5                	mov    ebp,esp
c002540b:	83 ec 08             	sub    esp,0x8
c002540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025411:	8b 00                	mov    eax,DWORD PTR [eax]
c0025413:	83 c0 3c             	add    eax,0x3c
c0025416:	8b 00                	mov    eax,DWORD PTR [eax]
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002541e:	ff d0                	call   eax
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	b8 00 00 00 00       	mov    eax,0x0
c0025428:	c9                   	leave  
c0025429:	c3                   	ret    

c002542a <IOAPIC::close(int, int, void*)>:
c002542a:	b8 00 00 00 00       	mov    eax,0x0
c002542f:	c3                   	ret    

c0025430 <APIC::io_wait()>:
c0025430:	eb 00                	jmp    c0025432 <APIC::io_wait()+0x2>
c0025432:	eb 00                	jmp    c0025434 <APIC::io_wait()+0x4>
c0025434:	90                   	nop
c0025435:	c3                   	ret    

c0025436 <APIC::getBase()>:
c0025436:	55                   	push   ebp
c0025437:	89 e5                	mov    ebp,esp
c0025439:	83 ec 18             	sub    esp,0x18
c002543c:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0025441:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025447:	83 e0 08             	and    eax,0x8
c002544a:	84 c0                	test   al,al
c002544c:	75 07                	jne    c0025455 <APIC::getBase()+0x1f>
c002544e:	b8 00 00 00 00       	mov    eax,0x0
c0025453:	eb 21                	jmp    c0025476 <APIC::getBase()+0x40>
c0025455:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c002545a:	83 ec 08             	sub    esp,0x8
c002545d:	6a 1b                	push   0x1b
c002545f:	50                   	push   eax
c0025460:	e8 db 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025465:	83 c4 10             	add    esp,0x10
c0025468:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002546b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002546e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025471:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025476:	c9                   	leave  
c0025477:	c3                   	ret    

c0025478 <APIC::eoi(unsigned char)>:
c0025478:	55                   	push   ebp
c0025479:	89 e5                	mov    ebp,esp
c002547b:	83 ec 28             	sub    esp,0x28
c002547e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025481:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025484:	83 ec 0c             	sub    esp,0xc
c0025487:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002548a:	e8 a7 ff ff ff       	call   c0025436 <APIC::getBase()>
c002548f:	83 c4 10             	add    esp,0x10
c0025492:	05 b0 00 00 00       	add    eax,0xb0
c0025497:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002549a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002549d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00254a3:	90                   	nop
c00254a4:	c9                   	leave  
c00254a5:	c3                   	ret    

c00254a6 <APIC::open(int, int, void*)>:
c00254a6:	55                   	push   ebp
c00254a7:	89 e5                	mov    ebp,esp
c00254a9:	57                   	push   edi
c00254aa:	56                   	push   esi
c00254ab:	53                   	push   ebx
c00254ac:	83 ec 2c             	sub    esp,0x2c
c00254af:	83 ec 0c             	sub    esp,0xc
c00254b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254b5:	e8 7c ff ff ff       	call   c0025436 <APIC::getBase()>
c00254ba:	83 c4 10             	add    esp,0x10
c00254bd:	89 c2                	mov    edx,eax
c00254bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254c2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00254c8:	0f b6 f8             	movzx  edi,al
c00254cb:	89 d0                	mov    eax,edx
c00254cd:	ba 00 00 00 00       	mov    edx,0x0
c00254d2:	89 c1                	mov    ecx,eax
c00254d4:	80 e5 ff             	and    ch,0xff
c00254d7:	89 cb                	mov    ebx,ecx
c00254d9:	0f b6 f2             	movzx  esi,dl
c00254dc:	89 d8                	mov    eax,ebx
c00254de:	89 f2                	mov    edx,esi
c00254e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00254e3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00254e6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00254ea:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00254ee:	83 e0 00             	and    eax,0x0
c00254f1:	09 d0                	or     eax,edx
c00254f3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00254f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025500:	8d 50 01             	lea    edx,[eax+0x1]
c0025503:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025506:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002550c:	0f b6 d0             	movzx  edx,al
c002550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025512:	83 c2 08             	add    edx,0x8
c0025515:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025519:	0f b6 c9             	movzx  ecx,cl
c002551c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025522:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025526:	83 ec 0c             	sub    esp,0xc
c0025529:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002552c:	e8 05 ff ff ff       	call   c0025436 <APIC::getBase()>
c0025531:	83 c4 10             	add    esp,0x10
c0025534:	05 f0 00 00 00       	add    eax,0xf0
c0025539:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002553c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002553f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025541:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025544:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002554b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025552:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025555:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025558:	89 10                	mov    DWORD PTR [eax],edx
c002555a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025561:	a1 50 01 03 c0       	mov    eax,ds:0xc0030150
c0025566:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025569:	7d 7c                	jge    c00255e7 <APIC::open(int, int, void*)+0x141>
c002556b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002556e:	8b 04 85 60 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfea0]
c0025575:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025578:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002557b:	8b 04 85 60 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfea0]
c0025582:	c1 e8 08             	shr    eax,0x8
c0025585:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025589:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002558c:	8b 04 85 60 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfea0]
c0025593:	c1 e8 18             	shr    eax,0x18
c0025596:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025599:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002559d:	75 40                	jne    c00255df <APIC::open(int, int, void*)+0x139>
c002559f:	83 ec 0c             	sub    esp,0xc
c00255a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255a5:	e8 8c fe ff ff       	call   c0025436 <APIC::getBase()>
c00255aa:	83 c4 10             	add    esp,0x10
c00255ad:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00255b1:	75 07                	jne    c00255ba <APIC::open(int, int, void*)+0x114>
c00255b3:	ba 60 03 00 00       	mov    edx,0x360
c00255b8:	eb 05                	jmp    c00255bf <APIC::open(int, int, void*)+0x119>
c00255ba:	ba 50 03 00 00       	mov    edx,0x350
c00255bf:	01 d0                	add    eax,edx
c00255c1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00255c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00255c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00255cc:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00255d3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00255d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00255da:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00255dd:	89 10                	mov    DWORD PTR [eax],edx
c00255df:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00255e2:	e9 7a ff ff ff       	jmp    c0025561 <APIC::open(int, int, void*)+0xbb>
c00255e7:	b8 00 00 00 00       	mov    eax,0x0
c00255ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255ef:	5b                   	pop    ebx
c00255f0:	5e                   	pop    esi
c00255f1:	5f                   	pop    edi
c00255f2:	5d                   	pop    ebp
c00255f3:	c3                   	ret    

c00255f4 <IOAPIC::IOAPIC()>:
c00255f4:	83 ec 0c             	sub    esp,0xc
c00255f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255fb:	83 ec 08             	sub    esp,0x8
c00255fe:	68 14 c4 02 c0       	push   0xc002c414
c0025603:	50                   	push   eax
c0025604:	e8 9d e6 fe ff       	call   c0013ca6 <Device::Device(char const*)>
c0025609:	83 c4 10             	add    esp,0x10
c002560c:	ba 3c c5 02 c0       	mov    edx,0xc002c53c
c0025611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025615:	89 10                	mov    DWORD PTR [eax],edx
c0025617:	90                   	nop
c0025618:	83 c4 0c             	add    esp,0xc
c002561b:	c3                   	ret    

c002561c <APIC::APIC()>:
c002561c:	53                   	push   ebx
c002561d:	83 ec 18             	sub    esp,0x18
c0025620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025624:	83 ec 08             	sub    esp,0x8
c0025627:	68 1c c4 02 c0       	push   0xc002c41c
c002562c:	50                   	push   eax
c002562d:	e8 de ed fe ff       	call   c0014410 <InterruptController::InterruptController(char const*)>
c0025632:	83 c4 10             	add    esp,0x10
c0025635:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c002563a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002563e:	89 10                	mov    DWORD PTR [eax],edx
c0025640:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c0025645:	83 f0 01             	xor    eax,0x1
c0025648:	84 c0                	test   al,al
c002564a:	0f 84 a1 00 00 00    	je     c00256f1 <APIC::APIC()+0xd5>
c0025650:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025655:	a0 00 02 03 c0       	mov    al,ds:0xc0030200
c002565a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002565e:	0f 83 86 00 00 00    	jae    c00256ea <APIC::APIC()+0xce>
c0025664:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002566c:	83 ec 0c             	sub    esp,0xc
c002566f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025673:	e8 21 9f fe ff       	call   c000f599 <malloc>
c0025678:	83 c4 10             	add    esp,0x10
c002567b:	89 c3                	mov    ebx,eax
c002567d:	83 ec 0c             	sub    esp,0xc
c0025680:	53                   	push   ebx
c0025681:	e8 6e ff ff ff       	call   c00255f4 <IOAPIC::IOAPIC()>
c0025686:	83 c4 10             	add    esp,0x10
c0025689:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002568d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025696:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002569d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00256a2:	40                   	inc    eax
c00256a3:	a3 e0 1b 03 c0       	mov    ds:0xc0031be0,eax
c00256a8:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00256ad:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00256b3:	83 ec 08             	sub    esp,0x8
c00256b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256ba:	50                   	push   eax
c00256bb:	e8 e2 e3 fe ff       	call   c0013aa2 <Device::addChild(Device*)>
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00256c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00256c9:	83 c0 08             	add    eax,0x8
c00256cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00256ce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00256d3:	6a 00                	push   0x0
c00256d5:	6a 00                	push   0x0
c00256d7:	52                   	push   edx
c00256d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00256dc:	ff d0                	call   eax
c00256de:	83 c4 10             	add    esp,0x10
c00256e1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00256e5:	e9 6b ff ff ff       	jmp    c0025655 <APIC::APIC()+0x39>
c00256ea:	c6 05 20 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c20,0x1
c00256f1:	90                   	nop
c00256f2:	83 c4 18             	add    esp,0x18
c00256f5:	5b                   	pop    ebx
c00256f6:	c3                   	ret    
c00256f7:	90                   	nop

c00256f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00256f8:	55                   	push   ebp
c00256f9:	89 e5                	mov    ebp,esp
c00256fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025704:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025707:	72 1d                	jb     c0025726 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002570c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025715:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002571b:	01 d0                	add    eax,edx
c002571d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025720:	73 04                	jae    c0025726 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025722:	b0 01                	mov    al,0x1
c0025724:	eb 02                	jmp    c0025728 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025726:	b0 00                	mov    al,0x0
c0025728:	5d                   	pop    ebp
c0025729:	c3                   	ret    

c002572a <IOAPIC::read(int)>:
c002572a:	55                   	push   ebp
c002572b:	89 e5                	mov    ebp,esp
c002572d:	83 ec 10             	sub    esp,0x10
c0025730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025733:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025739:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002573c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002573f:	0f b6 d0             	movzx  edx,al
c0025742:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025745:	89 10                	mov    DWORD PTR [eax],edx
c0025747:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002574a:	83 c0 10             	add    eax,0x10
c002574d:	8b 00                	mov    eax,DWORD PTR [eax]
c002574f:	c9                   	leave  
c0025750:	c3                   	ret    
c0025751:	90                   	nop

c0025752 <IOAPIC::open(int, int, void*)>:
c0025752:	55                   	push   ebp
c0025753:	89 e5                	mov    ebp,esp
c0025755:	57                   	push   edi
c0025756:	56                   	push   esi
c0025757:	53                   	push   ebx
c0025758:	83 ec 0c             	sub    esp,0xc
c002575b:	83 ec 0c             	sub    esp,0xc
c002575e:	68 47 c4 02 c0       	push   0xc002c447
c0025763:	e8 01 cf fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c0025768:	83 c4 10             	add    esp,0x10
c002576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025771:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002577a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025780:	8b 14 85 40 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfdc0]
c0025787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002578a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025793:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025799:	8b 14 85 c0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd40]
c00257a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00257a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00257b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257bb:	0f b6 f8             	movzx  edi,al
c00257be:	89 d0                	mov    eax,edx
c00257c0:	ba 00 00 00 00       	mov    edx,0x0
c00257c5:	89 c1                	mov    ecx,eax
c00257c7:	80 e5 ff             	and    ch,0xff
c00257ca:	89 cb                	mov    ebx,ecx
c00257cc:	0f b6 f2             	movzx  esi,dl
c00257cf:	89 d8                	mov    eax,ebx
c00257d1:	89 f2                	mov    edx,esi
c00257d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257d6:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257d9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257dd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257e1:	83 e0 00             	and    eax,0x0
c00257e4:	09 d0                	or     eax,edx
c00257e6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257f3:	8d 50 01             	lea    edx,[eax+0x1]
c00257f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257f9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257ff:	0f b6 d0             	movzx  edx,al
c0025802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025805:	83 c2 08             	add    edx,0x8
c0025808:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002580c:	0f b6 c9             	movzx  ecx,cl
c002580f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025815:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025819:	83 ec 08             	sub    esp,0x8
c002581c:	6a 01                	push   0x1
c002581e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025821:	e8 04 ff ff ff       	call   c002572a <IOAPIC::read(int)>
c0025826:	83 c4 10             	add    esp,0x10
c0025829:	c1 f8 10             	sar    eax,0x10
c002582c:	0f b6 c0             	movzx  eax,al
c002582f:	8d 50 01             	lea    edx,[eax+0x1]
c0025832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025835:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002583b:	b8 00 00 00 00       	mov    eax,0x0
c0025840:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025843:	5b                   	pop    ebx
c0025844:	5e                   	pop    esi
c0025845:	5f                   	pop    edi
c0025846:	5d                   	pop    ebp
c0025847:	c3                   	ret    

c0025848 <IOAPIC::write(int, int)>:
c0025848:	55                   	push   ebp
c0025849:	89 e5                	mov    ebp,esp
c002584b:	83 ec 10             	sub    esp,0x10
c002584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025851:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025857:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002585a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002585d:	0f b6 d0             	movzx  edx,al
c0025860:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025863:	89 10                	mov    DWORD PTR [eax],edx
c0025865:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025868:	8d 50 10             	lea    edx,[eax+0x10]
c002586b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002586e:	89 02                	mov    DWORD PTR [edx],eax
c0025870:	90                   	nop
c0025871:	c9                   	leave  
c0025872:	c3                   	ret    
c0025873:	90                   	nop

c0025874 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025874:	55                   	push   ebp
c0025875:	89 e5                	mov    ebp,esp
c0025877:	53                   	push   ebx
c0025878:	83 ec 2c             	sub    esp,0x2c
c002587b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002587e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025881:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025884:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025887:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002588a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002588d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025890:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025893:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025896:	88 d8                	mov    al,bl
c0025898:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002589b:	88 c8                	mov    al,cl
c002589d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258a0:	88 d0                	mov    al,dl
c00258a2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00258a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258a9:	83 c0 08             	add    eax,0x8
c00258ac:	01 c0                	add    eax,eax
c00258ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258b1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258b5:	83 c0 08             	add    eax,0x8
c00258b8:	01 c0                	add    eax,eax
c00258ba:	40                   	inc    eax
c00258bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00258be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00258c1:	50                   	push   eax
c00258c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258c5:	e8 60 fe ff ff       	call   c002572a <IOAPIC::read(int)>
c00258ca:	83 c4 08             	add    esp,0x8
c00258cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00258d0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00258d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00258da:	c1 e0 18             	shl    eax,0x18
c00258dd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00258e0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00258e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00258e6:	52                   	push   edx
c00258e7:	50                   	push   eax
c00258e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258eb:	e8 58 ff ff ff       	call   c0025848 <IOAPIC::write(int, int)>
c00258f0:	83 c4 0c             	add    esp,0xc
c00258f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258f6:	50                   	push   eax
c00258f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fa:	e8 2b fe ff ff       	call   c002572a <IOAPIC::read(int)>
c00258ff:	83 c4 08             	add    esp,0x8
c0025902:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025905:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002590c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025913:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002591a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002591e:	74 09                	je     c0025929 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025920:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025927:	eb 07                	jmp    c0025930 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025929:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025930:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025934:	74 09                	je     c002593f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025936:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002593d:	eb 07                	jmp    c0025946 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002593f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025946:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002594d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025951:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025954:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025957:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002595a:	52                   	push   edx
c002595b:	50                   	push   eax
c002595c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002595f:	e8 e4 fe ff ff       	call   c0025848 <IOAPIC::write(int, int)>
c0025964:	83 c4 0c             	add    esp,0xc
c0025967:	90                   	nop
c0025968:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002596b:	c9                   	leave  
c002596c:	c3                   	ret    
c002596d:	90                   	nop

c002596e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002596e:	55                   	push   ebp
c002596f:	89 e5                	mov    ebp,esp
c0025971:	57                   	push   edi
c0025972:	56                   	push   esi
c0025973:	53                   	push   ebx
c0025974:	83 ec 2c             	sub    esp,0x2c
c0025977:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002597a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002597d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025981:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025985:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025989:	74 5a                	je     c00259e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002598b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002598f:	7f 44                	jg     c00259d5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025991:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025994:	05 e0 ca 02 c0       	add    eax,0xc002cae0
c0025999:	8a 00                	mov    al,BYTE PTR [eax]
c002599b:	0f b6 c0             	movzx  eax,al
c002599e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00259a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259a4:	66 8b 84 00 e0 01 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfe20]
c00259ac:	0f b7 c0             	movzx  eax,ax
c00259af:	83 e0 02             	and    eax,0x2
c00259b2:	85 c0                	test   eax,eax
c00259b4:	74 04                	je     c00259ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00259b6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00259ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259bd:	66 8b 84 00 e0 01 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfe20]
c00259c5:	0f b7 c0             	movzx  eax,ax
c00259c8:	83 e0 08             	and    eax,0x8
c00259cb:	85 c0                	test   eax,eax
c00259cd:	74 16                	je     c00259e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259d3:	eb 10                	jmp    c00259e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259d5:	83 ec 0c             	sub    esp,0xc
c00259d8:	68 58 c4 02 c0       	push   0xc002c458
c00259dd:	e8 f3 43 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00259e2:	83 c4 10             	add    esp,0x10
c00259e5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00259e9:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00259ee:	83 ec 08             	sub    esp,0x8
c00259f1:	50                   	push   eax
c00259f2:	68 90 c4 02 c0       	push   0xc002c490
c00259f7:	e8 6d cc fe ff       	call   c0012669 <Dbg::kprintf(char const*, ...)>
c00259fc:	83 c4 10             	add    esp,0x10
c00259ff:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a06:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0025a0b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a0e:	7d 67                	jge    c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a10:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a13:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0025a1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a1d:	83 ec 08             	sub    esp,0x8
c0025a20:	52                   	push   edx
c0025a21:	50                   	push   eax
c0025a22:	e8 d1 fc ff ff       	call   c00256f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a27:	83 c4 10             	add    esp,0x10
c0025a2a:	84 c0                	test   al,al
c0025a2c:	74 44                	je     c0025a72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a31:	8b 1c 85 00 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce400]
c0025a38:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025a3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a3f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025a43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a46:	83 c0 20             	add    eax,0x20
c0025a49:	0f b6 f0             	movzx  esi,al
c0025a4c:	b8 00 00 00 00       	mov    eax,0x0
c0025a51:	99                   	cdq    
c0025a52:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a55:	0f b6 c9             	movzx  ecx,cl
c0025a58:	83 ec 04             	sub    esp,0x4
c0025a5b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025a5e:	57                   	push   edi
c0025a5f:	56                   	push   esi
c0025a60:	52                   	push   edx
c0025a61:	50                   	push   eax
c0025a62:	51                   	push   ecx
c0025a63:	53                   	push   ebx
c0025a64:	e8 0b fe ff ff       	call   c0025874 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025a69:	83 c4 20             	add    esp,0x20
c0025a6c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025a70:	eb 05                	jmp    c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a72:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025a75:	eb 8f                	jmp    c0025a06 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025a77:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025a7a:	83 f0 01             	xor    eax,0x1
c0025a7d:	84 c0                	test   al,al
c0025a7f:	74 10                	je     c0025a91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025a81:	83 ec 0c             	sub    esp,0xc
c0025a84:	68 a7 c4 02 c0       	push   0xc002c4a7
c0025a89:	e8 47 43 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a95:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a9c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025aa0:	7f 65                	jg     c0025b07 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025aa8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025aaf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ab2:	01 ca                	add    edx,ecx
c0025ab4:	83 c2 54             	add    edx,0x54
c0025ab7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025abb:	85 c0                	test   eax,eax
c0025abd:	75 43                	jne    c0025b02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ac5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025acc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025acf:	01 ca                	add    edx,ecx
c0025ad1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ad4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ad7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ade:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ae1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ae8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025aeb:	01 ca                	add    edx,ecx
c0025aed:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025af3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025af6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025afa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025afd:	83 e8 20             	sub    eax,0x20
c0025b00:	eb 1a                	jmp    c0025b1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b02:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b05:	eb 95                	jmp    c0025a9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b07:	83 ec 0c             	sub    esp,0xc
c0025b0a:	68 b4 c4 02 c0       	push   0xc002c4b4
c0025b0f:	e8 c1 42 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0025b14:	83 c4 10             	add    esp,0x10
c0025b17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b1c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b1f:	5b                   	pop    ebx
c0025b20:	5e                   	pop    esi
c0025b21:	5f                   	pop    edi
c0025b22:	5d                   	pop    ebp
c0025b23:	c3                   	ret    

c0025b24 <PIC::disable()>:
c0025b24:	55                   	push   ebp
c0025b25:	89 e5                	mov    ebp,esp
c0025b27:	83 ec 10             	sub    esp,0x10
c0025b2a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b30:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b34:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b37:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b3b:	ee                   	out    dx,al
c0025b3c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025b42:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025b46:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b49:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025b4d:	ee                   	out    dx,al
c0025b4e:	90                   	nop
c0025b4f:	c9                   	leave  
c0025b50:	c3                   	ret    
c0025b51:	90                   	nop

c0025b52 <PIC::close(int, int, void*)>:
c0025b52:	55                   	push   ebp
c0025b53:	89 e5                	mov    ebp,esp
c0025b55:	83 ec 08             	sub    esp,0x8
c0025b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b5d:	83 c0 3c             	add    eax,0x3c
c0025b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b68:	ff d0                	call   eax
c0025b6a:	83 c4 10             	add    esp,0x10
c0025b6d:	b8 00 00 00 00       	mov    eax,0x0
c0025b72:	c9                   	leave  
c0025b73:	c3                   	ret    

c0025b74 <PIC::PIC()>:
c0025b74:	83 ec 0c             	sub    esp,0xc
c0025b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b7b:	83 ec 08             	sub    esp,0x8
c0025b7e:	68 60 c5 02 c0       	push   0xc002c560
c0025b83:	50                   	push   eax
c0025b84:	e8 87 e8 fe ff       	call   c0014410 <InterruptController::InterruptController(char const*)>
c0025b89:	83 c4 10             	add    esp,0x10
c0025b8c:	ba 8c c5 02 c0       	mov    edx,0xc002c58c
c0025b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b95:	89 10                	mov    DWORD PTR [eax],edx
c0025b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ba1:	0f b6 d0             	movzx  edx,al
c0025ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bb9:	0f b6 d0             	movzx  edx,al
c0025bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bcf:	8d 50 01             	lea    edx,[eax+0x1]
c0025bd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bd6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025bdc:	0f b6 d0             	movzx  edx,al
c0025bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025be7:	83 e1 3f             	and    ecx,0x3f
c0025bea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bf8:	0f b6 d0             	movzx  edx,al
c0025bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bff:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c10:	0f b6 d0             	movzx  edx,al
c0025c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c26:	8d 50 01             	lea    edx,[eax+0x1]
c0025c29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c33:	0f b6 d0             	movzx  edx,al
c0025c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c3e:	83 e1 3f             	and    ecx,0x3f
c0025c41:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c45:	90                   	nop
c0025c46:	83 c4 0c             	add    esp,0xc
c0025c49:	c3                   	ret    

c0025c4a <PIC::ioWait()>:
c0025c4a:	eb 00                	jmp    c0025c4c <PIC::ioWait()+0x2>
c0025c4c:	eb 00                	jmp    c0025c4e <PIC::ioWait()+0x4>
c0025c4e:	90                   	nop
c0025c4f:	c3                   	ret    

c0025c50 <PIC::getIRQReg(int)>:
c0025c50:	55                   	push   ebp
c0025c51:	89 e5                	mov    ebp,esp
c0025c53:	83 ec 10             	sub    esp,0x10
c0025c56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c59:	0f b6 c0             	movzx  eax,al
c0025c5c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c62:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025c65:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c68:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c6c:	ee                   	out    dx,al
c0025c6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c70:	0f b6 c0             	movzx  eax,al
c0025c73:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c79:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025c7c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c7f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c83:	ee                   	out    dx,al
c0025c84:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025c8a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025c8e:	89 c2                	mov    edx,eax
c0025c90:	ec                   	in     al,dx
c0025c91:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025c94:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c97:	0f b6 c0             	movzx  eax,al
c0025c9a:	c1 e0 08             	shl    eax,0x8
c0025c9d:	89 c1                	mov    ecx,eax
c0025c9f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ca5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ca9:	89 c2                	mov    edx,eax
c0025cab:	ec                   	in     al,dx
c0025cac:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025caf:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025cb2:	0f b6 c0             	movzx  eax,al
c0025cb5:	09 c8                	or     eax,ecx
c0025cb7:	c9                   	leave  
c0025cb8:	c3                   	ret    
c0025cb9:	90                   	nop

c0025cba <PIC::eoi(unsigned char)>:
c0025cba:	55                   	push   ebp
c0025cbb:	89 e5                	mov    ebp,esp
c0025cbd:	83 ec 14             	sub    esp,0x14
c0025cc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cc3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025cc6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025cca:	75 1e                	jne    c0025cea <PIC::eoi(unsigned char)+0x30>
c0025ccc:	6a 0b                	push   0xb
c0025cce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cd1:	e8 7a ff ff ff       	call   c0025c50 <PIC::getIRQReg(int)>
c0025cd6:	83 c4 08             	add    esp,0x8
c0025cd9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025cdd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ce1:	25 80 00 00 00       	and    eax,0x80
c0025ce6:	85 c0                	test   eax,eax
c0025ce8:	74 5f                	je     c0025d49 <PIC::eoi(unsigned char)+0x8f>
c0025cea:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025cee:	75 2d                	jne    c0025d1d <PIC::eoi(unsigned char)+0x63>
c0025cf0:	6a 0b                	push   0xb
c0025cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf5:	e8 56 ff ff ff       	call   c0025c50 <PIC::getIRQReg(int)>
c0025cfa:	83 c4 08             	add    esp,0x8
c0025cfd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d04:	66 85 c0             	test   ax,ax
c0025d07:	78 14                	js     c0025d1d <PIC::eoi(unsigned char)+0x63>
c0025d09:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d0f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d13:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d16:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d1a:	ee                   	out    dx,al
c0025d1b:	eb 2d                	jmp    c0025d4a <PIC::eoi(unsigned char)+0x90>
c0025d1d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d21:	76 12                	jbe    c0025d35 <PIC::eoi(unsigned char)+0x7b>
c0025d23:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d29:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d2d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d30:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d34:	ee                   	out    dx,al
c0025d35:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d3b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025d3f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d42:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d46:	ee                   	out    dx,al
c0025d47:	eb 01                	jmp    c0025d4a <PIC::eoi(unsigned char)+0x90>
c0025d49:	90                   	nop
c0025d4a:	c9                   	leave  
c0025d4b:	c3                   	ret    

c0025d4c <PIC::remap()>:
c0025d4c:	55                   	push   ebp
c0025d4d:	89 e5                	mov    ebp,esp
c0025d4f:	83 ec 48             	sub    esp,0x48
c0025d52:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025d59:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025d60:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025d66:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025d69:	89 c2                	mov    edx,eax
c0025d6b:	ec                   	in     al,dx
c0025d6c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025d6f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025d72:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025d75:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025d7b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025d7e:	89 c2                	mov    edx,eax
c0025d80:	ec                   	in     al,dx
c0025d81:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025d84:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025d87:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025d8a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025d90:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025d94:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025d97:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025d9a:	ee                   	out    dx,al
c0025d9b:	83 ec 0c             	sub    esp,0xc
c0025d9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da1:	e8 a4 fe ff ff       	call   c0025c4a <PIC::ioWait()>
c0025da6:	83 c4 10             	add    esp,0x10
c0025da9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025daf:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025db3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025db6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025db9:	ee                   	out    dx,al
c0025dba:	83 ec 0c             	sub    esp,0xc
c0025dbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc0:	e8 85 fe ff ff       	call   c0025c4a <PIC::ioWait()>
c0025dc5:	83 c4 10             	add    esp,0x10
c0025dc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025dcb:	0f b6 c0             	movzx  eax,al
c0025dce:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025dd4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025dd7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025dda:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025ddd:	ee                   	out    dx,al
c0025dde:	83 ec 0c             	sub    esp,0xc
c0025de1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de4:	e8 61 fe ff ff       	call   c0025c4a <PIC::ioWait()>
c0025de9:	83 c4 10             	add    esp,0x10
c0025dec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025def:	0f b6 c0             	movzx  eax,al
c0025df2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025df8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025dfb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025dfe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e01:	ee                   	out    dx,al
c0025e02:	83 ec 0c             	sub    esp,0xc
c0025e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e08:	e8 3d fe ff ff       	call   c0025c4a <PIC::ioWait()>
c0025e0d:	83 c4 10             	add    esp,0x10
c0025e10:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e16:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e1a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e1d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e20:	ee                   	out    dx,al
c0025e21:	83 ec 0c             	sub    esp,0xc
c0025e24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e27:	e8 1e fe ff ff       	call   c0025c4a <PIC::ioWait()>
c0025e2c:	83 c4 10             	add    esp,0x10
c0025e2f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e35:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e39:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025e3c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e3f:	ee                   	out    dx,al
c0025e40:	83 ec 0c             	sub    esp,0xc
c0025e43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e46:	e8 ff fd ff ff       	call   c0025c4a <PIC::ioWait()>
c0025e4b:	83 c4 10             	add    esp,0x10
c0025e4e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025e54:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025e58:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025e5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025e5e:	ee                   	out    dx,al
c0025e5f:	83 ec 0c             	sub    esp,0xc
c0025e62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e65:	e8 e0 fd ff ff       	call   c0025c4a <PIC::ioWait()>
c0025e6a:	83 c4 10             	add    esp,0x10
c0025e6d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025e73:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025e77:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025e7a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e7d:	ee                   	out    dx,al
c0025e7e:	83 ec 0c             	sub    esp,0xc
c0025e81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e84:	e8 c1 fd ff ff       	call   c0025c4a <PIC::ioWait()>
c0025e89:	83 c4 10             	add    esp,0x10
c0025e8c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025e90:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025e96:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025e99:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025e9c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e9f:	ee                   	out    dx,al
c0025ea0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025ea4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025eaa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025ead:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025eb0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025eb3:	ee                   	out    dx,al
c0025eb4:	90                   	nop
c0025eb5:	c9                   	leave  
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop

c0025eb8 <PIC::open(int, int, void*)>:
c0025eb8:	55                   	push   ebp
c0025eb9:	89 e5                	mov    ebp,esp
c0025ebb:	83 ec 18             	sub    esp,0x18
c0025ebe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025ec4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025ec8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ecb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ecf:	ee                   	out    dx,al
c0025ed0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025ed6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025eda:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025edd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ee1:	ee                   	out    dx,al
c0025ee2:	83 ec 0c             	sub    esp,0xc
c0025ee5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee8:	e8 5f fe ff ff       	call   c0025d4c <PIC::remap()>
c0025eed:	83 c4 10             	add    esp,0x10
c0025ef0:	b8 00 00 00 00       	mov    eax,0x0
c0025ef5:	c9                   	leave  
c0025ef6:	c3                   	ret    
c0025ef7:	90                   	nop

c0025ef8 <APICTimer::close(int, int, void*)>:
c0025ef8:	b8 00 00 00 00       	mov    eax,0x0
c0025efd:	c3                   	ret    

c0025efe <apicTimerHandler(regs*, void*)>:
c0025efe:	83 ec 0c             	sub    esp,0xc
c0025f01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f07:	99                   	cdq    
c0025f08:	52                   	push   edx
c0025f09:	50                   	push   eax
c0025f0a:	6a 00                	push   0x0
c0025f0c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f11:	e8 8e 07 00 00       	call   c00266a4 <__udivdi3>
c0025f16:	83 c4 10             	add    esp,0x10
c0025f19:	83 ec 08             	sub    esp,0x8
c0025f1c:	52                   	push   edx
c0025f1d:	50                   	push   eax
c0025f1e:	e8 44 06 ff ff       	call   c0016567 <timerHandler(unsigned long long)>
c0025f23:	83 c4 10             	add    esp,0x10
c0025f26:	90                   	nop
c0025f27:	83 c4 0c             	add    esp,0xc
c0025f2a:	c3                   	ret    
c0025f2b:	90                   	nop

c0025f2c <APICTimer::write(int)>:
c0025f2c:	53                   	push   ebx
c0025f2d:	83 ec 28             	sub    esp,0x28
c0025f30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f38:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025f3e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0025f43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f49:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f4f:	83 ec 0c             	sub    esp,0xc
c0025f52:	50                   	push   eax
c0025f53:	e8 de f4 ff ff       	call   c0025436 <APIC::getBase()>
c0025f58:	83 c4 10             	add    esp,0x10
c0025f5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025f5f:	a1 f0 de 02 c0       	mov    eax,ds:0xc002def0
c0025f64:	8b 15 f4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002def4
c0025f6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025f72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f76:	05 e0 03 00 00       	add    eax,0x3e0
c0025f7b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f85:	05 80 03 00 00       	add    eax,0x380
c0025f8a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025f90:	fb                   	sti    
c0025f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f99:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f9e:	83 d2 00             	adc    edx,0x0
c0025fa1:	89 c1                	mov    ecx,eax
c0025fa3:	89 d3                	mov    ebx,edx
c0025fa5:	a1 f0 de 02 c0       	mov    eax,ds:0xc002def0
c0025faa:	8b 15 f4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002def4
c0025fb0:	39 c8                	cmp    eax,ecx
c0025fb2:	89 d0                	mov    eax,edx
c0025fb4:	19 d8                	sbb    eax,ebx
c0025fb6:	73 02                	jae    c0025fba <APICTimer::write(int)+0x8e>
c0025fb8:	eb d7                	jmp    c0025f91 <APICTimer::write(int)+0x65>
c0025fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fbe:	05 20 03 00 00       	add    eax,0x320
c0025fc3:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fcd:	05 90 03 00 00       	add    eax,0x390
c0025fd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd4:	f7 d0                	not    eax
c0025fd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025fda:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025fde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025fe2:	ba 00 00 00 00       	mov    edx,0x0
c0025fe7:	f7 f3                	div    ebx
c0025fe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025fed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025ff1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ff7:	0d 00 00 02 00       	or     eax,0x20000
c0025ffc:	89 c2                	mov    edx,eax
c0025ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026002:	05 20 03 00 00       	add    eax,0x320
c0026007:	89 10                	mov    DWORD PTR [eax],edx
c0026009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002600d:	05 e0 03 00 00       	add    eax,0x3e0
c0026012:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002601c:	05 80 03 00 00       	add    eax,0x380
c0026021:	89 c2                	mov    edx,eax
c0026023:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026027:	89 02                	mov    DWORD PTR [edx],eax
c0026029:	90                   	nop
c002602a:	83 c4 28             	add    esp,0x28
c002602d:	5b                   	pop    ebx
c002602e:	c3                   	ret    
c002602f:	90                   	nop

c0026030 <APICTimer::open(int, int, void*)>:
c0026030:	57                   	push   edi
c0026031:	56                   	push   esi
c0026032:	53                   	push   ebx
c0026033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026037:	8b 00                	mov    eax,DWORD PTR [eax]
c0026039:	83 c0 24             	add    eax,0x24
c002603c:	8b 00                	mov    eax,DWORD PTR [eax]
c002603e:	83 ec 08             	sub    esp,0x8
c0026041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026049:	ff d0                	call   eax
c002604b:	83 c4 10             	add    esp,0x10
c002604e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0026053:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026059:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002605f:	83 ec 0c             	sub    esp,0xc
c0026062:	50                   	push   eax
c0026063:	e8 ce f3 ff ff       	call   c0025436 <APIC::getBase()>
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026075:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002607b:	0f b6 f8             	movzx  edi,al
c002607e:	89 d0                	mov    eax,edx
c0026080:	ba 00 00 00 00       	mov    edx,0x0
c0026085:	89 c1                	mov    ecx,eax
c0026087:	80 e5 ff             	and    ch,0xff
c002608a:	89 cb                	mov    ebx,ecx
c002608c:	0f b6 f2             	movzx  esi,dl
c002608f:	89 d8                	mov    eax,ebx
c0026091:	89 f2                	mov    edx,esi
c0026093:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026097:	8d 5f 08             	lea    ebx,[edi+0x8]
c002609a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002609e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260a2:	83 e0 00             	and    eax,0x0
c00260a5:	09 d0                	or     eax,edx
c00260a7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260b5:	8d 50 01             	lea    edx,[eax+0x1]
c00260b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260bc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00260c2:	0f b6 d0             	movzx  edx,al
c00260c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c9:	83 c2 08             	add    edx,0x8
c00260cc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00260d0:	0f b6 c9             	movzx  ecx,cl
c00260d3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00260d9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00260dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260e5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00260eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00260f3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00260f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00260fd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026103:	83 ec 0c             	sub    esp,0xc
c0026106:	51                   	push   ecx
c0026107:	6a 01                	push   0x1
c0026109:	68 fe 5e 02 c0       	push   0xc0025efe
c002610e:	52                   	push   edx
c002610f:	50                   	push   eax
c0026110:	e8 05 d9 fe ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026115:	83 c4 20             	add    esp,0x20
c0026118:	89 c2                	mov    edx,eax
c002611a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026124:	b8 00 00 00 00       	mov    eax,0x0
c0026129:	5b                   	pop    ebx
c002612a:	5e                   	pop    esi
c002612b:	5f                   	pop    edi
c002612c:	c3                   	ret    
c002612d:	90                   	nop

c002612e <APICTimer::APICTimer()>:
c002612e:	83 ec 0c             	sub    esp,0xc
c0026131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026135:	83 ec 08             	sub    esp,0x8
c0026138:	68 cc c5 02 c0       	push   0xc002c5cc
c002613d:	50                   	push   eax
c002613e:	e8 95 03 ff ff       	call   c00164d8 <Timer::Timer(char const*)>
c0026143:	83 c4 10             	add    esp,0x10
c0026146:	ba e0 c5 02 c0       	mov    edx,0xc002c5e0
c002614b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614f:	89 10                	mov    DWORD PTR [eax],edx
c0026151:	90                   	nop
c0026152:	83 c4 0c             	add    esp,0xc
c0026155:	c3                   	ret    

c0026156 <PIT::write(int)>:
c0026156:	83 ec 10             	sub    esp,0x10
c0026159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002615d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026161:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026167:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002616b:	a3 24 1c 03 c0       	mov    ds:0xc0031c24,eax
c0026170:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026175:	99                   	cdq    
c0026176:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002617a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002617e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026185:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002618a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002618e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026193:	ee                   	out    dx,al
c0026194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026198:	0f b6 c0             	movzx  eax,al
c002619b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00261a2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00261a6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00261aa:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00261af:	ee                   	out    dx,al
c00261b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261b4:	c1 f8 08             	sar    eax,0x8
c00261b7:	0f b6 c0             	movzx  eax,al
c00261ba:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00261c1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00261c5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00261c9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00261ce:	ee                   	out    dx,al
c00261cf:	90                   	nop
c00261d0:	83 c4 10             	add    esp,0x10
c00261d3:	c3                   	ret    

c00261d4 <pitHandler(regs*, void*)>:
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	a1 24 1c 03 c0       	mov    eax,ds:0xc0031c24
c00261dc:	99                   	cdq    
c00261dd:	52                   	push   edx
c00261de:	50                   	push   eax
c00261df:	6a 00                	push   0x0
c00261e1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261e6:	e8 b9 04 00 00       	call   c00266a4 <__udivdi3>
c00261eb:	83 c4 10             	add    esp,0x10
c00261ee:	83 ec 08             	sub    esp,0x8
c00261f1:	52                   	push   edx
c00261f2:	50                   	push   eax
c00261f3:	e8 6f 03 ff ff       	call   c0016567 <timerHandler(unsigned long long)>
c00261f8:	83 c4 10             	add    esp,0x10
c00261fb:	90                   	nop
c00261fc:	83 c4 0c             	add    esp,0xc
c00261ff:	c3                   	ret    

c0026200 <PIT::open(int, int, void*)>:
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026207:	8b 00                	mov    eax,DWORD PTR [eax]
c0026209:	83 c0 24             	add    eax,0x24
c002620c:	8b 00                	mov    eax,DWORD PTR [eax]
c002620e:	83 ec 08             	sub    esp,0x8
c0026211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026219:	ff d0                	call   eax
c002621b:	83 c4 10             	add    esp,0x10
c002621e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026222:	83 ec 0c             	sub    esp,0xc
c0026225:	6a 00                	push   0x0
c0026227:	6a 01                	push   0x1
c0026229:	68 d4 61 02 c0       	push   0xc00261d4
c002622e:	6a 00                	push   0x0
c0026230:	50                   	push   eax
c0026231:	e8 e4 d7 fe ff       	call   c0013a1a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026236:	83 c4 20             	add    esp,0x20
c0026239:	89 c2                	mov    edx,eax
c002623b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026245:	b8 00 00 00 00       	mov    eax,0x0
c002624a:	83 c4 0c             	add    esp,0xc
c002624d:	c3                   	ret    

c002624e <PIT::close(int, int, void*)>:
c002624e:	83 ec 0c             	sub    esp,0xc
c0026251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026255:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002625f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026263:	6a 01                	push   0x1
c0026265:	68 d4 61 02 c0       	push   0xc00261d4
c002626a:	6a 00                	push   0x0
c002626c:	50                   	push   eax
c002626d:	e8 f2 d7 fe ff       	call   c0013a64 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026272:	83 c4 10             	add    esp,0x10
c0026275:	b8 00 00 00 00       	mov    eax,0x0
c002627a:	83 c4 0c             	add    esp,0xc
c002627d:	c3                   	ret    

c002627e <PIT::PIT()>:
c002627e:	83 ec 0c             	sub    esp,0xc
c0026281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026285:	83 ec 08             	sub    esp,0x8
c0026288:	68 08 c6 02 c0       	push   0xc002c608
c002628d:	50                   	push   eax
c002628e:	e8 45 02 ff ff       	call   c00164d8 <Timer::Timer(char const*)>
c0026293:	83 c4 10             	add    esp,0x10
c0026296:	ba 30 c6 02 c0       	mov    edx,0xc002c630
c002629b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629f:	89 10                	mov    DWORD PTR [eax],edx
c00262a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262ab:	0f b6 d0             	movzx  edx,al
c00262ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00262b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262c3:	0f b6 d0             	movzx  edx,al
c00262c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ca:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00262cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262d9:	8d 50 01             	lea    edx,[eax+0x1]
c00262dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262e0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00262e6:	0f b6 d0             	movzx  edx,al
c00262e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ed:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00262f1:	83 e1 3f             	and    ecx,0x3f
c00262f4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00262f8:	90                   	nop
c00262f9:	83 c4 0c             	add    esp,0xc
c00262fc:	c3                   	ret    
c00262fd:	66 90                	xchg   ax,ax
c00262ff:	90                   	nop

c0026300 <avxDetect>:
c0026300:	b8 00 00 00 00       	mov    eax,0x0
c0026305:	c3                   	ret    

c0026306 <avxSave>:
c0026306:	c3                   	ret    

c0026307 <avxLoad>:
c0026307:	c3                   	ret    

c0026308 <avxInit>:
c0026308:	c3                   	ret    

c0026309 <avxClose>:
c0026309:	c3                   	ret    

c002630a <wouldSheSayYes>:
c002630a:	c3                   	ret    
c002630b:	49                   	dec    ecx
c002630c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026310:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026314:	75 20                	jne    c0026336 <sseDetect.noSSE+0x1>
c0026316:	4e                   	dec    esi
c0026317:	79 61                	jns    c002637a <x87Detect+0x14>
c0026319:	68 2e 2e 2e 00       	push   0x2e2e2e
c002631e:	66 90                	xchg   ax,ax

c0026320 <absolutelyNoChanceInHell>:
c0026320:	b8 01 00 00 00       	mov    eax,0x1
c0026325:	0f a2                	cpuid  
c0026327:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002632d:	74 06                	je     c0026335 <sseDetect.noSSE>
c002632f:	b8 01 00 00 00       	mov    eax,0x1
c0026334:	c3                   	ret    

c0026335 <sseDetect.noSSE>:
c0026335:	31 c0                	xor    eax,eax
c0026337:	c3                   	ret    

c0026338 <sseSave>:
c0026338:	0f ae 44 24 04       	fxsave [esp+0x4]
c002633d:	c3                   	ret    

c002633e <sseLoad>:
c002633e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026343:	c3                   	ret    

c0026344 <sseInit>:
c0026344:	e8 49 00 00 00       	call   c0026392 <x87Init>
c0026349:	0f 20 e0             	mov    eax,cr4
c002634c:	66 0d 00 06          	or     ax,0x600
c0026350:	0f 22 e0             	mov    cr4,eax
c0026353:	c3                   	ret    

c0026354 <sseClose>:
c0026354:	c3                   	ret    
c0026355:	66 90                	xchg   ax,ax
c0026357:	66 90                	xchg   ax,ax
c0026359:	66 90                	xchg   ax,ax
c002635b:	66 90                	xchg   ax,ax
c002635d:	66 90                	xchg   ax,ax
c002635f:	90                   	nop

c0026360 <value_37F>:
c0026360:	7f 03                	jg     c0026365 <value_37A+0x1>

c0026362 <value_37E>:
c0026362:	7e 03                	jle    c0026367 <x87Detect+0x1>

c0026364 <value_37A>:
c0026364:	7a 03                	jp     c0026369 <x87Detect+0x3>

c0026366 <x87Detect>:
c0026366:	b8 01 00 00 00       	mov    eax,0x1
c002636b:	0f a2                	cpuid  
c002636d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026373:	74 06                	je     c002637b <x87Detect.nox87>
c0026375:	b8 01 00 00 00       	mov    eax,0x1
c002637a:	c3                   	ret    

c002637b <x87Detect.nox87>:
c002637b:	b8 00 00 00 00       	mov    eax,0x0
c0026380:	c3                   	ret    

c0026381 <x87Save>:
c0026381:	55                   	push   ebp
c0026382:	89 e5                	mov    ebp,esp
c0026384:	9b dd 75 08          	fsave  [ebp+0x8]
c0026388:	c9                   	leave  
c0026389:	c3                   	ret    

c002638a <x87Load>:
c002638a:	55                   	push   ebp
c002638b:	89 e5                	mov    ebp,esp
c002638d:	dd 65 08             	frstor [ebp+0x8]
c0026390:	c9                   	leave  
c0026391:	c3                   	ret    

c0026392 <x87Init>:
c0026392:	9b db e3             	finit  
c0026395:	0f 20 c0             	mov    eax,cr0
c0026398:	66 25 fb ff          	and    ax,0xfffb
c002639c:	66 0d 22 00          	or     ax,0x22
c00263a0:	0f 22 c0             	mov    cr0,eax
c00263a3:	0f 06                	clts   
c00263a5:	d9 2d 64 63 02 c0    	fldcw  WORD PTR ds:0xc0026364
c00263ab:	c3                   	ret    

c00263ac <x87Close>:
c00263ac:	c3                   	ret    
c00263ad:	66 90                	xchg   ax,ax
c00263af:	90                   	nop

c00263b0 <__do_global_ctors_aux>:
c00263b0:	a1 a4 8f 02 c0       	mov    eax,ds:0xc0028fa4
c00263b5:	83 f8 ff             	cmp    eax,0xffffffff
c00263b8:	74 1a                	je     c00263d4 <__do_global_ctors_aux+0x24>
c00263ba:	55                   	push   ebp
c00263bb:	89 e5                	mov    ebp,esp
c00263bd:	53                   	push   ebx
c00263be:	52                   	push   edx
c00263bf:	bb a4 8f 02 c0       	mov    ebx,0xc0028fa4
c00263c4:	ff d0                	call   eax
c00263c6:	83 eb 04             	sub    ebx,0x4
c00263c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00263cb:	83 f8 ff             	cmp    eax,0xffffffff
c00263ce:	75 f4                	jne    c00263c4 <__do_global_ctors_aux+0x14>
c00263d0:	58                   	pop    eax
c00263d1:	5b                   	pop    ebx
c00263d2:	5d                   	pop    ebp
c00263d3:	c3                   	ret    
c00263d4:	c3                   	ret    
c00263d5:	66 90                	xchg   ax,ax
c00263d7:	90                   	nop

c00263d8 <__divdi3>:
c00263d8:	55                   	push   ebp
c00263d9:	57                   	push   edi
c00263da:	56                   	push   esi
c00263db:	53                   	push   ebx
c00263dc:	83 ec 1c             	sub    esp,0x1c
c00263df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00263e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00263ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00263ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00263f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00263f6:	85 db                	test   ebx,ebx
c00263f8:	0f 88 8e 00 00 00    	js     c002648c <__divdi3+0xb4>
c00263fe:	89 dd                	mov    ebp,ebx
c0026400:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026408:	89 d3                	mov    ebx,edx
c002640a:	85 d2                	test   edx,edx
c002640c:	79 0d                	jns    c002641b <__divdi3+0x43>
c002640e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026412:	f7 d8                	neg    eax
c0026414:	83 d2 00             	adc    edx,0x0
c0026417:	f7 da                	neg    edx
c0026419:	89 d3                	mov    ebx,edx
c002641b:	89 c7                	mov    edi,eax
c002641d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026420:	85 db                	test   ebx,ebx
c0026422:	75 48                	jne    c002646c <__divdi3+0x94>
c0026424:	39 ef                	cmp    edi,ebp
c0026426:	76 24                	jbe    c002644c <__divdi3+0x74>
c0026428:	89 ea                	mov    edx,ebp
c002642a:	f7 f7                	div    edi
c002642c:	89 c1                	mov    ecx,eax
c002642e:	31 f6                	xor    esi,esi
c0026430:	89 c8                	mov    eax,ecx
c0026432:	89 f2                	mov    edx,esi
c0026434:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026438:	85 c9                	test   ecx,ecx
c002643a:	74 07                	je     c0026443 <__divdi3+0x6b>
c002643c:	f7 d8                	neg    eax
c002643e:	83 d2 00             	adc    edx,0x0
c0026441:	f7 da                	neg    edx
c0026443:	83 c4 1c             	add    esp,0x1c
c0026446:	5b                   	pop    ebx
c0026447:	5e                   	pop    esi
c0026448:	5f                   	pop    edi
c0026449:	5d                   	pop    ebp
c002644a:	c3                   	ret    
c002644b:	90                   	nop
c002644c:	85 ff                	test   edi,edi
c002644e:	75 0b                	jne    c002645b <__divdi3+0x83>
c0026450:	b8 01 00 00 00       	mov    eax,0x1
c0026455:	31 d2                	xor    edx,edx
c0026457:	f7 f3                	div    ebx
c0026459:	89 c7                	mov    edi,eax
c002645b:	31 d2                	xor    edx,edx
c002645d:	89 e8                	mov    eax,ebp
c002645f:	f7 f7                	div    edi
c0026461:	89 c6                	mov    esi,eax
c0026463:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026466:	f7 f7                	div    edi
c0026468:	89 c1                	mov    ecx,eax
c002646a:	eb c4                	jmp    c0026430 <__divdi3+0x58>
c002646c:	39 eb                	cmp    ebx,ebp
c002646e:	77 3c                	ja     c00264ac <__divdi3+0xd4>
c0026470:	0f bd f3             	bsr    esi,ebx
c0026473:	83 f6 1f             	xor    esi,0x1f
c0026476:	75 40                	jne    c00264b8 <__divdi3+0xe0>
c0026478:	39 eb                	cmp    ebx,ebp
c002647a:	72 09                	jb     c0026485 <__divdi3+0xad>
c002647c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002647f:	0f 87 97 00 00 00    	ja     c002651c <__divdi3+0x144>
c0026485:	b9 01 00 00 00       	mov    ecx,0x1
c002648a:	eb a4                	jmp    c0026430 <__divdi3+0x58>
c002648c:	f7 d9                	neg    ecx
c002648e:	83 d3 00             	adc    ebx,0x0
c0026491:	f7 db                	neg    ebx
c0026493:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026496:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002649a:	89 dd                	mov    ebp,ebx
c002649c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00264a4:	e9 5f ff ff ff       	jmp    c0026408 <__divdi3+0x30>
c00264a9:	8d 76 00             	lea    esi,[esi+0x0]
c00264ac:	31 f6                	xor    esi,esi
c00264ae:	31 c9                	xor    ecx,ecx
c00264b0:	e9 7b ff ff ff       	jmp    c0026430 <__divdi3+0x58>
c00264b5:	8d 76 00             	lea    esi,[esi+0x0]
c00264b8:	b8 20 00 00 00       	mov    eax,0x20
c00264bd:	29 f0                	sub    eax,esi
c00264bf:	89 f1                	mov    ecx,esi
c00264c1:	d3 e3                	shl    ebx,cl
c00264c3:	89 fa                	mov    edx,edi
c00264c5:	88 c1                	mov    cl,al
c00264c7:	d3 ea                	shr    edx,cl
c00264c9:	09 da                	or     edx,ebx
c00264cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00264cf:	89 f1                	mov    ecx,esi
c00264d1:	d3 e7                	shl    edi,cl
c00264d3:	89 eb                	mov    ebx,ebp
c00264d5:	88 c1                	mov    cl,al
c00264d7:	d3 eb                	shr    ebx,cl
c00264d9:	89 f1                	mov    ecx,esi
c00264db:	d3 e5                	shl    ebp,cl
c00264dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00264e0:	88 c1                	mov    cl,al
c00264e2:	d3 ea                	shr    edx,cl
c00264e4:	09 d5                	or     ebp,edx
c00264e6:	89 e8                	mov    eax,ebp
c00264e8:	89 da                	mov    edx,ebx
c00264ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00264ee:	89 d3                	mov    ebx,edx
c00264f0:	89 c5                	mov    ebp,eax
c00264f2:	f7 e7                	mul    edi
c00264f4:	39 d3                	cmp    ebx,edx
c00264f6:	72 18                	jb     c0026510 <__divdi3+0x138>
c00264f8:	74 0a                	je     c0026504 <__divdi3+0x12c>
c00264fa:	89 e9                	mov    ecx,ebp
c00264fc:	31 f6                	xor    esi,esi
c00264fe:	e9 2d ff ff ff       	jmp    c0026430 <__divdi3+0x58>
c0026503:	90                   	nop
c0026504:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026507:	89 f1                	mov    ecx,esi
c0026509:	d3 e7                	shl    edi,cl
c002650b:	39 c7                	cmp    edi,eax
c002650d:	73 eb                	jae    c00264fa <__divdi3+0x122>
c002650f:	90                   	nop
c0026510:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026513:	31 f6                	xor    esi,esi
c0026515:	e9 16 ff ff ff       	jmp    c0026430 <__divdi3+0x58>
c002651a:	66 90                	xchg   ax,ax
c002651c:	31 c9                	xor    ecx,ecx
c002651e:	e9 0d ff ff ff       	jmp    c0026430 <__divdi3+0x58>
c0026523:	90                   	nop

c0026524 <__moddi3>:
c0026524:	55                   	push   ebp
c0026525:	57                   	push   edi
c0026526:	56                   	push   esi
c0026527:	53                   	push   ebx
c0026528:	83 ec 2c             	sub    esp,0x2c
c002652b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002652f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026533:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026537:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002653b:	85 db                	test   ebx,ebx
c002653d:	0f 88 85 00 00 00    	js     c00265c8 <__moddi3+0xa4>
c0026543:	89 de                	mov    esi,ebx
c0026545:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002654d:	89 d7                	mov    edi,edx
c002654f:	85 d2                	test   edx,edx
c0026551:	79 09                	jns    c002655c <__moddi3+0x38>
c0026553:	f7 d8                	neg    eax
c0026555:	83 d2 00             	adc    edx,0x0
c0026558:	f7 da                	neg    edx
c002655a:	89 d7                	mov    edi,edx
c002655c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026560:	89 cd                	mov    ebp,ecx
c0026562:	85 ff                	test   edi,edi
c0026564:	75 52                	jne    c00265b8 <__moddi3+0x94>
c0026566:	89 c3                	mov    ebx,eax
c0026568:	39 f0                	cmp    eax,esi
c002656a:	76 24                	jbe    c0026590 <__moddi3+0x6c>
c002656c:	89 c8                	mov    eax,ecx
c002656e:	89 f2                	mov    edx,esi
c0026570:	f7 f3                	div    ebx
c0026572:	89 d6                	mov    esi,edx
c0026574:	89 f0                	mov    eax,esi
c0026576:	31 d2                	xor    edx,edx
c0026578:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002657c:	85 c9                	test   ecx,ecx
c002657e:	74 07                	je     c0026587 <__moddi3+0x63>
c0026580:	f7 d8                	neg    eax
c0026582:	83 d2 00             	adc    edx,0x0
c0026585:	f7 da                	neg    edx
c0026587:	83 c4 2c             	add    esp,0x2c
c002658a:	5b                   	pop    ebx
c002658b:	5e                   	pop    esi
c002658c:	5f                   	pop    edi
c002658d:	5d                   	pop    ebp
c002658e:	c3                   	ret    
c002658f:	90                   	nop
c0026590:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026594:	85 db                	test   ebx,ebx
c0026596:	75 0d                	jne    c00265a5 <__moddi3+0x81>
c0026598:	b8 01 00 00 00       	mov    eax,0x1
c002659d:	31 d2                	xor    edx,edx
c002659f:	f7 f7                	div    edi
c00265a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265a5:	89 f0                	mov    eax,esi
c00265a7:	31 d2                	xor    edx,edx
c00265a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265ad:	f7 f7                	div    edi
c00265af:	89 e8                	mov    eax,ebp
c00265b1:	f7 f7                	div    edi
c00265b3:	89 d6                	mov    esi,edx
c00265b5:	eb bd                	jmp    c0026574 <__moddi3+0x50>
c00265b7:	90                   	nop
c00265b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00265bc:	39 f7                	cmp    edi,esi
c00265be:	76 20                	jbe    c00265e0 <__moddi3+0xbc>
c00265c0:	89 c8                	mov    eax,ecx
c00265c2:	89 f2                	mov    edx,esi
c00265c4:	eb b2                	jmp    c0026578 <__moddi3+0x54>
c00265c6:	66 90                	xchg   ax,ax
c00265c8:	f7 d9                	neg    ecx
c00265ca:	83 d3 00             	adc    ebx,0x0
c00265cd:	f7 db                	neg    ebx
c00265cf:	89 de                	mov    esi,ebx
c00265d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00265d9:	e9 6f ff ff ff       	jmp    c002654d <__moddi3+0x29>
c00265de:	66 90                	xchg   ax,ax
c00265e0:	0f bd c7             	bsr    eax,edi
c00265e3:	83 f0 1f             	xor    eax,0x1f
c00265e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00265ea:	75 24                	jne    c0026610 <__moddi3+0xec>
c00265ec:	39 f7                	cmp    edi,esi
c00265ee:	72 06                	jb     c00265f6 <__moddi3+0xd2>
c00265f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00265f4:	77 0c                	ja     c0026602 <__moddi3+0xde>
c00265f6:	89 e9                	mov    ecx,ebp
c00265f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00265fc:	19 fe                	sbb    esi,edi
c00265fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026602:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026606:	89 f2                	mov    edx,esi
c0026608:	e9 6b ff ff ff       	jmp    c0026578 <__moddi3+0x54>
c002660d:	8d 76 00             	lea    esi,[esi+0x0]
c0026610:	b8 20 00 00 00       	mov    eax,0x20
c0026615:	89 c2                	mov    edx,eax
c0026617:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002661b:	29 da                	sub    edx,ebx
c002661d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026621:	88 d9                	mov    cl,bl
c0026623:	d3 e7                	shl    edi,cl
c0026625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026629:	88 d1                	mov    cl,dl
c002662b:	d3 e8                	shr    eax,cl
c002662d:	09 c7                	or     edi,eax
c002662f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026637:	89 d8                	mov    eax,ebx
c0026639:	88 d9                	mov    cl,bl
c002663b:	d3 e7                	shl    edi,cl
c002663d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026641:	89 f3                	mov    ebx,esi
c0026643:	88 d1                	mov    cl,dl
c0026645:	d3 eb                	shr    ebx,cl
c0026647:	89 c7                	mov    edi,eax
c0026649:	88 c1                	mov    cl,al
c002664b:	d3 e6                	shl    esi,cl
c002664d:	89 e8                	mov    eax,ebp
c002664f:	88 d1                	mov    cl,dl
c0026651:	d3 e8                	shr    eax,cl
c0026653:	09 f0                	or     eax,esi
c0026655:	89 f9                	mov    ecx,edi
c0026657:	d3 e5                	shl    ebp,cl
c0026659:	89 da                	mov    edx,ebx
c002665b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002665f:	89 d3                	mov    ebx,edx
c0026661:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026665:	89 c6                	mov    esi,eax
c0026667:	89 d1                	mov    ecx,edx
c0026669:	39 d3                	cmp    ebx,edx
c002666b:	72 27                	jb     c0026694 <__moddi3+0x170>
c002666d:	74 21                	je     c0026690 <__moddi3+0x16c>
c002666f:	29 f5                	sub    ebp,esi
c0026671:	19 cb                	sbb    ebx,ecx
c0026673:	89 de                	mov    esi,ebx
c0026675:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026679:	d3 e6                	shl    esi,cl
c002667b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002667f:	89 f9                	mov    ecx,edi
c0026681:	d3 ed                	shr    ebp,cl
c0026683:	09 ee                	or     esi,ebp
c0026685:	89 f0                	mov    eax,esi
c0026687:	d3 eb                	shr    ebx,cl
c0026689:	89 da                	mov    edx,ebx
c002668b:	e9 e8 fe ff ff       	jmp    c0026578 <__moddi3+0x54>
c0026690:	39 c5                	cmp    ebp,eax
c0026692:	73 db                	jae    c002666f <__moddi3+0x14b>
c0026694:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026698:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002669c:	89 d1                	mov    ecx,edx
c002669e:	89 c6                	mov    esi,eax
c00266a0:	eb cd                	jmp    c002666f <__moddi3+0x14b>
c00266a2:	66 90                	xchg   ax,ax

c00266a4 <__udivdi3>:
c00266a4:	55                   	push   ebp
c00266a5:	57                   	push   edi
c00266a6:	56                   	push   esi
c00266a7:	53                   	push   ebx
c00266a8:	83 ec 1c             	sub    esp,0x1c
c00266ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00266af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00266b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00266b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266bb:	85 d2                	test   edx,edx
c00266bd:	75 41                	jne    c0026700 <__udivdi3+0x5c>
c00266bf:	39 f7                	cmp    edi,esi
c00266c1:	76 15                	jbe    c00266d8 <__udivdi3+0x34>
c00266c3:	89 e8                	mov    eax,ebp
c00266c5:	89 f2                	mov    edx,esi
c00266c7:	f7 f7                	div    edi
c00266c9:	31 db                	xor    ebx,ebx
c00266cb:	89 da                	mov    edx,ebx
c00266cd:	83 c4 1c             	add    esp,0x1c
c00266d0:	5b                   	pop    ebx
c00266d1:	5e                   	pop    esi
c00266d2:	5f                   	pop    edi
c00266d3:	5d                   	pop    ebp
c00266d4:	c3                   	ret    
c00266d5:	8d 76 00             	lea    esi,[esi+0x0]
c00266d8:	89 f9                	mov    ecx,edi
c00266da:	85 ff                	test   edi,edi
c00266dc:	75 0b                	jne    c00266e9 <__udivdi3+0x45>
c00266de:	b8 01 00 00 00       	mov    eax,0x1
c00266e3:	31 d2                	xor    edx,edx
c00266e5:	f7 f7                	div    edi
c00266e7:	89 c1                	mov    ecx,eax
c00266e9:	31 d2                	xor    edx,edx
c00266eb:	89 f0                	mov    eax,esi
c00266ed:	f7 f1                	div    ecx
c00266ef:	89 c3                	mov    ebx,eax
c00266f1:	89 e8                	mov    eax,ebp
c00266f3:	f7 f1                	div    ecx
c00266f5:	89 da                	mov    edx,ebx
c00266f7:	83 c4 1c             	add    esp,0x1c
c00266fa:	5b                   	pop    ebx
c00266fb:	5e                   	pop    esi
c00266fc:	5f                   	pop    edi
c00266fd:	5d                   	pop    ebp
c00266fe:	c3                   	ret    
c00266ff:	90                   	nop
c0026700:	39 f2                	cmp    edx,esi
c0026702:	77 1c                	ja     c0026720 <__udivdi3+0x7c>
c0026704:	0f bd da             	bsr    ebx,edx
c0026707:	83 f3 1f             	xor    ebx,0x1f
c002670a:	75 24                	jne    c0026730 <__udivdi3+0x8c>
c002670c:	39 f2                	cmp    edx,esi
c002670e:	72 08                	jb     c0026718 <__udivdi3+0x74>
c0026710:	39 ef                	cmp    edi,ebp
c0026712:	0f 87 84 00 00 00    	ja     c002679c <__udivdi3+0xf8>
c0026718:	b8 01 00 00 00       	mov    eax,0x1
c002671d:	eb ac                	jmp    c00266cb <__udivdi3+0x27>
c002671f:	90                   	nop
c0026720:	31 db                	xor    ebx,ebx
c0026722:	31 c0                	xor    eax,eax
c0026724:	89 da                	mov    edx,ebx
c0026726:	83 c4 1c             	add    esp,0x1c
c0026729:	5b                   	pop    ebx
c002672a:	5e                   	pop    esi
c002672b:	5f                   	pop    edi
c002672c:	5d                   	pop    ebp
c002672d:	c3                   	ret    
c002672e:	66 90                	xchg   ax,ax
c0026730:	b8 20 00 00 00       	mov    eax,0x20
c0026735:	29 d8                	sub    eax,ebx
c0026737:	88 d9                	mov    cl,bl
c0026739:	d3 e2                	shl    edx,cl
c002673b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002673f:	89 fa                	mov    edx,edi
c0026741:	88 c1                	mov    cl,al
c0026743:	d3 ea                	shr    edx,cl
c0026745:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026749:	09 d1                	or     ecx,edx
c002674b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002674f:	88 d9                	mov    cl,bl
c0026751:	d3 e7                	shl    edi,cl
c0026753:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026757:	89 f7                	mov    edi,esi
c0026759:	88 c1                	mov    cl,al
c002675b:	d3 ef                	shr    edi,cl
c002675d:	88 d9                	mov    cl,bl
c002675f:	d3 e6                	shl    esi,cl
c0026761:	89 ea                	mov    edx,ebp
c0026763:	88 c1                	mov    cl,al
c0026765:	d3 ea                	shr    edx,cl
c0026767:	09 d6                	or     esi,edx
c0026769:	89 f0                	mov    eax,esi
c002676b:	89 fa                	mov    edx,edi
c002676d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026771:	89 d7                	mov    edi,edx
c0026773:	89 c6                	mov    esi,eax
c0026775:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026779:	39 d7                	cmp    edi,edx
c002677b:	72 13                	jb     c0026790 <__udivdi3+0xec>
c002677d:	74 09                	je     c0026788 <__udivdi3+0xe4>
c002677f:	89 f0                	mov    eax,esi
c0026781:	31 db                	xor    ebx,ebx
c0026783:	e9 43 ff ff ff       	jmp    c00266cb <__udivdi3+0x27>
c0026788:	88 d9                	mov    cl,bl
c002678a:	d3 e5                	shl    ebp,cl
c002678c:	39 c5                	cmp    ebp,eax
c002678e:	73 ef                	jae    c002677f <__udivdi3+0xdb>
c0026790:	8d 46 ff             	lea    eax,[esi-0x1]
c0026793:	31 db                	xor    ebx,ebx
c0026795:	e9 31 ff ff ff       	jmp    c00266cb <__udivdi3+0x27>
c002679a:	66 90                	xchg   ax,ax
c002679c:	31 c0                	xor    eax,eax
c002679e:	e9 28 ff ff ff       	jmp    c00266cb <__udivdi3+0x27>
c00267a3:	90                   	nop

c00267a4 <__umoddi3>:
c00267a4:	55                   	push   ebp
c00267a5:	57                   	push   edi
c00267a6:	56                   	push   esi
c00267a7:	53                   	push   ebx
c00267a8:	83 ec 1c             	sub    esp,0x1c
c00267ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00267af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00267bb:	89 da                	mov    edx,ebx
c00267bd:	85 c0                	test   eax,eax
c00267bf:	75 37                	jne    c00267f8 <__umoddi3+0x54>
c00267c1:	39 df                	cmp    edi,ebx
c00267c3:	76 13                	jbe    c00267d8 <__umoddi3+0x34>
c00267c5:	89 f0                	mov    eax,esi
c00267c7:	f7 f7                	div    edi
c00267c9:	89 d0                	mov    eax,edx
c00267cb:	31 d2                	xor    edx,edx
c00267cd:	83 c4 1c             	add    esp,0x1c
c00267d0:	5b                   	pop    ebx
c00267d1:	5e                   	pop    esi
c00267d2:	5f                   	pop    edi
c00267d3:	5d                   	pop    ebp
c00267d4:	c3                   	ret    
c00267d5:	8d 76 00             	lea    esi,[esi+0x0]
c00267d8:	89 fd                	mov    ebp,edi
c00267da:	85 ff                	test   edi,edi
c00267dc:	75 0b                	jne    c00267e9 <__umoddi3+0x45>
c00267de:	b8 01 00 00 00       	mov    eax,0x1
c00267e3:	31 d2                	xor    edx,edx
c00267e5:	f7 f7                	div    edi
c00267e7:	89 c5                	mov    ebp,eax
c00267e9:	89 d8                	mov    eax,ebx
c00267eb:	31 d2                	xor    edx,edx
c00267ed:	f7 f5                	div    ebp
c00267ef:	89 f0                	mov    eax,esi
c00267f1:	f7 f5                	div    ebp
c00267f3:	89 d0                	mov    eax,edx
c00267f5:	eb d4                	jmp    c00267cb <__umoddi3+0x27>
c00267f7:	90                   	nop
c00267f8:	89 f1                	mov    ecx,esi
c00267fa:	39 d8                	cmp    eax,ebx
c00267fc:	76 0a                	jbe    c0026808 <__umoddi3+0x64>
c00267fe:	89 f0                	mov    eax,esi
c0026800:	83 c4 1c             	add    esp,0x1c
c0026803:	5b                   	pop    ebx
c0026804:	5e                   	pop    esi
c0026805:	5f                   	pop    edi
c0026806:	5d                   	pop    ebp
c0026807:	c3                   	ret    
c0026808:	0f bd e8             	bsr    ebp,eax
c002680b:	83 f5 1f             	xor    ebp,0x1f
c002680e:	75 1c                	jne    c002682c <__umoddi3+0x88>
c0026810:	39 d8                	cmp    eax,ebx
c0026812:	72 04                	jb     c0026818 <__umoddi3+0x74>
c0026814:	39 f7                	cmp    edi,esi
c0026816:	77 08                	ja     c0026820 <__umoddi3+0x7c>
c0026818:	89 da                	mov    edx,ebx
c002681a:	29 fe                	sub    esi,edi
c002681c:	19 c2                	sbb    edx,eax
c002681e:	89 f1                	mov    ecx,esi
c0026820:	89 c8                	mov    eax,ecx
c0026822:	83 c4 1c             	add    esp,0x1c
c0026825:	5b                   	pop    ebx
c0026826:	5e                   	pop    esi
c0026827:	5f                   	pop    edi
c0026828:	5d                   	pop    ebp
c0026829:	c3                   	ret    
c002682a:	66 90                	xchg   ax,ax
c002682c:	ba 20 00 00 00       	mov    edx,0x20
c0026831:	29 ea                	sub    edx,ebp
c0026833:	89 e9                	mov    ecx,ebp
c0026835:	d3 e0                	shl    eax,cl
c0026837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002683b:	89 f8                	mov    eax,edi
c002683d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026841:	88 d1                	mov    cl,dl
c0026843:	d3 e8                	shr    eax,cl
c0026845:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026849:	09 c1                	or     ecx,eax
c002684b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002684f:	89 e9                	mov    ecx,ebp
c0026851:	d3 e7                	shl    edi,cl
c0026853:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026857:	89 d8                	mov    eax,ebx
c0026859:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002685d:	88 d1                	mov    cl,dl
c002685f:	d3 e8                	shr    eax,cl
c0026861:	89 c7                	mov    edi,eax
c0026863:	89 e9                	mov    ecx,ebp
c0026865:	d3 e3                	shl    ebx,cl
c0026867:	89 f0                	mov    eax,esi
c0026869:	88 d1                	mov    cl,dl
c002686b:	d3 e8                	shr    eax,cl
c002686d:	09 d8                	or     eax,ebx
c002686f:	89 e9                	mov    ecx,ebp
c0026871:	d3 e6                	shl    esi,cl
c0026873:	89 f3                	mov    ebx,esi
c0026875:	89 fa                	mov    edx,edi
c0026877:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002687b:	89 d1                	mov    ecx,edx
c002687d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026881:	89 c6                	mov    esi,eax
c0026883:	89 d7                	mov    edi,edx
c0026885:	39 d1                	cmp    ecx,edx
c0026887:	72 27                	jb     c00268b0 <__umoddi3+0x10c>
c0026889:	74 21                	je     c00268ac <__umoddi3+0x108>
c002688b:	89 ca                	mov    edx,ecx
c002688d:	29 f3                	sub    ebx,esi
c002688f:	19 fa                	sbb    edx,edi
c0026891:	89 d0                	mov    eax,edx
c0026893:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026897:	d3 e0                	shl    eax,cl
c0026899:	89 e9                	mov    ecx,ebp
c002689b:	d3 eb                	shr    ebx,cl
c002689d:	09 d8                	or     eax,ebx
c002689f:	d3 ea                	shr    edx,cl
c00268a1:	83 c4 1c             	add    esp,0x1c
c00268a4:	5b                   	pop    ebx
c00268a5:	5e                   	pop    esi
c00268a6:	5f                   	pop    edi
c00268a7:	5d                   	pop    ebp
c00268a8:	c3                   	ret    
c00268a9:	8d 76 00             	lea    esi,[esi+0x0]
c00268ac:	39 c3                	cmp    ebx,eax
c00268ae:	73 db                	jae    c002688b <__umoddi3+0xe7>
c00268b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00268b8:	89 d7                	mov    edi,edx
c00268ba:	89 c6                	mov    esi,eax
c00268bc:	eb cd                	jmp    c002688b <__umoddi3+0xe7>

c00268be <__addsf3>:
c00268be:	55                   	push   ebp
c00268bf:	89 e5                	mov    ebp,esp
c00268c1:	57                   	push   edi
c00268c2:	56                   	push   esi
c00268c3:	53                   	push   ebx
c00268c4:	83 ec 08             	sub    esp,0x8
c00268c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268ca:	89 fa                	mov    edx,edi
c00268cc:	89 f8                	mov    eax,edi
c00268ce:	c1 f8 17             	sar    eax,0x17
c00268d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00268d4:	c1 e2 08             	shl    edx,0x8
c00268d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00268dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00268e0:	89 de                	mov    esi,ebx
c00268e2:	c1 fe 17             	sar    esi,0x17
c00268e5:	c1 e3 08             	shl    ebx,0x8
c00268e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00268ee:	31 f0                	xor    eax,esi
c00268f0:	0f 88 3b 01 00 00    	js     c0026a31 <__addsf3+0x173>
c00268f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00268f9:	29 f1                	sub    ecx,esi
c00268fb:	85 c9                	test   ecx,ecx
c00268fd:	7e 54                	jle    c0026953 <__addsf3+0x95>
c00268ff:	89 f0                	mov    eax,esi
c0026901:	84 c0                	test   al,al
c0026903:	75 10                	jne    c0026915 <__addsf3+0x57>
c0026905:	85 db                	test   ebx,ebx
c0026907:	0f 84 aa 02 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c002690d:	49                   	dec    ecx
c002690e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026911:	74 38                	je     c002694b <__addsf3+0x8d>
c0026913:	eb 13                	jmp    c0026928 <__addsf3+0x6a>
c0026915:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026918:	f7 d0                	not    eax
c002691a:	84 c0                	test   al,al
c002691c:	0f 84 95 02 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026922:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026928:	83 f9 1f             	cmp    ecx,0x1f
c002692b:	0f 8f 86 02 00 00    	jg     c0026bb7 <__addsf3+0x2f9>
c0026931:	89 de                	mov    esi,ebx
c0026933:	d3 ee                	shr    esi,cl
c0026935:	b8 20 00 00 00       	mov    eax,0x20
c002693a:	29 c8                	sub    eax,ecx
c002693c:	89 c1                	mov    ecx,eax
c002693e:	d3 e3                	shl    ebx,cl
c0026940:	31 c0                	xor    eax,eax
c0026942:	85 db                	test   ebx,ebx
c0026944:	0f 95 c0             	setne  al
c0026947:	09 f0                	or     eax,esi
c0026949:	01 d0                	add    eax,edx
c002694b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002694e:	e9 b6 00 00 00       	jmp    c0026a09 <__addsf3+0x14b>
c0026953:	74 5c                	je     c00269b1 <__addsf3+0xf3>
c0026955:	89 f1                	mov    ecx,esi
c0026957:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002695a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002695d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026961:	75 14                	jne    c0026977 <__addsf3+0xb9>
c0026963:	85 d2                	test   edx,edx
c0026965:	0f 84 4c 02 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c002696b:	49                   	dec    ecx
c002696c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002696f:	0f 84 94 00 00 00    	je     c0026a09 <__addsf3+0x14b>
c0026975:	eb 12                	jmp    c0026989 <__addsf3+0xcb>
c0026977:	89 f0                	mov    eax,esi
c0026979:	f7 d0                	not    eax
c002697b:	84 c0                	test   al,al
c002697d:	0f 84 34 02 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026983:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026989:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002698c:	83 f9 1f             	cmp    ecx,0x1f
c002698f:	0f 8f 22 02 00 00    	jg     c0026bb7 <__addsf3+0x2f9>
c0026995:	89 d7                	mov    edi,edx
c0026997:	d3 ef                	shr    edi,cl
c0026999:	b8 20 00 00 00       	mov    eax,0x20
c002699e:	29 c8                	sub    eax,ecx
c00269a0:	89 c1                	mov    ecx,eax
c00269a2:	d3 e2                	shl    edx,cl
c00269a4:	31 c0                	xor    eax,eax
c00269a6:	85 d2                	test   edx,edx
c00269a8:	0f 95 c0             	setne  al
c00269ab:	09 f8                	or     eax,edi
c00269ad:	01 d8                	add    eax,ebx
c00269af:	eb 58                	jmp    c0026a09 <__addsf3+0x14b>
c00269b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269b4:	8d 70 01             	lea    esi,[eax+0x1]
c00269b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00269bd:	75 32                	jne    c00269f1 <__addsf3+0x133>
c00269bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269c3:	75 1f                	jne    c00269e4 <__addsf3+0x126>
c00269c5:	85 d2                	test   edx,edx
c00269c7:	0f 84 e0 01 00 00    	je     c0026bad <__addsf3+0x2ef>
c00269cd:	85 db                	test   ebx,ebx
c00269cf:	0f 84 e2 01 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c00269d5:	89 d0                	mov    eax,edx
c00269d7:	01 d8                	add    eax,ebx
c00269d9:	0f 89 a9 01 00 00    	jns    c0026b88 <__addsf3+0x2ca>
c00269df:	e9 9d 01 00 00       	jmp    c0026b81 <__addsf3+0x2c3>
c00269e4:	85 d2                	test   edx,edx
c00269e6:	0f 85 cb 01 00 00    	jne    c0026bb7 <__addsf3+0x2f9>
c00269ec:	e9 bc 01 00 00       	jmp    c0026bad <__addsf3+0x2ef>
c00269f1:	31 c0                	xor    eax,eax
c00269f3:	89 f1                	mov    ecx,esi
c00269f5:	f7 d1                	not    ecx
c00269f7:	84 c9                	test   cl,cl
c00269f9:	0f 84 90 01 00 00    	je     c0026b8f <__addsf3+0x2d1>
c00269ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a02:	d1 e8                	shr    eax,1
c0026a04:	e9 86 01 00 00       	jmp    c0026b8f <__addsf3+0x2d1>
c0026a09:	85 c0                	test   eax,eax
c0026a0b:	0f 89 7e 01 00 00    	jns    c0026b8f <__addsf3+0x2d1>
c0026a11:	46                   	inc    esi
c0026a12:	89 f2                	mov    edx,esi
c0026a14:	f7 d2                	not    edx
c0026a16:	84 d2                	test   dl,dl
c0026a18:	0f 84 6f 01 00 00    	je     c0026b8d <__addsf3+0x2cf>
c0026a1e:	89 c2                	mov    edx,eax
c0026a20:	83 e2 01             	and    edx,0x1
c0026a23:	d1 e8                	shr    eax,1
c0026a25:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a2a:	09 d0                	or     eax,edx
c0026a2c:	e9 5e 01 00 00       	jmp    c0026b8f <__addsf3+0x2d1>
c0026a31:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026a35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a38:	89 f0                	mov    eax,esi
c0026a3a:	0f b6 c0             	movzx  eax,al
c0026a3d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a40:	29 c1                	sub    ecx,eax
c0026a42:	85 c9                	test   ecx,ecx
c0026a44:	7e 55                	jle    c0026a9b <__addsf3+0x1dd>
c0026a46:	85 c0                	test   eax,eax
c0026a48:	75 11                	jne    c0026a5b <__addsf3+0x19d>
c0026a4a:	85 db                	test   ebx,ebx
c0026a4c:	0f 84 65 01 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026a52:	49                   	dec    ecx
c0026a53:	75 19                	jne    c0026a6e <__addsf3+0x1b0>
c0026a55:	89 d0                	mov    eax,edx
c0026a57:	29 d8                	sub    eax,ebx
c0026a59:	eb 38                	jmp    c0026a93 <__addsf3+0x1d5>
c0026a5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a5e:	f7 d0                	not    eax
c0026a60:	84 c0                	test   al,al
c0026a62:	0f 84 4f 01 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026a68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a6e:	83 f9 1f             	cmp    ecx,0x1f
c0026a71:	0f 8f 40 01 00 00    	jg     c0026bb7 <__addsf3+0x2f9>
c0026a77:	89 de                	mov    esi,ebx
c0026a79:	d3 ee                	shr    esi,cl
c0026a7b:	b8 20 00 00 00       	mov    eax,0x20
c0026a80:	29 c8                	sub    eax,ecx
c0026a82:	89 c1                	mov    ecx,eax
c0026a84:	d3 e3                	shl    ebx,cl
c0026a86:	31 c0                	xor    eax,eax
c0026a88:	85 db                	test   ebx,ebx
c0026a8a:	0f 95 c0             	setne  al
c0026a8d:	09 f0                	or     eax,esi
c0026a8f:	29 c2                	sub    edx,eax
c0026a91:	89 d0                	mov    eax,edx
c0026a93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a96:	e9 af 00 00 00       	jmp    c0026b4a <__addsf3+0x28c>
c0026a9b:	74 5c                	je     c0026af9 <__addsf3+0x23b>
c0026a9d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026aa0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026aa3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026aa7:	75 14                	jne    c0026abd <__addsf3+0x1ff>
c0026aa9:	85 d2                	test   edx,edx
c0026aab:	0f 84 06 01 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026ab1:	48                   	dec    eax
c0026ab2:	75 1b                	jne    c0026acf <__addsf3+0x211>
c0026ab4:	89 d8                	mov    eax,ebx
c0026ab6:	29 d0                	sub    eax,edx
c0026ab8:	e9 8d 00 00 00       	jmp    c0026b4a <__addsf3+0x28c>
c0026abd:	89 f1                	mov    ecx,esi
c0026abf:	f7 d1                	not    ecx
c0026ac1:	84 c9                	test   cl,cl
c0026ac3:	0f 84 ee 00 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026ac9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026acf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ad2:	83 f8 1f             	cmp    eax,0x1f
c0026ad5:	0f 8f dc 00 00 00    	jg     c0026bb7 <__addsf3+0x2f9>
c0026adb:	89 d7                	mov    edi,edx
c0026add:	88 c1                	mov    cl,al
c0026adf:	d3 ef                	shr    edi,cl
c0026ae1:	b9 20 00 00 00       	mov    ecx,0x20
c0026ae6:	29 c1                	sub    ecx,eax
c0026ae8:	d3 e2                	shl    edx,cl
c0026aea:	31 c0                	xor    eax,eax
c0026aec:	85 d2                	test   edx,edx
c0026aee:	0f 95 c0             	setne  al
c0026af1:	09 f8                	or     eax,edi
c0026af3:	29 c3                	sub    ebx,eax
c0026af5:	89 d8                	mov    eax,ebx
c0026af7:	eb 51                	jmp    c0026b4a <__addsf3+0x28c>
c0026af9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026afc:	40                   	inc    eax
c0026afd:	a8 fe                	test   al,0xfe
c0026aff:	75 3d                	jne    c0026b3e <__addsf3+0x280>
c0026b01:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b05:	0f 85 a7 00 00 00    	jne    c0026bb2 <__addsf3+0x2f4>
c0026b0b:	85 d2                	test   edx,edx
c0026b0d:	75 12                	jne    c0026b21 <__addsf3+0x263>
c0026b0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b12:	85 db                	test   ebx,ebx
c0026b14:	0f 85 9d 00 00 00    	jne    c0026bb7 <__addsf3+0x2f9>
c0026b1a:	31 ff                	xor    edi,edi
c0026b1c:	e9 96 00 00 00       	jmp    c0026bb7 <__addsf3+0x2f9>
c0026b21:	85 db                	test   ebx,ebx
c0026b23:	0f 84 8e 00 00 00    	je     c0026bb7 <__addsf3+0x2f9>
c0026b29:	89 d0                	mov    eax,edx
c0026b2b:	29 d8                	sub    eax,ebx
c0026b2d:	79 06                	jns    c0026b35 <__addsf3+0x277>
c0026b2f:	89 d8                	mov    eax,ebx
c0026b31:	29 d0                	sub    eax,edx
c0026b33:	eb 5a                	jmp    c0026b8f <__addsf3+0x2d1>
c0026b35:	bf 00 00 00 00       	mov    edi,0x0
c0026b3a:	74 7b                	je     c0026bb7 <__addsf3+0x2f9>
c0026b3c:	eb 4a                	jmp    c0026b88 <__addsf3+0x2ca>
c0026b3e:	89 d0                	mov    eax,edx
c0026b40:	29 d8                	sub    eax,ebx
c0026b42:	79 12                	jns    c0026b56 <__addsf3+0x298>
c0026b44:	89 d8                	mov    eax,ebx
c0026b46:	29 d0                	sub    eax,edx
c0026b48:	eb 09                	jmp    c0026b53 <__addsf3+0x295>
c0026b4a:	85 c0                	test   eax,eax
c0026b4c:	79 41                	jns    c0026b8f <__addsf3+0x2d1>
c0026b4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b53:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026b56:	31 f6                	xor    esi,esi
c0026b58:	85 c0                	test   eax,eax
c0026b5a:	74 33                	je     c0026b8f <__addsf3+0x2d1>
c0026b5c:	0f bd c8             	bsr    ecx,eax
c0026b5f:	83 f1 1f             	xor    ecx,0x1f
c0026b62:	d3 e0                	shl    eax,cl
c0026b64:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026b68:	39 ca                	cmp    edx,ecx
c0026b6a:	7f 10                	jg     c0026b7c <__addsf3+0x2be>
c0026b6c:	29 d1                	sub    ecx,edx
c0026b6e:	41                   	inc    ecx
c0026b6f:	d3 e8                	shr    eax,cl
c0026b71:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b74:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026b7a:	eb 13                	jmp    c0026b8f <__addsf3+0x2d1>
c0026b7c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b7f:	29 ce                	sub    esi,ecx
c0026b81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b86:	eb 07                	jmp    c0026b8f <__addsf3+0x2d1>
c0026b88:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b8b:	eb 02                	jmp    c0026b8f <__addsf3+0x2d1>
c0026b8d:	31 c0                	xor    eax,eax
c0026b8f:	89 c2                	mov    edx,eax
c0026b91:	c1 ea 08             	shr    edx,0x8
c0026b94:	a8 7f                	test   al,0x7f
c0026b96:	0f 95 c1             	setne  cl
c0026b99:	09 d1                	or     ecx,edx
c0026b9b:	83 e1 01             	and    ecx,0x1
c0026b9e:	c1 e8 07             	shr    eax,0x7
c0026ba1:	21 c8                	and    eax,ecx
c0026ba3:	c1 e6 17             	shl    esi,0x17
c0026ba6:	09 d6                	or     esi,edx
c0026ba8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026bab:	eb 0a                	jmp    c0026bb7 <__addsf3+0x2f9>
c0026bad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bb0:	eb 05                	jmp    c0026bb7 <__addsf3+0x2f9>
c0026bb2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026bb7:	89 f8                	mov    eax,edi
c0026bb9:	5a                   	pop    edx
c0026bba:	59                   	pop    ecx
c0026bbb:	5b                   	pop    ebx
c0026bbc:	5e                   	pop    esi
c0026bbd:	5f                   	pop    edi
c0026bbe:	5d                   	pop    ebp
c0026bbf:	c3                   	ret    

c0026bc0 <__subsf3>:
c0026bc0:	55                   	push   ebp
c0026bc1:	89 e5                	mov    ebp,esp
c0026bc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bc6:	05 00 00 00 80       	add    eax,0x80000000
c0026bcb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026bce:	5d                   	pop    ebp
c0026bcf:	e9 ea fc ff ff       	jmp    c00268be <__addsf3>

c0026bd4 <__negsf2>:
c0026bd4:	55                   	push   ebp
c0026bd5:	89 e5                	mov    ebp,esp
c0026bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026bda:	05 00 00 00 80       	add    eax,0x80000000
c0026bdf:	5d                   	pop    ebp
c0026be0:	c3                   	ret    

c0026be1 <__mulsf3>:
c0026be1:	55                   	push   ebp
c0026be2:	89 e5                	mov    ebp,esp
c0026be4:	57                   	push   edi
c0026be5:	56                   	push   esi
c0026be6:	53                   	push   ebx
c0026be7:	83 ec 1c             	sub    esp,0x1c
c0026bea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026bed:	89 f0                	mov    eax,esi
c0026bef:	89 f1                	mov    ecx,esi
c0026bf1:	c1 f9 17             	sar    ecx,0x17
c0026bf4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026bf7:	c1 e0 08             	shl    eax,0x8
c0026bfa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026bff:	89 c1                	mov    ecx,eax
c0026c01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c04:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c07:	89 c7                	mov    edi,eax
c0026c09:	c1 ff 17             	sar    edi,0x17
c0026c0c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c10:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c13:	89 f8                	mov    eax,edi
c0026c15:	0f b6 c0             	movzx  eax,al
c0026c18:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c1b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c1f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c22:	42                   	inc    edx
c0026c23:	80 e2 fe             	and    dl,0xfe
c0026c26:	75 7b                	jne    c0026ca3 <__mulsf3+0xc2>
c0026c28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c2c:	74 54                	je     c0026c82 <__mulsf3+0xa1>
c0026c2e:	85 c9                	test   ecx,ecx
c0026c30:	0f 85 64 01 00 00    	jne    c0026d9a <__mulsf3+0x1b9>
c0026c36:	8d 57 01             	lea    edx,[edi+0x1]
c0026c39:	80 e2 fe             	and    dl,0xfe
c0026c3c:	75 1f                	jne    c0026c5d <__mulsf3+0x7c>
c0026c3e:	85 c0                	test   eax,eax
c0026c40:	b8 00 00 00 00       	mov    eax,0x0
c0026c45:	74 29                	je     c0026c70 <__mulsf3+0x8f>
c0026c47:	53                   	push   ebx
c0026c48:	53                   	push   ebx
c0026c49:	50                   	push   eax
c0026c4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c4d:	e8 96 05 00 00       	call   c00271e8 <__nesf2>
c0026c52:	83 c4 10             	add    esp,0x10
c0026c55:	85 c0                	test   eax,eax
c0026c57:	0f 85 3a 01 00 00    	jne    c0026d97 <__mulsf3+0x1b6>
c0026c5d:	85 ff                	test   edi,edi
c0026c5f:	0f 89 35 01 00 00    	jns    c0026d9a <__mulsf3+0x1b9>
c0026c65:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026c6b:	e9 2a 01 00 00       	jmp    c0026d9a <__mulsf3+0x1b9>
c0026c70:	51                   	push   ecx
c0026c71:	51                   	push   ecx
c0026c72:	50                   	push   eax
c0026c73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c76:	e8 6d 05 00 00       	call   c00271e8 <__nesf2>
c0026c7b:	83 c4 10             	add    esp,0x10
c0026c7e:	85 c0                	test   eax,eax
c0026c80:	eb 15                	jmp    c0026c97 <__mulsf3+0xb6>
c0026c82:	85 c9                	test   ecx,ecx
c0026c84:	74 0b                	je     c0026c91 <__mulsf3+0xb0>
c0026c86:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026c89:	01 c9                	add    ecx,ecx
c0026c8b:	78 16                	js     c0026ca3 <__mulsf3+0xc2>
c0026c8d:	89 d3                	mov    ebx,edx
c0026c8f:	eb f5                	jmp    c0026c86 <__mulsf3+0xa5>
c0026c91:	89 f8                	mov    eax,edi
c0026c93:	f7 d0                	not    eax
c0026c95:	84 c0                	test   al,al
c0026c97:	75 c4                	jne    c0026c5d <__mulsf3+0x7c>
c0026c99:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026c9e:	e9 f7 00 00 00       	jmp    c0026d9a <__mulsf3+0x1b9>
c0026ca3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ca6:	c1 e6 08             	shl    esi,0x8
c0026ca9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026caf:	8d 57 01             	lea    edx,[edi+0x1]
c0026cb2:	80 e2 fe             	and    dl,0xfe
c0026cb5:	75 63                	jne    c0026d1a <__mulsf3+0x139>
c0026cb7:	85 c0                	test   eax,eax
c0026cb9:	74 2f                	je     c0026cea <__mulsf3+0x109>
c0026cbb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026cbf:	0f 89 d2 00 00 00    	jns    c0026d97 <__mulsf3+0x1b6>
c0026cc5:	52                   	push   edx
c0026cc6:	52                   	push   edx
c0026cc7:	6a 00                	push   0x0
c0026cc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ccc:	e8 dc 04 00 00       	call   c00271ad <__eqsf2>
c0026cd1:	83 c4 10             	add    esp,0x10
c0026cd4:	85 c0                	test   eax,eax
c0026cd6:	0f 85 bb 00 00 00    	jne    c0026d97 <__mulsf3+0x1b6>
c0026cdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cdf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ce5:	e9 b0 00 00 00       	jmp    c0026d9a <__mulsf3+0x1b9>
c0026cea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ced:	50                   	push   eax
c0026cee:	50                   	push   eax
c0026cef:	6a 00                	push   0x0
c0026cf1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cf4:	e8 b4 04 00 00       	call   c00271ad <__eqsf2>
c0026cf9:	83 c4 10             	add    esp,0x10
c0026cfc:	85 c0                	test   eax,eax
c0026cfe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d01:	75 0c                	jne    c0026d0f <__mulsf3+0x12e>
c0026d03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d07:	0f 89 8a 00 00 00    	jns    c0026d97 <__mulsf3+0x1b6>
c0026d0d:	eb cd                	jmp    c0026cdc <__mulsf3+0xfb>
c0026d0f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d12:	01 f6                	add    esi,esi
c0026d14:	78 04                	js     c0026d1a <__mulsf3+0x139>
c0026d16:	89 c3                	mov    ebx,eax
c0026d18:	eb f5                	jmp    c0026d0f <__mulsf3+0x12e>
c0026d1a:	89 c8                	mov    eax,ecx
c0026d1c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d21:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d27:	f7 e6                	mul    esi
c0026d29:	85 c0                	test   eax,eax
c0026d2b:	0f 95 c0             	setne  al
c0026d2e:	0f b6 c0             	movzx  eax,al
c0026d31:	09 c2                	or     edx,eax
c0026d33:	78 03                	js     c0026d38 <__mulsf3+0x157>
c0026d35:	01 d2                	add    edx,edx
c0026d37:	4b                   	dec    ebx
c0026d38:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026d3e:	7f 22                	jg     c0026d62 <__mulsf3+0x181>
c0026d40:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d46:	85 db                	test   ebx,ebx
c0026d48:	7f 23                	jg     c0026d6d <__mulsf3+0x18c>
c0026d4a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026d4d:	7c 1a                	jl     c0026d69 <__mulsf3+0x188>
c0026d4f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d55:	b9 01 00 00 00       	mov    ecx,0x1
c0026d5a:	29 d9                	sub    ecx,ebx
c0026d5c:	d3 ea                	shr    edx,cl
c0026d5e:	31 db                	xor    ebx,ebx
c0026d60:	eb 0b                	jmp    c0026d6d <__mulsf3+0x18c>
c0026d62:	bb ff 00 00 00       	mov    ebx,0xff
c0026d67:	eb 02                	jmp    c0026d6b <__mulsf3+0x18a>
c0026d69:	31 db                	xor    ebx,ebx
c0026d6b:	31 d2                	xor    edx,edx
c0026d6d:	89 d0                	mov    eax,edx
c0026d6f:	c1 e8 08             	shr    eax,0x8
c0026d72:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026d75:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026d7b:	09 fb                	or     ebx,edi
c0026d7d:	c1 e3 17             	shl    ebx,0x17
c0026d80:	09 c3                	or     ebx,eax
c0026d82:	f6 c2 7f             	test   dl,0x7f
c0026d85:	0f 95 c1             	setne  cl
c0026d88:	09 c8                	or     eax,ecx
c0026d8a:	83 e0 01             	and    eax,0x1
c0026d8d:	c1 ea 07             	shr    edx,0x7
c0026d90:	21 c2                	and    edx,eax
c0026d92:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026d95:	eb 03                	jmp    c0026d9a <__mulsf3+0x1b9>
c0026d97:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026d9a:	89 f0                	mov    eax,esi
c0026d9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d9f:	5b                   	pop    ebx
c0026da0:	5e                   	pop    esi
c0026da1:	5f                   	pop    edi
c0026da2:	5d                   	pop    ebp
c0026da3:	c3                   	ret    

c0026da4 <__divsf3>:
c0026da4:	55                   	push   ebp
c0026da5:	89 e5                	mov    ebp,esp
c0026da7:	57                   	push   edi
c0026da8:	56                   	push   esi
c0026da9:	53                   	push   ebx
c0026daa:	83 ec 1c             	sub    esp,0x1c
c0026dad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026db0:	89 d8                	mov    eax,ebx
c0026db2:	89 d9                	mov    ecx,ebx
c0026db4:	c1 f9 17             	sar    ecx,0x17
c0026db7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dba:	c1 e0 08             	shl    eax,0x8
c0026dbd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026dc2:	89 c1                	mov    ecx,eax
c0026dc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026dc7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026dca:	89 c7                	mov    edi,eax
c0026dcc:	c1 ff 17             	sar    edi,0x17
c0026dcf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026dd3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026dd6:	89 f8                	mov    eax,edi
c0026dd8:	0f b6 c0             	movzx  eax,al
c0026ddb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026dde:	29 c6                	sub    esi,eax
c0026de0:	83 c6 7f             	add    esi,0x7f
c0026de3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026de6:	42                   	inc    edx
c0026de7:	80 e2 fe             	and    dl,0xfe
c0026dea:	0f 85 9c 00 00 00    	jne    c0026e8c <__divsf3+0xe8>
c0026df0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026df4:	74 33                	je     c0026e29 <__divsf3+0x85>
c0026df6:	85 c9                	test   ecx,ecx
c0026df8:	0f 85 c7 01 00 00    	jne    c0026fc5 <__divsf3+0x221>
c0026dfe:	8d 57 01             	lea    edx,[edi+0x1]
c0026e01:	80 e2 fe             	and    dl,0xfe
c0026e04:	75 2f                	jne    c0026e35 <__divsf3+0x91>
c0026e06:	85 c0                	test   eax,eax
c0026e08:	74 2b                	je     c0026e35 <__divsf3+0x91>
c0026e0a:	51                   	push   ecx
c0026e0b:	51                   	push   ecx
c0026e0c:	6a 00                	push   0x0
c0026e0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e11:	e8 d2 03 00 00       	call   c00271e8 <__nesf2>
c0026e16:	83 c4 10             	add    esp,0x10
c0026e19:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e1c:	85 c0                	test   eax,eax
c0026e1e:	0f 85 a1 01 00 00    	jne    c0026fc5 <__divsf3+0x221>
c0026e24:	e9 92 01 00 00       	jmp    c0026fbb <__divsf3+0x217>
c0026e29:	85 c9                	test   ecx,ecx
c0026e2b:	75 1b                	jne    c0026e48 <__divsf3+0xa4>
c0026e2d:	8d 57 01             	lea    edx,[edi+0x1]
c0026e30:	80 e2 fe             	and    dl,0xfe
c0026e33:	74 1e                	je     c0026e53 <__divsf3+0xaf>
c0026e35:	85 ff                	test   edi,edi
c0026e37:	0f 89 88 01 00 00    	jns    c0026fc5 <__divsf3+0x221>
c0026e3d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026e43:	e9 7d 01 00 00       	jmp    c0026fc5 <__divsf3+0x221>
c0026e48:	8d 56 ff             	lea    edx,[esi-0x1]
c0026e4b:	01 c9                	add    ecx,ecx
c0026e4d:	78 3d                	js     c0026e8c <__divsf3+0xe8>
c0026e4f:	89 d6                	mov    esi,edx
c0026e51:	eb f5                	jmp    c0026e48 <__divsf3+0xa4>
c0026e53:	85 c0                	test   eax,eax
c0026e55:	b8 00 00 00 00       	mov    eax,0x0
c0026e5a:	74 18                	je     c0026e74 <__divsf3+0xd0>
c0026e5c:	52                   	push   edx
c0026e5d:	52                   	push   edx
c0026e5e:	50                   	push   eax
c0026e5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e62:	e8 81 03 00 00       	call   c00271e8 <__nesf2>
c0026e67:	83 c4 10             	add    esp,0x10
c0026e6a:	85 c0                	test   eax,eax
c0026e6c:	0f 85 50 01 00 00    	jne    c0026fc2 <__divsf3+0x21e>
c0026e72:	eb c1                	jmp    c0026e35 <__divsf3+0x91>
c0026e74:	56                   	push   esi
c0026e75:	56                   	push   esi
c0026e76:	50                   	push   eax
c0026e77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e7a:	e8 69 03 00 00       	call   c00271e8 <__nesf2>
c0026e7f:	83 c4 10             	add    esp,0x10
c0026e82:	85 c0                	test   eax,eax
c0026e84:	0f 84 31 01 00 00    	je     c0026fbb <__divsf3+0x217>
c0026e8a:	eb a9                	jmp    c0026e35 <__divsf3+0x91>
c0026e8c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026e8f:	c1 e3 08             	shl    ebx,0x8
c0026e92:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e98:	8d 57 01             	lea    edx,[edi+0x1]
c0026e9b:	80 e2 fe             	and    dl,0xfe
c0026e9e:	75 71                	jne    c0026f11 <__divsf3+0x16d>
c0026ea0:	85 c0                	test   eax,eax
c0026ea2:	ba 00 00 00 00       	mov    edx,0x0
c0026ea7:	74 2f                	je     c0026ed8 <__divsf3+0x134>
c0026ea9:	51                   	push   ecx
c0026eaa:	51                   	push   ecx
c0026eab:	52                   	push   edx
c0026eac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eaf:	e8 f9 02 00 00       	call   c00271ad <__eqsf2>
c0026eb4:	83 c4 10             	add    esp,0x10
c0026eb7:	85 c0                	test   eax,eax
c0026eb9:	0f 85 03 01 00 00    	jne    c0026fc2 <__divsf3+0x21e>
c0026ebf:	31 d2                	xor    edx,edx
c0026ec1:	89 d3                	mov    ebx,edx
c0026ec3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026ec6:	31 f8                	xor    eax,edi
c0026ec8:	0f 89 f7 00 00 00    	jns    c0026fc5 <__divsf3+0x221>
c0026ece:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026ed3:	e9 ed 00 00 00       	jmp    c0026fc5 <__divsf3+0x221>
c0026ed8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026edb:	50                   	push   eax
c0026edc:	50                   	push   eax
c0026edd:	52                   	push   edx
c0026ede:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ee1:	e8 c7 02 00 00       	call   c00271ad <__eqsf2>
c0026ee6:	83 c4 10             	add    esp,0x10
c0026ee9:	85 c0                	test   eax,eax
c0026eeb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026eee:	75 16                	jne    c0026f06 <__divsf3+0x162>
c0026ef0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026ef3:	31 fb                	xor    ebx,edi
c0026ef5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026efb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f01:	e9 bf 00 00 00       	jmp    c0026fc5 <__divsf3+0x221>
c0026f06:	8d 46 01             	lea    eax,[esi+0x1]
c0026f09:	01 db                	add    ebx,ebx
c0026f0b:	78 04                	js     c0026f11 <__divsf3+0x16d>
c0026f0d:	89 c6                	mov    esi,eax
c0026f0f:	eb f5                	jmp    c0026f06 <__divsf3+0x162>
c0026f11:	89 c8                	mov    eax,ecx
c0026f13:	0d 00 00 00 80       	or     eax,0x80000000
c0026f18:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f1e:	31 d2                	xor    edx,edx
c0026f20:	39 d8                	cmp    eax,ebx
c0026f22:	72 07                	jb     c0026f2b <__divsf3+0x187>
c0026f24:	29 d8                	sub    eax,ebx
c0026f26:	ba 01 00 00 00       	mov    edx,0x1
c0026f2b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026f32:	01 d2                	add    edx,edx
c0026f34:	89 c1                	mov    ecx,eax
c0026f36:	01 c0                	add    eax,eax
c0026f38:	85 c9                	test   ecx,ecx
c0026f3a:	78 04                	js     c0026f40 <__divsf3+0x19c>
c0026f3c:	39 c3                	cmp    ebx,eax
c0026f3e:	77 05                	ja     c0026f45 <__divsf3+0x1a1>
c0026f40:	29 d8                	sub    eax,ebx
c0026f42:	83 ca 01             	or     edx,0x1
c0026f45:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026f48:	75 e8                	jne    c0026f32 <__divsf3+0x18e>
c0026f4a:	85 c0                	test   eax,eax
c0026f4c:	0f 95 c0             	setne  al
c0026f4f:	0f b6 c0             	movzx  eax,al
c0026f52:	c1 e2 06             	shl    edx,0x6
c0026f55:	09 c2                	or     edx,eax
c0026f57:	78 03                	js     c0026f5c <__divsf3+0x1b8>
c0026f59:	01 d2                	add    edx,edx
c0026f5b:	4e                   	dec    esi
c0026f5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026f62:	7f 22                	jg     c0026f86 <__divsf3+0x1e2>
c0026f64:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f6a:	85 f6                	test   esi,esi
c0026f6c:	7f 23                	jg     c0026f91 <__divsf3+0x1ed>
c0026f6e:	83 fe e9             	cmp    esi,0xffffffe9
c0026f71:	7c 1a                	jl     c0026f8d <__divsf3+0x1e9>
c0026f73:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f79:	b9 01 00 00 00       	mov    ecx,0x1
c0026f7e:	29 f1                	sub    ecx,esi
c0026f80:	d3 ea                	shr    edx,cl
c0026f82:	31 f6                	xor    esi,esi
c0026f84:	eb 0b                	jmp    c0026f91 <__divsf3+0x1ed>
c0026f86:	be ff 00 00 00       	mov    esi,0xff
c0026f8b:	eb 02                	jmp    c0026f8f <__divsf3+0x1eb>
c0026f8d:	31 f6                	xor    esi,esi
c0026f8f:	31 d2                	xor    edx,edx
c0026f91:	89 d0                	mov    eax,edx
c0026f93:	c1 e8 08             	shr    eax,0x8
c0026f96:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f99:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f9f:	09 fe                	or     esi,edi
c0026fa1:	c1 e6 17             	shl    esi,0x17
c0026fa4:	09 c6                	or     esi,eax
c0026fa6:	f6 c2 7f             	test   dl,0x7f
c0026fa9:	0f 95 c1             	setne  cl
c0026fac:	09 c8                	or     eax,ecx
c0026fae:	83 e0 01             	and    eax,0x1
c0026fb1:	c1 ea 07             	shr    edx,0x7
c0026fb4:	21 c2                	and    edx,eax
c0026fb6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026fb9:	eb 0a                	jmp    c0026fc5 <__divsf3+0x221>
c0026fbb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026fc0:	eb 03                	jmp    c0026fc5 <__divsf3+0x221>
c0026fc2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026fc5:	89 d8                	mov    eax,ebx
c0026fc7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026fca:	5b                   	pop    ebx
c0026fcb:	5e                   	pop    esi
c0026fcc:	5f                   	pop    edi
c0026fcd:	5d                   	pop    ebp
c0026fce:	c3                   	ret    

c0026fcf <__floatsisf>:
c0026fcf:	55                   	push   ebp
c0026fd0:	89 e5                	mov    ebp,esp
c0026fd2:	53                   	push   ebx
c0026fd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fd6:	85 d2                	test   edx,edx
c0026fd8:	7e 2b                	jle    c0027005 <__floatsisf+0x36>
c0026fda:	0f bd ca             	bsr    ecx,edx
c0026fdd:	83 f1 1f             	xor    ecx,0x1f
c0026fe0:	d3 e2                	shl    edx,cl
c0026fe2:	89 d0                	mov    eax,edx
c0026fe4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fe9:	89 c3                	mov    ebx,eax
c0026feb:	c1 eb 08             	shr    ebx,0x8
c0026fee:	80 e2 7f             	and    dl,0x7f
c0026ff1:	0f 95 c2             	setne  dl
c0026ff4:	09 da                	or     edx,ebx
c0026ff6:	83 e2 01             	and    edx,0x1
c0026ff9:	c1 e8 07             	shr    eax,0x7
c0026ffc:	21 c2                	and    edx,eax
c0026ffe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027003:	eb 32                	jmp    c0027037 <__floatsisf+0x68>
c0027005:	b8 00 00 00 00       	mov    eax,0x0
c002700a:	74 34                	je     c0027040 <__floatsisf+0x71>
c002700c:	f7 da                	neg    edx
c002700e:	0f bd ca             	bsr    ecx,edx
c0027011:	83 f1 1f             	xor    ecx,0x1f
c0027014:	d3 e2                	shl    edx,cl
c0027016:	89 d0                	mov    eax,edx
c0027018:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002701d:	89 c3                	mov    ebx,eax
c002701f:	c1 eb 08             	shr    ebx,0x8
c0027022:	80 e2 7f             	and    dl,0x7f
c0027025:	0f 95 c2             	setne  dl
c0027028:	09 da                	or     edx,ebx
c002702a:	83 e2 01             	and    edx,0x1
c002702d:	c1 e8 07             	shr    eax,0x7
c0027030:	21 c2                	and    edx,eax
c0027032:	b8 9e 01 00 00       	mov    eax,0x19e
c0027037:	29 c8                	sub    eax,ecx
c0027039:	c1 e0 17             	shl    eax,0x17
c002703c:	09 d8                	or     eax,ebx
c002703e:	01 d0                	add    eax,edx
c0027040:	5b                   	pop    ebx
c0027041:	5d                   	pop    ebp
c0027042:	c3                   	ret    

c0027043 <__floatunsisf>:
c0027043:	55                   	push   ebp
c0027044:	89 e5                	mov    ebp,esp
c0027046:	53                   	push   ebx
c0027047:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002704a:	31 c0                	xor    eax,eax
c002704c:	85 d2                	test   edx,edx
c002704e:	74 32                	je     c0027082 <__floatunsisf+0x3f>
c0027050:	0f bd ca             	bsr    ecx,edx
c0027053:	83 f1 1f             	xor    ecx,0x1f
c0027056:	d3 e2                	shl    edx,cl
c0027058:	89 d0                	mov    eax,edx
c002705a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002705f:	89 c3                	mov    ebx,eax
c0027061:	c1 eb 08             	shr    ebx,0x8
c0027064:	80 e2 7f             	and    dl,0x7f
c0027067:	0f 95 c2             	setne  dl
c002706a:	09 da                	or     edx,ebx
c002706c:	83 e2 01             	and    edx,0x1
c002706f:	c1 e8 07             	shr    eax,0x7
c0027072:	21 c2                	and    edx,eax
c0027074:	b8 9e 00 00 00       	mov    eax,0x9e
c0027079:	29 c8                	sub    eax,ecx
c002707b:	c1 e0 17             	shl    eax,0x17
c002707e:	09 d8                	or     eax,ebx
c0027080:	01 d0                	add    eax,edx
c0027082:	5b                   	pop    ebx
c0027083:	5d                   	pop    ebp
c0027084:	c3                   	ret    

c0027085 <__fixsfsi>:
c0027085:	55                   	push   ebp
c0027086:	89 e5                	mov    ebp,esp
c0027088:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002708b:	89 d1                	mov    ecx,edx
c002708d:	c1 e1 08             	shl    ecx,0x8
c0027090:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027096:	c1 fa 17             	sar    edx,0x17
c0027099:	78 1c                	js     c00270b7 <__fixsfsi+0x32>
c002709b:	83 ea 7f             	sub    edx,0x7f
c002709e:	31 c0                	xor    eax,eax
c00270a0:	83 fa 1e             	cmp    edx,0x1e
c00270a3:	77 40                	ja     c00270e5 <__fixsfsi+0x60>
c00270a5:	89 c8                	mov    eax,ecx
c00270a7:	0d 00 00 00 80       	or     eax,0x80000000
c00270ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270b1:	29 d1                	sub    ecx,edx
c00270b3:	d3 e8                	shr    eax,cl
c00270b5:	eb 2e                	jmp    c00270e5 <__fixsfsi+0x60>
c00270b7:	31 c0                	xor    eax,eax
c00270b9:	81 c2 81 00 00 00    	add    edx,0x81
c00270bf:	78 24                	js     c00270e5 <__fixsfsi+0x60>
c00270c1:	83 fa 1e             	cmp    edx,0x1e
c00270c4:	7e 09                	jle    c00270cf <__fixsfsi+0x4a>
c00270c6:	83 fa 1f             	cmp    edx,0x1f
c00270c9:	75 18                	jne    c00270e3 <__fixsfsi+0x5e>
c00270cb:	85 c9                	test   ecx,ecx
c00270cd:	75 14                	jne    c00270e3 <__fixsfsi+0x5e>
c00270cf:	89 c8                	mov    eax,ecx
c00270d1:	0d 00 00 00 80       	or     eax,0x80000000
c00270d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270db:	29 d1                	sub    ecx,edx
c00270dd:	d3 e8                	shr    eax,cl
c00270df:	f7 d8                	neg    eax
c00270e1:	eb 02                	jmp    c00270e5 <__fixsfsi+0x60>
c00270e3:	31 c0                	xor    eax,eax
c00270e5:	5d                   	pop    ebp
c00270e6:	c3                   	ret    

c00270e7 <__fixunssfsi>:
c00270e7:	55                   	push   ebp
c00270e8:	89 e5                	mov    ebp,esp
c00270ea:	53                   	push   ebx
c00270eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ee:	89 d3                	mov    ebx,edx
c00270f0:	c1 fb 17             	sar    ebx,0x17
c00270f3:	83 eb 7f             	sub    ebx,0x7f
c00270f6:	31 c0                	xor    eax,eax
c00270f8:	83 fb 1f             	cmp    ebx,0x1f
c00270fb:	77 18                	ja     c0027115 <__fixunssfsi+0x2e>
c00270fd:	89 d0                	mov    eax,edx
c00270ff:	c1 e0 08             	shl    eax,0x8
c0027102:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027107:	0d 00 00 00 80       	or     eax,0x80000000
c002710c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027111:	29 d9                	sub    ecx,ebx
c0027113:	d3 e8                	shr    eax,cl
c0027115:	5b                   	pop    ebx
c0027116:	5d                   	pop    ebp
c0027117:	c3                   	ret    

c0027118 <__cmpsf2>:
c0027118:	55                   	push   ebp
c0027119:	89 e5                	mov    ebp,esp
c002711b:	57                   	push   edi
c002711c:	56                   	push   esi
c002711d:	53                   	push   ebx
c002711e:	83 ec 24             	sub    esp,0x24
c0027121:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027124:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027127:	e8 4f 10 00 00       	call   c002817b <__truncdfsf2>
c002712c:	5a                   	pop    edx
c002712d:	59                   	pop    ecx
c002712e:	89 c3                	mov    ebx,eax
c0027130:	c1 e8 17             	shr    eax,0x17
c0027133:	0f b6 f0             	movzx  esi,al
c0027136:	89 d8                	mov    eax,ebx
c0027138:	c1 e8 1f             	shr    eax,0x1f
c002713b:	31 c6                	xor    esi,eax
c002713d:	c1 e3 08             	shl    ebx,0x8
c0027140:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027143:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027146:	e8 30 10 00 00       	call   c002817b <__truncdfsf2>
c002714b:	83 c4 10             	add    esp,0x10
c002714e:	89 c1                	mov    ecx,eax
c0027150:	c1 e9 17             	shr    ecx,0x17
c0027153:	0f b6 c9             	movzx  ecx,cl
c0027156:	89 c7                	mov    edi,eax
c0027158:	c1 ef 1f             	shr    edi,0x1f
c002715b:	89 ca                	mov    edx,ecx
c002715d:	31 fa                	xor    edx,edi
c002715f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027162:	c1 e0 08             	shl    eax,0x8
c0027165:	89 c2                	mov    edx,eax
c0027167:	89 d8                	mov    eax,ebx
c0027169:	09 d0                	or     eax,edx
c002716b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027170:	09 f0                	or     eax,esi
c0027172:	75 08                	jne    c002717c <__cmpsf2+0x64>
c0027174:	31 c0                	xor    eax,eax
c0027176:	39 f9                	cmp    ecx,edi
c0027178:	75 0c                	jne    c0027186 <__cmpsf2+0x6e>
c002717a:	eb 29                	jmp    c00271a5 <__cmpsf2+0x8d>
c002717c:	b8 01 00 00 00       	mov    eax,0x1
c0027181:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027184:	7f 1f                	jg     c00271a5 <__cmpsf2+0x8d>
c0027186:	83 c8 ff             	or     eax,0xffffffff
c0027189:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002718c:	7c 17                	jl     c00271a5 <__cmpsf2+0x8d>
c002718e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027194:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002719a:	b8 01 00 00 00       	mov    eax,0x1
c002719f:	39 d3                	cmp    ebx,edx
c00271a1:	77 02                	ja     c00271a5 <__cmpsf2+0x8d>
c00271a3:	19 c0                	sbb    eax,eax
c00271a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271a8:	5b                   	pop    ebx
c00271a9:	5e                   	pop    esi
c00271aa:	5f                   	pop    edi
c00271ab:	5d                   	pop    ebp
c00271ac:	c3                   	ret    

c00271ad <__eqsf2>:
c00271ad:	55                   	push   ebp
c00271ae:	89 e5                	mov    ebp,esp
c00271b0:	83 ec 24             	sub    esp,0x24
c00271b3:	6a 01                	push   0x1
c00271b5:	83 ec 0c             	sub    esp,0xc
c00271b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271bb:	e8 df 10 00 00       	call   c002829f <__extendsfdf2>
c00271c0:	83 c4 10             	add    esp,0x10
c00271c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271c9:	52                   	push   edx
c00271ca:	50                   	push   eax
c00271cb:	50                   	push   eax
c00271cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271cf:	e8 cb 10 00 00       	call   c002829f <__extendsfdf2>
c00271d4:	59                   	pop    ecx
c00271d5:	59                   	pop    ecx
c00271d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271dc:	52                   	push   edx
c00271dd:	50                   	push   eax
c00271de:	e8 35 ff ff ff       	call   c0027118 <__cmpsf2>
c00271e3:	83 c4 20             	add    esp,0x20
c00271e6:	c9                   	leave  
c00271e7:	c3                   	ret    

c00271e8 <__nesf2>:
c00271e8:	eb c3                	jmp    c00271ad <__eqsf2>

c00271ea <__gtsf2>:
c00271ea:	55                   	push   ebp
c00271eb:	89 e5                	mov    ebp,esp
c00271ed:	83 ec 24             	sub    esp,0x24
c00271f0:	6a ff                	push   0xffffffff
c00271f2:	83 ec 0c             	sub    esp,0xc
c00271f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f8:	e8 a2 10 00 00       	call   c002829f <__extendsfdf2>
c00271fd:	83 c4 10             	add    esp,0x10
c0027200:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027203:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027206:	52                   	push   edx
c0027207:	50                   	push   eax
c0027208:	50                   	push   eax
c0027209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002720c:	e8 8e 10 00 00       	call   c002829f <__extendsfdf2>
c0027211:	59                   	pop    ecx
c0027212:	59                   	pop    ecx
c0027213:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027216:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027219:	52                   	push   edx
c002721a:	50                   	push   eax
c002721b:	e8 f8 fe ff ff       	call   c0027118 <__cmpsf2>
c0027220:	83 c4 20             	add    esp,0x20
c0027223:	c9                   	leave  
c0027224:	c3                   	ret    

c0027225 <__gesf2>:
c0027225:	eb c3                	jmp    c00271ea <__gtsf2>

c0027227 <__ltsf2>:
c0027227:	eb 84                	jmp    c00271ad <__eqsf2>

c0027229 <__lesf2>:
c0027229:	eb 82                	jmp    c00271ad <__eqsf2>

c002722b <__adddf3>:
c002722b:	55                   	push   ebp
c002722c:	89 e5                	mov    ebp,esp
c002722e:	57                   	push   edi
c002722f:	56                   	push   esi
c0027230:	53                   	push   ebx
c0027231:	83 ec 24             	sub    esp,0x24
c0027234:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027237:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002723a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002723d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027240:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027243:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027246:	89 c8                	mov    eax,ecx
c0027248:	89 ce                	mov    esi,ecx
c002724a:	c1 fe 14             	sar    esi,0x14
c002724d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027250:	89 fb                	mov    ebx,edi
c0027252:	89 fa                	mov    edx,edi
c0027254:	c1 e2 0b             	shl    edx,0xb
c0027257:	c1 e0 0b             	shl    eax,0xb
c002725a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002725f:	c1 eb 15             	shr    ebx,0x15
c0027262:	09 d8                	or     eax,ebx
c0027264:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027267:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002726a:	c1 fe 14             	sar    esi,0x14
c002726d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027270:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027273:	89 f3                	mov    ebx,esi
c0027275:	c1 e3 0b             	shl    ebx,0xb
c0027278:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002727b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002727e:	c1 e3 0b             	shl    ebx,0xb
c0027281:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027287:	c1 ee 15             	shr    esi,0x15
c002728a:	09 f3                	or     ebx,esi
c002728c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002728f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027292:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027295:	0f 88 5f 02 00 00    	js     c00274fa <__adddf3+0x2cf>
c002729b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002729e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00272a1:	85 db                	test   ebx,ebx
c00272a3:	0f 8e c7 00 00 00    	jle    c0027370 <__adddf3+0x145>
c00272a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00272b0:	75 1a                	jne    c00272cc <__adddf3+0xa1>
c00272b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00272b8:	0f 84 b2 05 00 00    	je     c0027870 <__adddf3+0x645>
c00272be:	4b                   	dec    ebx
c00272bf:	75 23                	jne    c00272e4 <__adddf3+0xb9>
c00272c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00272c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00272c7:	e9 99 00 00 00       	jmp    c0027365 <__adddf3+0x13a>
c00272cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272cf:	f7 d6                	not    esi
c00272d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00272d7:	0f 84 93 05 00 00    	je     c0027870 <__adddf3+0x645>
c00272dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00272e4:	83 fb 1f             	cmp    ebx,0x1f
c00272e7:	7e 42                	jle    c002732b <__adddf3+0x100>
c00272e9:	83 fb 3f             	cmp    ebx,0x3f
c00272ec:	0f 8f 7e 05 00 00    	jg     c0027870 <__adddf3+0x645>
c00272f2:	83 e3 1f             	and    ebx,0x1f
c00272f5:	89 d9                	mov    ecx,ebx
c00272f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272fa:	d3 ef                	shr    edi,cl
c00272fc:	31 db                	xor    ebx,ebx
c00272fe:	85 c9                	test   ecx,ecx
c0027300:	74 15                	je     c0027317 <__adddf3+0xec>
c0027302:	be 20 00 00 00       	mov    esi,0x20
c0027307:	29 ce                	sub    esi,ecx
c0027309:	89 f1                	mov    ecx,esi
c002730b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002730e:	d3 e6                	shl    esi,cl
c0027310:	31 db                	xor    ebx,ebx
c0027312:	85 f6                	test   esi,esi
c0027314:	0f 95 c3             	setne  bl
c0027317:	31 c9                	xor    ecx,ecx
c0027319:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002731d:	0f 95 c1             	setne  cl
c0027320:	09 cf                	or     edi,ecx
c0027322:	09 fb                	or     ebx,edi
c0027324:	01 da                	add    edx,ebx
c0027326:	83 d0 00             	adc    eax,0x0
c0027329:	eb 3a                	jmp    c0027365 <__adddf3+0x13a>
c002732b:	bf 20 00 00 00       	mov    edi,0x20
c0027330:	29 df                	sub    edi,ebx
c0027332:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027335:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027338:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002733b:	d3 e6                	shl    esi,cl
c002733d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027340:	88 d9                	mov    cl,bl
c0027342:	d3 ef                	shr    edi,cl
c0027344:	09 fe                	or     esi,edi
c0027346:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027349:	88 d9                	mov    cl,bl
c002734b:	d3 ef                	shr    edi,cl
c002734d:	89 fb                	mov    ebx,edi
c002734f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027352:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027355:	d3 e7                	shl    edi,cl
c0027357:	85 ff                	test   edi,edi
c0027359:	0f 95 c1             	setne  cl
c002735c:	0f b6 c9             	movzx  ecx,cl
c002735f:	09 ce                	or     esi,ecx
c0027361:	01 f2                	add    edx,esi
c0027363:	11 d8                	adc    eax,ebx
c0027365:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027368:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002736b:	e9 52 01 00 00       	jmp    c00274c2 <__adddf3+0x297>
c0027370:	0f 84 d5 00 00 00    	je     c002744b <__adddf3+0x220>
c0027376:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027379:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002737c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002737f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027382:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027389:	75 20                	jne    c00273ab <__adddf3+0x180>
c002738b:	89 d6                	mov    esi,edx
c002738d:	09 c6                	or     esi,eax
c002738f:	0f 84 db 04 00 00    	je     c0027870 <__adddf3+0x645>
c0027395:	4b                   	dec    ebx
c0027396:	75 29                	jne    c00273c1 <__adddf3+0x196>
c0027398:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002739b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002739e:	01 d1                	add    ecx,edx
c00273a0:	11 c6                	adc    esi,eax
c00273a2:	89 f0                	mov    eax,esi
c00273a4:	89 ca                	mov    edx,ecx
c00273a6:	e9 17 01 00 00       	jmp    c00274c2 <__adddf3+0x297>
c00273ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00273ae:	f7 d6                	not    esi
c00273b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273b6:	0f 84 b4 04 00 00    	je     c0027870 <__adddf3+0x645>
c00273bc:	0d 00 00 00 80       	or     eax,0x80000000
c00273c1:	83 fb 1f             	cmp    ebx,0x1f
c00273c4:	7e 48                	jle    c002740e <__adddf3+0x1e3>
c00273c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273cc:	83 fb 3f             	cmp    ebx,0x3f
c00273cf:	0f 8f 9b 04 00 00    	jg     c0027870 <__adddf3+0x645>
c00273d5:	83 e3 1f             	and    ebx,0x1f
c00273d8:	89 d9                	mov    ecx,ebx
c00273da:	89 c7                	mov    edi,eax
c00273dc:	d3 ef                	shr    edi,cl
c00273de:	31 db                	xor    ebx,ebx
c00273e0:	85 c9                	test   ecx,ecx
c00273e2:	74 12                	je     c00273f6 <__adddf3+0x1cb>
c00273e4:	be 20 00 00 00       	mov    esi,0x20
c00273e9:	29 ce                	sub    esi,ecx
c00273eb:	89 f1                	mov    ecx,esi
c00273ed:	d3 e0                	shl    eax,cl
c00273ef:	31 db                	xor    ebx,ebx
c00273f1:	85 c0                	test   eax,eax
c00273f3:	0f 95 c3             	setne  bl
c00273f6:	31 c0                	xor    eax,eax
c00273f8:	85 d2                	test   edx,edx
c00273fa:	0f 95 c0             	setne  al
c00273fd:	09 c7                	or     edi,eax
c00273ff:	09 fb                	or     ebx,edi
c0027401:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027404:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027407:	01 da                	add    edx,ebx
c0027409:	83 d6 00             	adc    esi,0x0
c002740c:	eb 39                	jmp    c0027447 <__adddf3+0x21c>
c002740e:	be 20 00 00 00       	mov    esi,0x20
c0027413:	29 de                	sub    esi,ebx
c0027415:	89 c7                	mov    edi,eax
c0027417:	89 f1                	mov    ecx,esi
c0027419:	d3 e7                	shl    edi,cl
c002741b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002741e:	89 d7                	mov    edi,edx
c0027420:	88 d9                	mov    cl,bl
c0027422:	d3 ef                	shr    edi,cl
c0027424:	89 f9                	mov    ecx,edi
c0027426:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027429:	09 cf                	or     edi,ecx
c002742b:	88 d9                	mov    cl,bl
c002742d:	d3 e8                	shr    eax,cl
c002742f:	89 f1                	mov    ecx,esi
c0027431:	d3 e2                	shl    edx,cl
c0027433:	85 d2                	test   edx,edx
c0027435:	0f 95 c2             	setne  dl
c0027438:	0f b6 d2             	movzx  edx,dl
c002743b:	09 d7                	or     edi,edx
c002743d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027440:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027443:	01 fa                	add    edx,edi
c0027445:	11 c6                	adc    esi,eax
c0027447:	89 f0                	mov    eax,esi
c0027449:	eb 77                	jmp    c00274c2 <__adddf3+0x297>
c002744b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002744e:	46                   	inc    esi
c002744f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027452:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027458:	75 41                	jne    c002749b <__adddf3+0x270>
c002745a:	89 d3                	mov    ebx,edx
c002745c:	09 c3                	or     ebx,eax
c002745e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027465:	75 27                	jne    c002748e <__adddf3+0x263>
c0027467:	85 db                	test   ebx,ebx
c0027469:	0f 84 fb 03 00 00    	je     c002786a <__adddf3+0x63f>
c002746f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027472:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027475:	0f 84 f5 03 00 00    	je     c0027870 <__adddf3+0x645>
c002747b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002747e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027481:	85 c0                	test   eax,eax
c0027483:	0f 89 91 03 00 00    	jns    c002781a <__adddf3+0x5ef>
c0027489:	e9 85 03 00 00       	jmp    c0027813 <__adddf3+0x5e8>
c002748e:	85 db                	test   ebx,ebx
c0027490:	0f 85 da 03 00 00    	jne    c0027870 <__adddf3+0x645>
c0027496:	e9 cf 03 00 00       	jmp    c002786a <__adddf3+0x63f>
c002749b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002749e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274a4:	f7 d1                	not    ecx
c00274a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00274ac:	0f 84 70 03 00 00    	je     c0027822 <__adddf3+0x5f7>
c00274b2:	d1 ea                	shr    edx,1
c00274b4:	89 c1                	mov    ecx,eax
c00274b6:	c1 e1 1f             	shl    ecx,0x1f
c00274b9:	09 ca                	or     edx,ecx
c00274bb:	d1 e8                	shr    eax,1
c00274bd:	e9 6f 03 00 00       	jmp    c0027831 <__adddf3+0x606>
c00274c2:	85 c0                	test   eax,eax
c00274c4:	0f 89 67 03 00 00    	jns    c0027831 <__adddf3+0x606>
c00274ca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00274cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274d0:	f7 d1                	not    ecx
c00274d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00274d8:	0f 84 44 03 00 00    	je     c0027822 <__adddf3+0x5f7>
c00274de:	89 d1                	mov    ecx,edx
c00274e0:	d1 e9                	shr    ecx,1
c00274e2:	83 e2 01             	and    edx,0x1
c00274e5:	09 ca                	or     edx,ecx
c00274e7:	89 c1                	mov    ecx,eax
c00274e9:	c1 e1 1f             	shl    ecx,0x1f
c00274ec:	09 ca                	or     edx,ecx
c00274ee:	d1 e8                	shr    eax,1
c00274f0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00274f5:	e9 37 03 00 00       	jmp    c0027831 <__adddf3+0x606>
c00274fa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274fd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027503:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027506:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027509:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002750f:	29 de                	sub    esi,ebx
c0027511:	85 f6                	test   esi,esi
c0027513:	0f 8e bd 00 00 00    	jle    c00275d6 <__adddf3+0x3ab>
c0027519:	85 db                	test   ebx,ebx
c002751b:	75 17                	jne    c0027534 <__adddf3+0x309>
c002751d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027520:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027523:	0f 84 47 03 00 00    	je     c0027870 <__adddf3+0x645>
c0027529:	4e                   	dec    esi
c002752a:	75 20                	jne    c002754c <__adddf3+0x321>
c002752c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002752f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027532:	eb 5b                	jmp    c002758f <__adddf3+0x364>
c0027534:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027537:	f7 d3                	not    ebx
c0027539:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002753f:	0f 84 2b 03 00 00    	je     c0027870 <__adddf3+0x645>
c0027545:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002754c:	83 fe 1f             	cmp    esi,0x1f
c002754f:	7e 49                	jle    c002759a <__adddf3+0x36f>
c0027551:	83 fe 3f             	cmp    esi,0x3f
c0027554:	0f 8f 16 03 00 00    	jg     c0027870 <__adddf3+0x645>
c002755a:	83 e6 1f             	and    esi,0x1f
c002755d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027560:	89 f1                	mov    ecx,esi
c0027562:	d3 ef                	shr    edi,cl
c0027564:	31 db                	xor    ebx,ebx
c0027566:	85 f6                	test   esi,esi
c0027568:	74 13                	je     c002757d <__adddf3+0x352>
c002756a:	b9 20 00 00 00       	mov    ecx,0x20
c002756f:	29 f1                	sub    ecx,esi
c0027571:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027574:	d3 e6                	shl    esi,cl
c0027576:	31 db                	xor    ebx,ebx
c0027578:	85 f6                	test   esi,esi
c002757a:	0f 95 c3             	setne  bl
c002757d:	31 c9                	xor    ecx,ecx
c002757f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027583:	0f 95 c1             	setne  cl
c0027586:	09 cf                	or     edi,ecx
c0027588:	09 fb                	or     ebx,edi
c002758a:	29 da                	sub    edx,ebx
c002758c:	83 d8 00             	sbb    eax,0x0
c002758f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027592:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027595:	e9 aa 01 00 00       	jmp    c0027744 <__adddf3+0x519>
c002759a:	bf 20 00 00 00       	mov    edi,0x20
c002759f:	29 f7                	sub    edi,esi
c00275a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275aa:	d3 e3                	shl    ebx,cl
c00275ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275af:	89 f1                	mov    ecx,esi
c00275b1:	d3 ef                	shr    edi,cl
c00275b3:	09 fb                	or     ebx,edi
c00275b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275b8:	89 f1                	mov    ecx,esi
c00275ba:	d3 ef                	shr    edi,cl
c00275bc:	89 fe                	mov    esi,edi
c00275be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275c4:	d3 e7                	shl    edi,cl
c00275c6:	85 ff                	test   edi,edi
c00275c8:	0f 95 c1             	setne  cl
c00275cb:	0f b6 c9             	movzx  ecx,cl
c00275ce:	09 cb                	or     ebx,ecx
c00275d0:	29 da                	sub    edx,ebx
c00275d2:	19 f0                	sbb    eax,esi
c00275d4:	eb b9                	jmp    c002758f <__adddf3+0x364>
c00275d6:	0f 84 cd 00 00 00    	je     c00276a9 <__adddf3+0x47e>
c00275dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00275df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00275e9:	75 1b                	jne    c0027606 <__adddf3+0x3db>
c00275eb:	89 d6                	mov    esi,edx
c00275ed:	09 c6                	or     esi,eax
c00275ef:	0f 84 7b 02 00 00    	je     c0027870 <__adddf3+0x645>
c00275f5:	4b                   	dec    ebx
c00275f6:	75 24                	jne    c002761c <__adddf3+0x3f1>
c00275f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275fe:	29 d1                	sub    ecx,edx
c0027600:	19 c6                	sbb    esi,eax
c0027602:	89 ca                	mov    edx,ecx
c0027604:	eb 61                	jmp    c0027667 <__adddf3+0x43c>
c0027606:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027609:	f7 d6                	not    esi
c002760b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027611:	0f 84 59 02 00 00    	je     c0027870 <__adddf3+0x645>
c0027617:	0d 00 00 00 80       	or     eax,0x80000000
c002761c:	83 fb 1f             	cmp    ebx,0x1f
c002761f:	7e 4d                	jle    c002766e <__adddf3+0x443>
c0027621:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027624:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027627:	83 fb 3f             	cmp    ebx,0x3f
c002762a:	0f 8f 40 02 00 00    	jg     c0027870 <__adddf3+0x645>
c0027630:	83 e3 1f             	and    ebx,0x1f
c0027633:	89 d9                	mov    ecx,ebx
c0027635:	89 c7                	mov    edi,eax
c0027637:	d3 ef                	shr    edi,cl
c0027639:	31 db                	xor    ebx,ebx
c002763b:	85 c9                	test   ecx,ecx
c002763d:	74 12                	je     c0027651 <__adddf3+0x426>
c002763f:	be 20 00 00 00       	mov    esi,0x20
c0027644:	29 ce                	sub    esi,ecx
c0027646:	89 f1                	mov    ecx,esi
c0027648:	d3 e0                	shl    eax,cl
c002764a:	31 db                	xor    ebx,ebx
c002764c:	85 c0                	test   eax,eax
c002764e:	0f 95 c3             	setne  bl
c0027651:	31 c0                	xor    eax,eax
c0027653:	85 d2                	test   edx,edx
c0027655:	0f 95 c0             	setne  al
c0027658:	09 c7                	or     edi,eax
c002765a:	09 fb                	or     ebx,edi
c002765c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002765f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027662:	29 da                	sub    edx,ebx
c0027664:	83 de 00             	sbb    esi,0x0
c0027667:	89 f0                	mov    eax,esi
c0027669:	e9 d6 00 00 00       	jmp    c0027744 <__adddf3+0x519>
c002766e:	be 20 00 00 00       	mov    esi,0x20
c0027673:	29 de                	sub    esi,ebx
c0027675:	89 c7                	mov    edi,eax
c0027677:	89 f1                	mov    ecx,esi
c0027679:	d3 e7                	shl    edi,cl
c002767b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002767e:	89 d7                	mov    edi,edx
c0027680:	88 d9                	mov    cl,bl
c0027682:	d3 ef                	shr    edi,cl
c0027684:	89 f9                	mov    ecx,edi
c0027686:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027689:	09 cf                	or     edi,ecx
c002768b:	88 d9                	mov    cl,bl
c002768d:	d3 e8                	shr    eax,cl
c002768f:	89 f1                	mov    ecx,esi
c0027691:	d3 e2                	shl    edx,cl
c0027693:	85 d2                	test   edx,edx
c0027695:	0f 95 c2             	setne  dl
c0027698:	0f b6 d2             	movzx  edx,dl
c002769b:	09 d7                	or     edi,edx
c002769d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276a3:	29 fa                	sub    edx,edi
c00276a5:	19 c6                	sbb    esi,eax
c00276a7:	eb be                	jmp    c0027667 <__adddf3+0x43c>
c00276a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00276af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00276b5:	75 6a                	jne    c0027721 <__adddf3+0x4f6>
c00276b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276bb:	75 58                	jne    c0027715 <__adddf3+0x4ea>
c00276bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276c3:	89 d6                	mov    esi,edx
c00276c5:	09 c6                	or     esi,eax
c00276c7:	75 17                	jne    c00276e0 <__adddf3+0x4b5>
c00276c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276cf:	85 db                	test   ebx,ebx
c00276d1:	0f 85 99 01 00 00    	jne    c0027870 <__adddf3+0x645>
c00276d7:	31 ff                	xor    edi,edi
c00276d9:	31 c9                	xor    ecx,ecx
c00276db:	e9 90 01 00 00       	jmp    c0027870 <__adddf3+0x645>
c00276e0:	85 db                	test   ebx,ebx
c00276e2:	0f 84 88 01 00 00    	je     c0027870 <__adddf3+0x645>
c00276e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00276eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00276ee:	85 c0                	test   eax,eax
c00276f0:	79 10                	jns    c0027702 <__adddf3+0x4d7>
c00276f2:	31 c9                	xor    ecx,ecx
c00276f4:	f7 da                	neg    edx
c00276f6:	0f 95 c1             	setne  cl
c00276f9:	01 c8                	add    eax,ecx
c00276fb:	f7 d8                	neg    eax
c00276fd:	e9 2f 01 00 00       	jmp    c0027831 <__adddf3+0x606>
c0027702:	31 ff                	xor    edi,edi
c0027704:	31 c9                	xor    ecx,ecx
c0027706:	89 c3                	mov    ebx,eax
c0027708:	09 d3                	or     ebx,edx
c002770a:	0f 84 60 01 00 00    	je     c0027870 <__adddf3+0x645>
c0027710:	e9 05 01 00 00       	jmp    c002781a <__adddf3+0x5ef>
c0027715:	31 ff                	xor    edi,edi
c0027717:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002771c:	e9 4f 01 00 00       	jmp    c0027870 <__adddf3+0x645>
c0027721:	89 c1                	mov    ecx,eax
c0027723:	89 d0                	mov    eax,edx
c0027725:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027728:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002772b:	89 ca                	mov    edx,ecx
c002772d:	85 c9                	test   ecx,ecx
c002772f:	79 2c                	jns    c002775d <__adddf3+0x532>
c0027731:	31 c9                	xor    ecx,ecx
c0027733:	f7 d8                	neg    eax
c0027735:	0f 95 c1             	setne  cl
c0027738:	01 ca                	add    edx,ecx
c002773a:	f7 da                	neg    edx
c002773c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002773f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027742:	eb 19                	jmp    c002775d <__adddf3+0x532>
c0027744:	85 c0                	test   eax,eax
c0027746:	0f 89 e5 00 00 00    	jns    c0027831 <__adddf3+0x606>
c002774c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027751:	89 c1                	mov    ecx,eax
c0027753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027756:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027759:	89 d0                	mov    eax,edx
c002775b:	89 ca                	mov    edx,ecx
c002775d:	85 d2                	test   edx,edx
c002775f:	74 59                	je     c00277ba <__adddf3+0x58f>
c0027761:	0f bd da             	bsr    ebx,edx
c0027764:	83 f3 1f             	xor    ebx,0x1f
c0027767:	88 d9                	mov    cl,bl
c0027769:	d3 e2                	shl    edx,cl
c002776b:	bf 20 00 00 00       	mov    edi,0x20
c0027770:	89 f9                	mov    ecx,edi
c0027772:	29 d9                	sub    ecx,ebx
c0027774:	89 c6                	mov    esi,eax
c0027776:	d3 ee                	shr    esi,cl
c0027778:	09 d6                	or     esi,edx
c002777a:	88 d9                	mov    cl,bl
c002777c:	d3 e0                	shl    eax,cl
c002777e:	89 c2                	mov    edx,eax
c0027780:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027783:	25 ff 07 00 00       	and    eax,0x7ff
c0027788:	39 d8                	cmp    eax,ebx
c002778a:	7f 22                	jg     c00277ae <__adddf3+0x583>
c002778c:	29 c3                	sub    ebx,eax
c002778e:	43                   	inc    ebx
c002778f:	88 d9                	mov    cl,bl
c0027791:	d3 ea                	shr    edx,cl
c0027793:	29 df                	sub    edi,ebx
c0027795:	89 f9                	mov    ecx,edi
c0027797:	89 f0                	mov    eax,esi
c0027799:	d3 e0                	shl    eax,cl
c002779b:	09 c2                	or     edx,eax
c002779d:	89 f0                	mov    eax,esi
c002779f:	88 d9                	mov    cl,bl
c00277a1:	d3 e8                	shr    eax,cl
c00277a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00277ac:	eb 6f                	jmp    c002781d <__adddf3+0x5f2>
c00277ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277b1:	29 d8                	sub    eax,ebx
c00277b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277b6:	89 f0                	mov    eax,esi
c00277b8:	eb 59                	jmp    c0027813 <__adddf3+0x5e8>
c00277ba:	85 c0                	test   eax,eax
c00277bc:	74 6a                	je     c0027828 <__adddf3+0x5fd>
c00277be:	0f bd c8             	bsr    ecx,eax
c00277c1:	83 f1 1f             	xor    ecx,0x1f
c00277c4:	d3 e0                	shl    eax,cl
c00277c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277cf:	83 c1 20             	add    ecx,0x20
c00277d2:	39 cb                	cmp    ebx,ecx
c00277d4:	7f 35                	jg     c002780b <__adddf3+0x5e0>
c00277d6:	29 d9                	sub    ecx,ebx
c00277d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00277db:	83 fe 1f             	cmp    esi,0x1f
c00277de:	7e 09                	jle    c00277e9 <__adddf3+0x5be>
c00277e0:	83 e9 1f             	sub    ecx,0x1f
c00277e3:	d3 e8                	shr    eax,cl
c00277e5:	89 c3                	mov    ebx,eax
c00277e7:	eb 11                	jmp    c00277fa <__adddf3+0x5cf>
c00277e9:	b9 20 00 00 00       	mov    ecx,0x20
c00277ee:	29 f1                	sub    ecx,esi
c00277f0:	89 c3                	mov    ebx,eax
c00277f2:	d3 e3                	shl    ebx,cl
c00277f4:	89 f1                	mov    ecx,esi
c00277f6:	d3 e8                	shr    eax,cl
c00277f8:	89 c2                	mov    edx,eax
c00277fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027802:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027805:	89 d0                	mov    eax,edx
c0027807:	89 da                	mov    edx,ebx
c0027809:	eb 26                	jmp    c0027831 <__adddf3+0x606>
c002780b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002780e:	29 cf                	sub    edi,ecx
c0027810:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027813:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027818:	eb 17                	jmp    c0027831 <__adddf3+0x606>
c002781a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002781d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027820:	eb 0f                	jmp    c0027831 <__adddf3+0x606>
c0027822:	31 d2                	xor    edx,edx
c0027824:	31 c0                	xor    eax,eax
c0027826:	eb 09                	jmp    c0027831 <__adddf3+0x606>
c0027828:	89 c2                	mov    edx,eax
c002782a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027831:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027834:	c1 e1 14             	shl    ecx,0x14
c0027837:	89 c3                	mov    ebx,eax
c0027839:	c1 eb 0b             	shr    ebx,0xb
c002783c:	09 d9                	or     ecx,ebx
c002783e:	89 d3                	mov    ebx,edx
c0027840:	c1 eb 0b             	shr    ebx,0xb
c0027843:	c1 e0 15             	shl    eax,0x15
c0027846:	09 d8                	or     eax,ebx
c0027848:	89 c7                	mov    edi,eax
c002784a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027850:	0f 95 c0             	setne  al
c0027853:	89 c6                	mov    esi,eax
c0027855:	09 f3                	or     ebx,esi
c0027857:	83 e3 01             	and    ebx,0x1
c002785a:	c1 ea 0a             	shr    edx,0xa
c002785d:	21 da                	and    edx,ebx
c002785f:	89 f8                	mov    eax,edi
c0027861:	01 d0                	add    eax,edx
c0027863:	83 d1 00             	adc    ecx,0x0
c0027866:	89 c7                	mov    edi,eax
c0027868:	eb 06                	jmp    c0027870 <__adddf3+0x645>
c002786a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002786d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027870:	89 f8                	mov    eax,edi
c0027872:	89 ca                	mov    edx,ecx
c0027874:	83 c4 24             	add    esp,0x24
c0027877:	5b                   	pop    ebx
c0027878:	5e                   	pop    esi
c0027879:	5f                   	pop    edi
c002787a:	5d                   	pop    ebp
c002787b:	c3                   	ret    

c002787c <__subdf3>:
c002787c:	55                   	push   ebp
c002787d:	89 e5                	mov    ebp,esp
c002787f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027882:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027885:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002788b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002788e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027891:	5d                   	pop    ebp
c0027892:	e9 94 f9 ff ff       	jmp    c002722b <__adddf3>

c0027897 <__negdf2>:
c0027897:	55                   	push   ebp
c0027898:	89 e5                	mov    ebp,esp
c002789a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002789d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00278a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278a6:	5d                   	pop    ebp
c00278a7:	c3                   	ret    

c00278a8 <__muldf3>:
c00278a8:	55                   	push   ebp
c00278a9:	89 e5                	mov    ebp,esp
c00278ab:	57                   	push   edi
c00278ac:	56                   	push   esi
c00278ad:	53                   	push   ebx
c00278ae:	83 ec 24             	sub    esp,0x24
c00278b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00278b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00278c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00278c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c6:	89 c8                	mov    eax,ecx
c00278c8:	c1 f8 14             	sar    eax,0x14
c00278cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278ce:	89 f8                	mov    eax,edi
c00278d0:	89 fb                	mov    ebx,edi
c00278d2:	c1 e3 0b             	shl    ebx,0xb
c00278d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00278d8:	c1 e1 0b             	shl    ecx,0xb
c00278db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00278e1:	c1 e8 15             	shr    eax,0x15
c00278e4:	09 c1                	or     ecx,eax
c00278e6:	89 d6                	mov    esi,edx
c00278e8:	89 d0                	mov    eax,edx
c00278ea:	c1 f8 14             	sar    eax,0x14
c00278ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00278f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00278f3:	89 c3                	mov    ebx,eax
c00278f5:	c1 e3 0b             	shl    ebx,0xb
c00278f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00278fb:	c1 e6 0b             	shl    esi,0xb
c00278fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027904:	c1 e8 15             	shr    eax,0x15
c0027907:	09 c6                	or     esi,eax
c0027909:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002790c:	25 ff 07 00 00       	and    eax,0x7ff
c0027911:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027914:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027917:	25 ff 07 00 00       	and    eax,0x7ff
c002791c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002791f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027922:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027925:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002792c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002792f:	40                   	inc    eax
c0027930:	a9 fe 07 00 00       	test   eax,0x7fe
c0027935:	0f 85 8d 00 00 00    	jne    c00279c8 <__muldf3+0x120>
c002793b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002793e:	09 c8                	or     eax,ecx
c0027940:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027944:	74 44                	je     c002798a <__muldf3+0xe2>
c0027946:	85 c0                	test   eax,eax
c0027948:	0f 85 31 02 00 00    	jne    c0027b7f <__muldf3+0x2d7>
c002794e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027951:	40                   	inc    eax
c0027952:	a9 fe 07 00 00       	test   eax,0x7fe
c0027957:	75 13                	jne    c002796c <__muldf3+0xc4>
c0027959:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002795c:	09 f1                	or     ecx,esi
c002795e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027962:	74 22                	je     c0027986 <__muldf3+0xde>
c0027964:	85 c9                	test   ecx,ecx
c0027966:	0f 85 0d 02 00 00    	jne    c0027b79 <__muldf3+0x2d1>
c002796c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027970:	0f 89 09 02 00 00    	jns    c0027b7f <__muldf3+0x2d7>
c0027976:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027979:	05 00 00 00 80       	add    eax,0x80000000
c002797e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027981:	e9 f9 01 00 00       	jmp    c0027b7f <__muldf3+0x2d7>
c0027986:	85 c9                	test   ecx,ecx
c0027988:	eb 2e                	jmp    c00279b8 <__muldf3+0x110>
c002798a:	85 c0                	test   eax,eax
c002798c:	74 20                	je     c00279ae <__muldf3+0x106>
c002798e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027991:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027994:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027997:	c1 ef 1f             	shr    edi,0x1f
c002799a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002799d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00279a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279a6:	09 f9                	or     ecx,edi
c00279a8:	78 1e                	js     c00279c8 <__muldf3+0x120>
c00279aa:	89 c3                	mov    ebx,eax
c00279ac:	eb e0                	jmp    c002798e <__muldf3+0xe6>
c00279ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279b1:	f7 d0                	not    eax
c00279b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00279b8:	75 b2                	jne    c002796c <__muldf3+0xc4>
c00279ba:	31 ff                	xor    edi,edi
c00279bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00279c3:	e9 b7 01 00 00       	jmp    c0027b7f <__muldf3+0x2d7>
c00279c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279cb:	40                   	inc    eax
c00279cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00279d1:	75 57                	jne    c0027a2a <__muldf3+0x182>
c00279d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00279d6:	09 f0                	or     eax,esi
c00279d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279dc:	74 23                	je     c0027a01 <__muldf3+0x159>
c00279de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00279e2:	0f 89 91 01 00 00    	jns    c0027b79 <__muldf3+0x2d1>
c00279e8:	85 c0                	test   eax,eax
c00279ea:	0f 85 89 01 00 00    	jne    c0027b79 <__muldf3+0x2d1>
c00279f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00279f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00279f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279fc:	e9 7e 01 00 00       	jmp    c0027b7f <__muldf3+0x2d7>
c0027a01:	85 c0                	test   eax,eax
c0027a03:	75 0c                	jne    c0027a11 <__muldf3+0x169>
c0027a05:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a09:	0f 89 6a 01 00 00    	jns    c0027b79 <__muldf3+0x2d1>
c0027a0f:	eb df                	jmp    c00279f0 <__muldf3+0x148>
c0027a11:	01 f6                	add    esi,esi
c0027a13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a16:	c1 ea 1f             	shr    edx,0x1f
c0027a19:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a1c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a1f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a22:	09 d6                	or     esi,edx
c0027a24:	78 04                	js     c0027a2a <__muldf3+0x182>
c0027a26:	89 c3                	mov    ebx,eax
c0027a28:	eb e7                	jmp    c0027a11 <__muldf3+0x169>
c0027a2a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027a30:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a36:	89 c8                	mov    eax,ecx
c0027a38:	f7 e6                	mul    esi
c0027a3a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027a3d:	89 c7                	mov    edi,eax
c0027a3f:	89 c8                	mov    eax,ecx
c0027a41:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a44:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027a47:	89 c1                	mov    ecx,eax
c0027a49:	89 f0                	mov    eax,esi
c0027a4b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027a4e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027a51:	89 c6                	mov    esi,eax
c0027a53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a56:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a5c:	31 c0                	xor    eax,eax
c0027a5e:	01 f1                	add    ecx,esi
c0027a60:	0f 92 c0             	setb   al
c0027a63:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027a66:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027a69:	83 d6 00             	adc    esi,0x0
c0027a6c:	01 c7                	add    edi,eax
c0027a6e:	83 d6 00             	adc    esi,0x0
c0027a71:	01 ca                	add    edx,ecx
c0027a73:	0f 92 c1             	setb   cl
c0027a76:	0f b6 c9             	movzx  ecx,cl
c0027a79:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027a7c:	83 d6 00             	adc    esi,0x0
c0027a7f:	01 cf                	add    edi,ecx
c0027a81:	83 d6 00             	adc    esi,0x0
c0027a84:	31 c9                	xor    ecx,ecx
c0027a86:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027a89:	0f 95 c1             	setne  cl
c0027a8c:	09 cf                	or     edi,ecx
c0027a8e:	85 f6                	test   esi,esi
c0027a90:	78 0c                	js     c0027a9e <__muldf3+0x1f6>
c0027a92:	01 f6                	add    esi,esi
c0027a94:	89 f8                	mov    eax,edi
c0027a96:	c1 e8 1f             	shr    eax,0x1f
c0027a99:	09 c6                	or     esi,eax
c0027a9b:	01 ff                	add    edi,edi
c0027a9d:	4b                   	dec    ebx
c0027a9e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027aa4:	0f 8f 85 00 00 00    	jg     c0027b2f <__muldf3+0x287>
c0027aaa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ab0:	85 db                	test   ebx,ebx
c0027ab2:	0f 8f 84 00 00 00    	jg     c0027b3c <__muldf3+0x294>
c0027ab8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027abb:	7c 79                	jl     c0027b36 <__muldf3+0x28e>
c0027abd:	ba 01 00 00 00       	mov    edx,0x1
c0027ac2:	29 da                	sub    edx,ebx
c0027ac4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027aca:	83 fa 1f             	cmp    edx,0x1f
c0027acd:	7e 30                	jle    c0027aff <__muldf3+0x257>
c0027acf:	83 fa 20             	cmp    edx,0x20
c0027ad2:	75 0b                	jne    c0027adf <__muldf3+0x237>
c0027ad4:	31 c0                	xor    eax,eax
c0027ad6:	85 ff                	test   edi,edi
c0027ad8:	0f 95 c0             	setne  al
c0027adb:	89 c7                	mov    edi,eax
c0027add:	eb 1a                	jmp    c0027af9 <__muldf3+0x251>
c0027adf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027ae2:	89 f0                	mov    eax,esi
c0027ae4:	d3 e0                	shl    eax,cl
c0027ae6:	09 f8                	or     eax,edi
c0027ae8:	0f 95 c0             	setne  al
c0027aeb:	0f b6 c0             	movzx  eax,al
c0027aee:	89 c7                	mov    edi,eax
c0027af0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027af5:	29 d9                	sub    ecx,ebx
c0027af7:	d3 ee                	shr    esi,cl
c0027af9:	09 f7                	or     edi,esi
c0027afb:	31 db                	xor    ebx,ebx
c0027afd:	eb 3b                	jmp    c0027b3a <__muldf3+0x292>
c0027aff:	83 c3 1f             	add    ebx,0x1f
c0027b02:	89 f0                	mov    eax,esi
c0027b04:	88 d9                	mov    cl,bl
c0027b06:	d3 e0                	shl    eax,cl
c0027b08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0b:	89 f8                	mov    eax,edi
c0027b0d:	88 d1                	mov    cl,dl
c0027b0f:	d3 e8                	shr    eax,cl
c0027b11:	89 c1                	mov    ecx,eax
c0027b13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b16:	09 c8                	or     eax,ecx
c0027b18:	88 d9                	mov    cl,bl
c0027b1a:	d3 e7                	shl    edi,cl
c0027b1c:	31 db                	xor    ebx,ebx
c0027b1e:	85 ff                	test   edi,edi
c0027b20:	0f 95 c3             	setne  bl
c0027b23:	89 df                	mov    edi,ebx
c0027b25:	09 c7                	or     edi,eax
c0027b27:	88 d1                	mov    cl,dl
c0027b29:	d3 ee                	shr    esi,cl
c0027b2b:	31 db                	xor    ebx,ebx
c0027b2d:	eb 0d                	jmp    c0027b3c <__muldf3+0x294>
c0027b2f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027b34:	eb 02                	jmp    c0027b38 <__muldf3+0x290>
c0027b36:	31 db                	xor    ebx,ebx
c0027b38:	31 ff                	xor    edi,edi
c0027b3a:	31 f6                	xor    esi,esi
c0027b3c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b3f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027b42:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b47:	09 c3                	or     ebx,eax
c0027b49:	c1 e3 14             	shl    ebx,0x14
c0027b4c:	89 f0                	mov    eax,esi
c0027b4e:	c1 e8 0b             	shr    eax,0xb
c0027b51:	09 c3                	or     ebx,eax
c0027b53:	89 f8                	mov    eax,edi
c0027b55:	c1 e8 0b             	shr    eax,0xb
c0027b58:	c1 e6 15             	shl    esi,0x15
c0027b5b:	09 c6                	or     esi,eax
c0027b5d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027b63:	0f 95 c1             	setne  cl
c0027b66:	09 c8                	or     eax,ecx
c0027b68:	83 e0 01             	and    eax,0x1
c0027b6b:	c1 ef 0a             	shr    edi,0xa
c0027b6e:	21 c7                	and    edi,eax
c0027b70:	01 f7                	add    edi,esi
c0027b72:	83 d3 00             	adc    ebx,0x0
c0027b75:	89 da                	mov    edx,ebx
c0027b77:	eb 03                	jmp    c0027b7c <__muldf3+0x2d4>
c0027b79:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b7c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027b7f:	89 f8                	mov    eax,edi
c0027b81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027b84:	83 c4 24             	add    esp,0x24
c0027b87:	5b                   	pop    ebx
c0027b88:	5e                   	pop    esi
c0027b89:	5f                   	pop    edi
c0027b8a:	5d                   	pop    ebp
c0027b8b:	c3                   	ret    

c0027b8c <__divdf3>:
c0027b8c:	55                   	push   ebp
c0027b8d:	89 e5                	mov    ebp,esp
c0027b8f:	57                   	push   edi
c0027b90:	56                   	push   esi
c0027b91:	53                   	push   ebx
c0027b92:	83 ec 2c             	sub    esp,0x2c
c0027b95:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b98:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b9e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ba1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ba4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ba7:	89 ce                	mov    esi,ecx
c0027ba9:	89 c8                	mov    eax,ecx
c0027bab:	c1 f8 14             	sar    eax,0x14
c0027bae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bb1:	89 f8                	mov    eax,edi
c0027bb3:	89 fb                	mov    ebx,edi
c0027bb5:	c1 e3 0b             	shl    ebx,0xb
c0027bb8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027bbb:	c1 e6 0b             	shl    esi,0xb
c0027bbe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bc4:	c1 e8 15             	shr    eax,0x15
c0027bc7:	09 c6                	or     esi,eax
c0027bc9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027bcc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bcf:	89 c2                	mov    edx,eax
c0027bd1:	c1 fa 14             	sar    edx,0x14
c0027bd4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027bd7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bda:	89 de                	mov    esi,ebx
c0027bdc:	c1 e6 0b             	shl    esi,0xb
c0027bdf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027be2:	c1 e0 0b             	shl    eax,0xb
c0027be5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027bea:	c1 eb 15             	shr    ebx,0x15
c0027bed:	09 d8                	or     eax,ebx
c0027bef:	89 c2                	mov    edx,eax
c0027bf1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bf4:	25 ff 07 00 00       	and    eax,0x7ff
c0027bf9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027bfc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c05:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c08:	29 d8                	sub    eax,ebx
c0027c0a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c0f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c12:	46                   	inc    esi
c0027c13:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c19:	0f 85 a5 00 00 00    	jne    c0027cc4 <__divdf3+0x138>
c0027c1f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c22:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c25:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c29:	74 2a                	je     c0027c55 <__divdf3+0xc9>
c0027c2b:	85 f6                	test   esi,esi
c0027c2d:	0f 85 cc 02 00 00    	jne    c0027eff <__divdf3+0x373>
c0027c33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c36:	40                   	inc    eax
c0027c37:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c3c:	75 26                	jne    c0027c64 <__divdf3+0xd8>
c0027c3e:	85 db                	test   ebx,ebx
c0027c40:	74 22                	je     c0027c64 <__divdf3+0xd8>
c0027c42:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c45:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c4b:	09 d0                	or     eax,edx
c0027c4d:	0f 85 ac 02 00 00    	jne    c0027eff <__divdf3+0x373>
c0027c53:	eb 63                	jmp    c0027cb8 <__divdf3+0x12c>
c0027c55:	85 f6                	test   esi,esi
c0027c57:	75 22                	jne    c0027c7b <__divdf3+0xef>
c0027c59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c5c:	40                   	inc    eax
c0027c5d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c62:	74 36                	je     c0027c9a <__divdf3+0x10e>
c0027c64:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c68:	0f 89 91 02 00 00    	jns    c0027eff <__divdf3+0x373>
c0027c6e:	89 f8                	mov    eax,edi
c0027c70:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c76:	e9 80 02 00 00       	jmp    c0027efb <__divdf3+0x36f>
c0027c7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c7e:	01 f6                	add    esi,esi
c0027c80:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c83:	c1 ef 1f             	shr    edi,0x1f
c0027c86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c89:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027c8c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027c8f:	09 f7                	or     edi,esi
c0027c91:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027c94:	78 2e                	js     c0027cc4 <__divdf3+0x138>
c0027c96:	89 c8                	mov    eax,ecx
c0027c98:	eb e1                	jmp    c0027c7b <__divdf3+0xef>
c0027c9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c9d:	09 d0                	or     eax,edx
c0027c9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ca3:	74 0f                	je     c0027cb4 <__divdf3+0x128>
c0027ca5:	85 c0                	test   eax,eax
c0027ca7:	74 bb                	je     c0027c64 <__divdf3+0xd8>
c0027ca9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027caf:	e9 4b 02 00 00       	jmp    c0027eff <__divdf3+0x373>
c0027cb4:	85 c0                	test   eax,eax
c0027cb6:	75 ac                	jne    c0027c64 <__divdf3+0xd8>
c0027cb8:	31 ff                	xor    edi,edi
c0027cba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027cbf:	e9 3b 02 00 00       	jmp    c0027eff <__divdf3+0x373>
c0027cc4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cc7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027cca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027cd0:	75 6b                	jne    c0027d3d <__divdf3+0x1b1>
c0027cd2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cd5:	09 d6                	or     esi,edx
c0027cd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027cdb:	74 28                	je     c0027d05 <__divdf3+0x179>
c0027cdd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ce0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ce3:	85 f6                	test   esi,esi
c0027ce5:	0f 85 14 02 00 00    	jne    c0027eff <__divdf3+0x373>
c0027ceb:	31 ff                	xor    edi,edi
c0027ced:	31 c9                	xor    ecx,ecx
c0027cef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cf2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027cf5:	0f 89 04 02 00 00    	jns    c0027eff <__divdf3+0x373>
c0027cfb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d00:	e9 fa 01 00 00       	jmp    c0027eff <__divdf3+0x373>
c0027d05:	85 f6                	test   esi,esi
c0027d07:	75 1b                	jne    c0027d24 <__divdf3+0x198>
c0027d09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d0c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d0f:	25 00 00 00 80       	and    eax,0x80000000
c0027d14:	31 c9                	xor    ecx,ecx
c0027d16:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d1b:	89 cf                	mov    edi,ecx
c0027d1d:	89 c1                	mov    ecx,eax
c0027d1f:	e9 db 01 00 00       	jmp    c0027eff <__divdf3+0x373>
c0027d24:	01 d2                	add    edx,edx
c0027d26:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d29:	c1 eb 1f             	shr    ebx,0x1f
c0027d2c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d2f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027d32:	8d 48 01             	lea    ecx,[eax+0x1]
c0027d35:	09 da                	or     edx,ebx
c0027d37:	78 04                	js     c0027d3d <__divdf3+0x1b1>
c0027d39:	89 c8                	mov    eax,ecx
c0027d3b:	eb e7                	jmp    c0027d24 <__divdf3+0x198>
c0027d3d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d40:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d46:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d4c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027d4f:	39 d6                	cmp    esi,edx
c0027d51:	77 0d                	ja     c0027d60 <__divdf3+0x1d4>
c0027d53:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027d56:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027d59:	72 1b                	jb     c0027d76 <__divdf3+0x1ea>
c0027d5b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027d5e:	75 16                	jne    c0027d76 <__divdf3+0x1ea>
c0027d60:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d63:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d66:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027d69:	83 de 00             	sbb    esi,0x0
c0027d6c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027d6f:	ba 01 00 00 00       	mov    edx,0x1
c0027d74:	eb 02                	jmp    c0027d78 <__divdf3+0x1ec>
c0027d76:	31 d2                	xor    edx,edx
c0027d78:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027d7f:	31 ff                	xor    edi,edi
c0027d81:	01 ff                	add    edi,edi
c0027d83:	89 d1                	mov    ecx,edx
c0027d85:	c1 e9 1f             	shr    ecx,0x1f
c0027d88:	09 cf                	or     edi,ecx
c0027d8a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027d8d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027d90:	89 da                	mov    edx,ebx
c0027d92:	89 f3                	mov    ebx,esi
c0027d94:	8d 34 36             	lea    esi,[esi+esi*1]
c0027d97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d9a:	c1 e9 1f             	shr    ecx,0x1f
c0027d9d:	09 ce                	or     esi,ecx
c0027d9f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027da2:	01 c9                	add    ecx,ecx
c0027da4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027da7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027daa:	85 db                	test   ebx,ebx
c0027dac:	78 29                	js     c0027dd7 <__divdf3+0x24b>
c0027dae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027db1:	72 07                	jb     c0027dba <__divdf3+0x22e>
c0027db3:	75 3c                	jne    c0027df1 <__divdf3+0x265>
c0027db5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027db8:	77 37                	ja     c0027df1 <__divdf3+0x265>
c0027dba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dbd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027dc0:	31 d2                	xor    edx,edx
c0027dc2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027dc5:	0f 97 c2             	seta   dl
c0027dc8:	29 d6                	sub    esi,edx
c0027dca:	89 d9                	mov    ecx,ebx
c0027dcc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027dcf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027dd2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027dd5:	eb 17                	jmp    c0027dee <__divdf3+0x262>
c0027dd7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dda:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ddd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027de0:	0f 97 c1             	seta   cl
c0027de3:	0f b6 c9             	movzx  ecx,cl
c0027de6:	29 ce                	sub    esi,ecx
c0027de8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027deb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027dee:	83 ca 01             	or     edx,0x1
c0027df1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027df4:	75 8b                	jne    c0027d81 <__divdf3+0x1f5>
c0027df6:	c1 e7 09             	shl    edi,0x9
c0027df9:	89 d1                	mov    ecx,edx
c0027dfb:	c1 e9 17             	shr    ecx,0x17
c0027dfe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e01:	09 f3                	or     ebx,esi
c0027e03:	0f 95 c3             	setne  bl
c0027e06:	0f b6 db             	movzx  ebx,bl
c0027e09:	c1 e2 09             	shl    edx,0x9
c0027e0c:	09 d3                	or     ebx,edx
c0027e0e:	89 ca                	mov    edx,ecx
c0027e10:	09 fa                	or     edx,edi
c0027e12:	78 0c                	js     c0027e20 <__divdf3+0x294>
c0027e14:	01 d2                	add    edx,edx
c0027e16:	89 d9                	mov    ecx,ebx
c0027e18:	c1 e9 1f             	shr    ecx,0x1f
c0027e1b:	09 ca                	or     edx,ecx
c0027e1d:	01 db                	add    ebx,ebx
c0027e1f:	48                   	dec    eax
c0027e20:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e25:	0f 8f 83 00 00 00    	jg     c0027eae <__divdf3+0x322>
c0027e2b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e31:	85 c0                	test   eax,eax
c0027e33:	0f 8f 82 00 00 00    	jg     c0027ebb <__divdf3+0x32f>
c0027e39:	83 f8 cc             	cmp    eax,0xffffffcc
c0027e3c:	7c 77                	jl     c0027eb5 <__divdf3+0x329>
c0027e3e:	be 01 00 00 00       	mov    esi,0x1
c0027e43:	29 c6                	sub    esi,eax
c0027e45:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e4b:	83 fe 1f             	cmp    esi,0x1f
c0027e4e:	7e 2f                	jle    c0027e7f <__divdf3+0x2f3>
c0027e50:	83 fe 20             	cmp    esi,0x20
c0027e53:	75 0a                	jne    c0027e5f <__divdf3+0x2d3>
c0027e55:	85 db                	test   ebx,ebx
c0027e57:	0f 95 c3             	setne  bl
c0027e5a:	0f b6 db             	movzx  ebx,bl
c0027e5d:	eb 1a                	jmp    c0027e79 <__divdf3+0x2ed>
c0027e5f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027e62:	89 d7                	mov    edi,edx
c0027e64:	d3 e7                	shl    edi,cl
c0027e66:	89 f9                	mov    ecx,edi
c0027e68:	09 d9                	or     ecx,ebx
c0027e6a:	0f 95 c3             	setne  bl
c0027e6d:	0f b6 db             	movzx  ebx,bl
c0027e70:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e75:	29 c1                	sub    ecx,eax
c0027e77:	d3 ea                	shr    edx,cl
c0027e79:	09 d3                	or     ebx,edx
c0027e7b:	31 c0                	xor    eax,eax
c0027e7d:	eb 3a                	jmp    c0027eb9 <__divdf3+0x32d>
c0027e7f:	83 c0 1f             	add    eax,0x1f
c0027e82:	89 d7                	mov    edi,edx
c0027e84:	88 c1                	mov    cl,al
c0027e86:	d3 e7                	shl    edi,cl
c0027e88:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e8b:	89 df                	mov    edi,ebx
c0027e8d:	89 f1                	mov    ecx,esi
c0027e8f:	d3 ef                	shr    edi,cl
c0027e91:	89 f9                	mov    ecx,edi
c0027e93:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e96:	09 cf                	or     edi,ecx
c0027e98:	88 c1                	mov    cl,al
c0027e9a:	d3 e3                	shl    ebx,cl
c0027e9c:	85 db                	test   ebx,ebx
c0027e9e:	0f 95 c3             	setne  bl
c0027ea1:	0f b6 db             	movzx  ebx,bl
c0027ea4:	09 fb                	or     ebx,edi
c0027ea6:	89 f1                	mov    ecx,esi
c0027ea8:	d3 ea                	shr    edx,cl
c0027eaa:	31 c0                	xor    eax,eax
c0027eac:	eb 0d                	jmp    c0027ebb <__divdf3+0x32f>
c0027eae:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027eb3:	eb 02                	jmp    c0027eb7 <__divdf3+0x32b>
c0027eb5:	31 c0                	xor    eax,eax
c0027eb7:	31 db                	xor    ebx,ebx
c0027eb9:	31 d2                	xor    edx,edx
c0027ebb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027ebe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027ec1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027ec7:	09 c8                	or     eax,ecx
c0027ec9:	c1 e0 14             	shl    eax,0x14
c0027ecc:	89 d1                	mov    ecx,edx
c0027ece:	c1 e9 0b             	shr    ecx,0xb
c0027ed1:	09 c8                	or     eax,ecx
c0027ed3:	89 c6                	mov    esi,eax
c0027ed5:	89 d9                	mov    ecx,ebx
c0027ed7:	c1 e9 0b             	shr    ecx,0xb
c0027eda:	c1 e2 15             	shl    edx,0x15
c0027edd:	09 ca                	or     edx,ecx
c0027edf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027ee5:	0f 95 c0             	setne  al
c0027ee8:	09 c1                	or     ecx,eax
c0027eea:	83 e1 01             	and    ecx,0x1
c0027eed:	c1 eb 0a             	shr    ebx,0xa
c0027ef0:	21 cb                	and    ebx,ecx
c0027ef2:	01 d3                	add    ebx,edx
c0027ef4:	89 d8                	mov    eax,ebx
c0027ef6:	83 d6 00             	adc    esi,0x0
c0027ef9:	89 f2                	mov    edx,esi
c0027efb:	89 c7                	mov    edi,eax
c0027efd:	89 d1                	mov    ecx,edx
c0027eff:	89 f8                	mov    eax,edi
c0027f01:	89 ca                	mov    edx,ecx
c0027f03:	83 c4 2c             	add    esp,0x2c
c0027f06:	5b                   	pop    ebx
c0027f07:	5e                   	pop    esi
c0027f08:	5f                   	pop    edi
c0027f09:	5d                   	pop    ebp
c0027f0a:	c3                   	ret    

c0027f0b <__floatsidf>:
c0027f0b:	55                   	push   ebp
c0027f0c:	89 e5                	mov    ebp,esp
c0027f0e:	56                   	push   esi
c0027f0f:	53                   	push   ebx
c0027f10:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f13:	85 db                	test   ebx,ebx
c0027f15:	7e 15                	jle    c0027f2c <__floatsidf+0x21>
c0027f17:	0f bd cb             	bsr    ecx,ebx
c0027f1a:	83 f1 1f             	xor    ecx,0x1f
c0027f1d:	d3 e3                	shl    ebx,cl
c0027f1f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f25:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f2a:	eb 21                	jmp    c0027f4d <__floatsidf+0x42>
c0027f2c:	b8 00 00 00 00       	mov    eax,0x0
c0027f31:	ba 00 00 00 00       	mov    edx,0x0
c0027f36:	74 2a                	je     c0027f62 <__floatsidf+0x57>
c0027f38:	f7 db                	neg    ebx
c0027f3a:	0f bd cb             	bsr    ecx,ebx
c0027f3d:	83 f1 1f             	xor    ecx,0x1f
c0027f40:	d3 e3                	shl    ebx,cl
c0027f42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f48:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027f4d:	29 c8                	sub    eax,ecx
c0027f4f:	c1 e0 14             	shl    eax,0x14
c0027f52:	89 c1                	mov    ecx,eax
c0027f54:	89 de                	mov    esi,ebx
c0027f56:	c1 ee 0b             	shr    esi,0xb
c0027f59:	09 f1                	or     ecx,esi
c0027f5b:	89 ca                	mov    edx,ecx
c0027f5d:	c1 e3 15             	shl    ebx,0x15
c0027f60:	89 d8                	mov    eax,ebx
c0027f62:	5b                   	pop    ebx
c0027f63:	5e                   	pop    esi
c0027f64:	5d                   	pop    ebp
c0027f65:	c3                   	ret    

c0027f66 <__floatunsidf>:
c0027f66:	55                   	push   ebp
c0027f67:	89 e5                	mov    ebp,esp
c0027f69:	56                   	push   esi
c0027f6a:	53                   	push   ebx
c0027f6b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f6e:	85 db                	test   ebx,ebx
c0027f70:	74 2a                	je     c0027f9c <__floatunsidf+0x36>
c0027f72:	0f bd cb             	bsr    ecx,ebx
c0027f75:	83 f1 1f             	xor    ecx,0x1f
c0027f78:	d3 e3                	shl    ebx,cl
c0027f7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f80:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f85:	29 c8                	sub    eax,ecx
c0027f87:	c1 e0 14             	shl    eax,0x14
c0027f8a:	89 c1                	mov    ecx,eax
c0027f8c:	89 de                	mov    esi,ebx
c0027f8e:	c1 ee 0b             	shr    esi,0xb
c0027f91:	09 f1                	or     ecx,esi
c0027f93:	89 ca                	mov    edx,ecx
c0027f95:	c1 e3 15             	shl    ebx,0x15
c0027f98:	89 d8                	mov    eax,ebx
c0027f9a:	eb 04                	jmp    c0027fa0 <__floatunsidf+0x3a>
c0027f9c:	31 c0                	xor    eax,eax
c0027f9e:	31 d2                	xor    edx,edx
c0027fa0:	5b                   	pop    ebx
c0027fa1:	5e                   	pop    esi
c0027fa2:	5d                   	pop    ebp
c0027fa3:	c3                   	ret    

c0027fa4 <__fixdfsi>:
c0027fa4:	55                   	push   ebp
c0027fa5:	89 e5                	mov    ebp,esp
c0027fa7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027faa:	89 d1                	mov    ecx,edx
c0027fac:	c1 e1 0b             	shl    ecx,0xb
c0027faf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027fb8:	c1 e8 15             	shr    eax,0x15
c0027fbb:	09 c1                	or     ecx,eax
c0027fbd:	c1 fa 14             	sar    edx,0x14
c0027fc0:	78 1f                	js     c0027fe1 <__fixdfsi+0x3d>
c0027fc2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027fc8:	31 c0                	xor    eax,eax
c0027fca:	83 fa 1e             	cmp    edx,0x1e
c0027fcd:	77 40                	ja     c002800f <__fixdfsi+0x6b>
c0027fcf:	89 c8                	mov    eax,ecx
c0027fd1:	0d 00 00 00 80       	or     eax,0x80000000
c0027fd6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fdb:	29 d1                	sub    ecx,edx
c0027fdd:	d3 e8                	shr    eax,cl
c0027fdf:	eb 2e                	jmp    c002800f <__fixdfsi+0x6b>
c0027fe1:	31 c0                	xor    eax,eax
c0027fe3:	81 c2 01 04 00 00    	add    edx,0x401
c0027fe9:	78 24                	js     c002800f <__fixdfsi+0x6b>
c0027feb:	83 fa 1e             	cmp    edx,0x1e
c0027fee:	7e 09                	jle    c0027ff9 <__fixdfsi+0x55>
c0027ff0:	83 fa 1f             	cmp    edx,0x1f
c0027ff3:	75 18                	jne    c002800d <__fixdfsi+0x69>
c0027ff5:	85 c9                	test   ecx,ecx
c0027ff7:	75 14                	jne    c002800d <__fixdfsi+0x69>
c0027ff9:	89 c8                	mov    eax,ecx
c0027ffb:	0d 00 00 00 80       	or     eax,0x80000000
c0028000:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028005:	29 d1                	sub    ecx,edx
c0028007:	d3 e8                	shr    eax,cl
c0028009:	f7 d8                	neg    eax
c002800b:	eb 02                	jmp    c002800f <__fixdfsi+0x6b>
c002800d:	31 c0                	xor    eax,eax
c002800f:	5d                   	pop    ebp
c0028010:	c3                   	ret    

c0028011 <__fixunsdfsi>:
c0028011:	55                   	push   ebp
c0028012:	89 e5                	mov    ebp,esp
c0028014:	53                   	push   ebx
c0028015:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028018:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002801b:	89 d3                	mov    ebx,edx
c002801d:	c1 fb 14             	sar    ebx,0x14
c0028020:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028026:	31 c0                	xor    eax,eax
c0028028:	83 fb 1f             	cmp    ebx,0x1f
c002802b:	77 1d                	ja     c002804a <__fixunsdfsi+0x39>
c002802d:	89 d0                	mov    eax,edx
c002802f:	c1 e0 0b             	shl    eax,0xb
c0028032:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028037:	c1 e9 15             	shr    ecx,0x15
c002803a:	09 c8                	or     eax,ecx
c002803c:	0d 00 00 00 80       	or     eax,0x80000000
c0028041:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028046:	29 d9                	sub    ecx,ebx
c0028048:	d3 e8                	shr    eax,cl
c002804a:	5b                   	pop    ebx
c002804b:	5d                   	pop    ebp
c002804c:	c3                   	ret    

c002804d <__cmpdf2>:
c002804d:	55                   	push   ebp
c002804e:	89 e5                	mov    ebp,esp
c0028050:	57                   	push   edi
c0028051:	56                   	push   esi
c0028052:	53                   	push   ebx
c0028053:	83 ec 0c             	sub    esp,0xc
c0028056:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028059:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002805c:	89 ca                	mov    edx,ecx
c002805e:	c1 ea 14             	shr    edx,0x14
c0028061:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028067:	89 cb                	mov    ebx,ecx
c0028069:	c1 fb 1f             	sar    ebx,0x1f
c002806c:	31 da                	xor    edx,ebx
c002806e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028071:	89 df                	mov    edi,ebx
c0028073:	c1 e7 0b             	shl    edi,0xb
c0028076:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028079:	c1 e1 0b             	shl    ecx,0xb
c002807c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028082:	c1 eb 15             	shr    ebx,0x15
c0028085:	09 d9                	or     ecx,ebx
c0028087:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002808a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002808d:	89 ce                	mov    esi,ecx
c002808f:	c1 ee 14             	shr    esi,0x14
c0028092:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028098:	89 cb                	mov    ebx,ecx
c002809a:	c1 fb 1f             	sar    ebx,0x1f
c002809d:	31 de                	xor    esi,ebx
c002809f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00280a2:	89 df                	mov    edi,ebx
c00280a4:	c1 e7 0b             	shl    edi,0xb
c00280a7:	c1 e1 0b             	shl    ecx,0xb
c00280aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280b0:	c1 eb 15             	shr    ebx,0x15
c00280b3:	09 d9                	or     ecx,ebx
c00280b5:	89 d3                	mov    ebx,edx
c00280b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00280bd:	43                   	inc    ebx
c00280be:	83 fb 01             	cmp    ebx,0x1
c00280c1:	77 08                	ja     c00280cb <__cmpdf2+0x7e>
c00280c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00280c9:	75 68                	jne    c0028133 <__cmpdf2+0xe6>
c00280cb:	89 f3                	mov    ebx,esi
c00280cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00280d3:	43                   	inc    ebx
c00280d4:	83 fb 01             	cmp    ebx,0x1
c00280d7:	77 06                	ja     c00280df <__cmpdf2+0x92>
c00280d9:	89 fb                	mov    ebx,edi
c00280db:	09 cb                	or     ebx,ecx
c00280dd:	75 54                	jne    c0028133 <__cmpdf2+0xe6>
c00280df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00280e2:	09 f8                	or     eax,edi
c00280e4:	09 c8                	or     eax,ecx
c00280e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00280e9:	75 12                	jne    c00280fd <__cmpdf2+0xb0>
c00280eb:	8d 42 01             	lea    eax,[edx+0x1]
c00280ee:	83 f8 01             	cmp    eax,0x1
c00280f1:	77 0a                	ja     c00280fd <__cmpdf2+0xb0>
c00280f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00280f6:	31 c0                	xor    eax,eax
c00280f8:	83 fb 01             	cmp    ebx,0x1
c00280fb:	76 36                	jbe    c0028133 <__cmpdf2+0xe6>
c00280fd:	b8 01 00 00 00       	mov    eax,0x1
c0028102:	39 f2                	cmp    edx,esi
c0028104:	7f 2d                	jg     c0028133 <__cmpdf2+0xe6>
c0028106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002810b:	7c 26                	jl     c0028133 <__cmpdf2+0xe6>
c002810d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028110:	77 07                	ja     c0028119 <__cmpdf2+0xcc>
c0028112:	72 16                	jb     c002812a <__cmpdf2+0xdd>
c0028114:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028117:	76 0a                	jbe    c0028123 <__cmpdf2+0xd6>
c0028119:	89 d0                	mov    eax,edx
c002811b:	c1 f8 1f             	sar    eax,0x1f
c002811e:	83 c8 01             	or     eax,0x1
c0028121:	eb 10                	jmp    c0028133 <__cmpdf2+0xe6>
c0028123:	b8 00 00 00 00       	mov    eax,0x0
c0028128:	73 09                	jae    c0028133 <__cmpdf2+0xe6>
c002812a:	89 d0                	mov    eax,edx
c002812c:	c1 f8 1f             	sar    eax,0x1f
c002812f:	83 e0 02             	and    eax,0x2
c0028132:	48                   	dec    eax
c0028133:	83 c4 0c             	add    esp,0xc
c0028136:	5b                   	pop    ebx
c0028137:	5e                   	pop    esi
c0028138:	5f                   	pop    edi
c0028139:	5d                   	pop    ebp
c002813a:	c3                   	ret    

c002813b <__eqdf2>:
c002813b:	55                   	push   ebp
c002813c:	89 e5                	mov    ebp,esp
c002813e:	50                   	push   eax
c002813f:	6a 01                	push   0x1
c0028141:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028144:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028147:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002814a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002814d:	e8 fb fe ff ff       	call   c002804d <__cmpdf2>
c0028152:	83 c4 18             	add    esp,0x18
c0028155:	c9                   	leave  
c0028156:	c3                   	ret    

c0028157 <__nedf2>:
c0028157:	eb e2                	jmp    c002813b <__eqdf2>

c0028159 <__gtdf2>:
c0028159:	55                   	push   ebp
c002815a:	89 e5                	mov    ebp,esp
c002815c:	50                   	push   eax
c002815d:	6a ff                	push   0xffffffff
c002815f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028162:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028165:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028168:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002816b:	e8 dd fe ff ff       	call   c002804d <__cmpdf2>
c0028170:	83 c4 18             	add    esp,0x18
c0028173:	c9                   	leave  
c0028174:	c3                   	ret    

c0028175 <__gedf2>:
c0028175:	eb e2                	jmp    c0028159 <__gtdf2>

c0028177 <__ltdf2>:
c0028177:	eb c2                	jmp    c002813b <__eqdf2>

c0028179 <__ledf2>:
c0028179:	eb c0                	jmp    c002813b <__eqdf2>

c002817b <__truncdfsf2>:
c002817b:	55                   	push   ebp
c002817c:	89 e5                	mov    ebp,esp
c002817e:	57                   	push   edi
c002817f:	56                   	push   esi
c0028180:	53                   	push   ebx
c0028181:	83 ec 0c             	sub    esp,0xc
c0028184:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028187:	89 d1                	mov    ecx,edx
c0028189:	c1 f9 14             	sar    ecx,0x14
c002818c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002818f:	89 df                	mov    edi,ebx
c0028191:	c1 e7 0b             	shl    edi,0xb
c0028194:	89 d0                	mov    eax,edx
c0028196:	c1 e0 0b             	shl    eax,0xb
c0028199:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002819e:	c1 eb 15             	shr    ebx,0x15
c00281a1:	09 d8                	or     eax,ebx
c00281a3:	89 cb                	mov    ebx,ecx
c00281a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00281b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00281b7:	0f 86 9e 00 00 00    	jbe    c002825b <__truncdfsf2+0xe0>
c00281bd:	85 db                	test   ebx,ebx
c00281bf:	75 0a                	jne    c00281cb <__truncdfsf2+0x50>
c00281c1:	c1 fa 17             	sar    edx,0x17
c00281c4:	30 d2                	xor    dl,dl
c00281c6:	e9 84 00 00 00       	jmp    c002824f <__truncdfsf2+0xd4>
c00281cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00281d1:	83 fe 83             	cmp    esi,0xffffff83
c00281d4:	7d 4b                	jge    c0028221 <__truncdfsf2+0xa6>
c00281d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00281db:	29 f1                	sub    ecx,esi
c00281dd:	83 f9 1f             	cmp    ecx,0x1f
c00281e0:	7f 6b                	jg     c002824d <__truncdfsf2+0xd2>
c00281e2:	0d 00 00 00 80       	or     eax,0x80000000
c00281e7:	89 c3                	mov    ebx,eax
c00281e9:	d3 eb                	shr    ebx,cl
c00281eb:	be 01 00 00 00       	mov    esi,0x1
c00281f0:	d3 e6                	shl    esi,cl
c00281f2:	4e                   	dec    esi
c00281f3:	21 f0                	and    eax,esi
c00281f5:	09 f8                	or     eax,edi
c00281f7:	0f 95 c0             	setne  al
c00281fa:	0f b6 c0             	movzx  eax,al
c00281fd:	09 c3                	or     ebx,eax
c00281ff:	89 d9                	mov    ecx,ebx
c0028201:	c1 e9 08             	shr    ecx,0x8
c0028204:	f6 c3 7f             	test   bl,0x7f
c0028207:	0f 95 c0             	setne  al
c002820a:	09 c8                	or     eax,ecx
c002820c:	83 e0 01             	and    eax,0x1
c002820f:	c1 eb 07             	shr    ebx,0x7
c0028212:	21 c3                	and    ebx,eax
c0028214:	81 e2 00 00 00 80    	and    edx,0x80000000
c002821a:	09 d1                	or     ecx,edx
c002821c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002821f:	eb 76                	jmp    c0028297 <__truncdfsf2+0x11c>
c0028221:	83 c6 80             	add    esi,0xffffff80
c0028224:	7e 1d                	jle    c0028243 <__truncdfsf2+0xc8>
c0028226:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002822c:	75 0b                	jne    c0028239 <__truncdfsf2+0xbe>
c002822e:	09 f8                	or     eax,edi
c0028230:	74 09                	je     c002823b <__truncdfsf2+0xc0>
c0028232:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028237:	eb 02                	jmp    c002823b <__truncdfsf2+0xc0>
c0028239:	31 c0                	xor    eax,eax
c002823b:	c1 fa 17             	sar    edx,0x17
c002823e:	80 ca ff             	or     dl,0xff
c0028241:	eb 0e                	jmp    c0028251 <__truncdfsf2+0xd6>
c0028243:	c1 fa 1f             	sar    edx,0x1f
c0028246:	c1 e2 08             	shl    edx,0x8
c0028249:	09 ca                	or     edx,ecx
c002824b:	eb 04                	jmp    c0028251 <__truncdfsf2+0xd6>
c002824d:	31 d2                	xor    edx,edx
c002824f:	31 c0                	xor    eax,eax
c0028251:	c1 e2 17             	shl    edx,0x17
c0028254:	c1 e8 08             	shr    eax,0x8
c0028257:	09 d0                	or     eax,edx
c0028259:	eb 3c                	jmp    c0028297 <__truncdfsf2+0x11c>
c002825b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028261:	89 ca                	mov    edx,ecx
c0028263:	c1 fa 0b             	sar    edx,0xb
c0028266:	c1 e2 08             	shl    edx,0x8
c0028269:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002826c:	31 db                	xor    ebx,ebx
c002826e:	85 ff                	test   edi,edi
c0028270:	0f 95 c3             	setne  bl
c0028273:	09 d8                	or     eax,ebx
c0028275:	89 c3                	mov    ebx,eax
c0028277:	c1 eb 08             	shr    ebx,0x8
c002827a:	a8 7f                	test   al,0x7f
c002827c:	0f 95 c2             	setne  dl
c002827f:	89 d6                	mov    esi,edx
c0028281:	09 de                	or     esi,ebx
c0028283:	83 e6 01             	and    esi,0x1
c0028286:	c1 e8 07             	shr    eax,0x7
c0028289:	21 f0                	and    eax,esi
c002828b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002828e:	09 ca                	or     edx,ecx
c0028290:	c1 e2 17             	shl    edx,0x17
c0028293:	09 da                	or     edx,ebx
c0028295:	01 d0                	add    eax,edx
c0028297:	83 c4 0c             	add    esp,0xc
c002829a:	5b                   	pop    ebx
c002829b:	5e                   	pop    esi
c002829c:	5f                   	pop    edi
c002829d:	5d                   	pop    ebp
c002829e:	c3                   	ret    

c002829f <__extendsfdf2>:
c002829f:	55                   	push   ebp
c00282a0:	89 e5                	mov    ebp,esp
c00282a2:	57                   	push   edi
c00282a3:	56                   	push   esi
c00282a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00282a7:	89 d1                	mov    ecx,edx
c00282a9:	c1 f9 17             	sar    ecx,0x17
c00282ac:	c1 e2 08             	shl    edx,0x8
c00282af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00282b5:	89 c8                	mov    eax,ecx
c00282b7:	80 e4 f8             	and    ah,0xf8
c00282ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00282bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00282c3:	75 27                	jne    c00282ec <__extendsfdf2+0x4d>
c00282c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00282cb:	75 18                	jne    c00282e5 <__extendsfdf2+0x46>
c00282cd:	85 d2                	test   edx,edx
c00282cf:	74 20                	je     c00282f1 <__extendsfdf2+0x52>
c00282d1:	41                   	inc    ecx
c00282d2:	01 d2                	add    edx,edx
c00282d4:	79 fb                	jns    c00282d1 <__extendsfdf2+0x32>
c00282d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00282dc:	29 c8                	sub    eax,ecx
c00282de:	05 81 03 00 00       	add    eax,0x381
c00282e3:	eb 0c                	jmp    c00282f1 <__extendsfdf2+0x52>
c00282e5:	05 00 07 00 00       	add    eax,0x700
c00282ea:	eb 05                	jmp    c00282f1 <__extendsfdf2+0x52>
c00282ec:	05 80 03 00 00       	add    eax,0x380
c00282f1:	c1 e0 14             	shl    eax,0x14
c00282f4:	89 c1                	mov    ecx,eax
c00282f6:	89 d0                	mov    eax,edx
c00282f8:	c1 e8 0b             	shr    eax,0xb
c00282fb:	09 c1                	or     ecx,eax
c00282fd:	c1 e2 15             	shl    edx,0x15
c0028300:	89 d0                	mov    eax,edx
c0028302:	89 ca                	mov    edx,ecx
c0028304:	5e                   	pop    esi
c0028305:	5f                   	pop    edi
c0028306:	5d                   	pop    ebp
c0028307:	c3                   	ret    
c0028308:	66 90                	xchg   ax,ax
c002830a:	66 90                	xchg   ax,ax
c002830c:	66 90                	xchg   ax,ax
c002830e:	66 90                	xchg   ax,ax

c0028310 <fabs>:
c0028310:	83 ec 0c             	sub    esp,0xc
c0028313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028317:	89 04 24             	mov    DWORD PTR [esp],eax
c002831a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002831e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028323:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028327:	dd 04 24             	fld    QWORD PTR [esp]
c002832a:	83 c4 0c             	add    esp,0xc
c002832d:	c3                   	ret    
c002832e:	66 90                	xchg   ax,ax

c0028330 <lrint>:
c0028330:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028334:	83 ec 04             	sub    esp,0x4
c0028337:	db 1c 24             	fistp  DWORD PTR [esp]
c002833a:	58                   	pop    eax
c002833b:	c3                   	ret    

c002833c <lrintf>:
c002833c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028340:	83 ec 04             	sub    esp,0x4
c0028343:	db 1c 24             	fistp  DWORD PTR [esp]
c0028346:	58                   	pop    eax
c0028347:	c3                   	ret    

Disassembly of section .init:

c0028348 <_init>:
c0028348:	55                   	push   ebp
c0028349:	89 e5                	mov    ebp,esp
c002834b:	e8 c8 7d fd ff       	call   c0000118 <frame_dummy>
c0028350:	e8 5b e0 ff ff       	call   c00263b0 <__do_global_ctors_aux>
c0028355:	5d                   	pop    ebp
c0028356:	c3                   	ret    

Disassembly of section .fini:

c0028357 <_fini>:
c0028357:	55                   	push   ebp
c0028358:	89 e5                	mov    ebp,esp
c002835a:	e8 49 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002835f:	5d                   	pop    ebp
c0028360:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028362 <Computer::~Computer()>:
c0028362:	83 ec 0c             	sub    esp,0xc
c0028365:	ba dc 9e 02 c0       	mov    edx,0xc0029edc
c002836a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002836e:	89 10                	mov    DWORD PTR [eax],edx
c0028370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028374:	83 ec 0c             	sub    esp,0xc
c0028377:	50                   	push   eax
c0028378:	e8 f3 b5 fe ff       	call   c0013970 <Device::~Device()>
c002837d:	83 c4 10             	add    esp,0x10
c0028380:	90                   	nop
c0028381:	83 c4 0c             	add    esp,0xc
c0028384:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028386 <Computer::~Computer()>:
c0028386:	83 ec 0c             	sub    esp,0xc
c0028389:	83 ec 0c             	sub    esp,0xc
c002838c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028390:	e8 cd ff ff ff       	call   c0028362 <Computer::~Computer()>
c0028395:	83 c4 10             	add    esp,0x10
c0028398:	83 ec 08             	sub    esp,0x8
c002839b:	68 ec 01 00 00       	push   0x1ec
c00283a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283a4:	e8 e8 a1 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00283a9:	83 c4 10             	add    esp,0x10
c00283ac:	83 c4 0c             	add    esp,0xc
c00283af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00283b0 <idleCommon()>:
c00283b0:	83 ec 0c             	sub    esp,0xc
c00283b3:	fa                   	cli    
c00283b4:	ff 05 a8 0d 03 c0    	inc    DWORD PTR ds:0xc0030da8
c00283ba:	e8 a0 55 ff ff       	call   c001d95f <schedule()>
c00283bf:	a1 a8 0d 03 c0       	mov    eax,ds:0xc0030da8
c00283c4:	48                   	dec    eax
c00283c5:	a3 a8 0d 03 c0       	mov    ds:0xc0030da8,eax
c00283ca:	75 01                	jne    c00283cd <idleCommon()+0x1d>
c00283cc:	fb                   	sti    
c00283cd:	83 c4 0c             	add    esp,0xc
c00283d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00283d2 <LinkedList<UnixFile>::~LinkedList()>:
c00283d2:	90                   	nop
c00283d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00283d4 <LinkedList<UnixFile>::LinkedList()>:
c00283d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028402:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002840d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028414:	90                   	nop
c0028415:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028416 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028416:	83 ec 0c             	sub    esp,0xc
c0028419:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002841e:	75 10                	jne    c0028430 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028420:	83 ec 0c             	sub    esp,0xc
c0028423:	68 18 a1 02 c0       	push   0xc002a118
c0028428:	e8 a8 19 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002842d:	83 c4 10             	add    esp,0x10
c0028430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028434:	8b 00                	mov    eax,DWORD PTR [eax]
c0028436:	85 c0                	test   eax,eax
c0028438:	74 34                	je     c002846e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028441:	85 c0                	test   eax,eax
c0028443:	74 29                	je     c002846e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028449:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028450:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028457:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002845b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028465:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002846c:	eb 65                	jmp    c00284d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002846e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028472:	8b 00                	mov    eax,DWORD PTR [eax]
c0028474:	85 c0                	test   eax,eax
c0028476:	75 4b                	jne    c00284c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002847f:	85 c0                	test   eax,eax
c0028481:	75 40                	jne    c00284c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028487:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002848b:	89 10                	mov    DWORD PTR [eax],edx
c002848d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028491:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028495:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002849f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284ad:	85 c0                	test   eax,eax
c00284af:	74 22                	je     c00284d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284b1:	83 ec 0c             	sub    esp,0xc
c00284b4:	68 3a a1 02 c0       	push   0xc002a13a
c00284b9:	e8 17 19 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00284be:	83 c4 10             	add    esp,0x10
c00284c1:	eb 10                	jmp    c00284d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284c3:	83 ec 0c             	sub    esp,0xc
c00284c6:	68 44 a1 02 c0       	push   0xc002a144
c00284cb:	e8 05 19 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00284d0:	83 c4 10             	add    esp,0x10
c00284d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284da:	8d 50 01             	lea    edx,[eax+0x1]
c00284dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284e4:	90                   	nop
c00284e5:	83 c4 0c             	add    esp,0xc
c00284e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00284ea <LinkedList<UnixFile>::getFirstElement()>:
c00284ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00284f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00284f2 <LinkedList<UnixFile>::removeFirst()>:
c00284f2:	83 ec 0c             	sub    esp,0xc
c00284f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00284fb:	85 c0                	test   eax,eax
c00284fd:	75 12                	jne    c0028511 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00284ff:	83 ec 0c             	sub    esp,0xc
c0028502:	68 50 a1 02 c0       	push   0xc002a150
c0028507:	e8 c9 18 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002850c:	83 c4 10             	add    esp,0x10
c002850f:	eb 7e                	jmp    c002858f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028515:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028518:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851b:	85 c0                	test   eax,eax
c002851d:	74 10                	je     c002852f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002851f:	83 ec 0c             	sub    esp,0xc
c0028522:	68 9b a1 02 c0       	push   0xc002a19b
c0028527:	e8 a9 18 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002852c:	83 c4 10             	add    esp,0x10
c002852f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028533:	8b 00                	mov    eax,DWORD PTR [eax]
c0028535:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028538:	85 c0                	test   eax,eax
c002853a:	75 33                	jne    c002856f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002853c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002854a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028555:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028558:	83 f8 01             	cmp    eax,0x1
c002855b:	74 21                	je     c002857e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002855d:	83 ec 0c             	sub    esp,0xc
c0028560:	68 74 a1 02 c0       	push   0xc002a174
c0028565:	e8 6b 18 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002856a:	83 c4 10             	add    esp,0x10
c002856d:	eb 0f                	jmp    c002857e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028573:	8b 00                	mov    eax,DWORD PTR [eax]
c0028575:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857c:	89 10                	mov    DWORD PTR [eax],edx
c002857e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028582:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028585:	8d 50 ff             	lea    edx,[eax-0x1]
c0028588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002858f:	83 c4 0c             	add    esp,0xc
c0028592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028594 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028598:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002859b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002859c <DriverlessDevice::~DriverlessDevice()>:
c002859c:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c00285a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285a5:	89 10                	mov    DWORD PTR [eax],edx
c00285a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ab:	50                   	push   eax
c00285ac:	e8 bf b3 fe ff       	call   c0013970 <Device::~Device()>
c00285b1:	83 c4 04             	add    esp,0x4
c00285b4:	90                   	nop
c00285b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00285b6 <DriverlessDevice::~DriverlessDevice()>:
c00285b6:	83 ec 0c             	sub    esp,0xc
c00285b9:	83 ec 0c             	sub    esp,0xc
c00285bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285c0:	e8 d7 ff ff ff       	call   c002859c <DriverlessDevice::~DriverlessDevice()>
c00285c5:	83 c4 10             	add    esp,0x10
c00285c8:	83 ec 08             	sub    esp,0x8
c00285cb:	68 58 01 00 00       	push   0x158
c00285d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285d4:	e8 b8 9f fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00285d9:	83 c4 10             	add    esp,0x10
c00285dc:	83 c4 0c             	add    esp,0xc
c00285df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00285e0 <LinkedList<Device>::addElement(Device*)>:
c00285e0:	83 ec 0c             	sub    esp,0xc
c00285e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285e8:	75 10                	jne    c00285fa <LinkedList<Device>::addElement(Device*)+0x1a>
c00285ea:	83 ec 0c             	sub    esp,0xc
c00285ed:	68 18 a1 02 c0       	push   0xc002a118
c00285f2:	e8 de 17 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00285f7:	83 c4 10             	add    esp,0x10
c00285fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028600:	85 c0                	test   eax,eax
c0028602:	74 3a                	je     c002863e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028608:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002860b:	85 c0                	test   eax,eax
c002860d:	74 2f                	je     c002863e <LinkedList<Device>::addElement(Device*)+0x5e>
c002860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028613:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002861a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028628:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002862b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028632:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002863c:	eb 68                	jmp    c00286a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002863e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028642:	8b 00                	mov    eax,DWORD PTR [eax]
c0028644:	85 c0                	test   eax,eax
c0028646:	75 4e                	jne    c0028696 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002864f:	85 c0                	test   eax,eax
c0028651:	75 43                	jne    c0028696 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002865b:	89 10                	mov    DWORD PTR [eax],edx
c002865d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028665:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028680:	85 c0                	test   eax,eax
c0028682:	74 22                	je     c00286a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028684:	83 ec 0c             	sub    esp,0xc
c0028687:	68 3a a1 02 c0       	push   0xc002a13a
c002868c:	e8 44 17 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028691:	83 c4 10             	add    esp,0x10
c0028694:	eb 10                	jmp    c00286a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028696:	83 ec 0c             	sub    esp,0xc
c0028699:	68 44 a1 02 c0       	push   0xc002a144
c002869e:	e8 32 17 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00286a3:	83 c4 10             	add    esp,0x10
c00286a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286ad:	8d 50 01             	lea    edx,[eax+0x1]
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286b7:	90                   	nop
c00286b8:	83 c4 0c             	add    esp,0xc
c00286bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00286bc <LinkedList<Device>::LinkedList()>:
c00286bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286fc:	90                   	nop
c00286fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00286fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00286fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028702:	8b 00                	mov    eax,DWORD PTR [eax]
c0028704:	85 c0                	test   eax,eax
c0028706:	75 0e                	jne    c0028716 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002870c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870f:	85 c0                	test   eax,eax
c0028711:	75 03                	jne    c0028716 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028713:	b0 01                	mov    al,0x1
c0028715:	c3                   	ret    
c0028716:	b0 00                	mov    al,0x0
c0028718:	90                   	nop
c0028719:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002871a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002871a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002871e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028720:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028722 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028722:	83 ec 0c             	sub    esp,0xc
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	8b 00                	mov    eax,DWORD PTR [eax]
c002872b:	85 c0                	test   eax,eax
c002872d:	75 15                	jne    c0028744 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002872f:	83 ec 0c             	sub    esp,0xc
c0028732:	68 50 a1 02 c0       	push   0xc002a150
c0028737:	e8 99 16 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002873c:	83 c4 10             	add    esp,0x10
c002873f:	e9 88 00 00 00       	jmp    c00287cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002874e:	85 c0                	test   eax,eax
c0028750:	0f 95 c0             	setne  al
c0028753:	84 c0                	test   al,al
c0028755:	74 10                	je     c0028767 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028757:	83 ec 0c             	sub    esp,0xc
c002875a:	68 9b a1 02 c0       	push   0xc002a19b
c002875f:	e8 71 16 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028764:	83 c4 10             	add    esp,0x10
c0028767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876b:	8b 00                	mov    eax,DWORD PTR [eax]
c002876d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028770:	85 c0                	test   eax,eax
c0028772:	0f 94 c0             	sete   al
c0028775:	84 c0                	test   al,al
c0028777:	74 33                	je     c00287ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028787:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002878e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028792:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028795:	83 f8 01             	cmp    eax,0x1
c0028798:	74 21                	je     c00287bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002879a:	83 ec 0c             	sub    esp,0xc
c002879d:	68 74 a1 02 c0       	push   0xc002a174
c00287a2:	e8 2e 16 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00287a7:	83 c4 10             	add    esp,0x10
c00287aa:	eb 0f                	jmp    c00287bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00287b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b9:	89 10                	mov    DWORD PTR [eax],edx
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c2:	8d 50 ff             	lea    edx,[eax-0x1]
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287cc:	83 c4 0c             	add    esp,0xc
c00287cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00287d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00287d0:	83 ec 0c             	sub    esp,0xc
c00287d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287d8:	75 10                	jne    c00287ea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	68 18 a1 02 c0       	push   0xc002a118
c00287e2:	e8 ee 15 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c00287e7:	83 c4 10             	add    esp,0x10
c00287ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f0:	85 c0                	test   eax,eax
c00287f2:	74 34                	je     c0028828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00287f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287fb:	85 c0                	test   eax,eax
c00287fd:	74 29                	je     c0028828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00287ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028806:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002880a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028815:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002881f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028826:	eb 65                	jmp    c002888d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	8b 00                	mov    eax,DWORD PTR [eax]
c002882e:	85 c0                	test   eax,eax
c0028830:	75 4b                	jne    c002887d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028839:	85 c0                	test   eax,eax
c002883b:	75 40                	jne    c002887d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028845:	89 10                	mov    DWORD PTR [eax],edx
c0028847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028859:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028867:	85 c0                	test   eax,eax
c0028869:	74 22                	je     c002888d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	68 3a a1 02 c0       	push   0xc002a13a
c0028873:	e8 5d 15 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028878:	83 c4 10             	add    esp,0x10
c002887b:	eb 10                	jmp    c002888d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	68 44 a1 02 c0       	push   0xc002a144
c0028885:	e8 4b 15 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c002888a:	83 c4 10             	add    esp,0x10
c002888d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028891:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028894:	8d 50 01             	lea    edx,[eax+0x1]
c0028897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002889e:	90                   	nop
c002889f:	83 c4 0c             	add    esp,0xc
c00288a2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00288a4 <ACPI::~ACPI()>:
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00288ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b0:	89 10                	mov    DWORD PTR [eax],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	50                   	push   eax
c00288ba:	e8 b1 b0 fe ff       	call   c0013970 <Device::~Device()>
c00288bf:	83 c4 10             	add    esp,0x10
c00288c2:	90                   	nop
c00288c3:	83 c4 0c             	add    esp,0xc
c00288c6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00288c8 <ACPI::~ACPI()>:
c00288c8:	83 ec 0c             	sub    esp,0xc
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d2:	e8 cd ff ff ff       	call   c00288a4 <ACPI::~ACPI()>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	83 ec 08             	sub    esp,0x8
c00288dd:	68 64 12 00 00       	push   0x1264
c00288e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e6:	e8 a6 9c fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c00288eb:	83 c4 10             	add    esp,0x10
c00288ee:	83 c4 0c             	add    esp,0xc
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00288f2 <LinkedList<Device>::~LinkedList()>:
c00288f2:	90                   	nop
c00288f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00288f4 <LinkedList<Device>::isEmpty()>:
c00288f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fa:	85 c0                	test   eax,eax
c00288fc:	75 0e                	jne    c002890c <LinkedList<Device>::isEmpty()+0x18>
c00288fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028902:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028905:	85 c0                	test   eax,eax
c0028907:	75 03                	jne    c002890c <LinkedList<Device>::isEmpty()+0x18>
c0028909:	b0 01                	mov    al,0x1
c002890b:	c3                   	ret    
c002890c:	b0 00                	mov    al,0x0
c002890e:	90                   	nop
c002890f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028910 <LinkedList<Device>::getFirstElement()>:
c0028910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028914:	8b 00                	mov    eax,DWORD PTR [eax]
c0028916:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028918 <LinkedList<Device>::removeFirst()>:
c0028918:	83 ec 0c             	sub    esp,0xc
c002891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028921:	85 c0                	test   eax,eax
c0028923:	75 15                	jne    c002893a <LinkedList<Device>::removeFirst()+0x22>
c0028925:	83 ec 0c             	sub    esp,0xc
c0028928:	68 50 a1 02 c0       	push   0xc002a150
c002892d:	e8 a3 14 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028932:	83 c4 10             	add    esp,0x10
c0028935:	e9 87 00 00 00       	jmp    c00289c1 <LinkedList<Device>::removeFirst()+0xa9>
c002893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028941:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028947:	85 c0                	test   eax,eax
c0028949:	74 10                	je     c002895b <LinkedList<Device>::removeFirst()+0x43>
c002894b:	83 ec 0c             	sub    esp,0xc
c002894e:	68 9b a1 02 c0       	push   0xc002a19b
c0028953:	e8 7d 14 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028958:	83 c4 10             	add    esp,0x10
c002895b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028961:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028967:	85 c0                	test   eax,eax
c0028969:	75 33                	jne    c002899e <LinkedList<Device>::removeFirst()+0x86>
c002896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028979:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028987:	83 f8 01             	cmp    eax,0x1
c002898a:	74 24                	je     c00289b0 <LinkedList<Device>::removeFirst()+0x98>
c002898c:	83 ec 0c             	sub    esp,0xc
c002898f:	68 74 a1 02 c0       	push   0xc002a174
c0028994:	e8 3c 14 ff ff       	call   c0019dd5 <Krnl::panic(char const*)>
c0028999:	83 c4 10             	add    esp,0x10
c002899c:	eb 12                	jmp    c00289b0 <LinkedList<Device>::removeFirst()+0x98>
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	89 10                	mov    DWORD PTR [eax],edx
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289c1:	83 c4 0c             	add    esp,0xc
c00289c4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00289c6 <CPU::~CPU()>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	ba 78 b4 02 c0       	mov    edx,0xc002b478
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	89 10                	mov    DWORD PTR [eax],edx
c00289d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d8:	83 ec 0c             	sub    esp,0xc
c00289db:	50                   	push   eax
c00289dc:	e8 8f af fe ff       	call   c0013970 <Device::~Device()>
c00289e1:	83 c4 10             	add    esp,0x10
c00289e4:	90                   	nop
c00289e5:	83 c4 0c             	add    esp,0xc
c00289e8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00289ea <CPU::~CPU()>:
c00289ea:	83 ec 0c             	sub    esp,0xc
c00289ed:	83 ec 0c             	sub    esp,0xc
c00289f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f4:	e8 cd ff ff ff       	call   c00289c6 <CPU::~CPU()>
c00289f9:	83 c4 10             	add    esp,0x10
c00289fc:	83 ec 08             	sub    esp,0x8
c00289ff:	68 98 11 00 00       	push   0x1198
c0028a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a08:	e8 84 9b fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	83 c4 0c             	add    esp,0xc
c0028a13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a14 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a14:	90                   	nop
c0028a15:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a16 <ThreadControlBlock::ThreadControlBlock()>:
c0028a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a1a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a25:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a30:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a3b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a46:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028a4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a51:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028a55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a59:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028a5d:	90                   	nop
c0028a5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028a60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028aa0:	90                   	nop
c0028aa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028aa2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028aa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aa6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aa9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028aaa <Vm::_FPUState::_FPUState()>:
c0028aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aae:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ab5:	90                   	nop
c0028ab6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028ab8 <PCI::~PCI()>:
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	ba a4 bf 02 c0       	mov    edx,0xc002bfa4
c0028ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac4:	89 10                	mov    DWORD PTR [eax],edx
c0028ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	50                   	push   eax
c0028ace:	e8 6d a8 fe ff       	call   c0013340 <Bus::~Bus()>
c0028ad3:	83 c4 10             	add    esp,0x10
c0028ad6:	90                   	nop
c0028ad7:	83 c4 0c             	add    esp,0xc
c0028ada:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028adc <PCI::~PCI()>:
c0028adc:	83 ec 0c             	sub    esp,0xc
c0028adf:	83 ec 0c             	sub    esp,0xc
c0028ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae6:	e8 cd ff ff ff       	call   c0028ab8 <PCI::~PCI()>
c0028aeb:	83 c4 10             	add    esp,0x10
c0028aee:	83 ec 08             	sub    esp,0x8
c0028af1:	68 5c 01 00 00       	push   0x15c
c0028af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028afa:	e8 92 9a fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028aff:	83 c4 10             	add    esp,0x10
c0028b02:	83 c4 0c             	add    esp,0xc
c0028b05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b06 <IDE::~IDE()>:
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	ba 58 c0 02 c0       	mov    edx,0xc002c058
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	89 10                	mov    DWORD PTR [eax],edx
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	83 ec 0c             	sub    esp,0xc
c0028b1b:	50                   	push   eax
c0028b1c:	e8 65 b3 fe ff       	call   c0013e86 <HardDiskController::~HardDiskController()>
c0028b21:	83 c4 10             	add    esp,0x10
c0028b24:	90                   	nop
c0028b25:	83 c4 0c             	add    esp,0xc
c0028b28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b2a <IDE::~IDE()>:
c0028b2a:	83 ec 0c             	sub    esp,0xc
c0028b2d:	83 ec 0c             	sub    esp,0xc
c0028b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b34:	e8 cd ff ff ff       	call   c0028b06 <IDE::~IDE()>
c0028b39:	83 c4 10             	add    esp,0x10
c0028b3c:	83 ec 08             	sub    esp,0x8
c0028b3f:	68 70 02 00 00       	push   0x270
c0028b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b48:	e8 44 9a fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028b4d:	83 c4 10             	add    esp,0x10
c0028b50:	83 c4 0c             	add    esp,0xc
c0028b53:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028b54 <SATABus::~SATABus()>:
c0028b54:	83 ec 0c             	sub    esp,0xc
c0028b57:	ba d0 c0 02 c0       	mov    edx,0xc002c0d0
c0028b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b60:	89 10                	mov    DWORD PTR [eax],edx
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	50                   	push   eax
c0028b6a:	e8 17 b3 fe ff       	call   c0013e86 <HardDiskController::~HardDiskController()>
c0028b6f:	83 c4 10             	add    esp,0x10
c0028b72:	90                   	nop
c0028b73:	83 c4 0c             	add    esp,0xc
c0028b76:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028b78 <SATABus::~SATABus()>:
c0028b78:	83 ec 0c             	sub    esp,0xc
c0028b7b:	83 ec 0c             	sub    esp,0xc
c0028b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b82:	e8 cd ff ff ff       	call   c0028b54 <SATABus::~SATABus()>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	83 ec 08             	sub    esp,0x8
c0028b8d:	68 64 01 00 00       	push   0x164
c0028b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b96:	e8 f6 99 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028b9b:	83 c4 10             	add    esp,0x10
c0028b9e:	83 c4 0c             	add    esp,0xc
c0028ba1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ba2 <ATA::~ATA()>:
c0028ba2:	83 ec 0c             	sub    esp,0xc
c0028ba5:	ba 1c c1 02 c0       	mov    edx,0xc002c11c
c0028baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bae:	89 10                	mov    DWORD PTR [eax],edx
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	83 ec 0c             	sub    esp,0xc
c0028bb7:	50                   	push   eax
c0028bb8:	e8 ab b3 fe ff       	call   c0013f68 <PhysicalDisk::~PhysicalDisk()>
c0028bbd:	83 c4 10             	add    esp,0x10
c0028bc0:	90                   	nop
c0028bc1:	83 c4 0c             	add    esp,0xc
c0028bc4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028bc6 <ATA::~ATA()>:
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	83 ec 0c             	sub    esp,0xc
c0028bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd0:	e8 cd ff ff ff       	call   c0028ba2 <ATA::~ATA()>
c0028bd5:	83 c4 10             	add    esp,0x10
c0028bd8:	83 ec 08             	sub    esp,0x8
c0028bdb:	68 7c 01 00 00       	push   0x17c
c0028be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be4:	e8 a8 99 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028be9:	83 c4 10             	add    esp,0x10
c0028bec:	83 c4 0c             	add    esp,0xc
c0028bef:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028bf0 <ATAPI::~ATAPI()>:
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	ba 54 c1 02 c0       	mov    edx,0xc002c154
c0028bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfc:	89 10                	mov    DWORD PTR [eax],edx
c0028bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	50                   	push   eax
c0028c06:	e8 5d b3 fe ff       	call   c0013f68 <PhysicalDisk::~PhysicalDisk()>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	90                   	nop
c0028c0f:	83 c4 0c             	add    esp,0xc
c0028c12:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c14 <ATAPI::~ATAPI()>:
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	83 ec 0c             	sub    esp,0xc
c0028c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c1e:	e8 cd ff ff ff       	call   c0028bf0 <ATAPI::~ATAPI()>
c0028c23:	83 c4 10             	add    esp,0x10
c0028c26:	83 ec 08             	sub    esp,0x8
c0028c29:	68 80 01 00 00       	push   0x180
c0028c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c32:	e8 5a 99 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028c37:	83 c4 10             	add    esp,0x10
c0028c3a:	83 c4 0c             	add    esp,0xc
c0028c3d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028c3e <SATA::~SATA()>:
c0028c3e:	83 ec 0c             	sub    esp,0xc
c0028c41:	ba 08 c2 02 c0       	mov    edx,0xc002c208
c0028c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4a:	89 10                	mov    DWORD PTR [eax],edx
c0028c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	50                   	push   eax
c0028c54:	e8 0f b3 fe ff       	call   c0013f68 <PhysicalDisk::~PhysicalDisk()>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	90                   	nop
c0028c5d:	83 c4 0c             	add    esp,0xc
c0028c60:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028c62 <SATA::~SATA()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	83 ec 0c             	sub    esp,0xc
c0028c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6c:	e8 cd ff ff ff       	call   c0028c3e <SATA::~SATA()>
c0028c71:	83 c4 10             	add    esp,0x10
c0028c74:	83 ec 08             	sub    esp,0x8
c0028c77:	68 7c 01 00 00       	push   0x17c
c0028c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c80:	e8 0c 99 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028c85:	83 c4 10             	add    esp,0x10
c0028c88:	83 c4 0c             	add    esp,0xc
c0028c8b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028c8c <SATAPI::~SATAPI()>:
c0028c8c:	83 ec 0c             	sub    esp,0xc
c0028c8f:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0028c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c98:	89 10                	mov    DWORD PTR [eax],edx
c0028c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	50                   	push   eax
c0028ca2:	e8 c1 b2 fe ff       	call   c0013f68 <PhysicalDisk::~PhysicalDisk()>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	90                   	nop
c0028cab:	83 c4 0c             	add    esp,0xc
c0028cae:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028cb0 <SATAPI::~SATAPI()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	83 ec 0c             	sub    esp,0xc
c0028cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cba:	e8 cd ff ff ff       	call   c0028c8c <SATAPI::~SATAPI()>
c0028cbf:	83 c4 10             	add    esp,0x10
c0028cc2:	83 ec 08             	sub    esp,0x8
c0028cc5:	68 80 01 00 00       	push   0x180
c0028cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cce:	e8 be 98 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028cd3:	83 c4 10             	add    esp,0x10
c0028cd6:	83 c4 0c             	add    esp,0xc
c0028cd9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028cda <AVX::~AVX()>:
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	ba 24 c3 02 c0       	mov    edx,0xc002c324
c0028ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce6:	89 10                	mov    DWORD PTR [eax],edx
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	50                   	push   eax
c0028cf0:	e8 f7 b2 fe ff       	call   c0013fec <FPU::~FPU()>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	90                   	nop
c0028cf9:	83 c4 0c             	add    esp,0xc
c0028cfc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028cfe <AVX::~AVX()>:
c0028cfe:	83 ec 0c             	sub    esp,0xc
c0028d01:	83 ec 0c             	sub    esp,0xc
c0028d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d08:	e8 cd ff ff ff       	call   c0028cda <AVX::~AVX()>
c0028d0d:	83 c4 10             	add    esp,0x10
c0028d10:	83 ec 08             	sub    esp,0x8
c0028d13:	68 58 01 00 00       	push   0x158
c0028d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1c:	e8 70 98 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028d21:	83 c4 10             	add    esp,0x10
c0028d24:	83 c4 0c             	add    esp,0xc
c0028d27:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d28 <MMX::~MMX()>:
c0028d28:	83 ec 0c             	sub    esp,0xc
c0028d2b:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0028d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d34:	89 10                	mov    DWORD PTR [eax],edx
c0028d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	50                   	push   eax
c0028d3e:	e8 a9 b2 fe ff       	call   c0013fec <FPU::~FPU()>
c0028d43:	83 c4 10             	add    esp,0x10
c0028d46:	90                   	nop
c0028d47:	83 c4 0c             	add    esp,0xc
c0028d4a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028d4c <MMX::~MMX()>:
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	83 ec 0c             	sub    esp,0xc
c0028d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d56:	e8 cd ff ff ff       	call   c0028d28 <MMX::~MMX()>
c0028d5b:	83 c4 10             	add    esp,0x10
c0028d5e:	83 ec 08             	sub    esp,0x8
c0028d61:	68 58 01 00 00       	push   0x158
c0028d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6a:	e8 22 98 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028d6f:	83 c4 10             	add    esp,0x10
c0028d72:	83 c4 0c             	add    esp,0xc
c0028d75:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028d76 <SSE::~SSE()>:
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	ba a4 c3 02 c0       	mov    edx,0xc002c3a4
c0028d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d82:	89 10                	mov    DWORD PTR [eax],edx
c0028d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	50                   	push   eax
c0028d8c:	e8 5b b2 fe ff       	call   c0013fec <FPU::~FPU()>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	90                   	nop
c0028d95:	83 c4 0c             	add    esp,0xc
c0028d98:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028d9a <SSE::~SSE()>:
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	83 ec 0c             	sub    esp,0xc
c0028da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da4:	e8 cd ff ff ff       	call   c0028d76 <SSE::~SSE()>
c0028da9:	83 c4 10             	add    esp,0x10
c0028dac:	83 ec 08             	sub    esp,0x8
c0028daf:	68 58 01 00 00       	push   0x158
c0028db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db8:	e8 d4 97 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028dbd:	83 c4 10             	add    esp,0x10
c0028dc0:	83 c4 0c             	add    esp,0xc
c0028dc3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028dc4 <x87::~x87()>:
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c0028dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd0:	89 10                	mov    DWORD PTR [eax],edx
c0028dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	50                   	push   eax
c0028dda:	e8 0d b2 fe ff       	call   c0013fec <FPU::~FPU()>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	90                   	nop
c0028de3:	83 c4 0c             	add    esp,0xc
c0028de6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028de8 <x87::~x87()>:
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	83 ec 0c             	sub    esp,0xc
c0028dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df2:	e8 cd ff ff ff       	call   c0028dc4 <x87::~x87()>
c0028df7:	83 c4 10             	add    esp,0x10
c0028dfa:	83 ec 08             	sub    esp,0x8
c0028dfd:	68 58 01 00 00       	push   0x158
c0028e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e06:	e8 86 97 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028e0b:	83 c4 10             	add    esp,0x10
c0028e0e:	83 c4 0c             	add    esp,0xc
c0028e11:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e12 <IOAPIC::~IOAPIC()>:
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	ba 3c c5 02 c0       	mov    edx,0xc002c53c
c0028e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1e:	89 10                	mov    DWORD PTR [eax],edx
c0028e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	50                   	push   eax
c0028e28:	e8 43 ab fe ff       	call   c0013970 <Device::~Device()>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	90                   	nop
c0028e31:	83 c4 0c             	add    esp,0xc
c0028e34:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028e36 <IOAPIC::~IOAPIC()>:
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	83 ec 0c             	sub    esp,0xc
c0028e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e40:	e8 cd ff ff ff       	call   c0028e12 <IOAPIC::~IOAPIC()>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	83 ec 08             	sub    esp,0x8
c0028e4b:	68 68 01 00 00       	push   0x168
c0028e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e54:	e8 38 97 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028e59:	83 c4 10             	add    esp,0x10
c0028e5c:	83 c4 0c             	add    esp,0xc
c0028e5f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028e60 <APIC::~APIC()>:
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c0028e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6c:	89 10                	mov    DWORD PTR [eax],edx
c0028e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	50                   	push   eax
c0028e76:	e8 3b b6 fe ff       	call   c00144b6 <InterruptController::~InterruptController()>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	90                   	nop
c0028e7f:	83 c4 0c             	add    esp,0xc
c0028e82:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028e84 <APIC::~APIC()>:
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	83 ec 0c             	sub    esp,0xc
c0028e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8e:	e8 cd ff ff ff       	call   c0028e60 <APIC::~APIC()>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	83 ec 08             	sub    esp,0x8
c0028e99:	68 58 21 00 00       	push   0x2158
c0028e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea2:	e8 ea 96 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028ea7:	83 c4 10             	add    esp,0x10
c0028eaa:	83 c4 0c             	add    esp,0xc
c0028ead:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028eae <PIC::~PIC()>:
c0028eae:	83 ec 0c             	sub    esp,0xc
c0028eb1:	ba 8c c5 02 c0       	mov    edx,0xc002c58c
c0028eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eba:	89 10                	mov    DWORD PTR [eax],edx
c0028ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	50                   	push   eax
c0028ec4:	e8 ed b5 fe ff       	call   c00144b6 <InterruptController::~InterruptController()>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	90                   	nop
c0028ecd:	83 c4 0c             	add    esp,0xc
c0028ed0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028ed2 <PIC::~PIC()>:
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	83 ec 0c             	sub    esp,0xc
c0028ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028edc:	e8 cd ff ff ff       	call   c0028eae <PIC::~PIC()>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	83 ec 08             	sub    esp,0x8
c0028ee7:	68 58 21 00 00       	push   0x2158
c0028eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef0:	e8 9c 96 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028ef5:	83 c4 10             	add    esp,0x10
c0028ef8:	83 c4 0c             	add    esp,0xc
c0028efb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028efc <APICTimer::~APICTimer()>:
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	ba e0 c5 02 c0       	mov    edx,0xc002c5e0
c0028f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f08:	89 10                	mov    DWORD PTR [eax],edx
c0028f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	50                   	push   eax
c0028f12:	e8 f7 d5 fe ff       	call   c001650e <Timer::~Timer()>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	90                   	nop
c0028f1b:	83 c4 0c             	add    esp,0xc
c0028f1e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f20 <APICTimer::~APICTimer()>:
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	83 ec 0c             	sub    esp,0xc
c0028f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2a:	e8 cd ff ff ff       	call   c0028efc <APICTimer::~APICTimer()>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	83 ec 08             	sub    esp,0x8
c0028f35:	68 60 01 00 00       	push   0x160
c0028f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3e:	e8 4e 96 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	83 c4 0c             	add    esp,0xc
c0028f49:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028f4a <PIT::~PIT()>:
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	ba 30 c6 02 c0       	mov    edx,0xc002c630
c0028f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f56:	89 10                	mov    DWORD PTR [eax],edx
c0028f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	50                   	push   eax
c0028f60:	e8 a9 d5 fe ff       	call   c001650e <Timer::~Timer()>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	90                   	nop
c0028f69:	83 c4 0c             	add    esp,0xc
c0028f6c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028f6e <PIT::~PIT()>:
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	83 ec 0c             	sub    esp,0xc
c0028f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f78:	e8 cd ff ff ff       	call   c0028f4a <PIT::~PIT()>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	83 ec 08             	sub    esp,0x8
c0028f83:	68 5c 01 00 00       	push   0x15c
c0028f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8c:	e8 00 96 fe ff       	call   c0012591 <operator delete(void*, unsigned long)>
c0028f91:	83 c4 10             	add    esp,0x10
c0028f94:	83 c4 0c             	add    esp,0xc
c0028f97:	c3                   	ret    
