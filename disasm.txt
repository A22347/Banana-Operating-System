
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c1 f8 00 00       	call   c000f8e1 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 89 02 00       	call   c0028948 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 9c 95 02 c0       	mov    ebx,0xc002959c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a8 95 02 c0    	cmp    ebx,0xc00295a8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 da 02 c0       	mov    eax,0xc002da58
c0000049:	3d 58 da 02 c0       	cmp    eax,0xc002da58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 da 02 c0       	push   0xc002da58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 da 02 c0       	mov    eax,0xc002da58
c0000075:	2d 58 da 02 c0       	sub    eax,0xc002da58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 da 02 c0       	push   0xc002da58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e088,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b0 95 02 c0       	mov    ebx,0xc00295b0
c00000bb:	81 eb ac 95 02 c0    	sub    ebx,0xc00295ac
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ac 95 02 c0       	mov    esi,0xc00295ac
c00000ca:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e0 02 c0       	mov    ds:0xc002e08c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 da 02 c0       	push   0xc002da58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e088,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e0 02 c0       	push   0xc002e090
c000012c:	68 58 da 02 c0       	push   0xc002da58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 df d2 01 00       	call   c001d682 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 2e 22 01 00       	call   c00125e9 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 bd d2 01 00       	call   c001d682 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 65 d7 01 00       	call   c001db49 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 8a dd 01 00       	call   c001e177 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 e4 02 c0 	lgdtd  ds:0xc002e4d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 ab 3f 01 00       	call   c001458d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 e0 02 c0       	mov    ds:0xc002e0a8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 c0 95 02 c0 02 	test   BYTE PTR [edx-0x3ffd6a40],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 c0 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6a40],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 c0 95 02 c0 08 	test   BYTE PTR [edx-0x3ffd6a40],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 c0 95 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6a40],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 c0 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6a40],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0c0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f3c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f3c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0fc
c0000e38:	c7 42 0c f4 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e0f4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 e0 02 c0 02 	test   BYTE PTR ds:0xc002e0c0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cb e7 00 00       	call   c000f6e4 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 0d e7 00 00       	call   c000f6e4 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 f7 e6 00 00       	call   c000f6e4 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d3 e6 00 00       	call   c000f6e4 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f3c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f3c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f0c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e100
c00011ba:	81 fb f4 e0 02 c0    	cmp    ebx,0xc002e0f4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 e0 02 c0       	cmp    eax,0xc002e0f4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0f0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc e0 02 c0       	mov    ds:0xc002e0fc,eax
c00011f6:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c00011fb:	a3 f0 e0 02 c0       	mov    ds:0xc002e0f0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0f4
c0001209:	c7 40 0c f4 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e0f4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0f4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f48]
c000125a:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1f40]
c0001275:	8b 14 95 c0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f40]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c0c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f0c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,ecx
c000132f:	89 0d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ecx
c0001335:	c7 41 08 f4 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e0f4
c000133c:	c7 41 0c f4 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e0f4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f14]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c0c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c0c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec e0 02 c0 	lea    edx,[eax*4-0x3ffd1f14]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c0c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc e0 02 c0    	mov    DWORD PTR ds:0xc002e0fc,edi
c0001402:	89 3d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,edi
c0001408:	c7 47 08 f4 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e0f4
c000140f:	c7 47 0c f4 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e0f4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0f0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 e0 02 c0       	mov    edx,0xc002e0c0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e414
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e414,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 e4 02 c0    	mov    DWORD PTR ds:0xc002e414,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec e0 02 c0    	mov    DWORD PTR ds:0xc002e0ec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c e4 02 c0    	push   DWORD PTR ds:0xc002e41c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0c0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c e4 02 c0       	mov    eax,ds:0xc002e41c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0ec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f3c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 e0 02 c0       	mov    eax,0xc002e0f4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec e3 02 c0       	cmp    eax,0xc002e3ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 e4 02 c0       	mov    eax,ds:0xc002e428
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e410
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e424
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e434
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 c4 96 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd693c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 e0 02 c0       	mov    eax,ds:0xc002e0c0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 e4 02 c0    	mov    DWORD PTR ds:0xc002e404,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e414,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd04a0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 cc f0 01 00       	jmp    c0020cbe <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd04a0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 fd f0 01 00       	jmp    c0020d05 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd04a0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 25 f1 01 00       	jmp    c0020d4c <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 4d 02 00       	call   c0026ca4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 e0 97 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6820]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 e0 97 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6820]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 00 98 02 c0       	mov    edx,0xc0029800
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 0c 98 02 c0       	mov    edx,0xc002980c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba f0 97 02 c0       	mov    edx,0xc00297f0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ba0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 e4 02 c0    	mov    ax,ds:0xc002e440
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 e4 02 c0    	mov    ds:0xc002e440,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 3b 02 00       	call   c0026ca4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 12 98 02 c0       	mov    eax,0xc0029812
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 60 97 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd68a0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 1b 98 02 c0       	mov    eax,0xc002981b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 e0 97 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6820]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 25 02 00       	call   c0026ca4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba f0 97 02 c0       	mov    edx,0xc00297f0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba e0 96 02 c0       	mov    edx,0xc00296e0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba f0 96 02 c0       	mov    edx,0xc00296f0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ba0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ba0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 0f 02 00       	call   c0026ca4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 0f 02 00       	call   c0026ca4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 37 97 02 c0       	mov    eax,0xc0029737
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 30 97 02 c0       	mov    eax,0xc0029730
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 a8 fa 01 00       	call   c0026ca4 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 60 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ba0]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 20 97 02 c0       	mov    esi,0xc0029720
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 1c f4 01 00       	call   c0026ca4 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 00 98 02 c0       	mov    edx,0xc0029800
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 00 97 02 c0       	mov    edx,0xc0029700
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 10 97 02 c0       	mov    edx,0xc0029710
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 22 98 02 c0       	mov    edx,0xc0029822
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 2e 98 02 c0       	mov    edx,0xc002982e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 42 98 02 c0       	mov    edx,0xc0029842
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 7c 71 00 00       	call   c000f81b <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 76 71 00 00       	call   c000f82b <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 60 9b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029b60
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 60 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b60
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 60 99 02 c0       	mov    eax,0xc0029960
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 60 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd67a0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 bb 6e 00 00       	call   c000f82b <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 a5 6e 00 00       	call   c000f82b <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 70 fd 01 00       	call   c0028777 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 33 fd 01 00       	call   c0028759 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 07 fd 01 00       	call   c0028777 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 ba f3 01 00       	call   c0027e7c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 3c fe 01 00       	call   c0028910 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 81 fc 01 00       	call   c0028777 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 c3 fb 01 00       	call   c0028777 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 90 fb 01 00       	call   c0028759 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 7d fa 01 00       	call   c0028777 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 45 fa 01 00       	call   c0028759 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 84 6a 00 00       	call   c000f84b <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 1f 6a 00 00       	call   c000f82b <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 60 9c 02 c0       	mov    eax,0xc0029c60
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 51 f8 01 00       	call   c0028777 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 16 f8 01 00       	call   c0028759 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 c0 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f40]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 26 f5 01 00       	call   c002850b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 a4 ee 01 00       	call   c0027ea8 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 60 f7 01 00       	call   c002877b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 4e f8 01 00       	call   c002889f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 38 ee 01 00       	call   c0027ea8 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 e3 f6 01 00       	call   c0028775 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 c4 f6 01 00       	call   c0028779 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 5a f8 01 00       	call   c0028930 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 04 f4 01 00       	call   c002850b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 82 ed 01 00       	call   c0027ea8 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 3e f6 01 00       	call   c002877b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 2c f7 01 00       	call   c002889f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 16 ed 01 00       	call   c0027ea8 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 c1 f5 01 00       	call   c0028775 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 a1 f5 01 00       	call   c0028779 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 36 f7 01 00       	call   c0028930 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 dc f4 01 00       	call   c0028777 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 9a f4 01 00       	call   c0028759 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 82 f4 01 00       	call   c0028777 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 f4 f1 01 00       	call   c002850b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 f6 e4 01 00       	call   c002782b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 59 eb 01 00       	call   c0027ea8 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 ab f1 01 00       	call   c002850b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 b1 e4 01 00       	call   c002782b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 80 f1 01 00       	call   c002850b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 d0 f3 01 00       	call   c0028775 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 ad ea 01 00       	call   c0027e7c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 2f f5 01 00       	call   c0028910 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 56 f3 01 00       	call   c0028759 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 51 ea 01 00       	call   c0027e7c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 cf f0 01 00       	call   c002850b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 52 ea 01 00       	call   c0027ea8 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 a4 f0 01 00       	call   c002850b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 0b ed 01 00       	call   c002818c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 8a e3 01 00       	call   c002782b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 ea dc 01 00       	call   c00271c0 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 c1 f3 01 00       	call   c002889f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 aa e9 01 00       	call   c0027ea8 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 91 f3 01 00       	call   c002889f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 03 e3 01 00       	call   c002782b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 3c f2 01 00       	call   c002877b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 24 ec 01 00       	call   c002818c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 aa e2 01 00       	call   c002782b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 98 f3 01 00       	call   c0028930 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 6a ef 01 00       	call   c002850b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 c1 e8 01 00       	call   c0027e7c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 a0 f1 01 00       	call   c0028777 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 39 e2 01 00       	call   c002782b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 65 e8 01 00       	call   c0027e7c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 07 f3 01 00       	call   c0028930 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 b8 ee 01 00       	call   c002850b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 35 e8 01 00       	call   c0027ea8 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 88 ee 01 00       	call   c002850b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 8e e1 01 00       	call   c002782b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 5e ee 01 00       	call   c002850b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 b0 f0 01 00       	call   c0028777 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 87 e7 01 00       	call   c0027e7c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 09 f2 01 00       	call   c0028910 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 30 f0 01 00       	call   c0028759 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 2a e7 01 00       	call   c0027e7c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 a8 ed 01 00       	call   c002850b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 2b e7 01 00       	call   c0027ea8 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 7d ed 01 00       	call   c002850b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 e4 e9 01 00       	call   c002818c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 63 e0 01 00       	call   c002782b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 b3 d9 01 00       	call   c00271c0 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 8a f0 01 00       	call   c002889f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 73 e6 01 00       	call   c0027ea8 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 5a f0 01 00       	call   c002889f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 cc df 01 00       	call   c002782b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 05 ef 01 00       	call   c002877b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 ec e8 01 00       	call   c002818c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 6b df 01 00       	call   c002782b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 59 f0 01 00       	call   c0028930 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 2b ec 01 00       	call   c002850b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 82 e5 01 00       	call   c0027e7c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 61 ee 01 00       	call   c0028777 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 fa de 01 00       	call   c002782b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 26 e5 01 00       	call   c0027e7c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 9b eb 01 00       	call   c002850b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 a1 de 01 00       	call   c002782b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 20 a1 02 c0       	mov    eax,0xc002a120
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 34 a1 02 c0       	mov    eax,0xc002a134
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 b8 5d 00 00       	call   c000f82b <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 ba 5d 00 00       	call   c000f84b <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 16 ea 01 00       	call   c002850b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 94 e3 01 00       	call   c0027ea8 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 26 d6 01 00       	call   c00271c0 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 fd ec 01 00       	call   c002889f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 e6 e2 01 00       	call   c0027ea8 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 c9 ec 01 00       	call   c002889f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 3b dc 01 00       	call   c002782b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 9b ec 01 00       	call   c002889f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 8a e2 01 00       	call   c0027ea8 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 f3 db 01 00       	call   c002782b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 14 d5 01 00       	call   c00271c0 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 eb eb 01 00       	call   c002889f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 d4 e1 01 00       	call   c0027ea8 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 b7 eb 01 00       	call   c002889f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 29 db 01 00       	call   c002782b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 89 eb 01 00       	call   c002889f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 78 e1 01 00       	call   c0027ea8 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 e1 da 01 00       	call   c002782b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 bf da 01 00       	call   c002782b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 9b d3 01 00       	call   c00271c0 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 72 ea 01 00       	call   c002889f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 5b e0 01 00       	call   c0027ea8 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 3e ea 01 00       	call   c002889f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 b0 d9 01 00       	call   c002782b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 10 ea 01 00       	call   c002889f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 f9 df 01 00       	call   c0027ea8 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 62 d9 01 00       	call   c002782b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 c2 e9 01 00       	call   c002889f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 ab df 01 00       	call   c0027ea8 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 14 d9 01 00       	call   c002782b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 29 d2 01 00       	call   c00271c0 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 00 e9 01 00       	call   c002889f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 e9 de 01 00       	call   c0027ea8 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 d0 e8 01 00       	call   c002889f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 42 d8 01 00       	call   c002782b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 a2 e8 01 00       	call   c002889f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 8b de 01 00       	call   c0027ea8 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 f4 d7 01 00       	call   c002782b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 54 e8 01 00       	call   c002889f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 3d de 01 00       	call   c0027ea8 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 a6 d7 01 00       	call   c002782b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 7a d7 01 00       	call   c002782b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 d7 dd 01 00       	call   c0027ea8 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 93 e6 01 00       	call   c002877b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 22 d7 01 00       	call   c002782b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 7f dd 01 00       	call   c0027ea8 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 3b e6 01 00       	call   c002877b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 b5 cf 01 00       	call   c00271c0 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 8c e6 01 00       	call   c002889f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 75 dc 01 00       	call   c0027ea8 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 58 e6 01 00       	call   c002889f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 ca d5 01 00       	call   c002782b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 2a e6 01 00       	call   c002889f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 13 dc 01 00       	call   c0027ea8 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 7c d5 01 00       	call   c002782b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 dc e5 01 00       	call   c002889f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 c5 db 01 00       	call   c0027ea8 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 2e d5 01 00       	call   c002782b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 8e e5 01 00       	call   c002889f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 77 db 01 00       	call   c0027ea8 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 e0 d4 01 00       	call   c002782b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 40 e5 01 00       	call   c002889f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 29 db 01 00       	call   c0027ea8 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 92 d4 01 00       	call   c002782b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 94 cd 01 00       	call   c00271c0 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 6b e4 01 00       	call   c002889f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 54 da 01 00       	call   c0027ea8 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 3b e4 01 00       	call   c002889f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 ad d3 01 00       	call   c002782b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 0d e4 01 00       	call   c002889f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 f6 d9 01 00       	call   c0027ea8 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 5f d3 01 00       	call   c002782b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 bf e3 01 00       	call   c002889f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 a8 d9 01 00       	call   c0027ea8 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 11 d3 01 00       	call   c002782b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 71 e3 01 00       	call   c002889f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 5a d9 01 00       	call   c0027ea8 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 c3 d2 01 00       	call   c002782b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 23 e3 01 00       	call   c002889f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 0c d9 01 00       	call   c0027ea8 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 75 d2 01 00       	call   c002782b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 49 d2 01 00       	call   c002782b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 a6 d8 01 00       	call   c0027ea8 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 62 e1 01 00       	call   c002877b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 f1 d1 01 00       	call   c002782b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 4e d8 01 00       	call   c0027ea8 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 0a e1 01 00       	call   c002877b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 98 d1 01 00       	call   c002782b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 f5 d7 01 00       	call   c0027ea8 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 b1 e0 01 00       	call   c002877b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 3f d1 01 00       	call   c002782b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 9c d7 01 00       	call   c0027ea8 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 58 e0 01 00       	call   c002877b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 b6 c9 01 00       	call   c00271c0 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 8d e0 01 00       	call   c002889f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 76 d6 01 00       	call   c0027ea8 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 59 e0 01 00       	call   c002889f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 cb cf 01 00       	call   c002782b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 2b e0 01 00       	call   c002889f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 14 d6 01 00       	call   c0027ea8 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 7d cf 01 00       	call   c002782b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 dd df 01 00       	call   c002889f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 c6 d5 01 00       	call   c0027ea8 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 2f cf 01 00       	call   c002782b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 8f df 01 00       	call   c002889f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 78 d5 01 00       	call   c0027ea8 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 e1 ce 01 00       	call   c002782b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 41 df 01 00       	call   c002889f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 2a d5 01 00       	call   c0027ea8 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 93 ce 01 00       	call   c002782b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 f3 de 01 00       	call   c002889f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 dc d4 01 00       	call   c0027ea8 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 42 ce 01 00       	call   c002782b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 a2 de 01 00       	call   c002889f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 8b d4 01 00       	call   c0027ea8 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 f4 cd 01 00       	call   c002782b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 ee c6 01 00       	call   c00271c0 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 c5 dd 01 00       	call   c002889f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 ae d3 01 00       	call   c0027ea8 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 8e dd 01 00       	call   c002889f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 00 cd 01 00       	call   c002782b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 60 dd 01 00       	call   c002889f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 49 d3 01 00       	call   c0027ea8 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 b2 cc 01 00       	call   c002782b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 12 dd 01 00       	call   c002889f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 fb d2 01 00       	call   c0027ea8 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 64 cc 01 00       	call   c002782b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 c4 dc 01 00       	call   c002889f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 ad d2 01 00       	call   c0027ea8 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 16 cc 01 00       	call   c002782b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 76 dc 01 00       	call   c002889f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 5f d2 01 00       	call   c0027ea8 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 c8 cb 01 00       	call   c002782b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 28 dc 01 00       	call   c002889f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 11 d2 01 00       	call   c0027ea8 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 77 cb 01 00       	call   c002782b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 d7 db 01 00       	call   c002889f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 c0 d1 01 00       	call   c0027ea8 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 2f cb 01 00       	call   c002782b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 08 cb 01 00       	call   c002782b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 66 d1 01 00       	call   c0027ea8 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 22 da 01 00       	call   c002877b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 b1 ca 01 00       	call   c002782b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 0f d1 01 00       	call   c0027ea8 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 cb d9 01 00       	call   c002877b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 59 ca 01 00       	call   c002782b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 b7 d0 01 00       	call   c0027ea8 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 73 d9 01 00       	call   c002877b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 01 ca 01 00       	call   c002782b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 5f d0 01 00       	call   c0027ea8 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 1b d9 01 00       	call   c002877b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 a9 c9 01 00       	call   c002782b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 07 d0 01 00       	call   c0027ea8 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 c3 d8 01 00       	call   c002877b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 57 c9 01 00       	call   c002782b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 b5 cf 01 00       	call   c0027ea8 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 71 d8 01 00       	call   c002877b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 85 c1 01 00       	call   c00271c0 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 5c d8 01 00       	call   c002889f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 45 ce 01 00       	call   c0027ea8 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 2c d8 01 00       	call   c002889f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 9e c7 01 00       	call   c002782b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 64 a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5e9c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 d2 d7 01 00       	call   c002889f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 bb cd 01 00       	call   c0027ea8 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 26 c7 01 00       	call   c002782b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 73 d7 01 00       	call   c002889f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 5c cd 01 00       	call   c0027ea8 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 c7 c6 01 00       	call   c002782b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 14 d7 01 00       	call   c002889f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 fd cc 01 00       	call   c0027ea8 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 68 c6 01 00       	call   c002782b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 b5 d6 01 00       	call   c002889f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 9e cc 01 00       	call   c0027ea8 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 09 c6 01 00       	call   c002782b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 56 d6 01 00       	call   c002889f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 3f cc 01 00       	call   c0027ea8 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 aa c5 01 00       	call   c002782b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 f7 d5 01 00       	call   c002889f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 e0 cb 01 00       	call   c0027ea8 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 4b c5 01 00       	call   c002782b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 98 d5 01 00       	call   c002889f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 81 cb 01 00       	call   c0027ea8 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 ec c4 01 00       	call   c002782b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 39 d5 01 00       	call   c002889f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 22 cb 01 00       	call   c0027ea8 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 8d c4 01 00       	call   c002782b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 97 bd 01 00       	call   c00271c0 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 6e d4 01 00       	call   c002889f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 57 ca 01 00       	call   c0027ea8 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 3e d4 01 00       	call   c002889f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 b0 c3 01 00       	call   c002782b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 80 a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5e80]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 e3 d3 01 00       	call   c002889f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 cc c9 01 00       	call   c0027ea8 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 37 c3 01 00       	call   c002782b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 83 d3 01 00       	call   c002889f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 6c c9 01 00       	call   c0027ea8 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 d7 c2 01 00       	call   c002782b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 23 d3 01 00       	call   c002889f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 0c c9 01 00       	call   c0027ea8 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 77 c2 01 00       	call   c002782b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 c3 d2 01 00       	call   c002889f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 ac c8 01 00       	call   c0027ea8 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 17 c2 01 00       	call   c002782b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 63 d2 01 00       	call   c002889f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 4c c8 01 00       	call   c0027ea8 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 b7 c1 01 00       	call   c002782b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 03 d2 01 00       	call   c002889f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 ec c7 01 00       	call   c0027ea8 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 57 c1 01 00       	call   c002782b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 a3 d1 01 00       	call   c002889f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 8c c7 01 00       	call   c0027ea8 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 f7 c0 01 00       	call   c002782b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 43 d1 01 00       	call   c002889f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 2c c7 01 00       	call   c0027ea8 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 97 c0 01 00       	call   c002782b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 9c a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5e64]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 3c c0 01 00       	call   c002782b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 99 c6 01 00       	call   c0027ea8 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 55 cf 01 00       	call   c002877b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 df bf 01 00       	call   c002782b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 3c c6 01 00       	call   c0027ea8 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 f8 ce 01 00       	call   c002877b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 82 bf 01 00       	call   c002782b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 df c5 01 00       	call   c0027ea8 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 9b ce 01 00       	call   c002877b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 25 bf 01 00       	call   c002782b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 82 c5 01 00       	call   c0027ea8 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 3e ce 01 00       	call   c002877b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 c8 be 01 00       	call   c002782b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 25 c5 01 00       	call   c0027ea8 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 e1 cd 01 00       	call   c002877b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 6b be 01 00       	call   c002782b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 c8 c4 01 00       	call   c0027ea8 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 84 cd 01 00       	call   c002877b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 0e be 01 00       	call   c002782b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 6b c4 01 00       	call   c0027ea8 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 27 cd 01 00       	call   c002877b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 b1 bd 01 00       	call   c002782b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 0e c4 01 00       	call   c0027ea8 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 ca cc 01 00       	call   c002877b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 c6 c3 01 00       	call   c0027ea8 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 3e ce 01 00       	jmp    c0028930 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 a8 ca 01 00       	call   c0028777 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 66 ca 01 00       	call   c0028759 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 fd c7 01 00       	call   c002850b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 fe ba 01 00       	call   c002782b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 cd c7 01 00       	call   c002850b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 34 c4 01 00       	call   c002818c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 d3 c9 01 00       	call   c0028759 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 d6 c9 01 00       	call   c0028777 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 a9 c9 01 00       	call   c0028777 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 a2 c3 01 00       	call   c002818c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 2c cb 01 00       	call   c0028930 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 07 cb 01 00       	call   c0028930 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 d9 c6 01 00       	call   c002850b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 30 c0 01 00       	call   c0027e7c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 0f c9 01 00       	call   c0028777 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 a8 b9 01 00       	call   c002782b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 cc bf 01 00       	call   c0027e7c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 6e ca 01 00       	call   c0028930 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 a6 c2 01 00       	call   c002818c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 23 b9 01 00       	call   c002782b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 4f c5 01 00       	call   c002850b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 4f b8 01 00       	call   c002782b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 2f b8 01 00       	call   c002782b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 ff c4 01 00       	call   c002850b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 4f c7 01 00       	call   c0028775 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 2e be 01 00       	call   c0027e7c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 b0 c8 01 00       	call   c0028910 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 d7 c6 01 00       	call   c0028759 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 d5 bd 01 00       	call   c0027e7c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 53 c4 01 00       	call   c002850b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 d6 bd 01 00       	call   c0027ea8 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 28 c4 01 00       	call   c002850b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 8f c0 01 00       	call   c002818c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 0e b7 01 00       	call   c002782b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 d8 c3 01 00       	call   c002850b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 24 c6 01 00       	call   c0028777 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 19 bd 01 00       	call   c0027ea8 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 eb bc 01 00       	call   c0027ea8 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 24 c3 01 00       	call   c002850b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 88 bf 01 00       	call   c002818c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 50 bf 01 00       	call   c002818c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 cf b5 01 00       	call   c002782b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 bc c6 01 00       	call   c0028930 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 8e c2 01 00       	call   c002850b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 e5 bb 01 00       	call   c0027e7c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 c4 c4 01 00       	call   c0028777 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 5c b5 01 00       	call   c002782b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 80 bb 01 00       	call   c0027e7c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 22 c6 01 00       	call   c0028930 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 e3 c3 01 00       	call   c0028777 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 a1 c3 01 00       	call   c0028759 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 38 c1 01 00       	call   c002850b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 39 b4 01 00       	call   c002782b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 08 c1 01 00       	call   c002850b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 6f bd 01 00       	call   c002818c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 0e c3 01 00       	call   c0028759 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 11 c3 01 00       	call   c0028777 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 e4 c2 01 00       	call   c0028777 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 dd bc 01 00       	call   c002818c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 67 c4 01 00       	call   c0028930 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 42 c4 01 00       	call   c0028930 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 14 c0 01 00       	call   c002850b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 6b b9 01 00       	call   c0027e7c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 4a c2 01 00       	call   c0028777 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 e3 b2 01 00       	call   c002782b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 07 b9 01 00       	call   c0027e7c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 a9 c3 01 00       	call   c0028930 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 e1 bb 01 00       	call   c002818c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 5e b2 01 00       	call   c002782b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 89 be 01 00       	call   c002850b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 89 b1 01 00       	call   c002782b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 69 b1 01 00       	call   c002782b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 39 be 01 00       	call   c002850b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 89 c0 01 00       	call   c0028775 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 67 b7 01 00       	call   c0027e7c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 e9 c1 01 00       	call   c0028910 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 10 c0 01 00       	call   c0028759 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 0d b7 01 00       	call   c0027e7c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 8b bd 01 00       	call   c002850b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 0e b7 01 00       	call   c0027ea8 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 60 bd 01 00       	call   c002850b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 c7 b9 01 00       	call   c002818c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 46 b0 01 00       	call   c002782b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 10 bd 01 00       	call   c002850b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 5c bf 01 00       	call   c0028777 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 51 b6 01 00       	call   c0027ea8 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 23 b6 01 00       	call   c0027ea8 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 5a bc 01 00       	call   c002850b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 be b8 01 00       	call   c002818c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 8b b8 01 00       	call   c002818c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 0a af 01 00       	call   c002782b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 f7 bf 01 00       	call   c0028930 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 c9 bb 01 00       	call   c002850b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 20 b5 01 00       	call   c0027e7c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 ff bd 01 00       	call   c0028777 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 97 ae 01 00       	call   c002782b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 bb b4 01 00       	call   c0027e7c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 5d bf 01 00       	call   c0028930 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 1e bd 01 00       	call   c0028777 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 dc bc 01 00       	call   c0028759 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 73 ba 01 00       	call   c002850b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 74 ad 01 00       	call   c002782b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 43 ba 01 00       	call   c002850b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 aa b6 01 00       	call   c002818c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 49 bc 01 00       	call   c0028759 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 4c bc 01 00       	call   c0028777 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 1f bc 01 00       	call   c0028777 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 18 b6 01 00       	call   c002818c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 a2 bd 01 00       	call   c0028930 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 7d bd 01 00       	call   c0028930 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 4f b9 01 00       	call   c002850b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 a6 b2 01 00       	call   c0027e7c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 85 bb 01 00       	call   c0028777 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 1e ac 01 00       	call   c002782b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 42 b2 01 00       	call   c0027e7c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 e4 bc 01 00       	call   c0028930 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 1c b5 01 00       	call   c002818c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 99 ab 01 00       	call   c002782b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 c4 b7 01 00       	call   c002850b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 c4 aa 01 00       	call   c002782b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 a4 aa 01 00       	call   c002782b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 74 b7 01 00       	call   c002850b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 c4 b9 01 00       	call   c0028775 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 a2 b0 01 00       	call   c0027e7c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 24 bb 01 00       	call   c0028910 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 4b b9 01 00       	call   c0028759 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 48 b0 01 00       	call   c0027e7c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 c6 b6 01 00       	call   c002850b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 49 b0 01 00       	call   c0027ea8 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 9b b6 01 00       	call   c002850b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 02 b3 01 00       	call   c002818c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 81 a9 01 00       	call   c002782b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 4b b6 01 00       	call   c002850b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 97 b8 01 00       	call   c0028777 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 8c af 01 00       	call   c0027ea8 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 5e af 01 00       	call   c0027ea8 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 95 b5 01 00       	call   c002850b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 f9 b1 01 00       	call   c002818c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 c6 b1 01 00       	call   c002818c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 45 a8 01 00       	call   c002782b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 32 b9 01 00       	call   c0028930 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 04 b5 01 00       	call   c002850b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 5b ae 01 00       	call   c0027e7c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 3a b7 01 00       	call   c0028777 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 d2 a7 01 00       	call   c002782b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 f6 ad 01 00       	call   c0027e7c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 98 b8 01 00       	call   c0028930 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 59 b6 01 00       	call   c0028777 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 17 b6 01 00       	call   c0028759 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 ae b3 01 00       	call   c002850b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 af a6 01 00       	call   c002782b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 7e b3 01 00       	call   c002850b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 e5 af 01 00       	call   c002818c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 84 b5 01 00       	call   c0028759 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 87 b5 01 00       	call   c0028777 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 5a b5 01 00       	call   c0028777 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 53 af 01 00       	call   c002818c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 dd b6 01 00       	call   c0028930 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 b8 b6 01 00       	call   c0028930 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 8a b2 01 00       	call   c002850b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 e1 ab 01 00       	call   c0027e7c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 c0 b4 01 00       	call   c0028777 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 59 a5 01 00       	call   c002782b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 7d ab 01 00       	call   c0027e7c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 1f b6 01 00       	call   c0028930 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 57 ae 01 00       	call   c002818c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 d4 a4 01 00       	call   c002782b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 ff b0 01 00       	call   c002850b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 ff a3 01 00       	call   c002782b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 df a3 01 00       	call   c002782b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 af b0 01 00       	call   c002850b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 ff b2 01 00       	call   c0028775 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 dd a9 01 00       	call   c0027e7c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 5f b4 01 00       	call   c0028910 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 86 b2 01 00       	call   c0028759 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 83 a9 01 00       	call   c0027e7c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 01 b0 01 00       	call   c002850b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 84 a9 01 00       	call   c0027ea8 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 d6 af 01 00       	call   c002850b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 3d ac 01 00       	call   c002818c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 bc a2 01 00       	call   c002782b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 86 af 01 00       	call   c002850b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 d2 b1 01 00       	call   c0028777 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 c7 a8 01 00       	call   c0027ea8 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 99 a8 01 00       	call   c0027ea8 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 d0 ae 01 00       	call   c002850b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 34 ab 01 00       	call   c002818c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 01 ab 01 00       	call   c002818c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 80 a1 01 00       	call   c002782b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 6d b2 01 00       	call   c0028930 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 3f ae 01 00       	call   c002850b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 96 a7 01 00       	call   c0027e7c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 75 b0 01 00       	call   c0028777 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 0d a1 01 00       	call   c002782b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 31 a7 01 00       	call   c0027e7c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 d3 b1 01 00       	call   c0028930 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 91 af 01 00       	call   c0028777 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 4f af 01 00       	call   c0028759 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 e6 ac 01 00       	call   c002850b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 e7 9f 01 00       	call   c002782b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 b6 ac 01 00       	call   c002850b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 1d a9 01 00       	call   c002818c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 bc ae 01 00       	call   c0028759 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 bf ae 01 00       	call   c0028777 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 92 ae 01 00       	call   c0028777 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 8b a8 01 00       	call   c002818c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 15 b0 01 00       	call   c0028930 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 ec af 01 00       	call   c0028930 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 be ab 01 00       	call   c002850b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 15 a5 01 00       	call   c0027e7c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 f4 ad 01 00       	call   c0028777 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 8d 9e 01 00       	call   c002782b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 b5 a4 01 00       	call   c0027e7c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 57 af 01 00       	call   c0028930 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 90 a7 01 00       	call   c002818c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 0d 9e 01 00       	call   c002782b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 39 aa 01 00       	call   c002850b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 39 9d 01 00       	call   c002782b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 19 9d 01 00       	call   c002782b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 e9 a9 01 00       	call   c002850b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 1d ac 01 00       	call   c0028759 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 14 a3 01 00       	call   c0027e7c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 96 ad 01 00       	call   c0028910 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 bd ab 01 00       	call   c0028759 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 b7 a2 01 00       	call   c0027e7c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 35 a9 01 00       	call   c002850b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 b8 a2 01 00       	call   c0027ea8 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 0a a9 01 00       	call   c002850b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 71 a5 01 00       	call   c002818c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 f0 9b 01 00       	call   c002782b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 ba a8 01 00       	call   c002850b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 06 ab 01 00       	call   c0028777 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 fb a1 01 00       	call   c0027ea8 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 cd a1 01 00       	call   c0027ea8 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 11 a8 01 00       	call   c002850b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 78 a4 01 00       	call   c002818c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 61 a1 01 00       	call   c0027ea8 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 1d aa 01 00       	call   c002877b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 10 a4 01 00       	call   c002818c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 8f 9a 01 00       	call   c002782b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 7c ab 01 00       	call   c0028930 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 4e a7 01 00       	call   c002850b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 a5 a0 01 00       	call   c0027e7c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 84 a9 01 00       	call   c0028777 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 1c 9a 01 00       	call   c002782b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 44 a0 01 00       	call   c0027e7c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 e6 aa 01 00       	call   c0028930 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 c4 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e3c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 b8 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e48]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 7e 19 00 00       	call   c000f82b <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 99 a7 01 00       	call   c0028777 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 57 a7 01 00       	call   c0028759 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 43 a7 01 00       	call   c0028777 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 b5 a4 01 00       	call   c002850b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 33 9e 01 00       	call   c0027ea8 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 85 a4 01 00       	call   c002850b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 8b 97 01 00       	call   c002782b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 5a a4 01 00       	call   c002850b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 aa a6 01 00       	call   c0028775 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 8b 9d 01 00       	call   c0027e7c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 0d a8 01 00       	call   c0028910 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 34 a6 01 00       	call   c0028759 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 33 9d 01 00       	call   c0027e7c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 b1 a3 01 00       	call   c002850b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 34 9d 01 00       	call   c0027ea8 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 86 a3 01 00       	call   c002850b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 ed 9f 01 00       	call   c002818c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 6c 96 01 00       	call   c002782b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 94 9f 01 00       	call   c002818c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 1a 96 01 00       	call   c002782b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 08 a7 01 00       	call   c0028930 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 da a2 01 00       	call   c002850b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 31 9c 01 00       	call   c0027e7c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 10 a5 01 00       	call   c0028777 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 a9 95 01 00       	call   c002782b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 d5 9b 01 00       	call   c0027e7c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 77 a6 01 00       	call   c0028930 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 24 a2 01 00       	call   c002850b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 a1 9b 01 00       	call   c0027ea8 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 f2 a1 01 00       	call   c002850b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 f8 94 01 00       	call   c002782b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 c8 a1 01 00       	call   c002850b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 1c a4 01 00       	call   c0028779 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 f5 9a 01 00       	call   c0027e7c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 77 a5 01 00       	call   c0028910 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 9e a3 01 00       	call   c0028759 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 9c 9a 01 00       	call   c0027e7c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 1a a1 01 00       	call   c002850b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 9d 9a 01 00       	call   c0027ea8 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 ef a0 01 00       	call   c002850b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 56 9d 01 00       	call   c002818c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 d5 93 01 00       	call   c002782b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 f1 9c 01 00       	call   c002818c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 70 93 01 00       	call   c002782b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 5e a4 01 00       	call   c0028930 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 30 a0 01 00       	call   c002850b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 87 99 01 00       	call   c0027e7c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 66 a2 01 00       	call   c0028777 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 ff 92 01 00       	call   c002782b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 2b 99 01 00       	call   c0027e7c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 9c 9f 01 00       	call   c002850b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 a2 92 01 00       	call   c002782b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 de a2 02 c0       	mov    eax,0xc002a2de
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 ef a2 02 c0       	mov    eax,0xc002a2ef
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 c0 11 00 00       	call   c000f82b <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 c2 11 00 00       	call   c000f84b <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 3c 11 00 00       	jmp    c000f81b <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 57 11 00 00       	jmp    c000f83b <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000e708:	48                   	dec    eax
c000e709:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c000e719:	ff 05 c4 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c4
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c000e728:	48                   	dec    eax
c000e729:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d c0 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f9c0,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c000e743:	e8 6f f6 00 00       	call   c001ddb7 <schedule()>
c000e748:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000e74d:	48                   	dec    eax
c000e74e:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 26 a3 02 c0       	push   0xc002a326
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 c8 e4 02 c0       	mov    eax,0xc002e4c8
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 2f a3 02 c0       	push   0xc002a32f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 a4 6c 02 c0       	mov    eax,0xc0026ca4
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 39 a3 02 c0       	push   0xc002a339
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 d8 69 02 c0       	mov    eax,0xc00269d8
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 42 a3 02 c0       	push   0xc002a342
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 a4 6d 02 c0       	mov    eax,0xc0026da4
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 4c a3 02 c0       	push   0xc002a34c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 24 6b 02 c0       	mov    eax,0xc0026b24
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 55 a3 02 c0       	push   0xc002a355
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 cc e4 02 c0       	mov    eax,0xc002e4cc
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 62 a3 02 c0       	push   0xc002a362
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 cd e4 02 c0       	mov    eax,0xc002e4cd
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 a7 55 00 00       	call   c0013e4a <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 6f a3 02 c0       	push   0xc002a36f
c000e8d3:	e8 9d 0f 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 86 a3 02 c0 	mov    DWORD PTR [esp],0xc002a386
c000e8e0:	e8 90 0f 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 2a 0f 00 00       	call   c000f81b <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c000e900:	68 9f a3 02 c0       	push   0xc002a39f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 8d f0 00 00       	call   c001d99a <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 1b f2 00 c0       	push   0xc000f21b
c000e91c:	53                   	push   ebx
c000e91d:	e8 70 f2 00 00       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 85 e5 01 c0       	push   0xc001e585
c000e92b:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c000e931:	e8 5c f2 00 00       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 a8 f9 02 c0       	mov    ds:0xc002f9a8,eax
c000e93e:	68 44 a5 02 c0       	push   0xc002a544
c000e943:	c6 05 cd e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4cd,0x1
c000e94a:	e8 26 0f 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 dd ff 00 00       	call   c001e931 <Vm::initialise8086()>
c000e954:	e8 b9 42 00 00       	call   c0012c12 <Fs::initVFS()>
c000e959:	c7 04 24 ac a3 02 c0 	mov    DWORD PTR [esp],0xc002a3ac
c000e960:	e8 10 0f 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e965:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 44 a5 02 c0       	push   0xc002a544
c000e984:	e8 ec 0e 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e989:	e8 94 d8 00 00       	call   c001c222 <Sys::loadSyscalls()>
c000e98e:	e8 89 b7 00 00       	call   c001a11c <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 c6 a3 02 c0       	push   0xc002a3c6
c000e99d:	68 cf a3 02 c0       	push   0xc002a3cf
c000e9a2:	e8 3a c6 00 00       	call   c001afe1 <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 53 4d 00 00       	call   c0013702 <User::loadClockSettings(int)>
c000e9af:	c7 04 24 68 a5 02 c0 	mov    DWORD PTR [esp],0xc002a568
c000e9b6:	e8 ba 0e 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 3e 54 00 00       	call   c0013e0a <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 d7 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3d7
c000e9d3:	e8 9d 0e 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 a7 b2 00 00       	call   c0019c84 <Krnl::startCPUs()>
c000e9dd:	c7 04 24 f1 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3f1
c000e9e4:	e8 8c 0e 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 02 a4 02 c0       	push   0xc002a402
c000e9f8:	e8 f5 e9 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 1d ec 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 7a f5 00 00       	call   c001df8d <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 1e a4 02 c0       	push   0xc002a41e
c000ea27:	50                   	push   eax
c000ea28:	e8 97 54 00 00       	call   c0013ec4 <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 e1 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4e1,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 a5 7d 01 00       	call   c0026966 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 8a 9f 00 00       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 63 9f 00 00       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 41 9f 00 00       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 1f 9f 00 00       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 e0 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e4e0,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 2d 9e 00 00       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 08 9e 00 00       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 0f 7c 01 00       	call   c0026920 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 cc 7b 01 00       	call   c0026900 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 24 9e 00 00       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 27 a4 02 c0       	push   0xc002a427
c000eda4:	e8 7c b4 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 2d a4 02 c0       	push   0xc002a42d
c000eddc:	e8 44 b4 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 88 a5 02 c0       	push   0xc002a588
c000ee32:	e8 3e 0a 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 e0 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4e0,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 00 d4 02 c0 	sete   BYTE PTR ds:0xc002d400
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 33 a4 02 c0       	push   0xc002a433
c000ee51:	e8 26 3a 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 49 a4 02 c0       	push   0xc002a449
c000ee62:	e8 15 3a 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 5d a4 02 c0       	push   0xc002a45d
c000ee70:	e8 07 3a 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ee75:	59                   	pop    ecx
c000ee76:	5e                   	pop    esi
c000ee77:	68 3f 07 00 00       	push   0x73f
c000ee7c:	68 70 a4 02 c0       	push   0xc002a470
c000ee81:	e8 f6 39 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ee86:	58                   	pop    eax
c000ee87:	5a                   	pop    edx
c000ee88:	6a 63                	push   0x63
c000ee8a:	68 87 a4 02 c0       	push   0xc002a487
c000ee8f:	e8 e8 39 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ee94:	c7 04 24 9d a4 02 c0 	mov    DWORD PTR [esp],0xc002a49d
c000ee9b:	e8 dc 39 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000eea0:	c7 04 24 af a4 02 c0 	mov    DWORD PTR [esp],0xc002a4af
c000eea7:	e8 c9 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000eeac:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000eeb3:	e8 63 09 00 00       	call   c000f81b <malloc>
c000eeb8:	89 c6                	mov    esi,eax
c000eeba:	89 04 24             	mov    DWORD PTR [esp],eax
c000eebd:	e8 28 8f 00 00       	call   c0017dea <ACPI::ACPI()>
c000eec2:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec8:	c7 04 24 c9 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4c9
c000eecf:	e8 a1 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eedc:	53                   	push   ebx
c000eedd:	e8 de 4d 00 00       	call   c0013cc0 <Device::addChild(Device*)>
c000eee2:	c7 04 24 ac a5 02 c0 	mov    DWORD PTR [esp],0xc002a5ac
c000eee9:	e8 87 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000eeee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eef1:	e8 80 fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eef6:	c7 04 24 cc a5 02 c0 	mov    DWORD PTR [esp],0xc002a5cc
c000eefd:	e8 73 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000ef02:	c7 04 24 e3 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4e3
c000ef09:	e8 67 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000ef0e:	58                   	pop    eax
c000ef0f:	5a                   	pop    edx
c000ef10:	6a 01                	push   0x1
c000ef12:	53                   	push   ebx
c000ef13:	e8 f4 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef18:	c7 04 24 d7 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3d7
c000ef1f:	e8 51 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000ef24:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2b:	e8 eb 08 00 00       	call   c000f81b <malloc>
c000ef30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef33:	89 c6                	mov    esi,eax
c000ef35:	e8 04 9d 00 00       	call   c0018c3e <CPU::CPU()>
c000ef3a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef40:	59                   	pop    ecx
c000ef41:	58                   	pop    eax
c000ef42:	56                   	push   esi
c000ef43:	53                   	push   ebx
c000ef44:	e8 77 4d 00 00       	call   c0013cc0 <Device::addChild(Device*)>
c000ef49:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef4f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef55:	6a 00                	push   0x0
c000ef57:	6a 00                	push   0x0
c000ef59:	50                   	push   eax
c000ef5a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	68 ec a5 02 c0       	push   0xc002a5ec
c000ef65:	e8 0b 09 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000ef6a:	e8 e9 52 00 00       	call   c0014258 <setupFPU()>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef78:	85 c0                	test   eax,eax
c000ef7a:	74 1f                	je     c000ef9b <Computer::open(int, int, void*)+0x177>
c000ef7c:	83 ec 08             	sub    esp,0x8
c000ef7f:	50                   	push   eax
c000ef80:	53                   	push   ebx
c000ef81:	e8 3a 4d 00 00       	call   c0013cc0 <Device::addChild(Device*)>
c000ef86:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef8c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef8e:	6a 00                	push   0x0
c000ef90:	6a 00                	push   0x0
c000ef92:	6a 00                	push   0x0
c000ef94:	50                   	push   eax
c000ef95:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef98:	83 c4 20             	add    esp,0x20
c000ef9b:	83 ec 0c             	sub    esp,0xc
c000ef9e:	68 f4 a4 02 c0       	push   0xc002a4f4
c000efa3:	e8 cd 08 00 00       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000efa8:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000efaf:	e8 00 ed 00 00       	call   c001dcb4 <setupMultitasking(void (*)())>
c000efb4:	83 c4 14             	add    esp,0x14
c000efb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efbc:	5b                   	pop    ebx
c000efbd:	5e                   	pop    esi
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <Computer::disableNMI()>:
c000efc0:	6a 00                	push   0x0
c000efc2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efc6:	e8 41 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000efcb:	58                   	pop    eax
c000efcc:	5a                   	pop    edx
c000efcd:	c3                   	ret    

c000efce <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efd9:	19 c0                	sbb    eax,eax
c000efdb:	83 e0 80             	and    eax,0xffffff80
c000efde:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efe2:	e6 70                	out    0x70,al
c000efe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe8:	e6 71                	out    0x71,al
c000efea:	c3                   	ret    
c000efeb:	90                   	nop

c000efec <Computer::handleNMI()>:
c000efec:	56                   	push   esi
c000efed:	53                   	push   ebx
c000efee:	83 ec 10             	sub    esp,0x10
c000eff1:	e4 92                	in     al,0x92
c000eff3:	89 c6                	mov    esi,eax
c000eff5:	e4 61                	in     al,0x61
c000eff7:	68 0f a5 02 c0       	push   0xc002a50f
c000effc:	88 c3                	mov    bl,al
c000effe:	e8 79 38 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000f003:	83 c4 10             	add    esp,0x10
c000f006:	83 e6 10             	and    esi,0x10
c000f009:	75 0d                	jne    c000f018 <Computer::handleNMI()+0x2c>
c000f00b:	f6 c3 40             	test   bl,0x40
c000f00e:	75 1d                	jne    c000f02d <Computer::handleNMI()+0x41>
c000f010:	84 db                	test   bl,bl
c000f012:	78 2d                	js     c000f041 <Computer::handleNMI()+0x55>
c000f014:	58                   	pop    eax
c000f015:	5b                   	pop    ebx
c000f016:	5e                   	pop    esi
c000f017:	c3                   	ret    
c000f018:	83 ec 0c             	sub    esp,0xc
c000f01b:	68 20 a5 02 c0       	push   0xc002a520
c000f020:	e8 00 b2 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000f025:	83 c4 10             	add    esp,0x10
c000f028:	f6 c3 40             	test   bl,0x40
c000f02b:	74 e3                	je     c000f010 <Computer::handleNMI()+0x24>
c000f02d:	83 ec 0c             	sub    esp,0xc
c000f030:	68 2d a5 02 c0       	push   0xc002a52d
c000f035:	e8 eb b1 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000f03a:	83 c4 10             	add    esp,0x10
c000f03d:	84 db                	test   bl,bl
c000f03f:	79 d3                	jns    c000f014 <Computer::handleNMI()+0x28>
c000f041:	c7 44 24 10 37 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a537
c000f049:	5a                   	pop    edx
c000f04a:	5b                   	pop    ebx
c000f04b:	5e                   	pop    esi
c000f04c:	e9 d4 b1 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c000f051:	90                   	nop

c000f052 <Computer::setDiskActivityLight(int, bool)>:
c000f052:	56                   	push   esi
c000f053:	53                   	push   ebx
c000f054:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f058:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f05d:	77 1b                	ja     c000f07a <Computer::setDiskActivityLight(int, bool)+0x28>
c000f05f:	e4 92                	in     al,0x92
c000f061:	bb 40 00 00 00       	mov    ebx,0x40
c000f066:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f06a:	89 da                	mov    edx,ebx
c000f06c:	d3 e2                	shl    edx,cl
c000f06e:	89 f1                	mov    ecx,esi
c000f070:	f7 d2                	not    edx
c000f072:	d3 e3                	shl    ebx,cl
c000f074:	21 d0                	and    eax,edx
c000f076:	09 d8                	or     eax,ebx
c000f078:	e6 92                	out    0x92,al
c000f07a:	5b                   	pop    ebx
c000f07b:	5e                   	pop    esi
c000f07c:	c3                   	ret    
c000f07d:	90                   	nop

c000f07e <GDTEntry::setBase(unsigned int)>:
c000f07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f082:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f086:	89 c1                	mov    ecx,eax
c000f088:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f08c:	c1 e9 10             	shr    ecx,0x10
c000f08f:	c1 e8 18             	shr    eax,0x18
c000f092:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f095:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f098:	c3                   	ret    
c000f099:	90                   	nop

c000f09a <GDTEntry::setLimit(unsigned int)>:
c000f09a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f09e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0a5:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0a8:	83 e2 f0             	and    edx,0xfffffff0
c000f0ab:	c1 e8 10             	shr    eax,0x10
c000f0ae:	83 e0 0f             	and    eax,0xf
c000f0b1:	09 d0                	or     eax,edx
c000f0b3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <GDT::GDT()>:
c000f0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0cc:	90                   	nop
c000f0cd:	c3                   	ret    

c000f0ce <GDT::addEntry(GDTEntry)>:
c000f0ce:	53                   	push   ebx
c000f0cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0d7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0dd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0e1:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0e8:	c1 e0 03             	shl    eax,0x3
c000f0eb:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0ed:	5b                   	pop    ebx
c000f0ee:	c3                   	ret    
c000f0ef:	90                   	nop

c000f0f0 <GDT::getNumberOfEntries()>:
c000f0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f6:	c3                   	ret    
c000f0f7:	90                   	nop

c000f0f8 <GDT::flush()>:
c000f0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0fe:	83 c0 04             	add    eax,0x4
c000f101:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f108:	a3 d2 e4 02 c0       	mov    ds:0xc002e4d2,eax
c000f10d:	66 89 15 d0 e4 02 c0 	mov    WORD PTR ds:0xc002e4d0,dx
c000f114:	e9 37 13 ff ff       	jmp    c0000450 <loadGDT>
c000f119:	90                   	nop

c000f11a <GDT::setup()>:
c000f11a:	55                   	push   ebp
c000f11b:	57                   	push   edi
c000f11c:	56                   	push   esi
c000f11d:	53                   	push   ebx
c000f11e:	83 ec 3c             	sub    esp,0x3c
c000f121:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f125:	6a 00                	push   0x0
c000f127:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12b:	53                   	push   ebx
c000f12c:	e8 4d ff ff ff       	call   c000f07e <GDTEntry::setBase(unsigned int)>
c000f131:	6a 00                	push   0x0
c000f133:	53                   	push   ebx
c000f134:	e8 61 ff ff ff       	call   c000f09a <GDTEntry::setLimit(unsigned int)>
c000f139:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f141:	6a 00                	push   0x0
c000f143:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f147:	53                   	push   ebx
c000f148:	e8 31 ff ff ff       	call   c000f07e <GDTEntry::setBase(unsigned int)>
c000f14d:	68 ff ff ff 00       	push   0xffffff
c000f152:	53                   	push   ebx
c000f153:	e8 42 ff ff ff       	call   c000f09a <GDTEntry::setLimit(unsigned int)>
c000f158:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f15c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f161:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f166:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16a:	83 c4 20             	add    esp,0x20
c000f16d:	6a 00                	push   0x0
c000f16f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f173:	53                   	push   ebx
c000f174:	e8 05 ff ff ff       	call   c000f07e <GDTEntry::setBase(unsigned int)>
c000f179:	68 ff ff ff 00       	push   0xffffff
c000f17e:	53                   	push   ebx
c000f17f:	e8 16 ff ff ff       	call   c000f09a <GDTEntry::setLimit(unsigned int)>
c000f184:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f188:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f18c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f190:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f194:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f198:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f19d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1a6:	89 d8                	mov    eax,ebx
c000f1a8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1ac:	80 cc 60             	or     ah,0x60
c000f1af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b3:	83 c4 0c             	add    esp,0xc
c000f1b6:	89 f8                	mov    eax,edi
c000f1b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1bc:	80 cc 60             	or     ah,0x60
c000f1bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c3:	89 c7                	mov    edi,eax
c000f1c5:	55                   	push   ebp
c000f1c6:	e8 03 ff ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c000f1cb:	83 c4 0c             	add    esp,0xc
c000f1ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	55                   	push   ebp
c000f1d7:	e8 f2 fe ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c000f1dc:	83 c4 0c             	add    esp,0xc
c000f1df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	55                   	push   ebp
c000f1e8:	e8 e1 fe ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c000f1ed:	83 c4 0c             	add    esp,0xc
c000f1f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1f8:	53                   	push   ebx
c000f1f9:	51                   	push   ecx
c000f1fa:	55                   	push   ebp
c000f1fb:	e8 ce fe ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c000f200:	83 c4 0c             	add    esp,0xc
c000f203:	57                   	push   edi
c000f204:	56                   	push   esi
c000f205:	55                   	push   ebp
c000f206:	e8 c3 fe ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c000f20b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f20e:	e8 e5 fe ff ff       	call   c000f0f8 <GDT::flush()>
c000f213:	83 c4 4c             	add    esp,0x4c
c000f216:	5b                   	pop    ebx
c000f217:	5e                   	pop    esi
c000f218:	5f                   	pop    edi
c000f219:	5d                   	pop    ebp
c000f21a:	c3                   	ret    

c000f21b <idleFunction(void*)>:
c000f21b:	53                   	push   ebx
c000f21c:	83 ec 08             	sub    esp,0x8
c000f21f:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000f224:	48                   	dec    eax
c000f225:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000f22a:	75 01                	jne    c000f22d <idleFunction(void*)+0x12>
c000f22c:	fb                   	sti    
c000f22d:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c000f232:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f238:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f23f:	74 3c                	je     c000f27d <idleFunction(void*)+0x62>
c000f241:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f248:	74 33                	je     c000f27d <idleFunction(void*)+0x62>
c000f24a:	31 db                	xor    ebx,ebx
c000f24c:	52                   	push   edx
c000f24d:	52                   	push   edx
c000f24e:	68 e1 00 00 00       	push   0xe1
c000f253:	50                   	push   eax
c000f254:	e8 29 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f259:	53                   	push   ebx
c000f25a:	83 e0 02             	and    eax,0x2
c000f25d:	50                   	push   eax
c000f25e:	68 e1 00 00 00       	push   0xe1
c000f263:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c000f269:	e8 40 fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f26e:	83 c4 20             	add    esp,0x20
c000f271:	e8 09 10 ff ff       	call   c000027f <doTPAUSE>
c000f276:	e8 35 97 01 00       	call   c00289b0 <idleCommon()>
c000f27b:	eb f4                	jmp    c000f271 <idleFunction(void*)+0x56>
c000f27d:	fb                   	sti    
c000f27e:	f4                   	hlt    
c000f27f:	e8 2c 97 01 00       	call   c00289b0 <idleCommon()>
c000f284:	eb f7                	jmp    c000f27d <idleFunction(void*)+0x62>

c000f286 <IDTEntry::IDTEntry(bool)>:
c000f286:	83 ec 04             	sub    esp,0x4
c000f289:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f28d:	88 04 24             	mov    BYTE PTR [esp],al
c000f290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f294:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f29e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a9:	83 e2 f0             	and    edx,0xfffffff0
c000f2ac:	83 ca 0e             	or     edx,0xe
c000f2af:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2b9:	83 e2 ef             	and    edx,0xffffffef
c000f2bc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2bf:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c3:	74 04                	je     c000f2c9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2c5:	b2 03                	mov    dl,0x3
c000f2c7:	eb 02                	jmp    c000f2cb <IDTEntry::IDTEntry(bool)+0x45>
c000f2c9:	b2 00                	mov    dl,0x0
c000f2cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2cf:	83 e2 03             	and    edx,0x3
c000f2d2:	88 d1                	mov    cl,dl
c000f2d4:	c1 e1 05             	shl    ecx,0x5
c000f2d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2da:	83 e2 9f             	and    edx,0xffffff9f
c000f2dd:	09 ca                	or     edx,ecx
c000f2df:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2e6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2e9:	83 ca 80             	or     edx,0xffffff80
c000f2ec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2ef:	90                   	nop
c000f2f0:	83 c4 04             	add    esp,0x4
c000f2f3:	c3                   	ret    

c000f2f4 <IDTEntry::setOffset(unsigned int)>:
c000f2f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2fc:	66 89 02             	mov    WORD PTR [edx],ax
c000f2ff:	c1 e8 10             	shr    eax,0x10
c000f302:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f306:	c3                   	ret    
c000f307:	90                   	nop

c000f308 <IDT::IDT()>:
c000f308:	90                   	nop
c000f309:	c3                   	ret    

c000f30a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f30e:	83 c0 30             	add    eax,0x30
c000f311:	c3                   	ret    

c000f312 <IDT::addEntry(IDTEntry, int)>:
c000f312:	53                   	push   ebx
c000f313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f317:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f31f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f323:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f326:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32a:	5b                   	pop    ebx
c000f32b:	c3                   	ret    

c000f32c <IDT::addEntry(int, void (*)(), bool)>:
c000f32c:	53                   	push   ebx
c000f32d:	83 ec 10             	sub    esp,0x10
c000f330:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f335:	50                   	push   eax
c000f336:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33a:	53                   	push   ebx
c000f33b:	e8 46 ff ff ff       	call   c000f286 <IDTEntry::IDTEntry(bool)>
c000f340:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f344:	53                   	push   ebx
c000f345:	e8 aa ff ff ff       	call   c000f2f4 <IDTEntry::setOffset(unsigned int)>
c000f34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f34e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35a:	e8 b3 ff ff ff       	call   c000f312 <IDT::addEntry(IDTEntry, int)>
c000f35f:	83 c4 30             	add    esp,0x30
c000f362:	5b                   	pop    ebx
c000f363:	c3                   	ret    

c000f364 <IDT::flush()>:
c000f364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f368:	66 c7 05 d8 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e4d8,0x7ff
c000f371:	a3 da e4 02 c0       	mov    ds:0xc002e4da,eax
c000f376:	0f 01 1d d8 e4 02 c0 	lidtd  ds:0xc002e4d8
c000f37d:	c3                   	ret    

c000f37e <IDT::setup()>:
c000f37e:	57                   	push   edi
c000f37f:	56                   	push   esi
c000f380:	53                   	push   ebx
c000f381:	83 ec 10             	sub    esp,0x10
c000f384:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f388:	6a 00                	push   0x0
c000f38a:	68 70 04 00 c0       	push   0xc0000470
c000f38f:	6a 00                	push   0x0
c000f391:	53                   	push   ebx
c000f392:	e8 95 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f397:	6a 00                	push   0x0
c000f399:	68 80 04 00 c0       	push   0xc0000480
c000f39e:	6a 01                	push   0x1
c000f3a0:	53                   	push   ebx
c000f3a1:	e8 86 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3a6:	83 c4 20             	add    esp,0x20
c000f3a9:	6a 00                	push   0x0
c000f3ab:	68 8a 04 00 c0       	push   0xc000048a
c000f3b0:	6a 02                	push   0x2
c000f3b2:	53                   	push   ebx
c000f3b3:	e8 74 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3b8:	6a 00                	push   0x0
c000f3ba:	68 94 04 00 c0       	push   0xc0000494
c000f3bf:	6a 03                	push   0x3
c000f3c1:	53                   	push   ebx
c000f3c2:	e8 65 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3c7:	83 c4 20             	add    esp,0x20
c000f3ca:	6a 00                	push   0x0
c000f3cc:	68 9e 04 00 c0       	push   0xc000049e
c000f3d1:	6a 04                	push   0x4
c000f3d3:	53                   	push   ebx
c000f3d4:	e8 53 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3d9:	6a 00                	push   0x0
c000f3db:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e0:	6a 05                	push   0x5
c000f3e2:	53                   	push   ebx
c000f3e3:	e8 44 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3e8:	83 c4 20             	add    esp,0x20
c000f3eb:	6a 00                	push   0x0
c000f3ed:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f2:	6a 06                	push   0x6
c000f3f4:	53                   	push   ebx
c000f3f5:	e8 32 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f3fa:	6a 00                	push   0x0
c000f3fc:	68 bc 04 00 c0       	push   0xc00004bc
c000f401:	6a 07                	push   0x7
c000f403:	53                   	push   ebx
c000f404:	e8 23 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f409:	83 c4 20             	add    esp,0x20
c000f40c:	6a 00                	push   0x0
c000f40e:	68 c6 04 00 c0       	push   0xc00004c6
c000f413:	6a 08                	push   0x8
c000f415:	53                   	push   ebx
c000f416:	e8 11 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f41b:	6a 00                	push   0x0
c000f41d:	68 ce 04 00 c0       	push   0xc00004ce
c000f422:	6a 09                	push   0x9
c000f424:	53                   	push   ebx
c000f425:	e8 02 ff ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f42a:	83 c4 20             	add    esp,0x20
c000f42d:	6a 00                	push   0x0
c000f42f:	68 d8 04 00 c0       	push   0xc00004d8
c000f434:	6a 0a                	push   0xa
c000f436:	53                   	push   ebx
c000f437:	e8 f0 fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f43c:	6a 00                	push   0x0
c000f43e:	68 e0 04 00 c0       	push   0xc00004e0
c000f443:	6a 0b                	push   0xb
c000f445:	53                   	push   ebx
c000f446:	e8 e1 fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f44b:	83 c4 20             	add    esp,0x20
c000f44e:	6a 00                	push   0x0
c000f450:	68 e8 04 00 c0       	push   0xc00004e8
c000f455:	6a 0c                	push   0xc
c000f457:	53                   	push   ebx
c000f458:	e8 cf fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f45d:	6a 00                	push   0x0
c000f45f:	68 f0 04 00 c0       	push   0xc00004f0
c000f464:	6a 0d                	push   0xd
c000f466:	53                   	push   ebx
c000f467:	e8 c0 fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f46c:	83 c4 20             	add    esp,0x20
c000f46f:	6a 00                	push   0x0
c000f471:	68 f8 04 00 c0       	push   0xc00004f8
c000f476:	6a 0e                	push   0xe
c000f478:	53                   	push   ebx
c000f479:	e8 ae fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f47e:	6a 00                	push   0x0
c000f480:	68 00 05 00 c0       	push   0xc0000500
c000f485:	6a 0f                	push   0xf
c000f487:	53                   	push   ebx
c000f488:	e8 9f fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f48d:	83 c4 20             	add    esp,0x20
c000f490:	6a 00                	push   0x0
c000f492:	68 0a 05 00 c0       	push   0xc000050a
c000f497:	6a 10                	push   0x10
c000f499:	53                   	push   ebx
c000f49a:	e8 8d fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f49f:	6a 00                	push   0x0
c000f4a1:	68 14 05 00 c0       	push   0xc0000514
c000f4a6:	6a 11                	push   0x11
c000f4a8:	53                   	push   ebx
c000f4a9:	e8 7e fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f4ae:	83 c4 20             	add    esp,0x20
c000f4b1:	6a 00                	push   0x0
c000f4b3:	68 1e 05 00 c0       	push   0xc000051e
c000f4b8:	6a 12                	push   0x12
c000f4ba:	53                   	push   ebx
c000f4bb:	e8 6c fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f4c0:	6a 01                	push   0x1
c000f4c2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4c7:	6a 60                	push   0x60
c000f4c9:	53                   	push   ebx
c000f4ca:	e8 5d fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f4cf:	83 c4 20             	add    esp,0x20
c000f4d2:	6a 00                	push   0x0
c000f4d4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4d9:	6a 20                	push   0x20
c000f4db:	53                   	push   ebx
c000f4dc:	e8 4b fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f4e1:	6a 00                	push   0x0
c000f4e3:	68 aa 05 00 c0       	push   0xc00005aa
c000f4e8:	6a 21                	push   0x21
c000f4ea:	53                   	push   ebx
c000f4eb:	e8 3c fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f4f0:	83 c4 20             	add    esp,0x20
c000f4f3:	6a 00                	push   0x0
c000f4f5:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fa:	6a 22                	push   0x22
c000f4fc:	53                   	push   ebx
c000f4fd:	e8 2a fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f502:	6a 00                	push   0x0
c000f504:	68 28 05 00 c0       	push   0xc0000528
c000f509:	6a 23                	push   0x23
c000f50b:	53                   	push   ebx
c000f50c:	e8 1b fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f511:	83 c4 20             	add    esp,0x20
c000f514:	6a 00                	push   0x0
c000f516:	68 32 05 00 c0       	push   0xc0000532
c000f51b:	6a 24                	push   0x24
c000f51d:	53                   	push   ebx
c000f51e:	e8 09 fe ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f523:	6a 00                	push   0x0
c000f525:	68 3c 05 00 c0       	push   0xc000053c
c000f52a:	6a 25                	push   0x25
c000f52c:	53                   	push   ebx
c000f52d:	e8 fa fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f532:	83 c4 20             	add    esp,0x20
c000f535:	6a 00                	push   0x0
c000f537:	68 46 05 00 c0       	push   0xc0000546
c000f53c:	6a 26                	push   0x26
c000f53e:	53                   	push   ebx
c000f53f:	e8 e8 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f544:	6a 00                	push   0x0
c000f546:	68 50 05 00 c0       	push   0xc0000550
c000f54b:	6a 27                	push   0x27
c000f54d:	53                   	push   ebx
c000f54e:	e8 d9 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f553:	83 c4 20             	add    esp,0x20
c000f556:	6a 00                	push   0x0
c000f558:	68 5a 05 00 c0       	push   0xc000055a
c000f55d:	6a 28                	push   0x28
c000f55f:	53                   	push   ebx
c000f560:	e8 c7 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f565:	6a 00                	push   0x0
c000f567:	68 64 05 00 c0       	push   0xc0000564
c000f56c:	6a 29                	push   0x29
c000f56e:	53                   	push   ebx
c000f56f:	e8 b8 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f574:	83 c4 20             	add    esp,0x20
c000f577:	6a 00                	push   0x0
c000f579:	68 6e 05 00 c0       	push   0xc000056e
c000f57e:	6a 2a                	push   0x2a
c000f580:	53                   	push   ebx
c000f581:	e8 a6 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f586:	6a 00                	push   0x0
c000f588:	68 78 05 00 c0       	push   0xc0000578
c000f58d:	6a 2b                	push   0x2b
c000f58f:	53                   	push   ebx
c000f590:	e8 97 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f595:	83 c4 20             	add    esp,0x20
c000f598:	6a 00                	push   0x0
c000f59a:	68 82 05 00 c0       	push   0xc0000582
c000f59f:	6a 2c                	push   0x2c
c000f5a1:	53                   	push   ebx
c000f5a2:	e8 85 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5a7:	6a 00                	push   0x0
c000f5a9:	68 8c 05 00 c0       	push   0xc000058c
c000f5ae:	6a 2d                	push   0x2d
c000f5b0:	53                   	push   ebx
c000f5b1:	e8 76 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5b6:	83 c4 20             	add    esp,0x20
c000f5b9:	6a 00                	push   0x0
c000f5bb:	68 96 05 00 c0       	push   0xc0000596
c000f5c0:	6a 2e                	push   0x2e
c000f5c2:	53                   	push   ebx
c000f5c3:	e8 64 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5c8:	6a 00                	push   0x0
c000f5ca:	68 a0 05 00 c0       	push   0xc00005a0
c000f5cf:	6a 2f                	push   0x2f
c000f5d1:	53                   	push   ebx
c000f5d2:	e8 55 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5d7:	83 c4 20             	add    esp,0x20
c000f5da:	6a 00                	push   0x0
c000f5dc:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e1:	6a 30                	push   0x30
c000f5e3:	53                   	push   ebx
c000f5e4:	e8 43 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5e9:	6a 00                	push   0x0
c000f5eb:	68 00 06 00 c0       	push   0xc0000600
c000f5f0:	6a 31                	push   0x31
c000f5f2:	53                   	push   ebx
c000f5f3:	e8 34 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f5f8:	83 c4 20             	add    esp,0x20
c000f5fb:	6a 00                	push   0x0
c000f5fd:	68 0a 06 00 c0       	push   0xc000060a
c000f602:	6a 32                	push   0x32
c000f604:	53                   	push   ebx
c000f605:	e8 22 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f60a:	6a 00                	push   0x0
c000f60c:	68 14 06 00 c0       	push   0xc0000614
c000f611:	6a 33                	push   0x33
c000f613:	53                   	push   ebx
c000f614:	e8 13 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f619:	83 c4 20             	add    esp,0x20
c000f61c:	6a 00                	push   0x0
c000f61e:	68 1e 06 00 c0       	push   0xc000061e
c000f623:	6a 34                	push   0x34
c000f625:	53                   	push   ebx
c000f626:	e8 01 fd ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f62b:	6a 00                	push   0x0
c000f62d:	68 28 06 00 c0       	push   0xc0000628
c000f632:	6a 35                	push   0x35
c000f634:	53                   	push   ebx
c000f635:	e8 f2 fc ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f63a:	83 c4 20             	add    esp,0x20
c000f63d:	6a 00                	push   0x0
c000f63f:	68 32 06 00 c0       	push   0xc0000632
c000f644:	6a 36                	push   0x36
c000f646:	53                   	push   ebx
c000f647:	e8 e0 fc ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f64c:	6a 00                	push   0x0
c000f64e:	68 3c 06 00 c0       	push   0xc000063c
c000f653:	6a 37                	push   0x37
c000f655:	53                   	push   ebx
c000f656:	e8 d1 fc ff ff       	call   c000f32c <IDT::addEntry(int, void (*)(), bool)>
c000f65b:	83 c4 1c             	add    esp,0x1c
c000f65e:	6a 03                	push   0x3
c000f660:	6a 02                	push   0x2
c000f662:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c000f668:	e8 dd 25 00 00       	call   c0011c4a <VAS::allocatePages(int, int)>
c000f66d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f674:	89 c6                	mov    esi,eax
c000f676:	e8 a0 01 00 00       	call   c000f81b <malloc>
c000f67b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f681:	89 04 24             	mov    DWORD PTR [esp],eax
c000f684:	89 c7                	mov    edi,eax
c000f686:	e8 5d 17 00 00       	call   c0010de8 <TSS::TSS()>
c000f68b:	83 c4 0c             	add    esp,0xc
c000f68e:	68 c6 04 00 c0       	push   0xc00004c6
c000f693:	56                   	push   esi
c000f694:	57                   	push   edi
c000f695:	e8 8e 17 00 00       	call   c0010e28 <TSS::setup(unsigned long, unsigned long)>
c000f69a:	89 c6                	mov    esi,eax
c000f69c:	58                   	pop    eax
c000f69d:	5a                   	pop    edx
c000f69e:	6a 00                	push   0x0
c000f6a0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a4:	50                   	push   eax
c000f6a5:	e8 dc fb ff ff       	call   c000f286 <IDTEntry::IDTEntry(bool)>
c000f6aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6ae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6ba:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c4:	80 ce 05             	or     dh,0x5
c000f6c7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6d8:	e8 87 fc ff ff       	call   c000f364 <IDT::flush()>
c000f6dd:	83 c4 20             	add    esp,0x20
c000f6e0:	5b                   	pop    ebx
c000f6e1:	5e                   	pop    esi
c000f6e2:	5f                   	pop    edi
c000f6e3:	c3                   	ret    

c000f6e4 <sbrk>:
c000f6e4:	55                   	push   ebp
c000f6e5:	57                   	push   edi
c000f6e6:	56                   	push   esi
c000f6e7:	53                   	push   ebx
c000f6e8:	83 ec 24             	sub    esp,0x24
c000f6eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6ef:	53                   	push   ebx
c000f6f0:	68 3c a6 02 c0       	push   0xc002a63c
c000f6f5:	e8 82 31 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000f6fa:	83 c4 10             	add    esp,0x10
c000f6fd:	85 db                	test   ebx,ebx
c000f6ff:	74 5f                	je     c000f760 <sbrk+0x7c>
c000f701:	78 64                	js     c000f767 <sbrk+0x83>
c000f703:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c000f708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f70c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f712:	89 dd                	mov    ebp,ebx
c000f714:	78 69                	js     c000f77f <sbrk+0x9b>
c000f716:	c1 fd 0c             	sar    ebp,0xc
c000f719:	bb 00 00 00 00       	mov    ebx,0x0
c000f71e:	8b 35 30 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e630
c000f724:	8b 3d 88 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d288
c000f72a:	e8 e8 04 00 00       	call   c000fc17 <Phys::allocatePage()>
c000f72f:	68 01 04 00 00       	push   0x401
c000f734:	57                   	push   edi
c000f735:	50                   	push   eax
c000f736:	56                   	push   esi
c000f737:	e8 0c 24 00 00       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f73c:	81 05 88 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d288,0x1000
c000f746:	43                   	inc    ebx
c000f747:	83 c4 10             	add    esp,0x10
c000f74a:	39 dd                	cmp    ebp,ebx
c000f74c:	75 d0                	jne    c000f71e <sbrk+0x3a>
c000f74e:	0f 20 d8             	mov    eax,cr3
c000f751:	0f 22 d8             	mov    cr3,eax
c000f754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f758:	83 c4 1c             	add    esp,0x1c
c000f75b:	5b                   	pop    ebx
c000f75c:	5e                   	pop    esi
c000f75d:	5f                   	pop    edi
c000f75e:	5d                   	pop    ebp
c000f75f:	c3                   	ret    
c000f760:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c000f765:	eb f1                	jmp    c000f758 <sbrk+0x74>
c000f767:	83 ec 08             	sub    esp,0x8
c000f76a:	53                   	push   ebx
c000f76b:	68 68 a6 02 c0       	push   0xc002a668
c000f770:	e8 07 31 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f77d:	eb d9                	jmp    c000f758 <sbrk+0x74>
c000f77f:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000f785:	eb 8f                	jmp    c000f716 <sbrk+0x32>

c000f787 <mmap>:
c000f787:	83 ec 18             	sub    esp,0x18
c000f78a:	68 5a a6 02 c0       	push   0xc002a65a
c000f78f:	e8 91 aa 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000f794:	b8 00 00 00 00       	mov    eax,0x0
c000f799:	83 c4 1c             	add    esp,0x1c
c000f79c:	c3                   	ret    

c000f79d <munmap>:
c000f79d:	83 ec 18             	sub    esp,0x18
c000f7a0:	68 5f a6 02 c0       	push   0xc002a65f
c000f7a5:	e8 7b aa 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000f7aa:	b8 00 00 00 00       	mov    eax,0x0
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	c3                   	ret    

c000f7b3 <liballoc_lock()>:
c000f7b3:	fa                   	cli    
c000f7b4:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	c3                   	ret    

c000f7c0 <liballoc_unlock()>:
c000f7c0:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000f7c5:	48                   	dec    eax
c000f7c6:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000f7cb:	75 01                	jne    c000f7ce <liballoc_unlock()+0xe>
c000f7cd:	fb                   	sti    
c000f7ce:	b8 00 00 00 00       	mov    eax,0x0
c000f7d3:	c3                   	ret    

c000f7d4 <liballoc_alloc(int)>:
c000f7d4:	83 ec 10             	sub    esp,0x10
c000f7d7:	6a 01                	push   0x1
c000f7d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7dd:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c000f7e3:	e8 62 24 00 00       	call   c0011c4a <VAS::allocatePages(int, int)>
c000f7e8:	83 c4 1c             	add    esp,0x1c
c000f7eb:	c3                   	ret    

c000f7ec <liballoc_free(void*, int)>:
c000f7ec:	83 ec 14             	sub    esp,0x14
c000f7ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7f3:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c000f7f9:	e8 f6 20 00 00       	call   c00118f4 <VAS::freeAllocatedPages(unsigned long)>
c000f7fe:	b8 00 00 00 00       	mov    eax,0x0
c000f803:	83 c4 1c             	add    esp,0x1c
c000f806:	c3                   	ret    

c000f807 <realloc>:
c000f807:	83 ec 14             	sub    esp,0x14
c000f80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f812:	e8 15 1e ff ff       	call   c000162c <dlrealloc>
c000f817:	83 c4 1c             	add    esp,0x1c
c000f81a:	c3                   	ret    

c000f81b <malloc>:
c000f81b:	83 ec 18             	sub    esp,0x18
c000f81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f822:	e8 c8 18 ff ff       	call   c00010ef <dlmalloc>
c000f827:	83 c4 1c             	add    esp,0x1c
c000f82a:	c3                   	ret    

c000f82b <free>:
c000f82b:	83 ec 18             	sub    esp,0x18
c000f82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f832:	e8 5d 15 ff ff       	call   c0000d94 <dlfree>
c000f837:	83 c4 1c             	add    esp,0x1c
c000f83a:	c3                   	ret    

c000f83b <rfree>:
c000f83b:	83 ec 18             	sub    esp,0x18
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 4d 15 ff ff       	call   c0000d94 <dlfree>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <calloc>:
c000f84b:	56                   	push   esi
c000f84c:	53                   	push   ebx
c000f84d:	83 ec 10             	sub    esp,0x10
c000f850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f854:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f859:	53                   	push   ebx
c000f85a:	e8 bc ff ff ff       	call   c000f81b <malloc>
c000f85f:	89 c6                	mov    esi,eax
c000f861:	83 c4 0c             	add    esp,0xc
c000f864:	53                   	push   ebx
c000f865:	6a 00                	push   0x0
c000f867:	50                   	push   eax
c000f868:	e8 e3 0e ff ff       	call   c0000750 <memset>
c000f86d:	89 f0                	mov    eax,esi
c000f86f:	83 c4 14             	add    esp,0x14
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	c3                   	ret    

c000f875 <Krnl::setBootMessage(char const*)>:
c000f875:	57                   	push   edi
c000f876:	56                   	push   esi
c000f877:	53                   	push   ebx
c000f878:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f87e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f885:	68 9e 00 00 00       	push   0x9e
c000f88a:	6a 00                	push   0x0
c000f88c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f890:	56                   	push   esi
c000f891:	e8 ba 0e ff ff       	call   c0000750 <memset>
c000f896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f899:	e8 ce 0e ff ff       	call   c000076c <strlen>
c000f89e:	ba 50 00 00 00       	mov    edx,0x50
c000f8a3:	83 c4 10             	add    esp,0x10
c000f8a6:	29 c2                	sub    edx,eax
c000f8a8:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f8ac:	d1 ea                	shr    edx,1
c000f8ae:	84 c0                	test   al,al
c000f8b0:	74 19                	je     c000f8cb <Krnl::setBootMessage(char const*)+0x56>
c000f8b2:	01 d2                	add    edx,edx
c000f8b4:	43                   	inc    ebx
c000f8b5:	01 f2                	add    edx,esi
c000f8b7:	80 cc 0f             	or     ah,0xf
c000f8ba:	83 c2 02             	add    edx,0x2
c000f8bd:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f8c1:	43                   	inc    ebx
c000f8c2:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f8c7:	84 c0                	test   al,al
c000f8c9:	75 ec                	jne    c000f8b7 <Krnl::setBootMessage(char const*)+0x42>
c000f8cb:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f8d0:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f8d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8d7:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f8dd:	5b                   	pop    ebx
c000f8de:	5e                   	pop    esi
c000f8df:	5f                   	pop    edi
c000f8e0:	c3                   	ret    

c000f8e1 <kernel_main>:
c000f8e1:	57                   	push   edi
c000f8e2:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8e7:	56                   	push   esi
c000f8e8:	89 fa                	mov    edx,edi
c000f8ea:	53                   	push   ebx
c000f8eb:	31 f6                	xor    esi,esi
c000f8ed:	83 ec 2c             	sub    esp,0x2c
c000f8f0:	89 f0                	mov    eax,esi
c000f8f2:	ee                   	out    dx,al
c000f8f3:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8f8:	b0 80                	mov    al,0x80
c000f8fa:	89 da                	mov    edx,ebx
c000f8fc:	ee                   	out    dx,al
c000f8fd:	b1 03                	mov    cl,0x3
c000f8ff:	ba f8 03 00 00       	mov    edx,0x3f8
c000f904:	88 c8                	mov    al,cl
c000f906:	ee                   	out    dx,al
c000f907:	89 f0                	mov    eax,esi
c000f909:	89 fa                	mov    edx,edi
c000f90b:	ee                   	out    dx,al
c000f90c:	88 c8                	mov    al,cl
c000f90e:	89 da                	mov    edx,ebx
c000f910:	ee                   	out    dx,al
c000f911:	b0 c7                	mov    al,0xc7
c000f913:	ba fa 03 00 00       	mov    edx,0x3fa
c000f918:	ee                   	out    dx,al
c000f919:	b0 0b                	mov    al,0xb
c000f91b:	ba fc 03 00 00       	mov    edx,0x3fc
c000f920:	ee                   	out    dx,al
c000f921:	68 98 a6 02 c0       	push   0xc002a698
c000f926:	e8 51 2f 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000f92b:	e8 b8 09 00 00       	call   c00102e8 <installVgaTextImplementation()>
c000f930:	0f b6 05 a0 d2 02 c0 	movzx  eax,BYTE PTR ds:0xc002d2a0
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	84 c0                	test   al,al
c000f93c:	74 6c                	je     c000f9aa <kernel_main+0xc9>
c000f93e:	31 db                	xor    ebx,ebx
c000f940:	bf 0a 00 00 00       	mov    edi,0xa
c000f945:	be 05 00 00 00       	mov    esi,0x5
c000f94a:	31 c9                	xor    ecx,ecx
c000f94c:	eb 2a                	jmp    c000f978 <kernel_main+0x97>
c000f94e:	3c 0d                	cmp    al,0xd
c000f950:	74 1a                	je     c000f96c <kernel_main+0x8b>
c000f952:	3c 0a                	cmp    al,0xa
c000f954:	74 40                	je     c000f996 <kernel_main+0xb5>
c000f956:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f959:	80 cc 0e             	or     ah,0xe
c000f95c:	c1 e2 04             	shl    edx,0x4
c000f95f:	01 ca                	add    edx,ecx
c000f961:	41                   	inc    ecx
c000f962:	01 fa                	add    edx,edi
c000f964:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f96c:	43                   	inc    ebx
c000f96d:	0f b6 83 a0 d2 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2d60]
c000f974:	84 c0                	test   al,al
c000f976:	74 32                	je     c000f9aa <kernel_main+0xc9>
c000f978:	80 b9 d6 d2 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2d2a],0xdb
c000f97f:	75 cd                	jne    c000f94e <kernel_main+0x6d>
c000f981:	0f b6 91 d5 d2 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2d2b]
c000f988:	83 e2 fe             	and    edx,0xfffffffe
c000f98b:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f991:	75 bb                	jne    c000f94e <kernel_main+0x6d>
c000f993:	47                   	inc    edi
c000f994:	eb b8                	jmp    c000f94e <kernel_main+0x6d>
c000f996:	43                   	inc    ebx
c000f997:	46                   	inc    esi
c000f998:	31 c9                	xor    ecx,ecx
c000f99a:	0f b6 83 a0 d2 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2d60]
c000f9a1:	bf 0a 00 00 00       	mov    edi,0xa
c000f9a6:	84 c0                	test   al,al
c000f9a8:	75 ce                	jne    c000f978 <kernel_main+0x97>
c000f9aa:	83 ec 0c             	sub    esp,0xc
c000f9ad:	68 b0 a6 02 c0       	push   0xc002a6b0
c000f9b2:	e8 be fe ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c000f9b7:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9bc:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c000f9c1:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9c6:	05 ff 0f 00 00       	add    eax,0xfff
c000f9cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9d0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d3:	e8 cb 03 00 00       	call   c000fda3 <Phys::physicalMemorySetup(unsigned int)>
c000f9d8:	e8 83 1c 00 00       	call   c0011660 <Virt::virtualMemorySetup()>
c000f9dd:	58                   	pop    eax
c000f9de:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9e2:	53                   	push   ebx
c000f9e3:	e8 34 1d 00 00       	call   c001171c <VAS::VAS()>
c000f9e8:	89 1d 30 e6 02 c0    	mov    DWORD PTR ds:0xc002e630,ebx
c000f9ee:	e8 2d 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9f3:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9fa:	e8 1c fe ff ff       	call   c000f81b <malloc>
c000f9ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa02:	89 c6                	mov    esi,eax
c000fa04:	e8 0f f0 ff ff       	call   c000ea18 <Computer::Computer()>
c000fa09:	6a 00                	push   0x0
c000fa0b:	89 35 c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,esi
c000fa11:	6a 00                	push   0x0
c000fa13:	6a 00                	push   0x0
c000fa15:	56                   	push   esi
c000fa16:	e8 09 f4 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fa1b:	83 c4 14             	add    esp,0x14
c000fa1e:	53                   	push   ebx
c000fa1f:	e8 a8 1f 00 00       	call   c00119cc <VAS::~VAS()>
c000fa24:	83 c4 30             	add    esp,0x30
c000fa27:	5b                   	pop    ebx
c000fa28:	5e                   	pop    esi
c000fa29:	5f                   	pop    edi
c000fa2a:	c3                   	ret    

c000fa2b <Phys::allocateDMA(unsigned long)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	31 ed                	xor    ebp,ebp
c000fa2e:	57                   	push   edi
c000fa2f:	56                   	push   esi
c000fa30:	53                   	push   ebx
c000fa31:	31 db                	xor    ebx,ebx
c000fa33:	83 ec 18             	sub    esp,0x18
c000fa36:	68 cf a6 02 c0       	push   0xc002a6cf
c000fa3b:	e8 3c 2e 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fa40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa44:	31 d2                	xor    edx,edx
c000fa46:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa4c:	83 c4 10             	add    esp,0x10
c000fa4f:	c1 ee 0c             	shr    esi,0xc
c000fa52:	31 c9                	xor    ecx,ecx
c000fa54:	eb 17                	jmp    c000fa6d <Phys::allocateDMA(unsigned long)+0x42>
c000fa56:	85 c9                	test   ecx,ecx
c000fa58:	75 04                	jne    c000fa5e <Phys::allocateDMA(unsigned long)+0x33>
c000fa5a:	89 d5                	mov    ebp,edx
c000fa5c:	89 d3                	mov    ebx,edx
c000fa5e:	8d 41 01             	lea    eax,[ecx+0x1]
c000fa61:	39 c6                	cmp    esi,eax
c000fa63:	74 23                	je     c000fa88 <Phys::allocateDMA(unsigned long)+0x5d>
c000fa65:	42                   	inc    edx
c000fa66:	89 c1                	mov    ecx,eax
c000fa68:	83 fa 2f             	cmp    edx,0x2f
c000fa6b:	7f 11                	jg     c000fa7e <Phys::allocateDMA(unsigned long)+0x53>
c000fa6d:	80 ba 20 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ae0],0x0
c000fa74:	74 e0                	je     c000fa56 <Phys::allocateDMA(unsigned long)+0x2b>
c000fa76:	31 c9                	xor    ecx,ecx
c000fa78:	42                   	inc    edx
c000fa79:	83 fa 2f             	cmp    edx,0x2f
c000fa7c:	7e ef                	jle    c000fa6d <Phys::allocateDMA(unsigned long)+0x42>
c000fa7e:	83 c4 0c             	add    esp,0xc
c000fa81:	31 c0                	xor    eax,eax
c000fa83:	5b                   	pop    ebx
c000fa84:	5e                   	pop    esi
c000fa85:	5f                   	pop    edi
c000fa86:	5d                   	pop    ebp
c000fa87:	c3                   	ret    
c000fa88:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa8b:	89 d7                	mov    edi,edx
c000fa8d:	4f                   	dec    edi
c000fa8e:	79 03                	jns    c000fa93 <Phys::allocateDMA(unsigned long)+0x68>
c000fa90:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa93:	c1 ff 04             	sar    edi,0x4
c000fa96:	89 da                	mov    edx,ebx
c000fa98:	c1 fa 04             	sar    edx,0x4
c000fa9b:	39 fa                	cmp    edx,edi
c000fa9d:	75 43                	jne    c000fae2 <Phys::allocateDMA(unsigned long)+0xb7>
c000fa9f:	85 c0                	test   eax,eax
c000faa1:	74 1a                	je     c000fabd <Phys::allocateDMA(unsigned long)+0x92>
c000faa3:	be 20 e5 02 c0       	mov    esi,0xc002e520
c000faa8:	8d 93 20 e5 02 c0    	lea    edx,[ebx-0x3ffd1ae0]
c000faae:	f7 d6                	not    esi
c000fab0:	29 de                	sub    esi,ebx
c000fab2:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fab5:	42                   	inc    edx
c000fab6:	8d 04 16             	lea    eax,[esi+edx*1]
c000fab9:	39 c1                	cmp    ecx,eax
c000fabb:	7f f5                	jg     c000fab2 <Phys::allocateDMA(unsigned long)+0x87>
c000fabd:	83 ec 0c             	sub    esp,0xc
c000fac0:	68 e8 a6 02 c0       	push   0xc002a6e8
c000fac5:	e8 b2 2d 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	85 ff                	test   edi,edi
c000facf:	74 17                	je     c000fae8 <Phys::allocateDMA(unsigned long)+0xbd>
c000fad1:	83 c4 0c             	add    esp,0xc
c000fad4:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fada:	5b                   	pop    ebx
c000fadb:	c1 e0 0c             	shl    eax,0xc
c000fade:	5e                   	pop    esi
c000fadf:	5f                   	pop    edi
c000fae0:	5d                   	pop    ebp
c000fae1:	c3                   	ret    
c000fae2:	89 ea                	mov    edx,ebp
c000fae4:	31 c9                	xor    ecx,ecx
c000fae6:	eb 90                	jmp    c000fa78 <Phys::allocateDMA(unsigned long)+0x4d>
c000fae8:	83 c4 0c             	add    esp,0xc
c000faeb:	c1 e3 0c             	shl    ebx,0xc
c000faee:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000faf4:	5b                   	pop    ebx
c000faf5:	5e                   	pop    esi
c000faf6:	5f                   	pop    edi
c000faf7:	5d                   	pop    ebp
c000faf8:	c3                   	ret    

c000faf9 <Phys::freeDMA(unsigned long, unsigned long)>:
c000faf9:	83 ec 18             	sub    esp,0x18
c000fafc:	68 ff a6 02 c0       	push   0xc002a6ff
c000fb01:	e8 76 2d 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fb06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb0a:	83 c4 10             	add    esp,0x10
c000fb0d:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb17:	c1 e9 0c             	shr    ecx,0xc
c000fb1a:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fb22:	76 29                	jbe    c000fb4d <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fb24:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fb2a:	c1 ea 0c             	shr    edx,0xc
c000fb2d:	83 c2 10             	add    edx,0x10
c000fb30:	85 c9                	test   ecx,ecx
c000fb32:	74 15                	je     c000fb49 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fb34:	8d 82 20 e5 02 c0    	lea    eax,[edx-0x3ffd1ae0]
c000fb3a:	8d 94 11 20 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ae0]
c000fb41:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb44:	40                   	inc    eax
c000fb45:	39 d0                	cmp    eax,edx
c000fb47:	75 f8                	jne    c000fb41 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fb49:	83 c4 0c             	add    esp,0xc
c000fb4c:	c3                   	ret    
c000fb4d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb53:	c1 ea 0c             	shr    edx,0xc
c000fb56:	eb d8                	jmp    c000fb30 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fb58 <Phys::setPageState(unsigned long, bool)>:
c000fb58:	56                   	push   esi
c000fb59:	ba 01 00 00 00       	mov    edx,0x1
c000fb5e:	53                   	push   ebx
c000fb5f:	8b 35 e4 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3e4
c000fb65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb6d:	89 c8                	mov    eax,ecx
c000fb6f:	83 e1 07             	and    ecx,0x7
c000fb72:	c1 e8 03             	shr    eax,0x3
c000fb75:	d3 e3                	shl    ebx,cl
c000fb77:	01 c6                	add    esi,eax
c000fb79:	d3 e2                	shl    edx,cl
c000fb7b:	f7 d2                	not    edx
c000fb7d:	20 16                	and    BYTE PTR [esi],dl
c000fb7f:	03 05 e4 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3e4
c000fb85:	08 18                	or     BYTE PTR [eax],bl
c000fb87:	5b                   	pop    ebx
c000fb88:	5e                   	pop    esi
c000fb89:	c3                   	ret    

c000fb8a <Phys::getPageState(unsigned long)>:
c000fb8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb8e:	8b 15 e4 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3e4
c000fb94:	89 c8                	mov    eax,ecx
c000fb96:	83 e1 07             	and    ecx,0x7
c000fb99:	c1 e8 03             	shr    eax,0x3
c000fb9c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fba0:	d3 f8                	sar    eax,cl
c000fba2:	83 e0 01             	and    eax,0x1
c000fba5:	c3                   	ret    

c000fba6 <Phys::freePage(unsigned long)>:
c000fba6:	53                   	push   ebx
c000fba7:	83 ec 10             	sub    esp,0x10
c000fbaa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbae:	53                   	push   ebx
c000fbaf:	68 15 a7 02 c0       	push   0xc002a715
c000fbb4:	e8 c3 2c 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fbc2:	76 3d                	jbe    c000fc01 <Phys::freePage(unsigned long)+0x5b>
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	c1 eb 0c             	shr    ebx,0xc
c000fbca:	53                   	push   ebx
c000fbcb:	e8 ba ff ff ff       	call   c000fb8a <Phys::getPageState(unsigned long)>
c000fbd0:	83 c4 10             	add    esp,0x10
c000fbd3:	84 c0                	test   al,al
c000fbd5:	74 19                	je     c000fbf0 <Phys::freePage(unsigned long)+0x4a>
c000fbd7:	83 ec 08             	sub    esp,0x8
c000fbda:	ff 0d 10 e5 02 c0    	dec    DWORD PTR ds:0xc002e510
c000fbe0:	6a 00                	push   0x0
c000fbe2:	53                   	push   ebx
c000fbe3:	e8 70 ff ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000fbe8:	83 c4 10             	add    esp,0x10
c000fbeb:	83 c4 08             	add    esp,0x8
c000fbee:	5b                   	pop    ebx
c000fbef:	c3                   	ret    
c000fbf0:	c7 44 24 10 28 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a728
c000fbf8:	83 c4 08             	add    esp,0x8
c000fbfb:	5b                   	pop    ebx
c000fbfc:	e9 24 a6 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c000fc01:	83 ec 08             	sub    esp,0x8
c000fc04:	68 00 10 00 00       	push   0x1000
c000fc09:	53                   	push   ebx
c000fc0a:	e8 ea fe ff ff       	call   c000faf9 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc0f:	83 c4 10             	add    esp,0x10
c000fc12:	83 c4 08             	add    esp,0x8
c000fc15:	5b                   	pop    ebx
c000fc16:	c3                   	ret    

c000fc17 <Phys::allocatePage()>:
c000fc17:	56                   	push   esi
c000fc18:	53                   	push   ebx
c000fc19:	83 ec 14             	sub    esp,0x14
c000fc1c:	8b 35 04 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e504
c000fc22:	89 f3                	mov    ebx,esi
c000fc24:	eb 0a                	jmp    c000fc30 <Phys::allocatePage()+0x19>
c000fc26:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c000fc2c:	39 de                	cmp    esi,ebx
c000fc2e:	74 24                	je     c000fc54 <Phys::allocatePage()+0x3d>
c000fc30:	53                   	push   ebx
c000fc31:	e8 54 ff ff ff       	call   c000fb8a <Phys::getPageState(unsigned long)>
c000fc36:	5a                   	pop    edx
c000fc37:	84 c0                	test   al,al
c000fc39:	74 76                	je     c000fcb1 <Phys::allocatePage()+0x9a>
c000fc3b:	43                   	inc    ebx
c000fc3c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc42:	75 e2                	jne    c000fc26 <Phys::allocatePage()+0xf>
c000fc44:	31 db                	xor    ebx,ebx
c000fc46:	c7 05 04 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e504,0x0
c000fc50:	39 de                	cmp    esi,ebx
c000fc52:	75 dc                	jne    c000fc30 <Phys::allocatePage()+0x19>
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	68 5c a7 02 c0       	push   0xc002a75c
c000fc5c:	e8 1b 2c 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fc61:	58                   	pop    eax
c000fc62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc70:	e8 8d 28 00 00       	call   c0012502 <VAS::scanForEviction()>
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	85 c0                	test   eax,eax
c000fc7a:	75 76                	jne    c000fcf2 <Phys::allocatePage()+0xdb>
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	68 00 10 00 00       	push   0x1000
c000fc84:	e8 a2 fd ff ff       	call   c000fa2b <Phys::allocateDMA(unsigned long)>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	85 c0                	test   eax,eax
c000fc8e:	75 5c                	jne    c000fcec <Phys::allocatePage()+0xd5>
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	68 74 a7 02 c0       	push   0xc002a774
c000fc98:	e8 88 a5 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	8b 1d 04 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e504
c000fca6:	53                   	push   ebx
c000fca7:	e8 de fe ff ff       	call   c000fb8a <Phys::getPageState(unsigned long)>
c000fcac:	5a                   	pop    edx
c000fcad:	84 c0                	test   al,al
c000fcaf:	75 8a                	jne    c000fc3b <Phys::allocatePage()+0x24>
c000fcb1:	6a 01                	push   0x1
c000fcb3:	53                   	push   ebx
c000fcb4:	e8 9f fe ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000fcb9:	5a                   	pop    edx
c000fcba:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c000fcbf:	59                   	pop    ecx
c000fcc0:	40                   	inc    eax
c000fcc1:	8b 15 04 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e504
c000fcc7:	a3 10 e5 02 c0       	mov    ds:0xc002e510,eax
c000fccc:	c1 e2 0c             	shl    edx,0xc
c000fccf:	52                   	push   edx
c000fcd0:	ff 35 14 e5 02 c0    	push   DWORD PTR ds:0xc002e514
c000fcd6:	50                   	push   eax
c000fcd7:	68 3e a7 02 c0       	push   0xc002a73e
c000fcdc:	e8 9b 2b 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fce1:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	c1 e0 0c             	shl    eax,0xc
c000fcec:	83 c4 14             	add    esp,0x14
c000fcef:	5b                   	pop    ebx
c000fcf0:	5e                   	pop    esi
c000fcf1:	c3                   	ret    
c000fcf2:	83 ec 08             	sub    esp,0x8
c000fcf5:	89 c2                	mov    edx,eax
c000fcf7:	6a 01                	push   0x1
c000fcf9:	c1 ea 0c             	shr    edx,0xc
c000fcfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd00:	52                   	push   edx
c000fd01:	e8 52 fe ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd0d:	eb dd                	jmp    c000fcec <Phys::allocatePage()+0xd5>

c000fd0f <Phys::allocateContiguousPages(int)>:
c000fd0f:	57                   	push   edi
c000fd10:	56                   	push   esi
c000fd11:	53                   	push   ebx
c000fd12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd16:	fa                   	cli    
c000fd17:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c000fd1d:	31 db                	xor    ebx,ebx
c000fd1f:	85 db                	test   ebx,ebx
c000fd21:	75 11                	jne    c000fd34 <Phys::allocateContiguousPages(int)+0x25>
c000fd23:	e8 ef fe ff ff       	call   c000fc17 <Phys::allocatePage()>
c000fd28:	83 fe 01             	cmp    esi,0x1
c000fd2b:	89 c7                	mov    edi,eax
c000fd2d:	74 21                	je     c000fd50 <Phys::allocateContiguousPages(int)+0x41>
c000fd2f:	bb 01 00 00 00       	mov    ebx,0x1
c000fd34:	e8 de fe ff ff       	call   c000fc17 <Phys::allocatePage()>
c000fd39:	89 da                	mov    edx,ebx
c000fd3b:	c1 e2 0c             	shl    edx,0xc
c000fd3e:	01 fa                	add    edx,edi
c000fd40:	39 c2                	cmp    edx,eax
c000fd42:	74 20                	je     c000fd64 <Phys::allocateContiguousPages(int)+0x55>
c000fd44:	bb 01 00 00 00       	mov    ebx,0x1
c000fd49:	89 c7                	mov    edi,eax
c000fd4b:	83 fe 01             	cmp    esi,0x1
c000fd4e:	75 e4                	jne    c000fd34 <Phys::allocateContiguousPages(int)+0x25>
c000fd50:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c000fd55:	48                   	dec    eax
c000fd56:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c000fd5b:	75 01                	jne    c000fd5e <Phys::allocateContiguousPages(int)+0x4f>
c000fd5d:	fb                   	sti    
c000fd5e:	89 f8                	mov    eax,edi
c000fd60:	5b                   	pop    ebx
c000fd61:	5e                   	pop    esi
c000fd62:	5f                   	pop    edi
c000fd63:	c3                   	ret    
c000fd64:	43                   	inc    ebx
c000fd65:	39 f3                	cmp    ebx,esi
c000fd67:	75 b6                	jne    c000fd1f <Phys::allocateContiguousPages(int)+0x10>
c000fd69:	eb e5                	jmp    c000fd50 <Phys::allocateContiguousPages(int)+0x41>

c000fd6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd6b:	56                   	push   esi
c000fd6c:	53                   	push   ebx
c000fd6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd71:	39 1d 08 e5 02 c0    	cmp    DWORD PTR ds:0xc002e508,ebx
c000fd77:	73 06                	jae    c000fd7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd79:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c000fd7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd83:	c1 eb 0c             	shr    ebx,0xc
c000fd86:	c1 e8 0c             	shr    eax,0xc
c000fd89:	39 d8                	cmp    eax,ebx
c000fd8b:	73 13                	jae    c000fda0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd8d:	6a 00                	push   0x0
c000fd8f:	8d 70 01             	lea    esi,[eax+0x1]
c000fd92:	50                   	push   eax
c000fd93:	e8 c0 fd ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000fd98:	5a                   	pop    edx
c000fd99:	89 f0                	mov    eax,esi
c000fd9b:	59                   	pop    ecx
c000fd9c:	39 f3                	cmp    ebx,esi
c000fd9e:	75 ed                	jne    c000fd8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fda0:	5b                   	pop    ebx
c000fda1:	5e                   	pop    esi
c000fda2:	c3                   	ret    

c000fda3 <Phys::physicalMemorySetup(unsigned int)>:
c000fda3:	55                   	push   ebp
c000fda4:	57                   	push   edi
c000fda5:	56                   	push   esi
c000fda6:	53                   	push   ebx
c000fda7:	83 ec 40             	sub    esp,0x40
c000fdaa:	6a 30                	push   0x30
c000fdac:	6a 00                	push   0x0
c000fdae:	68 20 e5 02 c0       	push   0xc002e520
c000fdb3:	e8 98 09 ff ff       	call   c0000750 <memset>
c000fdb8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fdbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fdc1:	05 00 10 00 00       	add    eax,0x1000
c000fdc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fdca:	5b                   	pop    ebx
c000fdcb:	31 db                	xor    ebx,ebx
c000fdcd:	5e                   	pop    esi
c000fdce:	50                   	push   eax
c000fdcf:	68 82 a7 02 c0       	push   0xc002a782
c000fdd4:	e8 a3 2a 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fdd9:	83 c4 10             	add    esp,0x10
c000fddc:	83 ec 08             	sub    esp,0x8
c000fddf:	6a 01                	push   0x1
c000fde1:	53                   	push   ebx
c000fde2:	43                   	inc    ebx
c000fde3:	e8 70 fd ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000fde8:	83 c4 10             	add    esp,0x10
c000fdeb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdf1:	75 e9                	jne    c000fddc <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fdf3:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fdfa:	66 85 c0             	test   ax,ax
c000fdfd:	0f 84 8e 01 00 00    	je     c000ff91 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fe03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe13:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe1c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe24:	eb 15                	jmp    c000fe3b <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fe26:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe2a:	83 c3 18             	add    ebx,0x18
c000fe2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe31:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe35:	0f 84 66 01 00 00    	je     c000ffa1 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe3b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe4c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe4e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe51:	01 f0                	add    eax,esi
c000fe53:	55                   	push   ebp
c000fe54:	11 fa                	adc    edx,edi
c000fe56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe62:	56                   	push   esi
c000fe63:	68 c4 a7 02 c0       	push   0xc002a7c4
c000fe68:	e8 0f 2a 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fe6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	09 f8                	or     eax,edi
c000fe76:	0f 85 25 01 00 00    	jne    c000ffa1 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe7c:	4d                   	dec    ebp
c000fe7d:	75 a7                	jne    c000fe26 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fe7f:	ba 00 00 08 00       	mov    edx,0x80000
c000fe84:	89 c1                	mov    ecx,eax
c000fe86:	39 f2                	cmp    edx,esi
c000fe88:	19 f9                	sbb    ecx,edi
c000fe8a:	0f 82 a7 00 00 00    	jb     c000ff37 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe90:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe94:	89 c1                	mov    ecx,eax
c000fe96:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe9a:	0f 83 97 00 00 00    	jae    c000ff37 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fea0:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fea5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fea9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fead:	39 fa                	cmp    edx,edi
c000feaf:	19 e8                	sbb    eax,ebp
c000feb1:	0f 82 14 01 00 00    	jb     c000ffcb <Phys::physicalMemorySetup(unsigned int)+0x228>
c000feb7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000febb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000febf:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fec5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000feca:	83 d5 ff             	adc    ebp,0xffffffff
c000fecd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fed1:	31 c0                	xor    eax,eax
c000fed3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fed7:	39 fa                	cmp    edx,edi
c000fed9:	89 c1                	mov    ecx,eax
c000fedb:	19 e9                	sbb    ecx,ebp
c000fedd:	0f 83 43 ff ff ff    	jae    c000fe26 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fee3:	be 00 00 08 00       	mov    esi,0x80000
c000fee8:	50                   	push   eax
c000fee9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000feed:	57                   	push   edi
c000feee:	56                   	push   esi
c000feef:	68 e8 a7 02 c0       	push   0xc002a7e8
c000fef4:	e8 83 29 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000fef9:	5a                   	pop    edx
c000fefa:	59                   	pop    ecx
c000fefb:	57                   	push   edi
c000fefc:	56                   	push   esi
c000fefd:	e8 69 fe ff ff       	call   c000fd6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff0a:	83 c4 0c             	add    esp,0xc
c000ff0d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff11:	03 05 14 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e514
c000ff17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff1e:	a3 14 e5 02 c0       	mov    ds:0xc002e514,eax
c000ff23:	52                   	push   edx
c000ff24:	50                   	push   eax
c000ff25:	68 a8 a7 02 c0       	push   0xc002a7a8
c000ff2a:	e8 4d 29 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	e9 ef fe ff ff       	jmp    c000fe26 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff37:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff43:	39 ea                	cmp    edx,ebp
c000ff45:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff49:	0f 82 d7 fe ff ff    	jb     c000fe26 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff4f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff54:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff58:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff5c:	0f 83 c4 fe ff ff    	jae    c000fe26 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff62:	39 ee                	cmp    esi,ebp
c000ff64:	89 f8                	mov    eax,edi
c000ff66:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff6a:	0f 83 78 ff ff ff    	jae    c000fee8 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff78:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff80:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff8c:	e9 57 ff ff ff       	jmp    c000fee8 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	68 9a a7 02 c0       	push   0xc002a79a
c000ff99:	e8 87 a2 00 00       	call   c001a225 <Krnl::panic(char const*)>
c000ff9e:	83 c4 10             	add    esp,0x10
c000ffa1:	bb 40 01 00 00       	mov    ebx,0x140
c000ffa6:	83 ec 08             	sub    esp,0x8
c000ffa9:	6a 00                	push   0x0
c000ffab:	53                   	push   ebx
c000ffac:	43                   	inc    ebx
c000ffad:	e8 a6 fb ff ff       	call   c000fb58 <Phys::setPageState(unsigned long, bool)>
c000ffb2:	ff 05 14 e5 02 c0    	inc    DWORD PTR ds:0xc002e514
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ffc1:	75 e3                	jne    c000ffa6 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000ffc3:	83 c4 3c             	add    esp,0x3c
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	5f                   	pop    edi
c000ffc9:	5d                   	pop    ebp
c000ffca:	c3                   	ret    
c000ffcb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ffd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ffdb:	e9 d7 fe ff ff       	jmp    c000feb7 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000ffe0 <Pipe::isAtty()>:
c000ffe0:	31 c0                	xor    eax,eax
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <Pipe::~Pipe()>:
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	ba 54 a8 02 c0       	mov    edx,0xc002a854
c000ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff0:	89 10                	mov    DWORD PTR [eax],edx
c000fff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	50                   	push   eax
c000fffa:	e8 41 12 00 00       	call   c0011240 <UnixFile::~UnixFile()>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	90                   	nop
c0010003:	83 c4 0c             	add    esp,0xc
c0010006:	c3                   	ret    
c0010007:	90                   	nop

c0010008 <Pipe::~Pipe()>:
c0010008:	83 ec 0c             	sub    esp,0xc
c001000b:	83 ec 0c             	sub    esp,0xc
c001000e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010012:	e8 cd ff ff ff       	call   c000ffe4 <Pipe::~Pipe()>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	83 ec 08             	sub    esp,0x8
c001001d:	6a 20                	push   0x20
c001001f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010023:	e8 73 27 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	83 c4 0c             	add    esp,0xc
c001002e:	c3                   	ret    
c001002f:	90                   	nop

c0010030 <Pipe::read(unsigned long long, void*, int*)>:
c0010030:	55                   	push   ebp
c0010031:	57                   	push   edi
c0010032:	56                   	push   esi
c0010033:	53                   	push   ebx
c0010034:	83 ec 1c             	sub    esp,0x1c
c0010037:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001003b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001003f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010043:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010046:	89 c8                	mov    eax,ecx
c0010048:	99                   	cdq    
c0010049:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001004d:	74 24                	je     c0010073 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001004f:	39 f9                	cmp    ecx,edi
c0010051:	89 d1                	mov    ecx,edx
c0010053:	19 f1                	sbb    ecx,esi
c0010055:	73 1c                	jae    c0010073 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010057:	fa                   	cli    
c0010058:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001005e:	e8 54 dd 00 00       	call   c001ddb7 <schedule()>
c0010063:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0010068:	48                   	dec    eax
c0010069:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001006e:	75 d3                	jne    c0010043 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010070:	fb                   	sti    
c0010071:	eb d0                	jmp    c0010043 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010073:	39 f8                	cmp    eax,edi
c0010075:	89 d1                	mov    ecx,edx
c0010077:	89 3c 24             	mov    DWORD PTR [esp],edi
c001007a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001007e:	19 f1                	sbb    ecx,esi
c0010080:	73 07                	jae    c0010089 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010082:	89 04 24             	mov    DWORD PTR [esp],eax
c0010085:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010089:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001008c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001008f:	29 f7                	sub    edi,esi
c0010091:	89 f8                	mov    eax,edi
c0010093:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010097:	99                   	cdq    
c0010098:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001009b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009f:	19 d0                	sbb    eax,edx
c00100a1:	73 07                	jae    c00100aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100ad:	89 ea                	mov    edx,ebp
c00100af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100b8:	74 0d                	je     c00100c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00100c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100c7:	85 d2                	test   edx,edx
c00100c9:	74 11                	je     c00100dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c00100cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00100d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00100d6:	89 d1                	mov    ecx,edx
c00100d8:	89 c7                	mov    edi,eax
c00100da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00100e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100e5:	99                   	cdq    
c00100e6:	89 f7                	mov    edi,esi
c00100e8:	03 04 24             	add    eax,DWORD PTR [esp]
c00100eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100ef:	c1 ff 1f             	sar    edi,0x1f
c00100f2:	57                   	push   edi
c00100f3:	56                   	push   esi
c00100f4:	52                   	push   edx
c00100f5:	50                   	push   eax
c00100f6:	e8 a9 6c 01 00       	call   c0026da4 <__umoddi3>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010101:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010106:	75 10                	jne    c0010118 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010108:	83 ec 0c             	sub    esp,0xc
c001010b:	68 11 a8 02 c0       	push   0xc002a811
c0010110:	e8 10 a1 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001011c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001011f:	89 10                	mov    DWORD PTR [eax],edx
c0010121:	83 c4 1c             	add    esp,0x1c
c0010124:	31 c0                	xor    eax,eax
c0010126:	5b                   	pop    ebx
c0010127:	5e                   	pop    esi
c0010128:	5f                   	pop    edi
c0010129:	5d                   	pop    ebp
c001012a:	c3                   	ret    
c001012b:	90                   	nop

c001012c <Pipe::write(unsigned long long, void*, int*)>:
c001012c:	55                   	push   ebp
c001012d:	57                   	push   edi
c001012e:	56                   	push   esi
c001012f:	53                   	push   ebx
c0010130:	83 ec 1c             	sub    esp,0x1c
c0010133:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010137:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001013b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001013e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010142:	89 04 24             	mov    DWORD PTR [esp],eax
c0010145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010149:	89 d8                	mov    eax,ebx
c001014b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001014e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010152:	89 d6                	mov    esi,edx
c0010154:	89 d7                	mov    edi,edx
c0010156:	c1 ff 1f             	sar    edi,0x1f
c0010159:	03 34 24             	add    esi,DWORD PTR [esp]
c001015c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010160:	c1 f8 1f             	sar    eax,0x1f
c0010163:	39 f3                	cmp    ebx,esi
c0010165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001016d:	19 f8                	sbb    eax,edi
c001016f:	b8 01 00 00 00       	mov    eax,0x1
c0010174:	72 6e                	jb     c00101e4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010176:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010179:	01 d0                	add    eax,edx
c001017b:	99                   	cdq    
c001017c:	f7 fb                	idiv   ebx
c001017e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010182:	29 d3                	sub    ebx,edx
c0010184:	89 d7                	mov    edi,edx
c0010186:	89 de                	mov    esi,ebx
c0010188:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001018b:	c1 fb 1f             	sar    ebx,0x1f
c001018e:	39 f2                	cmp    edx,esi
c0010190:	19 d8                	sbb    eax,ebx
c0010192:	b8 00 00 00 00       	mov    eax,0x0
c0010197:	72 04                	jb     c001019d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010199:	89 d0                	mov    eax,edx
c001019b:	29 f0                	sub    eax,esi
c001019d:	89 d3                	mov    ebx,edx
c001019f:	29 c3                	sub    ebx,eax
c00101a1:	74 0b                	je     c00101ae <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101a3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101a6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101aa:	89 d9                	mov    ecx,ebx
c00101ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ae:	85 c0                	test   eax,eax
c00101b0:	74 0d                	je     c00101bf <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101b2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101b6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101b9:	89 de                	mov    esi,ebx
c00101bb:	89 c1                	mov    ecx,eax
c00101bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101bf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00101c2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00101c7:	75 10                	jne    c00101d9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00101c9:	83 ec 0c             	sub    esp,0xc
c00101cc:	68 2d a8 02 c0       	push   0xc002a82d
c00101d1:	e8 4f a0 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00101d6:	83 c4 10             	add    esp,0x10
c00101d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101dd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00101e0:	89 08                	mov    DWORD PTR [eax],ecx
c00101e2:	31 c0                	xor    eax,eax
c00101e4:	83 c4 1c             	add    esp,0x1c
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	5f                   	pop    edi
c00101ea:	5d                   	pop    ebp
c00101eb:	c3                   	ret    

c00101ec <Pipe::Pipe(int)>:
c00101ec:	83 ec 0c             	sub    esp,0xc
c00101ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f3:	83 ec 08             	sub    esp,0x8
c00101f6:	6a 00                	push   0x0
c00101f8:	50                   	push   eax
c00101f9:	e8 60 0e 00 00       	call   c001105e <UnixFile::UnixFile(int)>
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	ba 54 a8 02 c0       	mov    edx,0xc002a854
c0010206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001020a:	89 10                	mov    DWORD PTR [eax],edx
c001020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010210:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010214:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010226:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001022d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	50                   	push   eax
c0010235:	e8 e1 f5 ff ff       	call   c000f81b <malloc>
c001023a:	83 c4 10             	add    esp,0x10
c001023d:	89 c2                	mov    edx,eax
c001023f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010243:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001024e:	90                   	nop
c001024f:	83 c4 0c             	add    esp,0xc
c0010252:	c3                   	ret    
c0010253:	90                   	nop

c0010254 <VgaText::isAtty()>:
c0010254:	b0 01                	mov    al,0x1
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <VgaText::~VgaText()>:
c0010258:	83 ec 0c             	sub    esp,0xc
c001025b:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c0010260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010264:	89 10                	mov    DWORD PTR [eax],edx
c0010266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	50                   	push   eax
c001026e:	e8 cd 0f 00 00       	call   c0011240 <UnixFile::~UnixFile()>
c0010273:	83 c4 10             	add    esp,0x10
c0010276:	90                   	nop
c0010277:	83 c4 0c             	add    esp,0xc
c001027a:	c3                   	ret    
c001027b:	90                   	nop

c001027c <VgaText::~VgaText()>:
c001027c:	83 ec 0c             	sub    esp,0xc
c001027f:	83 ec 0c             	sub    esp,0xc
c0010282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010286:	e8 cd ff ff ff       	call   c0010258 <VgaText::~VgaText()>
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	83 ec 08             	sub    esp,0x8
c0010291:	68 c4 02 00 00       	push   0x2c4
c0010296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029a:	e8 fc 24 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	83 c4 0c             	add    esp,0xc
c00102a5:	c3                   	ret    

c00102a6 <VgaText::read(unsigned long long, void*, int*)>:
c00102a6:	83 ec 10             	sub    esp,0x10
c00102a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b5:	e8 9a 5a 00 00       	call   c0015d54 <readKeyboard(VgaText*, char*, unsigned long)>
c00102ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102be:	89 02                	mov    DWORD PTR [edx],eax
c00102c0:	31 c0                	xor    eax,eax
c00102c2:	83 c4 1c             	add    esp,0x1c
c00102c5:	c3                   	ret    

c00102c6 <setTerminalScrollLock(bool)>:
c00102c6:	c3                   	ret    

c00102c7 <addToTerminalCycle(VgaText*)>:
c00102c7:	8b 15 80 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e580
c00102cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d1:	85 d2                	test   edx,edx
c00102d3:	75 09                	jne    c00102de <addToTerminalCycle(VgaText*)+0x17>
c00102d5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00102d8:	a3 80 e5 02 c0       	mov    ds:0xc002e580,eax
c00102dd:	c3                   	ret    
c00102de:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00102e1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00102e4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00102e7:	c3                   	ret    

c00102e8 <installVgaTextImplementation()>:
c00102e8:	83 ec 10             	sub    esp,0x10
c00102eb:	6a 20                	push   0x20
c00102ed:	6a 00                	push   0x0
c00102ef:	68 60 e5 02 c0       	push   0xc002e560
c00102f4:	e8 57 04 ff ff       	call   c0000750 <memset>
c00102f9:	83 c4 1c             	add    esp,0x1c
c00102fc:	c3                   	ret    

c00102fd <scrollTerminalScrollLock(int)>:
c00102fd:	c3                   	ret    

c00102fe <VgaText::updateTitle()>:
c00102fe:	53                   	push   ebx
c00102ff:	31 c0                	xor    eax,eax
c0010301:	83 ec 58             	sub    esp,0x58
c0010304:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010308:	89 e1                	mov    ecx,esp
c001030a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001030e:	40                   	inc    eax
c001030f:	83 f8 50             	cmp    eax,0x50
c0010312:	75 f6                	jne    c001030a <VgaText::updateTitle()+0xc>
c0010314:	31 c0                	xor    eax,eax
c0010316:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001031d:	84 db                	test   bl,bl
c001031f:	74 06                	je     c0010327 <VgaText::updateTitle()+0x29>
c0010321:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010324:	40                   	inc    eax
c0010325:	eb ef                	jmp    c0010316 <VgaText::updateTitle()+0x18>
c0010327:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001032a:	85 c0                	test   eax,eax
c001032c:	74 09                	je     c0010337 <VgaText::updateTitle()+0x39>
c001032e:	53                   	push   ebx
c001032f:	53                   	push   ebx
c0010330:	51                   	push   ecx
c0010331:	52                   	push   edx
c0010332:	ff d0                	call   eax
c0010334:	83 c4 10             	add    esp,0x10
c0010337:	83 c4 58             	add    esp,0x58
c001033a:	5b                   	pop    ebx
c001033b:	c3                   	ret    

c001033c <VgaText::load()>:
c001033c:	53                   	push   ebx
c001033d:	31 c0                	xor    eax,eax
c001033f:	83 ec 58             	sub    esp,0x58
c0010342:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010346:	89 e2                	mov    edx,esp
c0010348:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001034c:	40                   	inc    eax
c001034d:	83 f8 50             	cmp    eax,0x50
c0010350:	75 f6                	jne    c0010348 <VgaText::load()+0xc>
c0010352:	31 c0                	xor    eax,eax
c0010354:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001035b:	84 c9                	test   cl,cl
c001035d:	74 06                	je     c0010365 <VgaText::load()+0x29>
c001035f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010362:	40                   	inc    eax
c0010363:	eb ef                	jmp    c0010354 <VgaText::load()+0x18>
c0010365:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010368:	85 c0                	test   eax,eax
c001036a:	74 09                	je     c0010375 <VgaText::load()+0x39>
c001036c:	51                   	push   ecx
c001036d:	51                   	push   ecx
c001036e:	52                   	push   edx
c001036f:	53                   	push   ebx
c0010370:	ff d0                	call   eax
c0010372:	83 c4 10             	add    esp,0x10
c0010375:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010378:	85 c0                	test   eax,eax
c001037a:	74 09                	je     c0010385 <VgaText::load()+0x49>
c001037c:	83 ec 0c             	sub    esp,0xc
c001037f:	53                   	push   ebx
c0010380:	ff d0                	call   eax
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	83 c4 58             	add    esp,0x58
c0010388:	5b                   	pop    ebx
c0010389:	c3                   	ret    

c001038a <VgaText::updateCursor()>:
c001038a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001038e:	39 05 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,eax
c0010394:	75 09                	jne    c001039f <VgaText::updateCursor()+0x15>
c0010396:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010399:	85 c0                	test   eax,eax
c001039b:	74 02                	je     c001039f <VgaText::updateCursor()+0x15>
c001039d:	ff e0                	jmp    eax
c001039f:	c3                   	ret    

c00103a0 <VgaText::doANSI_SGR(int)>:
c00103a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103a8:	85 d2                	test   edx,edx
c00103aa:	75 0b                	jne    c00103b7 <VgaText::doANSI_SGR(int)+0x17>
c00103ac:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103b2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103b5:	eb 59                	jmp    c0010410 <VgaText::doANSI_SGR(int)+0x70>
c00103b7:	83 fa 07             	cmp    edx,0x7
c00103ba:	75 0b                	jne    c00103c7 <VgaText::doANSI_SGR(int)+0x27>
c00103bc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103bf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00103c2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00103c5:	eb 49                	jmp    c0010410 <VgaText::doANSI_SGR(int)+0x70>
c00103c7:	83 fa 1b             	cmp    edx,0x1b
c00103ca:	74 e0                	je     c00103ac <VgaText::doANSI_SGR(int)+0xc>
c00103cc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00103cf:	83 f9 07             	cmp    ecx,0x7
c00103d2:	77 09                	ja     c00103dd <VgaText::doANSI_SGR(int)+0x3d>
c00103d4:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c00103db:	eb 20                	jmp    c00103fd <VgaText::doANSI_SGR(int)+0x5d>
c00103dd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00103e0:	83 f9 07             	cmp    ecx,0x7
c00103e3:	77 09                	ja     c00103ee <VgaText::doANSI_SGR(int)+0x4e>
c00103e5:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c00103ec:	eb 22                	jmp    c0010410 <VgaText::doANSI_SGR(int)+0x70>
c00103ee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103f1:	83 f9 07             	cmp    ecx,0x7
c00103f4:	77 0b                	ja     c0010401 <VgaText::doANSI_SGR(int)+0x61>
c00103f6:	8b 14 95 d8 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d28]
c00103fd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010400:	c3                   	ret    
c0010401:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010404:	83 f9 07             	cmp    ecx,0x7
c0010407:	77 0a                	ja     c0010413 <VgaText::doANSI_SGR(int)+0x73>
c0010409:	8b 14 95 b0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d50]
c0010410:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010413:	c3                   	ret    

c0010414 <VgaText::setDefaultBgColour(VgaColour)>:
c0010414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001041f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010422:	c3                   	ret    
c0010423:	90                   	nop

c0010424 <VgaText::setDefaultFgColour(VgaColour)>:
c0010424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010428:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001042c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001042f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010432:	c3                   	ret    
c0010433:	90                   	nop

c0010434 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010434:	53                   	push   ebx
c0010435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010439:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001043d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010441:	51                   	push   ecx
c0010442:	e8 cd ff ff ff       	call   c0010414 <VgaText::setDefaultBgColour(VgaColour)>
c0010447:	58                   	pop    eax
c0010448:	5a                   	pop    edx
c0010449:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001044d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010451:	5b                   	pop    ebx
c0010452:	eb d0                	jmp    c0010424 <VgaText::setDefaultFgColour(VgaColour)>

c0010454 <VgaText::setTitleTextColour(VgaColour)>:
c0010454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001045f:	e9 9a fe ff ff       	jmp    c00102fe <VgaText::updateTitle()>

c0010464 <VgaText::setTitleColour(VgaColour)>:
c0010464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001046f:	e9 8a fe ff ff       	jmp    c00102fe <VgaText::updateTitle()>

c0010474 <VgaText::setTitle(char*)>:
c0010474:	53                   	push   ebx
c0010475:	83 ec 10             	sub    esp,0x10
c0010478:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001047c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010480:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010486:	50                   	push   eax
c0010487:	e8 80 03 ff ff       	call   c000080c <strcpy>
c001048c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010490:	83 c4 18             	add    esp,0x18
c0010493:	5b                   	pop    ebx
c0010494:	e9 65 fe ff ff       	jmp    c00102fe <VgaText::updateTitle()>
c0010499:	90                   	nop

c001049a <VgaText::combineColours(unsigned char, unsigned char)>:
c001049a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001049e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104a3:	83 e0 0f             	and    eax,0xf
c00104a6:	c1 e2 04             	shl    edx,0x4
c00104a9:	09 d0                	or     eax,edx
c00104ab:	c3                   	ret    

c00104ac <VgaText::scrollScreen()>:
c00104ac:	55                   	push   ebp
c00104ad:	b9 01 00 00 00       	mov    ecx,0x1
c00104b2:	57                   	push   edi
c00104b3:	56                   	push   esi
c00104b4:	53                   	push   ebx
c00104b5:	83 ec 0c             	sub    esp,0xc
c00104b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104bc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00104c2:	31 ff                	xor    edi,edi
c00104c4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00104c7:	83 f9 17             	cmp    ecx,0x17
c00104ca:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00104cd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00104d4:	75 27                	jne    c00104fd <VgaText::scrollScreen()+0x51>
c00104d6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00104d9:	01 f5                	add    ebp,esi
c00104db:	f7 c7 01 00 00 00    	test   edi,0x1
c00104e1:	74 16                	je     c00104f9 <VgaText::scrollScreen()+0x4d>
c00104e3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00104e7:	50                   	push   eax
c00104e8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00104ec:	50                   	push   eax
c00104ed:	e8 a8 ff ff ff       	call   c001049a <VgaText::combineColours(unsigned char, unsigned char)>
c00104f2:	5a                   	pop    edx
c00104f3:	5a                   	pop    edx
c00104f4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00104f7:	eb 04                	jmp    c00104fd <VgaText::scrollScreen()+0x51>
c00104f9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00104fd:	47                   	inc    edi
c00104fe:	46                   	inc    esi
c00104ff:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010505:	75 bd                	jne    c00104c4 <VgaText::scrollScreen()+0x18>
c0010507:	41                   	inc    ecx
c0010508:	83 f9 18             	cmp    ecx,0x18
c001050b:	75 af                	jne    c00104bc <VgaText::scrollScreen()+0x10>
c001050d:	39 1d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ebx
c0010513:	75 1b                	jne    c0010530 <VgaText::scrollScreen()+0x84>
c0010515:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010519:	74 05                	je     c0010520 <VgaText::scrollScreen()+0x74>
c001051b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001051e:	eb 10                	jmp    c0010530 <VgaText::scrollScreen()+0x84>
c0010520:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010523:	85 c0                	test   eax,eax
c0010525:	74 09                	je     c0010530 <VgaText::scrollScreen()+0x84>
c0010527:	83 ec 0c             	sub    esp,0xc
c001052a:	53                   	push   ebx
c001052b:	ff d0                	call   eax
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010534:	83 c4 0c             	add    esp,0xc
c0010537:	5b                   	pop    ebx
c0010538:	5e                   	pop    esi
c0010539:	5f                   	pop    edi
c001053a:	5d                   	pop    ebp
c001053b:	e9 4a fe ff ff       	jmp    c001038a <VgaText::updateCursor()>

c0010540 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010540:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010545:	c1 e0 08             	shl    eax,0x8
c0010548:	89 c2                	mov    edx,eax
c001054a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001054f:	09 d0                	or     eax,edx
c0010551:	c3                   	ret    

c0010552 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010552:	56                   	push   esi
c0010553:	53                   	push   ebx
c0010554:	51                   	push   ecx
c0010555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010559:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001055e:	50                   	push   eax
c001055f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010564:	50                   	push   eax
c0010565:	e8 30 ff ff ff       	call   c001049a <VgaText::combineColours(unsigned char, unsigned char)>
c001056a:	5b                   	pop    ebx
c001056b:	0f b6 c0             	movzx  eax,al
c001056e:	5e                   	pop    esi
c001056f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010574:	50                   	push   eax
c0010575:	53                   	push   ebx
c0010576:	e8 c5 ff ff ff       	call   c0010540 <VgaText::combineCharAndColour(char, unsigned char)>
c001057b:	5a                   	pop    edx
c001057c:	5e                   	pop    esi
c001057d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010580:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010586:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001058a:	0f b7 d2             	movzx  edx,dx
c001058d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010591:	39 0d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ecx
c0010597:	75 10                	jne    c00105a9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010599:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001059c:	85 c0                	test   eax,eax
c001059e:	74 09                	je     c00105a9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105a4:	5a                   	pop    edx
c00105a5:	5b                   	pop    ebx
c00105a6:	5e                   	pop    esi
c00105a7:	ff e0                	jmp    eax
c00105a9:	58                   	pop    eax
c00105aa:	5b                   	pop    ebx
c00105ab:	5e                   	pop    esi
c00105ac:	c3                   	ret    
c00105ad:	90                   	nop

c00105ae <VgaText::getCursorX()>:
c00105ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105b5:	c3                   	ret    

c00105b6 <VgaText::getCursorY()>:
c00105b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105bd:	c3                   	ret    

c00105be <VgaText::setCursor(int, int)>:
c00105be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00105c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105d0:	e9 b5 fd ff ff       	jmp    c001038a <VgaText::updateCursor()>

c00105d5 <setActiveTerminal(VgaText*)>:
c00105d5:	53                   	push   ebx
c00105d6:	83 ec 08             	sub    esp,0x8
c00105d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105dd:	85 db                	test   ebx,ebx
c00105df:	75 11                	jne    c00105f2 <setActiveTerminal(VgaText*)+0x1d>
c00105e1:	c7 44 24 10 68 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a868
c00105e9:	83 c4 08             	add    esp,0x8
c00105ec:	5b                   	pop    ebx
c00105ed:	e9 33 9c 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c00105f2:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c00105f7:	85 c0                	test   eax,eax
c00105f9:	74 0c                	je     c0010607 <setActiveTerminal(VgaText*)+0x32>
c00105fb:	83 ec 0c             	sub    esp,0xc
c00105fe:	50                   	push   eax
c00105ff:	e8 86 fd ff ff       	call   c001038a <VgaText::updateCursor()>
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	89 1d 84 e5 02 c0    	mov    DWORD PTR ds:0xc002e584,ebx
c001060d:	51                   	push   ecx
c001060e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010611:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010614:	53                   	push   ebx
c0010615:	e8 a4 ff ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010621:	75 07                	jne    c001062a <setActiveTerminal(VgaText*)+0x55>
c0010623:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001062a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001062e:	83 c4 08             	add    esp,0x8
c0010631:	5b                   	pop    ebx
c0010632:	e9 05 fd ff ff       	jmp    c001033c <VgaText::load()>

c0010637 <doTerminalCycle()>:
c0010637:	83 ec 18             	sub    esp,0x18
c001063a:	a1 80 e5 02 c0       	mov    eax,ds:0xc002e580
c001063f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010642:	50                   	push   eax
c0010643:	a3 80 e5 02 c0       	mov    ds:0xc002e580,eax
c0010648:	e8 88 ff ff ff       	call   c00105d5 <setActiveTerminal(VgaText*)>
c001064d:	83 c4 1c             	add    esp,0x1c
c0010650:	c3                   	ret    
c0010651:	90                   	nop

c0010652 <VgaText::setCursorX(int)>:
c0010652:	83 ec 10             	sub    esp,0x10
c0010655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010659:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	50                   	push   eax
c0010661:	e8 58 ff ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c0010666:	83 c4 1c             	add    esp,0x1c
c0010669:	c3                   	ret    

c001066a <VgaText::setCursorY(int)>:
c001066a:	83 ec 10             	sub    esp,0x10
c001066d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010675:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010678:	50                   	push   eax
c0010679:	e8 40 ff ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c001067e:	83 c4 1c             	add    esp,0x1c
c0010681:	c3                   	ret    

c0010682 <VgaText::incrementCursor(bool)>:
c0010682:	56                   	push   esi
c0010683:	53                   	push   ebx
c0010684:	51                   	push   ecx
c0010685:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010689:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001068d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010690:	40                   	inc    eax
c0010691:	83 f8 50             	cmp    eax,0x50
c0010694:	74 05                	je     c001069b <VgaText::incrementCursor(bool)+0x19>
c0010696:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010699:	eb 24                	jmp    c00106bf <VgaText::incrementCursor(bool)+0x3d>
c001069b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001069e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106a5:	8d 50 01             	lea    edx,[eax+0x1]
c00106a8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106ab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106ae:	75 0f                	jne    c00106bf <VgaText::incrementCursor(bool)+0x3d>
c00106b0:	83 ec 0c             	sub    esp,0xc
c00106b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106b6:	53                   	push   ebx
c00106b7:	e8 f0 fd ff ff       	call   c00104ac <VgaText::scrollScreen()>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	89 f0                	mov    eax,esi
c00106c1:	84 c0                	test   al,al
c00106c3:	74 0c                	je     c00106d1 <VgaText::incrementCursor(bool)+0x4f>
c00106c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106c9:	5a                   	pop    edx
c00106ca:	5b                   	pop    ebx
c00106cb:	5e                   	pop    esi
c00106cc:	e9 b9 fc ff ff       	jmp    c001038a <VgaText::updateCursor()>
c00106d1:	58                   	pop    eax
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	c3                   	ret    
c00106d5:	90                   	nop

c00106d6 <VgaText::decrementCursor(bool)>:
c00106d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106de:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00106e1:	85 c0                	test   eax,eax
c00106e3:	74 04                	je     c00106e9 <VgaText::decrementCursor(bool)+0x13>
c00106e5:	48                   	dec    eax
c00106e6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00106e9:	84 c9                	test   cl,cl
c00106eb:	74 09                	je     c00106f6 <VgaText::decrementCursor(bool)+0x20>
c00106ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106f1:	e9 94 fc ff ff       	jmp    c001038a <VgaText::updateCursor()>
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106f8:	53                   	push   ebx
c00106f9:	83 ec 08             	sub    esp,0x8
c00106fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010708:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001070c:	3c 07                	cmp    al,0x7
c001070e:	75 2a                	jne    c001073a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010710:	a1 38 e6 02 c0       	mov    eax,ds:0xc002e638
c0010715:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001071d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010725:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001072d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010731:	83 c4 08             	add    esp,0x8
c0010734:	5b                   	pop    ebx
c0010735:	e9 5a 2f 00 00       	jmp    c0013694 <Buzzer::beep(int, int, bool)>
c001073a:	3c 0d                	cmp    al,0xd
c001073c:	75 09                	jne    c0010747 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001073e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010745:	eb 2c                	jmp    c0010773 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010747:	3c 0a                	cmp    al,0xa
c0010749:	75 31                	jne    c001077c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001074b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001074e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010755:	8d 50 01             	lea    edx,[eax+0x1]
c0010758:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001075b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001075e:	75 0f                	jne    c001076f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010760:	83 ec 0c             	sub    esp,0xc
c0010763:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010766:	53                   	push   ebx
c0010767:	e8 40 fd ff ff       	call   c00104ac <VgaText::scrollScreen()>
c001076c:	83 c4 10             	add    esp,0x10
c001076f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010773:	83 c4 08             	add    esp,0x8
c0010776:	5b                   	pop    ebx
c0010777:	e9 0e fc ff ff       	jmp    c001038a <VgaText::updateCursor()>
c001077c:	3c 08                	cmp    al,0x8
c001077e:	75 25                	jne    c00107a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010780:	50                   	push   eax
c0010781:	50                   	push   eax
c0010782:	6a 01                	push   0x1
c0010784:	53                   	push   ebx
c0010785:	e8 4c ff ff ff       	call   c00106d6 <VgaText::decrementCursor(bool)>
c001078a:	5a                   	pop    edx
c001078b:	59                   	pop    ecx
c001078c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001078f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010792:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010795:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010798:	6a 20                	push   0x20
c001079a:	53                   	push   ebx
c001079b:	e8 b2 fd ff ff       	call   c0010552 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107a0:	83 c4 28             	add    esp,0x28
c00107a3:	5b                   	pop    ebx
c00107a4:	c3                   	ret    
c00107a5:	83 ec 08             	sub    esp,0x8
c00107a8:	0f be c0             	movsx  eax,al
c00107ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107b1:	51                   	push   ecx
c00107b2:	52                   	push   edx
c00107b3:	50                   	push   eax
c00107b4:	53                   	push   ebx
c00107b5:	e8 98 fd ff ff       	call   c0010552 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107be:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107c6:	83 c4 28             	add    esp,0x28
c00107c9:	5b                   	pop    ebx
c00107ca:	e9 b3 fe ff ff       	jmp    c0010682 <VgaText::incrementCursor(bool)>
c00107cf:	90                   	nop

c00107d0 <VgaText::doUpdate()>:
c00107d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107d7:	85 c0                	test   eax,eax
c00107d9:	74 02                	je     c00107dd <VgaText::doUpdate()+0xd>
c00107db:	ff e0                	jmp    eax
c00107dd:	c3                   	ret    

c00107de <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107de:	55                   	push   ebp
c00107df:	31 ed                	xor    ebp,ebp
c00107e1:	57                   	push   edi
c00107e2:	56                   	push   esi
c00107e3:	53                   	push   ebx
c00107e4:	83 ec 1c             	sub    esp,0x1c
c00107e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107eb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107f7:	50                   	push   eax
c00107f8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107fd:	50                   	push   eax
c00107fe:	e8 97 fc ff ff       	call   c001049a <VgaText::combineColours(unsigned char, unsigned char)>
c0010803:	59                   	pop    ecx
c0010804:	0f b6 c0             	movzx  eax,al
c0010807:	5e                   	pop    esi
c0010808:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001080d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010811:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010818:	0f b7 f6             	movzx  esi,si
c001081b:	01 f6                	add    esi,esi
c001081d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010820:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010823:	84 c0                	test   al,al
c0010825:	0f 84 fd 00 00 00    	je     c0010928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001082b:	3c 0d                	cmp    al,0xd
c001082d:	75 0c                	jne    c001083b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001082f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010836:	e9 e7 00 00 00       	jmp    c0010922 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001083b:	3c 0a                	cmp    al,0xa
c001083d:	75 47                	jne    c0010886 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001083f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010842:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010849:	8d 48 01             	lea    ecx,[eax+0x1]
c001084c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001084f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010852:	75 0f                	jne    c0010863 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001085a:	53                   	push   ebx
c001085b:	e8 4c fc ff ff       	call   c00104ac <VgaText::scrollScreen()>
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	83 ec 0c             	sub    esp,0xc
c0010866:	31 ed                	xor    ebp,ebp
c0010868:	53                   	push   ebx
c0010869:	e8 1c fb ff ff       	call   c001038a <VgaText::updateCursor()>
c001086e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010873:	83 c4 10             	add    esp,0x10
c0010876:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010879:	0f b7 f6             	movzx  esi,si
c001087c:	01 f6                	add    esi,esi
c001087e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010881:	e9 9c 00 00 00       	jmp    c0010922 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010886:	3c 08                	cmp    al,0x8
c0010888:	75 35                	jne    c00108bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001088a:	56                   	push   esi
c001088b:	56                   	push   esi
c001088c:	6a 01                	push   0x1
c001088e:	53                   	push   ebx
c001088f:	e8 42 fe ff ff       	call   c00106d6 <VgaText::decrementCursor(bool)>
c0010894:	58                   	pop    eax
c0010895:	5a                   	pop    edx
c0010896:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010899:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001089c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001089f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108a2:	6a 20                	push   0x20
c00108a4:	53                   	push   ebx
c00108a5:	e8 a8 fc ff ff       	call   c0010552 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108aa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108af:	83 c4 20             	add    esp,0x20
c00108b2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108b5:	0f b7 f6             	movzx  esi,si
c00108b8:	01 f6                	add    esi,esi
c00108ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108bd:	eb 63                	jmp    c0010922 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108bf:	51                   	push   ecx
c00108c0:	51                   	push   ecx
c00108c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108c5:	50                   	push   eax
c00108c6:	e8 75 fc ff ff       	call   c0010540 <VgaText::combineCharAndColour(char, unsigned char)>
c00108cb:	83 c4 10             	add    esp,0x10
c00108ce:	66 89 06             	mov    WORD PTR [esi],ax
c00108d1:	39 1d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ebx
c00108d7:	75 21                	jne    c00108fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108d9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108dc:	85 c0                	test   eax,eax
c00108de:	74 1a                	je     c00108fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108e0:	52                   	push   edx
c00108e1:	52                   	push   edx
c00108e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108f0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108f3:	51                   	push   ecx
c00108f4:	53                   	push   ebx
c00108f5:	ff d0                	call   eax
c00108f7:	83 c4 20             	add    esp,0x20
c00108fa:	83 c6 02             	add    esi,0x2
c00108fd:	50                   	push   eax
c00108fe:	50                   	push   eax
c00108ff:	6a 00                	push   0x0
c0010901:	53                   	push   ebx
c0010902:	e8 7b fd ff ff       	call   c0010682 <VgaText::incrementCursor(bool)>
c0010907:	83 c4 10             	add    esp,0x10
c001090a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001090e:	75 0d                	jne    c001091d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010910:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010915:	0f b7 f6             	movzx  esi,si
c0010918:	01 f6                	add    esi,esi
c001091a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001091d:	bd 01 00 00 00       	mov    ebp,0x1
c0010922:	47                   	inc    edi
c0010923:	e9 f8 fe ff ff       	jmp    c0010820 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010928:	83 ec 0c             	sub    esp,0xc
c001092b:	53                   	push   ebx
c001092c:	e8 59 fa ff ff       	call   c001038a <VgaText::updateCursor()>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	89 e8                	mov    eax,ebp
c0010936:	84 c0                	test   al,al
c0010938:	74 0c                	je     c0010946 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001093a:	83 ec 0c             	sub    esp,0xc
c001093d:	53                   	push   ebx
c001093e:	e8 8d fe ff ff       	call   c00107d0 <VgaText::doUpdate()>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001094d:	83 c4 1c             	add    esp,0x1c
c0010950:	5b                   	pop    ebx
c0010951:	5e                   	pop    esi
c0010952:	5f                   	pop    edi
c0010953:	5d                   	pop    ebp
c0010954:	c3                   	ret    
c0010955:	90                   	nop

c0010956 <VgaText::clearScreen()>:
c0010956:	57                   	push   edi
c0010957:	56                   	push   esi
c0010958:	31 f6                	xor    esi,esi
c001095a:	53                   	push   ebx
c001095b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001095f:	52                   	push   edx
c0010960:	6a 00                	push   0x0
c0010962:	6a 00                	push   0x0
c0010964:	53                   	push   ebx
c0010965:	e8 54 fc ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c001096a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010977:	7e 20                	jle    c0010999 <VgaText::clearScreen()+0x43>
c0010979:	31 ff                	xor    edi,edi
c001097b:	50                   	push   eax
c001097c:	50                   	push   eax
c001097d:	56                   	push   esi
c001097e:	57                   	push   edi
c001097f:	47                   	inc    edi
c0010980:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010983:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010986:	6a 20                	push   0x20
c0010988:	53                   	push   ebx
c0010989:	e8 c4 fb ff ff       	call   c0010552 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001098e:	83 c4 20             	add    esp,0x20
c0010991:	83 ff 50             	cmp    edi,0x50
c0010994:	75 e5                	jne    c001097b <VgaText::clearScreen()+0x25>
c0010996:	46                   	inc    esi
c0010997:	eb db                	jmp    c0010974 <VgaText::clearScreen()+0x1e>
c0010999:	83 ec 0c             	sub    esp,0xc
c001099c:	53                   	push   ebx
c001099d:	e8 2e fe ff ff       	call   c00107d0 <VgaText::doUpdate()>
c00109a2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109a9:	83 c4 10             	add    esp,0x10
c00109ac:	5b                   	pop    ebx
c00109ad:	5e                   	pop    esi
c00109ae:	5f                   	pop    edi
c00109af:	c3                   	ret    

c00109b0 <VgaText::putchar(char)>:
c00109b0:	56                   	push   esi
c00109b1:	53                   	push   ebx
c00109b2:	83 ec 14             	sub    esp,0x14
c00109b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109bd:	3c 5b                	cmp    al,0x5b
c00109bf:	75 18                	jne    c00109d9 <VgaText::putchar(char)+0x29>
c00109c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109c5:	74 1f                	je     c00109e6 <VgaText::putchar(char)+0x36>
c00109c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109d4:	e9 bd 00 00 00       	jmp    c0010a96 <VgaText::putchar(char)+0xe6>
c00109d9:	3c 1b                	cmp    al,0x1b
c00109db:	75 09                	jne    c00109e6 <VgaText::putchar(char)+0x36>
c00109dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109e1:	e9 b0 00 00 00       	jmp    c0010a96 <VgaText::putchar(char)+0xe6>
c00109e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109e9:	84 c9                	test   cl,cl
c00109eb:	0f 84 92 00 00 00    	je     c0010a83 <VgaText::putchar(char)+0xd3>
c00109f1:	8d 50 c0             	lea    edx,[eax-0x40]
c00109f4:	80 fa 3e             	cmp    dl,0x3e
c00109f7:	77 76                	ja     c0010a6f <VgaText::putchar(char)+0xbf>
c00109f9:	3c 6d                	cmp    al,0x6d
c00109fb:	75 47                	jne    c0010a44 <VgaText::putchar(char)+0x94>
c00109fd:	31 f6                	xor    esi,esi
c00109ff:	31 d2                	xor    edx,edx
c0010a01:	31 c0                	xor    eax,eax
c0010a03:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a06:	7e 2d                	jle    c0010a35 <VgaText::putchar(char)+0x85>
c0010a08:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a0d:	80 fa 3b             	cmp    dl,0x3b
c0010a10:	75 17                	jne    c0010a29 <VgaText::putchar(char)+0x79>
c0010a12:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a16:	50                   	push   eax
c0010a17:	53                   	push   ebx
c0010a18:	e8 83 f9 ff ff       	call   c00103a0 <VgaText::doANSI_SGR(int)>
c0010a1d:	59                   	pop    ecx
c0010a1e:	31 d2                	xor    edx,edx
c0010a20:	58                   	pop    eax
c0010a21:	31 c0                	xor    eax,eax
c0010a23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a27:	eb 09                	jmp    c0010a32 <VgaText::putchar(char)+0x82>
c0010a29:	6b c0 0a             	imul   eax,eax,0xa
c0010a2c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a30:	88 ca                	mov    dl,cl
c0010a32:	46                   	inc    esi
c0010a33:	eb ce                	jmp    c0010a03 <VgaText::putchar(char)+0x53>
c0010a35:	84 d2                	test   dl,dl
c0010a37:	74 2e                	je     c0010a67 <VgaText::putchar(char)+0xb7>
c0010a39:	50                   	push   eax
c0010a3a:	53                   	push   ebx
c0010a3b:	e8 60 f9 ff ff       	call   c00103a0 <VgaText::doANSI_SGR(int)>
c0010a40:	58                   	pop    eax
c0010a41:	5a                   	pop    edx
c0010a42:	eb 23                	jmp    c0010a67 <VgaText::putchar(char)+0xb7>
c0010a44:	3c 4a                	cmp    al,0x4a
c0010a46:	75 1f                	jne    c0010a67 <VgaText::putchar(char)+0xb7>
c0010a48:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a4c:	75 19                	jne    c0010a67 <VgaText::putchar(char)+0xb7>
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	53                   	push   ebx
c0010a52:	e8 ff fe ff ff       	call   c0010956 <VgaText::clearScreen()>
c0010a57:	83 c4 0c             	add    esp,0xc
c0010a5a:	6a 00                	push   0x0
c0010a5c:	6a 00                	push   0x0
c0010a5e:	53                   	push   ebx
c0010a5f:	e8 5a fb ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c0010a64:	83 c4 10             	add    esp,0x10
c0010a67:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a6d:	eb 27                	jmp    c0010a96 <VgaText::putchar(char)+0xe6>
c0010a6f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a72:	83 fa 0e             	cmp    edx,0xe
c0010a75:	7f 1f                	jg     c0010a96 <VgaText::putchar(char)+0xe6>
c0010a77:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a7a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a7d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a81:	eb 13                	jmp    c0010a96 <VgaText::putchar(char)+0xe6>
c0010a83:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a86:	0f be c0             	movsx  eax,al
c0010a89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a8c:	50                   	push   eax
c0010a8d:	53                   	push   ebx
c0010a8e:	e8 65 fc ff ff       	call   c00106f8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	83 c4 14             	add    esp,0x14
c0010a99:	5b                   	pop    ebx
c0010a9a:	5e                   	pop    esi
c0010a9b:	c3                   	ret    

c0010a9c <VgaText::putx(unsigned int)>:
c0010a9c:	57                   	push   edi
c0010a9d:	b9 11 00 00 00       	mov    ecx,0x11
c0010aa2:	56                   	push   esi
c0010aa3:	be 76 a8 02 c0       	mov    esi,0xc002a876
c0010aa8:	53                   	push   ebx
c0010aa9:	83 ec 20             	sub    esp,0x20
c0010aac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ab0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ab4:	fc                   	cld    
c0010ab5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ab7:	be 08 00 00 00       	mov    esi,0x8
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	89 d8                	mov    eax,ebx
c0010ac0:	c1 e3 04             	shl    ebx,0x4
c0010ac3:	c1 e8 1c             	shr    eax,0x1c
c0010ac6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010acb:	50                   	push   eax
c0010acc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ad0:	e8 db fe ff ff       	call   c00109b0 <VgaText::putchar(char)>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	4e                   	dec    esi
c0010ad9:	75 e1                	jne    c0010abc <VgaText::putx(unsigned int)+0x20>
c0010adb:	83 c4 20             	add    esp,0x20
c0010ade:	5b                   	pop    ebx
c0010adf:	5e                   	pop    esi
c0010ae0:	5f                   	pop    edi
c0010ae1:	c3                   	ret    

c0010ae2 <VgaText::puts(char const*)>:
c0010ae2:	53                   	push   ebx
c0010ae3:	83 ec 08             	sub    esp,0x8
c0010ae6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010aea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010aed:	84 c0                	test   al,al
c0010aef:	74 12                	je     c0010b03 <VgaText::puts(char const*)+0x21>
c0010af1:	43                   	inc    ebx
c0010af2:	51                   	push   ecx
c0010af3:	51                   	push   ecx
c0010af4:	50                   	push   eax
c0010af5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af9:	e8 b2 fe ff ff       	call   c00109b0 <VgaText::putchar(char)>
c0010afe:	83 c4 10             	add    esp,0x10
c0010b01:	eb e7                	jmp    c0010aea <VgaText::puts(char const*)+0x8>
c0010b03:	83 c4 08             	add    esp,0x8
c0010b06:	5b                   	pop    ebx
c0010b07:	c3                   	ret    

c0010b08 <VgaText::VgaText(char const*)>:
c0010b08:	57                   	push   edi
c0010b09:	56                   	push   esi
c0010b0a:	53                   	push   ebx
c0010b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0f:	83 ec 08             	sub    esp,0x8
c0010b12:	6a 00                	push   0x0
c0010b14:	50                   	push   eax
c0010b15:	e8 44 05 00 00       	call   c001105e <UnixFile::UnixFile(int)>
c0010b1a:	83 c4 10             	add    esp,0x10
c0010b1d:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c0010b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b26:	89 10                	mov    DWORD PTR [eax],edx
c0010b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b37:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b42:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b52:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b68:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b73:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7e:	8d 50 60             	lea    edx,[eax+0x60]
c0010b81:	bb 60 e5 02 c0       	mov    ebx,0xc002e560
c0010b86:	b8 08 00 00 00       	mov    eax,0x8
c0010b8b:	fc                   	cld    
c0010b8c:	89 d7                	mov    edi,edx
c0010b8e:	89 de                	mov    esi,ebx
c0010b90:	89 c1                	mov    ecx,eax
c0010b92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b98:	05 82 00 00 00       	add    eax,0x82
c0010b9d:	83 ec 08             	sub    esp,0x8
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	50                   	push   eax
c0010ba5:	e8 62 fc fe ff       	call   c000080c <strcpy>
c0010baa:	83 c4 10             	add    esp,0x10
c0010bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	6a 01                	push   0x1
c0010bbd:	e8 df 08 00 00       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0010bc2:	83 c4 10             	add    esp,0x10
c0010bc5:	89 c2                	mov    edx,eax
c0010bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bcb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bce:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c0010bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bdb:	89 c6                	mov    esi,eax
c0010bdd:	e8 35 f0 ff ff       	call   c000fc17 <Phys::allocatePage()>
c0010be2:	68 05 0c 00 00       	push   0xc05
c0010be7:	56                   	push   esi
c0010be8:	50                   	push   eax
c0010be9:	53                   	push   ebx
c0010bea:	e8 59 0f 00 00       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bf9:	83 ec 04             	sub    esp,0x4
c0010bfc:	68 00 0f 00 00       	push   0xf00
c0010c01:	6a 00                	push   0x0
c0010c03:	50                   	push   eax
c0010c04:	e8 47 fb fe ff       	call   c0000750 <memset>
c0010c09:	83 c4 10             	add    esp,0x10
c0010c0c:	83 ec 04             	sub    esp,0x4
c0010c0f:	6a 00                	push   0x0
c0010c11:	6a 07                	push   0x7
c0010c13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c17:	e8 18 f8 ff ff       	call   c0010434 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	83 ec 04             	sub    esp,0x4
c0010c22:	6a 00                	push   0x0
c0010c24:	6a 00                	push   0x0
c0010c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2a:	e8 8f f9 ff ff       	call   c00105be <VgaText::setCursor(int, int)>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	83 ec 0c             	sub    esp,0xc
c0010c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c39:	e8 18 fd ff ff       	call   c0010956 <VgaText::clearScreen()>
c0010c3e:	83 c4 10             	add    esp,0x10
c0010c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c45:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c4d:	05 02 01 00 00       	add    eax,0x102
c0010c52:	83 ec 04             	sub    esp,0x4
c0010c55:	68 96 00 00 00       	push   0x96
c0010c5a:	6a 00                	push   0x0
c0010c5c:	50                   	push   eax
c0010c5d:	e8 ee fa fe ff       	call   c0000750 <memset>
c0010c62:	83 c4 10             	add    esp,0x10
c0010c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c69:	05 98 01 00 00       	add    eax,0x198
c0010c6e:	83 ec 04             	sub    esp,0x4
c0010c71:	68 2c 01 00 00       	push   0x12c
c0010c76:	6a 00                	push   0x0
c0010c78:	50                   	push   eax
c0010c79:	e8 d2 fa fe ff       	call   c0000750 <memset>
c0010c7e:	83 c4 10             	add    esp,0x10
c0010c81:	90                   	nop
c0010c82:	5b                   	pop    ebx
c0010c83:	5e                   	pop    esi
c0010c84:	5f                   	pop    edi
c0010c85:	c3                   	ret    

c0010c86 <VgaText::receiveKey(unsigned char)>:
c0010c86:	55                   	push   ebp
c0010c87:	57                   	push   edi
c0010c88:	56                   	push   esi
c0010c89:	53                   	push   ebx
c0010c8a:	83 ec 1c             	sub    esp,0x1c
c0010c8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c95:	84 db                	test   bl,bl
c0010c97:	0f 84 c9 00 00 00    	je     c0010d66 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c9d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010ca3:	80 fb 08             	cmp    bl,0x8
c0010ca6:	75 2c                	jne    c0010cd4 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ca8:	83 ec 0c             	sub    esp,0xc
c0010cab:	57                   	push   edi
c0010cac:	e8 bb fa fe ff       	call   c000076c <strlen>
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	85 c0                	test   eax,eax
c0010cb6:	74 41                	je     c0010cf9 <VgaText::receiveKey(unsigned char)+0x73>
c0010cb8:	50                   	push   eax
c0010cb9:	50                   	push   eax
c0010cba:	6a 08                	push   0x8
c0010cbc:	56                   	push   esi
c0010cbd:	e8 ee fc ff ff       	call   c00109b0 <VgaText::putchar(char)>
c0010cc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cc5:	e8 a2 fa fe ff       	call   c000076c <strlen>
c0010cca:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010cd2:	eb 22                	jmp    c0010cf6 <VgaText::receiveKey(unsigned char)+0x70>
c0010cd4:	0f be c3             	movsx  eax,bl
c0010cd7:	52                   	push   edx
c0010cd8:	52                   	push   edx
c0010cd9:	50                   	push   eax
c0010cda:	56                   	push   esi
c0010cdb:	e8 d0 fc ff ff       	call   c00109b0 <VgaText::putchar(char)>
c0010ce0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ce4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ce9:	59                   	pop    ecx
c0010cea:	5d                   	pop    ebp
c0010ceb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cef:	50                   	push   eax
c0010cf0:	57                   	push   edi
c0010cf1:	e8 56 fc fe ff       	call   c000094c <strcat>
c0010cf6:	83 c4 10             	add    esp,0x10
c0010cf9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d00:	75 05                	jne    c0010d07 <VgaText::receiveKey(unsigned char)+0x81>
c0010d02:	80 fb 0a             	cmp    bl,0xa
c0010d05:	75 53                	jne    c0010d5a <VgaText::receiveKey(unsigned char)+0xd4>
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d10:	53                   	push   ebx
c0010d11:	e8 56 fa fe ff       	call   c000076c <strlen>
c0010d16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d19:	89 c5                	mov    ebp,eax
c0010d1b:	e8 4c fa fe ff       	call   c000076c <strlen>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d27:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d2c:	76 10                	jbe    c0010d3e <VgaText::receiveKey(unsigned char)+0xb8>
c0010d2e:	83 ec 0c             	sub    esp,0xc
c0010d31:	68 87 a8 02 c0       	push   0xc002a887
c0010d36:	e8 ea 94 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	50                   	push   eax
c0010d3f:	50                   	push   eax
c0010d40:	57                   	push   edi
c0010d41:	53                   	push   ebx
c0010d42:	e8 05 fc fe ff       	call   c000094c <strcat>
c0010d47:	83 c4 0c             	add    esp,0xc
c0010d4a:	68 96 00 00 00       	push   0x96
c0010d4f:	6a 00                	push   0x0
c0010d51:	57                   	push   edi
c0010d52:	e8 f9 f9 fe ff       	call   c0000750 <memset>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	56                   	push   esi
c0010d5e:	e8 6d fa ff ff       	call   c00107d0 <VgaText::doUpdate()>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	83 c4 1c             	add    esp,0x1c
c0010d69:	5b                   	pop    ebx
c0010d6a:	5e                   	pop    esi
c0010d6b:	5f                   	pop    edi
c0010d6c:	5d                   	pop    ebp
c0010d6d:	c3                   	ret    

c0010d6e <VgaText::write(unsigned long long, void*, int*)>:
c0010d6e:	55                   	push   ebp
c0010d6f:	57                   	push   edi
c0010d70:	56                   	push   esi
c0010d71:	53                   	push   ebx
c0010d72:	83 ec 0c             	sub    esp,0xc
c0010d75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d79:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d81:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d88:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d8b:	39 eb                	cmp    ebx,ebp
c0010d8d:	74 13                	je     c0010da2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d8f:	43                   	inc    ebx
c0010d90:	50                   	push   eax
c0010d91:	50                   	push   eax
c0010d92:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d96:	50                   	push   eax
c0010d97:	56                   	push   esi
c0010d98:	e8 13 fc ff ff       	call   c00109b0 <VgaText::putchar(char)>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	eb e9                	jmp    c0010d8b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010da2:	83 ec 0c             	sub    esp,0xc
c0010da5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dac:	56                   	push   esi
c0010dad:	e8 1e fa ff ff       	call   c00107d0 <VgaText::doUpdate()>
c0010db2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010db6:	89 38                	mov    DWORD PTR [eax],edi
c0010db8:	83 c4 1c             	add    esp,0x1c
c0010dbb:	31 c0                	xor    eax,eax
c0010dbd:	5b                   	pop    ebx
c0010dbe:	5e                   	pop    esi
c0010dbf:	5f                   	pop    edi
c0010dc0:	5d                   	pop    ebp
c0010dc1:	c3                   	ret    

c0010dc2 <newTerminal(char*)>:
c0010dc2:	83 ec 28             	sub    esp,0x28
c0010dc5:	68 c4 02 00 00       	push   0x2c4
c0010dca:	e8 4c ea ff ff       	call   c000f81b <malloc>
c0010dcf:	5a                   	pop    edx
c0010dd0:	59                   	pop    ecx
c0010dd1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010dd5:	50                   	push   eax
c0010dd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dda:	e8 29 fd ff ff       	call   c0010b08 <VgaText::VgaText(char const*)>
c0010ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010de3:	83 c4 2c             	add    esp,0x2c
c0010de6:	c3                   	ret    
c0010de7:	90                   	nop

c0010de8 <TSS::TSS()>:
c0010de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010df3:	90                   	nop
c0010df4:	c3                   	ret    
c0010df5:	90                   	nop

c0010df6 <TSS::setESP(unsigned long)>:
c0010df6:	55                   	push   ebp
c0010df7:	89 e5                	mov    ebp,esp
c0010df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e05:	90                   	nop
c0010e06:	5d                   	pop    ebp
c0010e07:	c3                   	ret    

c0010e08 <TSS::flush()>:
c0010e08:	55                   	push   ebp
c0010e09:	89 e5                	mov    ebp,esp
c0010e0b:	83 ec 10             	sub    esp,0x10
c0010e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e13:	83 c8 03             	or     eax,0x3
c0010e16:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e1a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e1e:	66 89 d0             	mov    ax,dx
c0010e21:	0f 00 d8             	ltr    ax
c0010e24:	90                   	nop
c0010e25:	c9                   	leave  
c0010e26:	c3                   	ret    
c0010e27:	90                   	nop

c0010e28 <TSS::setup(unsigned long, unsigned long)>:
c0010e28:	55                   	push   ebp
c0010e29:	89 e5                	mov    ebp,esp
c0010e2b:	83 ec 18             	sub    esp,0x18
c0010e2e:	83 ec 0c             	sub    esp,0xc
c0010e31:	6a 68                	push   0x68
c0010e33:	e8 e3 e9 ff ff       	call   c000f81b <malloc>
c0010e38:	83 c4 10             	add    esp,0x10
c0010e3b:	89 c2                	mov    edx,eax
c0010e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e49:	83 ec 04             	sub    esp,0x4
c0010e4c:	6a 68                	push   0x68
c0010e4e:	6a 00                	push   0x0
c0010e50:	50                   	push   eax
c0010e51:	e8 fa f8 fe ff       	call   c0000750 <memset>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e83:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ece:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eda:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef0:	0f 20 da             	mov    edx,cr3
c0010ef3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010ef6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010ef9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	50                   	push   eax
c0010f06:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f09:	50                   	push   eax
c0010f0a:	e8 6f e1 ff ff       	call   c000f07e <GDTEntry::setBase(unsigned int)>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	83 ec 08             	sub    esp,0x8
c0010f15:	6a 68                	push   0x68
c0010f17:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f1a:	50                   	push   eax
c0010f1b:	e8 7a e1 ff ff       	call   c000f09a <GDTEntry::setLimit(unsigned int)>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f2a:	83 e0 0f             	and    eax,0xf
c0010f2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f33:	83 c8 40             	or     eax,0x40
c0010f36:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f39:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0010f3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f44:	05 78 01 00 00       	add    eax,0x178
c0010f49:	83 ec 04             	sub    esp,0x4
c0010f4c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f4f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f52:	50                   	push   eax
c0010f53:	e8 76 e1 ff ff       	call   c000f0ce <GDT::addEntry(GDTEntry)>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	89 c2                	mov    edx,eax
c0010f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f60:	89 10                	mov    DWORD PTR [eax],edx
c0010f62:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0010f67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f6d:	05 78 01 00 00       	add    eax,0x178
c0010f72:	83 ec 0c             	sub    esp,0xc
c0010f75:	50                   	push   eax
c0010f76:	e8 7d e1 ff ff       	call   c000f0f8 <GDT::flush()>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f83:	c9                   	leave  
c0010f84:	c3                   	ret    
c0010f85:	90                   	nop

c0010f86 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f91:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010f96:	75 08                	jne    c0010fa0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010f98:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010f9e:	eb 38                	jmp    c0010fd8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fa0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fa5:	75 17                	jne    c0010fbe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010faf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fbb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fbe:	89 c1                	mov    ecx,eax
c0010fc0:	83 e1 fd             	and    ecx,0xfffffffd
c0010fc3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010fc9:	74 cd                	je     c0010f98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fcb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010fd0:	83 e0 ef             	and    eax,0xffffffef
c0010fd3:	83 f8 08             	cmp    eax,0x8
c0010fd6:	76 c0                	jbe    c0010f98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fd8:	31 c0                	xor    eax,eax
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <ReservedFilename::isAtty()>:
c0010fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fe3:	31 c0                	xor    eax,eax
c0010fe5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010feb:	74 09                	je     c0010ff6 <ReservedFilename::isAtty()+0x1a>
c0010fed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010ff3:	0f 94 c0             	sete   al
c0010ff6:	c3                   	ret    
c0010ff7:	90                   	nop

c0010ff8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ffc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011003:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011007:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001100c:	75 08                	jne    c0011016 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001100e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011014:	eb 3d                	jmp    c0011053 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011016:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001101b:	75 17                	jne    c0011034 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001101d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011022:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011025:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001102b:	8b 10                	mov    edx,DWORD PTR [eax]
c001102d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011031:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011034:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011039:	75 04                	jne    c001103f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001103b:	89 0a                	mov    DWORD PTR [edx],ecx
c001103d:	eb 14                	jmp    c0011053 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001103f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011044:	74 c8                	je     c001100e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011046:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001104b:	83 e0 ef             	and    eax,0xffffffef
c001104e:	83 f8 08             	cmp    eax,0x8
c0011051:	76 bb                	jbe    c001100e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011053:	31 c0                	xor    eax,eax
c0011055:	c3                   	ret    

c0011056 <UnixFile::getFileDescriptor()>:
c0011056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001105d:	c3                   	ret    

c001105e <UnixFile::UnixFile(int)>:
c001105e:	53                   	push   ebx
c001105f:	83 ec 28             	sub    esp,0x28
c0011062:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0011067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001106b:	89 10                	mov    DWORD PTR [eax],edx
c001106d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011075:	0f 8f 8c 01 00 00    	jg     c0011207 <UnixFile::UnixFile(int)+0x1a9>
c001107b:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c0011080:	8d 50 01             	lea    edx,[eax+0x1]
c0011083:	89 15 60 d4 02 c0    	mov    DWORD PTR ds:0xc002d460,edx
c0011089:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001108d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011090:	83 ec 08             	sub    esp,0x8
c0011093:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011097:	68 18 e6 02 c0       	push   0xc002e618
c001109c:	e8 75 79 01 00       	call   c0028a16 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110a1:	83 c4 10             	add    esp,0x10
c00110a4:	a0 14 e6 02 c0       	mov    al,ds:0xc002e614
c00110a9:	83 f0 01             	xor    eax,0x1
c00110ac:	84 c0                	test   al,al
c00110ae:	0f 84 54 01 00 00    	je     c0011208 <UnixFile::UnixFile(int)+0x1aa>
c00110b4:	c6 05 14 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e614,0x1
c00110bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110c3:	83 ec 0c             	sub    esp,0xc
c00110c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ca:	e8 4c e7 ff ff       	call   c000f81b <malloc>
c00110cf:	83 c4 10             	add    esp,0x10
c00110d2:	89 c3                	mov    ebx,eax
c00110d4:	83 ec 08             	sub    esp,0x8
c00110d7:	68 03 ff ff 0f       	push   0xfffff03
c00110dc:	53                   	push   ebx
c00110dd:	e8 2c 01 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	89 1d 0c e6 02 c0    	mov    DWORD PTR ds:0xc002e60c,ebx
c00110eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00110f3:	83 ec 0c             	sub    esp,0xc
c00110f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fa:	e8 1c e7 ff ff       	call   c000f81b <malloc>
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	89 c3                	mov    ebx,eax
c0011104:	83 ec 08             	sub    esp,0x8
c0011107:	68 01 ff ff 0f       	push   0xfffff01
c001110c:	53                   	push   ebx
c001110d:	e8 fc 00 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	89 1d 10 e6 02 c0    	mov    DWORD PTR ds:0xc002e610,ebx
c001111b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011123:	83 ec 0c             	sub    esp,0xc
c0011126:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001112a:	e8 ec e6 ff ff       	call   c000f81b <malloc>
c001112f:	83 c4 10             	add    esp,0x10
c0011132:	89 c3                	mov    ebx,eax
c0011134:	83 ec 08             	sub    esp,0x8
c0011137:	68 00 ff ff 0f       	push   0xfffff00
c001113c:	53                   	push   ebx
c001113d:	e8 cc 00 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c001114b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001115a:	e8 bc e6 ff ff       	call   c000f81b <malloc>
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	89 c3                	mov    ebx,eax
c0011164:	83 ec 08             	sub    esp,0x8
c0011167:	68 02 ff ff 0f       	push   0xfffff02
c001116c:	53                   	push   ebx
c001116d:	e8 9c 00 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	89 1d 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,ebx
c001117b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011183:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011188:	7f 7e                	jg     c0011208 <UnixFile::UnixFile(int)+0x1aa>
c001118a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011192:	83 ec 0c             	sub    esp,0xc
c0011195:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011199:	e8 7d e6 ff ff       	call   c000f81b <malloc>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	89 c3                	mov    ebx,eax
c00111a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111a7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111ac:	83 ec 08             	sub    esp,0x8
c00111af:	50                   	push   eax
c00111b0:	53                   	push   ebx
c00111b1:	e8 58 00 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111bd:	89 1c 85 e0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a20],ebx
c00111c4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111cc:	83 ec 0c             	sub    esp,0xc
c00111cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111d3:	e8 43 e6 ff ff       	call   c000f81b <malloc>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	89 c3                	mov    ebx,eax
c00111dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111e1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00111e6:	83 ec 08             	sub    esp,0x8
c00111e9:	50                   	push   eax
c00111ea:	53                   	push   ebx
c00111eb:	e8 1e 00 00 00       	call   c001120e <ReservedFilename::ReservedFilename(int)>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f7:	89 1c 85 a0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a60],ebx
c00111fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011202:	e9 7c ff ff ff       	jmp    c0011183 <UnixFile::UnixFile(int)+0x125>
c0011207:	90                   	nop
c0011208:	83 c4 28             	add    esp,0x28
c001120b:	5b                   	pop    ebx
c001120c:	c3                   	ret    
c001120d:	90                   	nop

c001120e <ReservedFilename::ReservedFilename(int)>:
c001120e:	83 ec 0c             	sub    esp,0xc
c0011211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011215:	83 ec 08             	sub    esp,0x8
c0011218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001121c:	50                   	push   eax
c001121d:	e8 3c fe ff ff       	call   c001105e <UnixFile::UnixFile(int)>
c0011222:	83 c4 10             	add    esp,0x10
c0011225:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	89 10                	mov    DWORD PTR [eax],edx
c0011230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011234:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011238:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001123b:	90                   	nop
c001123c:	83 c4 0c             	add    esp,0xc
c001123f:	c3                   	ret    

c0011240 <UnixFile::~UnixFile()>:
c0011240:	83 ec 1c             	sub    esp,0x1c
c0011243:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0011248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001124c:	89 10                	mov    DWORD PTR [eax],edx
c001124e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011255:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001125a:	7f 73                	jg     c00112cf <UnixFile::~UnixFile()+0x8f>
c001125c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011264:	83 ec 0c             	sub    esp,0xc
c0011267:	68 18 e6 02 c0       	push   0xc002e618
c001126c:	e8 79 78 01 00       	call   c0028aea <LinkedList<UnixFile>::getFirstElement()>
c0011271:	83 c4 10             	add    esp,0x10
c0011274:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011278:	83 ec 0c             	sub    esp,0xc
c001127b:	68 18 e6 02 c0       	push   0xc002e618
c0011280:	e8 6d 78 01 00       	call   c0028af2 <LinkedList<UnixFile>::removeFirst()>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001128c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011290:	74 40                	je     c00112d2 <UnixFile::~UnixFile()+0x92>
c0011292:	83 ec 08             	sub    esp,0x8
c0011295:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011299:	68 18 e6 02 c0       	push   0xc002e618
c001129e:	e8 73 77 01 00       	call   c0028a16 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112aa:	8d 50 01             	lea    edx,[eax+0x1]
c00112ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112b1:	3d 88 13 00 00       	cmp    eax,0x1388
c00112b6:	0f 94 c0             	sete   al
c00112b9:	84 c0                	test   al,al
c00112bb:	74 a7                	je     c0011264 <UnixFile::~UnixFile()+0x24>
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	68 7c a9 02 c0       	push   0xc002a97c
c00112c5:	e8 5b 8f 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	eb 95                	jmp    c0011264 <UnixFile::~UnixFile()+0x24>
c00112cf:	90                   	nop
c00112d0:	eb 01                	jmp    c00112d3 <UnixFile::~UnixFile()+0x93>
c00112d2:	90                   	nop
c00112d3:	90                   	nop
c00112d4:	83 c4 1c             	add    esp,0x1c
c00112d7:	c3                   	ret    

c00112d8 <UnixFile::~UnixFile()>:
c00112d8:	83 ec 0c             	sub    esp,0xc
c00112db:	83 ec 0c             	sub    esp,0xc
c00112de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e2:	e8 59 ff ff ff       	call   c0011240 <UnixFile::~UnixFile()>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	6a 0c                	push   0xc
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 a3 14 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	83 c4 0c             	add    esp,0xc
c00112fe:	c3                   	ret    
c00112ff:	90                   	nop

c0011300 <ReservedFilename::~ReservedFilename()>:
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c0011308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130c:	89 10                	mov    DWORD PTR [eax],edx
c001130e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	50                   	push   eax
c0011316:	e8 25 ff ff ff       	call   c0011240 <UnixFile::~UnixFile()>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	90                   	nop
c001131f:	83 c4 0c             	add    esp,0xc
c0011322:	c3                   	ret    
c0011323:	90                   	nop

c0011324 <ReservedFilename::~ReservedFilename()>:
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	83 ec 0c             	sub    esp,0xc
c001132a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001132e:	e8 cd ff ff ff       	call   c0011300 <ReservedFilename::~ReservedFilename()>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	83 ec 08             	sub    esp,0x8
c0011339:	6a 0c                	push   0xc
c001133b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133f:	e8 57 14 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	83 c4 0c             	add    esp,0xc
c001134a:	c3                   	ret    

c001134b <getFromFileDescriptor(int)>:
c001134b:	53                   	push   ebx
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011353:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011359:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001135f:	7f 2c                	jg     c001138d <getFromFileDescriptor(int)+0x42>
c0011361:	83 ec 0c             	sub    esp,0xc
c0011364:	68 18 e6 02 c0       	push   0xc002e618
c0011369:	e8 7c 77 01 00       	call   c0028aea <LinkedList<UnixFile>::getFirstElement()>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	85 c0                	test   eax,eax
c0011373:	75 04                	jne    c0011379 <getFromFileDescriptor(int)+0x2e>
c0011375:	31 c0                	xor    eax,eax
c0011377:	eb 6e                	jmp    c00113e7 <getFromFileDescriptor(int)+0x9c>
c0011379:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001137c:	74 69                	je     c00113e7 <getFromFileDescriptor(int)+0x9c>
c001137e:	52                   	push   edx
c001137f:	52                   	push   edx
c0011380:	50                   	push   eax
c0011381:	68 18 e6 02 c0       	push   0xc002e618
c0011386:	e8 09 78 01 00       	call   c0028b94 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001138b:	eb e1                	jmp    c001136e <getFromFileDescriptor(int)+0x23>
c001138d:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c0011392:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011398:	74 4d                	je     c00113e7 <getFromFileDescriptor(int)+0x9c>
c001139a:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c001139f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113a5:	74 40                	je     c00113e7 <getFromFileDescriptor(int)+0x9c>
c00113a7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00113ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113b2:	74 33                	je     c00113e7 <getFromFileDescriptor(int)+0x9c>
c00113b4:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c00113b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113bf:	74 26                	je     c00113e7 <getFromFileDescriptor(int)+0x9c>
c00113c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113c7:	83 f8 08             	cmp    eax,0x8
c00113ca:	77 09                	ja     c00113d5 <getFromFileDescriptor(int)+0x8a>
c00113cc:	8b 04 85 e0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a20]
c00113d3:	eb 12                	jmp    c00113e7 <getFromFileDescriptor(int)+0x9c>
c00113d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00113db:	83 fb 08             	cmp    ebx,0x8
c00113de:	77 95                	ja     c0011375 <getFromFileDescriptor(int)+0x2a>
c00113e0:	8b 04 9d a0 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a60]
c00113e7:	83 c4 08             	add    esp,0x8
c00113ea:	5b                   	pop    ebx
c00113eb:	c3                   	ret    

c00113ec <__static_initialization_and_destruction_0(int, int)>:
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00113f4:	75 34                	jne    c001142a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00113fe:	75 2a                	jne    c001142a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011400:	83 ec 0c             	sub    esp,0xc
c0011403:	68 18 e6 02 c0       	push   0xc002e618
c0011408:	e8 c7 75 01 00       	call   c00289d4 <LinkedList<UnixFile>::LinkedList()>
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	83 ec 04             	sub    esp,0x4
c0011413:	68 84 d2 02 c0       	push   0xc002d284
c0011418:	68 18 e6 02 c0       	push   0xc002e618
c001141d:	68 d2 89 02 c0       	push   0xc00289d2
c0011422:	e8 ee 12 00 00       	call   c0012715 <__cxa_atexit>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	90                   	nop
c001142b:	83 c4 0c             	add    esp,0xc
c001142e:	c3                   	ret    

c001142f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001142f:	83 ec 0c             	sub    esp,0xc
c0011432:	83 ec 08             	sub    esp,0x8
c0011435:	68 ff ff 00 00       	push   0xffff
c001143a:	6a 01                	push   0x1
c001143c:	e8 ab ff ff ff       	call   c00113ec <__static_initialization_and_destruction_0(int, int)>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	83 c4 0c             	add    esp,0xc
c0011447:	c3                   	ret    

c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011448:	53                   	push   ebx
c0011449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001144d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011451:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011457:	89 c8                	mov    eax,ecx
c0011459:	d1 e8                	shr    eax,1
c001145b:	03 05 68 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d468
c0011461:	83 e1 01             	and    ecx,0x1
c0011464:	8a 10                	mov    dl,BYTE PTR [eax]
c0011466:	75 09                	jne    c0011471 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011468:	83 e2 f0             	and    edx,0xfffffff0
c001146b:	09 da                	or     edx,ebx
c001146d:	88 10                	mov    BYTE PTR [eax],dl
c001146f:	5b                   	pop    ebx
c0011470:	c3                   	ret    
c0011471:	c1 e3 04             	shl    ebx,0x4
c0011474:	83 e2 0f             	and    edx,0xf
c0011477:	09 da                	or     edx,ebx
c0011479:	88 10                	mov    BYTE PTR [eax],dl
c001147b:	5b                   	pop    ebx
c001147c:	c3                   	ret    

c001147d <Virt::getPageState(unsigned long)>:
c001147d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011481:	8b 0d 68 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d468
c0011487:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001148d:	89 d0                	mov    eax,edx
c001148f:	d1 e8                	shr    eax,1
c0011491:	83 e2 01             	and    edx,0x1
c0011494:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011497:	75 04                	jne    c001149d <Virt::getPageState(unsigned long)+0x20>
c0011499:	83 e0 0f             	and    eax,0xf
c001149c:	c3                   	ret    
c001149d:	c0 e8 04             	shr    al,0x4
c00114a0:	c3                   	ret    

c00114a1 <Virt::allocateKernelVirtualPages(int)>:
c00114a1:	55                   	push   ebp
c00114a2:	31 ed                	xor    ebp,ebp
c00114a4:	57                   	push   edi
c00114a5:	56                   	push   esi
c00114a6:	53                   	push   ebx
c00114a7:	31 db                	xor    ebx,ebx
c00114a9:	83 ec 1c             	sub    esp,0x1c
c00114ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114b0:	8b 3d 64 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d464
c00114b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114bb:	57                   	push   edi
c00114bc:	e8 bc ff ff ff       	call   c001147d <Virt::getPageState(unsigned long)>
c00114c1:	5a                   	pop    edx
c00114c2:	84 c0                	test   al,al
c00114c4:	75 3a                	jne    c0011500 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114c6:	85 db                	test   ebx,ebx
c00114c8:	75 02                	jne    c00114cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114ca:	89 fd                	mov    ebp,edi
c00114cc:	43                   	inc    ebx
c00114cd:	39 f3                	cmp    ebx,esi
c00114cf:	74 5a                	je     c001152b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114d1:	47                   	inc    edi
c00114d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114d8:	76 31                	jbe    c001150b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00114da:	c7 05 64 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d464,0xc8000
c00114e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00114e9:	75 28                	jne    c0011513 <Virt::allocateKernelVirtualPages(int)+0x72>
c00114eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00114f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00114f5:	57                   	push   edi
c00114f6:	e8 82 ff ff ff       	call   c001147d <Virt::getPageState(unsigned long)>
c00114fb:	5a                   	pop    edx
c00114fc:	84 c0                	test   al,al
c00114fe:	74 c6                	je     c00114c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011500:	31 db                	xor    ebx,ebx
c0011502:	47                   	inc    edi
c0011503:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011509:	77 cf                	ja     c00114da <Virt::allocateKernelVirtualPages(int)+0x39>
c001150b:	89 3d 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,edi
c0011511:	eb a8                	jmp    c00114bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011513:	83 ec 0c             	sub    esp,0xc
c0011516:	68 d4 a9 02 c0       	push   0xc002a9d4
c001151b:	e8 05 8d 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0011520:	8b 3d 64 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d464
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	eb 90                	jmp    c00114bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001152b:	89 2d 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,ebp
c0011531:	4b                   	dec    ebx
c0011532:	74 5f                	je     c0011593 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011534:	85 f6                	test   esi,esi
c0011536:	74 3d                	je     c0011575 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011538:	89 e8                	mov    eax,ebp
c001153a:	31 db                	xor    ebx,ebx
c001153c:	8d 7e ff             	lea    edi,[esi-0x1]
c001153f:	eb 14                	jmp    c0011555 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011541:	6a 01                	push   0x1
c0011543:	43                   	inc    ebx
c0011544:	50                   	push   eax
c0011545:	e8 fe fe ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001154a:	58                   	pop    eax
c001154b:	39 f3                	cmp    ebx,esi
c001154d:	5a                   	pop    edx
c001154e:	74 25                	je     c0011575 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011550:	a1 64 d4 02 c0       	mov    eax,ds:0xc002d464
c0011555:	8d 50 01             	lea    edx,[eax+0x1]
c0011558:	85 db                	test   ebx,ebx
c001155a:	89 15 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,edx
c0011560:	74 20                	je     c0011582 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011562:	39 df                	cmp    edi,ebx
c0011564:	75 db                	jne    c0011541 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011566:	6a 03                	push   0x3
c0011568:	43                   	inc    ebx
c0011569:	50                   	push   eax
c001156a:	e8 d9 fe ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001156f:	59                   	pop    ecx
c0011570:	39 f3                	cmp    ebx,esi
c0011572:	58                   	pop    eax
c0011573:	75 db                	jne    c0011550 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011575:	83 c4 1c             	add    esp,0x1c
c0011578:	89 e8                	mov    eax,ebp
c001157a:	5b                   	pop    ebx
c001157b:	c1 e0 0c             	shl    eax,0xc
c001157e:	5e                   	pop    esi
c001157f:	5f                   	pop    edi
c0011580:	5d                   	pop    ebp
c0011581:	c3                   	ret    
c0011582:	6a 02                	push   0x2
c0011584:	bb 01 00 00 00       	mov    ebx,0x1
c0011589:	50                   	push   eax
c001158a:	e8 b9 fe ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001158f:	58                   	pop    eax
c0011590:	5a                   	pop    edx
c0011591:	eb bd                	jmp    c0011550 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011593:	6a 04                	push   0x4
c0011595:	8d 45 01             	lea    eax,[ebp+0x1]
c0011598:	55                   	push   ebp
c0011599:	a3 64 d4 02 c0       	mov    ds:0xc002d464,eax
c001159e:	e8 a5 fe ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115a3:	59                   	pop    ecx
c00115a4:	89 e8                	mov    eax,ebp
c00115a6:	5b                   	pop    ebx
c00115a7:	c1 e0 0c             	shl    eax,0xc
c00115aa:	83 c4 1c             	add    esp,0x1c
c00115ad:	5b                   	pop    ebx
c00115ae:	5e                   	pop    esi
c00115af:	5f                   	pop    edi
c00115b0:	5d                   	pop    ebp
c00115b1:	c3                   	ret    

c00115b2 <Virt::freeSwapfilePage(unsigned long)>:
c00115b2:	53                   	push   ebx
c00115b3:	8b 15 2c e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e62c
c00115b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115bd:	b8 01 00 00 00       	mov    eax,0x1
c00115c2:	89 cb                	mov    ebx,ecx
c00115c4:	d3 e0                	shl    eax,cl
c00115c6:	c1 eb 05             	shr    ebx,0x5
c00115c9:	f7 d0                	not    eax
c00115cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115ce:	5b                   	pop    ebx
c00115cf:	c3                   	ret    

c00115d0 <Virt::swapIDToSector(unsigned long)>:
c00115d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d4:	0f af 05 6c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d46c
c00115db:	03 05 74 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d474
c00115e1:	c3                   	ret    

c00115e2 <Virt::allocateSwapfilePage()>:
c00115e2:	55                   	push   ebp
c00115e3:	31 d2                	xor    edx,edx
c00115e5:	57                   	push   edi
c00115e6:	56                   	push   esi
c00115e7:	53                   	push   ebx
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	8b 0d 6c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d46c
c00115f1:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c00115f6:	f7 f1                	div    ecx
c00115f8:	39 0d 70 d4 02 c0    	cmp    DWORD PTR ds:0xc002d470,ecx
c00115fe:	72 2d                	jb     c001162d <Virt::allocateSwapfilePage()+0x4b>
c0011600:	8b 35 2c e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e62c
c0011606:	8b 16                	mov    edx,DWORD PTR [esi]
c0011608:	f6 c2 01             	test   dl,0x1
c001160b:	74 3c                	je     c0011649 <Virt::allocateSwapfilePage()+0x67>
c001160d:	31 c9                	xor    ecx,ecx
c001160f:	bf 01 00 00 00       	mov    edi,0x1
c0011614:	eb 12                	jmp    c0011628 <Virt::allocateSwapfilePage()+0x46>
c0011616:	89 fd                	mov    ebp,edi
c0011618:	89 ca                	mov    edx,ecx
c001161a:	d3 e5                	shl    ebp,cl
c001161c:	c1 ea 05             	shr    edx,0x5
c001161f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011624:	85 ea                	test   edx,ebp
c0011626:	74 2a                	je     c0011652 <Virt::allocateSwapfilePage()+0x70>
c0011628:	41                   	inc    ecx
c0011629:	39 c8                	cmp    eax,ecx
c001162b:	77 e9                	ja     c0011616 <Virt::allocateSwapfilePage()+0x34>
c001162d:	83 ec 0c             	sub    esp,0xc
c0011630:	68 b4 ab 02 c0       	push   0xc002abb4
c0011635:	e8 eb 8b 00 00       	call   c001a225 <Krnl::panic(char const*)>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	31 c9                	xor    ecx,ecx
c001163f:	83 c4 0c             	add    esp,0xc
c0011642:	89 c8                	mov    eax,ecx
c0011644:	5b                   	pop    ebx
c0011645:	5e                   	pop    esi
c0011646:	5f                   	pop    edi
c0011647:	5d                   	pop    ebp
c0011648:	c3                   	ret    
c0011649:	89 f3                	mov    ebx,esi
c001164b:	bd 01 00 00 00       	mov    ebp,0x1
c0011650:	31 c9                	xor    ecx,ecx
c0011652:	09 ea                	or     edx,ebp
c0011654:	89 c8                	mov    eax,ecx
c0011656:	89 13                	mov    DWORD PTR [ebx],edx
c0011658:	83 c4 0c             	add    esp,0xc
c001165b:	5b                   	pop    ebx
c001165c:	5e                   	pop    esi
c001165d:	5f                   	pop    edi
c001165e:	5d                   	pop    ebp
c001165f:	c3                   	ret    

c0011660 <Virt::virtualMemorySetup()>:
c0011660:	53                   	push   ebx
c0011661:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011666:	6a 0f                	push   0xf
c0011668:	53                   	push   ebx
c0011669:	43                   	inc    ebx
c001166a:	e8 d9 fd ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001166f:	58                   	pop    eax
c0011670:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011676:	5a                   	pop    edx
c0011677:	75 ed                	jne    c0011666 <Virt::virtualMemorySetup()+0x6>
c0011679:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001167e:	6a 00                	push   0x0
c0011680:	53                   	push   ebx
c0011681:	43                   	inc    ebx
c0011682:	e8 c1 fd ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011687:	59                   	pop    ecx
c0011688:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001168e:	58                   	pop    eax
c001168f:	75 ed                	jne    c001167e <Virt::virtualMemorySetup()+0x1e>
c0011691:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011696:	6a 0f                	push   0xf
c0011698:	53                   	push   ebx
c0011699:	43                   	inc    ebx
c001169a:	e8 a9 fd ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001169f:	58                   	pop    eax
c00116a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116a6:	5a                   	pop    edx
c00116a7:	75 ed                	jne    c0011696 <Virt::virtualMemorySetup()+0x36>
c00116a9:	5b                   	pop    ebx
c00116aa:	c3                   	ret    

c00116ab <Virt::setupPageSwapping(int)>:
c00116ab:	53                   	push   ebx
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116b3:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c00116b8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00116be:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c0:	53                   	push   ebx
c00116c1:	c1 e3 0b             	shl    ebx,0xb
c00116c4:	68 cb ab 02 c0       	push   0xc002abcb
c00116c9:	50                   	push   eax
c00116ca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00116cd:	89 1d 70 d4 02 c0    	mov    DWORD PTR ds:0xc002d470,ebx
c00116d3:	c6 05 78 d4 02 c0 43 	mov    BYTE PTR ds:0xc002d478,0x43
c00116da:	c1 eb 08             	shr    ebx,0x8
c00116dd:	a3 74 d4 02 c0       	mov    ds:0xc002d474,eax
c00116e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116e5:	c7 05 6c d4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d46c,0x8
c00116ef:	e8 27 e1 ff ff       	call   c000f81b <malloc>
c00116f4:	83 c4 0c             	add    esp,0xc
c00116f7:	89 c1                	mov    ecx,eax
c00116f9:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c00116fe:	31 d2                	xor    edx,edx
c0011700:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0011705:	f7 35 6c d4 02 c0    	div    DWORD PTR ds:0xc002d46c
c001170b:	c1 e8 05             	shr    eax,0x5
c001170e:	50                   	push   eax
c001170f:	6a 00                	push   0x0
c0011711:	51                   	push   ecx
c0011712:	e8 39 f0 fe ff       	call   c0000750 <memset>
c0011717:	83 c4 18             	add    esp,0x18
c001171a:	5b                   	pop    ebx
c001171b:	c3                   	ret    

c001171c <VAS::VAS()>:
c001171c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011720:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001172b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011736:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c001173b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011747:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001174a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011755:	90                   	nop
c0011756:	c3                   	ret    
c0011757:	90                   	nop

c0011758 <VAS::VAS(VAS*)>:
c0011758:	83 ec 0c             	sub    esp,0xc
c001175b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011771:	83 ec 0c             	sub    esp,0xc
c0011774:	68 f4 a9 02 c0       	push   0xc002a9f4
c0011779:	e8 a7 8a 00 00       	call   c001a225 <Krnl::panic(char const*)>
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	90                   	nop
c0011782:	83 c4 0c             	add    esp,0xc
c0011785:	c3                   	ret    

c0011786 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001178a:	89 c2                	mov    edx,eax
c001178c:	c1 e8 0a             	shr    eax,0xa
c001178f:	c1 ea 16             	shr    edx,0x16
c0011792:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011797:	19 c9                	sbb    ecx,ecx
c0011799:	c1 e2 0c             	shl    edx,0xc
c001179c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00117a2:	25 fc 0f 00 00       	and    eax,0xffc
c00117a7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00117ae:	01 d0                	add    eax,edx
c00117b0:	c3                   	ret    
c00117b1:	90                   	nop

c00117b2 <VAS::getPageTableEntry(unsigned long)>:
c00117b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117b6:	89 ca                	mov    edx,ecx
c00117b8:	c1 e9 0a             	shr    ecx,0xa
c00117bb:	c1 ea 16             	shr    edx,0x16
c00117be:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00117c4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00117ca:	c1 e0 0c             	shl    eax,0xc
c00117cd:	8d 04 08             	lea    eax,[eax+ecx*1]
c00117d0:	c3                   	ret    

c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00117d1:	57                   	push   edi
c00117d2:	56                   	push   esi
c00117d3:	be 01 00 00 00       	mov    esi,0x1
c00117d8:	53                   	push   ebx
c00117d9:	83 ec 10             	sub    esp,0x10
c00117dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117e0:	c1 eb 0c             	shr    ebx,0xc
c00117e3:	eb 3f                	jmp    c0011824 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00117e5:	83 ec 08             	sub    esp,0x8
c00117e8:	57                   	push   edi
c00117e9:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c00117ef:	e8 be ff ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117fd:	f6 c4 04             	test   ah,0x4
c0011800:	75 5f                	jne    c0011861 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011802:	80 fa 04             	cmp    dl,0x4
c0011805:	74 78                	je     c001187f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011807:	80 fa 02             	cmp    dl,0x2
c001180a:	0f 84 88 00 00 00    	je     c0011898 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011810:	80 fa 03             	cmp    dl,0x3
c0011813:	0f 84 ad 00 00 00    	je     c00118c6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011819:	fe ca                	dec    dl
c001181b:	0f 84 92 00 00 00    	je     c00118b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011821:	43                   	inc    ebx
c0011822:	31 f6                	xor    esi,esi
c0011824:	53                   	push   ebx
c0011825:	89 df                	mov    edi,ebx
c0011827:	e8 51 fc ff ff       	call   c001147d <Virt::getPageState(unsigned long)>
c001182c:	c1 e7 0c             	shl    edi,0xc
c001182f:	59                   	pop    ecx
c0011830:	84 c0                	test   al,al
c0011832:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011836:	75 ad                	jne    c00117e5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011838:	83 ec 0c             	sub    esp,0xc
c001183b:	68 e2 ab 02 c0       	push   0xc002abe2
c0011840:	e8 e0 89 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0011845:	58                   	pop    eax
c0011846:	5a                   	pop    edx
c0011847:	57                   	push   edi
c0011848:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c001184e:	e8 5f ff ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c0011853:	83 c4 10             	add    esp,0x10
c0011856:	8b 00                	mov    eax,DWORD PTR [eax]
c0011858:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001185c:	f6 c4 04             	test   ah,0x4
c001185f:	74 c0                	je     c0011821 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011861:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011865:	25 00 f0 ff ff       	and    eax,0xfffff000
c001186a:	83 ec 0c             	sub    esp,0xc
c001186d:	50                   	push   eax
c001186e:	e8 33 e3 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c0011873:	83 c4 10             	add    esp,0x10
c0011876:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001187a:	80 fa 04             	cmp    dl,0x4
c001187d:	75 88                	jne    c0011807 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001187f:	89 f0                	mov    eax,esi
c0011881:	84 c0                	test   al,al
c0011883:	75 47                	jne    c00118cc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011885:	c7 44 24 20 18 aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aa18
c001188d:	83 c4 10             	add    esp,0x10
c0011890:	5b                   	pop    ebx
c0011891:	5e                   	pop    esi
c0011892:	5f                   	pop    edi
c0011893:	e9 8d 89 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c0011898:	89 f0                	mov    eax,esi
c001189a:	84 c0                	test   al,al
c001189c:	75 15                	jne    c00118b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	68 fe ab 02 c0       	push   0xc002abfe
c00118a6:	e8 7a 89 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	e9 6e ff ff ff       	jmp    c0011821 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118b3:	83 ec 08             	sub    esp,0x8
c00118b6:	6a 00                	push   0x0
c00118b8:	53                   	push   ebx
c00118b9:	e8 8a fb ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118be:	83 c4 10             	add    esp,0x10
c00118c1:	e9 5b ff ff ff       	jmp    c0011821 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118c6:	89 f0                	mov    eax,esi
c00118c8:	84 c0                	test   al,al
c00118ca:	75 15                	jne    c00118e1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00118cc:	83 ec 08             	sub    esp,0x8
c00118cf:	6a 00                	push   0x0
c00118d1:	53                   	push   ebx
c00118d2:	e8 71 fb ff ff       	call   c0011448 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118d7:	83 c4 10             	add    esp,0x10
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	5b                   	pop    ebx
c00118de:	5e                   	pop    esi
c00118df:	5f                   	pop    edi
c00118e0:	c3                   	ret    
c00118e1:	c7 44 24 20 1a ac 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ac1a
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	5b                   	pop    ebx
c00118ed:	5e                   	pop    esi
c00118ee:	5f                   	pop    edi
c00118ef:	e9 31 89 00 00       	jmp    c001a225 <Krnl::panic(char const*)>

c00118f4 <VAS::freeAllocatedPages(unsigned long)>:
c00118f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118fc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011900:	74 09                	je     c001190b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011902:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011906:	e9 c6 fe ff ff       	jmp    c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001190b:	c7 44 24 04 3c aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa3c
c0011913:	e9 64 0f 00 00       	jmp    c001287c <Dbg::kprintf(char const*, ...)>

c0011918 <VAS::virtualToPhysical(unsigned long)>:
c0011918:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001191c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011920:	e8 8d fe ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c0011925:	5a                   	pop    edx
c0011926:	8b 00                	mov    eax,DWORD PTR [eax]
c0011928:	59                   	pop    ecx
c0011929:	25 00 f0 ff ff       	and    eax,0xfffff000
c001192e:	c3                   	ret    
c001192f:	90                   	nop

c0011930 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011930:	55                   	push   ebp
c0011931:	57                   	push   edi
c0011932:	56                   	push   esi
c0011933:	53                   	push   ebx
c0011934:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011938:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001193c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011940:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011944:	85 db                	test   ebx,ebx
c0011946:	7e 22                	jle    c001196a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011948:	c1 e3 0c             	shl    ebx,0xc
c001194b:	01 f3                	add    ebx,esi
c001194d:	56                   	push   esi
c001194e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011954:	55                   	push   ebp
c0011955:	e8 58 fe ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c001195a:	5a                   	pop    edx
c001195b:	59                   	pop    ecx
c001195c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001195e:	21 f9                	and    ecx,edi
c0011960:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011964:	39 f3                	cmp    ebx,esi
c0011966:	89 08                	mov    DWORD PTR [eax],ecx
c0011968:	75 e3                	jne    c001194d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001196a:	5b                   	pop    ebx
c001196b:	5e                   	pop    esi
c001196c:	5f                   	pop    edi
c001196d:	5d                   	pop    ebp
c001196e:	c3                   	ret    
c001196f:	90                   	nop

c0011970 <VAS::setToWriteCombining(unsigned long, int)>:
c0011970:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011975:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001197b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011982:	75 01                	jne    c0011985 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011984:	c3                   	ret    
c0011985:	68 80 00 00 00       	push   0x80
c001198a:	6a ff                	push   0xffffffff
c001198c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011990:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011994:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011998:	e8 93 ff ff ff       	call   c0011930 <VAS::reflagRange(unsigned long, int, int, int)>
c001199d:	83 c4 14             	add    esp,0x14
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00119a2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00119ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00119b5:	19 c0                	sbb    eax,eax
c00119b7:	83 ca 03             	or     edx,0x3
c00119ba:	83 e0 fc             	and    eax,0xfffffffc
c00119bd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00119c4:	0f 20 d8             	mov    eax,cr3
c00119c7:	0f 22 d8             	mov    cr3,eax
c00119ca:	c3                   	ret    
c00119cb:	90                   	nop

c00119cc <VAS::~VAS()>:
c00119cc:	83 ec 2c             	sub    esp,0x2c
c00119cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00119d7:	fa                   	cli    
c00119d8:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00119dd:	40                   	inc    eax
c00119de:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00119e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00119ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119ed:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00119f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119f7:	6a 01                	push   0x1
c00119f9:	50                   	push   eax
c00119fa:	e8 a3 ff ff ff       	call   c00119a2 <VAS::mapOtherVASIn(bool, VAS*)>
c00119ff:	83 c4 0c             	add    esp,0xc
c0011a02:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011a0a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011a12:	0f 8f d4 00 00 00    	jg     c0011aec <VAS::~VAS()+0x120>
c0011a18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011a23:	c1 e2 02             	shl    edx,0x2
c0011a26:	01 d0                	add    eax,edx
c0011a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a32:	83 e0 01             	and    eax,0x1
c0011a35:	0f 84 a8 00 00 00    	je     c0011ae3 <VAS::~VAS()+0x117>
c0011a3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a43:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011a4b:	7f 72                	jg     c0011abf <VAS::~VAS()+0xf3>
c0011a4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a51:	c1 e0 0a             	shl    eax,0xa
c0011a54:	89 c2                	mov    edx,eax
c0011a56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a5a:	01 d0                	add    eax,edx
c0011a5c:	c1 e0 0c             	shl    eax,0xc
c0011a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a63:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a6d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011a77:	6a 01                	push   0x1
c0011a79:	50                   	push   eax
c0011a7a:	e8 07 fd ff ff       	call   c0011786 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011a7f:	83 c4 0c             	add    esp,0xc
c0011a82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a94:	25 01 04 00 00       	and    eax,0x401
c0011a99:	3d 01 04 00 00       	cmp    eax,0x401
c0011a9e:	75 19                	jne    c0011ab9 <VAS::~VAS()+0xed>
c0011aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aa9:	83 ec 0c             	sub    esp,0xc
c0011aac:	50                   	push   eax
c0011aad:	e8 f4 e0 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ab9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011abd:	eb 84                	jmp    c0011a43 <VAS::~VAS()+0x77>
c0011abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ac3:	25 00 04 00 00       	and    eax,0x400
c0011ac8:	74 19                	je     c0011ae3 <VAS::~VAS()+0x117>
c0011aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ace:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ad3:	83 ec 0c             	sub    esp,0xc
c0011ad6:	50                   	push   eax
c0011ad7:	e8 ca e0 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c0011adc:	83 c4 10             	add    esp,0x10
c0011adf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ae3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ae7:	e9 1e ff ff ff       	jmp    c0011a0a <VAS::~VAS()+0x3e>
c0011aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011af0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011af3:	83 ec 0c             	sub    esp,0xc
c0011af6:	50                   	push   eax
c0011af7:	e8 d5 fc ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011b06:	83 ec 0c             	sub    esp,0xc
c0011b09:	50                   	push   eax
c0011b0a:	e8 97 e0 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c0011b0f:	83 c4 10             	add    esp,0x10
c0011b12:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011b16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b1a:	c1 e0 02             	shl    eax,0x2
c0011b1d:	83 ec 08             	sub    esp,0x8
c0011b20:	50                   	push   eax
c0011b21:	68 60 aa 02 c0       	push   0xc002aa60
c0011b26:	e8 51 0d 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0011b33:	48                   	dec    eax
c0011b34:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0011b39:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0011b3e:	85 c0                	test   eax,eax
c0011b40:	75 01                	jne    c0011b43 <VAS::~VAS()+0x177>
c0011b42:	fb                   	sti    
c0011b43:	90                   	nop
c0011b44:	83 c4 2c             	add    esp,0x2c
c0011b47:	c3                   	ret    

c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011b48:	55                   	push   ebp
c0011b49:	57                   	push   edi
c0011b4a:	56                   	push   esi
c0011b4b:	53                   	push   ebx
c0011b4c:	83 ec 1c             	sub    esp,0x1c
c0011b4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b57:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011b5d:	77 08                	ja     c0011b67 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011b5f:	0f 20 d8             	mov    eax,cr3
c0011b62:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011b65:	75 47                	jne    c0011bae <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b6b:	09 d8                	or     eax,ebx
c0011b6d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b72:	75 57                	jne    c0011bcb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011b74:	89 de                	mov    esi,ebx
c0011b76:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b79:	c1 ee 16             	shr    esi,0x16
c0011b7c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011b83:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011b87:	74 54                	je     c0011bdd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011b89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b8d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011b93:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011b97:	c1 e6 0c             	shl    esi,0xc
c0011b9a:	c1 eb 0a             	shr    ebx,0xa
c0011b9d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ba3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ba6:	83 c4 1c             	add    esp,0x1c
c0011ba9:	5b                   	pop    ebx
c0011baa:	5e                   	pop    esi
c0011bab:	5f                   	pop    edi
c0011bac:	5d                   	pop    ebp
c0011bad:	c3                   	ret    
c0011bae:	83 ec 0c             	sub    esp,0xc
c0011bb1:	68 80 aa 02 c0       	push   0xc002aa80
c0011bb6:	e8 c1 0c 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0011bbb:	83 c4 10             	add    esp,0x10
c0011bbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc2:	09 d8                	or     eax,ebx
c0011bc4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011bc9:	74 a9                	je     c0011b74 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011bcb:	83 ec 0c             	sub    esp,0xc
c0011bce:	68 e8 aa 02 c0       	push   0xc002aae8
c0011bd3:	e8 4d 86 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0011bd8:	83 c4 10             	add    esp,0x10
c0011bdb:	eb 97                	jmp    c0011b74 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011bdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011be1:	e8 31 e0 ff ff       	call   c000fc17 <Phys::allocatePage()>
c0011be6:	83 ec 0c             	sub    esp,0xc
c0011be9:	89 c5                	mov    ebp,eax
c0011beb:	8b 0d 30 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e630
c0011bf1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011bf5:	6a 01                	push   0x1
c0011bf7:	e8 a5 f8 ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0011bfc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011c03:	6a 01                	push   0x1
c0011c05:	50                   	push   eax
c0011c06:	55                   	push   ebp
c0011c07:	81 cd 07 04 00 00    	or     ebp,0x407
c0011c0d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011c11:	51                   	push   ecx
c0011c12:	e8 27 02 00 00       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c17:	83 c4 1c             	add    esp,0x1c
c0011c1a:	68 00 10 00 00       	push   0x1000
c0011c1f:	6a 00                	push   0x0
c0011c21:	50                   	push   eax
c0011c22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c26:	e8 25 eb fe ff       	call   c0000750 <memset>
c0011c2b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011c32:	e8 9a fb ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c3b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011c44:	e9 40 ff ff ff       	jmp    c0011b89 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011c49:	90                   	nop

c0011c4a <VAS::allocatePages(int, int)>:
c0011c4a:	55                   	push   ebp
c0011c4b:	57                   	push   edi
c0011c4c:	56                   	push   esi
c0011c4d:	53                   	push   ebx
c0011c4e:	83 ec 1c             	sub    esp,0x1c
c0011c51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c55:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011c5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c60:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c66:	83 e0 01             	and    eax,0x1
c0011c69:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011c6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c71:	0f 85 cc 00 00 00    	jne    c0011d43 <VAS::allocatePages(int, int)+0xf9>
c0011c77:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c7e:	85 c0                	test   eax,eax
c0011c80:	0f 84 a1 00 00 00    	je     c0011d27 <VAS::allocatePages(int, int)+0xdd>
c0011c86:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011c8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c8e:	c1 e6 0c             	shl    esi,0xc
c0011c91:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011c95:	85 c0                	test   eax,eax
c0011c97:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011c9a:	7e 33                	jle    c0011ccf <VAS::allocatePages(int, int)+0x85>
c0011c9c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ca0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ca4:	81 cd 00 04 00 00    	or     ebp,0x400
c0011caa:	e8 68 df ff ff       	call   c000fc17 <Phys::allocatePage()>
c0011caf:	55                   	push   ebp
c0011cb0:	53                   	push   ebx
c0011cb1:	50                   	push   eax
c0011cb2:	57                   	push   edi
c0011cb3:	e8 90 fe ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc0:	74 03                	je     c0011cc5 <VAS::allocatePages(int, int)+0x7b>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 de                	cmp    esi,ebx
c0011ccd:	75 db                	jne    c0011caa <VAS::allocatePages(int, int)+0x60>
c0011ccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd4:	75 12                	jne    c0011ce8 <VAS::allocatePages(int, int)+0x9e>
c0011cd6:	0f 20 d8             	mov    eax,cr3
c0011cd9:	0f 22 d8             	mov    cr3,eax
c0011cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce0:	83 c4 1c             	add    esp,0x1c
c0011ce3:	5b                   	pop    ebx
c0011ce4:	5e                   	pop    esi
c0011ce5:	5f                   	pop    edi
c0011ce6:	5d                   	pop    ebp
c0011ce7:	c3                   	ret    
c0011ce8:	c1 ee 0a             	shr    esi,0xa
c0011ceb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011cef:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011cf5:	c1 eb 0a             	shr    ebx,0xa
c0011cf8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011cfe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d04:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d0a:	39 c3                	cmp    ebx,eax
c0011d0c:	77 ce                	ja     c0011cdc <VAS::allocatePages(int, int)+0x92>
c0011d0e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d11:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d17:	39 d8                	cmp    eax,ebx
c0011d19:	73 f3                	jae    c0011d0e <VAS::allocatePages(int, int)+0xc4>
c0011d1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1f:	83 c4 1c             	add    esp,0x1c
c0011d22:	5b                   	pop    ebx
c0011d23:	5e                   	pop    esi
c0011d24:	5f                   	pop    edi
c0011d25:	5d                   	pop    ebp
c0011d26:	c3                   	ret    
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	68 0c ab 02 c0       	push   0xc002ab0c
c0011d2f:	e8 f1 84 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0011d34:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	e9 43 ff ff ff       	jmp    c0011c86 <VAS::allocatePages(int, int)+0x3c>
c0011d43:	83 ec 0c             	sub    esp,0xc
c0011d46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d4a:	e8 52 f7 ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0011d4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d53:	83 c4 10             	add    esp,0x10
c0011d56:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011d5b:	0f 87 9b 00 00 00    	ja     c0011dfc <VAS::allocatePages(int, int)+0x1b2>
c0011d61:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d65:	85 d2                	test   edx,edx
c0011d67:	7e 3c                	jle    c0011da5 <VAS::allocatePages(int, int)+0x15b>
c0011d69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011d71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011d75:	c1 e5 0c             	shl    ebp,0xc
c0011d78:	81 ce 00 04 00 00    	or     esi,0x400
c0011d7e:	01 dd                	add    ebp,ebx
c0011d80:	e8 92 de ff ff       	call   c000fc17 <Phys::allocatePage()>
c0011d85:	56                   	push   esi
c0011d86:	53                   	push   ebx
c0011d87:	50                   	push   eax
c0011d88:	57                   	push   edi
c0011d89:	e8 ba fd ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d96:	74 03                	je     c0011d9b <VAS::allocatePages(int, int)+0x151>
c0011d98:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011da1:	39 dd                	cmp    ebp,ebx
c0011da3:	75 db                	jne    c0011d80 <VAS::allocatePages(int, int)+0x136>
c0011da5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011daa:	0f 84 26 ff ff ff    	je     c0011cd6 <VAS::allocatePages(int, int)+0x8c>
c0011db0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011db4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db8:	89 d3                	mov    ebx,edx
c0011dba:	c1 e0 0c             	shl    eax,0xc
c0011dbd:	c1 eb 0a             	shr    ebx,0xa
c0011dc0:	01 d0                	add    eax,edx
c0011dc2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dc8:	c1 e8 0a             	shr    eax,0xa
c0011dcb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011dd1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dd6:	2d 00 00 40 00       	sub    eax,0x400000
c0011ddb:	39 c3                	cmp    ebx,eax
c0011ddd:	0f 87 f9 fe ff ff    	ja     c0011cdc <VAS::allocatePages(int, int)+0x92>
c0011de3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011de6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dec:	39 d8                	cmp    eax,ebx
c0011dee:	73 f3                	jae    c0011de3 <VAS::allocatePages(int, int)+0x199>
c0011df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011df4:	83 c4 1c             	add    esp,0x1c
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	5d                   	pop    ebp
c0011dfb:	c3                   	ret    
c0011dfc:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011e01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e07:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011e0e:	0f 84 4d ff ff ff    	je     c0011d61 <VAS::allocatePages(int, int)+0x117>
c0011e14:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011e1c:	e9 40 ff ff ff       	jmp    c0011d61 <VAS::allocatePages(int, int)+0x117>
c0011e21:	90                   	nop

c0011e22 <VAS::setCPUSpecific(unsigned long)>:
c0011e22:	83 ec 0c             	sub    esp,0xc
c0011e25:	6a 05                	push   0x5
c0011e27:	68 00 00 40 c2       	push   0xc2400000
c0011e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e34:	e8 0f fd ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e39:	83 c4 1c             	add    esp,0x1c
c0011e3c:	c3                   	ret    
c0011e3d:	90                   	nop

c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011e3e:	55                   	push   ebp
c0011e3f:	57                   	push   edi
c0011e40:	56                   	push   esi
c0011e41:	53                   	push   ebx
c0011e42:	83 ec 1c             	sub    esp,0x1c
c0011e45:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011e4a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e54:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011e58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e5e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011e62:	83 e0 01             	and    eax,0x1
c0011e65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e6d:	85 c0                	test   eax,eax
c0011e6f:	7e 39                	jle    c0011eaa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011e71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e75:	89 f3                	mov    ebx,esi
c0011e77:	c1 e0 0c             	shl    eax,0xc
c0011e7a:	01 f0                	add    eax,esi
c0011e7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e80:	55                   	push   ebp
c0011e81:	53                   	push   ebx
c0011e82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e86:	29 f0                	sub    eax,esi
c0011e88:	01 d8                	add    eax,ebx
c0011e8a:	50                   	push   eax
c0011e8b:	57                   	push   edi
c0011e8c:	e8 b7 fc ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e99:	74 03                	je     c0011e9e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011e9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ea4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ea8:	75 d6                	jne    c0011e80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011eaa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eaf:	75 10                	jne    c0011ec1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011eb1:	0f 20 d8             	mov    eax,cr3
c0011eb4:	0f 22 d8             	mov    cr3,eax
c0011eb7:	83 c4 1c             	add    esp,0x1c
c0011eba:	89 f0                	mov    eax,esi
c0011ebc:	5b                   	pop    ebx
c0011ebd:	5e                   	pop    esi
c0011ebe:	5f                   	pop    edi
c0011ebf:	5d                   	pop    ebp
c0011ec0:	c3                   	ret    
c0011ec1:	89 f3                	mov    ebx,esi
c0011ec3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ec7:	c1 eb 0a             	shr    ebx,0xa
c0011eca:	c1 e0 0c             	shl    eax,0xc
c0011ecd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ed3:	01 f0                	add    eax,esi
c0011ed5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011edb:	c1 e8 0a             	shr    eax,0xa
c0011ede:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ee3:	2d 00 00 40 00       	sub    eax,0x400000
c0011ee8:	39 c3                	cmp    ebx,eax
c0011eea:	77 cb                	ja     c0011eb7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011eec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011eef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ef5:	39 d8                	cmp    eax,ebx
c0011ef7:	73 f3                	jae    c0011eec <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011ef9:	83 c4 1c             	add    esp,0x1c
c0011efc:	89 f0                	mov    eax,esi
c0011efe:	5b                   	pop    ebx
c0011eff:	5e                   	pop    esi
c0011f00:	5f                   	pop    edi
c0011f01:	5d                   	pop    ebp
c0011f02:	c3                   	ret    
c0011f03:	90                   	nop

c0011f04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011f04:	55                   	push   ebp
c0011f05:	57                   	push   edi
c0011f06:	56                   	push   esi
c0011f07:	53                   	push   ebx
c0011f08:	83 ec 1c             	sub    esp,0x1c
c0011f0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f13:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011f17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011f1b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f20:	75 4a                	jne    c0011f6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011f22:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011f26:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f29:	c1 eb 16             	shr    ebx,0x16
c0011f2c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011f33:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011f37:	74 4d                	je     c0011f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011f39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f3d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011f41:	c1 e8 0a             	shr    eax,0xa
c0011f44:	80 fa 01             	cmp    dl,0x1
c0011f47:	19 d2                	sbb    edx,edx
c0011f49:	c1 e3 0c             	shl    ebx,0xc
c0011f4c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f50:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f56:	25 fc 0f 00 00       	and    eax,0xffc
c0011f5b:	01 d8                	add    eax,ebx
c0011f5d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011f64:	83 c4 1c             	add    esp,0x1c
c0011f67:	5b                   	pop    ebx
c0011f68:	5e                   	pop    esi
c0011f69:	5f                   	pop    edi
c0011f6a:	5d                   	pop    ebp
c0011f6b:	c3                   	ret    
c0011f6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	68 38 ab 02 c0       	push   0xc002ab38
c0011f78:	e8 a8 82 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f84:	eb 9c                	jmp    c0011f22 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f8a:	e8 88 dc ff ff       	call   c000fc17 <Phys::allocatePage()>
c0011f8f:	83 ec 0c             	sub    esp,0xc
c0011f92:	89 c5                	mov    ebp,eax
c0011f94:	8b 0d 30 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e630
c0011f9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f9e:	6a 01                	push   0x1
c0011fa0:	e8 fc f4 ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0011fa5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011fac:	6a 01                	push   0x1
c0011fae:	50                   	push   eax
c0011faf:	55                   	push   ebp
c0011fb0:	81 cd 07 04 00 00    	or     ebp,0x407
c0011fb6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011fba:	51                   	push   ecx
c0011fbb:	e8 7e fe ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fc0:	83 c4 1c             	add    esp,0x1c
c0011fc3:	68 00 10 00 00       	push   0x1000
c0011fc8:	6a 00                	push   0x0
c0011fca:	50                   	push   eax
c0011fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fcf:	e8 7c e7 fe ff       	call   c0000750 <memset>
c0011fd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fd8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011fdb:	e8 f1 f7 ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fe0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011fe9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fed:	e9 47 ff ff ff       	jmp    c0011f39 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011ff2 <VAS::VAS(bool)>:
c0011ff2:	53                   	push   ebx
c0011ff3:	83 ec 28             	sub    esp,0x28
c0011ff6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ffa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011ffe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012002:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012014:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012018:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001201c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001201f:	e8 f3 db ff ff       	call   c000fc17 <Phys::allocatePage()>
c0012024:	89 c2                	mov    edx,eax
c0012026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001202d:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	6a 01                	push   0x1
c0012038:	e8 64 f4 ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	89 c2                	mov    edx,eax
c0012042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012046:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	6a 03                	push   0x3
c001204e:	6a 01                	push   0x1
c0012050:	52                   	push   edx
c0012051:	50                   	push   eax
c0012052:	53                   	push   ebx
c0012053:	e8 e6 fd ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012058:	83 c4 20             	add    esp,0x20
c001205b:	89 c2                	mov    edx,eax
c001205d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012061:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012064:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001206c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012074:	7f 1c                	jg     c0012092 <VAS::VAS(bool)+0xa0>
c0012076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001207a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001207d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012081:	c1 e2 02             	shl    edx,0x2
c0012084:	01 d0                	add    eax,edx
c0012086:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001208c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012090:	eb da                	jmp    c001206c <VAS::VAS(bool)+0x7a>
c0012092:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001209a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00120a2:	7f 7a                	jg     c001211e <VAS::VAS(bool)+0x12c>
c00120a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a8:	2d 00 02 00 00       	sub    eax,0x200
c00120ad:	c1 e0 0c             	shl    eax,0xc
c00120b0:	83 c8 03             	or     eax,0x3
c00120b3:	89 c2                	mov    edx,eax
c00120b5:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00120ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120c0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120c6:	83 e0 10             	and    eax,0x10
c00120c9:	84 c0                	test   al,al
c00120cb:	74 07                	je     c00120d4 <VAS::VAS(bool)+0xe2>
c00120cd:	b8 00 01 00 00       	mov    eax,0x100
c00120d2:	eb 05                	jmp    c00120d9 <VAS::VAS(bool)+0xe7>
c00120d4:	b8 00 00 00 00       	mov    eax,0x0
c00120d9:	09 d0                	or     eax,edx
c00120db:	89 c1                	mov    ecx,eax
c00120dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e8:	c1 e2 02             	shl    edx,0x2
c00120eb:	01 d0                	add    eax,edx
c00120ed:	89 ca                	mov    edx,ecx
c00120ef:	89 10                	mov    DWORD PTR [eax],edx
c00120f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120f5:	2d 40 03 00 00       	sub    eax,0x340
c00120fa:	83 f8 7f             	cmp    eax,0x7f
c00120fd:	77 16                	ja     c0012115 <VAS::VAS(bool)+0x123>
c00120ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012103:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012106:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001210a:	c1 e2 02             	shl    edx,0x2
c001210d:	01 d0                	add    eax,edx
c001210f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012115:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012119:	e9 7c ff ff ff       	jmp    c001209a <VAS::VAS(bool)+0xa8>
c001211e:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012123:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012129:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001212f:	83 e0 10             	and    eax,0x10
c0012132:	84 c0                	test   al,al
c0012134:	74 07                	je     c001213d <VAS::VAS(bool)+0x14b>
c0012136:	b8 03 41 00 00       	mov    eax,0x4103
c001213b:	eb 05                	jmp    c0012142 <VAS::VAS(bool)+0x150>
c001213d:	b8 03 40 00 00       	mov    eax,0x4003
c0012142:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012146:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012149:	81 c2 20 0c 00 00    	add    edx,0xc20
c001214f:	89 02                	mov    DWORD PTR [edx],eax
c0012151:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012156:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001215c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012162:	83 ec 08             	sub    esp,0x8
c0012165:	50                   	push   eax
c0012166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001216a:	e8 b3 fc ff ff       	call   c0011e22 <VAS::setCPUSpecific(unsigned long)>
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012176:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012179:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001217e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012184:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001218a:	83 e0 10             	and    eax,0x10
c001218d:	84 c0                	test   al,al
c001218f:	74 07                	je     c0012198 <VAS::VAS(bool)+0x1a6>
c0012191:	b8 00 01 00 00       	mov    eax,0x100
c0012196:	eb 05                	jmp    c001219d <VAS::VAS(bool)+0x1ab>
c0012198:	b8 00 00 00 00       	mov    eax,0x0
c001219d:	09 c2                	or     edx,eax
c001219f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121a6:	05 fc 0f 00 00       	add    eax,0xffc
c00121ab:	83 ca 03             	or     edx,0x3
c00121ae:	89 10                	mov    DWORD PTR [eax],edx
c00121b0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00121b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bb:	83 ec 0c             	sub    esp,0xc
c00121be:	50                   	push   eax
c00121bf:	e8 fc 1d 00 00       	call   c0013fc0 <Device::getName()>
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	83 ec 08             	sub    esp,0x8
c00121ca:	68 34 ac 02 c0       	push   0xc002ac34
c00121cf:	50                   	push   eax
c00121d0:	e8 c3 e6 fe ff       	call   c0000898 <strcmp>
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	85 c0                	test   eax,eax
c00121da:	0f 94 c0             	sete   al
c00121dd:	84 c0                	test   al,al
c00121df:	0f 84 87 00 00 00    	je     c001226c <VAS::VAS(bool)+0x27a>
c00121e5:	fa                   	cli    
c00121e6:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00121eb:	40                   	inc    eax
c00121ec:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00121f1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00121f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121fc:	05 7c 09 00 00       	add    eax,0x97c
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	50                   	push   eax
c0012205:	e8 00 d1 ff ff       	call   c000f30a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012212:	89 c3                	mov    ebx,eax
c0012214:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0012219:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001221f:	05 7c 09 00 00       	add    eax,0x97c
c0012224:	83 ec 0c             	sub    esp,0xc
c0012227:	50                   	push   eax
c0012228:	e8 dd d0 ff ff       	call   c000f30a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001222d:	83 c4 10             	add    esp,0x10
c0012230:	83 ec 08             	sub    esp,0x8
c0012233:	50                   	push   eax
c0012234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012238:	e8 75 f5 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	8b 00                	mov    eax,DWORD PTR [eax]
c0012242:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012247:	6a 11                	push   0x11
c0012249:	53                   	push   ebx
c001224a:	50                   	push   eax
c001224b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001224f:	e8 f4 f8 ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001225c:	48                   	dec    eax
c001225d:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0012262:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0012267:	85 c0                	test   eax,eax
c0012269:	75 01                	jne    c001226c <VAS::VAS(bool)+0x27a>
c001226b:	fb                   	sti    
c001226c:	90                   	nop
c001226d:	83 c4 28             	add    esp,0x28
c0012270:	5b                   	pop    ebx
c0012271:	c3                   	ret    

c0012272 <VAS::evict(unsigned long)>:
c0012272:	55                   	push   ebp
c0012273:	57                   	push   edi
c0012274:	56                   	push   esi
c0012275:	53                   	push   ebx
c0012276:	83 ec 28             	sub    esp,0x28
c0012279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001227d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012285:	68 42 ac 02 c0       	push   0xc002ac42
c001228a:	e8 ed 05 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001228f:	e8 4e f3 ff ff       	call   c00115e2 <Virt::allocateSwapfilePage()>
c0012294:	5a                   	pop    edx
c0012295:	89 c7                	mov    edi,eax
c0012297:	59                   	pop    ecx
c0012298:	50                   	push   eax
c0012299:	68 5f ac 02 c0       	push   0xc002ac5f
c001229e:	e8 d9 05 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00122a3:	83 c4 10             	add    esp,0x10
c00122a6:	8b 1d 6c d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d46c
c00122ac:	85 db                	test   ebx,ebx
c00122ae:	7e 3d                	jle    c00122ed <VAS::evict(unsigned long)+0x7b>
c00122b0:	89 ee                	mov    esi,ebp
c00122b2:	31 db                	xor    ebx,ebx
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	57                   	push   edi
c00122b8:	e8 13 f3 ff ff       	call   c00115d0 <Virt::swapIDToSector(unsigned long)>
c00122bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00122c0:	01 d8                	add    eax,ebx
c00122c2:	6a 01                	push   0x1
c00122c4:	31 d2                	xor    edx,edx
c00122c6:	43                   	inc    ebx
c00122c7:	52                   	push   edx
c00122c8:	81 c6 00 02 00 00    	add    esi,0x200
c00122ce:	50                   	push   eax
c00122cf:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c00122d6:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c00122dd:	e8 6c 3f 00 00       	call   c001624e <LogicalDisk::write(unsigned long long, int, void*)>
c00122e2:	83 c4 20             	add    esp,0x20
c00122e5:	39 1d 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,ebx
c00122eb:	7f c7                	jg     c00122b4 <VAS::evict(unsigned long)+0x42>
c00122ed:	83 ec 08             	sub    esp,0x8
c00122f0:	c1 e7 0b             	shl    edi,0xb
c00122f3:	55                   	push   ebp
c00122f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122f8:	e8 b5 f4 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c00122fd:	5a                   	pop    edx
c00122fe:	89 c6                	mov    esi,eax
c0012300:	59                   	pop    ecx
c0012301:	ff 30                	push   DWORD PTR [eax]
c0012303:	68 6f ac 02 c0       	push   0xc002ac6f
c0012308:	e8 6f 05 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001230d:	8b 16                	mov    edx,DWORD PTR [esi]
c001230f:	89 d3                	mov    ebx,edx
c0012311:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012317:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001231d:	09 d7                	or     edi,edx
c001231f:	89 3e                	mov    DWORD PTR [esi],edi
c0012321:	5e                   	pop    esi
c0012322:	58                   	pop    eax
c0012323:	57                   	push   edi
c0012324:	68 88 ac 02 c0       	push   0xc002ac88
c0012329:	e8 4e 05 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001232e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012331:	ff 05 28 e6 02 c0    	inc    DWORD PTR ds:0xc002e628
c0012337:	e8 6a d8 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c001233c:	0f 20 d8             	mov    eax,cr3
c001233f:	0f 22 d8             	mov    cr3,eax
c0012342:	ff 35 28 e6 02 c0    	push   DWORD PTR ds:0xc002e628
c0012348:	55                   	push   ebp
c0012349:	53                   	push   ebx
c001234a:	68 5c ab 02 c0       	push   0xc002ab5c
c001234f:	e8 28 05 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012354:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c0012359:	c7 44 24 50 a1 ac 02 c0 	mov    DWORD PTR [esp+0x50],0xc002aca1
c0012361:	8d 50 01             	lea    edx,[eax+0x1]
c0012364:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012368:	89 15 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,edx
c001236e:	83 c4 3c             	add    esp,0x3c
c0012371:	5b                   	pop    ebx
c0012372:	5e                   	pop    esi
c0012373:	5f                   	pop    edi
c0012374:	5d                   	pop    ebp
c0012375:	e9 02 05 00 00       	jmp    c001287c <Dbg::kprintf(char const*, ...)>

c001237a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001237a:	55                   	push   ebp
c001237b:	57                   	push   edi
c001237c:	56                   	push   esi
c001237d:	53                   	push   ebx
c001237e:	83 ec 24             	sub    esp,0x24
c0012381:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012385:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012389:	68 b2 ac 02 c0       	push   0xc002acb2
c001238e:	e8 e9 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012393:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012397:	58                   	pop    eax
c0012398:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001239e:	5a                   	pop    edx
c001239f:	57                   	push   edi
c00123a0:	53                   	push   ebx
c00123a1:	e8 0c f4 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c00123a6:	59                   	pop    ecx
c00123a7:	5e                   	pop    esi
c00123a8:	89 c6                	mov    esi,eax
c00123aa:	ff 30                	push   DWORD PTR [eax]
c00123ac:	68 c5 ac 02 c0       	push   0xc002acc5
c00123b1:	e8 c6 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00123b6:	83 c4 10             	add    esp,0x10
c00123b9:	85 ff                	test   edi,edi
c00123bb:	74 0a                	je     c00123c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00123bd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00123bf:	f7 c5 01 00 00 00    	test   ebp,0x1
c00123c5:	74 0a                	je     c00123d1 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00123c7:	83 c4 1c             	add    esp,0x1c
c00123ca:	31 c0                	xor    eax,eax
c00123cc:	5b                   	pop    ebx
c00123cd:	5e                   	pop    esi
c00123ce:	5f                   	pop    edi
c00123cf:	5d                   	pop    ebp
c00123d0:	c3                   	ret    
c00123d1:	83 ec 08             	sub    esp,0x8
c00123d4:	c1 ed 0b             	shr    ebp,0xb
c00123d7:	55                   	push   ebp
c00123d8:	68 d3 ac 02 c0       	push   0xc002acd3
c00123dd:	e8 9a 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00123e2:	e8 30 d8 ff ff       	call   c000fc17 <Phys::allocatePage()>
c00123e7:	59                   	pop    ecx
c00123e8:	5a                   	pop    edx
c00123e9:	50                   	push   eax
c00123ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ee:	68 de ac 02 c0       	push   0xc002acde
c00123f3:	e8 84 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00123f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123fc:	8b 16                	mov    edx,DWORD PTR [esi]
c00123fe:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012404:	09 d0                	or     eax,edx
c0012406:	0d 01 08 00 00       	or     eax,0x801
c001240b:	89 06                	mov    DWORD PTR [esi],eax
c001240d:	59                   	pop    ecx
c001240e:	5e                   	pop    esi
c001240f:	50                   	push   eax
c0012410:	68 f3 ac 02 c0       	push   0xc002acf3
c0012415:	e8 62 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001241a:	0f 20 d8             	mov    eax,cr3
c001241d:	83 c4 0c             	add    esp,0xc
c0012420:	53                   	push   ebx
c0012421:	50                   	push   eax
c0012422:	68 0b ad 02 c0       	push   0xc002ad0b
c0012427:	e8 50 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001242c:	c7 04 24 23 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad23
c0012433:	e8 44 04 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c0012440:	85 c0                	test   eax,eax
c0012442:	7e 3d                	jle    c0012481 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012444:	89 fe                	mov    esi,edi
c0012446:	31 db                	xor    ebx,ebx
c0012448:	83 ec 0c             	sub    esp,0xc
c001244b:	55                   	push   ebp
c001244c:	e8 7f f1 ff ff       	call   c00115d0 <Virt::swapIDToSector(unsigned long)>
c0012451:	89 34 24             	mov    DWORD PTR [esp],esi
c0012454:	01 d8                	add    eax,ebx
c0012456:	6a 01                	push   0x1
c0012458:	31 d2                	xor    edx,edx
c001245a:	43                   	inc    ebx
c001245b:	52                   	push   edx
c001245c:	81 c6 00 02 00 00    	add    esi,0x200
c0012462:	50                   	push   eax
c0012463:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c001246a:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c0012471:	e8 6c 3d 00 00       	call   c00161e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0012476:	83 c4 20             	add    esp,0x20
c0012479:	39 1d 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,ebx
c001247f:	7f c7                	jg     c0012448 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012481:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0012486:	48                   	dec    eax
c0012487:	52                   	push   edx
c0012488:	a3 28 e6 02 c0       	mov    ds:0xc002e628,eax
c001248d:	50                   	push   eax
c001248e:	57                   	push   edi
c001248f:	68 33 ad 02 c0       	push   0xc002ad33
c0012494:	e8 e3 03 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012499:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001249c:	e8 11 f1 ff ff       	call   c00115b2 <Virt::freeSwapfilePage(unsigned long)>
c00124a1:	c7 04 24 48 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad48
c00124a8:	e8 cf 03 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00124ad:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	48                   	dec    eax
c00124b6:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00124bb:	85 c0                	test   eax,eax
c00124bd:	75 01                	jne    c00124c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00124bf:	fb                   	sti    
c00124c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c4:	25 ff 0f 00 00       	and    eax,0xfff
c00124c9:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00124ce:	77 20                	ja     c00124f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00124d0:	0f 20 d8             	mov    eax,cr3
c00124d3:	0f 22 d8             	mov    cr3,eax
c00124d6:	83 ec 0c             	sub    esp,0xc
c00124d9:	68 6e ad 02 c0       	push   0xc002ad6e
c00124de:	e8 99 03 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	b0 01                	mov    al,0x1
c00124e8:	83 c4 1c             	add    esp,0x1c
c00124eb:	5b                   	pop    ebx
c00124ec:	5e                   	pop    esi
c00124ed:	5f                   	pop    edi
c00124ee:	5d                   	pop    ebp
c00124ef:	c3                   	ret    
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	68 5e ad 02 c0       	push   0xc002ad5e
c00124f8:	e8 7f 03 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00124fd:	83 c4 10             	add    esp,0x10
c0012500:	eb ce                	jmp    c00124d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012502 <VAS::scanForEviction()>:
c0012502:	55                   	push   ebp
c0012503:	31 ed                	xor    ebp,ebp
c0012505:	57                   	push   edi
c0012506:	56                   	push   esi
c0012507:	53                   	push   ebx
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001250f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012512:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012518:	75 0e                	jne    c0012528 <VAS::scanForEviction()+0x26>
c001251a:	89 da                	mov    edx,ebx
c001251c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001251f:	c1 ea 16             	shr    edx,0x16
c0012522:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012526:	74 4e                	je     c0012576 <VAS::scanForEviction()+0x74>
c0012528:	53                   	push   ebx
c0012529:	56                   	push   esi
c001252a:	e8 83 f2 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c001252f:	5f                   	pop    edi
c0012530:	8b 38                	mov    edi,DWORD PTR [eax]
c0012532:	5a                   	pop    edx
c0012533:	89 fa                	mov    edx,edi
c0012535:	81 e2 01 08 00 00    	and    edx,0x801
c001253b:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012541:	74 3e                	je     c0012581 <VAS::scanForEviction()+0x7f>
c0012543:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012549:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001254f:	76 2b                	jbe    c001257c <VAS::scanForEviction()+0x7a>
c0012551:	45                   	inc    ebp
c0012552:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012559:	83 fd 04             	cmp    ebp,0x4
c001255c:	74 35                	je     c0012593 <VAS::scanForEviction()+0x91>
c001255e:	31 db                	xor    ebx,ebx
c0012560:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012566:	75 c0                	jne    c0012528 <VAS::scanForEviction()+0x26>
c0012568:	89 da                	mov    edx,ebx
c001256a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001256d:	c1 ea 16             	shr    edx,0x16
c0012570:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012574:	75 b2                	jne    c0012528 <VAS::scanForEviction()+0x26>
c0012576:	81 c3 00 00 40 00    	add    ebx,0x400000
c001257c:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001257f:	eb 91                	jmp    c0012512 <VAS::scanForEviction()+0x10>
c0012581:	f7 c7 20 00 00 00    	test   edi,0x20
c0012587:	74 22                	je     c00125ab <VAS::scanForEviction()+0xa9>
c0012589:	83 e7 df             	and    edi,0xffffffdf
c001258c:	89 38                	mov    DWORD PTR [eax],edi
c001258e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012591:	eb b0                	jmp    c0012543 <VAS::scanForEviction()+0x41>
c0012593:	83 ec 0c             	sub    esp,0xc
c0012596:	68 8c ab 02 c0       	push   0xc002ab8c
c001259b:	e8 85 7c 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00125a0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	e9 67 ff ff ff       	jmp    c0012512 <VAS::scanForEviction()+0x10>
c00125ab:	83 ec 08             	sub    esp,0x8
c00125ae:	53                   	push   ebx
c00125af:	68 7c ad 02 c0       	push   0xc002ad7c
c00125b4:	e8 c3 02 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00125b9:	58                   	pop    eax
c00125ba:	5a                   	pop    edx
c00125bb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125be:	56                   	push   esi
c00125bf:	e8 ae fc ff ff       	call   c0012272 <VAS::evict(unsigned long)>
c00125c4:	59                   	pop    ecx
c00125c5:	5b                   	pop    ebx
c00125c6:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125c9:	68 90 ad 02 c0       	push   0xc002ad90
c00125ce:	e8 a9 02 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00125d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00125da:	89 f8                	mov    eax,edi
c00125dc:	83 c4 1c             	add    esp,0x1c
c00125df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125e4:	5b                   	pop    ebx
c00125e5:	5e                   	pop    esi
c00125e6:	5f                   	pop    edi
c00125e7:	5d                   	pop    ebp
c00125e8:	c3                   	ret    

c00125e9 <mapVASFirstTime>:
c00125e9:	55                   	push   ebp
c00125ea:	57                   	push   edi
c00125eb:	56                   	push   esi
c00125ec:	53                   	push   ebx
c00125ed:	83 ec 0c             	sub    esp,0xc
c00125f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125f5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f8:	4a                   	dec    edx
c00125f9:	0f 84 fe 00 00 00    	je     c00126fd <mapVASFirstTime+0x114>
c00125ff:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012602:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012605:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001260a:	c1 e5 15             	shl    ebp,0x15
c001260d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012612:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012618:	29 eb                	sub    ebx,ebp
c001261a:	29 ef                	sub    edi,ebp
c001261c:	83 ec 08             	sub    esp,0x8
c001261f:	53                   	push   ebx
c0012620:	68 bc ad 02 c0       	push   0xc002adbc
c0012625:	e8 52 02 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001262a:	e8 e8 d5 ff ff       	call   c000fc17 <Phys::allocatePage()>
c001262f:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012636:	6a 01                	push   0x1
c0012638:	53                   	push   ebx
c0012639:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001263f:	50                   	push   eax
c0012640:	56                   	push   esi
c0012641:	e8 f8 f7 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012646:	83 c4 20             	add    esp,0x20
c0012649:	39 fb                	cmp    ebx,edi
c001264b:	75 cf                	jne    c001261c <mapVASFirstTime+0x33>
c001264d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012652:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012657:	29 eb                	sub    ebx,ebp
c0012659:	29 ef                	sub    edi,ebp
c001265b:	83 ec 08             	sub    esp,0x8
c001265e:	53                   	push   ebx
c001265f:	68 d8 ad 02 c0       	push   0xc002add8
c0012664:	e8 13 02 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012669:	58                   	pop    eax
c001266a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001266e:	5a                   	pop    edx
c001266f:	19 c0                	sbb    eax,eax
c0012671:	83 e0 04             	and    eax,0x4
c0012674:	05 03 04 00 00       	add    eax,0x403
c0012679:	50                   	push   eax
c001267a:	68 fd ac 02 c0       	push   0xc002acfd
c001267f:	e8 f8 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012684:	e8 8e d5 ff ff       	call   c000fc17 <Phys::allocatePage()>
c0012689:	59                   	pop    ecx
c001268a:	89 c5                	mov    ebp,eax
c001268c:	58                   	pop    eax
c001268d:	55                   	push   ebp
c001268e:	68 ec ad 02 c0       	push   0xc002adec
c0012693:	e8 e4 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012698:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001269c:	19 d2                	sbb    edx,edx
c001269e:	83 e2 04             	and    edx,0x4
c00126a1:	81 c2 03 04 00 00    	add    edx,0x403
c00126a7:	89 14 24             	mov    DWORD PTR [esp],edx
c00126aa:	6a 01                	push   0x1
c00126ac:	53                   	push   ebx
c00126ad:	55                   	push   ebp
c00126ae:	56                   	push   esi
c00126af:	e8 8a f7 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126b4:	83 c4 18             	add    esp,0x18
c00126b7:	53                   	push   ebx
c00126b8:	56                   	push   esi
c00126b9:	e8 f4 f0 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c00126be:	5a                   	pop    edx
c00126bf:	59                   	pop    ecx
c00126c0:	ff 30                	push   DWORD PTR [eax]
c00126c2:	68 08 ae 02 c0       	push   0xc002ae08
c00126c7:	e8 b0 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00126cc:	0f 20 d8             	mov    eax,cr3
c00126cf:	83 c4 0c             	add    esp,0xc
c00126d2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126d8:	56                   	push   esi
c00126d9:	50                   	push   eax
c00126da:	68 0b ad 02 c0       	push   0xc002ad0b
c00126df:	e8 98 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	39 df                	cmp    edi,ebx
c00126e9:	0f 85 6c ff ff ff    	jne    c001265b <mapVASFirstTime+0x72>
c00126ef:	0f 20 d8             	mov    eax,cr3
c00126f2:	0f 22 d8             	mov    cr3,eax
c00126f5:	83 c4 0c             	add    esp,0xc
c00126f8:	5b                   	pop    ebx
c00126f9:	5e                   	pop    esi
c00126fa:	5f                   	pop    edi
c00126fb:	5d                   	pop    ebp
c00126fc:	c3                   	ret    
c00126fd:	83 ec 0c             	sub    esp,0xc
c0012700:	68 a3 ad 02 c0       	push   0xc002ada3
c0012705:	e8 72 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	83 c4 0c             	add    esp,0xc
c0012710:	5b                   	pop    ebx
c0012711:	5e                   	pop    esi
c0012712:	5f                   	pop    edi
c0012713:	5d                   	pop    ebp
c0012714:	c3                   	ret    

c0012715 <__cxa_atexit>:
c0012715:	31 c0                	xor    eax,eax
c0012717:	c3                   	ret    

c0012718 <__cxa_finalize>:
c0012718:	c3                   	ret    

c0012719 <__stack_chk_fail>:
c0012719:	55                   	push   ebp
c001271a:	89 e5                	mov    ebp,esp
c001271c:	83 ec 14             	sub    esp,0x14
c001271f:	68 13 ae 02 c0       	push   0xc002ae13
c0012724:	e8 53 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012729:	58                   	pop    eax
c001272a:	5a                   	pop    edx
c001272b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001272e:	68 63 ae 02 c0       	push   0xc002ae63
c0012733:	e8 44 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012738:	59                   	pop    ecx
c0012739:	58                   	pop    eax
c001273a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001273d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012740:	68 63 ae 02 c0       	push   0xc002ae63
c0012745:	e8 32 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001274a:	5a                   	pop    edx
c001274b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001274e:	59                   	pop    ecx
c001274f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012751:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012754:	68 63 ae 02 c0       	push   0xc002ae63
c0012759:	e8 1e 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001275e:	5a                   	pop    edx
c001275f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012762:	59                   	pop    ecx
c0012763:	8b 00                	mov    eax,DWORD PTR [eax]
c0012765:	8b 00                	mov    eax,DWORD PTR [eax]
c0012767:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001276a:	68 63 ae 02 c0       	push   0xc002ae63
c001276f:	e8 08 01 00 00       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0012774:	c7 04 24 6b ae 02 c0 	mov    DWORD PTR [esp],0xc002ae6b
c001277b:	e8 a5 7a 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	c9                   	leave  
c0012784:	c3                   	ret    

c0012785 <__cxa_pure_virtual>:
c0012785:	83 ec 18             	sub    esp,0x18
c0012788:	68 83 ae 02 c0       	push   0xc002ae83
c001278d:	e8 93 7a 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0012792:	83 c4 1c             	add    esp,0x1c
c0012795:	c3                   	ret    

c0012796 <operator new[](unsigned long)>:
c0012796:	e9 80 d0 ff ff       	jmp    c000f81b <malloc>

c001279b <operator delete(void*, unsigned long)>:
c001279b:	e9 9b d0 ff ff       	jmp    c000f83b <rfree>

c00127a0 <operator delete[](void*)>:
c00127a0:	e9 96 d0 ff ff       	jmp    c000f83b <rfree>

c00127a5 <operator delete[](void*, unsigned long)>:
c00127a5:	e9 91 d0 ff ff       	jmp    c000f83b <rfree>

c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127aa:	55                   	push   ebp
c00127ab:	b9 11 00 00 00       	mov    ecx,0x11
c00127b0:	57                   	push   edi
c00127b1:	56                   	push   esi
c00127b2:	be 76 a8 02 c0       	mov    esi,0xc002a876
c00127b7:	53                   	push   ebx
c00127b8:	83 ec 20             	sub    esp,0x20
c00127bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00127c3:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00127c7:	fc                   	cld    
c00127c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127ca:	89 ee                	mov    esi,ebp
c00127cc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00127d0:	eb 02                	jmp    c00127d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00127d2:	89 c6                	mov    esi,eax
c00127d4:	31 d2                	xor    edx,edx
c00127d6:	41                   	inc    ecx
c00127d7:	89 f0                	mov    eax,esi
c00127d9:	f7 f3                	div    ebx
c00127db:	39 de                	cmp    esi,ebx
c00127dd:	73 f3                	jae    c00127d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00127df:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00127e2:	eb 02                	jmp    c00127e6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00127e4:	89 c5                	mov    ebp,eax
c00127e6:	31 d2                	xor    edx,edx
c00127e8:	49                   	dec    ecx
c00127e9:	89 e8                	mov    eax,ebp
c00127eb:	f7 f3                	div    ebx
c00127ed:	39 dd                	cmp    ebp,ebx
c00127ef:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00127f3:	88 11                	mov    BYTE PTR [ecx],dl
c00127f5:	73 ed                	jae    c00127e4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00127f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127fb:	83 c4 20             	add    esp,0x20
c00127fe:	5b                   	pop    ebx
c00127ff:	5e                   	pop    esi
c0012800:	5f                   	pop    edi
c0012801:	5d                   	pop    ebp
c0012802:	c3                   	ret    

c0012803 <Dbg::logc(char)>:
c0012803:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012807:	f6 05 e0 e4 02 c0 10 	test   BYTE PTR ds:0xc002e4e0,0x10
c001280e:	75 12                	jne    c0012822 <Dbg::logc(char)+0x1f>
c0012810:	ba fd 03 00 00       	mov    edx,0x3fd
c0012815:	ec                   	in     al,dx
c0012816:	a8 20                	test   al,0x20
c0012818:	74 fb                	je     c0012815 <Dbg::logc(char)+0x12>
c001281a:	ba f8 03 00 00       	mov    edx,0x3f8
c001281f:	88 c8                	mov    al,cl
c0012821:	ee                   	out    dx,al
c0012822:	c3                   	ret    

c0012823 <Dbg::logs(char*)>:
c0012823:	53                   	push   ebx
c0012824:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012828:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001282b:	84 c0                	test   al,al
c001282d:	74 0f                	je     c001283e <Dbg::logs(char*)+0x1b>
c001282f:	50                   	push   eax
c0012830:	43                   	inc    ebx
c0012831:	e8 cd ff ff ff       	call   c0012803 <Dbg::logc(char)>
c0012836:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012839:	5a                   	pop    edx
c001283a:	84 c0                	test   al,al
c001283c:	75 f1                	jne    c001282f <Dbg::logs(char*)+0xc>
c001283e:	5b                   	pop    ebx
c001283f:	c3                   	ret    

c0012840 <Dbg::logWriteInt(unsigned int)>:
c0012840:	83 ec 10             	sub    esp,0x10
c0012843:	6a 0a                	push   0xa
c0012845:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012849:	50                   	push   eax
c001284a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001284e:	e8 57 ff ff ff       	call   c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012853:	50                   	push   eax
c0012854:	e8 ca ff ff ff       	call   c0012823 <Dbg::logs(char*)>
c0012859:	83 c4 20             	add    esp,0x20
c001285c:	c3                   	ret    

c001285d <Dbg::logWriteIntBase(unsigned int, int)>:
c001285d:	83 ec 10             	sub    esp,0x10
c0012860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012864:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012868:	50                   	push   eax
c0012869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286d:	e8 38 ff ff ff       	call   c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012872:	50                   	push   eax
c0012873:	e8 ab ff ff ff       	call   c0012823 <Dbg::logs(char*)>
c0012878:	83 c4 20             	add    esp,0x20
c001287b:	c3                   	ret    

c001287c <Dbg::kprintf(char const*, ...)>:
c001287c:	55                   	push   ebp
c001287d:	57                   	push   edi
c001287e:	56                   	push   esi
c001287f:	53                   	push   ebx
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012887:	f6 05 e0 e4 02 c0 10 	test   BYTE PTR ds:0xc002e4e0,0x10
c001288e:	74 08                	je     c0012898 <Dbg::kprintf(char const*, ...)+0x1c>
c0012890:	83 c4 0c             	add    esp,0xc
c0012893:	5b                   	pop    ebx
c0012894:	5e                   	pop    esi
c0012895:	5f                   	pop    edi
c0012896:	5d                   	pop    ebp
c0012897:	c3                   	ret    
c0012898:	8d 44 24 24          	lea    eax,[esp+0x24]
c001289c:	31 db                	xor    ebx,ebx
c001289e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128a5:	84 c0                	test   al,al
c00128a7:	74 e7                	je     c0012890 <Dbg::kprintf(char const*, ...)+0x14>
c00128a9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128ac:	3c 25                	cmp    al,0x25
c00128ae:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128b1:	75 44                	jne    c00128f7 <Dbg::kprintf(char const*, ...)+0x7b>
c00128b3:	83 c3 02             	add    ebx,0x2
c00128b6:	8a 07                	mov    al,BYTE PTR [edi]
c00128b8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128bb:	83 e8 25             	sub    eax,0x25
c00128be:	3c 53                	cmp    al,0x53
c00128c0:	0f 87 c9 00 00 00    	ja     c001298f <Dbg::kprintf(char const*, ...)+0x113>
c00128c6:	0f b6 c0             	movzx  eax,al
c00128c9:	ff 24 85 98 ae 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5168]
c00128d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128d4:	89 c8                	mov    eax,ecx
c00128d6:	83 c1 04             	add    ecx,0x4
c00128d9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128dd:	ff 30                	push   DWORD PTR [eax]
c00128df:	e8 5c ff ff ff       	call   c0012840 <Dbg::logWriteInt(unsigned int)>
c00128e4:	5f                   	pop    edi
c00128e5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00128e9:	84 c0                	test   al,al
c00128eb:	74 a3                	je     c0012890 <Dbg::kprintf(char const*, ...)+0x14>
c00128ed:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128f0:	3c 25                	cmp    al,0x25
c00128f2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128f5:	74 bc                	je     c00128b3 <Dbg::kprintf(char const*, ...)+0x37>
c00128f7:	50                   	push   eax
c00128f8:	89 eb                	mov    ebx,ebp
c00128fa:	e8 04 ff ff ff       	call   c0012803 <Dbg::logc(char)>
c00128ff:	89 fd                	mov    ebp,edi
c0012901:	58                   	pop    eax
c0012902:	eb e1                	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c0012904:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012908:	89 c8                	mov    eax,ecx
c001290a:	83 c1 04             	add    ecx,0x4
c001290d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012911:	ff 30                	push   DWORD PTR [eax]
c0012913:	e8 0b ff ff ff       	call   c0012823 <Dbg::logs(char*)>
c0012918:	58                   	pop    eax
c0012919:	eb ca                	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c001291b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001291f:	89 d0                	mov    eax,edx
c0012921:	83 c2 04             	add    edx,0x4
c0012924:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012928:	ff 30                	push   DWORD PTR [eax]
c001292a:	e8 11 ff ff ff       	call   c0012840 <Dbg::logWriteInt(unsigned int)>
c001292f:	58                   	pop    eax
c0012930:	eb b3                	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c0012932:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012936:	89 d0                	mov    eax,edx
c0012938:	83 c2 04             	add    edx,0x4
c001293b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001293e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012942:	50                   	push   eax
c0012943:	e8 bb fe ff ff       	call   c0012803 <Dbg::logc(char)>
c0012948:	58                   	pop    eax
c0012949:	eb 9a                	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c001294b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001294f:	89 c8                	mov    eax,ecx
c0012951:	83 c1 04             	add    ecx,0x4
c0012954:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012958:	6a 10                	push   0x10
c001295a:	ff 30                	push   DWORD PTR [eax]
c001295c:	e8 fc fe ff ff       	call   c001285d <Dbg::logWriteIntBase(unsigned int, int)>
c0012961:	59                   	pop    ecx
c0012962:	5f                   	pop    edi
c0012963:	eb 80                	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c0012965:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012969:	89 d0                	mov    eax,edx
c001296b:	83 c2 08             	add    edx,0x8
c001296e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012972:	6a 10                	push   0x10
c0012974:	ff 30                	push   DWORD PTR [eax]
c0012976:	e8 e2 fe ff ff       	call   c001285d <Dbg::logWriteIntBase(unsigned int, int)>
c001297b:	58                   	pop    eax
c001297c:	5a                   	pop    edx
c001297d:	e9 63 ff ff ff       	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c0012982:	6a 25                	push   0x25
c0012984:	e8 7a fe ff ff       	call   c0012803 <Dbg::logc(char)>
c0012989:	58                   	pop    eax
c001298a:	e9 56 ff ff ff       	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>
c001298f:	6a 25                	push   0x25
c0012991:	e8 6d fe ff ff       	call   c0012803 <Dbg::logc(char)>
c0012996:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012999:	50                   	push   eax
c001299a:	e8 64 fe ff ff       	call   c0012803 <Dbg::logc(char)>
c001299f:	5a                   	pop    edx
c00129a0:	59                   	pop    ecx
c00129a1:	e9 3f ff ff ff       	jmp    c00128e5 <Dbg::kprintf(char const*, ...)+0x69>

c00129a6 <File::read(unsigned long long, void*, int*)>:
c00129a6:	53                   	push   ebx
c00129a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129b6:	3c 19                	cmp    al,0x19
c00129b8:	77 35                	ja     c00129ef <File::read(unsigned long long, void*, int*)+0x49>
c00129ba:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c00129c1:	85 c0                	test   eax,eax
c00129c3:	74 2a                	je     c00129ef <File::read(unsigned long long, void*, int*)+0x49>
c00129c5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129cb:	85 c0                	test   eax,eax
c00129cd:	74 20                	je     c00129ef <File::read(unsigned long long, void*, int*)+0x49>
c00129cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129d3:	74 21                	je     c00129f6 <File::read(unsigned long long, void*, int*)+0x50>
c00129d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129db:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e9:	5b                   	pop    ebx
c00129ea:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00129ed:	ff e0                	jmp    eax
c00129ef:	b8 0b 00 00 00       	mov    eax,0xb
c00129f4:	eb 05                	jmp    c00129fb <File::read(unsigned long long, void*, int*)+0x55>
c00129f6:	b8 05 00 00 00       	mov    eax,0x5
c00129fb:	5b                   	pop    ebx
c00129fc:	c3                   	ret    
c00129fd:	90                   	nop

c00129fe <File::write(unsigned long long, void*, int*)>:
c00129fe:	53                   	push   ebx
c00129ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a07:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a0e:	3c 19                	cmp    al,0x19
c0012a10:	77 35                	ja     c0012a47 <File::write(unsigned long long, void*, int*)+0x49>
c0012a12:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0012a19:	85 c0                	test   eax,eax
c0012a1b:	74 2a                	je     c0012a47 <File::write(unsigned long long, void*, int*)+0x49>
c0012a1d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a23:	85 c0                	test   eax,eax
c0012a25:	74 20                	je     c0012a47 <File::write(unsigned long long, void*, int*)+0x49>
c0012a27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a2b:	74 21                	je     c0012a4e <File::write(unsigned long long, void*, int*)+0x50>
c0012a2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a2f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a33:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a41:	5b                   	pop    ebx
c0012a42:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a45:	ff e0                	jmp    eax
c0012a47:	b8 0b 00 00 00       	mov    eax,0xb
c0012a4c:	eb 05                	jmp    c0012a53 <File::write(unsigned long long, void*, int*)+0x55>
c0012a4e:	b8 05 00 00 00       	mov    eax,0x5
c0012a53:	5b                   	pop    ebx
c0012a54:	c3                   	ret    
c0012a55:	90                   	nop

c0012a56 <Directory::read(unsigned long long, void*, int*)>:
c0012a56:	53                   	push   ebx
c0012a57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a5f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a66:	3c 19                	cmp    al,0x19
c0012a68:	77 35                	ja     c0012a9f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a6a:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0012a71:	85 c0                	test   eax,eax
c0012a73:	74 2a                	je     c0012a9f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a7b:	85 c0                	test   eax,eax
c0012a7d:	74 20                	je     c0012a9f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a83:	74 21                	je     c0012aa6 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a8b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a99:	5b                   	pop    ebx
c0012a9a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a9d:	ff e0                	jmp    eax
c0012a9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012aa4:	eb 05                	jmp    c0012aab <Directory::read(unsigned long long, void*, int*)+0x55>
c0012aa6:	b8 05 00 00 00       	mov    eax,0x5
c0012aab:	5b                   	pop    ebx
c0012aac:	c3                   	ret    
c0012aad:	90                   	nop

c0012aae <Directory::write(unsigned long long, void*, int*)>:
c0012aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ab9:	b8 0b 00 00 00       	mov    eax,0xb
c0012abe:	80 fa 19             	cmp    dl,0x19
c0012ac1:	77 18                	ja     c0012adb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ac3:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0012aca:	85 d2                	test   edx,edx
c0012acc:	74 0d                	je     c0012adb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ace:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012ad5:	19 c0                	sbb    eax,eax
c0012ad7:	83 e0 0a             	and    eax,0xa
c0012ada:	40                   	inc    eax
c0012adb:	c3                   	ret    

c0012adc <File::isAtty()>:
c0012adc:	31 c0                	xor    eax,eax
c0012ade:	c3                   	ret    
c0012adf:	90                   	nop

c0012ae0 <Directory::isAtty()>:
c0012ae0:	31 c0                	xor    eax,eax
c0012ae2:	c3                   	ret    
c0012ae3:	90                   	nop

c0012ae4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ae4:	b8 0a 00 00 00       	mov    eax,0xa
c0012ae9:	c3                   	ret    

c0012aea <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012aea:	b8 0a 00 00 00       	mov    eax,0xa
c0012aef:	c3                   	ret    

c0012af0 <Filesystem::allocateSwapfile(char const*, int)>:
c0012af0:	31 c0                	xor    eax,eax
c0012af2:	31 d2                	xor    edx,edx
c0012af4:	c3                   	ret    
c0012af5:	90                   	nop

c0012af6 <File::~File()>:
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c0012afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b02:	89 10                	mov    DWORD PTR [eax],edx
c0012b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	50                   	push   eax
c0012b0c:	e8 2f e7 ff ff       	call   c0011240 <UnixFile::~UnixFile()>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	90                   	nop
c0012b15:	83 c4 0c             	add    esp,0xc
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <File::~File()>:
c0012b1a:	83 ec 0c             	sub    esp,0xc
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b24:	e8 cd ff ff ff       	call   c0012af6 <File::~File()>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	83 ec 08             	sub    esp,0x8
c0012b2f:	68 14 01 00 00       	push   0x114
c0012b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b38:	e8 5e fc ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	83 c4 0c             	add    esp,0xc
c0012b43:	c3                   	ret    

c0012b44 <Directory::~Directory()>:
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	89 10                	mov    DWORD PTR [eax],edx
c0012b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b56:	83 ec 0c             	sub    esp,0xc
c0012b59:	50                   	push   eax
c0012b5a:	e8 e1 e6 ff ff       	call   c0011240 <UnixFile::~UnixFile()>
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	90                   	nop
c0012b63:	83 c4 0c             	add    esp,0xc
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <Directory::~Directory()>:
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b72:	e8 cd ff ff ff       	call   c0012b44 <Directory::~Directory()>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	83 ec 08             	sub    esp,0x8
c0012b7d:	68 14 01 00 00       	push   0x114
c0012b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b86:	e8 10 fc ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	83 c4 0c             	add    esp,0xc
c0012b91:	c3                   	ret    

c0012b92 <Filesystem::Filesystem()>:
c0012b92:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c0012b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9b:	89 10                	mov    DWORD PTR [eax],edx
c0012b9d:	8b 15 34 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e634
c0012ba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bae:	a3 34 e6 02 c0       	mov    ds:0xc002e634,eax
c0012bb3:	90                   	nop
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <Filesystem::~Filesystem()>:
c0012bb6:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c0012bbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbf:	89 10                	mov    DWORD PTR [eax],edx
c0012bc1:	90                   	nop
c0012bc2:	c3                   	ret    
c0012bc3:	90                   	nop

c0012bc4 <Filesystem::~Filesystem()>:
c0012bc4:	83 ec 0c             	sub    esp,0xc
c0012bc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bcb:	e8 e6 ff ff ff       	call   c0012bb6 <Filesystem::~Filesystem()>
c0012bd0:	83 c4 04             	add    esp,0x4
c0012bd3:	83 ec 08             	sub    esp,0x8
c0012bd6:	6a 08                	push   0x8
c0012bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bdc:	e8 ba fb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	83 c4 0c             	add    esp,0xc
c0012be7:	c3                   	ret    

c0012be8 <Fs::getcwd(Process*, char*, int)>:
c0012be8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bec:	31 c0                	xor    eax,eax
c0012bee:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bf1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bf5:	7d 15                	jge    c0012c0c <Fs::getcwd(Process*, char*, int)+0x24>
c0012bf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bfb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c02:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c05:	84 c9                	test   cl,cl
c0012c07:	74 06                	je     c0012c0f <Fs::getcwd(Process*, char*, int)+0x27>
c0012c09:	40                   	inc    eax
c0012c0a:	eb e2                	jmp    c0012bee <Fs::getcwd(Process*, char*, int)+0x6>
c0012c0c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c0f:	31 c0                	xor    eax,eax
c0012c11:	c3                   	ret    

c0012c12 <Fs::initVFS()>:
c0012c12:	83 ec 18             	sub    esp,0x18
c0012c15:	6a 08                	push   0x8
c0012c17:	e8 ff cb ff ff       	call   c000f81b <malloc>
c0012c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c1f:	e8 2c e2 00 00       	call   c0020e50 <FAT::FAT()>
c0012c24:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c2b:	e8 eb cb ff ff       	call   c000f81b <malloc>
c0012c30:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c33:	e8 24 f4 00 00       	call   c002205c <ISO9660::ISO9660()>
c0012c38:	83 c4 1c             	add    esp,0x1c
c0012c3b:	c3                   	ret    

c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c3c:	55                   	push   ebp
c0012c3d:	57                   	push   edi
c0012c3e:	56                   	push   esi
c0012c3f:	53                   	push   ebx
c0012c40:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c46:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c4d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c54:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c5b:	68 00 04 00 00       	push   0x400
c0012c60:	6a 00                	push   0x0
c0012c62:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c66:	56                   	push   esi
c0012c67:	e8 e4 da fe ff       	call   c0000750 <memset>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c73:	75 0b                	jne    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c75:	50                   	push   eax
c0012c76:	50                   	push   eax
c0012c77:	57                   	push   edi
c0012c78:	56                   	push   esi
c0012c79:	e8 8e db fe ff       	call   c000080c <strcpy>
c0012c7e:	eb 41                	jmp    c0012cc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c80:	8a 07                	mov    al,BYTE PTR [edi]
c0012c82:	3c 5c                	cmp    al,0x5c
c0012c84:	74 04                	je     c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c86:	3c 2f                	cmp    al,0x2f
c0012c88:	75 18                	jne    c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c8a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c8d:	3c 60                	cmp    al,0x60
c0012c8f:	7e 03                	jle    c0012c94 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c91:	83 e8 20             	sub    eax,0x20
c0012c94:	88 04 24             	mov    BYTE PTR [esp],al
c0012c97:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c9e:	50                   	push   eax
c0012c9f:	50                   	push   eax
c0012ca0:	eb 18                	jmp    c0012cba <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ca2:	50                   	push   eax
c0012ca3:	50                   	push   eax
c0012ca4:	55                   	push   ebp
c0012ca5:	56                   	push   esi
c0012ca6:	e8 61 db fe ff       	call   c000080c <strcpy>
c0012cab:	5a                   	pop    edx
c0012cac:	59                   	pop    ecx
c0012cad:	68 6a c6 02 c0       	push   0xc002c66a
c0012cb2:	56                   	push   esi
c0012cb3:	e8 94 dc fe ff       	call   c000094c <strcat>
c0012cb8:	5d                   	pop    ebp
c0012cb9:	58                   	pop    eax
c0012cba:	57                   	push   edi
c0012cbb:	56                   	push   esi
c0012cbc:	e8 8b dc fe ff       	call   c000094c <strcat>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cc7:	3c 60                	cmp    al,0x60
c0012cc9:	7e 03                	jle    c0012cce <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ccb:	83 e8 20             	sub    eax,0x20
c0012cce:	88 04 24             	mov    BYTE PTR [esp],al
c0012cd1:	88 03                	mov    BYTE PTR [ebx],al
c0012cd3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cda:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ce0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ce4:	bf 03 00 00 00       	mov    edi,0x3
c0012ce9:	b8 03 00 00 00       	mov    eax,0x3
c0012cee:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012cf1:	84 d2                	test   dl,dl
c0012cf3:	0f 84 91 00 00 00    	je     c0012d8a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012cf9:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012cfc:	80 fa 5c             	cmp    dl,0x5c
c0012cff:	74 05                	je     c0012d06 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d01:	80 fa 2f             	cmp    dl,0x2f
c0012d04:	75 12                	jne    c0012d18 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d06:	89 c5                	mov    ebp,eax
c0012d08:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d0d:	74 09                	je     c0012d18 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d0f:	40                   	inc    eax
c0012d10:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d14:	89 cf                	mov    edi,ecx
c0012d16:	eb d6                	jmp    c0012cee <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d18:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d1d:	75 5b                	jne    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d1f:	80 fa 2e             	cmp    dl,0x2e
c0012d22:	75 56                	jne    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d24:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d28:	74 19                	je     c0012d43 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d2a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d2f:	74 53                	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d31:	89 f9                	mov    ecx,edi
c0012d33:	41                   	inc    ecx
c0012d34:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d37:	80 fa 2f             	cmp    dl,0x2f
c0012d3a:	74 f7                	je     c0012d33 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d3c:	80 fa 5c             	cmp    dl,0x5c
c0012d3f:	74 f2                	je     c0012d33 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d41:	eb d1                	jmp    c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d43:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d48:	74 3a                	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d4a:	83 f8 03             	cmp    eax,0x3
c0012d4d:	74 c5                	je     c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d4f:	41                   	inc    ecx
c0012d50:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d53:	80 fa 2f             	cmp    dl,0x2f
c0012d56:	74 f7                	je     c0012d4f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d58:	80 fa 5c             	cmp    dl,0x5c
c0012d5b:	74 f2                	je     c0012d4f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d5d:	48                   	dec    eax
c0012d5e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d62:	75 06                	jne    c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d64:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d68:	eb f3                	jmp    c0012d5d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d6a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d6e:	74 07                	je     c0012d77 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d70:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d74:	48                   	dec    eax
c0012d75:	eb f3                	jmp    c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d77:	40                   	inc    eax
c0012d78:	eb 9a                	jmp    c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d7a:	80 fa 2f             	cmp    dl,0x2f
c0012d7d:	74 95                	je     c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d7f:	80 fa 5c             	cmp    dl,0x5c
c0012d82:	74 90                	je     c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d84:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d87:	40                   	inc    eax
c0012d88:	eb 8a                	jmp    c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d8e:	83 ec 0c             	sub    esp,0xc
c0012d91:	53                   	push   ebx
c0012d92:	e8 d5 d9 fe ff       	call   c000076c <strlen>
c0012d97:	83 c4 10             	add    esp,0x10
c0012d9a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d9f:	75 26                	jne    c0012dc7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012da1:	83 ec 0c             	sub    esp,0xc
c0012da4:	53                   	push   ebx
c0012da5:	e8 c2 d9 fe ff       	call   c000076c <strlen>
c0012daa:	83 c4 10             	add    esp,0x10
c0012dad:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012db2:	74 26                	je     c0012dda <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012db4:	83 ec 0c             	sub    esp,0xc
c0012db7:	53                   	push   ebx
c0012db8:	e8 af d9 fe ff       	call   c000076c <strlen>
c0012dbd:	83 c4 10             	add    esp,0x10
c0012dc0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012dc5:	eb c7                	jmp    c0012d8e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	53                   	push   ebx
c0012dcb:	e8 9c d9 fe ff       	call   c000076c <strlen>
c0012dd0:	83 c4 10             	add    esp,0x10
c0012dd3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012dd8:	74 c7                	je     c0012da1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012dda:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012de0:	5b                   	pop    ebx
c0012de1:	5e                   	pop    esi
c0012de2:	5f                   	pop    edi
c0012de3:	5d                   	pop    ebp
c0012de4:	c3                   	ret    
c0012de5:	90                   	nop

c0012de6 <File::File(char const*, Process*)>:
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ded:	83 ec 08             	sub    esp,0x8
c0012df0:	6a 00                	push   0x0
c0012df2:	50                   	push   eax
c0012df3:	e8 66 e2 ff ff       	call   c001105e <UnixFile::UnixFile(int)>
c0012df8:	83 c4 10             	add    esp,0x10
c0012dfb:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c0012e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e04:	89 10                	mov    DWORD PTR [eax],edx
c0012e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e14:	83 c0 0d             	add    eax,0xd
c0012e17:	83 ec 04             	sub    esp,0x4
c0012e1a:	52                   	push   edx
c0012e1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e1f:	50                   	push   eax
c0012e20:	e8 17 fe ff ff       	call   c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e2f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e36:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e40:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e44:	90                   	nop
c0012e45:	83 c4 0c             	add    esp,0xc
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <File::open(FileOpenMode)>:
c0012e4a:	53                   	push   ebx
c0012e4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e50:	83 ec 08             	sub    esp,0x8
c0012e53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e57:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e5e:	80 fa 19             	cmp    dl,0x19
c0012e61:	77 40                	ja     c0012ea3 <File::open(FileOpenMode)+0x59>
c0012e63:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0012e6a:	85 d2                	test   edx,edx
c0012e6c:	74 35                	je     c0012ea3 <File::open(FileOpenMode)+0x59>
c0012e6e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e74:	85 d2                	test   edx,edx
c0012e76:	74 2b                	je     c0012ea3 <File::open(FileOpenMode)+0x59>
c0012e78:	b8 06 00 00 00       	mov    eax,0x6
c0012e7d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e81:	75 20                	jne    c0012ea3 <File::open(FileOpenMode)+0x59>
c0012e83:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e85:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e8f:	51                   	push   ecx
c0012e90:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e93:	51                   	push   ecx
c0012e94:	52                   	push   edx
c0012e95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	85 c0                	test   eax,eax
c0012e9d:	75 04                	jne    c0012ea3 <File::open(FileOpenMode)+0x59>
c0012e9f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ea3:	83 c4 08             	add    esp,0x8
c0012ea6:	5b                   	pop    ebx
c0012ea7:	c3                   	ret    

c0012ea8 <File::close()>:
c0012ea8:	53                   	push   ebx
c0012ea9:	b8 0b 00 00 00       	mov    eax,0xb
c0012eae:	83 ec 08             	sub    esp,0x8
c0012eb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012eb5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ebc:	80 fa 19             	cmp    dl,0x19
c0012ebf:	77 41                	ja     c0012f02 <File::close()+0x5a>
c0012ec1:	8b 1c 95 c0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1540]
c0012ec8:	85 db                	test   ebx,ebx
c0012eca:	74 36                	je     c0012f02 <File::close()+0x5a>
c0012ecc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ed3:	74 2d                	je     c0012f02 <File::close()+0x5a>
c0012ed5:	b8 05 00 00 00       	mov    eax,0x5
c0012eda:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ede:	74 22                	je     c0012f02 <File::close()+0x5a>
c0012ee0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012ee4:	8b 04 95 c0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1540]
c0012eeb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ef1:	53                   	push   ebx
c0012ef2:	53                   	push   ebx
c0012ef3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ef5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012efb:	50                   	push   eax
c0012efc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012eff:	83 c4 10             	add    esp,0x10
c0012f02:	83 c4 08             	add    esp,0x8
c0012f05:	5b                   	pop    ebx
c0012f06:	c3                   	ret    
c0012f07:	90                   	nop

c0012f08 <File::seek(unsigned long long)>:
c0012f08:	56                   	push   esi
c0012f09:	53                   	push   ebx
c0012f0a:	b8 0b 00 00 00       	mov    eax,0xb
c0012f0f:	51                   	push   ecx
c0012f10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f18:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f23:	80 fa 19             	cmp    dl,0x19
c0012f26:	77 31                	ja     c0012f59 <File::seek(unsigned long long)+0x51>
c0012f28:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0012f2f:	85 d2                	test   edx,edx
c0012f31:	74 26                	je     c0012f59 <File::seek(unsigned long long)+0x51>
c0012f33:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f39:	85 d2                	test   edx,edx
c0012f3b:	74 1c                	je     c0012f59 <File::seek(unsigned long long)+0x51>
c0012f3d:	b8 05 00 00 00       	mov    eax,0x5
c0012f42:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f46:	74 11                	je     c0012f59 <File::seek(unsigned long long)+0x51>
c0012f48:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f4a:	53                   	push   ebx
c0012f4b:	51                   	push   ecx
c0012f4c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f52:	52                   	push   edx
c0012f53:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	5a                   	pop    edx
c0012f5a:	5b                   	pop    ebx
c0012f5b:	5e                   	pop    esi
c0012f5c:	c3                   	ret    
c0012f5d:	90                   	nop

c0012f5e <File::tell(unsigned long long*)>:
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	b8 0b 00 00 00       	mov    eax,0xb
c0012f66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f6a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f71:	80 fa 19             	cmp    dl,0x19
c0012f74:	77 34                	ja     c0012faa <File::tell(unsigned long long*)+0x4c>
c0012f76:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0012f7d:	85 d2                	test   edx,edx
c0012f7f:	74 29                	je     c0012faa <File::tell(unsigned long long*)+0x4c>
c0012f81:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f87:	85 d2                	test   edx,edx
c0012f89:	74 1f                	je     c0012faa <File::tell(unsigned long long*)+0x4c>
c0012f8b:	b8 05 00 00 00       	mov    eax,0x5
c0012f90:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f94:	74 14                	je     c0012faa <File::tell(unsigned long long*)+0x4c>
c0012f96:	50                   	push   eax
c0012f97:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f9d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fa3:	52                   	push   edx
c0012fa4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	83 c4 0c             	add    esp,0xc
c0012fad:	c3                   	ret    

c0012fae <File::rewind()>:
c0012fae:	83 ec 10             	sub    esp,0x10
c0012fb1:	6a 00                	push   0x0
c0012fb3:	6a 00                	push   0x0
c0012fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb9:	e8 4a ff ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c0012fbe:	83 c4 1c             	add    esp,0x1c
c0012fc1:	c3                   	ret    

c0012fc2 <File::unlink()>:
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd5:	80 f9 19             	cmp    cl,0x19
c0012fd8:	77 2f                	ja     c0013009 <File::unlink()+0x47>
c0012fda:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0012fe1:	85 c9                	test   ecx,ecx
c0012fe3:	74 24                	je     c0013009 <File::unlink()+0x47>
c0012fe5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012feb:	85 c9                	test   ecx,ecx
c0012fed:	74 1a                	je     c0013009 <File::unlink()+0x47>
c0012fef:	b8 06 00 00 00       	mov    eax,0x6
c0012ff4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff8:	75 0f                	jne    c0013009 <File::unlink()+0x47>
c0012ffa:	83 c2 0d             	add    edx,0xd
c0012ffd:	50                   	push   eax
c0012ffe:	50                   	push   eax
c0012fff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013001:	52                   	push   edx
c0013002:	51                   	push   ecx
c0013003:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013006:	83 c4 10             	add    esp,0x10
c0013009:	83 c4 0c             	add    esp,0xc
c001300c:	c3                   	ret    
c001300d:	90                   	nop

c001300e <File::rename(char const*)>:
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	b8 0b 00 00 00       	mov    eax,0xb
c0013016:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001301a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013021:	80 f9 19             	cmp    cl,0x19
c0013024:	77 32                	ja     c0013058 <File::rename(char const*)+0x4a>
c0013026:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c001302d:	85 c9                	test   ecx,ecx
c001302f:	74 27                	je     c0013058 <File::rename(char const*)+0x4a>
c0013031:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013037:	85 c9                	test   ecx,ecx
c0013039:	74 1d                	je     c0013058 <File::rename(char const*)+0x4a>
c001303b:	b8 06 00 00 00       	mov    eax,0x6
c0013040:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013044:	75 12                	jne    c0013058 <File::rename(char const*)+0x4a>
c0013046:	83 c2 0d             	add    edx,0xd
c0013049:	50                   	push   eax
c001304a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001304c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013050:	52                   	push   edx
c0013051:	51                   	push   ecx
c0013052:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	83 c4 0c             	add    esp,0xc
c001305b:	c3                   	ret    

c001305c <File::chfatattr(unsigned char, unsigned char)>:
c001305c:	57                   	push   edi
c001305d:	b8 0b 00 00 00       	mov    eax,0xb
c0013062:	56                   	push   esi
c0013063:	53                   	push   ebx
c0013064:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013068:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001306c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013073:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013077:	80 f9 19             	cmp    cl,0x19
c001307a:	77 37                	ja     c00130b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001307c:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013083:	85 c9                	test   ecx,ecx
c0013085:	74 2c                	je     c00130b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013087:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001308d:	85 c9                	test   ecx,ecx
c001308f:	74 22                	je     c00130b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013091:	b8 06 00 00 00       	mov    eax,0x6
c0013096:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309a:	75 17                	jne    c00130b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001309c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001309e:	89 f0                	mov    eax,esi
c00130a0:	83 c2 0d             	add    edx,0xd
c00130a3:	0f b6 f0             	movzx  esi,al
c00130a6:	0f b6 db             	movzx  ebx,bl
c00130a9:	56                   	push   esi
c00130aa:	53                   	push   ebx
c00130ab:	52                   	push   edx
c00130ac:	51                   	push   ecx
c00130ad:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130b0:	83 c4 10             	add    esp,0x10
c00130b3:	5b                   	pop    ebx
c00130b4:	5e                   	pop    esi
c00130b5:	5f                   	pop    edi
c00130b6:	c3                   	ret    
c00130b7:	90                   	nop

c00130b8 <File::exists()>:
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	31 c0                	xor    eax,eax
c00130bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130c1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130c8:	80 f9 19             	cmp    cl,0x19
c00130cb:	77 24                	ja     c00130f1 <File::exists()+0x39>
c00130cd:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c00130d4:	85 c9                	test   ecx,ecx
c00130d6:	74 19                	je     c00130f1 <File::exists()+0x39>
c00130d8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130de:	85 c9                	test   ecx,ecx
c00130e0:	74 0f                	je     c00130f1 <File::exists()+0x39>
c00130e2:	83 c2 0d             	add    edx,0xd
c00130e5:	50                   	push   eax
c00130e6:	50                   	push   eax
c00130e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130e9:	52                   	push   edx
c00130ea:	51                   	push   ecx
c00130eb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130ee:	83 c4 10             	add    esp,0x10
c00130f1:	83 c4 0c             	add    esp,0xc
c00130f4:	c3                   	ret    
c00130f5:	90                   	nop

c00130f6 <File::stat(unsigned long long*, bool*)>:
c00130f6:	56                   	push   esi
c00130f7:	53                   	push   ebx
c00130f8:	50                   	push   eax
c00130f9:	b8 0b 00 00 00       	mov    eax,0xb
c00130fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013102:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013106:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013111:	80 f9 19             	cmp    cl,0x19
c0013114:	77 3d                	ja     c0013153 <File::stat(unsigned long long*, bool*)+0x5d>
c0013116:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c001311d:	85 c9                	test   ecx,ecx
c001311f:	74 32                	je     c0013153 <File::stat(unsigned long long*, bool*)+0x5d>
c0013121:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013127:	85 c9                	test   ecx,ecx
c0013129:	74 28                	je     c0013153 <File::stat(unsigned long long*, bool*)+0x5d>
c001312b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013131:	74 13                	je     c0013146 <File::stat(unsigned long long*, bool*)+0x50>
c0013133:	83 ec 04             	sub    esp,0x4
c0013136:	56                   	push   esi
c0013137:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001313d:	51                   	push   ecx
c001313e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013141:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013144:	eb 0a                	jmp    c0013150 <File::stat(unsigned long long*, bool*)+0x5a>
c0013146:	53                   	push   ebx
c0013147:	83 c2 0d             	add    edx,0xd
c001314a:	56                   	push   esi
c001314b:	52                   	push   edx
c001314c:	51                   	push   ecx
c001314d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	5a                   	pop    edx
c0013154:	5b                   	pop    ebx
c0013155:	5e                   	pop    esi
c0013156:	c3                   	ret    

c0013157 <Fs::setcwd(Process*, char*)>:
c0013157:	55                   	push   ebp
c0013158:	57                   	push   edi
c0013159:	56                   	push   esi
c001315a:	53                   	push   ebx
c001315b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013161:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013168:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001316e:	57                   	push   edi
c001316f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013176:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001317a:	56                   	push   esi
c001317b:	e8 bc fa ff ff       	call   c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013180:	89 34 24             	mov    DWORD PTR [esp],esi
c0013183:	e8 e4 d5 fe ff       	call   c000076c <strlen>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	83 f8 02             	cmp    eax,0x2
c001318e:	77 17                	ja     c00131a7 <Fs::setcwd(Process*, char*)+0x50>
c0013190:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013195:	83 e8 41             	sub    eax,0x41
c0013198:	83 f8 19             	cmp    eax,0x19
c001319b:	76 24                	jbe    c00131c1 <Fs::setcwd(Process*, char*)+0x6a>
c001319d:	b8 03 00 00 00       	mov    eax,0x3
c00131a2:	e9 e0 00 00 00       	jmp    c0013287 <Fs::setcwd(Process*, char*)+0x130>
c00131a7:	83 ec 0c             	sub    esp,0xc
c00131aa:	56                   	push   esi
c00131ab:	e8 bc d5 fe ff       	call   c000076c <strlen>
c00131b0:	83 c4 10             	add    esp,0x10
c00131b3:	83 f8 03             	cmp    eax,0x3
c00131b6:	75 34                	jne    c00131ec <Fs::setcwd(Process*, char*)+0x95>
c00131b8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131bd:	75 2d                	jne    c00131ec <Fs::setcwd(Process*, char*)+0x95>
c00131bf:	eb cf                	jmp    c0013190 <Fs::setcwd(Process*, char*)+0x39>
c00131c1:	8b 14 85 c0 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1540]
c00131c8:	b8 05 00 00 00       	mov    eax,0x5
c00131cd:	85 d2                	test   edx,edx
c00131cf:	0f 84 b2 00 00 00    	je     c0013287 <Fs::setcwd(Process*, char*)+0x130>
c00131d5:	b8 06 00 00 00       	mov    eax,0x6
c00131da:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131e1:	0f 85 92 00 00 00    	jne    c0013279 <Fs::setcwd(Process*, char*)+0x122>
c00131e7:	e9 9b 00 00 00       	jmp    c0013287 <Fs::setcwd(Process*, char*)+0x130>
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	68 14 01 00 00       	push   0x114
c00131f4:	e8 22 c6 ff ff       	call   c000f81b <malloc>
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	89 c3                	mov    ebx,eax
c00131fe:	55                   	push   ebp
c00131ff:	56                   	push   esi
c0013200:	50                   	push   eax
c0013201:	e8 e0 fb ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c0013206:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001320b:	83 c4 0c             	add    esp,0xc
c001320e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013212:	50                   	push   eax
c0013213:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013217:	50                   	push   eax
c0013218:	53                   	push   ebx
c0013219:	e8 d8 fe ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001321e:	83 c4 10             	add    esp,0x10
c0013221:	83 f8 02             	cmp    eax,0x2
c0013224:	74 04                	je     c001322a <Fs::setcwd(Process*, char*)+0xd3>
c0013226:	85 c0                	test   eax,eax
c0013228:	74 1c                	je     c0013246 <Fs::setcwd(Process*, char*)+0xef>
c001322a:	b8 01 00 00 00       	mov    eax,0x1
c001322f:	85 db                	test   ebx,ebx
c0013231:	74 54                	je     c0013287 <Fs::setcwd(Process*, char*)+0x130>
c0013233:	83 ec 0c             	sub    esp,0xc
c0013236:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013238:	53                   	push   ebx
c0013239:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	b8 01 00 00 00       	mov    eax,0x1
c0013244:	eb 41                	jmp    c0013287 <Fs::setcwd(Process*, char*)+0x130>
c0013246:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001324b:	75 1c                	jne    c0013269 <Fs::setcwd(Process*, char*)+0x112>
c001324d:	b8 02 00 00 00       	mov    eax,0x2
c0013252:	85 db                	test   ebx,ebx
c0013254:	74 31                	je     c0013287 <Fs::setcwd(Process*, char*)+0x130>
c0013256:	83 ec 0c             	sub    esp,0xc
c0013259:	8b 03                	mov    eax,DWORD PTR [ebx]
c001325b:	53                   	push   ebx
c001325c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	b8 02 00 00 00       	mov    eax,0x2
c0013267:	eb 1e                	jmp    c0013287 <Fs::setcwd(Process*, char*)+0x130>
c0013269:	85 db                	test   ebx,ebx
c001326b:	74 0c                	je     c0013279 <Fs::setcwd(Process*, char*)+0x122>
c001326d:	83 ec 0c             	sub    esp,0xc
c0013270:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013272:	53                   	push   ebx
c0013273:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	50                   	push   eax
c001327a:	50                   	push   eax
c001327b:	56                   	push   esi
c001327c:	57                   	push   edi
c001327d:	e8 8a d5 fe ff       	call   c000080c <strcpy>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	31 c0                	xor    eax,eax
c0013287:	81 c4 1c 02 00 00    	add    esp,0x21c
c001328d:	5b                   	pop    ebx
c001328e:	5e                   	pop    esi
c001328f:	5f                   	pop    edi
c0013290:	5d                   	pop    ebp
c0013291:	c3                   	ret    

c0013292 <Directory::Directory(char const*, Process*)>:
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013299:	83 ec 08             	sub    esp,0x8
c001329c:	6a 00                	push   0x0
c001329e:	50                   	push   eax
c001329f:	e8 ba dd ff ff       	call   c001105e <UnixFile::UnixFile(int)>
c00132a4:	83 c4 10             	add    esp,0x10
c00132a7:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c00132ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b0:	89 10                	mov    DWORD PTR [eax],edx
c00132b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c0:	83 c0 0d             	add    eax,0xd
c00132c3:	83 ec 04             	sub    esp,0x4
c00132c6:	52                   	push   edx
c00132c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cb:	50                   	push   eax
c00132cc:	e8 6b f9 ff ff       	call   c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00132db:	8d 50 bf             	lea    edx,[eax-0x41]
c00132de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00132e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132f0:	90                   	nop
c00132f1:	83 c4 0c             	add    esp,0xc
c00132f4:	c3                   	ret    
c00132f5:	90                   	nop

c00132f6 <Directory::open()>:
c00132f6:	53                   	push   ebx
c00132f7:	b8 0b 00 00 00       	mov    eax,0xb
c00132fc:	83 ec 08             	sub    esp,0x8
c00132ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013303:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001330a:	80 fa 19             	cmp    dl,0x19
c001330d:	77 3d                	ja     c001334c <Directory::open()+0x56>
c001330f:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0013316:	85 d2                	test   edx,edx
c0013318:	74 32                	je     c001334c <Directory::open()+0x56>
c001331a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013320:	85 d2                	test   edx,edx
c0013322:	74 28                	je     c001334c <Directory::open()+0x56>
c0013324:	b8 06 00 00 00       	mov    eax,0x6
c0013329:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001332d:	75 1d                	jne    c001334c <Directory::open()+0x56>
c001332f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013335:	50                   	push   eax
c0013336:	8b 02                	mov    eax,DWORD PTR [edx]
c0013338:	51                   	push   ecx
c0013339:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001333c:	51                   	push   ecx
c001333d:	52                   	push   edx
c001333e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	85 c0                	test   eax,eax
c0013346:	75 04                	jne    c001334c <Directory::open()+0x56>
c0013348:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001334c:	83 c4 08             	add    esp,0x8
c001334f:	5b                   	pop    ebx
c0013350:	c3                   	ret    
c0013351:	90                   	nop

c0013352 <Directory::close()>:
c0013352:	53                   	push   ebx
c0013353:	b8 0b 00 00 00       	mov    eax,0xb
c0013358:	83 ec 08             	sub    esp,0x8
c001335b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001335f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013366:	80 fa 19             	cmp    dl,0x19
c0013369:	77 41                	ja     c00133ac <Directory::close()+0x5a>
c001336b:	8b 1c 95 c0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1540]
c0013372:	85 db                	test   ebx,ebx
c0013374:	74 36                	je     c00133ac <Directory::close()+0x5a>
c0013376:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001337d:	74 2d                	je     c00133ac <Directory::close()+0x5a>
c001337f:	b8 05 00 00 00       	mov    eax,0x5
c0013384:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013388:	74 22                	je     c00133ac <Directory::close()+0x5a>
c001338a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001338e:	8b 04 95 c0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1540]
c0013395:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001339b:	53                   	push   ebx
c001339c:	53                   	push   ebx
c001339d:	8b 10                	mov    edx,DWORD PTR [eax]
c001339f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133a5:	50                   	push   eax
c00133a6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133a9:	83 c4 10             	add    esp,0x10
c00133ac:	83 c4 08             	add    esp,0x8
c00133af:	5b                   	pop    ebx
c00133b0:	c3                   	ret    
c00133b1:	90                   	nop

c00133b2 <Directory::unlink()>:
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133c5:	80 f9 19             	cmp    cl,0x19
c00133c8:	77 2f                	ja     c00133f9 <Directory::unlink()+0x47>
c00133ca:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c00133d1:	85 c9                	test   ecx,ecx
c00133d3:	74 24                	je     c00133f9 <Directory::unlink()+0x47>
c00133d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133db:	85 c9                	test   ecx,ecx
c00133dd:	74 1a                	je     c00133f9 <Directory::unlink()+0x47>
c00133df:	b8 06 00 00 00       	mov    eax,0x6
c00133e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133e8:	75 0f                	jne    c00133f9 <Directory::unlink()+0x47>
c00133ea:	83 c2 0d             	add    edx,0xd
c00133ed:	50                   	push   eax
c00133ee:	50                   	push   eax
c00133ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133f1:	52                   	push   edx
c00133f2:	51                   	push   ecx
c00133f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	83 c4 0c             	add    esp,0xc
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <Directory::rename(char const*)>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	b8 0b 00 00 00       	mov    eax,0xb
c0013406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001340a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013411:	80 f9 19             	cmp    cl,0x19
c0013414:	77 32                	ja     c0013448 <Directory::rename(char const*)+0x4a>
c0013416:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c001341d:	85 c9                	test   ecx,ecx
c001341f:	74 27                	je     c0013448 <Directory::rename(char const*)+0x4a>
c0013421:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013427:	85 c9                	test   ecx,ecx
c0013429:	74 1d                	je     c0013448 <Directory::rename(char const*)+0x4a>
c001342b:	b8 06 00 00 00       	mov    eax,0x6
c0013430:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013434:	75 12                	jne    c0013448 <Directory::rename(char const*)+0x4a>
c0013436:	83 c2 0d             	add    edx,0xd
c0013439:	50                   	push   eax
c001343a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001343c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013440:	52                   	push   edx
c0013441:	51                   	push   ecx
c0013442:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 c4 0c             	add    esp,0xc
c001344b:	c3                   	ret    

c001344c <Directory::exists()>:
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	31 c0                	xor    eax,eax
c0013451:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013455:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001345c:	80 f9 19             	cmp    cl,0x19
c001345f:	77 24                	ja     c0013485 <Directory::exists()+0x39>
c0013461:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013468:	85 c9                	test   ecx,ecx
c001346a:	74 19                	je     c0013485 <Directory::exists()+0x39>
c001346c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013472:	85 c9                	test   ecx,ecx
c0013474:	74 0f                	je     c0013485 <Directory::exists()+0x39>
c0013476:	83 c2 0d             	add    edx,0xd
c0013479:	50                   	push   eax
c001347a:	50                   	push   eax
c001347b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001347d:	52                   	push   edx
c001347e:	51                   	push   ecx
c001347f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	83 c4 0c             	add    esp,0xc
c0013488:	c3                   	ret    
c0013489:	90                   	nop

c001348a <Directory::read(dirent*)>:
c001348a:	83 ec 1c             	sub    esp,0x1c
c001348d:	b8 0b 00 00 00       	mov    eax,0xb
c0013492:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013496:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001349d:	80 fa 19             	cmp    dl,0x19
c00134a0:	77 30                	ja     c00134d2 <Directory::read(dirent*)+0x48>
c00134a2:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c00134a9:	85 d2                	test   edx,edx
c00134ab:	74 25                	je     c00134d2 <Directory::read(dirent*)+0x48>
c00134ad:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134b4:	74 1c                	je     c00134d2 <Directory::read(dirent*)+0x48>
c00134b6:	83 ec 0c             	sub    esp,0xc
c00134b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134bf:	52                   	push   edx
c00134c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134c4:	6a 00                	push   0x0
c00134c6:	68 10 01 00 00       	push   0x110
c00134cb:	51                   	push   ecx
c00134cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134cf:	83 c4 20             	add    esp,0x20
c00134d2:	83 c4 1c             	add    esp,0x1c
c00134d5:	c3                   	ret    

c00134d6 <Directory::create()>:
c00134d6:	83 ec 0c             	sub    esp,0xc
c00134d9:	b8 0b 00 00 00       	mov    eax,0xb
c00134de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134e9:	80 f9 19             	cmp    cl,0x19
c00134ec:	77 2f                	ja     c001351d <Directory::create()+0x47>
c00134ee:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c00134f5:	85 c9                	test   ecx,ecx
c00134f7:	74 24                	je     c001351d <Directory::create()+0x47>
c00134f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134ff:	85 c9                	test   ecx,ecx
c0013501:	74 1a                	je     c001351d <Directory::create()+0x47>
c0013503:	b8 06 00 00 00       	mov    eax,0x6
c0013508:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001350c:	75 0f                	jne    c001351d <Directory::create()+0x47>
c001350e:	83 c2 0d             	add    edx,0xd
c0013511:	50                   	push   eax
c0013512:	50                   	push   eax
c0013513:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013515:	52                   	push   edx
c0013516:	51                   	push   ecx
c0013517:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001351a:	83 c4 10             	add    esp,0x10
c001351d:	83 c4 0c             	add    esp,0xc
c0013520:	c3                   	ret    
c0013521:	90                   	nop

c0013522 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013522:	b8 0a 00 00 00       	mov    eax,0xa
c0013527:	c3                   	ret    

c0013528 <Bus::Bus(char const*)>:
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352f:	83 ec 08             	sub    esp,0x8
c0013532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013536:	50                   	push   eax
c0013537:	e8 88 09 00 00       	call   c0013ec4 <Device::Device(char const*)>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	89 10                	mov    DWORD PTR [eax],edx
c001354a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013558:	90                   	nop
c0013559:	83 c4 0c             	add    esp,0xc
c001355c:	c3                   	ret    
c001355d:	90                   	nop

c001355e <Bus::~Bus()>:
c001355e:	83 ec 0c             	sub    esp,0xc
c0013561:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	89 10                	mov    DWORD PTR [eax],edx
c001356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	50                   	push   eax
c0013574:	e8 15 06 00 00       	call   c0013b8e <Device::~Device()>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	90                   	nop
c001357d:	83 c4 0c             	add    esp,0xc
c0013580:	c3                   	ret    
c0013581:	90                   	nop

c0013582 <Bus::~Bus()>:
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	83 ec 0c             	sub    esp,0xc
c0013588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358c:	e8 cd ff ff ff       	call   c001355e <Bus::~Bus()>
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 ec 08             	sub    esp,0x8
c0013597:	68 58 01 00 00       	push   0x158
c001359c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a0:	e8 f6 f1 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	83 c4 0c             	add    esp,0xc
c00135ab:	c3                   	ret    

c00135ac <Buzzer::Buzzer(char const*)>:
c00135ac:	83 ec 0c             	sub    esp,0xc
c00135af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b3:	83 ec 08             	sub    esp,0x8
c00135b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ba:	50                   	push   eax
c00135bb:	e8 04 09 00 00       	call   c0013ec4 <Device::Device(char const*)>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c00135c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135cc:	89 10                	mov    DWORD PTR [eax],edx
c00135ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00135dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00135ea:	90                   	nop
c00135eb:	83 c4 0c             	add    esp,0xc
c00135ee:	c3                   	ret    
c00135ef:	90                   	nop

c00135f0 <Buzzer::~Buzzer()>:
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c00135f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fc:	89 10                	mov    DWORD PTR [eax],edx
c00135fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013602:	83 ec 0c             	sub    esp,0xc
c0013605:	50                   	push   eax
c0013606:	e8 83 05 00 00       	call   c0013b8e <Device::~Device()>
c001360b:	83 c4 10             	add    esp,0x10
c001360e:	90                   	nop
c001360f:	83 c4 0c             	add    esp,0xc
c0013612:	c3                   	ret    
c0013613:	90                   	nop

c0013614 <Buzzer::~Buzzer()>:
c0013614:	83 ec 0c             	sub    esp,0xc
c0013617:	83 ec 0c             	sub    esp,0xc
c001361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361e:	e8 cd ff ff ff       	call   c00135f0 <Buzzer::~Buzzer()>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	83 ec 08             	sub    esp,0x8
c0013629:	68 5c 01 00 00       	push   0x15c
c001362e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013632:	e8 64 f1 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	83 c4 0c             	add    esp,0xc
c001363d:	c3                   	ret    

c001363e <Buzzer::stop()>:
c001363e:	83 ec 14             	sub    esp,0x14
c0013641:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013645:	8b 10                	mov    edx,DWORD PTR [eax]
c0013647:	6a 00                	push   0x0
c0013649:	50                   	push   eax
c001364a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001364d:	83 c4 1c             	add    esp,0x1c
c0013650:	c3                   	ret    

c0013651 <beepThread(void*)>:
c0013651:	53                   	push   ebx
c0013652:	83 ec 08             	sub    esp,0x8
c0013655:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001365a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001365e:	48                   	dec    eax
c001365f:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0013664:	75 01                	jne    c0013667 <beepThread(void*)+0x16>
c0013666:	fb                   	sti    
c0013667:	50                   	push   eax
c0013668:	50                   	push   eax
c0013669:	b8 40 42 0f 00       	mov    eax,0xf4240
c001366e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013674:	52                   	push   edx
c0013675:	50                   	push   eax
c0013676:	e8 16 aa 00 00       	call   c001e091 <nanoSleep(unsigned long long)>
c001367b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001367e:	e8 bb ff ff ff       	call   c001363e <Buzzer::stop()>
c0013683:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001368b:	83 c4 18             	add    esp,0x18
c001368e:	5b                   	pop    ebx
c001368f:	e9 f9 a8 00 00       	jmp    c001df8d <blockTask(TaskState)>

c0013694 <Buzzer::beep(int, int, bool)>:
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001369b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001369f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136a3:	52                   	push   edx
c00136a4:	52                   	push   edx
c00136a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00136a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ab:	56                   	push   esi
c00136ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136af:	83 c4 10             	add    esp,0x10
c00136b2:	89 f8                	mov    eax,edi
c00136b4:	84 c0                	test   al,al
c00136b6:	74 1f                	je     c00136d7 <Buzzer::beep(int, int, bool)+0x43>
c00136b8:	50                   	push   eax
c00136b9:	50                   	push   eax
c00136ba:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136c0:	99                   	cdq    
c00136c1:	52                   	push   edx
c00136c2:	50                   	push   eax
c00136c3:	e8 c9 a9 00 00       	call   c001e091 <nanoSleep(unsigned long long)>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136cf:	5b                   	pop    ebx
c00136d0:	5e                   	pop    esi
c00136d1:	5f                   	pop    edi
c00136d2:	e9 67 ff ff ff       	jmp    c001363e <Buzzer::stop()>
c00136d7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00136dd:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00136e2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00136ea:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136ee:	c7 44 24 14 51 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013651
c00136f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136fa:	5b                   	pop    ebx
c00136fb:	5e                   	pop    esi
c00136fc:	5f                   	pop    edi
c00136fd:	e9 90 a4 00 00       	jmp    c001db92 <Process::createThread(void (*)(void*), void*, int)>

c0013702 <User::loadClockSettings(int)>:
c0013702:	53                   	push   ebx
c0013703:	83 ec 14             	sub    esp,0x14
c0013706:	68 14 01 00 00       	push   0x114
c001370b:	e8 0b c1 ff ff       	call   c000f81b <malloc>
c0013710:	83 c4 0c             	add    esp,0xc
c0013713:	89 c3                	mov    ebx,eax
c0013715:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001371b:	68 e4 b0 02 c0       	push   0xc002b0e4
c0013720:	50                   	push   eax
c0013721:	e8 c0 f6 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c0013726:	58                   	pop    eax
c0013727:	5a                   	pop    edx
c0013728:	6a 01                	push   0x1
c001372a:	53                   	push   ebx
c001372b:	e8 1a f7 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c0013730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013733:	e8 70 f7 ff ff       	call   c0012ea8 <File::close()>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	85 db                	test   ebx,ebx
c001373d:	74 0f                	je     c001374e <User::loadClockSettings(int)+0x4c>
c001373f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013741:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013745:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013748:	83 c4 08             	add    esp,0x8
c001374b:	5b                   	pop    ebx
c001374c:	ff e0                	jmp    eax
c001374e:	83 c4 08             	add    esp,0x8
c0013751:	5b                   	pop    ebx
c0013752:	c3                   	ret    
c0013753:	90                   	nop

c0013754 <Clock::Clock(char const*)>:
c0013754:	83 ec 0c             	sub    esp,0xc
c0013757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375b:	83 ec 08             	sub    esp,0x8
c001375e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013762:	50                   	push   eax
c0013763:	e8 5c 07 00 00       	call   c0013ec4 <Device::Device(char const*)>
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	ba 0c b1 02 c0       	mov    edx,0xc002b10c
c0013770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013774:	89 10                	mov    DWORD PTR [eax],edx
c0013776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001377a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013784:	90                   	nop
c0013785:	83 c4 0c             	add    esp,0xc
c0013788:	c3                   	ret    
c0013789:	90                   	nop

c001378a <Clock::~Clock()>:
c001378a:	83 ec 0c             	sub    esp,0xc
c001378d:	ba 0c b1 02 c0       	mov    edx,0xc002b10c
c0013792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013796:	89 10                	mov    DWORD PTR [eax],edx
c0013798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	50                   	push   eax
c00137a0:	e8 e9 03 00 00       	call   c0013b8e <Device::~Device()>
c00137a5:	83 c4 10             	add    esp,0x10
c00137a8:	90                   	nop
c00137a9:	83 c4 0c             	add    esp,0xc
c00137ac:	c3                   	ret    
c00137ad:	90                   	nop

c00137ae <Clock::~Clock()>:
c00137ae:	83 ec 0c             	sub    esp,0xc
c00137b1:	83 ec 0c             	sub    esp,0xc
c00137b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b8:	e8 cd ff ff ff       	call   c001378a <Clock::~Clock()>
c00137bd:	83 c4 10             	add    esp,0x10
c00137c0:	83 ec 08             	sub    esp,0x8
c00137c3:	68 58 01 00 00       	push   0x158
c00137c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137cc:	e8 ca ef ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00137d1:	83 c4 10             	add    esp,0x10
c00137d4:	83 c4 0c             	add    esp,0xc
c00137d7:	c3                   	ret    

c00137d8 <Clock::timeInSecondsLocal()>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 14             	sub    esp,0x14
c00137dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00137e2:	50                   	push   eax
c00137e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137e6:	0f b6 0d 3c e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e63c
c00137ed:	03 0d 40 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e640
c00137f3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137f9:	89 cb                	mov    ebx,ecx
c00137fb:	c1 fb 1f             	sar    ebx,0x1f
c00137fe:	01 c8                	add    eax,ecx
c0013800:	11 da                	adc    edx,ebx
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	31 c9                	xor    ecx,ecx
c0013807:	80 3d 3d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e63d,0x0
c001380e:	74 05                	je     c0013815 <Clock::timeInSecondsLocal()+0x3d>
c0013810:	b9 08 07 00 00       	mov    ecx,0x708
c0013815:	31 db                	xor    ebx,ebx
c0013817:	01 c8                	add    eax,ecx
c0013819:	11 da                	adc    edx,ebx
c001381b:	83 c4 08             	add    esp,0x8
c001381e:	5b                   	pop    ebx
c001381f:	c3                   	ret    

c0013820 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013820:	57                   	push   edi
c0013821:	56                   	push   esi
c0013822:	53                   	push   ebx
c0013823:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013827:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001382b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001382d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013831:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013834:	0f b6 05 3c e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e63c
c001383b:	03 05 40 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e640
c0013841:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013847:	99                   	cdq    
c0013848:	29 c6                	sub    esi,eax
c001384a:	19 d7                	sbb    edi,edx
c001384c:	89 f0                	mov    eax,esi
c001384e:	89 fa                	mov    edx,edi
c0013850:	31 f6                	xor    esi,esi
c0013852:	80 3d 3d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e63d,0x0
c0013859:	74 05                	je     c0013860 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001385b:	be 08 07 00 00       	mov    esi,0x708
c0013860:	31 ff                	xor    edi,edi
c0013862:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013866:	29 f0                	sub    eax,esi
c0013868:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001386c:	19 fa                	sbb    edx,edi
c001386e:	89 d8                	mov    eax,ebx
c0013870:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013874:	5b                   	pop    ebx
c0013875:	5e                   	pop    esi
c0013876:	5f                   	pop    edi
c0013877:	ff e0                	jmp    eax

c0013879 <datetimeToSeconds(datetime_t)>:
c0013879:	55                   	push   ebp
c001387a:	57                   	push   edi
c001387b:	56                   	push   esi
c001387c:	53                   	push   ebx
c001387d:	83 ec 14             	sub    esp,0x14
c0013880:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013884:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013888:	89 d3                	mov    ebx,edx
c001388a:	0f b6 c6             	movzx  eax,dh
c001388d:	c1 eb 10             	shr    ebx,0x10
c0013890:	48                   	dec    eax
c0013891:	66 81 eb 6c 07       	sub    bx,0x76c
c0013896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001389a:	0f b6 f5             	movzx  esi,ch
c001389d:	89 cf                	mov    edi,ecx
c001389f:	6b f6 3c             	imul   esi,esi,0x3c
c00138a2:	c1 ef 10             	shr    edi,0x10
c00138a5:	0f b6 c9             	movzx  ecx,cl
c00138a8:	89 f8                	mov    eax,edi
c00138aa:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138b0:	0f b6 f8             	movzx  edi,al
c00138b3:	0f b6 d2             	movzx  edx,dl
c00138b6:	01 fe                	add    esi,edi
c00138b8:	01 f1                	add    ecx,esi
c00138ba:	0f b7 f3             	movzx  esi,bx
c00138bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138c1:	c1 f9 1f             	sar    ecx,0x1f
c00138c4:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138cd:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138d2:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c00138d9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00138dd:	76 29                	jbe    c0013908 <datetimeToSeconds(datetime_t)+0x8f>
c00138df:	f6 c3 03             	test   bl,0x3
c00138e2:	75 24                	jne    c0013908 <datetimeToSeconds(datetime_t)+0x8f>
c00138e4:	31 d2                	xor    edx,edx
c00138e6:	bf 64 00 00 00       	mov    edi,0x64
c00138eb:	89 d8                	mov    eax,ebx
c00138ed:	66 f7 f7             	div    di
c00138f0:	66 85 d2             	test   dx,dx
c00138f3:	75 12                	jne    c0013907 <datetimeToSeconds(datetime_t)+0x8e>
c00138f5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138fb:	bf 90 01 00 00       	mov    edi,0x190
c0013900:	99                   	cdq    
c0013901:	f7 ff                	idiv   edi
c0013903:	85 d2                	test   edx,edx
c0013905:	75 01                	jne    c0013908 <datetimeToSeconds(datetime_t)+0x8f>
c0013907:	41                   	inc    ecx
c0013908:	66 83 fb 46          	cmp    bx,0x46
c001390c:	76 45                	jbe    c0013953 <datetimeToSeconds(datetime_t)+0xda>
c001390e:	bb 46 00 00 00       	mov    ebx,0x46
c0013913:	bf 64 00 00 00       	mov    edi,0x64
c0013918:	bd 90 01 00 00       	mov    ebp,0x190
c001391d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013922:	f6 c3 03             	test   bl,0x3
c0013925:	75 23                	jne    c001394a <datetimeToSeconds(datetime_t)+0xd1>
c0013927:	89 d8                	mov    eax,ebx
c0013929:	99                   	cdq    
c001392a:	f7 ff                	idiv   edi
c001392c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013931:	85 d2                	test   edx,edx
c0013933:	75 15                	jne    c001394a <datetimeToSeconds(datetime_t)+0xd1>
c0013935:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001393b:	99                   	cdq    
c001393c:	f7 fd                	idiv   ebp
c001393e:	83 fa 01             	cmp    edx,0x1
c0013941:	19 c0                	sbb    eax,eax
c0013943:	f7 d0                	not    eax
c0013945:	05 6e 01 00 00       	add    eax,0x16e
c001394a:	01 c1                	add    ecx,eax
c001394c:	43                   	inc    ebx
c001394d:	39 f3                	cmp    ebx,esi
c001394f:	7c cc                	jl     c001391d <datetimeToSeconds(datetime_t)+0xa4>
c0013951:	eb 35                	jmp    c0013988 <datetimeToSeconds(datetime_t)+0x10f>
c0013953:	74 33                	je     c0013988 <datetimeToSeconds(datetime_t)+0x10f>
c0013955:	b8 45 00 00 00       	mov    eax,0x45
c001395a:	89 c2                	mov    edx,eax
c001395c:	83 e2 03             	and    edx,0x3
c001395f:	39 f0                	cmp    eax,esi
c0013961:	7e 0f                	jle    c0013972 <datetimeToSeconds(datetime_t)+0xf9>
c0013963:	83 fa 01             	cmp    edx,0x1
c0013966:	19 d2                	sbb    edx,edx
c0013968:	48                   	dec    eax
c0013969:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013970:	eb e8                	jmp    c001395a <datetimeToSeconds(datetime_t)+0xe1>
c0013972:	b8 6d 01 00 00       	mov    eax,0x16d
c0013977:	85 d2                	test   edx,edx
c0013979:	75 0b                	jne    c0013986 <datetimeToSeconds(datetime_t)+0x10d>
c001397b:	66 83 fb 01          	cmp    bx,0x1
c001397f:	19 c0                	sbb    eax,eax
c0013981:	05 6e 01 00 00       	add    eax,0x16e
c0013986:	29 c1                	sub    ecx,eax
c0013988:	b8 80 51 01 00       	mov    eax,0x15180
c001398d:	f7 e9                	imul   ecx
c001398f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013993:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013997:	83 c4 14             	add    esp,0x14
c001399a:	5b                   	pop    ebx
c001399b:	5e                   	pop    esi
c001399c:	5f                   	pop    edi
c001399d:	5d                   	pop    ebp
c001399e:	c3                   	ret    
c001399f:	90                   	nop

c00139a0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139a0:	57                   	push   edi
c00139a1:	56                   	push   esi
c00139a2:	53                   	push   ebx
c00139a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00139a9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139b4:	e8 c0 fe ff ff       	call   c0013879 <datetimeToSeconds(datetime_t)>
c00139b9:	59                   	pop    ecx
c00139ba:	0f b6 0d 3c e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e63c
c00139c1:	5b                   	pop    ebx
c00139c2:	03 0d 40 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e640
c00139c8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139ce:	89 cb                	mov    ebx,ecx
c00139d0:	c1 fb 1f             	sar    ebx,0x1f
c00139d3:	29 c8                	sub    eax,ecx
c00139d5:	19 da                	sbb    edx,ebx
c00139d7:	31 c9                	xor    ecx,ecx
c00139d9:	80 3d 3d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e63d,0x0
c00139e0:	74 05                	je     c00139e7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00139e2:	b9 08 07 00 00       	mov    ecx,0x708
c00139e7:	31 db                	xor    ebx,ebx
c00139e9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139ed:	29 c8                	sub    eax,ecx
c00139ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139f3:	19 da                	sbb    edx,ebx
c00139f5:	89 f8                	mov    eax,edi
c00139f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139fb:	5b                   	pop    ebx
c00139fc:	5e                   	pop    esi
c00139fd:	5f                   	pop    edi
c00139fe:	ff e0                	jmp    eax

c0013a00 <secondsToDatetime(unsigned long long)>:
c0013a00:	55                   	push   ebp
c0013a01:	57                   	push   edi
c0013a02:	56                   	push   esi
c0013a03:	53                   	push   ebx
c0013a04:	83 ec 1c             	sub    esp,0x1c
c0013a07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a0b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a13:	6a 00                	push   0x0
c0013a15:	68 80 51 01 00       	push   0x15180
c0013a1a:	55                   	push   ebp
c0013a1b:	57                   	push   edi
c0013a1c:	e8 83 32 01 00       	call   c0026ca4 <__udivdi3>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a2e:	6a 00                	push   0x0
c0013a30:	68 80 51 01 00       	push   0x15180
c0013a35:	55                   	push   ebp
c0013a36:	57                   	push   edi
c0013a37:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a3c:	e8 63 33 01 00       	call   c0026da4 <__umoddi3>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	99                   	cdq    
c0013a45:	f7 ff                	idiv   edi
c0013a47:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a4c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a4f:	89 d0                	mov    eax,edx
c0013a51:	99                   	cdq    
c0013a52:	f7 ff                	idiv   edi
c0013a54:	85 db                	test   ebx,ebx
c0013a56:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a59:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a5c:	79 11                	jns    c0013a6f <secondsToDatetime(unsigned long long)+0x6f>
c0013a5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a62:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a68:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a6d:	eb 07                	jmp    c0013a76 <secondsToDatetime(unsigned long long)+0x76>
c0013a6f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a74:	89 d8                	mov    eax,ebx
c0013a76:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a7b:	99                   	cdq    
c0013a7c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a81:	f7 f9                	idiv   ecx
c0013a83:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a8c:	31 d2                	xor    edx,edx
c0013a8e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a96:	01 c3                	add    ebx,eax
c0013a98:	89 d8                	mov    eax,ebx
c0013a9a:	f7 f1                	div    ecx
c0013a9c:	31 d2                	xor    edx,edx
c0013a9e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013aa1:	89 d8                	mov    eax,ebx
c0013aa3:	f7 f7                	div    edi
c0013aa5:	31 d2                	xor    edx,edx
c0013aa7:	29 c1                	sub    ecx,eax
c0013aa9:	89 d8                	mov    eax,ebx
c0013aab:	f7 f5                	div    ebp
c0013aad:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013ab2:	29 c1                	sub    ecx,eax
c0013ab4:	31 d2                	xor    edx,edx
c0013ab6:	89 c8                	mov    eax,ecx
c0013ab8:	f7 f5                	div    ebp
c0013aba:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ac3:	31 d2                	xor    edx,edx
c0013ac5:	89 c8                	mov    eax,ecx
c0013ac7:	f7 f5                	div    ebp
c0013ac9:	31 d2                	xor    edx,edx
c0013acb:	01 c3                	add    ebx,eax
c0013acd:	89 c8                	mov    eax,ecx
c0013acf:	f7 f7                	div    edi
c0013ad1:	bf 99 00 00 00       	mov    edi,0x99
c0013ad6:	29 c3                	sub    ebx,eax
c0013ad8:	31 d2                	xor    edx,edx
c0013ada:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013ae2:	29 c3                	sub    ebx,eax
c0013ae4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ae7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013aea:	bb 05 00 00 00       	mov    ebx,0x5
c0013aef:	83 c1 02             	add    ecx,0x2
c0013af2:	89 c8                	mov    eax,ecx
c0013af4:	f7 f7                	div    edi
c0013af6:	31 d2                	xor    edx,edx
c0013af8:	89 c7                	mov    edi,eax
c0013afa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b00:	83 c0 02             	add    eax,0x2
c0013b03:	f7 f3                	div    ebx
c0013b05:	89 eb                	mov    ebx,ebp
c0013b07:	29 c3                	sub    ebx,eax
c0013b09:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b0f:	88 1e                	mov    BYTE PTR [esi],bl
c0013b11:	19 c0                	sbb    eax,eax
c0013b13:	31 d2                	xor    edx,edx
c0013b15:	83 e0 0c             	and    eax,0xc
c0013b18:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b1c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b24:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b28:	83 f9 01             	cmp    ecx,0x1
c0013b2b:	0f 96 c2             	setbe  dl
c0013b2e:	41                   	inc    ecx
c0013b2f:	01 d0                	add    eax,edx
c0013b31:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b34:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b38:	83 c4 1c             	add    esp,0x1c
c0013b3b:	89 f0                	mov    eax,esi
c0013b3d:	5b                   	pop    ebx
c0013b3e:	5e                   	pop    esi
c0013b3f:	5f                   	pop    edi
c0013b40:	5d                   	pop    ebp
c0013b41:	c2 04 00             	ret    0x4

c0013b44 <Clock::timeInDatetimeLocal()>:
c0013b44:	53                   	push   ebx
c0013b45:	83 ec 14             	sub    esp,0x14
c0013b48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b50:	e8 83 fc ff ff       	call   c00137d8 <Clock::timeInSecondsLocal()>
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	52                   	push   edx
c0013b59:	50                   	push   eax
c0013b5a:	53                   	push   ebx
c0013b5b:	e8 a0 fe ff ff       	call   c0013a00 <secondsToDatetime(unsigned long long)>
c0013b60:	89 d8                	mov    eax,ebx
c0013b62:	83 c4 14             	add    esp,0x14
c0013b65:	5b                   	pop    ebx
c0013b66:	c2 04 00             	ret    0x4
c0013b69:	90                   	nop

c0013b6a <Device::hibernate()>:
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <Device::wake()>:
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <Device::detect()>:
c0013b6e:	c3                   	ret    
c0013b6f:	90                   	nop

c0013b70 <Device::disableLegacy()>:
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <Device::powerSaving(PowerSavingLevel)>:
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <DriverlessDevice::close(int, int, void*)>:
c0013b74:	31 c0                	xor    eax,eax
c0013b76:	c3                   	ret    
c0013b77:	90                   	nop

c0013b78 <DriverlessDevice::detect()>:
c0013b78:	c3                   	ret    
c0013b79:	90                   	nop

c0013b7a <DriverlessDevice::open(int, int, void*)>:
c0013b7a:	83 ec 18             	sub    esp,0x18
c0013b7d:	68 70 b1 02 c0       	push   0xc002b170
c0013b82:	e8 9e 66 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0013b87:	83 c8 ff             	or     eax,0xffffffff
c0013b8a:	83 c4 1c             	add    esp,0x1c
c0013b8d:	c3                   	ret    

c0013b8e <Device::~Device()>:
c0013b8e:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c0013b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b97:	89 10                	mov    DWORD PTR [eax],edx
c0013b99:	90                   	nop
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <Device::~Device()>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ba3:	e8 e6 ff ff ff       	call   c0013b8e <Device::~Device()>
c0013ba8:	83 c4 04             	add    esp,0x4
c0013bab:	83 ec 08             	sub    esp,0x8
c0013bae:	68 58 01 00 00       	push   0x158
c0013bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb7:	e8 df eb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	83 c4 0c             	add    esp,0xc
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <Device::findAndLoadDriver()>:
c0013bc4:	c7 44 24 04 8e b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b18e
c0013bcc:	e9 ab ec ff ff       	jmp    c001287c <Dbg::kprintf(char const*, ...)>
c0013bd1:	90                   	nop

c0013bd2 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bd2:	57                   	push   edi
c0013bd3:	b9 09 00 00 00       	mov    ecx,0x9
c0013bd8:	56                   	push   esi
c0013bd9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013bdd:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013be1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013beb:	81 c7 18 01 00 00    	add    edi,0x118
c0013bf1:	fc                   	cld    
c0013bf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013bf4:	5e                   	pop    esi
c0013bf5:	5f                   	pop    edi
c0013bf6:	c3                   	ret    
c0013bf7:	90                   	nop

c0013bf8 <Device::preOpenACPI(void*, char*, char*)>:
c0013bf8:	57                   	push   edi
c0013bf9:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013bfe:	56                   	push   esi
c0013bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c07:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c11:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c17:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c23:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c28:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c2e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c34:	5e                   	pop    esi
c0013c35:	5f                   	pop    edi
c0013c36:	c3                   	ret    
c0013c37:	90                   	nop

c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c3c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c41:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c48:	75 0b                	jne    c0013c55 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c50:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c53:	eb 1e                	jmp    c0013c73 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c55:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0013c5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c60:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c66:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c68:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c70:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c73:	ff e0                	jmp    eax
c0013c75:	90                   	nop

c0013c76 <Device::getParent()>:
c0013c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c80:	c3                   	ret    
c0013c81:	90                   	nop

c0013c82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c86:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c8b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c92:	75 0b                	jne    c0013c9f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c9a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c9d:	eb 1e                	jmp    c0013cbd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c9f:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0013ca4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013caa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cba:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cbd:	ff e0                	jmp    eax
c0013cbf:	90                   	nop

c0013cc0 <Device::addChild(Device*)>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 08             	sub    esp,0x8
c0013cc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ccc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013cd2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013cd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013cda:	85 d2                	test   edx,edx
c0013cdc:	74 04                	je     c0013ce2 <Device::addChild(Device*)+0x22>
c0013cde:	89 d3                	mov    ebx,edx
c0013ce0:	eb f6                	jmp    c0013cd8 <Device::addChild(Device*)+0x18>
c0013ce2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	6a 08                	push   0x8
c0013cea:	e8 2c bb ff ff       	call   c000f81b <malloc>
c0013cef:	89 03                	mov    DWORD PTR [ebx],eax
c0013cf1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cfe:	83 c4 18             	add    esp,0x18
c0013d01:	5b                   	pop    ebx
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <Device::removeAllChildren()>:
c0013d04:	56                   	push   esi
c0013d05:	53                   	push   ebx
c0013d06:	52                   	push   edx
c0013d07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d0b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d14:	74 17                	je     c0013d2d <Device::removeAllChildren()+0x29>
c0013d16:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d19:	85 c0                	test   eax,eax
c0013d1b:	74 0c                	je     c0013d29 <Device::removeAllChildren()+0x25>
c0013d1d:	83 ec 0c             	sub    esp,0xc
c0013d20:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d22:	50                   	push   eax
c0013d23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d2b:	eb e4                	jmp    c0013d11 <Device::removeAllChildren()+0xd>
c0013d2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d39:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d46:	58                   	pop    eax
c0013d47:	5b                   	pop    ebx
c0013d48:	5e                   	pop    esi
c0013d49:	c3                   	ret    

c0013d4a <Device::hibernateAll()>:
c0013d4a:	53                   	push   ebx
c0013d4b:	83 ec 14             	sub    esp,0x14
c0013d4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d54:	53                   	push   ebx
c0013d55:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d64:	74 0f                	je     c0013d75 <Device::hibernateAll()+0x2b>
c0013d66:	83 ec 0c             	sub    esp,0xc
c0013d69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d6c:	e8 d9 ff ff ff       	call   c0013d4a <Device::hibernateAll()>
c0013d71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d73:	eb e9                	jmp    c0013d5e <Device::hibernateAll()+0x14>
c0013d75:	83 c4 08             	add    esp,0x8
c0013d78:	5b                   	pop    ebx
c0013d79:	c3                   	ret    

c0013d7a <Device::wakeAll()>:
c0013d7a:	53                   	push   ebx
c0013d7b:	83 ec 14             	sub    esp,0x14
c0013d7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d84:	53                   	push   ebx
c0013d85:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d94:	74 0f                	je     c0013da5 <Device::wakeAll()+0x2b>
c0013d96:	83 ec 0c             	sub    esp,0xc
c0013d99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d9c:	e8 d9 ff ff ff       	call   c0013d7a <Device::wakeAll()>
c0013da1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013da3:	eb e9                	jmp    c0013d8e <Device::wakeAll()+0x14>
c0013da5:	83 c4 08             	add    esp,0x8
c0013da8:	5b                   	pop    ebx
c0013da9:	c3                   	ret    

c0013daa <Device::detectAll()>:
c0013daa:	53                   	push   ebx
c0013dab:	83 ec 14             	sub    esp,0x14
c0013dae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013db4:	53                   	push   ebx
c0013db5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013db8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dc4:	74 0f                	je     c0013dd5 <Device::detectAll()+0x2b>
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dcc:	e8 d9 ff ff ff       	call   c0013daa <Device::detectAll()>
c0013dd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dd3:	eb e9                	jmp    c0013dbe <Device::detectAll()+0x14>
c0013dd5:	83 c4 08             	add    esp,0x8
c0013dd8:	5b                   	pop    ebx
c0013dd9:	c3                   	ret    

c0013dda <Device::disableLegacyAll()>:
c0013dda:	53                   	push   ebx
c0013ddb:	83 ec 14             	sub    esp,0x14
c0013dde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013de4:	53                   	push   ebx
c0013de5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013de8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dee:	83 c4 10             	add    esp,0x10
c0013df1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013df4:	74 0f                	je     c0013e05 <Device::disableLegacyAll()+0x2b>
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dfc:	e8 d9 ff ff ff       	call   c0013dda <Device::disableLegacyAll()>
c0013e01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e03:	eb e9                	jmp    c0013dee <Device::disableLegacyAll()+0x14>
c0013e05:	83 c4 08             	add    esp,0x8
c0013e08:	5b                   	pop    ebx
c0013e09:	c3                   	ret    

c0013e0a <Device::loadDriversForAll()>:
c0013e0a:	53                   	push   ebx
c0013e0b:	83 ec 08             	sub    esp,0x8
c0013e0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e12:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e19:	75 0c                	jne    c0013e27 <Device::loadDriversForAll()+0x1d>
c0013e1b:	83 ec 0c             	sub    esp,0xc
c0013e1e:	53                   	push   ebx
c0013e1f:	e8 a0 fd ff ff       	call   c0013bc4 <Device::findAndLoadDriver()>
c0013e24:	83 c4 10             	add    esp,0x10
c0013e27:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e30:	74 12                	je     c0013e44 <Device::loadDriversForAll()+0x3a>
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e38:	e8 cd ff ff ff       	call   c0013e0a <Device::loadDriversForAll()>
c0013e3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e3f:	83 c4 10             	add    esp,0x10
c0013e42:	eb e9                	jmp    c0013e2d <Device::loadDriversForAll()+0x23>
c0013e44:	83 c4 08             	add    esp,0x8
c0013e47:	5b                   	pop    ebx
c0013e48:	c3                   	ret    
c0013e49:	90                   	nop

c0013e4a <Device::closeAll()>:
c0013e4a:	53                   	push   ebx
c0013e4b:	83 ec 08             	sub    esp,0x8
c0013e4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e54:	6a 00                	push   0x0
c0013e56:	6a 00                	push   0x0
c0013e58:	6a 00                	push   0x0
c0013e5a:	53                   	push   ebx
c0013e5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e64:	83 c4 10             	add    esp,0x10
c0013e67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e6a:	74 0f                	je     c0013e7b <Device::closeAll()+0x31>
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e72:	e8 d3 ff ff ff       	call   c0013e4a <Device::closeAll()>
c0013e77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e79:	eb e9                	jmp    c0013e64 <Device::closeAll()+0x1a>
c0013e7b:	83 c4 08             	add    esp,0x8
c0013e7e:	5b                   	pop    ebx
c0013e7f:	c3                   	ret    

c0013e80 <Device::powerSavingAll(PowerSavingLevel)>:
c0013e80:	56                   	push   esi
c0013e81:	53                   	push   ebx
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e89:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e8f:	56                   	push   esi
c0013e90:	53                   	push   ebx
c0013e91:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e9a:	83 c4 10             	add    esp,0x10
c0013e9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea0:	74 0f                	je     c0013eb1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ea2:	52                   	push   edx
c0013ea3:	52                   	push   edx
c0013ea4:	56                   	push   esi
c0013ea5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea8:	e8 d3 ff ff ff       	call   c0013e80 <Device::powerSavingAll(PowerSavingLevel)>
c0013ead:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eaf:	eb e9                	jmp    c0013e9a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013eb1:	58                   	pop    eax
c0013eb2:	5b                   	pop    ebx
c0013eb3:	5e                   	pop    esi
c0013eb4:	c3                   	ret    
c0013eb5:	90                   	nop

c0013eb6 <Device::setName(char const*)>:
c0013eb6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ebe:	e9 49 c9 fe ff       	jmp    c000080c <strcpy>
c0013ec3:	90                   	nop

c0013ec4 <Device::Device(char const*)>:
c0013ec4:	83 ec 1c             	sub    esp,0x1c
c0013ec7:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c0013ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed0:	89 10                	mov    DWORD PTR [eax],edx
c0013ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f00:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f0a:	83 ec 08             	sub    esp,0x8
c0013f0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f15:	e8 9c ff ff ff       	call   c0013eb6 <Device::setName(char const*)>
c0013f1a:	83 c4 10             	add    esp,0x10
c0013f1d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f25:	83 ec 0c             	sub    esp,0xc
c0013f28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f2c:	e8 ea b8 ff ff       	call   c000f81b <malloc>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f45:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013fba:	90                   	nop
c0013fbb:	83 c4 1c             	add    esp,0x1c
c0013fbe:	c3                   	ret    
c0013fbf:	90                   	nop

c0013fc0 <Device::getName()>:
c0013fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fc4:	05 d0 00 00 00       	add    eax,0xd0
c0013fc9:	c3                   	ret    

c0013fca <DriverlessDevice::DriverlessDevice(char const*)>:
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd1:	83 ec 08             	sub    esp,0x8
c0013fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fd8:	50                   	push   eax
c0013fd9:	e8 e6 fe ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c0013fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fea:	89 10                	mov    DWORD PTR [eax],edx
c0013fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ffa:	90                   	nop
c0013ffb:	83 c4 0c             	add    esp,0xc
c0013ffe:	c3                   	ret    
c0013fff:	90                   	nop

c0014000 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014000:	57                   	push   edi
c0014001:	56                   	push   esi
c0014002:	53                   	push   ebx
c0014003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014007:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001400b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001400f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014015:	75 0c                	jne    c0014023 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014017:	52                   	push   edx
c0014018:	52                   	push   edx
c0014019:	53                   	push   ebx
c001401a:	56                   	push   esi
c001401b:	e8 c0 4b 01 00       	call   c0028be0 <LinkedList<Device>::addElement(Device*)>
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014029:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001402c:	74 12                	je     c0014040 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001402e:	50                   	push   eax
c001402f:	57                   	push   edi
c0014030:	56                   	push   esi
c0014031:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014034:	e8 c7 ff ff ff       	call   c0014000 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014039:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001403b:	83 c4 10             	add    esp,0x10
c001403e:	eb e9                	jmp    c0014029 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014040:	5b                   	pop    ebx
c0014041:	5e                   	pop    esi
c0014042:	5f                   	pop    edi
c0014043:	c3                   	ret    

c0014044 <getDevicesOfType(DeviceType)>:
c0014044:	53                   	push   ebx
c0014045:	83 ec 14             	sub    esp,0x14
c0014048:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001404c:	53                   	push   ebx
c001404d:	e8 6a 4c 01 00       	call   c0028cbc <LinkedList<Device>::LinkedList()>
c0014052:	83 c4 0c             	add    esp,0xc
c0014055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014059:	53                   	push   ebx
c001405a:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0014060:	e8 9b ff ff ff       	call   c0014000 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014065:	89 d8                	mov    eax,ebx
c0014067:	83 c4 18             	add    esp,0x18
c001406a:	5b                   	pop    ebx
c001406b:	c2 04 00             	ret    0x4

c001406e <HardDiskController::HardDiskController(char const*)>:
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014075:	83 ec 08             	sub    esp,0x8
c0014078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407c:	50                   	push   eax
c001407d:	e8 42 fe ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0014082:	83 c4 10             	add    esp,0x10
c0014085:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c001408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408e:	89 10                	mov    DWORD PTR [eax],edx
c0014090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014094:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001409e:	90                   	nop
c001409f:	83 c4 0c             	add    esp,0xc
c00140a2:	c3                   	ret    
c00140a3:	90                   	nop

c00140a4 <HardDiskController::~HardDiskController()>:
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00140ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b0:	89 10                	mov    DWORD PTR [eax],edx
c00140b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	50                   	push   eax
c00140ba:	e8 cf fa ff ff       	call   c0013b8e <Device::~Device()>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	90                   	nop
c00140c3:	83 c4 0c             	add    esp,0xc
c00140c6:	c3                   	ret    
c00140c7:	90                   	nop

c00140c8 <HardDiskController::~HardDiskController()>:
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	83 ec 0c             	sub    esp,0xc
c00140ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d2:	e8 cd ff ff ff       	call   c00140a4 <HardDiskController::~HardDiskController()>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	83 ec 08             	sub    esp,0x8
c00140dd:	68 58 01 00 00       	push   0x158
c00140e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140e6:	e8 b0 e6 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	83 c4 0c             	add    esp,0xc
c00140f1:	c3                   	ret    

c00140f2 <PhysicalDisk::eject()>:
c00140f2:	83 c8 ff             	or     eax,0xffffffff
c00140f5:	c3                   	ret    

c00140f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140f6:	83 ec 0c             	sub    esp,0xc
c00140f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fd:	83 ec 08             	sub    esp,0x8
c0014100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014104:	50                   	push   eax
c0014105:	e8 ba fd ff ff       	call   c0013ec4 <Device::Device(char const*)>
c001410a:	83 c4 10             	add    esp,0x10
c001410d:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0014112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014116:	89 10                	mov    DWORD PTR [eax],edx
c0014118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014127:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001413c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014140:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014144:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001414a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014158:	90                   	nop
c0014159:	83 c4 0c             	add    esp,0xc
c001415c:	c3                   	ret    
c001415d:	90                   	nop

c001415e <PhysicalDisk::startCache()>:
c001415e:	56                   	push   esi
c001415f:	53                   	push   ebx
c0014160:	83 ec 10             	sub    esp,0x10
c0014163:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014167:	6a 44                	push   0x44
c0014169:	e8 ad b6 ff ff       	call   c000f81b <malloc>
c001416e:	89 c6                	mov    esi,eax
c0014170:	58                   	pop    eax
c0014171:	5a                   	pop    edx
c0014172:	53                   	push   ebx
c0014173:	56                   	push   esi
c0014174:	e8 77 28 00 00       	call   c00169f0 <VCache::VCache(PhysicalDisk*)>
c0014179:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001417f:	83 c4 14             	add    esp,0x14
c0014182:	5b                   	pop    ebx
c0014183:	5e                   	pop    esi
c0014184:	c3                   	ret    
c0014185:	90                   	nop

c0014186 <PhysicalDisk::~PhysicalDisk()>:
c0014186:	83 ec 0c             	sub    esp,0xc
c0014189:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c001418e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014192:	89 10                	mov    DWORD PTR [eax],edx
c0014194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	50                   	push   eax
c001419c:	e8 ed f9 ff ff       	call   c0013b8e <Device::~Device()>
c00141a1:	83 c4 10             	add    esp,0x10
c00141a4:	90                   	nop
c00141a5:	83 c4 0c             	add    esp,0xc
c00141a8:	c3                   	ret    
c00141a9:	90                   	nop

c00141aa <PhysicalDisk::~PhysicalDisk()>:
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b4:	e8 cd ff ff ff       	call   c0014186 <PhysicalDisk::~PhysicalDisk()>
c00141b9:	83 c4 10             	add    esp,0x10
c00141bc:	83 ec 08             	sub    esp,0x8
c00141bf:	68 6c 01 00 00       	push   0x16c
c00141c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c8:	e8 ce e5 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00141cd:	83 c4 10             	add    esp,0x10
c00141d0:	83 c4 0c             	add    esp,0xc
c00141d3:	c3                   	ret    

c00141d4 <FPU::FPU(char const*)>:
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141db:	83 ec 08             	sub    esp,0x8
c00141de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141e2:	50                   	push   eax
c00141e3:	e8 dc fc ff ff       	call   c0013ec4 <Device::Device(char const*)>
c00141e8:	83 c4 10             	add    esp,0x10
c00141eb:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c00141f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f4:	89 10                	mov    DWORD PTR [eax],edx
c00141f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141fa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014204:	90                   	nop
c0014205:	83 c4 0c             	add    esp,0xc
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <FPU::~FPU()>:
c001420a:	83 ec 0c             	sub    esp,0xc
c001420d:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c0014212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014216:	89 10                	mov    DWORD PTR [eax],edx
c0014218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	50                   	push   eax
c0014220:	e8 69 f9 ff ff       	call   c0013b8e <Device::~Device()>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	90                   	nop
c0014229:	83 c4 0c             	add    esp,0xc
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <FPU::~FPU()>:
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	83 ec 0c             	sub    esp,0xc
c0014234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014238:	e8 cd ff ff ff       	call   c001420a <FPU::~FPU()>
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	83 ec 08             	sub    esp,0x8
c0014243:	68 58 01 00 00       	push   0x158
c0014248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424c:	e8 4a e5 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	83 c4 0c             	add    esp,0xc
c0014257:	c3                   	ret    

c0014258 <setupFPU()>:
c0014258:	53                   	push   ebx
c0014259:	83 ec 08             	sub    esp,0x8
c001425c:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c0014262:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014269:	74 19                	je     c0014284 <setupFPU()+0x2c>
c001426b:	83 ec 0c             	sub    esp,0xc
c001426e:	68 58 01 00 00       	push   0x158
c0014273:	e8 a3 b5 ff ff       	call   c000f81b <malloc>
c0014278:	89 c3                	mov    ebx,eax
c001427a:	89 04 24             	mov    DWORD PTR [esp],eax
c001427d:	e8 aa 15 01 00       	call   c002582c <AVX::AVX()>
c0014282:	eb 5b                	jmp    c00142df <setupFPU()+0x87>
c0014284:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001428a:	84 c0                	test   al,al
c001428c:	79 19                	jns    c00142a7 <setupFPU()+0x4f>
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	68 58 01 00 00       	push   0x158
c0014296:	e8 80 b5 ff ff       	call   c000f81b <malloc>
c001429b:	89 c3                	mov    ebx,eax
c001429d:	89 04 24             	mov    DWORD PTR [esp],eax
c00142a0:	e8 ad 16 01 00       	call   c0025952 <SSE::SSE()>
c00142a5:	eb 38                	jmp    c00142df <setupFPU()+0x87>
c00142a7:	a8 20                	test   al,0x20
c00142a9:	74 19                	je     c00142c4 <setupFPU()+0x6c>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	68 58 01 00 00       	push   0x158
c00142b3:	e8 63 b5 ff ff       	call   c000f81b <malloc>
c00142b8:	89 c3                	mov    ebx,eax
c00142ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00142bd:	e8 fa 15 01 00       	call   c00258bc <MMX::MMX()>
c00142c2:	eb 1b                	jmp    c00142df <setupFPU()+0x87>
c00142c4:	a8 10                	test   al,0x10
c00142c6:	74 1c                	je     c00142e4 <setupFPU()+0x8c>
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	68 58 01 00 00       	push   0x158
c00142d0:	e8 46 b5 ff ff       	call   c000f81b <malloc>
c00142d5:	89 c3                	mov    ebx,eax
c00142d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00142da:	e8 01 17 01 00       	call   c00259e0 <x87::x87()>
c00142df:	83 c4 10             	add    esp,0x10
c00142e2:	eb 24                	jmp    c0014308 <setupFPU()+0xb0>
c00142e4:	83 e0 ef             	and    eax,0xffffffef
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142f0:	68 84 b2 02 c0       	push   0xc002b284
c00142f5:	e8 82 e5 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00142fa:	0f 20 c0             	mov    eax,cr0
c00142fd:	83 c8 04             	or     eax,0x4
c0014300:	0f 22 c0             	mov    cr0,eax
c0014303:	31 db                	xor    ebx,ebx
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	89 d8                	mov    eax,ebx
c001430a:	83 c4 08             	add    esp,0x8
c001430d:	5b                   	pop    ebx
c001430e:	c3                   	ret    
c001430f:	90                   	nop

c0014310 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014310:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014314:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014318:	c1 e0 04             	shl    eax,0x4
c001431b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001431f:	8d 50 10             	lea    edx,[eax+0x10]
c0014322:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014328:	74 08                	je     c0014332 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001432a:	83 c0 04             	add    eax,0x4
c001432d:	39 d0                	cmp    eax,edx
c001432f:	75 f1                	jne    c0014322 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014331:	c3                   	ret    
c0014332:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001433c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014346:	eb e2                	jmp    c001432a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014348 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014348:	57                   	push   edi
c0014349:	31 c0                	xor    eax,eax
c001434b:	56                   	push   esi
c001434c:	53                   	push   ebx
c001434d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014351:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014355:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014359:	89 da                	mov    edx,ebx
c001435b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001435f:	c1 e2 04             	shl    edx,0x4
c0014362:	01 ca                	add    edx,ecx
c0014364:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001436c:	74 16                	je     c0014384 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001436e:	40                   	inc    eax
c001436f:	83 f8 04             	cmp    eax,0x4
c0014372:	75 f0                	jne    c0014364 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014374:	c7 44 24 10 c8 b2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b2c8
c001437c:	5b                   	pop    ebx
c001437d:	5e                   	pop    esi
c001437e:	5f                   	pop    edi
c001437f:	e9 a1 5e 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c0014384:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014387:	8d 04 81             	lea    eax,[ecx+eax*4]
c001438a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014390:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014396:	5b                   	pop    ebx
c0014397:	5e                   	pop    esi
c0014398:	5f                   	pop    edi
c0014399:	c3                   	ret    

c001439a <doubleFault(regs*, void*)>:
c001439a:	55                   	push   ebp
c001439b:	89 e5                	mov    ebp,esp
c001439d:	83 ec 08             	sub    esp,0x8
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	68 d5 b2 02 c0       	push   0xc002b2d5
c00143a8:	e8 78 5e 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00143ad:	83 c4 10             	add    esp,0x10
c00143b0:	90                   	nop
c00143b1:	c9                   	leave  
c00143b2:	c3                   	ret    
c00143b3:	90                   	nop

c00143b4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143b4:	56                   	push   esi
c00143b5:	53                   	push   ebx
c00143b6:	50                   	push   eax
c00143b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143bf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143c4:	75 35                	jne    c00143fb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143c6:	8d 43 20             	lea    eax,[ebx+0x20]
c00143c9:	31 d2                	xor    edx,edx
c00143cb:	89 c1                	mov    ecx,eax
c00143cd:	c1 e1 04             	shl    ecx,0x4
c00143d0:	01 f1                	add    ecx,esi
c00143d2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143da:	74 3e                	je     c001441a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143dc:	42                   	inc    edx
c00143dd:	83 fa 04             	cmp    edx,0x4
c00143e0:	75 f0                	jne    c00143d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	68 ef b2 02 c0       	push   0xc002b2ef
c00143ea:	e8 36 5e 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143f7:	5a                   	pop    edx
c00143f8:	5b                   	pop    ebx
c00143f9:	5e                   	pop    esi
c00143fa:	c3                   	ret    
c00143fb:	83 ec 0c             	sub    esp,0xc
c00143fe:	56                   	push   esi
c00143ff:	e8 bc fb ff ff       	call   c0013fc0 <Device::getName()>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001440a:	75 ba                	jne    c00143c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001440c:	83 fb 0f             	cmp    ebx,0xf
c001440f:	7f 29                	jg     c001443a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014411:	0f b6 9b 20 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd28e0]
c0014418:	eb ac                	jmp    c00143c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001441a:	8d 04 82             	lea    eax,[edx+eax*4]
c001441d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014421:	8d 04 86             	lea    eax,[esi+eax*4]
c0014424:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001442a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001442e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014434:	89 d8                	mov    eax,ebx
c0014436:	5a                   	pop    edx
c0014437:	5b                   	pop    ebx
c0014438:	5e                   	pop    esi
c0014439:	c3                   	ret    
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	68 e2 b2 02 c0       	push   0xc002b2e2
c0014442:	e8 de 5d 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	e9 77 ff ff ff       	jmp    c00143c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001444f:	90                   	nop

c0014450 <InterruptController::clearAllHandlers(int, bool)>:
c0014450:	56                   	push   esi
c0014451:	53                   	push   ebx
c0014452:	52                   	push   edx
c0014453:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014457:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001445b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014460:	75 61                	jne    c00144c3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014462:	8d 46 20             	lea    eax,[esi+0x20]
c0014465:	c1 e6 04             	shl    esi,0x4
c0014468:	c1 e0 04             	shl    eax,0x4
c001446b:	01 de                	add    esi,ebx
c001446d:	01 d8                	add    eax,ebx
c001446f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014479:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014483:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001448d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014497:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144a1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144ab:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144b5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144bf:	58                   	pop    eax
c00144c0:	5b                   	pop    ebx
c00144c1:	5e                   	pop    esi
c00144c2:	c3                   	ret    
c00144c3:	83 ec 0c             	sub    esp,0xc
c00144c6:	53                   	push   ebx
c00144c7:	e8 f4 fa ff ff       	call   c0013fc0 <Device::getName()>
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144d2:	75 8e                	jne    c0014462 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144d4:	83 fe 0f             	cmp    esi,0xf
c00144d7:	7f 09                	jg     c00144e2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144d9:	0f b6 b6 20 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd28e0]
c00144e0:	eb 80                	jmp    c0014462 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	68 fc b2 02 c0       	push   0xc002b2fc
c00144ea:	e8 36 5d 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00144ef:	83 c4 10             	add    esp,0x10
c00144f2:	e9 6b ff ff ff       	jmp    c0014462 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144f7:	90                   	nop

c00144f8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144f8:	56                   	push   esi
c00144f9:	53                   	push   ebx
c00144fa:	52                   	push   edx
c00144fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014503:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014508:	75 3a                	jne    c0014544 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001450a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001450e:	8d 50 20             	lea    edx,[eax+0x20]
c0014511:	c1 e2 04             	shl    edx,0x4
c0014514:	8d 04 16             	lea    eax,[esi+edx*1]
c0014517:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001451b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014521:	74 0b                	je     c001452e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014523:	83 c0 04             	add    eax,0x4
c0014526:	39 d0                	cmp    eax,edx
c0014528:	75 f1                	jne    c001451b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001452a:	58                   	pop    eax
c001452b:	5b                   	pop    ebx
c001452c:	5e                   	pop    esi
c001452d:	c3                   	ret    
c001452e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014538:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014542:	eb df                	jmp    c0014523 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014544:	83 ec 0c             	sub    esp,0xc
c0014547:	56                   	push   esi
c0014548:	e8 73 fa ff ff       	call   c0013fc0 <Device::getName()>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014553:	75 b5                	jne    c001450a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014555:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001455a:	7f 11                	jg     c001456d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001455c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014560:	0f b6 80 20 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd28e0]
c0014567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001456b:	eb 9d                	jmp    c001450a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001456d:	83 ec 0c             	sub    esp,0xc
c0014570:	68 09 b3 02 c0       	push   0xc002b309
c0014575:	e8 ab 5c 00 00       	call   c001a225 <Krnl::panic(char const*)>
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	eb 8b                	jmp    c001450a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001457f <nmiHandler(regs*, void*)>:
c001457f:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0014584:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014588:	e9 5f aa ff ff       	jmp    c000efec <Computer::handleNMI()>

c001458d <int_handler>:
c001458d:	55                   	push   ebp
c001458e:	57                   	push   edi
c001458f:	56                   	push   esi
c0014590:	53                   	push   ebx
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014598:	80 3d e4 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efe4,0x0
c001459f:	74 0b                	je     c00145ac <int_handler+0x1f>
c00145a1:	fa                   	cli    
c00145a2:	f4                   	hlt    
c00145a3:	80 3d e4 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efe4,0x0
c00145aa:	75 f5                	jne    c00145a1 <int_handler+0x14>
c00145ac:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00145b1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145ba:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145c0:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145c3:	83 f8 17             	cmp    eax,0x17
c00145c6:	77 13                	ja     c00145db <int_handler+0x4e>
c00145c8:	83 ec 08             	sub    esp,0x8
c00145cb:	8b 17                	mov    edx,DWORD PTR [edi]
c00145cd:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145d0:	0f b6 c0             	movzx  eax,al
c00145d3:	50                   	push   eax
c00145d4:	57                   	push   edi
c00145d5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145d8:	83 c4 10             	add    esp,0x10
c00145db:	83 c3 15             	add    ebx,0x15
c00145de:	c1 e3 04             	shl    ebx,0x4
c00145e1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145e5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00145ec:	31 db                	xor    ebx,ebx
c00145ee:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145f2:	85 c0                	test   eax,eax
c00145f4:	74 13                	je     c0014609 <int_handler+0x7c>
c00145f6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145f9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00145fd:	74 1c                	je     c001461b <int_handler+0x8e>
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	52                   	push   edx
c0014603:	56                   	push   esi
c0014604:	ff d0                	call   eax
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	43                   	inc    ebx
c001460a:	83 fb 04             	cmp    ebx,0x4
c001460d:	75 df                	jne    c00145ee <int_handler+0x61>
c001460f:	83 c4 0c             	add    esp,0xc
c0014612:	31 c0                	xor    eax,eax
c0014614:	5b                   	pop    ebx
c0014615:	31 d2                	xor    edx,edx
c0014617:	5e                   	pop    esi
c0014618:	5f                   	pop    edi
c0014619:	5d                   	pop    ebp
c001461a:	c3                   	ret    
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	52                   	push   edx
c001461f:	56                   	push   esi
c0014620:	ff d0                	call   eax
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	83 c4 0c             	add    esp,0xc
c0014628:	5b                   	pop    ebx
c0014629:	5e                   	pop    esi
c001462a:	5f                   	pop    edi
c001462b:	5d                   	pop    ebp
c001462c:	c3                   	ret    
c001462d:	90                   	nop

c001462e <InterruptController::InterruptController(char const*)>:
c001462e:	83 ec 1c             	sub    esp,0x1c
c0014631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014635:	83 ec 08             	sub    esp,0x8
c0014638:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001463c:	50                   	push   eax
c001463d:	e8 82 f8 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c001464a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464e:	89 10                	mov    DWORD PTR [eax],edx
c0014650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014654:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001465e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014666:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001466e:	7f 5e                	jg     c00146ce <InterruptController::InterruptController(char const*)+0xa0>
c0014670:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014678:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001467d:	7f 49                	jg     c00146c8 <InterruptController::InterruptController(char const*)+0x9a>
c001467f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014687:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001468e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014692:	01 ca                	add    edx,ecx
c0014694:	83 c2 54             	add    edx,0x54
c0014697:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001469f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146b2:	01 ca                	add    edx,ecx
c00146b4:	81 c2 54 04 00 00    	add    edx,0x454
c00146ba:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146c2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146c6:	eb b0                	jmp    c0014678 <InterruptController::InterruptController(char const*)+0x4a>
c00146c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146cc:	eb 98                	jmp    c0014666 <InterruptController::InterruptController(char const*)+0x38>
c00146ce:	90                   	nop
c00146cf:	83 c4 1c             	add    esp,0x1c
c00146d2:	c3                   	ret    
c00146d3:	90                   	nop

c00146d4 <InterruptController::~InterruptController()>:
c00146d4:	83 ec 0c             	sub    esp,0xc
c00146d7:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	89 10                	mov    DWORD PTR [eax],edx
c00146e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	50                   	push   eax
c00146ea:	e8 9f f4 ff ff       	call   c0013b8e <Device::~Device()>
c00146ef:	83 c4 10             	add    esp,0x10
c00146f2:	90                   	nop
c00146f3:	83 c4 0c             	add    esp,0xc
c00146f6:	c3                   	ret    
c00146f7:	90                   	nop

c00146f8 <InterruptController::~InterruptController()>:
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	83 ec 0c             	sub    esp,0xc
c00146fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014702:	e8 cd ff ff ff       	call   c00146d4 <InterruptController::~InterruptController()>
c0014707:	83 c4 10             	add    esp,0x10
c001470a:	83 ec 08             	sub    esp,0x8
c001470d:	68 58 21 00 00       	push   0x2158
c0014712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014716:	e8 80 e0 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001471b:	83 c4 10             	add    esp,0x10
c001471e:	83 c4 0c             	add    esp,0xc
c0014721:	c3                   	ret    

c0014722 <displayDebugInfo(regs*)>:
c0014722:	55                   	push   ebp
c0014723:	57                   	push   edi
c0014724:	56                   	push   esi
c0014725:	53                   	push   ebx
c0014726:	83 ec 24             	sub    esp,0x24
c0014729:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001472d:	0f 20 c2             	mov    edx,cr0
c0014730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014734:	0f 20 d7             	mov    edi,cr2
c0014737:	0f 20 de             	mov    esi,cr3
c001473a:	0f 20 e5             	mov    ebp,cr4
c001473d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014740:	68 16 b3 02 c0       	push   0xc002b316
c0014745:	e8 32 e1 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001474a:	59                   	pop    ecx
c001474b:	58                   	pop    eax
c001474c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001474f:	68 21 b3 02 c0       	push   0xc002b321
c0014754:	e8 23 e1 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014759:	58                   	pop    eax
c001475a:	5a                   	pop    edx
c001475b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001475e:	68 2c b3 02 c0       	push   0xc002b32c
c0014763:	e8 14 e1 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014768:	59                   	pop    ecx
c0014769:	58                   	pop    eax
c001476a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001476d:	68 37 b3 02 c0       	push   0xc002b337
c0014772:	e8 05 e1 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014777:	58                   	pop    eax
c0014778:	5a                   	pop    edx
c0014779:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001477c:	68 42 b3 02 c0       	push   0xc002b342
c0014781:	e8 f6 e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014786:	59                   	pop    ecx
c0014787:	58                   	pop    eax
c0014788:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001478b:	68 4d b3 02 c0       	push   0xc002b34d
c0014790:	e8 e7 e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014795:	58                   	pop    eax
c0014796:	5a                   	pop    edx
c0014797:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001479a:	68 58 b3 02 c0       	push   0xc002b358
c001479f:	e8 d8 e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147a4:	59                   	pop    ecx
c00147a5:	58                   	pop    eax
c00147a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147a9:	68 63 b3 02 c0       	push   0xc002b363
c00147ae:	e8 c9 e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147b3:	58                   	pop    eax
c00147b4:	5a                   	pop    edx
c00147b5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147b8:	68 6e b3 02 c0       	push   0xc002b36e
c00147bd:	e8 ba e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147c2:	59                   	pop    ecx
c00147c3:	58                   	pop    eax
c00147c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147c7:	68 7d b3 02 c0       	push   0xc002b37d
c00147cc:	e8 ab e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147d1:	58                   	pop    eax
c00147d2:	5a                   	pop    edx
c00147d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147d6:	68 88 b3 02 c0       	push   0xc002b388
c00147db:	e8 9c e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147e0:	59                   	pop    ecx
c00147e1:	58                   	pop    eax
c00147e2:	57                   	push   edi
c00147e3:	68 93 b3 02 c0       	push   0xc002b393
c00147e8:	e8 8f e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147ed:	58                   	pop    eax
c00147ee:	5a                   	pop    edx
c00147ef:	56                   	push   esi
c00147f0:	68 9e b3 02 c0       	push   0xc002b39e
c00147f5:	e8 82 e0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00147fa:	59                   	pop    ecx
c00147fb:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014800:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014806:	e8 ca bd ff ff       	call   c00105d5 <setActiveTerminal(VgaText*)>
c001480b:	58                   	pop    eax
c001480c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001480f:	5a                   	pop    edx
c0014810:	c1 e0 05             	shl    eax,0x5
c0014813:	05 80 d4 02 c0       	add    eax,0xc002d480
c0014818:	50                   	push   eax
c0014819:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001481e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014824:	e8 b9 c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014829:	59                   	pop    ecx
c001482a:	58                   	pop    eax
c001482b:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014830:	68 a9 b3 02 c0       	push   0xc002b3a9
c0014835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483b:	e8 a2 c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014840:	58                   	pop    eax
c0014841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014846:	5a                   	pop    edx
c0014847:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001484a:	83 c0 0c             	add    eax,0xc
c001484d:	50                   	push   eax
c001484e:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014859:	e8 84 c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001485e:	59                   	pop    ecx
c001485f:	58                   	pop    eax
c0014860:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014865:	68 b2 b3 02 c0       	push   0xc002b3b2
c001486a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014870:	e8 6d c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014875:	58                   	pop    eax
c0014876:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001487b:	5a                   	pop    edx
c001487c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001487f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014885:	e8 12 c2 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001488a:	59                   	pop    ecx
c001488b:	58                   	pop    eax
c001488c:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014891:	68 ba b3 02 c0       	push   0xc002b3ba
c0014896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489c:	e8 41 c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00148a1:	58                   	pop    eax
c00148a2:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00148a7:	5a                   	pop    edx
c00148a8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b1:	e8 e6 c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c00148b6:	59                   	pop    ecx
c00148b7:	58                   	pop    eax
c00148b8:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00148bd:	68 c2 b3 02 c0       	push   0xc002b3c2
c00148c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c8:	e8 15 c2 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00148cd:	58                   	pop    eax
c00148ce:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00148d3:	5a                   	pop    edx
c00148d4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dd:	e8 ba c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c00148e2:	59                   	pop    ecx
c00148e3:	58                   	pop    eax
c00148e4:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00148e9:	68 ca b3 02 c0       	push   0xc002b3ca
c00148ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f4:	e8 e9 c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00148f9:	58                   	pop    eax
c00148fa:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00148ff:	5a                   	pop    edx
c0014900:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014903:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014909:	e8 8e c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001490e:	59                   	pop    ecx
c001490f:	58                   	pop    eax
c0014910:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014915:	68 d2 b3 02 c0       	push   0xc002b3d2
c001491a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014920:	e8 bd c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014925:	58                   	pop    eax
c0014926:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001492b:	5a                   	pop    edx
c001492c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001492f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014935:	e8 62 c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001493a:	59                   	pop    ecx
c001493b:	58                   	pop    eax
c001493c:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014941:	68 da b3 02 c0       	push   0xc002b3da
c0014946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494c:	e8 91 c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014951:	58                   	pop    eax
c0014952:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014957:	5a                   	pop    edx
c0014958:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001495b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014961:	e8 36 c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014966:	59                   	pop    ecx
c0014967:	58                   	pop    eax
c0014968:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001496d:	68 e2 b3 02 c0       	push   0xc002b3e2
c0014972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014978:	e8 65 c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001497d:	58                   	pop    eax
c001497e:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014983:	5a                   	pop    edx
c0014984:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014988:	52                   	push   edx
c0014989:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498f:	e8 08 c1 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014994:	59                   	pop    ecx
c0014995:	58                   	pop    eax
c0014996:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001499b:	68 eb b3 02 c0       	push   0xc002b3eb
c00149a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a6:	e8 37 c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00149ab:	58                   	pop    eax
c00149ac:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00149b1:	5a                   	pop    edx
c00149b2:	57                   	push   edi
c00149b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b9:	e8 de c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c00149be:	59                   	pop    ecx
c00149bf:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00149c4:	5f                   	pop    edi
c00149c5:	68 f3 b3 02 c0       	push   0xc002b3f3
c00149ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d0:	e8 0d c1 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00149d5:	58                   	pop    eax
c00149d6:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00149db:	5a                   	pop    edx
c00149dc:	56                   	push   esi
c00149dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e3:	e8 b4 c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c00149e8:	59                   	pop    ecx
c00149e9:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00149ee:	5e                   	pop    esi
c00149ef:	68 fb b3 02 c0       	push   0xc002b3fb
c00149f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fa:	e8 e3 c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c00149ff:	5f                   	pop    edi
c0014a00:	58                   	pop    eax
c0014a01:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a06:	55                   	push   ebp
c0014a07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0d:	e8 8a c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014a12:	58                   	pop    eax
c0014a13:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a18:	5a                   	pop    edx
c0014a19:	68 03 b4 02 c0       	push   0xc002b403
c0014a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a24:	e8 b9 c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014a29:	0f 21 c0             	mov    eax,db0
c0014a2c:	59                   	pop    ecx
c0014a2d:	5e                   	pop    esi
c0014a2e:	50                   	push   eax
c0014a2f:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3a:	e8 5d c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014a3f:	5f                   	pop    edi
c0014a40:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a45:	5d                   	pop    ebp
c0014a46:	68 0c b4 02 c0       	push   0xc002b40c
c0014a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a51:	e8 8c c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014a56:	0f 21 c8             	mov    eax,db1
c0014a59:	5a                   	pop    edx
c0014a5a:	59                   	pop    ecx
c0014a5b:	50                   	push   eax
c0014a5c:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 30 c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014a6c:	5e                   	pop    esi
c0014a6d:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a72:	5f                   	pop    edi
c0014a73:	68 14 b4 02 c0       	push   0xc002b414
c0014a78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7e:	e8 5f c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014a83:	0f 21 d0             	mov    eax,db2
c0014a86:	5d                   	pop    ebp
c0014a87:	5a                   	pop    edx
c0014a88:	50                   	push   eax
c0014a89:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a94:	e8 03 c0 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014a99:	59                   	pop    ecx
c0014a9a:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014a9f:	5e                   	pop    esi
c0014aa0:	68 1c b4 02 c0       	push   0xc002b41c
c0014aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aab:	e8 32 c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014ab0:	0f 21 d8             	mov    eax,db3
c0014ab3:	5f                   	pop    edi
c0014ab4:	5d                   	pop    ebp
c0014ab5:	50                   	push   eax
c0014ab6:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014abb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac1:	e8 d6 bf ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014ac6:	58                   	pop    eax
c0014ac7:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014acc:	5a                   	pop    edx
c0014acd:	68 24 b4 02 c0       	push   0xc002b424
c0014ad2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad8:	e8 05 c0 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014add:	0f 21 f0             	mov    eax,db6
c0014ae0:	59                   	pop    ecx
c0014ae1:	5e                   	pop    esi
c0014ae2:	50                   	push   eax
c0014ae3:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aee:	e8 a9 bf ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014af3:	5f                   	pop    edi
c0014af4:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014af9:	5d                   	pop    ebp
c0014afa:	68 2c b4 02 c0       	push   0xc002b42c
c0014aff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b05:	e8 d8 bf ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014b0a:	0f 21 f8             	mov    eax,db7
c0014b0d:	5a                   	pop    edx
c0014b0e:	59                   	pop    ecx
c0014b0f:	50                   	push   eax
c0014b10:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 7c bf ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014b20:	5e                   	pop    esi
c0014b21:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b24:	e8 78 88 00 00       	call   c001d3a1 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b29:	83 c4 10             	add    esp,0x10
c0014b2c:	85 c0                	test   eax,eax
c0014b2e:	74 7d                	je     c0014bad <displayDebugInfo(regs*)+0x48b>
c0014b30:	89 c6                	mov    esi,eax
c0014b32:	50                   	push   eax
c0014b33:	50                   	push   eax
c0014b34:	56                   	push   esi
c0014b35:	68 34 b4 02 c0       	push   0xc002b434
c0014b3a:	e8 3d dd ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014b3f:	5a                   	pop    edx
c0014b40:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014b45:	59                   	pop    ecx
c0014b46:	68 42 b4 02 c0       	push   0xc002b442
c0014b4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b51:	e8 8c bf ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014b56:	5f                   	pop    edi
c0014b57:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014b5c:	5d                   	pop    ebp
c0014b5d:	56                   	push   esi
c0014b5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b64:	e8 79 bf ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014b69:	58                   	pop    eax
c0014b6a:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014b6f:	5a                   	pop    edx
c0014b70:	68 4e b4 02 c0       	push   0xc002b44e
c0014b75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7b:	e8 62 bf ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c0014b80:	59                   	pop    ecx
c0014b81:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0014b86:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b8f:	e8 44 88 00 00       	call   c001d3d8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b94:	5b                   	pop    ebx
c0014b95:	5d                   	pop    ebp
c0014b96:	50                   	push   eax
c0014b97:	57                   	push   edi
c0014b98:	e8 ff be ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c0014b9d:	58                   	pop    eax
c0014b9e:	5a                   	pop    edx
c0014b9f:	56                   	push   esi
c0014ba0:	68 5a b4 02 c0       	push   0xc002b45a
c0014ba5:	e8 d2 dc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014baa:	83 c4 10             	add    esp,0x10
c0014bad:	fa                   	cli    
c0014bae:	f4                   	hlt    
c0014baf:	eb fe                	jmp    c0014baf <displayDebugInfo(regs*)+0x48d>

c0014bb1 <x87EmulHandler(regs*, void*)>:
c0014bb1:	83 ec 0c             	sub    esp,0xc
c0014bb4:	0f 20 c2             	mov    edx,cr0
c0014bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bbc:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014bc0:	75 4b                	jne    c0014c0d <x87EmulHandler(regs*, void*)+0x5c>
c0014bc2:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0014bc7:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014bcd:	85 c0                	test   eax,eax
c0014bcf:	74 05                	je     c0014bd6 <x87EmulHandler(regs*, void*)+0x25>
c0014bd1:	83 e2 08             	and    edx,0x8
c0014bd4:	75 17                	jne    c0014bed <x87EmulHandler(regs*, void*)+0x3c>
c0014bd6:	83 ec 0c             	sub    esp,0xc
c0014bd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bdd:	e8 a5 ab 00 00       	call   c001f787 <Vm::x87Handler(regs*)>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	84 c0                	test   al,al
c0014be7:	74 24                	je     c0014c0d <x87EmulHandler(regs*, void*)+0x5c>
c0014be9:	83 c4 0c             	add    esp,0xc
c0014bec:	c3                   	ret    
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	68 80 b4 02 c0       	push   0xc002b480
c0014bf5:	e8 82 dc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014bfa:	0f 06                	clts   
c0014bfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c01:	83 c4 10             	add    esp,0x10
c0014c04:	a3 48 e6 02 c0       	mov    ds:0xc002e648,eax
c0014c09:	83 c4 0c             	add    esp,0xc
c0014c0c:	c3                   	ret    
c0014c0d:	83 ec 0c             	sub    esp,0xc
c0014c10:	68 6a b4 02 c0       	push   0xc002b46a
c0014c15:	e8 62 dc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014c1a:	5a                   	pop    edx
c0014c1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c1f:	e8 fe fa ff ff       	call   c0014722 <displayDebugInfo(regs*)>

c0014c24 <gpFault(regs*, void*)>:
c0014c24:	53                   	push   ebx
c0014c25:	83 ec 14             	sub    esp,0x14
c0014c28:	c7 05 44 e6 02 c0 60 ec 01 c0 	mov    DWORD PTR ds:0xc002e644,0xc001ec60
c0014c32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c36:	53                   	push   ebx
c0014c37:	e8 24 a0 00 00       	call   c001ec60 <Vm::faultHandler(regs*)>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	84 c0                	test   al,al
c0014c41:	74 05                	je     c0014c48 <gpFault(regs*, void*)+0x24>
c0014c43:	83 c4 08             	add    esp,0x8
c0014c46:	5b                   	pop    ebx
c0014c47:	c3                   	ret    
c0014c48:	83 ec 0c             	sub    esp,0xc
c0014c4b:	68 8d b4 02 c0       	push   0xc002b48d
c0014c50:	e8 27 dc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014c55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c58:	e8 c5 fa ff ff       	call   c0014722 <displayDebugInfo(regs*)>

c0014c5d <pgFault(regs*, void*)>:
c0014c5d:	53                   	push   ebx
c0014c5e:	83 ec 10             	sub    esp,0x10
c0014c61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c65:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c68:	68 a8 b4 02 c0       	push   0xc002b4a8
c0014c6d:	e8 0a dc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014c72:	0f 20 d0             	mov    eax,cr2
c0014c75:	5a                   	pop    edx
c0014c76:	59                   	pop    ecx
c0014c77:	50                   	push   eax
c0014c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c80:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014c86:	e8 ef d6 ff ff       	call   c001237a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	84 c0                	test   al,al
c0014c90:	74 05                	je     c0014c97 <pgFault(regs*, void*)+0x3a>
c0014c92:	83 c4 08             	add    esp,0x8
c0014c95:	5b                   	pop    ebx
c0014c96:	c3                   	ret    
c0014c97:	83 ec 0c             	sub    esp,0xc
c0014c9a:	68 bd b4 02 c0       	push   0xc002b4bd
c0014c9f:	e8 d8 db ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014ca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ca7:	e8 76 fa ff ff       	call   c0014722 <displayDebugInfo(regs*)>

c0014cac <otherISRHandler(regs*, void*)>:
c0014cac:	53                   	push   ebx
c0014cad:	83 ec 0c             	sub    esp,0xc
c0014cb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cb4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cb7:	50                   	push   eax
c0014cb8:	50                   	push   eax
c0014cb9:	68 ca b4 02 c0       	push   0xc002b4ca
c0014cbe:	e8 b9 db ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cc6:	e8 57 fa ff ff       	call   c0014722 <displayDebugInfo(regs*)>

c0014ccb <opcodeFault(regs*, void*)>:
c0014ccb:	55                   	push   ebp
c0014ccc:	89 e5                	mov    ebp,esp
c0014cce:	56                   	push   esi
c0014ccf:	53                   	push   ebx
c0014cd0:	83 ec 40             	sub    esp,0x40
c0014cd3:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0014cd8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cde:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ce4:	84 c0                	test   al,al
c0014ce6:	74 24                	je     c0014d0c <opcodeFault(regs*, void*)+0x41>
c0014ce8:	83 ec 0c             	sub    esp,0xc
c0014ceb:	68 e8 b4 02 c0       	push   0xc002b4e8
c0014cf0:	e8 87 db ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cfe:	8d 50 19             	lea    edx,[eax+0x19]
c0014d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d07:	e9 d5 05 00 00       	jmp    c00152e1 <opcodeFault(regs*, void*)+0x616>
c0014d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d15:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d19:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d23:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d29:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2b:	3c f0                	cmp    al,0xf0
c0014d2d:	75 17                	jne    c0014d46 <opcodeFault(regs*, void*)+0x7b>
c0014d2f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d38:	8d 50 01             	lea    edx,[eax+0x1]
c0014d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d41:	e9 da 00 00 00       	jmp    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d49:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4b:	3c f2                	cmp    al,0xf2
c0014d4d:	74 09                	je     c0014d58 <opcodeFault(regs*, void*)+0x8d>
c0014d4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d52:	8a 00                	mov    al,BYTE PTR [eax]
c0014d54:	3c f3                	cmp    al,0xf3
c0014d56:	75 1b                	jne    c0014d73 <opcodeFault(regs*, void*)+0xa8>
c0014d58:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d65:	8d 50 01             	lea    edx,[eax+0x1]
c0014d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d6e:	e9 ad 00 00 00       	jmp    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d76:	8a 00                	mov    al,BYTE PTR [eax]
c0014d78:	3c 66                	cmp    al,0x66
c0014d7a:	75 1f                	jne    c0014d9b <opcodeFault(regs*, void*)+0xd0>
c0014d7c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d80:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d8d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d93:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d96:	e9 85 00 00 00       	jmp    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014d9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9e:	8a 00                	mov    al,BYTE PTR [eax]
c0014da0:	3c 67                	cmp    al,0x67
c0014da2:	75 18                	jne    c0014dbc <opcodeFault(regs*, void*)+0xf1>
c0014da4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db1:	8d 50 01             	lea    edx,[eax+0x1]
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dba:	eb 64                	jmp    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014dbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc1:	3c 2e                	cmp    al,0x2e
c0014dc3:	74 09                	je     c0014dce <opcodeFault(regs*, void*)+0x103>
c0014dc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dca:	3c 3e                	cmp    al,0x3e
c0014dcc:	75 18                	jne    c0014de6 <opcodeFault(regs*, void*)+0x11b>
c0014dce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dd2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de4:	eb 3a                	jmp    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014de6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de9:	8a 00                	mov    al,BYTE PTR [eax]
c0014deb:	3c 36                	cmp    al,0x36
c0014ded:	74 1b                	je     c0014e0a <opcodeFault(regs*, void*)+0x13f>
c0014def:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df2:	8a 00                	mov    al,BYTE PTR [eax]
c0014df4:	3c 26                	cmp    al,0x26
c0014df6:	74 12                	je     c0014e0a <opcodeFault(regs*, void*)+0x13f>
c0014df8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c 64                	cmp    al,0x64
c0014dff:	74 09                	je     c0014e0a <opcodeFault(regs*, void*)+0x13f>
c0014e01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e04:	8a 00                	mov    al,BYTE PTR [eax]
c0014e06:	3c 65                	cmp    al,0x65
c0014e08:	75 16                	jne    c0014e20 <opcodeFault(regs*, void*)+0x155>
c0014e0a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e0e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e17:	8d 50 01             	lea    edx,[eax+0x1]
c0014e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e23:	8a 00                	mov    al,BYTE PTR [eax]
c0014e25:	3c 0f                	cmp    al,0xf
c0014e27:	0f 85 ad 00 00 00    	jne    c0014eda <opcodeFault(regs*, void*)+0x20f>
c0014e2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e30:	40                   	inc    eax
c0014e31:	8a 00                	mov    al,BYTE PTR [eax]
c0014e33:	3c c2                	cmp    al,0xc2
c0014e35:	74 0e                	je     c0014e45 <opcodeFault(regs*, void*)+0x17a>
c0014e37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3a:	40                   	inc    eax
c0014e3b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e3d:	3c c3                	cmp    al,0xc3
c0014e3f:	0f 85 95 00 00 00    	jne    c0014eda <opcodeFault(regs*, void*)+0x20f>
c0014e45:	83 ec 0c             	sub    esp,0xc
c0014e48:	68 0b b5 02 c0       	push   0xc002b50b
c0014e4d:	e8 2a da ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e72:	88 10                	mov    BYTE PTR [eax],dl
c0014e74:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e77:	50                   	push   eax
c0014e78:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e7b:	50                   	push   eax
c0014e7c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e7f:	50                   	push   eax
c0014e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e83:	e8 b6 4a 00 00       	call   c001993e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e91:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e94:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e97:	01 d0                	add    eax,edx
c0014e99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ea5:	48                   	dec    eax
c0014ea6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014eaf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb5:	83 ec 04             	sub    esp,0x4
c0014eb8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ebb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ebe:	50                   	push   eax
c0014ebf:	e8 f0 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014eca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ecd:	01 c2                	add    edx,eax
c0014ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed5:	e9 07 04 00 00       	jmp    c00152e1 <opcodeFault(regs*, void*)+0x616>
c0014eda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014edd:	8a 00                	mov    al,BYTE PTR [eax]
c0014edf:	3c 0f                	cmp    al,0xf
c0014ee1:	0f 85 8b 01 00 00    	jne    c0015072 <opcodeFault(regs*, void*)+0x3a7>
c0014ee7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eea:	40                   	inc    eax
c0014eeb:	8a 00                	mov    al,BYTE PTR [eax]
c0014eed:	3c c7                	cmp    al,0xc7
c0014eef:	0f 86 7d 01 00 00    	jbe    c0015072 <opcodeFault(regs*, void*)+0x3a7>
c0014ef5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef8:	40                   	inc    eax
c0014ef9:	8a 00                	mov    al,BYTE PTR [eax]
c0014efb:	3c cf                	cmp    al,0xcf
c0014efd:	0f 87 6f 01 00 00    	ja     c0015072 <opcodeFault(regs*, void*)+0x3a7>
c0014f03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f06:	40                   	inc    eax
c0014f07:	8a 00                	mov    al,BYTE PTR [eax]
c0014f09:	83 c0 38             	add    eax,0x38
c0014f0c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f0f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f13:	75 0b                	jne    c0014f20 <opcodeFault(regs*, void*)+0x255>
c0014f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f18:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f1e:	eb 75                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f20:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f24:	75 0b                	jne    c0014f31 <opcodeFault(regs*, void*)+0x266>
c0014f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f29:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f2c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2f:	eb 64                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f31:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f35:	75 0b                	jne    c0014f42 <opcodeFault(regs*, void*)+0x277>
c0014f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f40:	eb 53                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f42:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f46:	75 0b                	jne    c0014f53 <opcodeFault(regs*, void*)+0x288>
c0014f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f51:	eb 42                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f53:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f57:	75 0b                	jne    c0014f64 <opcodeFault(regs*, void*)+0x299>
c0014f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f62:	eb 31                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f64:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f68:	75 0b                	jne    c0014f75 <opcodeFault(regs*, void*)+0x2aa>
c0014f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f73:	eb 20                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f75:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f79:	75 0b                	jne    c0014f86 <opcodeFault(regs*, void*)+0x2bb>
c0014f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f84:	eb 0f                	jmp    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f86:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f8a:	75 09                	jne    c0014f95 <opcodeFault(regs*, void*)+0x2ca>
c0014f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f95:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f99:	74 10                	je     c0014fab <opcodeFault(regs*, void*)+0x2e0>
c0014f9b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fa2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fa9:	eb 2d                	jmp    c0014fd8 <opcodeFault(regs*, void*)+0x30d>
c0014fab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fae:	c1 e0 18             	shl    eax,0x18
c0014fb1:	89 c2                	mov    edx,eax
c0014fb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fb6:	c1 e0 08             	shl    eax,0x8
c0014fb9:	25 00 00 ff 00       	and    eax,0xff0000
c0014fbe:	09 c2                	or     edx,eax
c0014fc0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fc3:	c1 e8 08             	shr    eax,0x8
c0014fc6:	25 00 ff 00 00       	and    eax,0xff00
c0014fcb:	09 c2                	or     edx,eax
c0014fcd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fd0:	c1 e8 18             	shr    eax,0x18
c0014fd3:	09 d0                	or     eax,edx
c0014fd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fd8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fdc:	75 0b                	jne    c0014fe9 <opcodeFault(regs*, void*)+0x31e>
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fe7:	eb 75                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c0014fe9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fed:	75 0b                	jne    c0014ffa <opcodeFault(regs*, void*)+0x32f>
c0014fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ff8:	eb 64                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c0014ffa:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ffe:	75 0b                	jne    c001500b <opcodeFault(regs*, void*)+0x340>
c0015000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015003:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015006:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015009:	eb 53                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c001500b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001500f:	75 0b                	jne    c001501c <opcodeFault(regs*, void*)+0x351>
c0015011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015014:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015017:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001501a:	eb 42                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c001501c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015020:	75 0b                	jne    c001502d <opcodeFault(regs*, void*)+0x362>
c0015022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015025:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015028:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001502b:	eb 31                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c001502d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015031:	75 0b                	jne    c001503e <opcodeFault(regs*, void*)+0x373>
c0015033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015036:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015039:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001503c:	eb 20                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c001503e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015042:	75 0b                	jne    c001504f <opcodeFault(regs*, void*)+0x384>
c0015044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015047:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001504a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001504d:	eb 0f                	jmp    c001505e <opcodeFault(regs*, void*)+0x393>
c001504f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015053:	75 09                	jne    c001505e <opcodeFault(regs*, void*)+0x393>
c0015055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015058:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001505b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001505e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015061:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015064:	8d 50 02             	lea    edx,[eax+0x2]
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506d:	e9 6f 02 00 00       	jmp    c00152e1 <opcodeFault(regs*, void*)+0x616>
c0015072:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015075:	8a 00                	mov    al,BYTE PTR [eax]
c0015077:	3c 0f                	cmp    al,0xf
c0015079:	0f 85 8d 01 00 00    	jne    c001520c <opcodeFault(regs*, void*)+0x541>
c001507f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015082:	40                   	inc    eax
c0015083:	8a 00                	mov    al,BYTE PTR [eax]
c0015085:	3c c7                	cmp    al,0xc7
c0015087:	0f 85 7f 01 00 00    	jne    c001520c <opcodeFault(regs*, void*)+0x541>
c001508d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015093:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015096:	8d 50 01             	lea    edx,[eax+0x1]
c0015099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001509f:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150a2:	50                   	push   eax
c00150a3:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150a6:	50                   	push   eax
c00150a7:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150aa:	50                   	push   eax
c00150ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150ae:	e8 8b 48 00 00       	call   c001993e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150b9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150bc:	83 f0 01             	xor    eax,0x1
c00150bf:	84 c0                	test   al,al
c00150c1:	0f 84 45 01 00 00    	je     c001520c <opcodeFault(regs*, void*)+0x541>
c00150c7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150ca:	3c 01                	cmp    al,0x1
c00150cc:	0f 85 3a 01 00 00    	jne    c001520c <opcodeFault(regs*, void*)+0x541>
c00150d2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150d5:	83 f0 01             	xor    eax,0x1
c00150d8:	84 c0                	test   al,al
c00150da:	0f 84 2c 01 00 00    	je     c001520c <opcodeFault(regs*, void*)+0x541>
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150e6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150e9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150f0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150f3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150f6:	89 c2                	mov    edx,eax
c00150f8:	b8 00 00 00 00       	mov    eax,0x0
c00150fd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015100:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015109:	ba 00 00 00 00       	mov    edx,0x0
c001510e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015111:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001511a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001511d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015124:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015127:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001512a:	89 c2                	mov    edx,eax
c001512c:	b8 00 00 00 00       	mov    eax,0x0
c0015131:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015134:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001513d:	ba 00 00 00 00       	mov    edx,0x0
c0015142:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015145:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015148:	fa                   	cli    
c0015149:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001514e:	40                   	inc    eax
c001514f:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0015154:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015157:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001515a:	8b 00                	mov    eax,DWORD PTR [eax]
c001515c:	89 c1                	mov    ecx,eax
c001515e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015161:	89 cb                	mov    ebx,ecx
c0015163:	89 d0                	mov    eax,edx
c0015165:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015168:	89 c6                	mov    esi,eax
c001516a:	89 f0                	mov    eax,esi
c001516c:	09 d8                	or     eax,ebx
c001516e:	85 c0                	test   eax,eax
c0015170:	75 21                	jne    c0015193 <opcodeFault(regs*, void*)+0x4c8>
c0015172:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015175:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015178:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001517b:	89 01                	mov    DWORD PTR [ecx],eax
c001517d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015183:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015186:	83 c8 40             	or     eax,0x40
c0015189:	89 c2                	mov    edx,eax
c001518b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015191:	eb 3e                	jmp    c00151d1 <opcodeFault(regs*, void*)+0x506>
c0015193:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015196:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015199:	8b 00                	mov    eax,DWORD PTR [eax]
c001519b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001519e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151a1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151aa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151ad:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151b0:	89 d0                	mov    eax,edx
c00151b2:	31 d2                	xor    edx,edx
c00151b4:	89 c3                	mov    ebx,eax
c00151b6:	89 d6                	mov    esi,edx
c00151b8:	89 da                	mov    edx,ebx
c00151ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c6:	83 e0 bf             	and    eax,0xffffffbf
c00151c9:	89 c2                	mov    edx,eax
c00151cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ce:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151d1:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00151d6:	48                   	dec    eax
c00151d7:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00151dc:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00151e1:	85 c0                	test   eax,eax
c00151e3:	75 01                	jne    c00151e6 <opcodeFault(regs*, void*)+0x51b>
c00151e5:	fb                   	sti    
c00151e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ec:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151ef:	01 c2                	add    edx,eax
c00151f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	68 1a b5 02 c0       	push   0xc002b51a
c00151ff:	e8 78 d6 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	e9 d5 00 00 00       	jmp    c00152e1 <opcodeFault(regs*, void*)+0x616>
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	68 2d b5 02 c0       	push   0xc002b52d
c0015214:	e8 63 d6 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015225:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015228:	c1 e0 04             	shl    eax,0x4
c001522b:	01 d0                	add    eax,edx
c001522d:	83 c0 03             	add    eax,0x3
c0015230:	8a 00                	mov    al,BYTE PTR [eax]
c0015232:	0f b6 d8             	movzx  ebx,al
c0015235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015238:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001523b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015241:	c1 e0 04             	shl    eax,0x4
c0015244:	01 d0                	add    eax,edx
c0015246:	83 c0 02             	add    eax,0x2
c0015249:	8a 00                	mov    al,BYTE PTR [eax]
c001524b:	0f b6 c8             	movzx  ecx,al
c001524e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015251:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015257:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525a:	c1 e0 04             	shl    eax,0x4
c001525d:	01 d0                	add    eax,edx
c001525f:	40                   	inc    eax
c0015260:	8a 00                	mov    al,BYTE PTR [eax]
c0015262:	0f b6 d0             	movzx  edx,al
c0015265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015268:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001526b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015271:	c1 e0 04             	shl    eax,0x4
c0015274:	01 f0                	add    eax,esi
c0015276:	8a 00                	mov    al,BYTE PTR [eax]
c0015278:	0f b6 c0             	movzx  eax,al
c001527b:	83 ec 0c             	sub    esp,0xc
c001527e:	53                   	push   ebx
c001527f:	51                   	push   ecx
c0015280:	52                   	push   edx
c0015281:	50                   	push   eax
c0015282:	68 40 b5 02 c0       	push   0xc002b540
c0015287:	e8 f0 d5 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001528c:	83 c4 20             	add    esp,0x20
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015295:	83 c0 03             	add    eax,0x3
c0015298:	8a 00                	mov    al,BYTE PTR [eax]
c001529a:	0f b6 d8             	movzx  ebx,al
c001529d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a3:	83 c0 02             	add    eax,0x2
c00152a6:	8a 00                	mov    al,BYTE PTR [eax]
c00152a8:	0f b6 c8             	movzx  ecx,al
c00152ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b1:	40                   	inc    eax
c00152b2:	8a 00                	mov    al,BYTE PTR [eax]
c00152b4:	0f b6 d0             	movzx  edx,al
c00152b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bd:	8a 00                	mov    al,BYTE PTR [eax]
c00152bf:	0f b6 c0             	movzx  eax,al
c00152c2:	83 ec 0c             	sub    esp,0xc
c00152c5:	53                   	push   ebx
c00152c6:	51                   	push   ecx
c00152c7:	52                   	push   edx
c00152c8:	50                   	push   eax
c00152c9:	68 68 b5 02 c0       	push   0xc002b568
c00152ce:	e8 a9 d5 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00152d3:	83 c4 20             	add    esp,0x20
c00152d6:	83 ec 0c             	sub    esp,0xc
c00152d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152dc:	e8 41 f4 ff ff       	call   c0014722 <displayDebugInfo(regs*)>
c00152e1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00152e4:	5b                   	pop    ebx
c00152e5:	5e                   	pop    esi
c00152e6:	5d                   	pop    ebp
c00152e7:	c3                   	ret    

c00152e8 <displayProgramFault(char const*)>:
c00152e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152f6:	85 c0                	test   eax,eax
c00152f8:	74 15                	je     c001530f <displayProgramFault(char const*)+0x27>
c00152fa:	83 ec 0c             	sub    esp,0xc
c00152fd:	6a 04                	push   0x4
c00152ff:	6a 0f                	push   0xf
c0015301:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015305:	50                   	push   eax
c0015306:	e8 d3 b4 ff ff       	call   c00107de <VgaText::puts(char const*, VgaColour, VgaColour)>
c001530b:	83 c4 1c             	add    esp,0x1c
c001530e:	c3                   	ret    
c001530f:	c3                   	ret    

c0015310 <setupInterruptController()>:
c0015310:	55                   	push   ebp
c0015311:	89 e5                	mov    ebp,esp
c0015313:	53                   	push   ebx
c0015314:	83 ec 24             	sub    esp,0x24
c0015317:	b8 00 00 00 00       	mov    eax,0x0
c001531c:	85 c0                	test   eax,eax
c001531e:	0f 95 c0             	setne  al
c0015321:	84 c0                	test   al,al
c0015323:	74 5b                	je     c0015380 <setupInterruptController()+0x70>
c0015325:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001532c:	83 ec 0c             	sub    esp,0xc
c001532f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015332:	e8 e4 a4 ff ff       	call   c000f81b <malloc>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	89 c3                	mov    ebx,eax
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	53                   	push   ebx
c0015340:	e8 d9 08 01 00       	call   c0025c1e <APIC::APIC()>
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001534b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001534e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015351:	8b 00                	mov    eax,DWORD PTR [eax]
c0015353:	83 c0 08             	add    eax,0x8
c0015356:	8b 00                	mov    eax,DWORD PTR [eax]
c0015358:	6a 00                	push   0x0
c001535a:	6a 00                	push   0x0
c001535c:	6a 00                	push   0x0
c001535e:	52                   	push   edx
c001535f:	ff d0                	call   eax
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001536f:	50                   	push   eax
c0015370:	e8 4b e9 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001537b:	e9 79 03 00 00       	jmp    c00156f9 <setupInterruptController()+0x3e9>
c0015380:	a0 20 ee 02 c0       	mov    al,ds:0xc002ee20
c0015385:	84 c0                	test   al,al
c0015387:	75 14                	jne    c001539d <setupInterruptController()+0x8d>
c0015389:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001538e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015394:	83 e2 fe             	and    edx,0xfffffffe
c0015397:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001539d:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00153a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153a8:	83 e0 01             	and    eax,0x1
c00153ab:	84 c0                	test   al,al
c00153ad:	0f 95 c0             	setne  al
c00153b0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153b3:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153ba:	83 ec 0c             	sub    esp,0xc
c00153bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153c0:	e8 56 a4 ff ff       	call   c000f81b <malloc>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	89 c3                	mov    ebx,eax
c00153ca:	83 ec 0c             	sub    esp,0xc
c00153cd:	53                   	push   ebx
c00153ce:	e8 a3 0d 01 00       	call   c0026176 <PIC::PIC()>
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153df:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e1:	83 c0 08             	add    eax,0x8
c00153e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e6:	6a 00                	push   0x0
c00153e8:	6a 00                	push   0x0
c00153ea:	6a 00                	push   0x0
c00153ec:	52                   	push   edx
c00153ed:	ff d0                	call   eax
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00153f6:	74 73                	je     c001546b <setupInterruptController()+0x15b>
c00153f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015400:	83 c0 0c             	add    eax,0xc
c0015403:	8b 00                	mov    eax,DWORD PTR [eax]
c0015405:	6a 00                	push   0x0
c0015407:	6a 00                	push   0x0
c0015409:	6a 00                	push   0x0
c001540b:	52                   	push   edx
c001540c:	ff d0                	call   eax
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015415:	74 15                	je     c001542c <setupInterruptController()+0x11c>
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8b 00                	mov    eax,DWORD PTR [eax]
c001541c:	83 c0 04             	add    eax,0x4
c001541f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015421:	83 ec 0c             	sub    esp,0xc
c0015424:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015427:	ff d0                	call   eax
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015433:	83 ec 0c             	sub    esp,0xc
c0015436:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015439:	e8 dd a3 ff ff       	call   c000f81b <malloc>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	89 c3                	mov    ebx,eax
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	53                   	push   ebx
c0015447:	e8 d2 07 01 00       	call   c0025c1e <APIC::APIC()>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015452:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015455:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015458:	8b 00                	mov    eax,DWORD PTR [eax]
c001545a:	83 c0 08             	add    eax,0x8
c001545d:	8b 00                	mov    eax,DWORD PTR [eax]
c001545f:	6a 00                	push   0x0
c0015461:	6a 00                	push   0x0
c0015463:	6a 00                	push   0x0
c0015465:	52                   	push   edx
c0015466:	ff d0                	call   eax
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0015470:	83 ec 08             	sub    esp,0x8
c0015473:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015476:	50                   	push   eax
c0015477:	e8 44 e8 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	c7 05 48 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e648,0x0
c0015489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548c:	8b 00                	mov    eax,DWORD PTR [eax]
c001548e:	83 c0 24             	add    eax,0x24
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	6a 00                	push   0x0
c0015495:	68 ac 4c 01 c0       	push   0xc0014cac
c001549a:	6a 00                	push   0x0
c001549c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001549f:	ff d0                	call   eax
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a9:	83 c0 24             	add    eax,0x24
c00154ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ae:	6a 00                	push   0x0
c00154b0:	68 ac 4c 01 c0       	push   0xc0014cac
c00154b5:	6a 01                	push   0x1
c00154b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ba:	ff d0                	call   eax
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c4:	83 c0 24             	add    eax,0x24
c00154c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c9:	6a 00                	push   0x0
c00154cb:	68 7f 45 01 c0       	push   0xc001457f
c00154d0:	6a 02                	push   0x2
c00154d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d5:	ff d0                	call   eax
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154df:	83 c0 24             	add    eax,0x24
c00154e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e4:	6a 00                	push   0x0
c00154e6:	68 ac 4c 01 c0       	push   0xc0014cac
c00154eb:	6a 03                	push   0x3
c00154ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f0:	ff d0                	call   eax
c00154f2:	83 c4 10             	add    esp,0x10
c00154f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fa:	83 c0 24             	add    eax,0x24
c00154fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ff:	6a 00                	push   0x0
c0015501:	68 ac 4c 01 c0       	push   0xc0014cac
c0015506:	6a 04                	push   0x4
c0015508:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001550b:	ff d0                	call   eax
c001550d:	83 c4 10             	add    esp,0x10
c0015510:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015513:	8b 00                	mov    eax,DWORD PTR [eax]
c0015515:	83 c0 24             	add    eax,0x24
c0015518:	8b 00                	mov    eax,DWORD PTR [eax]
c001551a:	6a 00                	push   0x0
c001551c:	68 ac 4c 01 c0       	push   0xc0014cac
c0015521:	6a 05                	push   0x5
c0015523:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015526:	ff d0                	call   eax
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015530:	83 c0 24             	add    eax,0x24
c0015533:	8b 00                	mov    eax,DWORD PTR [eax]
c0015535:	6a 00                	push   0x0
c0015537:	68 cb 4c 01 c0       	push   0xc0014ccb
c001553c:	6a 06                	push   0x6
c001553e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015541:	ff d0                	call   eax
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015549:	8b 00                	mov    eax,DWORD PTR [eax]
c001554b:	83 c0 24             	add    eax,0x24
c001554e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015550:	6a 00                	push   0x0
c0015552:	68 b1 4b 01 c0       	push   0xc0014bb1
c0015557:	6a 07                	push   0x7
c0015559:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001555c:	ff d0                	call   eax
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015564:	8b 00                	mov    eax,DWORD PTR [eax]
c0015566:	83 c0 24             	add    eax,0x24
c0015569:	8b 00                	mov    eax,DWORD PTR [eax]
c001556b:	6a 00                	push   0x0
c001556d:	68 9a 43 01 c0       	push   0xc001439a
c0015572:	6a 08                	push   0x8
c0015574:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015577:	ff d0                	call   eax
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015581:	83 c0 24             	add    eax,0x24
c0015584:	8b 00                	mov    eax,DWORD PTR [eax]
c0015586:	6a 00                	push   0x0
c0015588:	68 ac 4c 01 c0       	push   0xc0014cac
c001558d:	6a 09                	push   0x9
c001558f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015592:	ff d0                	call   eax
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559a:	8b 00                	mov    eax,DWORD PTR [eax]
c001559c:	83 c0 24             	add    eax,0x24
c001559f:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a1:	6a 00                	push   0x0
c00155a3:	68 ac 4c 01 c0       	push   0xc0014cac
c00155a8:	6a 0a                	push   0xa
c00155aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ad:	ff d0                	call   eax
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b7:	83 c0 24             	add    eax,0x24
c00155ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bc:	6a 00                	push   0x0
c00155be:	68 ac 4c 01 c0       	push   0xc0014cac
c00155c3:	6a 0b                	push   0xb
c00155c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c8:	ff d0                	call   eax
c00155ca:	83 c4 10             	add    esp,0x10
c00155cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d2:	83 c0 24             	add    eax,0x24
c00155d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d7:	6a 00                	push   0x0
c00155d9:	68 ac 4c 01 c0       	push   0xc0014cac
c00155de:	6a 0c                	push   0xc
c00155e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e3:	ff d0                	call   eax
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ed:	83 c0 24             	add    eax,0x24
c00155f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f2:	6a 00                	push   0x0
c00155f4:	68 24 4c 01 c0       	push   0xc0014c24
c00155f9:	6a 0d                	push   0xd
c00155fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155fe:	ff d0                	call   eax
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015606:	8b 00                	mov    eax,DWORD PTR [eax]
c0015608:	83 c0 24             	add    eax,0x24
c001560b:	8b 00                	mov    eax,DWORD PTR [eax]
c001560d:	6a 00                	push   0x0
c001560f:	68 5d 4c 01 c0       	push   0xc0014c5d
c0015614:	6a 0e                	push   0xe
c0015616:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015619:	ff d0                	call   eax
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015621:	8b 00                	mov    eax,DWORD PTR [eax]
c0015623:	83 c0 24             	add    eax,0x24
c0015626:	8b 00                	mov    eax,DWORD PTR [eax]
c0015628:	6a 00                	push   0x0
c001562a:	68 ac 4c 01 c0       	push   0xc0014cac
c001562f:	6a 0f                	push   0xf
c0015631:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015634:	ff d0                	call   eax
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563c:	8b 00                	mov    eax,DWORD PTR [eax]
c001563e:	83 c0 24             	add    eax,0x24
c0015641:	8b 00                	mov    eax,DWORD PTR [eax]
c0015643:	6a 00                	push   0x0
c0015645:	68 ac 4c 01 c0       	push   0xc0014cac
c001564a:	6a 10                	push   0x10
c001564c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564f:	ff d0                	call   eax
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	8b 00                	mov    eax,DWORD PTR [eax]
c0015659:	83 c0 24             	add    eax,0x24
c001565c:	8b 00                	mov    eax,DWORD PTR [eax]
c001565e:	6a 00                	push   0x0
c0015660:	68 ac 4c 01 c0       	push   0xc0014cac
c0015665:	6a 11                	push   0x11
c0015667:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566a:	ff d0                	call   eax
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015672:	8b 00                	mov    eax,DWORD PTR [eax]
c0015674:	83 c0 24             	add    eax,0x24
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	6a 00                	push   0x0
c001567b:	68 ac 4c 01 c0       	push   0xc0014cac
c0015680:	6a 12                	push   0x12
c0015682:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015685:	ff d0                	call   eax
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568d:	8b 00                	mov    eax,DWORD PTR [eax]
c001568f:	83 c0 24             	add    eax,0x24
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	6a 00                	push   0x0
c0015696:	68 ac 4c 01 c0       	push   0xc0014cac
c001569b:	6a 13                	push   0x13
c001569d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a0:	ff d0                	call   eax
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156aa:	83 c0 24             	add    eax,0x24
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	6a 00                	push   0x0
c00156b1:	68 ac 4c 01 c0       	push   0xc0014cac
c00156b6:	6a 14                	push   0x14
c00156b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156bb:	ff d0                	call   eax
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c5:	83 c0 24             	add    eax,0x24
c00156c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ca:	6a 00                	push   0x0
c00156cc:	68 ac 4c 01 c0       	push   0xc0014cac
c00156d1:	6a 1e                	push   0x1e
c00156d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d6:	ff d0                	call   eax
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156de:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e0:	83 c0 24             	add    eax,0x24
c00156e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e5:	6a 00                	push   0x0
c00156e7:	68 17 c4 01 c0       	push   0xc001c417
c00156ec:	6a 60                	push   0x60
c00156ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f1:	ff d0                	call   eax
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156fc:	c9                   	leave  
c00156fd:	c3                   	ret    

c00156fe <InterruptController::convertLegacyIRQNumber(int)>:
c00156fe:	55                   	push   ebp
c00156ff:	89 e5                	mov    ebp,esp
c0015701:	83 ec 08             	sub    esp,0x8
c0015704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015707:	83 ec 0c             	sub    esp,0xc
c001570a:	50                   	push   eax
c001570b:	e8 b0 e8 ff ff       	call   c0013fc0 <Device::getName()>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	8a 00                	mov    al,BYTE PTR [eax]
c0015715:	3c 41                	cmp    al,0x41
c0015717:	0f 94 c0             	sete   al
c001571a:	84 c0                	test   al,al
c001571c:	74 28                	je     c0015746 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001571e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015722:	7f 12                	jg     c0015736 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015724:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015727:	05 20 d7 02 c0       	add    eax,0xc002d720
c001572c:	8a 00                	mov    al,BYTE PTR [eax]
c001572e:	0f b6 c0             	movzx  eax,al
c0015731:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015734:	eb 10                	jmp    c0015746 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015736:	83 ec 0c             	sub    esp,0xc
c0015739:	68 90 b5 02 c0       	push   0xc002b590
c001573e:	e8 e2 4a 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0015743:	83 c4 10             	add    esp,0x10
c0015746:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015749:	c9                   	leave  
c001574a:	c3                   	ret    
c001574b:	90                   	nop

c001574c <startGUI(void*)>:
c001574c:	55                   	push   ebp
c001574d:	89 e5                	mov    ebp,esp
c001574f:	53                   	push   ebx
c0015750:	83 ec 04             	sub    esp,0x4
c0015753:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015758:	48                   	dec    eax
c0015759:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001575e:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015763:	85 c0                	test   eax,eax
c0015765:	75 01                	jne    c0015768 <startGUI(void*)+0x1c>
c0015767:	fb                   	sti    
c0015768:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c001576e:	83 ec 08             	sub    esp,0x8
c0015771:	6a 01                	push   0x1
c0015773:	68 10 b6 02 c0       	push   0xc002b610
c0015778:	e8 75 7c 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	83 ec 08             	sub    esp,0x8
c0015783:	53                   	push   ebx
c0015784:	50                   	push   eax
c0015785:	e8 99 7e 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c001578a:	83 c4 10             	add    esp,0x10
c001578d:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0015793:	83 ec 08             	sub    esp,0x8
c0015796:	6a 01                	push   0x1
c0015798:	68 2a b6 02 c0       	push   0xc002b62a
c001579d:	e8 50 7c 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	83 ec 08             	sub    esp,0x8
c00157a8:	53                   	push   ebx
c00157a9:	50                   	push   eax
c00157aa:	e8 74 7e 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	90                   	nop
c00157b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157b6:	c9                   	leave  
c00157b7:	c3                   	ret    

c00157b8 <startGUIVESA(void*)>:
c00157b8:	55                   	push   ebp
c00157b9:	89 e5                	mov    ebp,esp
c00157bb:	53                   	push   ebx
c00157bc:	83 ec 04             	sub    esp,0x4
c00157bf:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00157c4:	48                   	dec    eax
c00157c5:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00157ca:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00157cf:	85 c0                	test   eax,eax
c00157d1:	75 01                	jne    c00157d4 <startGUIVESA(void*)+0x1c>
c00157d3:	fb                   	sti    
c00157d4:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c00157da:	83 ec 08             	sub    esp,0x8
c00157dd:	6a 01                	push   0x1
c00157df:	68 44 b6 02 c0       	push   0xc002b644
c00157e4:	e8 09 7c 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	83 ec 08             	sub    esp,0x8
c00157ef:	53                   	push   ebx
c00157f0:	50                   	push   eax
c00157f1:	e8 2d 7e 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c00157ff:	83 ec 08             	sub    esp,0x8
c0015802:	6a 01                	push   0x1
c0015804:	68 2a b6 02 c0       	push   0xc002b62a
c0015809:	e8 e4 7b 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	83 ec 08             	sub    esp,0x8
c0015814:	53                   	push   ebx
c0015815:	50                   	push   eax
c0015816:	e8 08 7e 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c001581b:	83 c4 10             	add    esp,0x10
c001581e:	90                   	nop
c001581f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015822:	c9                   	leave  
c0015823:	c3                   	ret    

c0015824 <sendKeyToTerminal(unsigned char)>:
c0015824:	55                   	push   ebp
c0015825:	89 e5                	mov    ebp,esp
c0015827:	83 ec 28             	sub    esp,0x28
c001582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015830:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c0015835:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015839:	83 ec 08             	sub    esp,0x8
c001583c:	52                   	push   edx
c001583d:	50                   	push   eax
c001583e:	e8 43 b4 ff ff       	call   c0010c86 <VgaText::receiveKey(unsigned char)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001584a:	0f 85 8f 00 00 00    	jne    c00158df <sendKeyToTerminal(unsigned char)+0xbb>
c0015850:	fa                   	cli    
c0015851:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015856:	40                   	inc    eax
c0015857:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001585c:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c0015861:	40                   	inc    eax
c0015862:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c0015867:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c001586c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001586f:	c7 05 60 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e660,0x0
c0015879:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001587d:	74 1f                	je     c001589e <sendKeyToTerminal(unsigned char)+0x7a>
c001587f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015882:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015888:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001588b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001588e:	83 ec 0c             	sub    esp,0xc
c0015891:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015894:	e8 b0 89 00 00       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	eb db                	jmp    c0015879 <sendKeyToTerminal(unsigned char)+0x55>
c001589e:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c00158a3:	48                   	dec    eax
c00158a4:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c00158a9:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c00158ae:	85 c0                	test   eax,eax
c00158b0:	75 18                	jne    c00158ca <sendKeyToTerminal(unsigned char)+0xa6>
c00158b2:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c00158b7:	85 c0                	test   eax,eax
c00158b9:	74 0f                	je     c00158ca <sendKeyToTerminal(unsigned char)+0xa6>
c00158bb:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c00158c5:	e8 ed 84 00 00       	call   c001ddb7 <schedule()>
c00158ca:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00158cf:	48                   	dec    eax
c00158d0:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00158d5:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00158da:	85 c0                	test   eax,eax
c00158dc:	75 01                	jne    c00158df <sendKeyToTerminal(unsigned char)+0xbb>
c00158de:	fb                   	sti    
c00158df:	90                   	nop
c00158e0:	c9                   	leave  
c00158e1:	c3                   	ret    

c00158e2 <sendKeyboardToken(KeyboardToken)>:
c00158e2:	55                   	push   ebp
c00158e3:	89 e5                	mov    ebp,esp
c00158e5:	83 ec 18             	sub    esp,0x18
c00158e8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00158eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ee:	0f b7 c0             	movzx  eax,ax
c00158f1:	83 f2 01             	xor    edx,0x1
c00158f4:	88 90 80 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd1980],dl
c00158fa:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00158ff:	85 c0                	test   eax,eax
c0015901:	74 24                	je     c0015927 <sendKeyboardToken(KeyboardToken)+0x45>
c0015903:	8b 0d 68 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e668
c0015909:	83 ec 04             	sub    esp,0x4
c001590c:	68 80 e6 02 c0       	push   0xc002e680
c0015911:	83 ec 08             	sub    esp,0x8
c0015914:	89 e2                	mov    edx,esp
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	89 02                	mov    DWORD PTR [edx],eax
c001591b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001591e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015922:	ff d1                	call   ecx
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592a:	66 3d 03 02          	cmp    ax,0x203
c001592e:	75 07                	jne    c0015937 <sendKeyboardToken(KeyboardToken)+0x55>
c0015930:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c0015935:	84 c0                	test   al,al
c0015937:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001593b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001593e:	a0 88 ea 02 c0       	mov    al,ds:0xc002ea88
c0015943:	38 c2                	cmp    dl,al
c0015945:	74 1c                	je     c0015963 <sendKeyboardToken(KeyboardToken)+0x81>
c0015947:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001594a:	a2 88 ea 02 c0       	mov    ds:0xc002ea88,al
c001594f:	a0 88 ea 02 c0       	mov    al,ds:0xc002ea88
c0015954:	0f b6 c0             	movzx  eax,al
c0015957:	83 ec 0c             	sub    esp,0xc
c001595a:	50                   	push   eax
c001595b:	e8 66 a9 ff ff       	call   c00102c6 <setTerminalScrollLock(bool)>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015966:	84 c0                	test   al,al
c0015968:	0f 84 ae 00 00 00    	je     c0015a1c <sendKeyboardToken(KeyboardToken)+0x13a>
c001596e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015971:	66 3d 10 03          	cmp    ax,0x310
c0015975:	75 06                	jne    c001597d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015977:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015980:	66 3d 11 03          	cmp    ax,0x311
c0015984:	75 06                	jne    c001598c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015986:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001598c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598f:	66 3d 12 03          	cmp    ax,0x312
c0015993:	75 06                	jne    c001599b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015995:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599e:	66 3d 13 03          	cmp    ax,0x313
c00159a2:	75 06                	jne    c00159aa <sendKeyboardToken(KeyboardToken)+0xc8>
c00159a4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ad:	66 3d 14 03          	cmp    ax,0x314
c00159b1:	75 06                	jne    c00159b9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159b3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bc:	66 3d 15 03          	cmp    ax,0x315
c00159c0:	75 06                	jne    c00159c8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159c2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cb:	66 3d 16 03          	cmp    ax,0x316
c00159cf:	75 06                	jne    c00159d7 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159d1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00159d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159da:	66 3d 17 03          	cmp    ax,0x317
c00159de:	75 06                	jne    c00159e6 <sendKeyboardToken(KeyboardToken)+0x104>
c00159e0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00159e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e9:	66 3d 18 03          	cmp    ax,0x318
c00159ed:	75 06                	jne    c00159f5 <sendKeyboardToken(KeyboardToken)+0x113>
c00159ef:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00159f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f8:	66 3d 19 03          	cmp    ax,0x319
c00159fc:	75 06                	jne    c0015a04 <sendKeyboardToken(KeyboardToken)+0x122>
c00159fe:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a07:	66 3d 1a 03          	cmp    ax,0x31a
c0015a0b:	0f 85 c9 00 00 00    	jne    c0015ada <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a11:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a17:	e9 be 00 00 00       	jmp    c0015ada <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1f:	66 3d 10 03          	cmp    ax,0x310
c0015a23:	75 0a                	jne    c0015a2f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a25:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a2b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a32:	66 3d 11 03          	cmp    ax,0x311
c0015a36:	75 0a                	jne    c0015a42 <sendKeyboardToken(KeyboardToken)+0x160>
c0015a38:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a45:	66 3d 12 03          	cmp    ax,0x312
c0015a49:	75 0a                	jne    c0015a55 <sendKeyboardToken(KeyboardToken)+0x173>
c0015a4b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a58:	66 3d 13 03          	cmp    ax,0x313
c0015a5c:	75 0a                	jne    c0015a68 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a5e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6b:	66 3d 14 03          	cmp    ax,0x314
c0015a6f:	75 0a                	jne    c0015a7b <sendKeyboardToken(KeyboardToken)+0x199>
c0015a71:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7e:	66 3d 15 03          	cmp    ax,0x315
c0015a82:	75 0a                	jne    c0015a8e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a84:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a91:	66 3d 16 03          	cmp    ax,0x316
c0015a95:	75 0a                	jne    c0015aa1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a97:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa4:	66 3d 17 03          	cmp    ax,0x317
c0015aa8:	75 0a                	jne    c0015ab4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015aaa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ab0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab7:	66 3d 18 03          	cmp    ax,0x318
c0015abb:	75 0a                	jne    c0015ac7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015abd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ac3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aca:	66 3d 19 03          	cmp    ax,0x319
c0015ace:	75 0a                	jne    c0015ada <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ad0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ad6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015add:	66 3d 00 02          	cmp    ax,0x200
c0015ae1:	75 2c                	jne    c0015b0f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ae3:	a0 80 ea 02 c0       	mov    al,ds:0xc002ea80
c0015ae8:	83 f0 01             	xor    eax,0x1
c0015aeb:	84 c0                	test   al,al
c0015aed:	74 20                	je     c0015b0f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015aef:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0015af4:	6a 01                	push   0x1
c0015af6:	6a 00                	push   0x0
c0015af8:	68 4c 57 01 c0       	push   0xc001574c
c0015afd:	50                   	push   eax
c0015afe:	e8 8f 80 00 00       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0015b0d:	eb 33                	jmp    c0015b42 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	66 3d 01 02          	cmp    ax,0x201
c0015b16:	75 2a                	jne    c0015b42 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b18:	a0 80 ea 02 c0       	mov    al,ds:0xc002ea80
c0015b1d:	83 f0 01             	xor    eax,0x1
c0015b20:	84 c0                	test   al,al
c0015b22:	74 1e                	je     c0015b42 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b24:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0015b29:	6a 01                	push   0x1
c0015b2b:	6a 00                	push   0x0
c0015b2d:	68 b8 57 01 c0       	push   0xc00157b8
c0015b32:	50                   	push   eax
c0015b33:	e8 5a 80 00 00       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0015b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b45:	66 3d 1d 03          	cmp    ax,0x31d
c0015b49:	75 06                	jne    c0015b51 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b4b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b54:	66 3d 1c 03          	cmp    ax,0x31c
c0015b58:	75 06                	jne    c0015b60 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b5a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b63:	66 3d 1b 03          	cmp    ax,0x31b
c0015b67:	75 06                	jne    c0015b6f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b69:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b72:	66 3d 1e 03          	cmp    ax,0x31e
c0015b76:	75 06                	jne    c0015b7e <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b78:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b81:	66 3d 1f 03          	cmp    ax,0x31f
c0015b85:	75 06                	jne    c0015b8d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b87:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b90:	66 3d 1a 03          	cmp    ax,0x31a
c0015b94:	75 06                	jne    c0015b9c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b96:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b9c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ba0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ba3:	83 f0 01             	xor    eax,0x1
c0015ba6:	84 c0                	test   al,al
c0015ba8:	74 77                	je     c0015c21 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015baa:	a0 81 e7 02 c0       	mov    al,ds:0xc002e781
c0015baf:	84 c0                	test   al,al
c0015bb1:	74 41                	je     c0015bf4 <sendKeyboardToken(KeyboardToken)+0x312>
c0015bb3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bb7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015bbb:	74 2b                	je     c0015be8 <sendKeyboardToken(KeyboardToken)+0x306>
c0015bbd:	8b 15 84 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea84
c0015bc3:	89 d0                	mov    eax,edx
c0015bc5:	c1 e0 02             	shl    eax,0x2
c0015bc8:	01 d0                	add    eax,edx
c0015bca:	01 c0                	add    eax,eax
c0015bcc:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c0015bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd4:	0f b7 c0             	movzx  eax,ax
c0015bd7:	8d 50 d0             	lea    edx,[eax-0x30]
c0015bda:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015bdf:	01 d0                	add    eax,edx
c0015be1:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c0015be6:	eb 6d                	jmp    c0015c55 <sendKeyboardToken(KeyboardToken)+0x373>
c0015be8:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c0015bf2:	eb 61                	jmp    c0015c55 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bf4:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015bf9:	85 c0                	test   eax,eax
c0015bfb:	74 18                	je     c0015c15 <sendKeyboardToken(KeyboardToken)+0x333>
c0015bfd:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015c02:	0f b6 c0             	movzx  eax,al
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	50                   	push   eax
c0015c09:	e8 16 fc ff ff       	call   c0015824 <sendKeyToTerminal(unsigned char)>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c15:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c0015c1f:	eb 34                	jmp    c0015c55 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c24:	66 3d 01 01          	cmp    ax,0x101
c0015c28:	75 2b                	jne    c0015c55 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c2a:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015c2f:	85 c0                	test   eax,eax
c0015c31:	74 18                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x369>
c0015c33:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0015c38:	0f b6 c0             	movzx  eax,al
c0015c3b:	83 ec 0c             	sub    esp,0xc
c0015c3e:	50                   	push   eax
c0015c3f:	e8 e0 fb ff ff       	call   c0015824 <sendKeyToTerminal(unsigned char)>
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c4b:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c0015c55:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c58:	83 f0 01             	xor    eax,0x1
c0015c5b:	84 c0                	test   al,al
c0015c5d:	74 4c                	je     c0015cab <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c5f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c62:	83 f0 01             	xor    eax,0x1
c0015c65:	84 c0                	test   al,al
c0015c67:	74 42                	je     c0015cab <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c69:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c0015c6e:	83 f0 01             	xor    eax,0x1
c0015c71:	84 c0                	test   al,al
c0015c73:	74 36                	je     c0015cab <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c78:	66 83 f8 1f          	cmp    ax,0x1f
c0015c7c:	76 09                	jbe    c0015c87 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c81:	66 83 f8 7e          	cmp    ax,0x7e
c0015c85:	76 12                	jbe    c0015c99 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8a:	66 83 f8 0a          	cmp    ax,0xa
c0015c8e:	74 09                	je     c0015c99 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c93:	66 83 f8 08          	cmp    ax,0x8
c0015c97:	75 12                	jne    c0015cab <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9c:	0f b6 c0             	movzx  eax,al
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	50                   	push   eax
c0015ca3:	e8 7c fb ff ff       	call   c0015824 <sendKeyToTerminal(unsigned char)>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cae:	83 f0 01             	xor    eax,0x1
c0015cb1:	84 c0                	test   al,al
c0015cb3:	74 4f                	je     c0015d04 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cb5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cb8:	83 f0 01             	xor    eax,0x1
c0015cbb:	84 c0                	test   al,al
c0015cbd:	74 45                	je     c0015d04 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cbf:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c0015cc4:	84 c0                	test   al,al
c0015cc6:	74 3c                	je     c0015d04 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ccb:	66 83 f8 3f          	cmp    ax,0x3f
c0015ccf:	76 33                	jbe    c0015d04 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd4:	66 83 f8 7f          	cmp    ax,0x7f
c0015cd8:	77 2a                	ja     c0015d04 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdd:	88 c2                	mov    dl,al
c0015cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce2:	66 83 f8 5f          	cmp    ax,0x5f
c0015ce6:	76 04                	jbe    c0015cec <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ce8:	b0 20                	mov    al,0x20
c0015cea:	eb 02                	jmp    c0015cee <sendKeyboardToken(KeyboardToken)+0x40c>
c0015cec:	b0 00                	mov    al,0x0
c0015cee:	29 c2                	sub    edx,eax
c0015cf0:	88 d0                	mov    al,dl
c0015cf2:	83 e8 40             	sub    eax,0x40
c0015cf5:	0f b6 c0             	movzx  eax,al
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	50                   	push   eax
c0015cfc:	e8 23 fb ff ff       	call   c0015824 <sendKeyToTerminal(unsigned char)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d07:	66 3d 00 03          	cmp    ax,0x300
c0015d0b:	75 0f                	jne    c0015d1c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d0d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d10:	83 f0 01             	xor    eax,0x1
c0015d13:	84 c0                	test   al,al
c0015d15:	74 05                	je     c0015d1c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d17:	e8 1b a9 ff ff       	call   c0010637 <doTerminalCycle()>
c0015d1c:	90                   	nop
c0015d1d:	c9                   	leave  
c0015d1e:	c3                   	ret    

c0015d1f <clearInternalKeybuffer(VgaText*)>:
c0015d1f:	55                   	push   ebp
c0015d20:	89 e5                	mov    ebp,esp
c0015d22:	83 ec 08             	sub    esp,0x8
c0015d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d28:	05 98 01 00 00       	add    eax,0x198
c0015d2d:	83 ec 0c             	sub    esp,0xc
c0015d30:	50                   	push   eax
c0015d31:	e8 36 aa fe ff       	call   c000076c <strlen>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d3c:	81 c2 98 01 00 00    	add    edx,0x198
c0015d42:	83 ec 04             	sub    esp,0x4
c0015d45:	50                   	push   eax
c0015d46:	6a 00                	push   0x0
c0015d48:	52                   	push   edx
c0015d49:	e8 02 aa fe ff       	call   c0000750 <memset>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	90                   	nop
c0015d52:	c9                   	leave  
c0015d53:	c3                   	ret    

c0015d54 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d54:	55                   	push   ebp
c0015d55:	89 e5                	mov    ebp,esp
c0015d57:	83 ec 18             	sub    esp,0x18
c0015d5a:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015d5f:	85 c0                	test   eax,eax
c0015d61:	74 2a                	je     c0015d8d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d63:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d69:	8b 0d 68 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e668
c0015d6f:	83 ec 04             	sub    esp,0x4
c0015d72:	68 80 e6 02 c0       	push   0xc002e680
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	89 e2                	mov    edx,esp
c0015d7c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d7f:	89 02                	mov    DWORD PTR [edx],eax
c0015d81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d84:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d88:	ff d1                	call   ecx
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	fb                   	sti    
c0015d8e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d95:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d99:	0f 84 a1 00 00 00    	je     c0015e40 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da2:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015da8:	84 c0                	test   al,al
c0015daa:	75 28                	jne    c0015dd4 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015dac:	fa                   	cli    
c0015dad:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015db2:	40                   	inc    eax
c0015db3:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0015db8:	e8 fa 7f 00 00       	call   c001ddb7 <schedule()>
c0015dbd:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015dc2:	48                   	dec    eax
c0015dc3:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c0015dc8:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c0015dcd:	85 c0                	test   eax,eax
c0015dcf:	75 ce                	jne    c0015d9f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dd1:	fb                   	sti    
c0015dd2:	eb cb                	jmp    c0015d9f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0015dda:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ddd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015de0:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015de6:	88 10                	mov    BYTE PTR [eax],dl
c0015de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015deb:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015df1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df7:	05 98 01 00 00       	add    eax,0x198
c0015dfc:	83 ec 0c             	sub    esp,0xc
c0015dff:	50                   	push   eax
c0015e00:	e8 67 a9 fe ff       	call   c000076c <strlen>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e0b:	81 c2 98 01 00 00    	add    edx,0x198
c0015e11:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e14:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e17:	81 c2 98 01 00 00    	add    edx,0x198
c0015e1d:	83 ec 04             	sub    esp,0x4
c0015e20:	50                   	push   eax
c0015e21:	51                   	push   ecx
c0015e22:	52                   	push   edx
c0015e23:	e8 60 a8 fe ff       	call   c0000688 <memmove>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e2e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e31:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e35:	0f 85 5a ff ff ff    	jne    c0015d95 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015e3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e3e:	eb 03                	jmp    c0015e43 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015e40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e43:	c9                   	leave  
c0015e44:	c3                   	ret    
c0015e45:	90                   	nop

c0015e46 <Keyboard::Keyboard(char const*)>:
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e4d:	83 ec 08             	sub    esp,0x8
c0015e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e54:	50                   	push   eax
c0015e55:	e8 6a e0 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c0015e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e66:	89 10                	mov    DWORD PTR [eax],edx
c0015e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e6c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e76:	c6 05 64 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e664,0x1
c0015e7d:	90                   	nop
c0015e7e:	83 c4 0c             	add    esp,0xc
c0015e81:	c3                   	ret    

c0015e82 <Keyboard::~Keyboard()>:
c0015e82:	83 ec 0c             	sub    esp,0xc
c0015e85:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c0015e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8e:	89 10                	mov    DWORD PTR [eax],edx
c0015e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e94:	83 ec 0c             	sub    esp,0xc
c0015e97:	50                   	push   eax
c0015e98:	e8 f1 dc ff ff       	call   c0013b8e <Device::~Device()>
c0015e9d:	83 c4 10             	add    esp,0x10
c0015ea0:	90                   	nop
c0015ea1:	83 c4 0c             	add    esp,0xc
c0015ea4:	c3                   	ret    
c0015ea5:	90                   	nop

c0015ea6 <Keyboard::~Keyboard()>:
c0015ea6:	83 ec 0c             	sub    esp,0xc
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb0:	e8 cd ff ff ff       	call   c0015e82 <Keyboard::~Keyboard()>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	83 ec 08             	sub    esp,0x8
c0015ebb:	68 5c 01 00 00       	push   0x15c
c0015ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ec4:	e8 d2 c8 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0015ec9:	83 c4 10             	add    esp,0x10
c0015ecc:	83 c4 0c             	add    esp,0xc
c0015ecf:	c3                   	ret    

c0015ed0 <LogicalDisk::close(int, int, void*)>:
c0015ed0:	83 c8 ff             	or     eax,0xffffffff
c0015ed3:	c3                   	ret    

c0015ed4 <LogicalDisk::~LogicalDisk()>:
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0015edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ee0:	89 10                	mov    DWORD PTR [eax],edx
c0015ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	50                   	push   eax
c0015eea:	e8 9f dc ff ff       	call   c0013b8e <Device::~Device()>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	90                   	nop
c0015ef3:	83 c4 0c             	add    esp,0xc
c0015ef6:	c3                   	ret    
c0015ef7:	90                   	nop

c0015ef8 <LogicalDisk::~LogicalDisk()>:
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	83 ec 0c             	sub    esp,0xc
c0015efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f02:	e8 cd ff ff ff       	call   c0015ed4 <LogicalDisk::~LogicalDisk()>
c0015f07:	83 c4 10             	add    esp,0x10
c0015f0a:	83 ec 08             	sub    esp,0x8
c0015f0d:	68 74 01 00 00       	push   0x174
c0015f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f16:	e8 80 c8 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0015f1b:	83 c4 10             	add    esp,0x10
c0015f1e:	83 c4 0c             	add    esp,0xc
c0015f21:	c3                   	ret    

c0015f22 <LogicalDisk::open(int, int, void*)>:
c0015f22:	83 ec 18             	sub    esp,0x18
c0015f25:	68 94 b6 02 c0       	push   0xc002b694
c0015f2a:	e8 f6 42 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0015f2f:	83 c8 ff             	or     eax,0xffffffff
c0015f32:	83 c4 1c             	add    esp,0x1c
c0015f35:	c3                   	ret    

c0015f36 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f36:	53                   	push   ebx
c0015f37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f43:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f49:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f4f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f55:	77 10                	ja     c0015f67 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f57:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f5d:	89 d3                	mov    ebx,edx
c0015f5f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f65:	72 05                	jb     c0015f6c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f67:	83 c8 ff             	or     eax,0xffffffff
c0015f6a:	89 c2                	mov    edx,eax
c0015f6c:	5b                   	pop    ebx
c0015f6d:	c3                   	ret    

c0015f6e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f6e:	56                   	push   esi
c0015f6f:	83 c8 ff             	or     eax,0xffffffff
c0015f72:	53                   	push   ebx
c0015f73:	89 c2                	mov    edx,eax
c0015f75:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f79:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f81:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f87:	77 27                	ja     c0015fb0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f89:	89 d8                	mov    eax,ebx
c0015f8b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f91:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f9c:	89 c2                	mov    edx,eax
c0015f9e:	73 10                	jae    c0015fb0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fa0:	89 c8                	mov    eax,ecx
c0015fa2:	89 da                	mov    edx,ebx
c0015fa4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015faa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015fb0:	5b                   	pop    ebx
c0015fb1:	5e                   	pop    esi
c0015fb2:	c3                   	ret    
c0015fb3:	90                   	nop

c0015fb4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fb4:	83 ec 1c             	sub    esp,0x1c
c0015fb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fda:	83 ec 08             	sub    esp,0x8
c0015fdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fe1:	50                   	push   eax
c0015fe2:	e8 dd de ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0015fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff3:	89 10                	mov    DWORD PTR [eax],edx
c0015ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016004:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001600b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001600f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016019:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001601d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016021:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016025:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001602b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016031:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016038:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001603c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016042:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001604c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016050:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001605a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016064:	90                   	nop
c0016065:	83 c4 1c             	add    esp,0x1c
c0016068:	c3                   	ret    
c0016069:	90                   	nop

c001606a <LogicalDisk::assignDriveLetter()>:
c001606a:	55                   	push   ebp
c001606b:	57                   	push   edi
c001606c:	56                   	push   esi
c001606d:	53                   	push   ebx
c001606e:	83 ec 14             	sub    esp,0x14
c0016071:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016075:	8b 3d a0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaa0
c001607b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016081:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016085:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001608b:	8b 3d a4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaa4
c0016091:	3c 01                	cmp    al,0x1
c0016093:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016097:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001609b:	19 c0                	sbb    eax,eax
c001609d:	83 e0 02             	and    eax,0x2
c00160a0:	83 c0 41             	add    eax,0x41
c00160a3:	0f be e8             	movsx  ebp,al
c00160a6:	3c 43                	cmp    al,0x43
c00160a8:	75 10                	jne    c00160ba <LogicalDisk::assignDriveLetter()+0x50>
c00160aa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160b1:	75 5d                	jne    c0016110 <LogicalDisk::assignDriveLetter()+0xa6>
c00160b3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160b8:	75 56                	jne    c0016110 <LogicalDisk::assignDriveLetter()+0xa6>
c00160ba:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160bd:	ba 01 00 00 00       	mov    edx,0x1
c00160c2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00160c6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00160ca:	d3 e2                	shl    edx,cl
c00160cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160d0:	89 d7                	mov    edi,edx
c00160d2:	89 d6                	mov    esi,edx
c00160d4:	c1 ff 1f             	sar    edi,0x1f
c00160d7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00160db:	21 f9                	and    ecx,edi
c00160dd:	09 d1                	or     ecx,edx
c00160df:	75 2f                	jne    c0016110 <LogicalDisk::assignDriveLetter()+0xa6>
c00160e1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00160e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160e9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00160ef:	09 f2                	or     edx,esi
c00160f1:	89 15 a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,edx
c00160f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160fb:	09 fa                	or     edx,edi
c00160fd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016101:	89 15 a4 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa4,edx
c0016107:	89 1c bd c0 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1540],ebx
c001610e:	eb 08                	jmp    c0016118 <LogicalDisk::assignDriveLetter()+0xae>
c0016110:	45                   	inc    ebp
c0016111:	40                   	inc    eax
c0016112:	3c 5b                	cmp    al,0x5b
c0016114:	75 90                	jne    c00160a6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016116:	31 c0                	xor    eax,eax
c0016118:	83 c4 14             	add    esp,0x14
c001611b:	5b                   	pop    ebx
c001611c:	5e                   	pop    esi
c001611d:	5f                   	pop    edi
c001611e:	5d                   	pop    ebp
c001611f:	c3                   	ret    

c0016120 <LogicalDisk::mount()>:
c0016120:	56                   	push   esi
c0016121:	53                   	push   ebx
c0016122:	53                   	push   ebx
c0016123:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016127:	8b 1d 34 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e634
c001612d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016137:	85 db                	test   ebx,ebx
c0016139:	74 27                	je     c0016162 <LogicalDisk::mount()+0x42>
c001613b:	51                   	push   ecx
c001613c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016143:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016145:	83 e8 41             	sub    eax,0x41
c0016148:	50                   	push   eax
c0016149:	56                   	push   esi
c001614a:	53                   	push   ebx
c001614b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	84 c0                	test   al,al
c0016153:	74 08                	je     c001615d <LogicalDisk::mount()+0x3d>
c0016155:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001615b:	eb 07                	jmp    c0016164 <LogicalDisk::mount()+0x44>
c001615d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016160:	eb d5                	jmp    c0016137 <LogicalDisk::mount()+0x17>
c0016162:	31 c0                	xor    eax,eax
c0016164:	5a                   	pop    edx
c0016165:	5b                   	pop    ebx
c0016166:	5e                   	pop    esi
c0016167:	c3                   	ret    

c0016168 <LogicalDisk::unmount()>:
c0016168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001616c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016176:	c3                   	ret    
c0016177:	90                   	nop

c0016178 <LogicalDisk::eject()>:
c0016178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001617c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016182:	8b 10                	mov    edx,DWORD PTR [eax]
c0016184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016188:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001618b:	90                   	nop

c001618c <LogicalDisk::unassignDriveLetter()>:
c001618c:	57                   	push   edi
c001618d:	56                   	push   esi
c001618e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016192:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016199:	84 c9                	test   cl,cl
c001619b:	75 0f                	jne    c00161ac <LogicalDisk::unassignDriveLetter()+0x20>
c001619d:	c7 44 24 0c b8 b6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b6b8
c00161a5:	5e                   	pop    esi
c00161a6:	5f                   	pop    edi
c00161a7:	e9 79 40 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c00161ac:	83 e9 41             	sub    ecx,0x41
c00161af:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00161b6:	b8 01 00 00 00       	mov    eax,0x1
c00161bb:	c7 04 8d c0 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1540],0x0
c00161c6:	d3 e0                	shl    eax,cl
c00161c8:	89 c7                	mov    edi,eax
c00161ca:	f7 d0                	not    eax
c00161cc:	c1 ff 1f             	sar    edi,0x1f
c00161cf:	21 05 a0 ea 02 c0    	and    DWORD PTR ds:0xc002eaa0,eax
c00161d5:	89 fe                	mov    esi,edi
c00161d7:	f7 d6                	not    esi
c00161d9:	21 35 a4 ea 02 c0    	and    DWORD PTR ds:0xc002eaa4,esi
c00161df:	5e                   	pop    esi
c00161e0:	5f                   	pop    edi
c00161e1:	c3                   	ret    

c00161e2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00161e2:	57                   	push   edi
c00161e3:	56                   	push   esi
c00161e4:	53                   	push   ebx
c00161e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00161e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00161f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00161fb:	77 41                	ja     c001623e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00161fd:	99                   	cdq    
c00161fe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016204:	01 c8                	add    eax,ecx
c0016206:	11 da                	adc    edx,ebx
c0016208:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001620e:	19 d7                	sbb    edi,edx
c0016210:	72 33                	jb     c0016245 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016212:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016218:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001621e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016222:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016226:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001622c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016236:	5b                   	pop    ebx
c0016237:	5e                   	pop    esi
c0016238:	5f                   	pop    edi
c0016239:	e9 1c 0b 00 00       	jmp    c0016d5a <VCache::read(unsigned long long, int, void*)>
c001623e:	b8 05 00 00 00       	mov    eax,0x5
c0016243:	eb 05                	jmp    c001624a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016245:	b8 07 00 00 00       	mov    eax,0x7
c001624a:	5b                   	pop    ebx
c001624b:	5e                   	pop    esi
c001624c:	5f                   	pop    edi
c001624d:	c3                   	ret    

c001624e <LogicalDisk::write(unsigned long long, int, void*)>:
c001624e:	57                   	push   edi
c001624f:	56                   	push   esi
c0016250:	53                   	push   ebx
c0016251:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016255:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016259:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001625d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016261:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016267:	77 41                	ja     c00162aa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016269:	99                   	cdq    
c001626a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016270:	01 c8                	add    eax,ecx
c0016272:	11 da                	adc    edx,ebx
c0016274:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001627a:	19 d7                	sbb    edi,edx
c001627c:	72 33                	jb     c00162b1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001627e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016284:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001628a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001628e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016292:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016298:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001629e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162a2:	5b                   	pop    ebx
c00162a3:	5e                   	pop    esi
c00162a4:	5f                   	pop    edi
c00162a5:	e9 86 09 00 00       	jmp    c0016c30 <VCache::write(unsigned long long, int, void*)>
c00162aa:	b8 05 00 00 00       	mov    eax,0x5
c00162af:	eb 05                	jmp    c00162b6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00162b1:	b8 07 00 00 00       	mov    eax,0x7
c00162b6:	5b                   	pop    ebx
c00162b7:	5e                   	pop    esi
c00162b8:	5f                   	pop    edi
c00162b9:	c3                   	ret    

c00162ba <Mouse::Mouse(char const*)>:
c00162ba:	83 ec 0c             	sub    esp,0xc
c00162bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c1:	83 ec 08             	sub    esp,0x8
c00162c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c8:	50                   	push   eax
c00162c9:	e8 f6 db ff ff       	call   c0013ec4 <Device::Device(char const*)>
c00162ce:	83 c4 10             	add    esp,0x10
c00162d1:	ba 0c b7 02 c0       	mov    edx,0xc002b70c
c00162d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162da:	89 10                	mov    DWORD PTR [eax],edx
c00162dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00162ea:	90                   	nop
c00162eb:	83 c4 0c             	add    esp,0xc
c00162ee:	c3                   	ret    
c00162ef:	90                   	nop

c00162f0 <Mouse::~Mouse()>:
c00162f0:	83 ec 0c             	sub    esp,0xc
c00162f3:	ba 0c b7 02 c0       	mov    edx,0xc002b70c
c00162f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fc:	89 10                	mov    DWORD PTR [eax],edx
c00162fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016302:	83 ec 0c             	sub    esp,0xc
c0016305:	50                   	push   eax
c0016306:	e8 83 d8 ff ff       	call   c0013b8e <Device::~Device()>
c001630b:	83 c4 10             	add    esp,0x10
c001630e:	90                   	nop
c001630f:	83 c4 0c             	add    esp,0xc
c0016312:	c3                   	ret    
c0016313:	90                   	nop

c0016314 <Mouse::~Mouse()>:
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631e:	e8 cd ff ff ff       	call   c00162f0 <Mouse::~Mouse()>
c0016323:	83 c4 10             	add    esp,0x10
c0016326:	83 ec 08             	sub    esp,0x8
c0016329:	68 58 01 00 00       	push   0x158
c001632e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016332:	e8 64 c4 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	83 c4 0c             	add    esp,0xc
c001633d:	c3                   	ret    

c001633e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001633e:	55                   	push   ebp
c001633f:	57                   	push   edi
c0016340:	56                   	push   esi
c0016341:	53                   	push   ebx
c0016342:	81 ec 28 01 00 00    	sub    esp,0x128
c0016348:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001634f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016356:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001635d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016364:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016368:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001636c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016373:	e8 48 dc ff ff       	call   c0013fc0 <Device::getName()>
c0016378:	5a                   	pop    edx
c0016379:	59                   	pop    ecx
c001637a:	50                   	push   eax
c001637b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001637f:	55                   	push   ebp
c0016380:	e8 87 a4 fe ff       	call   c000080c <strcpy>
c0016385:	5b                   	pop    ebx
c0016386:	58                   	pop    eax
c0016387:	68 30 b7 02 c0       	push   0xc002b730
c001638c:	55                   	push   ebp
c001638d:	e8 ba a5 fe ff       	call   c000094c <strcat>
c0016392:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016399:	e8 7d 94 ff ff       	call   c000f81b <malloc>
c001639e:	83 c4 0c             	add    esp,0xc
c00163a1:	89 c3                	mov    ebx,eax
c00163a3:	57                   	push   edi
c00163a4:	56                   	push   esi
c00163a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163ad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00163b4:	55                   	push   ebp
c00163b5:	50                   	push   eax
c00163b6:	e8 f9 fb ff ff       	call   c0015fb4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00163bb:	83 c4 14             	add    esp,0x14
c00163be:	53                   	push   ebx
c00163bf:	e8 a6 fc ff ff       	call   c001606a <LogicalDisk::assignDriveLetter()>
c00163c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163c7:	e8 54 fd ff ff       	call   c0016120 <LogicalDisk::mount()>
c00163cc:	58                   	pop    eax
c00163cd:	5a                   	pop    edx
c00163ce:	53                   	push   ebx
c00163cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163d6:	e8 e5 d8 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c00163db:	81 c4 2c 01 00 00    	add    esp,0x12c
c00163e1:	5b                   	pop    ebx
c00163e2:	5e                   	pop    esi
c00163e3:	5f                   	pop    edi
c00163e4:	5d                   	pop    ebp
c00163e5:	c3                   	ret    

c00163e6 <createPartitionsForDisk(PhysicalDisk*)>:
c00163e6:	55                   	push   ebp
c00163e7:	57                   	push   edi
c00163e8:	56                   	push   esi
c00163e9:	53                   	push   ebx
c00163ea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00163f0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00163f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00163fd:	3d 00 02 00 00       	cmp    eax,0x200
c0016402:	74 27                	je     c001642b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016404:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001640a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016410:	83 ec 10             	sub    esp,0x10
c0016413:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016417:	99                   	cdq    
c0016418:	c1 e6 0a             	shl    esi,0xa
c001641b:	52                   	push   edx
c001641c:	89 fd                	mov    ebp,edi
c001641e:	50                   	push   eax
c001641f:	55                   	push   ebp
c0016420:	56                   	push   esi
c0016421:	e8 7e 08 01 00       	call   c0026ca4 <__udivdi3>
c0016426:	e9 b1 00 00 00       	jmp    c00164dc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001642b:	83 ec 0c             	sub    esp,0xc
c001642e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016430:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016434:	56                   	push   esi
c0016435:	6a 01                	push   0x1
c0016437:	6a 00                	push   0x0
c0016439:	6a 00                	push   0x0
c001643b:	53                   	push   ebx
c001643c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001643f:	83 c4 20             	add    esp,0x20
c0016442:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001644a:	75 0a                	jne    c0016456 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001644c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016454:	74 2c                	je     c0016482 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016456:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001645c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016462:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016468:	83 ec 10             	sub    esp,0x10
c001646b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001646f:	89 f7                	mov    edi,esi
c0016471:	c1 e0 0a             	shl    eax,0xa
c0016474:	c1 ff 1f             	sar    edi,0x1f
c0016477:	57                   	push   edi
c0016478:	56                   	push   esi
c0016479:	52                   	push   edx
c001647a:	50                   	push   eax
c001647b:	e8 24 08 01 00       	call   c0026ca4 <__udivdi3>
c0016480:	eb 5a                	jmp    c00164dc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016482:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016489:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016490:	83 e1 7f             	and    ecx,0x7f
c0016493:	83 e0 7f             	and    eax,0x7f
c0016496:	01 c1                	add    ecx,eax
c0016498:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001649f:	83 e0 7f             	and    eax,0x7f
c00164a2:	01 c1                	add    ecx,eax
c00164a4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00164ab:	83 e0 7f             	and    eax,0x7f
c00164ae:	00 c1                	add    cl,al
c00164b0:	74 41                	je     c00164f3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00164b2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164b8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164c4:	83 ec 10             	sub    esp,0x10
c00164c7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164cb:	89 f7                	mov    edi,esi
c00164cd:	c1 e0 0a             	shl    eax,0xa
c00164d0:	c1 ff 1f             	sar    edi,0x1f
c00164d3:	57                   	push   edi
c00164d4:	56                   	push   esi
c00164d5:	52                   	push   edx
c00164d6:	50                   	push   eax
c00164d7:	e8 c8 07 01 00       	call   c0026ca4 <__udivdi3>
c00164dc:	83 c4 14             	add    esp,0x14
c00164df:	52                   	push   edx
c00164e0:	50                   	push   eax
c00164e1:	6a 00                	push   0x0
c00164e3:	6a 00                	push   0x0
c00164e5:	53                   	push   ebx
c00164e6:	e8 53 fe ff ff       	call   c001633e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164eb:	83 c4 20             	add    esp,0x20
c00164ee:	e9 79 01 00 00       	jmp    c001666c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00164f3:	89 f0                	mov    eax,esi
c00164f5:	31 f6                	xor    esi,esi
c00164f7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00164fe:	75 02                	jne    c0016502 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016500:	89 f1                	mov    ecx,esi
c0016502:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016509:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016510:	c1 e2 08             	shl    edx,0x8
c0016513:	c1 e7 10             	shl    edi,0x10
c0016516:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001651e:	09 fa                	or     edx,edi
c0016520:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016528:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001652f:	83 c0 10             	add    eax,0x10
c0016532:	09 fa                	or     edx,edi
c0016534:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001653b:	c1 e7 18             	shl    edi,0x18
c001653e:	09 fa                	or     edx,edi
c0016540:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016547:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001654b:	c1 e7 10             	shl    edi,0x10
c001654e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016555:	c1 e2 08             	shl    edx,0x8
c0016558:	09 fa                	or     edx,edi
c001655a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016561:	09 fa                	or     edx,edi
c0016563:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001656a:	c1 e7 18             	shl    edi,0x18
c001656d:	09 fa                	or     edx,edi
c001656f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016573:	46                   	inc    esi
c0016574:	83 fe 04             	cmp    esi,0x4
c0016577:	0f 85 7a ff ff ff    	jne    c00164f7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001657d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016581:	83 f0 01             	xor    eax,0x1
c0016584:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016588:	75 57                	jne    c00165e1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001658a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001658e:	83 f0 01             	xor    eax,0x1
c0016591:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016595:	75 4a                	jne    c00165e1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016597:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001659b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00165a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00165ab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165b1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165b7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165c1:	89 f7                	mov    edi,esi
c00165c3:	c1 e0 0a             	shl    eax,0xa
c00165c6:	c1 ff 1f             	sar    edi,0x1f
c00165c9:	57                   	push   edi
c00165ca:	56                   	push   esi
c00165cb:	52                   	push   edx
c00165cc:	50                   	push   eax
c00165cd:	e8 d2 06 01 00       	call   c0026ca4 <__udivdi3>
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00165d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00165dd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00165e1:	84 c9                	test   cl,cl
c00165e3:	74 53                	je     c0016638 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00165e5:	0f b6 c9             	movzx  ecx,cl
c00165e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00165f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00165f4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00165f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016600:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016604:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001660c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016614:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016618:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001661c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016620:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016624:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016628:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001662c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016630:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016634:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016638:	31 ed                	xor    ebp,ebp
c001663a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001663e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016642:	89 f8                	mov    eax,edi
c0016644:	09 f0                	or     eax,esi
c0016646:	74 1e                	je     c0016666 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016648:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001664c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016650:	89 d1                	mov    ecx,edx
c0016652:	09 c1                	or     ecx,eax
c0016654:	74 10                	je     c0016666 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016656:	83 ec 0c             	sub    esp,0xc
c0016659:	57                   	push   edi
c001665a:	56                   	push   esi
c001665b:	52                   	push   edx
c001665c:	50                   	push   eax
c001665d:	53                   	push   ebx
c001665e:	e8 db fc ff ff       	call   c001633e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016663:	83 c4 20             	add    esp,0x20
c0016666:	45                   	inc    ebp
c0016667:	83 fd 04             	cmp    ebp,0x4
c001666a:	75 ce                	jne    c001663a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001666c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016672:	5b                   	pop    ebx
c0016673:	5e                   	pop    esi
c0016674:	5f                   	pop    edi
c0016675:	5d                   	pop    ebp
c0016676:	c3                   	ret    
c0016677:	90                   	nop

c0016678 <Serial::Serial(char const*)>:
c0016678:	83 ec 0c             	sub    esp,0xc
c001667b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001667f:	83 ec 08             	sub    esp,0x8
c0016682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016686:	50                   	push   eax
c0016687:	e8 38 d8 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c001668c:	83 c4 10             	add    esp,0x10
c001668f:	ba 44 b7 02 c0       	mov    edx,0xc002b744
c0016694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016698:	89 10                	mov    DWORD PTR [eax],edx
c001669a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001669e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00166a8:	90                   	nop
c00166a9:	83 c4 0c             	add    esp,0xc
c00166ac:	c3                   	ret    
c00166ad:	90                   	nop

c00166ae <Serial::~Serial()>:
c00166ae:	83 ec 0c             	sub    esp,0xc
c00166b1:	ba 44 b7 02 c0       	mov    edx,0xc002b744
c00166b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ba:	89 10                	mov    DWORD PTR [eax],edx
c00166bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	50                   	push   eax
c00166c4:	e8 c5 d4 ff ff       	call   c0013b8e <Device::~Device()>
c00166c9:	83 c4 10             	add    esp,0x10
c00166cc:	90                   	nop
c00166cd:	83 c4 0c             	add    esp,0xc
c00166d0:	c3                   	ret    
c00166d1:	90                   	nop

c00166d2 <Serial::~Serial()>:
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	83 ec 0c             	sub    esp,0xc
c00166d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166dc:	e8 cd ff ff ff       	call   c00166ae <Serial::~Serial()>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	83 ec 08             	sub    esp,0x8
c00166e7:	68 58 01 00 00       	push   0x158
c00166ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166f0:	e8 a6 c0 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	83 c4 0c             	add    esp,0xc
c00166fb:	c3                   	ret    

c00166fc <Timer::Timer(char const*)>:
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016703:	83 ec 08             	sub    esp,0x8
c0016706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001670a:	50                   	push   eax
c001670b:	e8 b4 d7 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c0016718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671c:	89 10                	mov    DWORD PTR [eax],edx
c001671e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016722:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001672c:	90                   	nop
c001672d:	83 c4 0c             	add    esp,0xc
c0016730:	c3                   	ret    
c0016731:	90                   	nop

c0016732 <Timer::~Timer()>:
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c001673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673e:	89 10                	mov    DWORD PTR [eax],edx
c0016740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	50                   	push   eax
c0016748:	e8 41 d4 ff ff       	call   c0013b8e <Device::~Device()>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	90                   	nop
c0016751:	83 c4 0c             	add    esp,0xc
c0016754:	c3                   	ret    
c0016755:	90                   	nop

c0016756 <Timer::~Timer()>:
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016760:	e8 cd ff ff ff       	call   c0016732 <Timer::~Timer()>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	68 5c 01 00 00       	push   0x15c
c0016770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016774:	e8 22 c0 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	83 c4 0c             	add    esp,0xc
c001677f:	c3                   	ret    

c0016780 <Timer::read()>:
c0016780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016784:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001678a:	c3                   	ret    

c001678b <timerHandler(unsigned long long)>:
c001678b:	55                   	push   ebp
c001678c:	57                   	push   edi
c001678d:	56                   	push   esi
c001678e:	53                   	push   ebx
c001678f:	83 ec 0c             	sub    esp,0xc
c0016792:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016796:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001679a:	01 35 30 eb 02 c0    	add    DWORD PTR ds:0xc002eb30,esi
c00167a0:	11 3d 34 eb 02 c0    	adc    DWORD PTR ds:0xc002eb34,edi
c00167a6:	80 3d cd e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4cd,0x0
c00167ad:	0f 84 42 01 00 00    	je     c00168f5 <timerHandler(unsigned long long)+0x16a>
c00167b3:	fa                   	cli    
c00167b4:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c00167ba:	83 ec 0c             	sub    esp,0xc
c00167bd:	ff 05 c4 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c4
c00167c3:	68 d8 f9 02 c0       	push   0xc002f9d8
c00167c8:	e8 31 25 01 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	84 c0                	test   al,al
c00167d2:	0f 85 a2 00 00 00    	jne    c001687a <timerHandler(unsigned long long)+0xef>
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	68 d8 f9 02 c0       	push   0xc002f9d8
c00167e0:	e8 35 25 01 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	89 c3                	mov    ebx,eax
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	68 d8 f9 02 c0       	push   0xc002f9d8
c00167f2:	e8 23 25 01 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167f7:	c7 04 24 d8 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9d8
c00167fe:	89 c5                	mov    ebp,eax
c0016800:	e8 1d 25 01 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016805:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001680e:	39 15 30 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb30,edx
c0016814:	a1 34 eb 02 c0       	mov    eax,ds:0xc002eb34
c0016819:	19 c8                	sbb    eax,ecx
c001681b:	72 21                	jb     c001683e <timerHandler(unsigned long long)+0xb3>
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	55                   	push   ebp
c0016821:	e8 23 7a 00 00       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c0016826:	83 c4 10             	add    esp,0x10
c0016829:	39 eb                	cmp    ebx,ebp
c001682b:	75 21                	jne    c001684e <timerHandler(unsigned long long)+0xc3>
c001682d:	83 ec 0c             	sub    esp,0xc
c0016830:	68 d8 f9 02 c0       	push   0xc002f9d8
c0016835:	e8 e0 24 01 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001683a:	89 c3                	mov    ebx,eax
c001683c:	eb 0d                	jmp    c001684b <timerHandler(unsigned long long)+0xc0>
c001683e:	50                   	push   eax
c001683f:	50                   	push   eax
c0016840:	55                   	push   ebp
c0016841:	68 d8 f9 02 c0       	push   0xc002f9d8
c0016846:	e8 85 25 01 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	68 d8 f9 02 c0       	push   0xc002f9d8
c0016856:	e8 a3 24 01 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	84 c0                	test   al,al
c0016860:	75 18                	jne    c001687a <timerHandler(unsigned long long)+0xef>
c0016862:	83 ec 0c             	sub    esp,0xc
c0016865:	68 d8 f9 02 c0       	push   0xc002f9d8
c001686a:	e8 ab 24 01 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	39 d8                	cmp    eax,ebx
c0016874:	0f 85 70 ff ff ff    	jne    c00167ea <timerHandler(unsigned long long)+0x5f>
c001687a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001687f:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016883:	74 3d                	je     c00168c2 <timerHandler(unsigned long long)+0x137>
c0016885:	80 3d cc e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4cc,0x0
c001688c:	74 34                	je     c00168c2 <timerHandler(unsigned long long)+0x137>
c001688e:	fa                   	cli    
c001688f:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c0016895:	31 d2                	xor    edx,edx
c0016897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001689c:	89 f9                	mov    ecx,edi
c001689e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00168a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168a9:	39 c6                	cmp    esi,eax
c00168ab:	19 d1                	sbb    ecx,edx
c00168ad:	72 05                	jb     c00168b4 <timerHandler(unsigned long long)+0x129>
c00168af:	e8 03 75 00 00       	call   c001ddb7 <schedule()>
c00168b4:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00168b9:	48                   	dec    eax
c00168ba:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00168bf:	75 01                	jne    c00168c2 <timerHandler(unsigned long long)+0x137>
c00168c1:	fb                   	sti    
c00168c2:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c00168c7:	48                   	dec    eax
c00168c8:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c00168cd:	75 18                	jne    c00168e7 <timerHandler(unsigned long long)+0x15c>
c00168cf:	83 3d c0 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f9c0,0x0
c00168d6:	74 0f                	je     c00168e7 <timerHandler(unsigned long long)+0x15c>
c00168d8:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c00168e2:	e8 d0 74 00 00       	call   c001ddb7 <schedule()>
c00168e7:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00168ec:	48                   	dec    eax
c00168ed:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00168f2:	75 01                	jne    c00168f5 <timerHandler(unsigned long long)+0x16a>
c00168f4:	fb                   	sti    
c00168f5:	83 c4 0c             	add    esp,0xc
c00168f8:	5b                   	pop    ebx
c00168f9:	5e                   	pop    esi
c00168fa:	5f                   	pop    edi
c00168fb:	5d                   	pop    ebp
c00168fc:	c3                   	ret    

c00168fd <setupTimer(int)>:
c00168fd:	57                   	push   edi
c00168fe:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0016903:	56                   	push   esi
c0016904:	53                   	push   ebx
c0016905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016909:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001690f:	83 ec 0c             	sub    esp,0xc
c0016912:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016918:	e8 a3 d6 ff ff       	call   c0013fc0 <Device::getName()>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016923:	0f 85 8d 00 00 00    	jne    c00169b6 <setupTimer(int)+0xb9>
c0016929:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001692e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016935:	74 7f                	je     c00169b6 <setupTimer(int)+0xb9>
c0016937:	83 ec 0c             	sub    esp,0xc
c001693a:	68 5c 01 00 00       	push   0x15c
c001693f:	e8 d7 8e ff ff       	call   c000f81b <malloc>
c0016944:	89 04 24             	mov    DWORD PTR [esp],eax
c0016947:	89 c3                	mov    ebx,eax
c0016949:	e8 32 ff 00 00       	call   c0026880 <PIT::PIT()>
c001694e:	59                   	pop    ecx
c001694f:	5f                   	pop    edi
c0016950:	53                   	push   ebx
c0016951:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0016957:	e8 64 d3 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c001695c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001695e:	6a 00                	push   0x0
c0016960:	6a 00                	push   0x0
c0016962:	56                   	push   esi
c0016963:	53                   	push   ebx
c0016964:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016967:	83 c4 14             	add    esp,0x14
c001696a:	68 60 01 00 00       	push   0x160
c001696f:	e8 a7 8e ff ff       	call   c000f81b <malloc>
c0016974:	89 04 24             	mov    DWORD PTR [esp],eax
c0016977:	89 c7                	mov    edi,eax
c0016979:	e8 b2 fd 00 00       	call   c0026730 <APICTimer::APICTimer()>
c001697e:	6a 00                	push   0x0
c0016980:	6a 00                	push   0x0
c0016982:	56                   	push   esi
c0016983:	57                   	push   edi
c0016984:	e8 a9 fc 00 00       	call   c0026632 <APICTimer::open(int, int, void*)>
c0016989:	83 c4 20             	add    esp,0x20
c001698c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001698e:	6a 00                	push   0x0
c0016990:	6a 00                	push   0x0
c0016992:	6a 00                	push   0x0
c0016994:	53                   	push   ebx
c0016995:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016998:	58                   	pop    eax
c0016999:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001699e:	5a                   	pop    edx
c001699f:	57                   	push   edi
c00169a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169a6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169ac:	e8 0f d3 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	eb 33                	jmp    c00169e9 <setupTimer(int)+0xec>
c00169b6:	83 ec 0c             	sub    esp,0xc
c00169b9:	68 5c 01 00 00       	push   0x15c
c00169be:	e8 58 8e ff ff       	call   c000f81b <malloc>
c00169c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00169c6:	89 c3                	mov    ebx,eax
c00169c8:	e8 b3 fe 00 00       	call   c0026880 <PIT::PIT()>
c00169cd:	58                   	pop    eax
c00169ce:	5a                   	pop    edx
c00169cf:	53                   	push   ebx
c00169d0:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c00169d6:	e8 e5 d2 ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c00169db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169dd:	6a 00                	push   0x0
c00169df:	6a 00                	push   0x0
c00169e1:	56                   	push   esi
c00169e2:	53                   	push   ebx
c00169e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169e6:	83 c4 20             	add    esp,0x20
c00169e9:	89 d8                	mov    eax,ebx
c00169eb:	5b                   	pop    ebx
c00169ec:	5e                   	pop    esi
c00169ed:	5f                   	pop    edi
c00169ee:	c3                   	ret    
c00169ef:	90                   	nop

c00169f0 <VCache::VCache(PhysicalDisk*)>:
c00169f0:	53                   	push   ebx
c00169f1:	83 ec 18             	sub    esp,0x18
c00169f4:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c00169f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fd:	89 10                	mov    DWORD PTR [eax],edx
c00169ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a03:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a0e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a19:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016a20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016a32:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a3d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a50:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a57:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a6a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a7a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a81:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016a89:	83 ec 0c             	sub    esp,0xc
c0016a8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a90:	e8 86 8d ff ff       	call   c000f81b <malloc>
c0016a95:	83 c4 10             	add    esp,0x10
c0016a98:	89 c3                	mov    ebx,eax
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	53                   	push   ebx
c0016a9e:	e8 dd 70 00 00       	call   c001db80 <Mutex::Mutex()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aaa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ab5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ac3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ac7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ad8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ade:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ae4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ae8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016aeb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016af6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016afa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b00:	05 00 01 00 00       	add    eax,0x100
c0016b05:	c1 e0 04             	shl    eax,0x4
c0016b08:	83 ec 0c             	sub    esp,0xc
c0016b0b:	50                   	push   eax
c0016b0c:	e8 0a 8d ff ff       	call   c000f81b <malloc>
c0016b11:	83 c4 10             	add    esp,0x10
c0016b14:	89 c2                	mov    edx,eax
c0016b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b21:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b3a:	c1 e0 07             	shl    eax,0x7
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	50                   	push   eax
c0016b41:	e8 d5 8c ff ff       	call   c000f81b <malloc>
c0016b46:	83 c4 10             	add    esp,0x10
c0016b49:	89 c2                	mov    edx,eax
c0016b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b4f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016b52:	90                   	nop
c0016b53:	83 c4 18             	add    esp,0x18
c0016b56:	5b                   	pop    ebx
c0016b57:	c3                   	ret    

c0016b58 <VCache::invalidateReadBuffer()>:
c0016b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b5c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b66:	c3                   	ret    
c0016b67:	90                   	nop

c0016b68 <VCache::writeWriteBuffer()>:
c0016b68:	53                   	push   ebx
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016b70:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b76:	68 b0 b7 02 c0       	push   0xc002b7b0
c0016b7b:	e8 fc bc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016b80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b83:	5a                   	pop    edx
c0016b84:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b8c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016b8f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016b92:	50                   	push   eax
c0016b93:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b96:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016b9d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016ba4:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016ba8:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016baf:	83 c4 28             	add    esp,0x28
c0016bb2:	5b                   	pop    ebx
c0016bb3:	c3                   	ret    

c0016bb4 <VCache::~VCache()>:
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c0016bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc0:	89 10                	mov    DWORD PTR [eax],edx
c0016bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016bc9:	84 c0                	test   al,al
c0016bcb:	74 0f                	je     c0016bdc <VCache::~VCache()+0x28>
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd4:	e8 8f ff ff ff       	call   c0016b68 <VCache::writeWriteBuffer()>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	50                   	push   eax
c0016be7:	e8 3f 8c ff ff       	call   c000f82b <free>
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	50                   	push   eax
c0016bfa:	e8 2c 8c ff ff       	call   c000f82b <free>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	90                   	nop
c0016c03:	83 c4 0c             	add    esp,0xc
c0016c06:	c3                   	ret    
c0016c07:	90                   	nop

c0016c08 <VCache::~VCache()>:
c0016c08:	83 ec 0c             	sub    esp,0xc
c0016c0b:	83 ec 0c             	sub    esp,0xc
c0016c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c12:	e8 9d ff ff ff       	call   c0016bb4 <VCache::~VCache()>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	83 ec 08             	sub    esp,0x8
c0016c1d:	6a 44                	push   0x44
c0016c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c23:	e8 73 bb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	83 c4 0c             	add    esp,0xc
c0016c2e:	c3                   	ret    
c0016c2f:	90                   	nop

c0016c30 <VCache::write(unsigned long long, int, void*)>:
c0016c30:	55                   	push   ebp
c0016c31:	57                   	push   edi
c0016c32:	56                   	push   esi
c0016c33:	53                   	push   ebx
c0016c34:	83 ec 18             	sub    esp,0x18
c0016c37:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c3f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c43:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016c47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c4a:	e8 77 74 00 00       	call   c001e0c6 <Semaphore::acquire()>
c0016c4f:	c7 04 24 d4 b7 02 c0 	mov    DWORD PTR [esp],0xc002b7d4
c0016c56:	e8 21 bc ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c62:	74 0c                	je     c0016c70 <VCache::write(unsigned long long, int, void*)+0x40>
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	53                   	push   ebx
c0016c68:	e8 eb fe ff ff       	call   c0016b58 <VCache::invalidateReadBuffer()>
c0016c6d:	83 c4 10             	add    esp,0x10
c0016c70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c74:	74 66                	je     c0016cdc <VCache::write(unsigned long long, int, void*)+0xac>
c0016c76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c79:	99                   	cdq    
c0016c7a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c7d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c80:	31 f0                	xor    eax,esi
c0016c82:	89 d1                	mov    ecx,edx
c0016c84:	89 ca                	mov    edx,ecx
c0016c86:	31 fa                	xor    edx,edi
c0016c88:	09 d0                	or     eax,edx
c0016c8a:	75 44                	jne    c0016cd0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c8c:	83 fd 01             	cmp    ebp,0x1
c0016c8f:	75 3f                	jne    c0016cd0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c91:	83 ec 0c             	sub    esp,0xc
c0016c94:	68 fb b7 02 c0       	push   0xc002b7fb
c0016c99:	e8 de bb ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016c9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ca1:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016ca4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016caa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cae:	0f af f9             	imul   edi,ecx
c0016cb1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016cb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cb6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	40                   	inc    eax
c0016cbd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016cc0:	83 c0 80             	add    eax,0xffffff80
c0016cc3:	75 75                	jne    c0016d3a <VCache::write(unsigned long long, int, void*)+0x10a>
c0016cc5:	83 ec 0c             	sub    esp,0xc
c0016cc8:	53                   	push   ebx
c0016cc9:	e8 9a fe ff ff       	call   c0016b68 <VCache::writeWriteBuffer()>
c0016cce:	eb 41                	jmp    c0016d11 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	53                   	push   ebx
c0016cd4:	e8 8f fe ff ff       	call   c0016b68 <VCache::writeWriteBuffer()>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	83 fd 7f             	cmp    ebp,0x7f
c0016cdf:	7f 35                	jg     c0016d16 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016ce1:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016ce4:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016ce7:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016cea:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016cee:	56                   	push   esi
c0016cef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016cf3:	6a 01                	push   0x1
c0016cf5:	68 11 b8 02 c0       	push   0xc002b811
c0016cfa:	e8 7d bb ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016cff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d02:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d05:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d0b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	eb 24                	jmp    c0016d3a <VCache::write(unsigned long long, int, void*)+0x10a>
c0016d16:	52                   	push   edx
c0016d17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d1b:	55                   	push   ebp
c0016d1c:	68 32 b8 02 c0       	push   0xc002b832
c0016d21:	e8 56 bb ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016d26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d29:	59                   	pop    ecx
c0016d2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d30:	55                   	push   ebp
c0016d31:	57                   	push   edi
c0016d32:	56                   	push   esi
c0016d33:	50                   	push   eax
c0016d34:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d37:	83 c4 20             	add    esp,0x20
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	68 4f b8 02 c0       	push   0xc002b84f
c0016d42:	e8 35 bb ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016d47:	58                   	pop    eax
c0016d48:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d4b:	e8 e2 79 00 00       	call   c001e732 <Semaphore::release()>
c0016d50:	83 c4 1c             	add    esp,0x1c
c0016d53:	31 c0                	xor    eax,eax
c0016d55:	5b                   	pop    ebx
c0016d56:	5e                   	pop    esi
c0016d57:	5f                   	pop    edi
c0016d58:	5d                   	pop    ebp
c0016d59:	c3                   	ret    

c0016d5a <VCache::read(unsigned long long, int, void*)>:
c0016d5a:	55                   	push   ebp
c0016d5b:	57                   	push   edi
c0016d5c:	56                   	push   esi
c0016d5d:	53                   	push   ebx
c0016d5e:	83 ec 28             	sub    esp,0x28
c0016d61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d69:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d71:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d75:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016d79:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016d7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d80:	e8 41 73 00 00       	call   c001e0c6 <Semaphore::acquire()>
c0016d85:	c7 04 24 6f b8 02 c0 	mov    DWORD PTR [esp],0xc002b86f
c0016d8c:	e8 eb ba ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d98:	74 0c                	je     c0016da6 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	53                   	push   ebx
c0016d9e:	e8 c5 fd ff ff       	call   c0016b68 <VCache::writeWriteBuffer()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	83 fe 01             	cmp    esi,0x1
c0016da9:	75 79                	jne    c0016e24 <VCache::read(unsigned long long, int, void*)+0xca>
c0016dab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dae:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016db5:	75 6d                	jne    c0016e24 <VCache::read(unsigned long long, int, void*)+0xca>
c0016db7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016dba:	89 d1                	mov    ecx,edx
c0016dbc:	f7 d9                	neg    ecx
c0016dbe:	89 cf                	mov    edi,ecx
c0016dc0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dc4:	c1 ff 1f             	sar    edi,0x1f
c0016dc7:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016dca:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016dce:	89 ce                	mov    esi,ecx
c0016dd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dd4:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016dd8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ddc:	89 cf                	mov    edi,ecx
c0016dde:	74 0a                	je     c0016dea <VCache::read(unsigned long long, int, void*)+0x90>
c0016de0:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016de3:	75 05                	jne    c0016dea <VCache::read(unsigned long long, int, void*)+0x90>
c0016de5:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016de8:	74 1c                	je     c0016e06 <VCache::read(unsigned long long, int, void*)+0xac>
c0016dea:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016dee:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016df1:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016df9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016dfc:	52                   	push   edx
c0016dfd:	57                   	push   edi
c0016dfe:	56                   	push   esi
c0016dff:	50                   	push   eax
c0016e00:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e03:	83 c4 20             	add    esp,0x20
c0016e06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e09:	89 ef                	mov    edi,ebp
c0016e0b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e11:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e14:	8d 70 ff             	lea    esi,[eax-0x1]
c0016e17:	23 34 24             	and    esi,DWORD PTR [esp]
c0016e1a:	0f af f1             	imul   esi,ecx
c0016e1d:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e22:	eb 30                	jmp    c0016e54 <VCache::read(unsigned long long, int, void*)+0xfa>
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	53                   	push   ebx
c0016e28:	e8 2b fd ff ff       	call   c0016b58 <VCache::invalidateReadBuffer()>
c0016e2d:	83 c4 0c             	add    esp,0xc
c0016e30:	55                   	push   ebp
c0016e31:	56                   	push   esi
c0016e32:	68 95 b8 02 c0       	push   0xc002b895
c0016e37:	e8 40 ba ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016e3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e41:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e44:	56                   	push   esi
c0016e45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e4d:	50                   	push   eax
c0016e4e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e51:	83 c4 20             	add    esp,0x20
c0016e54:	83 ec 0c             	sub    esp,0xc
c0016e57:	68 b1 b8 02 c0       	push   0xc002b8b1
c0016e5c:	e8 1b ba ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0016e61:	58                   	pop    eax
c0016e62:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e65:	e8 c8 78 00 00       	call   c001e732 <Semaphore::release()>
c0016e6a:	83 c4 2c             	add    esp,0x2c
c0016e6d:	31 c0                	xor    eax,eax
c0016e6f:	5b                   	pop    ebx
c0016e70:	5e                   	pop    esi
c0016e71:	5f                   	pop    edi
c0016e72:	5d                   	pop    ebp
c0016e73:	c3                   	ret    

c0016e74 <Video::putrect(int, int, int, int, unsigned int)>:
c0016e74:	55                   	push   ebp
c0016e75:	57                   	push   edi
c0016e76:	56                   	push   esi
c0016e77:	53                   	push   ebx
c0016e78:	83 ec 1c             	sub    esp,0x1c
c0016e7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e87:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e93:	01 df                	add    edi,ebx
c0016e95:	39 fb                	cmp    ebx,edi
c0016e97:	7d 1f                	jge    c0016eb8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e99:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e9d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ea1:	7d 12                	jge    c0016eb5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016ea3:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ea5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ea9:	53                   	push   ebx
c0016eaa:	55                   	push   ebp
c0016eab:	45                   	inc    ebp
c0016eac:	56                   	push   esi
c0016ead:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016eb0:	83 c4 10             	add    esp,0x10
c0016eb3:	eb e8                	jmp    c0016e9d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016eb5:	43                   	inc    ebx
c0016eb6:	eb dd                	jmp    c0016e95 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016eb8:	83 c4 1c             	add    esp,0x1c
c0016ebb:	5b                   	pop    ebx
c0016ebc:	5e                   	pop    esi
c0016ebd:	5f                   	pop    edi
c0016ebe:	5d                   	pop    ebp
c0016ebf:	c3                   	ret    

c0016ec0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ec0:	55                   	push   ebp
c0016ec1:	57                   	push   edi
c0016ec2:	31 ff                	xor    edi,edi
c0016ec4:	56                   	push   esi
c0016ec5:	53                   	push   ebx
c0016ec6:	83 ec 1c             	sub    esp,0x1c
c0016ec9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ecd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ed1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ed8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016edd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ee1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ee5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ee9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016eec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ef0:	01 f9                	add    ecx,edi
c0016ef2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ef6:	7d 2f                	jge    c0016f27 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ef8:	31 f6                	xor    esi,esi
c0016efa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016efe:	01 f2                	add    edx,esi
c0016f00:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f04:	7d 1a                	jge    c0016f20 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f09:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f0c:	46                   	inc    esi
c0016f0d:	51                   	push   ecx
c0016f0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f12:	52                   	push   edx
c0016f13:	55                   	push   ebp
c0016f14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f1e:	eb da                	jmp    c0016efa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f20:	47                   	inc    edi
c0016f21:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f25:	eb c5                	jmp    c0016eec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f27:	83 c4 1c             	add    esp,0x1c
c0016f2a:	5b                   	pop    ebx
c0016f2b:	5e                   	pop    esi
c0016f2c:	5f                   	pop    edi
c0016f2d:	5d                   	pop    ebp
c0016f2e:	c3                   	ret    
c0016f2f:	90                   	nop

c0016f30 <Video::blit(unsigned int*, int, int, int, int)>:
c0016f30:	55                   	push   ebp
c0016f31:	57                   	push   edi
c0016f32:	56                   	push   esi
c0016f33:	53                   	push   ebx
c0016f34:	83 ec 1c             	sub    esp,0x1c
c0016f37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f3f:	85 c0                	test   eax,eax
c0016f41:	79 02                	jns    c0016f45 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f43:	31 c0                	xor    eax,eax
c0016f45:	c1 e0 02             	shl    eax,0x2
c0016f48:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f54:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f58:	39 d8                	cmp    eax,ebx
c0016f5a:	7e 49                	jle    c0016fa5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f5c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f62:	7c 41                	jl     c0016fa5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f64:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f70:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f74:	39 f9                	cmp    ecx,edi
c0016f76:	7e 22                	jle    c0016f9a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f78:	83 c5 04             	add    ebp,0x4
c0016f7b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f81:	7c 14                	jl     c0016f97 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f83:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f85:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f90:	56                   	push   esi
c0016f91:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f94:	83 c4 10             	add    esp,0x10
c0016f97:	47                   	inc    edi
c0016f98:	eb d2                	jmp    c0016f6c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f9e:	43                   	inc    ebx
c0016f9f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fa3:	eb ab                	jmp    c0016f50 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fa5:	83 c4 1c             	add    esp,0x1c
c0016fa8:	5b                   	pop    ebx
c0016fa9:	5e                   	pop    esi
c0016faa:	5f                   	pop    edi
c0016fab:	5d                   	pop    ebp
c0016fac:	c3                   	ret    
c0016fad:	90                   	nop

c0016fae <Video::clearScreen(unsigned int)>:
c0016fae:	57                   	push   edi
c0016faf:	56                   	push   esi
c0016fb0:	53                   	push   ebx
c0016fb1:	31 db                	xor    ebx,ebx
c0016fb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fb7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fbd:	7e 1f                	jle    c0016fde <Video::clearScreen(unsigned int)+0x30>
c0016fbf:	31 ff                	xor    edi,edi
c0016fc1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fc7:	7e 12                	jle    c0016fdb <Video::clearScreen(unsigned int)+0x2d>
c0016fc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fcf:	53                   	push   ebx
c0016fd0:	57                   	push   edi
c0016fd1:	47                   	inc    edi
c0016fd2:	56                   	push   esi
c0016fd3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fd6:	83 c4 10             	add    esp,0x10
c0016fd9:	eb e6                	jmp    c0016fc1 <Video::clearScreen(unsigned int)+0x13>
c0016fdb:	43                   	inc    ebx
c0016fdc:	eb d9                	jmp    c0016fb7 <Video::clearScreen(unsigned int)+0x9>
c0016fde:	5b                   	pop    ebx
c0016fdf:	5e                   	pop    esi
c0016fe0:	5f                   	pop    edi
c0016fe1:	c3                   	ret    

c0016fe2 <Video::putpixel(int, int, unsigned int)>:
c0016fe2:	c7 44 24 04 e0 b8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b8e0
c0016fea:	e9 36 32 00 00       	jmp    c001a225 <Krnl::panic(char const*)>
c0016fef:	90                   	nop

c0016ff0 <Video::Video(char const*)>:
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff7:	83 ec 08             	sub    esp,0x8
c0016ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ffe:	50                   	push   eax
c0016fff:	e8 c0 ce ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	ba 50 b9 02 c0       	mov    edx,0xc002b950
c001700c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017010:	89 10                	mov    DWORD PTR [eax],edx
c0017012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017016:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017020:	90                   	nop
c0017021:	83 c4 0c             	add    esp,0xc
c0017024:	c3                   	ret    
c0017025:	90                   	nop

c0017026 <Video::~Video()>:
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	ba 50 b9 02 c0       	mov    edx,0xc002b950
c001702e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017032:	89 10                	mov    DWORD PTR [eax],edx
c0017034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017038:	83 ec 0c             	sub    esp,0xc
c001703b:	50                   	push   eax
c001703c:	e8 4d cb ff ff       	call   c0013b8e <Device::~Device()>
c0017041:	83 c4 10             	add    esp,0x10
c0017044:	90                   	nop
c0017045:	83 c4 0c             	add    esp,0xc
c0017048:	c3                   	ret    
c0017049:	90                   	nop

c001704a <Video::~Video()>:
c001704a:	83 ec 0c             	sub    esp,0xc
c001704d:	83 ec 0c             	sub    esp,0xc
c0017050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017054:	e8 cd ff ff ff       	call   c0017026 <Video::~Video()>
c0017059:	83 c4 10             	add    esp,0x10
c001705c:	83 ec 08             	sub    esp,0x8
c001705f:	68 64 01 00 00       	push   0x164
c0017064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017068:	e8 2e b7 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	83 c4 0c             	add    esp,0xc
c0017073:	c3                   	ret    

c0017074 <Video::isMonochrome()>:
c0017074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017078:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001707e:	c3                   	ret    
c001707f:	90                   	nop

c0017080 <Video::getWidth()>:
c0017080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017084:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001708a:	c3                   	ret    
c001708b:	90                   	nop

c001708c <Video::getHeight()>:
c001708c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017090:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017096:	c3                   	ret    
c0017097:	90                   	nop

c0017098 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017098:	55                   	push   ebp
c0017099:	57                   	push   edi
c001709a:	56                   	push   esi
c001709b:	53                   	push   ebx
c001709c:	83 ec 2c             	sub    esp,0x2c
c001709f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170a7:	83 f8 01             	cmp    eax,0x1
c00170aa:	19 c9                	sbb    ecx,ecx
c00170ac:	31 db                	xor    ebx,ebx
c00170ae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170b2:	89 cd                	mov    ebp,ecx
c00170b4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170bc:	f7 d5                	not    ebp
c00170be:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170c8:	01 d8                	add    eax,ebx
c00170ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ce:	56                   	push   esi
c00170cf:	e8 b8 ff ff ff       	call   c001708c <Video::getHeight()>
c00170d4:	59                   	pop    ecx
c00170d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170d9:	7e 70                	jle    c001714b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170db:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170df:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170e3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170ea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170ee:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00170f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170f9:	89 f8                	mov    eax,edi
c00170fb:	83 c0 20             	add    eax,0x20
c00170fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017102:	56                   	push   esi
c0017103:	e8 78 ff ff ff       	call   c0017080 <Video::getWidth()>
c0017108:	5a                   	pop    edx
c0017109:	39 c7                	cmp    edi,eax
c001710b:	7d 34                	jge    c0017141 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001710d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017112:	74 05                	je     c0017119 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017114:	8b 06                	mov    eax,DWORD PTR [esi]
c0017116:	55                   	push   ebp
c0017117:	eb 0d                	jmp    c0017126 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017119:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001711e:	74 12                	je     c0017132 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017120:	8b 06                	mov    eax,DWORD PTR [esi]
c0017122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017126:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001712a:	57                   	push   edi
c001712b:	56                   	push   esi
c001712c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017136:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001713a:	47                   	inc    edi
c001713b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001713f:	75 c1                	jne    c0017102 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017141:	43                   	inc    ebx
c0017142:	83 fb 20             	cmp    ebx,0x20
c0017145:	0f 85 79 ff ff ff    	jne    c00170c4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001714b:	83 c4 2c             	add    esp,0x2c
c001714e:	5b                   	pop    ebx
c001714f:	5e                   	pop    esi
c0017150:	5f                   	pop    edi
c0017151:	5d                   	pop    ebp
c0017152:	c3                   	ret    
c0017153:	90                   	nop

c0017154 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017154:	55                   	push   ebp
c0017155:	57                   	push   edi
c0017156:	56                   	push   esi
c0017157:	53                   	push   ebx
c0017158:	83 ec 28             	sub    esp,0x28
c001715b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001715f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017163:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017167:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001716b:	c1 e6 08             	shl    esi,0x8
c001716e:	01 c6                	add    esi,eax
c0017170:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017174:	c1 e0 08             	shl    eax,0x8
c0017177:	01 d0                	add    eax,edx
c0017179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001717d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017181:	0f af c6             	imul   eax,esi
c0017184:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001718b:	50                   	push   eax
c001718c:	e8 8a 86 ff ff       	call   c000f81b <malloc>
c0017191:	83 c4 10             	add    esp,0x10
c0017194:	89 c7                	mov    edi,eax
c0017196:	85 c0                	test   eax,eax
c0017198:	75 10                	jne    c00171aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	68 01 b9 02 c0       	push   0xc002b901
c00171a2:	e8 7e 30 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00171ad:	ba 12 00 00 00       	mov    edx,0x12
c00171b2:	84 c0                	test   al,al
c00171b4:	74 11                	je     c00171c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00171b6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00171ba:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00171be:	c1 fa 03             	sar    edx,0x3
c00171c1:	0f af d1             	imul   edx,ecx
c00171c4:	83 c2 12             	add    edx,0x12
c00171c7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171cb:	74 04                	je     c00171d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00171cd:	85 f6                	test   esi,esi
c00171cf:	75 12                	jne    c00171e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	68 11 b9 02 c0       	push   0xc002b911
c00171d9:	e8 9e b6 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00171de:	e9 b8 00 00 00       	jmp    c001729b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00171e3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00171e7:	80 f9 02             	cmp    cl,0x2
c00171ea:	0f 85 96 00 00 00    	jne    c0017286 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00171f0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00171f5:	75 0e                	jne    c0017205 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171f7:	84 c0                	test   al,al
c00171f9:	75 0a                	jne    c0017205 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171fb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00171fe:	83 e8 18             	sub    eax,0x18
c0017201:	a8 f7                	test   al,0xf7
c0017203:	74 0a                	je     c001720f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	68 26 b9 02 c0       	push   0xc002b926
c001720d:	eb 7f                	jmp    c001728e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001720f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017217:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001721f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017223:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001722b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001722f:	75 0c                	jne    c001723d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017231:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017236:	c1 e0 18             	shl    eax,0x18
c0017239:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001723d:	45                   	inc    ebp
c001723e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017243:	c1 e1 10             	shl    ecx,0x10
c0017246:	89 c8                	mov    eax,ecx
c0017248:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001724d:	c1 e1 08             	shl    ecx,0x8
c0017250:	09 c1                	or     ecx,eax
c0017252:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017256:	09 c1                	or     ecx,eax
c0017258:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001725c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017260:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017264:	c1 f8 03             	sar    eax,0x3
c0017267:	01 c2                	add    edx,eax
c0017269:	89 e8                	mov    eax,ebp
c001726b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001726f:	39 c6                	cmp    esi,eax
c0017271:	7f b0                	jg     c0017223 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017273:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017277:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001727b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001727e:	7e 22                	jle    c00172a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017280:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017284:	eb 99                	jmp    c001721f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017286:	50                   	push   eax
c0017287:	50                   	push   eax
c0017288:	51                   	push   ecx
c0017289:	68 34 b9 02 c0       	push   0xc002b934
c001728e:	e8 e9 b5 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0017293:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017296:	e8 90 85 ff ff       	call   c000f82b <free>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	31 ff                	xor    edi,edi
c00172a0:	eb 0f                	jmp    c00172b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00172a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172a6:	89 30                	mov    DWORD PTR [eax],esi
c00172a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172ac:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00172af:	89 30                	mov    DWORD PTR [eax],esi
c00172b1:	83 c4 1c             	add    esp,0x1c
c00172b4:	89 f8                	mov    eax,edi
c00172b6:	5b                   	pop    ebx
c00172b7:	5e                   	pop    esi
c00172b8:	5f                   	pop    edi
c00172b9:	5d                   	pop    ebp
c00172ba:	c3                   	ret    
c00172bb:	90                   	nop

c00172bc <Video::putTGA(int, int, unsigned char*, int)>:
c00172bc:	55                   	push   ebp
c00172bd:	57                   	push   edi
c00172be:	56                   	push   esi
c00172bf:	53                   	push   ebx
c00172c0:	83 ec 28             	sub    esp,0x28
c00172c3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172cb:	50                   	push   eax
c00172cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172d0:	50                   	push   eax
c00172d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172d9:	56                   	push   esi
c00172da:	e8 75 fe ff ff       	call   c0017154 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00172df:	83 c4 20             	add    esp,0x20
c00172e2:	85 c0                	test   eax,eax
c00172e4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172e8:	74 35                	je     c001731f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172ea:	89 c7                	mov    edi,eax
c00172ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172f0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00172f4:	39 d8                	cmp    eax,ebx
c00172f6:	7e 27                	jle    c001731f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172f8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017300:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017304:	39 e8                	cmp    eax,ebp
c0017306:	7e 14                	jle    c001731c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017308:	8b 06                	mov    eax,DWORD PTR [esi]
c001730a:	83 c7 04             	add    edi,0x4
c001730d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017310:	53                   	push   ebx
c0017311:	55                   	push   ebp
c0017312:	45                   	inc    ebp
c0017313:	56                   	push   esi
c0017314:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017317:	83 c4 10             	add    esp,0x10
c001731a:	eb e0                	jmp    c00172fc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001731c:	43                   	inc    ebx
c001731d:	eb cd                	jmp    c00172ec <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001731f:	83 c4 1c             	add    esp,0x1c
c0017322:	5b                   	pop    ebx
c0017323:	5e                   	pop    esi
c0017324:	5f                   	pop    edi
c0017325:	5d                   	pop    ebp
c0017326:	c3                   	ret    
c0017327:	90                   	nop

c0017328 <ACPI::close(int, int, void*)>:
c0017328:	83 ec 1c             	sub    esp,0x1c
c001732b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017333:	74 0a                	je     c001733f <ACPI::close(int, int, void*)+0x17>
c0017335:	b8 00 00 00 00       	mov    eax,0x0
c001733a:	e9 8a 00 00 00       	jmp    c00173c9 <ACPI::close(int, int, void*)+0xa1>
c001733f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017344:	75 27                	jne    c001736d <ACPI::close(int, int, void*)+0x45>
c0017346:	a1 48 eb 02 c0       	mov    eax,ds:0xc002eb48
c001734b:	85 c0                	test   eax,eax
c001734d:	74 07                	je     c0017356 <ACPI::close(int, int, void*)+0x2e>
c001734f:	a1 48 eb 02 c0       	mov    eax,ds:0xc002eb48
c0017354:	ff d0                	call   eax
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	68 90 b9 02 c0       	push   0xc002b990
c001735e:	e8 c2 2e 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001736b:	eb 5c                	jmp    c00173c9 <ACPI::close(int, int, void*)+0xa1>
c001736d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017372:	75 50                	jne    c00173c4 <ACPI::close(int, int, void*)+0x9c>
c0017374:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c0017379:	85 c0                	test   eax,eax
c001737b:	74 07                	je     c0017384 <ACPI::close(int, int, void*)+0x5c>
c001737d:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c0017382:	ff d0                	call   eax
c0017384:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017389:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001738e:	83 e0 02             	and    eax,0x2
c0017391:	74 1c                	je     c00173af <ACPI::close(int, int, void*)+0x87>
c0017393:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001739a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001739e:	89 c2                	mov    edx,eax
c00173a0:	ec                   	in     al,dx
c00173a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173a5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173ad:	eb da                	jmp    c0017389 <ACPI::close(int, int, void*)+0x61>
c00173af:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173b6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173bb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173c3:	ee                   	out    dx,al
c00173c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173c9:	83 c4 1c             	add    esp,0x1c
c00173cc:	c3                   	ret    

c00173cd <findRSDP()>:
c00173cd:	83 ec 1c             	sub    esp,0x1c
c00173d0:	83 ec 0c             	sub    esp,0xc
c00173d3:	68 6b ba 02 c0       	push   0xc002ba6b
c00173d8:	e8 98 84 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00173e5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173eb:	83 e0 04             	and    eax,0x4
c00173ee:	84 c0                	test   al,al
c00173f0:	75 0a                	jne    c00173fc <findRSDP()+0x2f>
c00173f2:	b8 00 00 00 00       	mov    eax,0x0
c00173f7:	e9 9a 00 00 00       	jmp    c0017496 <findRSDP()+0xc9>
c00173fc:	a1 14 e5 02 c0       	mov    eax,ds:0xc002e514
c0017401:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017406:	7f 1b                	jg     c0017423 <findRSDP()+0x56>
c0017408:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001740d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017413:	83 e2 fb             	and    edx,0xfffffffb
c0017416:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001741c:	b8 00 00 00 00       	mov    eax,0x0
c0017421:	eb 73                	jmp    c0017496 <findRSDP()+0xc9>
c0017423:	83 ec 0c             	sub    esp,0xc
c0017426:	68 7b ba 02 c0       	push   0xc002ba7b
c001742b:	e8 45 84 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017430:	83 c4 10             	add    esp,0x10
c0017433:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001743b:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017443:	77 3c                	ja     c0017481 <findRSDP()+0xb4>
c0017445:	83 ec 04             	sub    esp,0x4
c0017448:	6a 08                	push   0x8
c001744a:	68 94 ba 02 c0       	push   0xc002ba94
c001744f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017453:	e8 f4 91 fe ff       	call   c000064c <memcmp>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	85 c0                	test   eax,eax
c001745d:	0f 94 c0             	sete   al
c0017460:	84 c0                	test   al,al
c0017462:	74 16                	je     c001747a <findRSDP()+0xad>
c0017464:	83 ec 0c             	sub    esp,0xc
c0017467:	68 9d ba 02 c0       	push   0xc002ba9d
c001746c:	e8 04 84 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017471:	83 c4 10             	add    esp,0x10
c0017474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017478:	eb 1c                	jmp    c0017496 <findRSDP()+0xc9>
c001747a:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001747f:	eb ba                	jmp    c001743b <findRSDP()+0x6e>
c0017481:	83 ec 0c             	sub    esp,0xc
c0017484:	68 ab ba 02 c0       	push   0xc002baab
c0017489:	e8 e7 83 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	b8 00 00 00 00       	mov    eax,0x0
c0017496:	83 c4 1c             	add    esp,0x1c
c0017499:	c3                   	ret    

c001749a <loadACPITables(unsigned char*)>:
c001749a:	57                   	push   edi
c001749b:	56                   	push   esi
c001749c:	53                   	push   ebx
c001749d:	83 ec 60             	sub    esp,0x60
c00174a0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00174a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174ab:	83 e0 04             	and    eax,0x4
c00174ae:	84 c0                	test   al,al
c00174b0:	0f 84 33 02 00 00    	je     c00176e9 <loadACPITables(unsigned char*)+0x24f>
c00174b6:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c00174bb:	84 c0                	test   al,al
c00174bd:	74 75                	je     c0017534 <loadACPITables(unsigned char*)+0x9a>
c00174bf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174c3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174ce:	83 e8 24             	sub    eax,0x24
c00174d1:	c1 e8 03             	shr    eax,0x3
c00174d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174d8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00174e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174e4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00174e8:	0f 8d b2 00 00 00    	jge    c00175a0 <loadACPITables(unsigned char*)+0x106>
c00174ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174f2:	83 c0 24             	add    eax,0x24
c00174f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00174f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017501:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017505:	c1 e0 03             	shl    eax,0x3
c0017508:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001750c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017510:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017513:	8b 00                	mov    eax,DWORD PTR [eax]
c0017515:	89 c1                	mov    ecx,eax
c0017517:	a1 4c eb 02 c0       	mov    eax,ds:0xc002eb4c
c001751c:	8d 50 01             	lea    edx,[eax+0x1]
c001751f:	89 15 4c eb 02 c0    	mov    DWORD PTR ds:0xc002eb4c,edx
c0017525:	89 ca                	mov    edx,ecx
c0017527:	89 14 c5 64 eb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd149c],edx
c001752e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017532:	eb ac                	jmp    c00174e0 <loadACPITables(unsigned char*)+0x46>
c0017534:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017538:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001753c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017543:	83 e8 24             	sub    eax,0x24
c0017546:	c1 e8 02             	shr    eax,0x2
c0017549:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001754d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017555:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017559:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001755d:	7d 41                	jge    c00175a0 <loadACPITables(unsigned char*)+0x106>
c001755f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017563:	83 c0 24             	add    eax,0x24
c0017566:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001756a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001756e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017572:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017576:	c1 e0 02             	shl    eax,0x2
c0017579:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001757d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017581:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017583:	a1 4c eb 02 c0       	mov    eax,ds:0xc002eb4c
c0017588:	8d 50 01             	lea    edx,[eax+0x1]
c001758b:	89 15 4c eb 02 c0    	mov    DWORD PTR ds:0xc002eb4c,edx
c0017591:	89 ca                	mov    edx,ecx
c0017593:	89 14 c5 64 eb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd149c],edx
c001759a:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001759e:	eb b5                	jmp    c0017555 <loadACPITables(unsigned char*)+0xbb>
c00175a0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175a8:	a1 4c eb 02 c0       	mov    eax,ds:0xc002eb4c
c00175ad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175b1:	0f 8d 33 01 00 00    	jge    c00176ea <loadACPITables(unsigned char*)+0x250>
c00175b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175bb:	8b 04 c5 64 eb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd149c]
c00175c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d2:	25 ff 0f 00 00       	and    eax,0xfff
c00175d7:	89 c6                	mov    esi,eax
c00175d9:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	6a 01                	push   0x1
c00175e4:	e8 b8 9e ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175f6:	83 ec 0c             	sub    esp,0xc
c00175f9:	6a 01                	push   0x1
c00175fb:	6a 01                	push   0x1
c00175fd:	50                   	push   eax
c00175fe:	52                   	push   edx
c00175ff:	53                   	push   ebx
c0017600:	e8 39 a8 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017605:	83 c4 20             	add    esp,0x20
c0017608:	09 f0                	or     eax,esi
c001760a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001760e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017612:	c1 e0 03             	shl    eax,0x3
c0017615:	05 60 eb 02 c0       	add    eax,0xc002eb60
c001761a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001761e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017626:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001762e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017632:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001763a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001763e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017642:	89 c6                	mov    esi,eax
c0017644:	89 d7                	mov    edi,edx
c0017646:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017648:	89 c8                	mov    eax,ecx
c001764a:	89 fa                	mov    edx,edi
c001764c:	89 f3                	mov    ebx,esi
c001764e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017652:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017656:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001765a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001765e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017669:	05 00 10 00 00       	add    eax,0x1000
c001766e:	c1 e8 0c             	shr    eax,0xc
c0017671:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017675:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017679:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001767d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017681:	25 ff 0f 00 00       	and    eax,0xfff
c0017686:	89 c6                	mov    esi,eax
c0017688:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c001768e:	83 ec 0c             	sub    esp,0xc
c0017691:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017695:	e8 07 9e ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176a1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176a7:	83 ec 0c             	sub    esp,0xc
c00176aa:	6a 01                	push   0x1
c00176ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176b0:	50                   	push   eax
c00176b1:	52                   	push   edx
c00176b2:	53                   	push   ebx
c00176b3:	e8 86 a7 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176b8:	83 c4 20             	add    esp,0x20
c00176bb:	09 f0                	or     eax,esi
c00176bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c5:	83 ec 0c             	sub    esp,0xc
c00176c8:	50                   	push   eax
c00176c9:	e8 03 a1 ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176d9:	89 14 c5 64 eb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd149c],edx
c00176e0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00176e4:	e9 bf fe ff ff       	jmp    c00175a8 <loadACPITables(unsigned char*)+0x10e>
c00176e9:	90                   	nop
c00176ea:	83 c4 60             	add    esp,0x60
c00176ed:	5b                   	pop    ebx
c00176ee:	5e                   	pop    esi
c00176ef:	5f                   	pop    edi
c00176f0:	c3                   	ret    

c00176f1 <findRSDT(unsigned char*)>:
c00176f1:	57                   	push   edi
c00176f2:	56                   	push   esi
c00176f3:	53                   	push   ebx
c00176f4:	83 ec 50             	sub    esp,0x50
c00176f7:	83 ec 0c             	sub    esp,0xc
c00176fa:	68 bf ba 02 c0       	push   0xc002babf
c00176ff:	e8 71 81 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001770c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017712:	83 e0 04             	and    eax,0x4
c0017715:	84 c0                	test   al,al
c0017717:	75 0a                	jne    c0017723 <findRSDT(unsigned char*)+0x32>
c0017719:	b8 00 00 00 00       	mov    eax,0x0
c001771e:	e9 81 01 00 00       	jmp    c00178a4 <findRSDT(unsigned char*)+0x1b3>
c0017723:	83 ec 0c             	sub    esp,0xc
c0017726:	68 d1 ba 02 c0       	push   0xc002bad1
c001772b:	e8 45 81 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017730:	83 c4 10             	add    esp,0x10
c0017733:	89 e0                	mov    eax,esp
c0017735:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017739:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001773d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017741:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017749:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001774d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017751:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017755:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017759:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001775d:	89 c6                	mov    esi,eax
c001775f:	89 d7                	mov    edi,edx
c0017761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017763:	89 c8                	mov    eax,ecx
c0017765:	89 fa                	mov    edx,edi
c0017767:	89 f3                	mov    ebx,esi
c0017769:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001776d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017771:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017775:	83 ec 0c             	sub    esp,0xc
c0017778:	68 e3 ba 02 c0       	push   0xc002bae3
c001777d:	e8 f3 80 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017789:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001778d:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 f5 ba 02 c0       	push   0xc002baf5
c001779d:	e8 d3 80 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177b9:	83 ec 04             	sub    esp,0x4
c00177bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177c4:	68 b4 b9 02 c0       	push   0xc002b9b4
c00177c9:	e8 ae b0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00177ce:	83 c4 10             	add    esp,0x10
c00177d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177d5:	25 ff 0f 00 00       	and    eax,0xfff
c00177da:	89 c6                	mov    esi,eax
c00177dc:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c00177e2:	83 ec 0c             	sub    esp,0xc
c00177e5:	6a 02                	push   0x2
c00177e7:	e8 b5 9c ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177f3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	6a 01                	push   0x1
c00177fe:	6a 02                	push   0x2
c0017800:	50                   	push   eax
c0017801:	52                   	push   edx
c0017802:	53                   	push   ebx
c0017803:	e8 36 a6 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017808:	83 c4 20             	add    esp,0x20
c001780b:	09 f0                	or     eax,esi
c001780d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017811:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017815:	25 ff 0f 00 00       	and    eax,0xfff
c001781a:	89 c6                	mov    esi,eax
c001781c:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c0017822:	83 ec 0c             	sub    esp,0xc
c0017825:	6a 02                	push   0x2
c0017827:	e8 75 9c ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017833:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017839:	83 ec 0c             	sub    esp,0xc
c001783c:	6a 01                	push   0x1
c001783e:	6a 02                	push   0x2
c0017840:	50                   	push   eax
c0017841:	52                   	push   edx
c0017842:	53                   	push   ebx
c0017843:	e8 f6 a5 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017848:	83 c4 20             	add    esp,0x20
c001784b:	09 f0                	or     eax,esi
c001784d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017851:	83 ec 04             	sub    esp,0x4
c0017854:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001785c:	68 d4 b9 02 c0       	push   0xc002b9d4
c0017861:	e8 16 b0 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001786e:	75 11                	jne    c0017881 <findRSDT(unsigned char*)+0x190>
c0017870:	c6 05 60 ed 02 c0 00 	mov    BYTE PTR ds:0xc002ed60,0x0
c0017877:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001787b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001787f:	eb 1f                	jmp    c00178a0 <findRSDT(unsigned char*)+0x1af>
c0017881:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017886:	75 11                	jne    c0017899 <findRSDT(unsigned char*)+0x1a8>
c0017888:	c6 05 60 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed60,0x1
c001788f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017893:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017897:	eb 07                	jmp    c00178a0 <findRSDT(unsigned char*)+0x1af>
c0017899:	b8 00 00 00 00       	mov    eax,0x0
c001789e:	eb 04                	jmp    c00178a4 <findRSDT(unsigned char*)+0x1b3>
c00178a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00178a4:	83 c4 50             	add    esp,0x50
c00178a7:	5b                   	pop    ebx
c00178a8:	5e                   	pop    esi
c00178a9:	5f                   	pop    edi
c00178aa:	c3                   	ret    

c00178ab <findDataTable(unsigned char*, char*)>:
c00178ab:	83 ec 1c             	sub    esp,0x1c
c00178ae:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00178b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178b9:	83 e0 04             	and    eax,0x4
c00178bc:	84 c0                	test   al,al
c00178be:	75 07                	jne    c00178c7 <findDataTable(unsigned char*, char*)+0x1c>
c00178c0:	b8 00 00 00 00       	mov    eax,0x0
c00178c5:	eb 52                	jmp    c0017919 <findDataTable(unsigned char*, char*)+0x6e>
c00178c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178cf:	a1 4c eb 02 c0       	mov    eax,ds:0xc002eb4c
c00178d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00178d8:	7d 3a                	jge    c0017914 <findDataTable(unsigned char*, char*)+0x69>
c00178da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178de:	c1 e0 03             	shl    eax,0x3
c00178e1:	05 60 eb 02 c0       	add    eax,0xc002eb60
c00178e6:	83 ec 04             	sub    esp,0x4
c00178e9:	6a 04                	push   0x4
c00178eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178ef:	50                   	push   eax
c00178f0:	e8 57 8d fe ff       	call   c000064c <memcmp>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	85 c0                	test   eax,eax
c00178fa:	0f 94 c0             	sete   al
c00178fd:	84 c0                	test   al,al
c00178ff:	74 0d                	je     c001790e <findDataTable(unsigned char*, char*)+0x63>
c0017901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017905:	8b 04 c5 64 eb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd149c]
c001790c:	eb 0b                	jmp    c0017919 <findDataTable(unsigned char*, char*)+0x6e>
c001790e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017912:	eb bb                	jmp    c00178cf <findDataTable(unsigned char*, char*)+0x24>
c0017914:	b8 00 00 00 00       	mov    eax,0x0
c0017919:	83 c4 1c             	add    esp,0x1c
c001791c:	c3                   	ret    

c001791d <scanMADT()>:
c001791d:	53                   	push   ebx
c001791e:	83 ec 38             	sub    esp,0x38
c0017921:	83 ec 0c             	sub    esp,0xc
c0017924:	68 07 bb 02 c0       	push   0xc002bb07
c0017929:	e8 47 7f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c0017936:	25 00 04 00 00       	and    eax,0x400
c001793b:	74 14                	je     c0017951 <scanMADT()+0x34>
c001793d:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017942:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017948:	83 e2 fb             	and    edx,0xfffffffb
c001794b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017951:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017956:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001795c:	83 e0 04             	and    eax,0x4
c001795f:	84 c0                	test   al,al
c0017961:	0f 84 7a 04 00 00    	je     c0017de1 <scanMADT()+0x4c4>
c0017967:	83 ec 0c             	sub    esp,0xc
c001796a:	68 14 bb 02 c0       	push   0xc002bb14
c001796f:	e8 01 7f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017974:	83 c4 10             	add    esp,0x10
c0017977:	e8 51 fa ff ff       	call   c00173cd <findRSDP()>
c001797c:	a3 6c ed 02 c0       	mov    ds:0xc002ed6c,eax
c0017981:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c0017986:	85 c0                	test   eax,eax
c0017988:	75 19                	jne    c00179a3 <scanMADT()+0x86>
c001798a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001798f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017995:	83 e2 fb             	and    edx,0xfffffffb
c0017998:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001799e:	e9 42 04 00 00       	jmp    c0017de5 <scanMADT()+0x4c8>
c00179a3:	83 ec 0c             	sub    esp,0xc
c00179a6:	68 26 bb 02 c0       	push   0xc002bb26
c00179ab:	e8 c5 7e ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c00179b8:	83 ec 0c             	sub    esp,0xc
c00179bb:	50                   	push   eax
c00179bc:	e8 30 fd ff ff       	call   c00176f1 <findRSDT(unsigned char*)>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	a3 68 ed 02 c0       	mov    ds:0xc002ed68,eax
c00179c9:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c00179ce:	85 c0                	test   eax,eax
c00179d0:	75 19                	jne    c00179eb <scanMADT()+0xce>
c00179d2:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00179d7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179dd:	83 e2 fb             	and    edx,0xfffffffb
c00179e0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179e6:	e9 fa 03 00 00       	jmp    c0017de5 <scanMADT()+0x4c8>
c00179eb:	83 ec 0c             	sub    esp,0xc
c00179ee:	68 36 bb 02 c0       	push   0xc002bb36
c00179f3:	e8 7d 7e ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	50                   	push   eax
c0017a04:	e8 91 fa ff ff       	call   c001749a <loadACPITables(unsigned char*)>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c0017a11:	83 ec 08             	sub    esp,0x8
c0017a14:	68 4e bb 02 c0       	push   0xc002bb4e
c0017a19:	50                   	push   eax
c0017a1a:	e8 8c fe ff ff       	call   c00178ab <findDataTable(unsigned char*, char*)>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a26:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a2b:	75 19                	jne    c0017a46 <scanMADT()+0x129>
c0017a2d:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0017a32:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a38:	83 e2 fe             	and    edx,0xfffffffe
c0017a3b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a41:	e9 9f 03 00 00       	jmp    c0017de5 <scanMADT()+0x4c8>
c0017a46:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a55:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a59:	0f 87 86 03 00 00    	ja     c0017de5 <scanMADT()+0x4c8>
c0017a5f:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a67:	0f 87 78 03 00 00    	ja     c0017de5 <scanMADT()+0x4c8>
c0017a6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a79:	8d 50 01             	lea    edx,[eax+0x1]
c0017a7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a84:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a88:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a90:	8d 50 01             	lea    edx,[eax+0x1]
c0017a93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a9b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a9f:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017aa3:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017aa8:	0f 86 36 03 00 00    	jbe    c0017de4 <scanMADT()+0x4c7>
c0017aae:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ab3:	75 57                	jne    c0017b0c <scanMADT()+0x1ef>
c0017ab5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab9:	8d 50 01             	lea    edx,[eax+0x1]
c0017abc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ac0:	8a 15 60 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002ef60
c0017ac6:	0f b6 d2             	movzx  edx,dl
c0017ac9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017acd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ad1:	88 82 a0 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd1060],al
c0017ad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017adb:	8d 50 01             	lea    edx,[eax+0x1]
c0017ade:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ae2:	8a 15 60 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002ef60
c0017ae8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017aeb:	88 0d 60 ef 02 c0    	mov    BYTE PTR ds:0xc002ef60,cl
c0017af1:	0f b6 d2             	movzx  edx,dl
c0017af4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017af8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017afc:	88 82 80 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd1080],al
c0017b02:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b07:	e9 c1 02 00 00       	jmp    c0017dcd <scanMADT()+0x4b0>
c0017b0c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b11:	0f 85 14 01 00 00    	jne    c0017c2b <scanMADT()+0x30e>
c0017b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1b:	8d 50 01             	lea    edx,[eax+0x1]
c0017b1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b22:	8a 15 20 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002ee20
c0017b28:	0f b6 d2             	movzx  edx,dl
c0017b2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b2f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b33:	88 82 40 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd11c0],al
c0017b39:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b45:	01 d0                	add    eax,edx
c0017b47:	83 c0 2c             	add    eax,0x2c
c0017b4a:	8a 00                	mov    al,BYTE PTR [eax]
c0017b4c:	0f b6 d0             	movzx  edx,al
c0017b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b53:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b5a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b5e:	0f b6 c0             	movzx  eax,al
c0017b61:	c1 e0 08             	shl    eax,0x8
c0017b64:	89 d1                	mov    ecx,edx
c0017b66:	09 c1                	or     ecx,eax
c0017b68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b6c:	8d 50 02             	lea    edx,[eax+0x2]
c0017b6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b73:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b77:	0f b6 c0             	movzx  eax,al
c0017b7a:	c1 e0 10             	shl    eax,0x10
c0017b7d:	09 c1                	or     ecx,eax
c0017b7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b83:	8d 50 03             	lea    edx,[eax+0x3]
c0017b86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b8a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b8e:	0f b6 c0             	movzx  eax,al
c0017b91:	c1 e0 18             	shl    eax,0x18
c0017b94:	09 c1                	or     ecx,eax
c0017b96:	89 ca                	mov    edx,ecx
c0017b98:	a0 20 ee 02 c0       	mov    al,ds:0xc002ee20
c0017b9d:	0f b6 c0             	movzx  eax,al
c0017ba0:	89 14 85 60 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11a0],edx
c0017ba7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb4:	01 d0                	add    eax,edx
c0017bb6:	83 c0 2c             	add    eax,0x2c
c0017bb9:	8a 00                	mov    al,BYTE PTR [eax]
c0017bbb:	0f b6 d0             	movzx  edx,al
c0017bbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bcd:	0f b6 c0             	movzx  eax,al
c0017bd0:	c1 e0 08             	shl    eax,0x8
c0017bd3:	89 d1                	mov    ecx,edx
c0017bd5:	09 c1                	or     ecx,eax
c0017bd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bdb:	8d 50 02             	lea    edx,[eax+0x2]
c0017bde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017be6:	0f b6 c0             	movzx  eax,al
c0017be9:	c1 e0 10             	shl    eax,0x10
c0017bec:	09 c1                	or     ecx,eax
c0017bee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf2:	8d 50 03             	lea    edx,[eax+0x3]
c0017bf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bfd:	0f b6 c0             	movzx  eax,al
c0017c00:	c1 e0 18             	shl    eax,0x18
c0017c03:	09 c1                	or     ecx,eax
c0017c05:	89 ca                	mov    edx,ecx
c0017c07:	a0 20 ee 02 c0       	mov    al,ds:0xc002ee20
c0017c0c:	0f b6 c0             	movzx  eax,al
c0017c0f:	89 14 85 e0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1120],edx
c0017c16:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c1b:	a0 20 ee 02 c0       	mov    al,ds:0xc002ee20
c0017c20:	40                   	inc    eax
c0017c21:	a2 20 ee 02 c0       	mov    ds:0xc002ee20,al
c0017c26:	e9 a2 01 00 00       	jmp    c0017dcd <scanMADT()+0x4b0>
c0017c2b:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c30:	0f 85 e9 00 00 00    	jne    c0017d1f <scanMADT()+0x402>
c0017c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c49:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c51:	8d 50 01             	lea    edx,[eax+0x1]
c0017c54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c60:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c6c:	01 d0                	add    eax,edx
c0017c6e:	83 c0 2c             	add    eax,0x2c
c0017c71:	8a 00                	mov    al,BYTE PTR [eax]
c0017c73:	0f b6 d0             	movzx  edx,al
c0017c76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c85:	0f b6 c0             	movzx  eax,al
c0017c88:	c1 e0 08             	shl    eax,0x8
c0017c8b:	89 d1                	mov    ecx,edx
c0017c8d:	09 c1                	or     ecx,eax
c0017c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c93:	8d 50 02             	lea    edx,[eax+0x2]
c0017c96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c9e:	0f b6 c0             	movzx  eax,al
c0017ca1:	c1 e0 10             	shl    eax,0x10
c0017ca4:	09 c1                	or     ecx,eax
c0017ca6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017caa:	8d 50 03             	lea    edx,[eax+0x3]
c0017cad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cb5:	0f b6 c0             	movzx  eax,al
c0017cb8:	c1 e0 18             	shl    eax,0x18
c0017cbb:	09 c8                	or     eax,ecx
c0017cbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cce:	01 d0                	add    eax,edx
c0017cd0:	83 c0 2c             	add    eax,0x2c
c0017cd3:	8a 00                	mov    al,BYTE PTR [eax]
c0017cd5:	0f b6 c0             	movzx  eax,al
c0017cd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cdc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017cdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ce7:	0f b6 d2             	movzx  edx,dl
c0017cea:	c1 e2 08             	shl    edx,0x8
c0017ced:	09 d0                	or     eax,edx
c0017cef:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017cf4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cf9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017cfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d02:	88 90 20 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28e0],dl
c0017d08:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d0d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d12:	66 89 84 12 00 ee 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1200],ax
c0017d1a:	e9 ae 00 00 00       	jmp    c0017dcd <scanMADT()+0x4b0>
c0017d1f:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d24:	0f 85 97 00 00 00    	jne    c0017dc1 <scanMADT()+0x4a4>
c0017d2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017d31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d39:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d3d:	0f b6 c0             	movzx  eax,al
c0017d40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d4c:	01 d0                	add    eax,edx
c0017d4e:	83 c0 2c             	add    eax,0x2c
c0017d51:	8a 00                	mov    al,BYTE PTR [eax]
c0017d53:	0f b6 d0             	movzx  edx,al
c0017d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d61:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d65:	0f b6 c0             	movzx  eax,al
c0017d68:	c1 e0 08             	shl    eax,0x8
c0017d6b:	09 d0                	or     eax,edx
c0017d6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d71:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d89:	0f b6 c0             	movzx  eax,al
c0017d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d94:	c1 e0 08             	shl    eax,0x8
c0017d97:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d9b:	89 c1                	mov    ecx,eax
c0017d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017da1:	c1 e0 18             	shl    eax,0x18
c0017da4:	89 c3                	mov    ebx,eax
c0017da6:	a1 70 ed 02 c0       	mov    eax,ds:0xc002ed70
c0017dab:	8d 50 01             	lea    edx,[eax+0x1]
c0017dae:	89 15 70 ed 02 c0    	mov    DWORD PTR ds:0xc002ed70,edx
c0017db4:	09 d9                	or     ecx,ebx
c0017db6:	89 ca                	mov    edx,ecx
c0017db8:	89 14 85 80 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1280],edx
c0017dbf:	eb 0c                	jmp    c0017dcd <scanMADT()+0x4b0>
c0017dc1:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017dc6:	75 05                	jne    c0017dcd <scanMADT()+0x4b0>
c0017dc8:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017dcd:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017dd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dd6:	01 d0                	add    eax,edx
c0017dd8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ddc:	e9 6d fc ff ff       	jmp    c0017a4e <scanMADT()+0x131>
c0017de1:	90                   	nop
c0017de2:	eb 01                	jmp    c0017de5 <scanMADT()+0x4c8>
c0017de4:	90                   	nop
c0017de5:	83 c4 38             	add    esp,0x38
c0017de8:	5b                   	pop    ebx
c0017de9:	c3                   	ret    

c0017dea <ACPI::ACPI()>:
c0017dea:	83 ec 0c             	sub    esp,0xc
c0017ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017df1:	83 ec 08             	sub    esp,0x8
c0017df4:	68 53 bb 02 c0       	push   0xc002bb53
c0017df9:	50                   	push   eax
c0017dfa:	e8 c5 c0 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0017dff:	83 c4 10             	add    esp,0x10
c0017e02:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0017e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0b:	89 10                	mov    DWORD PTR [eax],edx
c0017e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e11:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e2a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	68 58 bb 02 c0       	push   0xc002bb58
c0017e3c:	e8 34 7a ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	e8 d4 fa ff ff       	call   c001791d <scanMADT()>
c0017e49:	90                   	nop
c0017e4a:	83 c4 0c             	add    esp,0xc
c0017e4d:	c3                   	ret    

c0017e4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e4e:	83 ec 2c             	sub    esp,0x2c
c0017e51:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e5d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e61:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e66:	88 d0                	mov    al,dl
c0017e68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e6c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e71:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e7d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e83:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e87:	0f 8d 97 00 00 00    	jge    c0017f24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e95:	83 c2 2a             	add    edx,0x2a
c0017e98:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e9c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017ea1:	75 78                	jne    c0017f1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ea7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017eab:	83 c2 2a             	add    edx,0x2a
c0017eae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017eb2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017eb6:	75 63                	jne    c0017f1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017eb8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ebd:	74 3a                	je     c0017ef9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ec3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ec7:	83 c2 2a             	add    edx,0x2a
c0017eca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ed5:	39 c2                	cmp    edx,eax
c0017ed7:	74 10                	je     c0017ee9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ed9:	83 ec 0c             	sub    esp,0xc
c0017edc:	68 f4 b9 02 c0       	push   0xc002b9f4
c0017ee1:	e8 3f 23 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	68 66 bb 02 c0       	push   0xc002bb66
c0017ef1:	e8 2f 23 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017efd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f05:	83 c2 2a             	add    edx,0x2a
c0017f08:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f0e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f11:	89 01                	mov    DWORD PTR [ecx],eax
c0017f13:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f1b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f1f:	e9 55 ff ff ff       	jmp    c0017e79 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f24:	90                   	nop
c0017f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f29:	83 c4 2c             	add    esp,0x2c
c0017f2c:	c2 04 00             	ret    0x4
c0017f2f:	90                   	nop

c0017f30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f30:	83 ec 1c             	sub    esp,0x1c
c0017f33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f3f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f44:	88 c8                	mov    al,cl
c0017f46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f4a:	88 d0                	mov    al,dl
c0017f4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f54:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f61:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f65:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f77:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f7e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f8d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f91:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f98:	83 c2 2a             	add    edx,0x2a
c0017f9b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fad:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fb0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fb4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fc2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fd9:	3d 00 02 00 00       	cmp    eax,0x200
c0017fde:	75 10                	jne    c0017ff0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017fe0:	83 ec 0c             	sub    esp,0xc
c0017fe3:	68 75 bb 02 c0       	push   0xc002bb75
c0017fe8:	e8 38 22 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	90                   	nop
c0017ff1:	83 c4 1c             	add    esp,0x1c
c0017ff4:	c3                   	ret    
c0017ff5:	90                   	nop

c0017ff6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017ff6:	b8 00 00 00 00       	mov    eax,0x0
c0017ffb:	c3                   	ret    

c0017ffc <ACPI::detectPCI()>:
c0017ffc:	53                   	push   ebx
c0017ffd:	83 ec 28             	sub    esp,0x28
c0018000:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018005:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001800a:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001800f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018015:	83 e0 04             	and    eax,0x4
c0018018:	84 c0                	test   al,al
c001801a:	74 2b                	je     c0018047 <ACPI::detectPCI()+0x4b>
c001801c:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c0018021:	83 ec 08             	sub    esp,0x8
c0018024:	68 92 bb 02 c0       	push   0xc002bb92
c0018029:	50                   	push   eax
c001802a:	e8 7c f8 ff ff       	call   c00178ab <findDataTable(unsigned char*, char*)>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018036:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001803b:	74 0a                	je     c0018047 <ACPI::detectPCI()+0x4b>
c001803d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018042:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018047:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001804f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018053:	8a 00                	mov    al,BYTE PTR [eax]
c0018055:	3c 01                	cmp    al,0x1
c0018057:	75 0c                	jne    c0018065 <ACPI::detectPCI()+0x69>
c0018059:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001805e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018063:	eb 26                	jmp    c001808b <ACPI::detectPCI()+0x8f>
c0018065:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018069:	8a 00                	mov    al,BYTE PTR [eax]
c001806b:	3c 02                	cmp    al,0x2
c001806d:	75 1c                	jne    c001808b <ACPI::detectPCI()+0x8f>
c001806f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018074:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018079:	74 10                	je     c001808b <ACPI::detectPCI()+0x8f>
c001807b:	83 ec 0c             	sub    esp,0xc
c001807e:	68 24 ba 02 c0       	push   0xc002ba24
c0018083:	e8 9d 21 00 00       	call   c001a225 <Krnl::panic(char const*)>
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001808f:	83 f0 01             	xor    eax,0x1
c0018092:	84 c0                	test   al,al
c0018094:	74 3f                	je     c00180d5 <ACPI::detectPCI()+0xd9>
c0018096:	e8 b5 80 fe ff       	call   c0000150 <manualPCIProbe>
c001809b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001809f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00180a4:	75 0c                	jne    c00180b2 <ACPI::detectPCI()+0xb6>
c00180a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180ab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00180b0:	eb 23                	jmp    c00180d5 <ACPI::detectPCI()+0xd9>
c00180b2:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00180b7:	75 1c                	jne    c00180d5 <ACPI::detectPCI()+0xd9>
c00180b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180be:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180c3:	74 10                	je     c00180d5 <ACPI::detectPCI()+0xd9>
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	68 24 ba 02 c0       	push   0xc002ba24
c00180cd:	e8 53 21 00 00       	call   c001a225 <Krnl::panic(char const*)>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180da:	74 7e                	je     c001815a <ACPI::detectPCI()+0x15e>
c00180dc:	83 ec 0c             	sub    esp,0xc
c00180df:	68 97 bb 02 c0       	push   0xc002bb97
c00180e4:	e8 8c 77 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180fb:	e8 1b 77 ff ff       	call   c000f81b <malloc>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	89 c3                	mov    ebx,eax
c0018105:	83 ec 0c             	sub    esp,0xc
c0018108:	53                   	push   ebx
c0018109:	e8 68 a7 00 00       	call   c0022876 <PCI::PCI()>
c001810e:	83 c4 10             	add    esp,0x10
c0018111:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018119:	83 ec 08             	sub    esp,0x8
c001811c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018120:	50                   	push   eax
c0018121:	e8 9a bb ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c0018126:	83 c4 10             	add    esp,0x10
c0018129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812d:	8b 00                	mov    eax,DWORD PTR [eax]
c001812f:	83 c0 08             	add    eax,0x8
c0018132:	8b 00                	mov    eax,DWORD PTR [eax]
c0018134:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018139:	74 07                	je     c0018142 <ACPI::detectPCI()+0x146>
c001813b:	ba 01 00 00 00       	mov    edx,0x1
c0018140:	eb 05                	jmp    c0018147 <ACPI::detectPCI()+0x14b>
c0018142:	ba 02 00 00 00       	mov    edx,0x2
c0018147:	6a 00                	push   0x0
c0018149:	6a 00                	push   0x0
c001814b:	52                   	push   edx
c001814c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018150:	ff d0                	call   eax
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	e9 9e 00 00 00       	jmp    c00181f8 <ACPI::detectPCI()+0x1fc>
c001815a:	83 ec 0c             	sub    esp,0xc
c001815d:	68 af bb 02 c0       	push   0xc002bbaf
c0018162:	e8 15 a7 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	83 ec 0c             	sub    esp,0xc
c001816d:	68 ba bb 02 c0       	push   0xc002bbba
c0018172:	e8 fe 76 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018188:	e8 8e 76 ff ff       	call   c000f81b <malloc>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	89 c3                	mov    ebx,eax
c0018192:	83 ec 0c             	sub    esp,0xc
c0018195:	53                   	push   ebx
c0018196:	e8 45 b2 00 00       	call   c00233e0 <IDE::IDE()>
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00181a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181a6:	83 ec 08             	sub    esp,0x8
c00181a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00181ad:	50                   	push   eax
c00181ae:	e8 0d bb ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181ba:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00181c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c8:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00181d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181d5:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00181de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00181e4:	83 c0 08             	add    eax,0x8
c00181e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00181e9:	6a 00                	push   0x0
c00181eb:	6a 00                	push   0x0
c00181ed:	6a 00                	push   0x0
c00181ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181f3:	ff d0                	call   eax
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	90                   	nop
c00181f9:	83 c4 28             	add    esp,0x28
c00181fc:	5b                   	pop    ebx
c00181fd:	c3                   	ret    

c00181fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181fe:	83 ec 1c             	sub    esp,0x1c
c0018201:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018205:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018208:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001820c:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0018211:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018216:	83 ec 08             	sub    esp,0x8
c0018219:	52                   	push   edx
c001821a:	50                   	push   eax
c001821b:	e8 d2 6b ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018227:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001822c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018231:	83 ec 04             	sub    esp,0x4
c0018234:	6a 01                	push   0x1
c0018236:	52                   	push   edx
c0018237:	50                   	push   eax
c0018238:	e8 91 6d ff ff       	call   c000efce <Computer::writeCMOS(unsigned char, unsigned char)>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	90                   	nop
c0018241:	83 c4 1c             	add    esp,0x1c
c0018244:	c3                   	ret    
c0018245:	90                   	nop

c0018246 <ACPI::sleep()>:
c0018246:	83 ec 0c             	sub    esp,0xc
c0018249:	a1 40 eb 02 c0       	mov    eax,ds:0xc002eb40
c001824e:	85 c0                	test   eax,eax
c0018250:	74 07                	je     c0018259 <ACPI::sleep()+0x13>
c0018252:	a1 40 eb 02 c0       	mov    eax,ds:0xc002eb40
c0018257:	ff d0                	call   eax
c0018259:	90                   	nop
c001825a:	83 c4 0c             	add    esp,0xc
c001825d:	c3                   	ret    

c001825e <ACPI::open(int, int, void*)>:
c001825e:	57                   	push   edi
c001825f:	56                   	push   esi
c0018260:	53                   	push   ebx
c0018261:	81 ec 60 01 00 00    	sub    esp,0x160
c0018267:	83 ec 0c             	sub    esp,0xc
c001826a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018271:	e8 86 fd ff ff       	call   c0017ffc <ACPI::detectPCI()>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	83 ec 0c             	sub    esp,0xc
c001827c:	68 4c ba 02 c0       	push   0xc002ba4c
c0018281:	e8 ef 75 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0018286:	83 c4 10             	add    esp,0x10
c0018289:	83 ec 0c             	sub    esp,0xc
c001828c:	68 cf bb 02 c0       	push   0xc002bbcf
c0018291:	e8 e5 46 00 00       	call   c001c97b <Thr::loadKernelSymbolTable(char const*)>
c0018296:	83 c4 10             	add    esp,0x10
c0018299:	83 ec 0c             	sub    esp,0xc
c001829c:	68 ed bb 02 c0       	push   0xc002bbed
c00182a1:	e8 cf 75 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00182a6:	83 c4 10             	add    esp,0x10
c00182a9:	83 ec 04             	sub    esp,0x4
c00182ac:	6a 0c                	push   0xc
c00182ae:	68 08 bc 02 c0       	push   0xc002bc08
c00182b3:	68 19 bc 02 c0       	push   0xc002bc19
c00182b8:	e8 24 2d 00 00       	call   c001afe1 <Reg::readIntWithDefault(char*, char*, int)>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00182c7:	83 ec 0c             	sub    esp,0xc
c00182ca:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00182d1:	e8 d5 93 ff ff       	call   c00116ab <Virt::setupPageSwapping(int)>
c00182d6:	83 c4 10             	add    esp,0x10
c00182d9:	83 ec 0c             	sub    esp,0xc
c00182dc:	68 ac a3 02 c0       	push   0xc002a3ac
c00182e1:	e8 8f 75 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00182e6:	83 c4 10             	add    esp,0x10
c00182e9:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c00182ef:	83 ec 08             	sub    esp,0x8
c00182f2:	6a 01                	push   0x1
c00182f4:	68 20 bc 02 c0       	push   0xc002bc20
c00182f9:	e8 f4 50 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c00182fe:	83 c4 10             	add    esp,0x10
c0018301:	83 ec 08             	sub    esp,0x8
c0018304:	53                   	push   ebx
c0018305:	50                   	push   eax
c0018306:	e8 18 53 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018315:	83 ec 08             	sub    esp,0x8
c0018318:	6a 12                	push   0x12
c001831a:	50                   	push   eax
c001831b:	e8 24 bd ff ff       	call   c0014044 <getDevicesOfType(DeviceType)>
c0018320:	83 c4 0c             	add    esp,0xc
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001832d:	50                   	push   eax
c001832e:	e8 c1 0b 01 00       	call   c0028ef4 <LinkedList<Device>::isEmpty()>
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	83 f0 01             	xor    eax,0x1
c0018339:	84 c0                	test   al,al
c001833b:	0f 84 43 01 00 00    	je     c0018484 <ACPI::open(int, int, void*)+0x226>
c0018341:	83 ec 0c             	sub    esp,0xc
c0018344:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001834b:	50                   	push   eax
c001834c:	e8 bf 0b 01 00       	call   c0028f10 <LinkedList<Device>::getFirstElement()>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001835b:	83 ec 0c             	sub    esp,0xc
c001835e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018365:	50                   	push   eax
c0018366:	e8 ad 0b 01 00       	call   c0028f18 <LinkedList<Device>::removeFirst()>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018375:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001837c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018383:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018387:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001838d:	ba 09 00 00 00       	mov    edx,0x9
c0018392:	fc                   	cld    
c0018393:	89 c7                	mov    edi,eax
c0018395:	89 de                	mov    esi,ebx
c0018397:	89 d1                	mov    ecx,edx
c0018399:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001839b:	83 ec 08             	sub    esp,0x8
c001839e:	8d 44 24 38          	lea    eax,[esp+0x38]
c00183a2:	50                   	push   eax
c00183a3:	83 ec 24             	sub    esp,0x24
c00183a6:	89 e0                	mov    eax,esp
c00183a8:	89 c3                	mov    ebx,eax
c00183aa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00183ae:	ba 09 00 00 00       	mov    edx,0x9
c00183b3:	89 df                	mov    edi,ebx
c00183b5:	89 c6                	mov    esi,eax
c00183b7:	89 d1                	mov    ecx,edx
c00183b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00183bb:	e8 94 a9 00 00       	call   c0022d54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00183c0:	83 c4 30             	add    esp,0x30
c00183c3:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00183ca:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00183d2:	0f 84 4b ff ff ff    	je     c0018323 <ACPI::open(int, int, void*)+0xc5>
c00183d8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00183e3:	83 ec 0c             	sub    esp,0xc
c00183e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00183ed:	e8 29 74 ff ff       	call   c000f81b <malloc>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	89 c3                	mov    ebx,eax
c00183f7:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c00183fc:	83 ec 04             	sub    esp,0x4
c00183ff:	50                   	push   eax
c0018400:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018407:	53                   	push   ebx
c0018408:	e8 d9 a9 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001840d:	83 c4 10             	add    esp,0x10
c0018410:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018417:	83 ec 0c             	sub    esp,0xc
c001841a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018421:	e8 92 ac ff ff       	call   c00130b8 <File::exists()>
c0018426:	83 c4 10             	add    esp,0x10
c0018429:	84 c0                	test   al,al
c001842b:	74 27                	je     c0018454 <ACPI::open(int, int, void*)+0x1f6>
c001842d:	83 ec 08             	sub    esp,0x8
c0018430:	6a 01                	push   0x1
c0018432:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018439:	e8 b4 4f 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c001843e:	83 c4 10             	add    esp,0x10
c0018441:	83 ec 08             	sub    esp,0x8
c0018444:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001844b:	50                   	push   eax
c001844c:	e8 d2 51 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c0018451:	83 c4 10             	add    esp,0x10
c0018454:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001845c:	0f 84 c1 fe ff ff    	je     c0018323 <ACPI::open(int, int, void*)+0xc5>
c0018462:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018469:	8b 00                	mov    eax,DWORD PTR [eax]
c001846b:	83 c0 08             	add    eax,0x8
c001846e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018470:	83 ec 0c             	sub    esp,0xc
c0018473:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001847a:	ff d0                	call   eax
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	e9 9f fe ff ff       	jmp    c0018323 <ACPI::open(int, int, void*)+0xc5>
c0018484:	83 ec 0c             	sub    esp,0xc
c0018487:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001848e:	50                   	push   eax
c001848f:	e8 5e 0a 01 00       	call   c0028ef2 <LinkedList<Device>::~LinkedList()>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c001849d:	83 ec 08             	sub    esp,0x8
c00184a0:	6a 01                	push   0x1
c00184a2:	68 3b bc 02 c0       	push   0xc002bc3b
c00184a7:	e8 46 4f 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c00184ac:	83 c4 10             	add    esp,0x10
c00184af:	83 ec 08             	sub    esp,0x8
c00184b2:	53                   	push   ebx
c00184b3:	50                   	push   eax
c00184b4:	e8 6a 51 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c00184c2:	83 ec 08             	sub    esp,0x8
c00184c5:	6a 01                	push   0x1
c00184c7:	68 58 bc 02 c0       	push   0xc002bc58
c00184cc:	e8 21 4f 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	83 ec 08             	sub    esp,0x8
c00184d7:	53                   	push   ebx
c00184d8:	50                   	push   eax
c00184d9:	e8 45 51 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00184e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184ec:	83 e0 04             	and    eax,0x4
c00184ef:	84 c0                	test   al,al
c00184f1:	0f 84 0d 01 00 00    	je     c0018604 <ACPI::open(int, int, void*)+0x3a6>
c00184f7:	83 ec 0c             	sub    esp,0xc
c00184fa:	68 75 bc 02 c0       	push   0xc002bc75
c00184ff:	e8 71 73 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0018504:	83 c4 10             	add    esp,0x10
c0018507:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001851c:	e8 fa 72 ff ff       	call   c000f81b <malloc>
c0018521:	83 c4 10             	add    esp,0x10
c0018524:	89 c3                	mov    ebx,eax
c0018526:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001852b:	83 ec 04             	sub    esp,0x4
c001852e:	50                   	push   eax
c001852f:	68 92 bc 02 c0       	push   0xc002bc92
c0018534:	53                   	push   ebx
c0018535:	e8 ac a8 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018544:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001854c:	74 1a                	je     c0018568 <ACPI::open(int, int, void*)+0x30a>
c001854e:	83 ec 0c             	sub    esp,0xc
c0018551:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018558:	e8 5b ab ff ff       	call   c00130b8 <File::exists()>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	84 c0                	test   al,al
c0018562:	74 04                	je     c0018568 <ACPI::open(int, int, void*)+0x30a>
c0018564:	b0 01                	mov    al,0x1
c0018566:	eb 02                	jmp    c001856a <ACPI::open(int, int, void*)+0x30c>
c0018568:	b0 00                	mov    al,0x0
c001856a:	84 c0                	test   al,al
c001856c:	74 25                	je     c0018593 <ACPI::open(int, int, void*)+0x335>
c001856e:	83 ec 08             	sub    esp,0x8
c0018571:	6a 01                	push   0x1
c0018573:	68 92 bc 02 c0       	push   0xc002bc92
c0018578:	e8 75 4e 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c001857d:	83 c4 10             	add    esp,0x10
c0018580:	83 ec 08             	sub    esp,0x8
c0018583:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001858a:	50                   	push   eax
c001858b:	e8 93 50 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c0018590:	83 c4 10             	add    esp,0x10
c0018593:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001859b:	74 27                	je     c00185c4 <ACPI::open(int, int, void*)+0x366>
c001859d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00185a5:	74 1d                	je     c00185c4 <ACPI::open(int, int, void*)+0x366>
c00185a7:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00185ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b0:	83 c0 08             	add    eax,0x8
c00185b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b5:	83 ec 0c             	sub    esp,0xc
c00185b8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00185bf:	ff d0                	call   eax
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c00185c9:	83 ec 08             	sub    esp,0x8
c00185cc:	68 af bc 02 c0       	push   0xc002bcaf
c00185d1:	50                   	push   eax
c00185d2:	e8 d4 f2 ff ff       	call   c00178ab <findDataTable(unsigned char*, char*)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00185e1:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00185e9:	74 19                	je     c0018604 <ACPI::open(int, int, void*)+0x3a6>
c00185eb:	83 ec 08             	sub    esp,0x8
c00185ee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00185f5:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00185fc:	e8 fd fb ff ff       	call   c00181fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018601:	83 c4 10             	add    esp,0x10
c0018604:	b8 00 00 00 00       	mov    eax,0x0
c0018609:	81 c4 60 01 00 00    	add    esp,0x160
c001860f:	5b                   	pop    ebx
c0018610:	5e                   	pop    esi
c0018611:	5f                   	pop    edi
c0018612:	c3                   	ret    
c0018613:	90                   	nop

c0018614 <CPU::close(int, int, void*)>:
c0018614:	31 c0                	xor    eax,eax
c0018616:	c3                   	ret    
c0018617:	90                   	nop

c0018618 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018618:	55                   	push   ebp
c0018619:	57                   	push   edi
c001861a:	56                   	push   esi
c001861b:	53                   	push   ebx
c001861c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018620:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018624:	89 ce                	mov    esi,ecx
c0018626:	89 d5                	mov    ebp,edx
c0018628:	80 f9 04             	cmp    cl,0x4
c001862b:	75 28                	jne    c0018655 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001862d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018630:	3c 03                	cmp    al,0x3
c0018632:	0f 86 63 01 00 00    	jbe    c001879b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018638:	80 fa 03             	cmp    dl,0x3
c001863b:	0f 84 5a 01 00 00    	je     c001879b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018641:	8d 7a f2             	lea    edi,[edx-0xe]
c0018644:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018649:	89 fb                	mov    ebx,edi
c001864b:	80 fb 01             	cmp    bl,0x1
c001864e:	77 4e                	ja     c001869e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018650:	e9 52 01 00 00       	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018655:	80 f9 05             	cmp    cl,0x5
c0018658:	75 4d                	jne    c00186a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001865a:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001865f:	80 fa 03             	cmp    dl,0x3
c0018662:	0f 86 3f 01 00 00    	jbe    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018668:	8d 7a fa             	lea    edi,[edx-0x6]
c001866b:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018670:	89 fb                	mov    ebx,edi
c0018672:	80 fb 01             	cmp    bl,0x1
c0018675:	0f 86 2c 01 00 00    	jbe    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001867b:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018680:	80 fa 08             	cmp    dl,0x8
c0018683:	0f 84 1e 01 00 00    	je     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018689:	89 d7                	mov    edi,edx
c001868b:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018690:	83 e7 fb             	and    edi,0xfffffffb
c0018693:	89 fb                	mov    ebx,edi
c0018695:	80 fb 09             	cmp    bl,0x9
c0018698:	0f 84 09 01 00 00    	je     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869e:	31 c0                	xor    eax,eax
c00186a0:	89 eb                	mov    ebx,ebp
c00186a2:	0f b6 fb             	movzx  edi,bl
c00186a5:	eb 30                	jmp    c00186d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186a7:	31 c0                	xor    eax,eax
c00186a9:	80 f9 06             	cmp    cl,0x6
c00186ac:	75 f2                	jne    c00186a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186ae:	80 fa 0a             	cmp    dl,0xa
c00186b1:	77 ed                	ja     c00186a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186b3:	bf de 05 00 00       	mov    edi,0x5de
c00186b8:	0f a3 d7             	bt     edi,edx
c00186bb:	73 e3                	jae    c00186a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186bd:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00186c2:	e9 e0 00 00 00       	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c7:	39 c7                	cmp    edi,eax
c00186c9:	0f 84 d3 00 00 00    	je     c00187a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186cf:	40                   	inc    eax
c00186d0:	3d d0 00 00 00       	cmp    eax,0xd0
c00186d5:	74 09                	je     c00186e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186d7:	89 f3                	mov    ebx,esi
c00186d9:	80 fb 0f             	cmp    bl,0xf
c00186dc:	75 f1                	jne    c00186cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186de:	eb e7                	jmp    c00186c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186e0:	80 f9 10             	cmp    cl,0x10
c00186e3:	75 14                	jne    c00186f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186e5:	8d 42 fc             	lea    eax,[edx-0x4]
c00186e8:	83 e0 fb             	and    eax,0xfffffffb
c00186eb:	3c 02                	cmp    al,0x2
c00186ed:	76 34                	jbe    c0018723 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186ef:	b8 35 be 02 c0       	mov    eax,0xc002be35
c00186f4:	80 fa 02             	cmp    dl,0x2
c00186f7:	eb 24                	jmp    c001871d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00186f9:	80 f9 11             	cmp    cl,0x11
c00186fc:	75 13                	jne    c0018711 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186fe:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018703:	80 fa 03             	cmp    dl,0x3
c0018706:	0f 85 9b 00 00 00    	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001870c:	e9 91 00 00 00       	jmp    c00187a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018711:	80 f9 12             	cmp    cl,0x12
c0018714:	75 14                	jne    c001872a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018716:	b8 35 be 02 c0       	mov    eax,0xc002be35
c001871b:	fe ca                	dec    dl
c001871d:	0f 85 84 00 00 00    	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018723:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018728:	eb 7d                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001872a:	80 f9 14             	cmp    cl,0x14
c001872d:	75 12                	jne    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001872f:	4a                   	dec    edx
c0018730:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018735:	80 fa 01             	cmp    dl,0x1
c0018738:	77 6d                	ja     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873a:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c001873f:	eb 66                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018741:	80 f9 15             	cmp    cl,0x15
c0018744:	75 31                	jne    c0018777 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018746:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c001874b:	80 fa 01             	cmp    dl,0x1
c001874e:	74 57                	je     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018750:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018755:	80 fa 13             	cmp    dl,0x13
c0018758:	76 0c                	jbe    c0018766 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001875a:	80 fa 30             	cmp    dl,0x30
c001875d:	75 48                	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875f:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018764:	eb 41                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018766:	b9 04 00 09 00       	mov    ecx,0x90004
c001876b:	0f a3 d1             	bt     ecx,edx
c001876e:	73 37                	jae    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018770:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018775:	eb 30                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018777:	b8 35 be 02 c0       	mov    eax,0xc002be35
c001877c:	80 f9 16             	cmp    cl,0x16
c001877f:	75 26                	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018781:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018786:	84 d2                	test   dl,dl
c0018788:	74 1d                	je     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878a:	b8 35 be 02 c0       	mov    eax,0xc002be35
c001878f:	80 fa 30             	cmp    dl,0x30
c0018792:	75 13                	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018794:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018799:	eb 0c                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879b:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00187a0:	eb 05                	jmp    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a2:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00187a7:	5b                   	pop    ebx
c00187a8:	5e                   	pop    esi
c00187a9:	5f                   	pop    edi
c00187aa:	5d                   	pop    ebp
c00187ab:	c3                   	ret    

c00187ac <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187b4:	80 f9 04             	cmp    cl,0x4
c00187b7:	75 6b                	jne    c0018824 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187b9:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00187be:	80 fa 01             	cmp    dl,0x1
c00187c1:	0f 86 92 02 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c7:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00187cc:	80 fa 02             	cmp    dl,0x2
c00187cf:	0f 84 84 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d5:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00187da:	80 fa 03             	cmp    dl,0x3
c00187dd:	0f 84 76 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e3:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00187e8:	80 fa 04             	cmp    dl,0x4
c00187eb:	0f 84 68 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f1:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00187f6:	80 fa 05             	cmp    dl,0x5
c00187f9:	0f 84 5a 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ff:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018804:	80 fa 07             	cmp    dl,0x7
c0018807:	0f 84 4c 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880d:	83 ea 08             	sub    edx,0x8
c0018810:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018815:	80 fa 01             	cmp    dl,0x1
c0018818:	0f 87 3b 02 00 00    	ja     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881e:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018823:	c3                   	ret    
c0018824:	80 f9 05             	cmp    cl,0x5
c0018827:	75 45                	jne    c001886e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018829:	8d 4a ff             	lea    ecx,[edx-0x1]
c001882c:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018831:	80 f9 02             	cmp    cl,0x2
c0018834:	0f 86 1f 02 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883a:	80 fa 04             	cmp    dl,0x4
c001883d:	0f 84 f3 01 00 00    	je     c0018a36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018843:	80 fa 07             	cmp    dl,0x7
c0018846:	0f 84 0d 02 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884c:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018851:	80 fa 08             	cmp    dl,0x8
c0018854:	0f 84 ff 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885a:	b8 35 be 02 c0       	mov    eax,0xc002be35
c001885f:	80 fa 09             	cmp    dl,0x9
c0018862:	0f 85 f1 01 00 00    	jne    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018868:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c001886d:	c3                   	ret    
c001886e:	80 f9 06             	cmp    cl,0x6
c0018871:	0f 85 85 01 00 00    	jne    c00189fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018877:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c001887c:	80 fa 01             	cmp    dl,0x1
c001887f:	0f 84 d4 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018885:	8d 42 fb             	lea    eax,[edx-0x5]
c0018888:	3c 01                	cmp    al,0x1
c001888a:	0f 86 ac 01 00 00    	jbe    c0018a3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018890:	80 fa 03             	cmp    dl,0x3
c0018893:	0f 84 a3 01 00 00    	je     c0018a3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018899:	8d 4a f9             	lea    ecx,[edx-0x7]
c001889c:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00188a1:	80 f9 01             	cmp    cl,0x1
c00188a4:	0f 86 af 01 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188aa:	80 fa 09             	cmp    dl,0x9
c00188ad:	0f 84 8f 01 00 00    	je     c0018a42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188b3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188b6:	80 f9 01             	cmp    cl,0x1
c00188b9:	0f 86 9a 01 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bf:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00188c4:	80 fa 0d             	cmp    dl,0xd
c00188c7:	0f 84 8c 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cd:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c00188d2:	80 fa 0e             	cmp    dl,0xe
c00188d5:	0f 84 7e 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188db:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c00188e0:	80 fa 0f             	cmp    dl,0xf
c00188e3:	0f 84 70 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e9:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00188ee:	80 fa 15             	cmp    dl,0x15
c00188f1:	0f 84 62 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00188fa:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c00188ff:	80 f9 01             	cmp    cl,0x1
c0018902:	0f 86 51 01 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018908:	80 fa 1a             	cmp    dl,0x1a
c001890b:	0f 84 37 01 00 00    	je     c0018a48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018911:	80 fa 1c             	cmp    dl,0x1c
c0018914:	0f 84 34 01 00 00    	je     c0018a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001891a:	80 fa 1d             	cmp    dl,0x1d
c001891d:	0f 84 36 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018923:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018928:	80 fa 25             	cmp    dl,0x25
c001892b:	0f 84 28 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018931:	8d 4a da             	lea    ecx,[edx-0x26]
c0018934:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018939:	80 f9 01             	cmp    cl,0x1
c001893c:	0f 86 17 01 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018942:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018947:	80 fa 2a             	cmp    dl,0x2a
c001894a:	0f 84 09 01 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018950:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018955:	80 fa 2c             	cmp    dl,0x2c
c0018958:	0f 84 fb 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895e:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018963:	80 fa 2d             	cmp    dl,0x2d
c0018966:	0f 84 ed 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896c:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018971:	80 fa 2e             	cmp    dl,0x2e
c0018974:	0f 84 df 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897a:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001897f:	80 fa 2f             	cmp    dl,0x2f
c0018982:	0f 84 d1 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018988:	8d 4a cb             	lea    ecx,[edx-0x35]
c001898b:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018990:	80 f9 01             	cmp    cl,0x1
c0018993:	0f 86 c0 00 00 00    	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018999:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001899e:	80 fa 37             	cmp    dl,0x37
c00189a1:	0f 84 b2 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a7:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00189ac:	80 fa 3a             	cmp    dl,0x3a
c00189af:	0f 84 a4 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b5:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00189ba:	80 fa 3c             	cmp    dl,0x3c
c00189bd:	0f 84 96 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c3:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00189c8:	80 fa 3d             	cmp    dl,0x3d
c00189cb:	0f 84 88 00 00 00    	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d1:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00189d6:	80 fa 3e             	cmp    dl,0x3e
c00189d9:	74 7e                	je     c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189db:	8d 42 bb             	lea    eax,[edx-0x45]
c00189de:	3c 01                	cmp    al,0x1
c00189e0:	76 72                	jbe    c0018a54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189e2:	80 fa 3f             	cmp    dl,0x3f
c00189e5:	74 6d                	je     c0018a54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189e7:	80 fa 4a             	cmp    dl,0x4a
c00189ea:	74 0a                	je     c00189f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189ec:	b8 35 be 02 c0       	mov    eax,0xc002be35
c00189f1:	80 fa 4d             	cmp    dl,0x4d
c00189f4:	75 63                	jne    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f6:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00189fb:	c3                   	ret    
c00189fc:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018a01:	80 f9 0b             	cmp    cl,0xb
c0018a04:	75 0a                	jne    c0018a10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a06:	fe ca                	dec    dl
c0018a08:	75 4f                	jne    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0a:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018a0f:	c3                   	ret    
c0018a10:	80 f9 0f             	cmp    cl,0xf
c0018a13:	75 44                	jne    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a15:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018a1a:	80 fa 02             	cmp    dl,0x2
c0018a1d:	76 3a                	jbe    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a22:	3c 01                	cmp    al,0x1
c0018a24:	76 0a                	jbe    c0018a30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a26:	b8 35 be 02 c0       	mov    eax,0xc002be35
c0018a2b:	80 fa 06             	cmp    dl,0x6
c0018a2e:	75 29                	jne    c0018a59 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a30:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018a35:	c3                   	ret    
c0018a36:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a3b:	c3                   	ret    
c0018a3c:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a41:	c3                   	ret    
c0018a42:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a47:	c3                   	ret    
c0018a48:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018a4d:	c3                   	ret    
c0018a4e:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018a53:	c3                   	ret    
c0018a54:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018a59:	c3                   	ret    

c0018a5a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a5a:	60                   	pusha  
c0018a5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a67:	9c                   	pushf  
c0018a68:	fa                   	cli    
c0018a69:	0f 09                	wbinvd 
c0018a6b:	0f 30                	wrmsr  
c0018a6d:	9d                   	popf   
c0018a6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a72:	89 02                	mov    DWORD PTR [edx],eax
c0018a74:	61                   	popa   
c0018a75:	c3                   	ret    

c0018a76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a76:	60                   	pusha  
c0018a77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a7b:	9c                   	pushf  
c0018a7c:	fa                   	cli    
c0018a7d:	0f 09                	wbinvd 
c0018a7f:	31 c0                	xor    eax,eax
c0018a81:	31 d2                	xor    edx,edx
c0018a83:	0f 32                	rdmsr  
c0018a85:	9d                   	popf   
c0018a86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a8a:	89 02                	mov    DWORD PTR [edx],eax
c0018a8c:	61                   	popa   
c0018a8d:	c3                   	ret    

c0018a8e <CPU::AMD_K6_writeback(int, int, int)>:
c0018a8e:	56                   	push   esi
c0018a8f:	53                   	push   ebx
c0018a90:	83 ec 10             	sub    esp,0x10
c0018a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a97:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a9c:	75 5d                	jne    c0018afb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a9e:	83 f8 08             	cmp    eax,0x8
c0018aa1:	75 09                	jne    c0018aac <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018aa3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018aa8:	7e 13                	jle    c0018abd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018aaa:	eb 30                	jmp    c0018adc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018aac:	83 f8 06             	cmp    eax,0x6
c0018aaf:	7c 4a                	jl     c0018afb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ab1:	83 f8 07             	cmp    eax,0x7
c0018ab4:	7e 07                	jle    c0018abd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ab6:	83 f8 09             	cmp    eax,0x9
c0018ab9:	74 21                	je     c0018adc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018abb:	eb 3e                	jmp    c0018afb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018abd:	89 e6                	mov    esi,esp
c0018abf:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0018ac5:	56                   	push   esi
c0018ac6:	c1 eb 15             	shr    ebx,0x15
c0018ac9:	68 82 00 00 c0       	push   0xc0000082
c0018ace:	83 e3 7e             	and    ebx,0x7e
c0018ad1:	e8 a0 ff ff ff       	call   c0018a76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ad6:	56                   	push   esi
c0018ad7:	6a 00                	push   0x0
c0018ad9:	53                   	push   ebx
c0018ada:	eb 12                	jmp    c0018aee <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018adc:	89 e3                	mov    ebx,esp
c0018ade:	53                   	push   ebx
c0018adf:	68 82 00 00 c0       	push   0xc0000082
c0018ae4:	e8 8d ff ff ff       	call   c0018a76 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ae9:	53                   	push   ebx
c0018aea:	6a 00                	push   0x0
c0018aec:	6a 00                	push   0x0
c0018aee:	68 82 00 00 c0       	push   0xc0000082
c0018af3:	e8 62 ff ff ff       	call   c0018a5a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018af8:	83 c4 18             	add    esp,0x18
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	5b                   	pop    ebx
c0018aff:	5e                   	pop    esi
c0018b00:	c3                   	ret    
c0018b01:	90                   	nop

c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b02:	55                   	push   ebp
c0018b03:	57                   	push   edi
c0018b04:	56                   	push   esi
c0018b05:	53                   	push   ebx
c0018b06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b12:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b16:	39 05 e0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e0,eax
c0018b1c:	75 23                	jne    c0018b41 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b1e:	a1 cc ef 02 c0       	mov    eax,ds:0xc002efcc
c0018b23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b27:	89 06                	mov    DWORD PTR [esi],eax
c0018b29:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0018b2e:	89 07                	mov    DWORD PTR [edi],eax
c0018b30:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0018b35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b38:	a1 c0 ef 02 c0       	mov    eax,ds:0xc002efc0
c0018b3d:	89 02                	mov    DWORD PTR [edx],eax
c0018b3f:	eb 3f                	jmp    c0018b80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b41:	31 c9                	xor    ecx,ecx
c0018b43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b47:	0f a2                	cpuid  
c0018b49:	89 06                	mov    DWORD PTR [esi],eax
c0018b4b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b51:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b54:	89 10                	mov    DWORD PTR [eax],edx
c0018b56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b5a:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c0018b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b61:	a3 cc ef 02 c0       	mov    ds:0xc002efcc,eax
c0018b66:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b68:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0018b6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b70:	a3 c4 ef 02 c0       	mov    ds:0xc002efc4,eax
c0018b75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b7b:	a3 c0 ef 02 c0       	mov    ds:0xc002efc0,eax
c0018b80:	5b                   	pop    ebx
c0018b81:	5e                   	pop    esi
c0018b82:	5f                   	pop    edi
c0018b83:	5d                   	pop    ebp
c0018b84:	c3                   	ret    
c0018b85:	90                   	nop

c0018b86 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b86:	83 ec 10             	sub    esp,0x10
c0018b89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b8d:	50                   	push   eax
c0018b8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b92:	50                   	push   eax
c0018b93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b97:	50                   	push   eax
c0018b98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b9c:	50                   	push   eax
c0018b9d:	6a 01                	push   0x1
c0018b9f:	e8 5e ff ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ba4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bac:	0f 95 c0             	setne  al
c0018baf:	83 c4 24             	add    esp,0x24
c0018bb2:	c3                   	ret    
c0018bb3:	90                   	nop

c0018bb4 <CPU::cpuidCheckECX(unsigned int)>:
c0018bb4:	83 ec 10             	sub    esp,0x10
c0018bb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbb:	50                   	push   eax
c0018bbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc0:	50                   	push   eax
c0018bc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc5:	50                   	push   eax
c0018bc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bca:	50                   	push   eax
c0018bcb:	6a 01                	push   0x1
c0018bcd:	e8 30 ff ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bd6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bda:	0f 95 c0             	setne  al
c0018bdd:	83 c4 24             	add    esp,0x24
c0018be0:	c3                   	ret    
c0018be1:	90                   	nop

c0018be2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018be2:	83 ec 10             	sub    esp,0x10
c0018be5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be9:	50                   	push   eax
c0018bea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bee:	50                   	push   eax
c0018bef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf3:	50                   	push   eax
c0018bf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf8:	50                   	push   eax
c0018bf9:	6a 07                	push   0x7
c0018bfb:	e8 02 ff ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c04:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c08:	0f 95 c0             	setne  al
c0018c0b:	83 c4 24             	add    esp,0x24
c0018c0e:	c3                   	ret    
c0018c0f:	90                   	nop

c0018c10 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c10:	83 ec 10             	sub    esp,0x10
c0018c13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c17:	50                   	push   eax
c0018c18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c1c:	50                   	push   eax
c0018c1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c21:	50                   	push   eax
c0018c22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c26:	50                   	push   eax
c0018c27:	6a 07                	push   0x7
c0018c29:	e8 d4 fe ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c32:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c36:	0f 95 c0             	setne  al
c0018c39:	83 c4 24             	add    esp,0x24
c0018c3c:	c3                   	ret    
c0018c3d:	90                   	nop

c0018c3e <CPU::CPU()>:
c0018c3e:	83 ec 0c             	sub    esp,0xc
c0018c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c45:	83 ec 08             	sub    esp,0x8
c0018c48:	68 35 be 02 c0       	push   0xc002be35
c0018c4d:	50                   	push   eax
c0018c4e:	e8 71 b2 ff ff       	call   c0013ec4 <Device::Device(char const*)>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	ba 58 c0 02 c0       	mov    edx,0xc002c058
c0018c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5f:	89 10                	mov    DWORD PTR [eax],edx
c0018c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c65:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c73:	05 78 01 00 00       	add    eax,0x178
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	50                   	push   eax
c0018c7c:	e8 37 64 ff ff       	call   c000f0b8 <GDT::GDT()>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c88:	05 7c 09 00 00       	add    eax,0x97c
c0018c8d:	83 ec 0c             	sub    esp,0xc
c0018c90:	50                   	push   eax
c0018c91:	e8 72 66 ff ff       	call   c000f308 <IDT::IDT()>
c0018c96:	83 c4 10             	add    esp,0x10
c0018c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c9d:	05 7c 11 00 00       	add    eax,0x117c
c0018ca2:	83 ec 0c             	sub    esp,0xc
c0018ca5:	50                   	push   eax
c0018ca6:	e8 3d 81 ff ff       	call   c0010de8 <TSS::TSS()>
c0018cab:	83 c4 10             	add    esp,0x10
c0018cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cc7:	90                   	nop
c0018cc8:	83 c4 0c             	add    esp,0xc
c0018ccb:	c3                   	ret    

c0018ccc <CPU::displayFeatures()>:
c0018ccc:	c3                   	ret    
c0018ccd:	90                   	nop

c0018cce <CPU::detectFeatures()>:
c0018cce:	55                   	push   ebp
c0018ccf:	57                   	push   edi
c0018cd0:	56                   	push   esi
c0018cd1:	53                   	push   ebx
c0018cd2:	83 ec 50             	sub    esp,0x50
c0018cd5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018cd9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ce3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018cea:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018cf0:	6a 0d                	push   0xd
c0018cf2:	6a 00                	push   0x0
c0018cf4:	55                   	push   ebp
c0018cf5:	e8 56 7a fe ff       	call   c0000750 <memset>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0018d02:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018d09:	0f 84 22 09 00 00    	je     c0019631 <CPU::detectFeatures()+0x963>
c0018d0f:	83 ec 0c             	sub    esp,0xc
c0018d12:	89 ef                	mov    edi,ebp
c0018d14:	6a 10                	push   0x10
c0018d16:	e8 6b fe ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018d1b:	83 e0 01             	and    eax,0x1
c0018d1e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d21:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d27:	83 e0 fd             	and    eax,0xfffffffd
c0018d2a:	09 d0                	or     eax,edx
c0018d2c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d32:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d39:	e8 48 fe ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018d3e:	83 e0 01             	and    eax,0x1
c0018d41:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d48:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d4e:	83 e0 fb             	and    eax,0xfffffffb
c0018d51:	09 d0                	or     eax,edx
c0018d53:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d59:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018d60:	e8 21 fe ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018d65:	83 e0 01             	and    eax,0x1
c0018d68:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d6f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d75:	83 e0 f7             	and    eax,0xfffffff7
c0018d78:	09 d0                	or     eax,edx
c0018d7a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d80:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018d87:	e8 fa fd ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018d8c:	83 e0 01             	and    eax,0x1
c0018d8f:	c1 e0 04             	shl    eax,0x4
c0018d92:	88 c2                	mov    dl,al
c0018d94:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d9a:	83 e0 ef             	and    eax,0xffffffef
c0018d9d:	09 d0                	or     eax,edx
c0018d9f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018da5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018dac:	e8 d5 fd ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018db1:	83 e0 01             	and    eax,0x1
c0018db4:	c1 e0 05             	shl    eax,0x5
c0018db7:	88 c2                	mov    dl,al
c0018db9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dbf:	83 e0 df             	and    eax,0xffffffdf
c0018dc2:	09 d0                	or     eax,edx
c0018dc4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018dd1:	e8 b0 fd ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018dd6:	83 e0 01             	and    eax,0x1
c0018dd9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ddc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018de2:	83 e0 fd             	and    eax,0xfffffffd
c0018de5:	09 d0                	or     eax,edx
c0018de7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ded:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018df4:	e8 8d fd ff ff       	call   c0018b86 <CPU::cpuidCheckEDX(unsigned int)>
c0018df9:	83 e0 01             	and    eax,0x1
c0018dfc:	c1 e0 06             	shl    eax,0x6
c0018dff:	88 c2                	mov    dl,al
c0018e01:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e07:	83 e0 bf             	and    eax,0xffffffbf
c0018e0a:	09 d0                	or     eax,edx
c0018e0c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e12:	58                   	pop    eax
c0018e13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e17:	50                   	push   eax
c0018e18:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e1c:	50                   	push   eax
c0018e1d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e21:	56                   	push   esi
c0018e22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e26:	50                   	push   eax
c0018e27:	6a 00                	push   0x0
c0018e29:	e8 d4 fc ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e2e:	b8 04 00 00 00       	mov    eax,0x4
c0018e33:	89 c1                	mov    ecx,eax
c0018e35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e37:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018e3d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018e41:	89 c1                	mov    ecx,eax
c0018e43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e45:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018e4b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018e4f:	89 c1                	mov    ecx,eax
c0018e51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e53:	83 c4 18             	add    esp,0x18
c0018e56:	68 e0 bc 02 c0       	push   0xc002bce0
c0018e5b:	55                   	push   ebp
c0018e5c:	e8 37 7a fe ff       	call   c0000898 <strcmp>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	85 c0                	test   eax,eax
c0018e66:	75 0f                	jne    c0018e77 <CPU::detectFeatures()+0x1a9>
c0018e68:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018e72:	e9 22 02 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018e77:	50                   	push   eax
c0018e78:	50                   	push   eax
c0018e79:	68 ed bc 02 c0       	push   0xc002bced
c0018e7e:	55                   	push   ebp
c0018e7f:	e8 14 7a fe ff       	call   c0000898 <strcmp>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	85 c0                	test   eax,eax
c0018e89:	74 dd                	je     c0018e68 <CPU::detectFeatures()+0x19a>
c0018e8b:	50                   	push   eax
c0018e8c:	50                   	push   eax
c0018e8d:	68 fa bc 02 c0       	push   0xc002bcfa
c0018e92:	55                   	push   ebp
c0018e93:	e8 00 7a fe ff       	call   c0000898 <strcmp>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	85 c0                	test   eax,eax
c0018e9d:	74 2a                	je     c0018ec9 <CPU::detectFeatures()+0x1fb>
c0018e9f:	50                   	push   eax
c0018ea0:	50                   	push   eax
c0018ea1:	68 07 bd 02 c0       	push   0xc002bd07
c0018ea6:	55                   	push   ebp
c0018ea7:	e8 ec 79 fe ff       	call   c0000898 <strcmp>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	85 c0                	test   eax,eax
c0018eb1:	74 16                	je     c0018ec9 <CPU::detectFeatures()+0x1fb>
c0018eb3:	50                   	push   eax
c0018eb4:	50                   	push   eax
c0018eb5:	68 14 bd 02 c0       	push   0xc002bd14
c0018eba:	55                   	push   ebp
c0018ebb:	e8 d8 79 fe ff       	call   c0000898 <strcmp>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	85 c0                	test   eax,eax
c0018ec5:	74 48                	je     c0018f0f <CPU::detectFeatures()+0x241>
c0018ec7:	eb 0f                	jmp    c0018ed8 <CPU::detectFeatures()+0x20a>
c0018ec9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018ed3:	e9 c1 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018ed8:	50                   	push   eax
c0018ed9:	50                   	push   eax
c0018eda:	68 21 bd 02 c0       	push   0xc002bd21
c0018edf:	55                   	push   ebp
c0018ee0:	e8 b3 79 fe ff       	call   c0000898 <strcmp>
c0018ee5:	83 c4 10             	add    esp,0x10
c0018ee8:	85 c0                	test   eax,eax
c0018eea:	74 23                	je     c0018f0f <CPU::detectFeatures()+0x241>
c0018eec:	57                   	push   edi
c0018eed:	57                   	push   edi
c0018eee:	68 2e bd 02 c0       	push   0xc002bd2e
c0018ef3:	55                   	push   ebp
c0018ef4:	e8 9f 79 fe ff       	call   c0000898 <strcmp>
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	85 c0                	test   eax,eax
c0018efe:	75 1e                	jne    c0018f1e <CPU::detectFeatures()+0x250>
c0018f00:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f0a:	e9 8a 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018f0f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018f19:	e9 7b 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018f1e:	56                   	push   esi
c0018f1f:	56                   	push   esi
c0018f20:	68 3b bd 02 c0       	push   0xc002bd3b
c0018f25:	55                   	push   ebp
c0018f26:	e8 6d 79 fe ff       	call   c0000898 <strcmp>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	85 c0                	test   eax,eax
c0018f30:	75 0f                	jne    c0018f41 <CPU::detectFeatures()+0x273>
c0018f32:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f3c:	e9 58 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018f41:	51                   	push   ecx
c0018f42:	51                   	push   ecx
c0018f43:	68 fa bc 02 c0       	push   0xc002bcfa
c0018f48:	55                   	push   ebp
c0018f49:	e8 4a 79 fe ff       	call   c0000898 <strcmp>
c0018f4e:	83 c4 10             	add    esp,0x10
c0018f51:	85 c0                	test   eax,eax
c0018f53:	75 0f                	jne    c0018f64 <CPU::detectFeatures()+0x296>
c0018f55:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018f5f:	e9 35 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018f64:	52                   	push   edx
c0018f65:	52                   	push   edx
c0018f66:	68 48 bd 02 c0       	push   0xc002bd48
c0018f6b:	55                   	push   ebp
c0018f6c:	e8 27 79 fe ff       	call   c0000898 <strcmp>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	85 c0                	test   eax,eax
c0018f76:	75 0f                	jne    c0018f87 <CPU::detectFeatures()+0x2b9>
c0018f78:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f82:	e9 12 01 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018f87:	50                   	push   eax
c0018f88:	50                   	push   eax
c0018f89:	68 55 bd 02 c0       	push   0xc002bd55
c0018f8e:	55                   	push   ebp
c0018f8f:	e8 04 79 fe ff       	call   c0000898 <strcmp>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	85 c0                	test   eax,eax
c0018f99:	75 0f                	jne    c0018faa <CPU::detectFeatures()+0x2dc>
c0018f9b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018fa5:	e9 ef 00 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018faa:	50                   	push   eax
c0018fab:	50                   	push   eax
c0018fac:	68 62 bd 02 c0       	push   0xc002bd62
c0018fb1:	55                   	push   ebp
c0018fb2:	e8 e1 78 fe ff       	call   c0000898 <strcmp>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	85 c0                	test   eax,eax
c0018fbc:	75 0f                	jne    c0018fcd <CPU::detectFeatures()+0x2ff>
c0018fbe:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018fc8:	e9 cc 00 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018fcd:	50                   	push   eax
c0018fce:	50                   	push   eax
c0018fcf:	68 6f bd 02 c0       	push   0xc002bd6f
c0018fd4:	55                   	push   ebp
c0018fd5:	e8 be 78 fe ff       	call   c0000898 <strcmp>
c0018fda:	83 c4 10             	add    esp,0x10
c0018fdd:	85 c0                	test   eax,eax
c0018fdf:	75 0f                	jne    c0018ff0 <CPU::detectFeatures()+0x322>
c0018fe1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018feb:	e9 a9 00 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0018ff0:	50                   	push   eax
c0018ff1:	50                   	push   eax
c0018ff2:	68 7c bd 02 c0       	push   0xc002bd7c
c0018ff7:	55                   	push   ebp
c0018ff8:	e8 9b 78 fe ff       	call   c0000898 <strcmp>
c0018ffd:	83 c4 10             	add    esp,0x10
c0019000:	85 c0                	test   eax,eax
c0019002:	75 0f                	jne    c0019013 <CPU::detectFeatures()+0x345>
c0019004:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001900e:	e9 86 00 00 00       	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0019013:	50                   	push   eax
c0019014:	50                   	push   eax
c0019015:	68 89 bd 02 c0       	push   0xc002bd89
c001901a:	55                   	push   ebp
c001901b:	e8 78 78 fe ff       	call   c0000898 <strcmp>
c0019020:	83 c4 10             	add    esp,0x10
c0019023:	85 c0                	test   eax,eax
c0019025:	75 0c                	jne    c0019033 <CPU::detectFeatures()+0x365>
c0019027:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019031:	eb 66                	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0019033:	50                   	push   eax
c0019034:	50                   	push   eax
c0019035:	68 96 bd 02 c0       	push   0xc002bd96
c001903a:	55                   	push   ebp
c001903b:	e8 58 78 fe ff       	call   c0000898 <strcmp>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	85 c0                	test   eax,eax
c0019045:	75 0c                	jne    c0019053 <CPU::detectFeatures()+0x385>
c0019047:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019051:	eb 46                	jmp    c0019099 <CPU::detectFeatures()+0x3cb>
c0019053:	57                   	push   edi
c0019054:	57                   	push   edi
c0019055:	68 a3 bd 02 c0       	push   0xc002bda3
c001905a:	55                   	push   ebp
c001905b:	e8 38 78 fe ff       	call   c0000898 <strcmp>
c0019060:	83 c4 10             	add    esp,0x10
c0019063:	85 c0                	test   eax,eax
c0019065:	74 e0                	je     c0019047 <CPU::detectFeatures()+0x379>
c0019067:	56                   	push   esi
c0019068:	56                   	push   esi
c0019069:	68 b0 bd 02 c0       	push   0xc002bdb0
c001906e:	55                   	push   ebp
c001906f:	e8 24 78 fe ff       	call   c0000898 <strcmp>
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	85 c0                	test   eax,eax
c0019079:	74 cc                	je     c0019047 <CPU::detectFeatures()+0x379>
c001907b:	51                   	push   ecx
c001907c:	51                   	push   ecx
c001907d:	68 bd bd 02 c0       	push   0xc002bdbd
c0019082:	55                   	push   ebp
c0019083:	e8 10 78 fe ff       	call   c0000898 <strcmp>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	85 c0                	test   eax,eax
c001908d:	74 b8                	je     c0019047 <CPU::detectFeatures()+0x379>
c001908f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019099:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001909e:	0f 86 be 00 00 00    	jbe    c0019162 <CPU::detectFeatures()+0x494>
c00190a4:	83 ec 0c             	sub    esp,0xc
c00190a7:	68 80 00 00 00       	push   0x80
c00190ac:	e8 31 fb ff ff       	call   c0018be2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190b1:	83 e0 01             	and    eax,0x1
c00190b4:	c1 e0 06             	shl    eax,0x6
c00190b7:	88 c2                	mov    dl,al
c00190b9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190bf:	83 e0 bf             	and    eax,0xffffffbf
c00190c2:	09 d0                	or     eax,edx
c00190c4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190ca:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00190d1:	e8 0c fb ff ff       	call   c0018be2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190d6:	83 e0 01             	and    eax,0x1
c00190d9:	c1 e0 04             	shl    eax,0x4
c00190dc:	88 c2                	mov    dl,al
c00190de:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190e4:	83 e0 ef             	and    eax,0xffffffef
c00190e7:	09 d0                	or     eax,edx
c00190e9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190ef:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00190f6:	e8 e7 fa ff ff       	call   c0018be2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190fb:	c1 e0 07             	shl    eax,0x7
c00190fe:	88 c2                	mov    dl,al
c0019100:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019106:	83 e0 7f             	and    eax,0x7f
c0019109:	09 d0                	or     eax,edx
c001910b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019111:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019118:	e8 f3 fa ff ff       	call   c0018c10 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001911d:	83 e0 01             	and    eax,0x1
c0019120:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019127:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001912d:	83 e0 f7             	and    eax,0xfffffff7
c0019130:	09 d0                	or     eax,edx
c0019132:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019138:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001913f:	e8 cc fa ff ff       	call   c0018c10 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019144:	83 c4 10             	add    esp,0x10
c0019147:	83 e0 01             	and    eax,0x1
c001914a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019151:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019157:	83 e0 fb             	and    eax,0xfffffffb
c001915a:	09 d0                	or     eax,edx
c001915c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019162:	83 ec 0c             	sub    esp,0xc
c0019165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019169:	50                   	push   eax
c001916a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001916e:	50                   	push   eax
c001916f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019173:	56                   	push   esi
c0019174:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019178:	50                   	push   eax
c0019179:	6a 01                	push   0x1
c001917b:	e8 82 f9 ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019180:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019184:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001918a:	88 ca                	mov    dl,cl
c001918c:	83 e0 f0             	and    eax,0xfffffff0
c001918f:	83 e2 0f             	and    edx,0xf
c0019192:	09 d0                	or     eax,edx
c0019194:	88 ca                	mov    dl,cl
c0019196:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001919c:	c0 ea 04             	shr    dl,0x4
c001919f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00191a3:	0f b6 c2             	movzx  eax,dl
c00191a6:	83 c4 20             	add    esp,0x20
c00191a9:	c1 e0 06             	shl    eax,0x6
c00191ac:	89 c7                	mov    edi,eax
c00191ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191b4:	66 25 3f c0          	and    ax,0xc03f
c00191b8:	09 f8                	or     eax,edi
c00191ba:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00191c1:	89 c8                	mov    eax,ecx
c00191c3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00191ca:	c1 e8 08             	shr    eax,0x8
c00191cd:	83 e5 3f             	and    ebp,0x3f
c00191d0:	83 e0 0f             	and    eax,0xf
c00191d3:	89 c7                	mov    edi,eax
c00191d5:	c1 e7 06             	shl    edi,0x6
c00191d8:	09 ef                	or     edi,ebp
c00191da:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00191e1:	89 fa                	mov    edx,edi
c00191e3:	83 e5 c0             	and    ebp,0xffffffc0
c00191e6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00191ec:	88 c2                	mov    dl,al
c00191ee:	c0 ea 02             	shr    dl,0x2
c00191f1:	89 d7                	mov    edi,edx
c00191f3:	09 ef                	or     edi,ebp
c00191f5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191fb:	89 fa                	mov    edx,edi
c00191fd:	83 e5 cf             	and    ebp,0xffffffcf
c0019200:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019206:	89 cf                	mov    edi,ecx
c0019208:	c1 ef 0c             	shr    edi,0xc
c001920b:	83 e7 03             	and    edi,0x3
c001920e:	c1 e7 04             	shl    edi,0x4
c0019211:	09 ef                	or     edi,ebp
c0019213:	3c 06                	cmp    al,0x6
c0019215:	89 fa                	mov    edx,edi
c0019217:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001921d:	74 04                	je     c0019223 <CPU::detectFeatures()+0x555>
c001921f:	3c 0f                	cmp    al,0xf
c0019221:	75 5c                	jne    c001927f <CPU::detectFeatures()+0x5b1>
c0019223:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019227:	89 cf                	mov    edi,ecx
c0019229:	c1 ef 10             	shr    edi,0x10
c001922c:	c1 e7 04             	shl    edi,0x4
c001922f:	09 fa                	or     edx,edi
c0019231:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019237:	0f b6 d2             	movzx  edx,dl
c001923a:	66 81 e7 3f c0       	and    di,0xc03f
c001923f:	c1 e2 06             	shl    edx,0x6
c0019242:	09 fa                	or     edx,edi
c0019244:	3c 0f                	cmp    al,0xf
c0019246:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001924d:	75 30                	jne    c001927f <CPU::detectFeatures()+0x5b1>
c001924f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019255:	c1 e9 14             	shr    ecx,0x14
c0019258:	83 e0 3f             	and    eax,0x3f
c001925b:	83 c1 0f             	add    ecx,0xf
c001925e:	88 ca                	mov    dl,cl
c0019260:	c0 e9 02             	shr    cl,0x2
c0019263:	c1 e2 06             	shl    edx,0x6
c0019266:	09 d0                	or     eax,edx
c0019268:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001926e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019274:	83 e0 c0             	and    eax,0xffffffc0
c0019277:	09 c1                	or     ecx,eax
c0019279:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001927f:	83 ec 0c             	sub    esp,0xc
c0019282:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019289:	8d 44 24 28          	lea    eax,[esp+0x28]
c001928d:	50                   	push   eax
c001928e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019292:	55                   	push   ebp
c0019293:	56                   	push   esi
c0019294:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019298:	57                   	push   edi
c0019299:	68 00 00 00 80       	push   0x80000000
c001929e:	e8 5f f8 ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192a3:	83 c4 20             	add    esp,0x20
c00192a6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00192ae:	76 22                	jbe    c00192d2 <CPU::detectFeatures()+0x604>
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b7:	50                   	push   eax
c00192b8:	55                   	push   ebp
c00192b9:	56                   	push   esi
c00192ba:	57                   	push   edi
c00192bb:	68 01 00 00 80       	push   0x80000001
c00192c0:	e8 3d f8 ff ff       	call   c0018b02 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192c5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00192cf:	83 c4 20             	add    esp,0x20
c00192d2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00192d8:	83 f8 01             	cmp    eax,0x1
c00192db:	75 6f                	jne    c001934c <CPU::detectFeatures()+0x67e>
c00192dd:	51                   	push   ecx
c00192de:	51                   	push   ecx
c00192df:	68 c9 bd 02 c0       	push   0xc002bdc9
c00192e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192e8:	56                   	push   esi
c00192e9:	e8 1e 75 fe ff       	call   c000080c <strcpy>
c00192ee:	5f                   	pop    edi
c00192ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f5:	5d                   	pop    ebp
c00192f6:	66 c1 e8 06          	shr    ax,0x6
c00192fa:	0f b6 c0             	movzx  eax,al
c00192fd:	50                   	push   eax
c00192fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019304:	c1 e8 0e             	shr    eax,0xe
c0019307:	0f b6 c0             	movzx  eax,al
c001930a:	50                   	push   eax
c001930b:	e8 9c f4 ff ff       	call   c00187ac <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019310:	5a                   	pop    edx
c0019311:	59                   	pop    ecx
c0019312:	50                   	push   eax
c0019313:	56                   	push   esi
c0019314:	e8 33 76 fe ff       	call   c000094c <strcat>
c0019319:	5f                   	pop    edi
c001931a:	5d                   	pop    ebp
c001931b:	56                   	push   esi
c001931c:	53                   	push   ebx
c001931d:	e8 94 ab ff ff       	call   c0013eb6 <Device::setName(char const*)>
c0019322:	58                   	pop    eax
c0019323:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019329:	5a                   	pop    edx
c001932a:	68 d0 bd 02 c0       	push   0xc002bdd0
c001932f:	50                   	push   eax
c0019330:	e8 63 75 fe ff       	call   c0000898 <strcmp>
c0019335:	83 c4 10             	add    esp,0x10
c0019338:	85 c0                	test   eax,eax
c001933a:	0f 85 71 03 00 00    	jne    c00196b1 <CPU::detectFeatures()+0x9e3>
c0019340:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019347:	e9 65 03 00 00       	jmp    c00196b1 <CPU::detectFeatures()+0x9e3>
c001934c:	83 f8 02             	cmp    eax,0x2
c001934f:	0f 85 b5 00 00 00    	jne    c001940a <CPU::detectFeatures()+0x73c>
c0019355:	57                   	push   edi
c0019356:	57                   	push   edi
c0019357:	68 e2 bd 02 c0       	push   0xc002bde2
c001935c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019360:	56                   	push   esi
c0019361:	e8 a6 74 fe ff       	call   c000080c <strcpy>
c0019366:	5d                   	pop    ebp
c0019367:	58                   	pop    eax
c0019368:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001936e:	66 c1 e8 06          	shr    ax,0x6
c0019372:	0f b6 c0             	movzx  eax,al
c0019375:	50                   	push   eax
c0019376:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001937c:	c1 e8 0e             	shr    eax,0xe
c001937f:	0f b6 c0             	movzx  eax,al
c0019382:	50                   	push   eax
c0019383:	e8 90 f2 ff ff       	call   c0018618 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019388:	5a                   	pop    edx
c0019389:	59                   	pop    ecx
c001938a:	50                   	push   eax
c001938b:	56                   	push   esi
c001938c:	e8 bb 75 fe ff       	call   c000094c <strcat>
c0019391:	5f                   	pop    edi
c0019392:	5d                   	pop    ebp
c0019393:	56                   	push   esi
c0019394:	53                   	push   ebx
c0019395:	e8 1c ab ff ff       	call   c0013eb6 <Device::setName(char const*)>
c001939a:	58                   	pop    eax
c001939b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00193a1:	5a                   	pop    edx
c00193a2:	68 e7 bd 02 c0       	push   0xc002bde7
c00193a7:	50                   	push   eax
c00193a8:	e8 eb 74 fe ff       	call   c0000898 <strcmp>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	85 c0                	test   eax,eax
c00193b2:	75 20                	jne    c00193d4 <CPU::detectFeatures()+0x706>
c00193b4:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c00193ba:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00193c0:	a8 01                	test   al,0x1
c00193c2:	74 10                	je     c00193d4 <CPU::detectFeatures()+0x706>
c00193c4:	83 e0 fe             	and    eax,0xfffffffe
c00193c7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00193cd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00193d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193da:	c1 e8 0e             	shr    eax,0xe
c00193dd:	3c 05                	cmp    al,0x5
c00193df:	0f 85 cc 02 00 00    	jne    c00196b1 <CPU::detectFeatures()+0x9e3>
c00193e5:	56                   	push   esi
c00193e6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193ec:	83 e0 0f             	and    eax,0xf
c00193ef:	50                   	push   eax
c00193f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193f6:	66 c1 e8 06          	shr    ax,0x6
c00193fa:	0f b6 c0             	movzx  eax,al
c00193fd:	50                   	push   eax
c00193fe:	6a 05                	push   0x5
c0019400:	e8 89 f6 ff ff       	call   c0018a8e <CPU::AMD_K6_writeback(int, int, int)>
c0019405:	e9 1f 02 00 00       	jmp    c0019629 <CPU::detectFeatures()+0x95b>
c001940a:	8d 50 fd             	lea    edx,[eax-0x3]
c001940d:	83 fa 01             	cmp    edx,0x1
c0019410:	76 09                	jbe    c001941b <CPU::detectFeatures()+0x74d>
c0019412:	83 f8 06             	cmp    eax,0x6
c0019415:	0f 85 91 01 00 00    	jne    c00195ac <CPU::detectFeatures()+0x8de>
c001941b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019421:	c1 ea 0e             	shr    edx,0xe
c0019424:	80 fa 05             	cmp    dl,0x5
c0019427:	75 7b                	jne    c00194a4 <CPU::detectFeatures()+0x7d6>
c0019429:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001942f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019434:	66 81 fa 00 01       	cmp    dx,0x100
c0019439:	75 0c                	jne    c0019447 <CPU::detectFeatures()+0x779>
c001943b:	51                   	push   ecx
c001943c:	51                   	push   ecx
c001943d:	68 ee bd 02 c0       	push   0xc002bdee
c0019442:	e9 dc 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c0019447:	66 81 fa 00 02       	cmp    dx,0x200
c001944c:	75 0c                	jne    c001945a <CPU::detectFeatures()+0x78c>
c001944e:	52                   	push   edx
c001944f:	52                   	push   edx
c0019450:	68 01 be 02 c0       	push   0xc002be01
c0019455:	e9 c9 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001945a:	66 81 fa 40 02       	cmp    dx,0x240
c001945f:	75 0c                	jne    c001946d <CPU::detectFeatures()+0x79f>
c0019461:	50                   	push   eax
c0019462:	50                   	push   eax
c0019463:	68 13 be 02 c0       	push   0xc002be13
c0019468:	e9 b6 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001946d:	83 f8 06             	cmp    eax,0x6
c0019470:	75 0c                	jne    c001947e <CPU::detectFeatures()+0x7b0>
c0019472:	50                   	push   eax
c0019473:	50                   	push   eax
c0019474:	68 25 be 02 c0       	push   0xc002be25
c0019479:	e9 a5 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001947e:	83 f8 04             	cmp    eax,0x4
c0019481:	75 0c                	jne    c001948f <CPU::detectFeatures()+0x7c1>
c0019483:	50                   	push   eax
c0019484:	50                   	push   eax
c0019485:	68 31 be 02 c0       	push   0xc002be31
c001948a:	e9 94 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001948f:	83 f8 03             	cmp    eax,0x3
c0019492:	0f 85 19 02 00 00    	jne    c00196b1 <CPU::detectFeatures()+0x9e3>
c0019498:	50                   	push   eax
c0019499:	50                   	push   eax
c001949a:	68 39 be 02 c0       	push   0xc002be39
c001949f:	e9 7f 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00194a4:	80 fa 06             	cmp    dl,0x6
c00194a7:	0f 85 db 00 00 00    	jne    c0019588 <CPU::detectFeatures()+0x8ba>
c00194ad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194b3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00194b8:	66 81 fa 80 01       	cmp    dx,0x180
c00194bd:	75 0c                	jne    c00194cb <CPU::detectFeatures()+0x7fd>
c00194bf:	50                   	push   eax
c00194c0:	50                   	push   eax
c00194c1:	68 44 be 02 c0       	push   0xc002be44
c00194c6:	e9 58 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00194cb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00194d1:	66 f7 c1 80 ff       	test   cx,0xff80
c00194d6:	75 0c                	jne    c00194e4 <CPU::detectFeatures()+0x816>
c00194d8:	50                   	push   eax
c00194d9:	50                   	push   eax
c00194da:	68 54 be 02 c0       	push   0xc002be54
c00194df:	e9 3f 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00194e4:	66 81 fa 40 02       	cmp    dx,0x240
c00194e9:	75 0c                	jne    c00194f7 <CPU::detectFeatures()+0x829>
c00194eb:	55                   	push   ebp
c00194ec:	55                   	push   ebp
c00194ed:	68 5b be 02 c0       	push   0xc002be5b
c00194f2:	e9 2c 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00194f7:	66 81 fa 80 02       	cmp    dx,0x280
c00194fc:	75 0c                	jne    c001950a <CPU::detectFeatures()+0x83c>
c00194fe:	57                   	push   edi
c00194ff:	57                   	push   edi
c0019500:	68 64 be 02 c0       	push   0xc002be64
c0019505:	e9 19 01 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001950a:	66 81 fa 40 03       	cmp    dx,0x340
c001950f:	74 ed                	je     c00194fe <CPU::detectFeatures()+0x830>
c0019511:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019516:	75 0c                	jne    c0019524 <CPU::detectFeatures()+0x856>
c0019518:	56                   	push   esi
c0019519:	56                   	push   esi
c001951a:	68 6b be 02 c0       	push   0xc002be6b
c001951f:	e9 ff 00 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x955>
c0019524:	83 f8 06             	cmp    eax,0x6
c0019527:	0f 84 45 ff ff ff    	je     c0019472 <CPU::detectFeatures()+0x7a4>
c001952d:	83 f8 04             	cmp    eax,0x4
c0019530:	0f 84 4d ff ff ff    	je     c0019483 <CPU::detectFeatures()+0x7b5>
c0019536:	83 f8 03             	cmp    eax,0x3
c0019539:	0f 85 72 01 00 00    	jne    c00196b1 <CPU::detectFeatures()+0x9e3>
c001953f:	51                   	push   ecx
c0019540:	51                   	push   ecx
c0019541:	68 74 be 02 c0       	push   0xc002be74
c0019546:	53                   	push   ebx
c0019547:	e8 6a a9 ff ff       	call   c0013eb6 <Device::setName(char const*)>
c001954c:	b1 c1                	mov    cl,0xc1
c001954e:	88 c8                	mov    al,cl
c0019550:	e6 22                	out    0x22,al
c0019552:	e4 23                	in     al,0x23
c0019554:	88 c2                	mov    dl,al
c0019556:	88 c8                	mov    al,cl
c0019558:	e6 22                	out    0x22,al
c001955a:	88 d0                	mov    al,dl
c001955c:	83 c8 10             	or     eax,0x10
c001955f:	e6 23                	out    0x23,al
c0019561:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019568:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001956b:	89 d0                	mov    eax,edx
c001956d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019573:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019577:	40                   	inc    eax
c0019578:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001957e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019583:	e9 a1 00 00 00       	jmp    c0019629 <CPU::detectFeatures()+0x95b>
c0019588:	83 f8 06             	cmp    eax,0x6
c001958b:	0f 84 e1 fe ff ff    	je     c0019472 <CPU::detectFeatures()+0x7a4>
c0019591:	83 f8 04             	cmp    eax,0x4
c0019594:	0f 84 e9 fe ff ff    	je     c0019483 <CPU::detectFeatures()+0x7b5>
c001959a:	83 f8 03             	cmp    eax,0x3
c001959d:	0f 85 0e 01 00 00    	jne    c00196b1 <CPU::detectFeatures()+0x9e3>
c00195a3:	52                   	push   edx
c00195a4:	52                   	push   edx
c00195a5:	68 7f be 02 c0       	push   0xc002be7f
c00195aa:	eb 77                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195ac:	83 f8 07             	cmp    eax,0x7
c00195af:	75 09                	jne    c00195ba <CPU::detectFeatures()+0x8ec>
c00195b1:	50                   	push   eax
c00195b2:	50                   	push   eax
c00195b3:	68 89 be 02 c0       	push   0xc002be89
c00195b8:	eb 69                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195ba:	83 f8 0a             	cmp    eax,0xa
c00195bd:	75 09                	jne    c00195c8 <CPU::detectFeatures()+0x8fa>
c00195bf:	50                   	push   eax
c00195c0:	50                   	push   eax
c00195c1:	68 94 be 02 c0       	push   0xc002be94
c00195c6:	eb 5b                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195c8:	83 f8 0b             	cmp    eax,0xb
c00195cb:	75 09                	jne    c00195d6 <CPU::detectFeatures()+0x908>
c00195cd:	50                   	push   eax
c00195ce:	50                   	push   eax
c00195cf:	68 9c be 02 c0       	push   0xc002be9c
c00195d4:	eb 4d                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195d6:	83 f8 08             	cmp    eax,0x8
c00195d9:	75 09                	jne    c00195e4 <CPU::detectFeatures()+0x916>
c00195db:	50                   	push   eax
c00195dc:	50                   	push   eax
c00195dd:	68 a5 be 02 c0       	push   0xc002bea5
c00195e2:	eb 3f                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195e4:	83 f8 09             	cmp    eax,0x9
c00195e7:	75 09                	jne    c00195f2 <CPU::detectFeatures()+0x924>
c00195e9:	50                   	push   eax
c00195ea:	50                   	push   eax
c00195eb:	68 ad be 02 c0       	push   0xc002bead
c00195f0:	eb 31                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c00195f2:	83 f8 05             	cmp    eax,0x5
c00195f5:	75 09                	jne    c0019600 <CPU::detectFeatures()+0x932>
c00195f7:	50                   	push   eax
c00195f8:	50                   	push   eax
c00195f9:	68 b5 be 02 c0       	push   0xc002beb5
c00195fe:	eb 23                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c0019600:	83 f8 0c             	cmp    eax,0xc
c0019603:	75 09                	jne    c001960e <CPU::detectFeatures()+0x940>
c0019605:	55                   	push   ebp
c0019606:	55                   	push   ebp
c0019607:	68 c3 be 02 c0       	push   0xc002bec3
c001960c:	eb 15                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001960e:	83 f8 0d             	cmp    eax,0xd
c0019611:	75 09                	jne    c001961c <CPU::detectFeatures()+0x94e>
c0019613:	57                   	push   edi
c0019614:	57                   	push   edi
c0019615:	68 ce be 02 c0       	push   0xc002bece
c001961a:	eb 07                	jmp    c0019623 <CPU::detectFeatures()+0x955>
c001961c:	56                   	push   esi
c001961d:	56                   	push   esi
c001961e:	68 e2 be 02 c0       	push   0xc002bee2
c0019623:	53                   	push   ebx
c0019624:	e8 8d a8 ff ff       	call   c0013eb6 <Device::setName(char const*)>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	e9 80 00 00 00       	jmp    c00196b1 <CPU::detectFeatures()+0x9e3>
c0019631:	51                   	push   ecx
c0019632:	51                   	push   ecx
c0019633:	68 2e bd 02 c0       	push   0xc002bd2e
c0019638:	55                   	push   ebp
c0019639:	e8 ce 71 fe ff       	call   c000080c <strcpy>
c001963e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019648:	e8 61 6c fe ff       	call   c00002ae <is486>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	85 c0                	test   eax,eax
c0019652:	74 2b                	je     c001967f <CPU::detectFeatures()+0x9b1>
c0019654:	52                   	push   edx
c0019655:	52                   	push   edx
c0019656:	68 ee be 02 c0       	push   0xc002beee
c001965b:	53                   	push   ebx
c001965c:	e8 55 a8 ff ff       	call   c0013eb6 <Device::setName(char const*)>
c0019661:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019668:	0f 20 c0             	mov    eax,cr0
c001966b:	83 e0 14             	and    eax,0x14
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	83 f8 04             	cmp    eax,0x4
c0019674:	75 1f                	jne    c0019695 <CPU::detectFeatures()+0x9c7>
c0019676:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001967d:	eb 32                	jmp    c00196b1 <CPU::detectFeatures()+0x9e3>
c001967f:	50                   	push   eax
c0019680:	50                   	push   eax
c0019681:	68 f9 be 02 c0       	push   0xc002bef9
c0019686:	53                   	push   ebx
c0019687:	e8 2a a8 ff ff       	call   c0013eb6 <Device::setName(char const*)>
c001968c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019693:	eb d3                	jmp    c0019668 <CPU::detectFeatures()+0x99a>
c0019695:	e8 ef 6b fe ff       	call   c0000289 <hasLegacyFPU>
c001969a:	83 e0 01             	and    eax,0x1
c001969d:	8d 14 00             	lea    edx,[eax+eax*1]
c00196a0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00196a6:	83 e0 fd             	and    eax,0xfffffffd
c00196a9:	09 d0                	or     eax,edx
c00196ab:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00196b1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00196b8:	83 c4 4c             	add    esp,0x4c
c00196bb:	5b                   	pop    ebx
c00196bc:	5e                   	pop    esi
c00196bd:	5f                   	pop    edi
c00196be:	5d                   	pop    ebp
c00196bf:	c3                   	ret    

c00196c0 <CPU::setupSMEP()>:
c00196c0:	0f 20 e0             	mov    eax,cr4
c00196c3:	0d 00 00 10 00       	or     eax,0x100000
c00196c8:	0f 22 e0             	mov    cr4,eax
c00196cb:	c3                   	ret    

c00196cc <CPU::setupUMIP()>:
c00196cc:	0f 20 e0             	mov    eax,cr4
c00196cf:	80 cc 08             	or     ah,0x8
c00196d2:	0f 22 e0             	mov    cr4,eax
c00196d5:	c3                   	ret    

c00196d6 <CPU::setupTSC()>:
c00196d6:	0f 20 e0             	mov    eax,cr4
c00196d9:	83 c8 04             	or     eax,0x4
c00196dc:	0f 22 e0             	mov    cr4,eax
c00196df:	c3                   	ret    

c00196e0 <CPU::setupLargePages()>:
c00196e0:	0f 20 e0             	mov    eax,cr4
c00196e3:	83 c8 10             	or     eax,0x10
c00196e6:	0f 22 e0             	mov    cr4,eax
c00196e9:	c3                   	ret    

c00196ea <CPU::setupPAT()>:
c00196ea:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00196ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00196f6:	74 2c                	je     c0019724 <CPU::setupPAT()+0x3a>
c00196f8:	53                   	push   ebx
c00196f9:	83 ec 10             	sub    esp,0x10
c00196fc:	68 77 02 00 00       	push   0x277
c0019701:	50                   	push   eax
c0019702:	e8 7b 56 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019707:	83 e2 f8             	and    edx,0xfffffff8
c001970a:	83 ca 01             	or     edx,0x1
c001970d:	52                   	push   edx
c001970e:	50                   	push   eax
c001970f:	68 77 02 00 00       	push   0x277
c0019714:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c001971a:	e8 8f 56 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c001971f:	83 c4 28             	add    esp,0x28
c0019722:	5b                   	pop    ebx
c0019723:	c3                   	ret    
c0019724:	c3                   	ret    
c0019725:	90                   	nop

c0019726 <CPU::setupMTRR()>:
c0019726:	c3                   	ret    
c0019727:	90                   	nop

c0019728 <CPU::setupGlobalPages()>:
c0019728:	0f 20 e0             	mov    eax,cr4
c001972b:	0c 80                	or     al,0x80
c001972d:	0f 22 e0             	mov    cr4,eax
c0019730:	c3                   	ret    
c0019731:	90                   	nop

c0019732 <CPU::allowUsermodeDataAccess()>:
c0019732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019736:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001973d:	74 03                	je     c0019742 <CPU::allowUsermodeDataAccess()+0x10>
c001973f:	0f 01 cb             	stac   
c0019742:	c3                   	ret    
c0019743:	90                   	nop

c0019744 <CPU::prohibitUsermodeDataAccess()>:
c0019744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019748:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001974f:	74 03                	je     c0019754 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019751:	0f 01 ca             	clac   
c0019754:	c3                   	ret    
c0019755:	90                   	nop

c0019756 <CPU::setupSMAP()>:
c0019756:	0f 20 e0             	mov    eax,cr4
c0019759:	0d 00 00 20 00       	or     eax,0x200000
c001975e:	0f 22 e0             	mov    cr4,eax
c0019761:	eb e1                	jmp    c0019744 <CPU::prohibitUsermodeDataAccess()>
c0019763:	90                   	nop

c0019764 <CPU::setupFeatures()>:
c0019764:	83 ec 0c             	sub    esp,0xc
c0019767:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001976b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019772:	74 07                	je     c001977b <CPU::setupFeatures()+0x17>
c0019774:	52                   	push   edx
c0019775:	e8 46 ff ff ff       	call   c00196c0 <CPU::setupSMEP()>
c001977a:	58                   	pop    eax
c001977b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019782:	74 07                	je     c001978b <CPU::setupFeatures()+0x27>
c0019784:	52                   	push   edx
c0019785:	e8 cc ff ff ff       	call   c0019756 <CPU::setupSMAP()>
c001978a:	58                   	pop    eax
c001978b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019792:	74 07                	je     c001979b <CPU::setupFeatures()+0x37>
c0019794:	52                   	push   edx
c0019795:	e8 32 ff ff ff       	call   c00196cc <CPU::setupUMIP()>
c001979a:	58                   	pop    eax
c001979b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00197a2:	74 07                	je     c00197ab <CPU::setupFeatures()+0x47>
c00197a4:	52                   	push   edx
c00197a5:	e8 2c ff ff ff       	call   c00196d6 <CPU::setupTSC()>
c00197aa:	58                   	pop    eax
c00197ab:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00197b2:	74 07                	je     c00197bb <CPU::setupFeatures()+0x57>
c00197b4:	52                   	push   edx
c00197b5:	e8 26 ff ff ff       	call   c00196e0 <CPU::setupLargePages()>
c00197ba:	59                   	pop    ecx
c00197bb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00197c2:	74 07                	je     c00197cb <CPU::setupFeatures()+0x67>
c00197c4:	52                   	push   edx
c00197c5:	e8 5e ff ff ff       	call   c0019728 <CPU::setupGlobalPages()>
c00197ca:	58                   	pop    eax
c00197cb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00197d2:	74 0c                	je     c00197e0 <CPU::setupFeatures()+0x7c>
c00197d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197d8:	83 c4 0c             	add    esp,0xc
c00197db:	e9 0a ff ff ff       	jmp    c00196ea <CPU::setupPAT()>
c00197e0:	83 c4 0c             	add    esp,0xc
c00197e3:	c3                   	ret    

c00197e4 <CPU::open(int, int, void*)>:
c00197e4:	57                   	push   edi
c00197e5:	56                   	push   esi
c00197e6:	53                   	push   ebx
c00197e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197ef:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00197f5:	83 ec 0c             	sub    esp,0xc
c00197f8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00197fe:	68 04 bf 02 c0       	push   0xc002bf04
c0019803:	e8 6d 60 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019808:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001980e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019811:	e8 04 59 ff ff       	call   c000f11a <GDT::setup()>
c0019816:	c7 04 24 16 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf16
c001981d:	e8 53 60 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019822:	83 c4 0c             	add    esp,0xc
c0019825:	6a 00                	push   0x0
c0019827:	68 ef be ad de       	push   0xdeadbeef
c001982c:	57                   	push   edi
c001982d:	e8 f6 75 ff ff       	call   c0010e28 <TSS::setup(unsigned long, unsigned long)>
c0019832:	c7 04 24 28 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf28
c0019839:	e8 37 60 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c001983e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019841:	e8 c2 75 ff ff       	call   c0010e08 <TSS::flush()>
c0019846:	c7 04 24 3c bf 02 c0 	mov    DWORD PTR [esp],0xc002bf3c
c001984d:	e8 23 60 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019852:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019858:	89 04 24             	mov    DWORD PTR [esp],eax
c001985b:	e8 1e 5b ff ff       	call   c000f37e <IDT::setup()>
c0019860:	c7 04 24 4e bf 02 c0 	mov    DWORD PTR [esp],0xc002bf4e
c0019867:	e8 09 60 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c001986c:	b8 00 04 00 00       	mov    eax,0x400
c0019871:	0f 23 f8             	mov    db7,eax
c0019874:	c7 04 24 6c bf 02 c0 	mov    DWORD PTR [esp],0xc002bf6c
c001987b:	e8 f5 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019880:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001988a:	e8 88 63 ff ff       	call   c000fc17 <Phys::allocatePage()>
c001988f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019895:	89 30                	mov    DWORD PTR [eax],esi
c0019897:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001989d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00198a0:	c7 04 24 8e bf 02 c0 	mov    DWORD PTR [esp],0xc002bf8e
c00198a7:	e8 c9 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00198ac:	58                   	pop    eax
c00198ad:	5a                   	pop    edx
c00198ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198b8:	e8 65 85 ff ff       	call   c0011e22 <VAS::setCPUSpecific(unsigned long)>
c00198bd:	c7 04 24 b6 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfb6
c00198c4:	e8 ac 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00198c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198cc:	e8 fd f3 ff ff       	call   c0018cce <CPU::detectFeatures()>
c00198d1:	c7 04 24 d9 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfd9
c00198d8:	e8 98 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00198dd:	e8 2e ba ff ff       	call   c0015310 <setupInterruptController()>
c00198e2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00198e8:	c7 04 24 fd bf 02 c0 	mov    DWORD PTR [esp],0xc002bffd
c00198ef:	e8 81 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c00198f4:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c00198f9:	83 e0 10             	and    eax,0x10
c00198fc:	83 f8 01             	cmp    eax,0x1
c00198ff:	19 c0                	sbb    eax,eax
c0019901:	83 e0 46             	and    eax,0x46
c0019904:	83 c0 1e             	add    eax,0x1e
c0019907:	89 04 24             	mov    DWORD PTR [esp],eax
c001990a:	e8 ee cf ff ff       	call   c00168fd <setupTimer(int)>
c001990f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019915:	c7 04 24 18 c0 02 c0 	mov    DWORD PTR [esp],0xc002c018
c001991c:	e8 54 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019924:	e8 3b fe ff ff       	call   c0019764 <CPU::setupFeatures()>
c0019929:	c7 04 24 33 c0 02 c0 	mov    DWORD PTR [esp],0xc002c033
c0019930:	e8 40 5f ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	31 c0                	xor    eax,eax
c001993a:	5b                   	pop    ebx
c001993b:	5e                   	pop    esi
c001993c:	5f                   	pop    edi
c001993d:	c3                   	ret    

c001993e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001993e:	57                   	push   edi
c001993f:	56                   	push   esi
c0019940:	53                   	push   ebx
c0019941:	51                   	push   ecx
c0019942:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019946:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019949:	0f 02 c0             	lar    eax,ax
c001994c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001994f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019953:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019956:	88 ca                	mov    dl,cl
c0019958:	c0 ea 06             	shr    dl,0x6
c001995b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001995f:	89 ca                	mov    edx,ecx
c0019961:	66 c1 ea 03          	shr    dx,0x3
c0019965:	83 e2 07             	and    edx,0x7
c0019968:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001996d:	88 17                	mov    BYTE PTR [edi],dl
c001996f:	0f 84 a6 01 00 00    	je     c0019b1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019975:	83 e1 07             	and    ecx,0x7
c0019978:	80 f9 04             	cmp    cl,0x4
c001997b:	0f 84 98 00 00 00    	je     c0019a19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019981:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019986:	0f 95 c0             	setne  al
c0019989:	80 f9 05             	cmp    cl,0x5
c001998c:	0f 95 c2             	setne  dl
c001998f:	08 c2                	or     dl,al
c0019991:	74 79                	je     c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019993:	84 c9                	test   cl,cl
c0019995:	75 05                	jne    c001999c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019997:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001999a:	eb 3c                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001999c:	80 f9 01             	cmp    cl,0x1
c001999f:	75 05                	jne    c00199a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00199a1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00199a4:	eb 32                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199a6:	80 f9 02             	cmp    cl,0x2
c00199a9:	75 05                	jne    c00199b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00199ab:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00199ae:	eb 28                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199b0:	31 c0                	xor    eax,eax
c00199b2:	80 f9 03             	cmp    cl,0x3
c00199b5:	75 05                	jne    c00199bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00199b7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00199ba:	eb 1c                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199bc:	80 f9 05             	cmp    cl,0x5
c00199bf:	75 05                	jne    c00199c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00199c1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199c4:	eb 12                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199c6:	80 f9 06             	cmp    cl,0x6
c00199c9:	75 05                	jne    c00199d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00199cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199ce:	eb 08                	jmp    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199d0:	80 f9 07             	cmp    cl,0x7
c00199d3:	75 03                	jne    c00199d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199d5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199d8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199dd:	75 10                	jne    c00199ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00199df:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00199e3:	b9 03 00 00 00       	mov    ecx,0x3
c00199e8:	01 d0                	add    eax,edx
c00199ea:	e9 37 01 00 00       	jmp    c0019b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199ef:	b9 02 00 00 00       	mov    ecx,0x2
c00199f4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00199f9:	0f 85 27 01 00 00    	jne    c0019b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199ff:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019a02:	b9 06 00 00 00       	mov    ecx,0x6
c0019a07:	e9 1a 01 00 00       	jmp    c0019b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a0c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019a0f:	b9 06 00 00 00       	mov    ecx,0x6
c0019a14:	e9 0f 01 00 00       	jmp    c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a19:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019a1c:	88 ca                	mov    dl,cl
c0019a1e:	c0 ea 06             	shr    dl,0x6
c0019a21:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019a25:	89 ca                	mov    edx,ecx
c0019a27:	66 c1 ea 03          	shr    dx,0x3
c0019a2b:	83 e2 07             	and    edx,0x7
c0019a2e:	80 e1 07             	and    cl,0x7
c0019a31:	75 05                	jne    c0019a38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019a33:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019a36:	eb 4c                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a38:	80 f9 01             	cmp    cl,0x1
c0019a3b:	75 05                	jne    c0019a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019a3d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019a40:	eb 42                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a42:	80 f9 02             	cmp    cl,0x2
c0019a45:	75 05                	jne    c0019a4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019a47:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019a4a:	eb 38                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a4c:	80 f9 03             	cmp    cl,0x3
c0019a4f:	75 05                	jne    c0019a56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a51:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a54:	eb 2e                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a56:	80 f9 04             	cmp    cl,0x4
c0019a59:	75 12                	jne    c0019a6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a5b:	f6 c4 60             	test   ah,0x60
c0019a5e:	75 08                	jne    c0019a68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019a60:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019a63:	8d 78 14             	lea    edi,[eax+0x14]
c0019a66:	eb 1c                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a68:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019a6b:	eb 17                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a6d:	80 f9 05             	cmp    cl,0x5
c0019a70:	75 05                	jne    c0019a77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019a72:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019a75:	eb 0d                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a77:	80 f9 06             	cmp    cl,0x6
c0019a7a:	75 05                	jne    c0019a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019a7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019a7f:	eb 03                	jmp    c0019a84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a81:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019a84:	84 d2                	test   dl,dl
c0019a86:	75 05                	jne    c0019a8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019a88:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a8b:	eb 3c                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a8d:	80 fa 01             	cmp    dl,0x1
c0019a90:	75 05                	jne    c0019a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a92:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a95:	eb 32                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a97:	80 fa 02             	cmp    dl,0x2
c0019a9a:	75 05                	jne    c0019aa1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a9c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a9f:	eb 28                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019aa1:	80 fa 03             	cmp    dl,0x3
c0019aa4:	75 05                	jne    c0019aab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019aa6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019aa9:	eb 1e                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019aab:	31 c0                	xor    eax,eax
c0019aad:	80 fa 04             	cmp    dl,0x4
c0019ab0:	74 17                	je     c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ab2:	80 fa 05             	cmp    dl,0x5
c0019ab5:	75 05                	jne    c0019abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ab7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019aba:	eb 0d                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019abc:	80 fa 06             	cmp    dl,0x6
c0019abf:	75 05                	jne    c0019ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ac1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ac4:	eb 03                	jmp    c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ac6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ac9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ace:	0f 94 c2             	sete   dl
c0019ad1:	80 f9 05             	cmp    cl,0x5
c0019ad4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ad8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019add:	d3 e0                	shl    eax,cl
c0019adf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ae3:	74 0a                	je     c0019aef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ae5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ae8:	b9 07 00 00 00       	mov    ecx,0x7
c0019aed:	eb 37                	jmp    c0019b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aef:	01 f8                	add    eax,edi
c0019af1:	b9 03 00 00 00       	mov    ecx,0x3
c0019af6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019afb:	74 2b                	je     c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019afd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b02:	75 0d                	jne    c0019b11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019b04:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019b08:	01 c8                	add    eax,ecx
c0019b0a:	b9 04 00 00 00       	mov    ecx,0x4
c0019b0f:	eb 17                	jmp    c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b11:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b14:	b9 07 00 00 00       	mov    ecx,0x7
c0019b19:	eb 0d                	jmp    c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b1b:	b9 02 00 00 00       	mov    ecx,0x2
c0019b20:	b2 01                	mov    dl,0x1
c0019b22:	31 c0                	xor    eax,eax
c0019b24:	eb 02                	jmp    c0019b28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b26:	31 d2                	xor    edx,edx
c0019b28:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b2c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019b2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b32:	88 11                	mov    BYTE PTR [ecx],dl
c0019b34:	5a                   	pop    edx
c0019b35:	5b                   	pop    ebx
c0019b36:	5e                   	pop    esi
c0019b37:	5f                   	pop    edi
c0019b38:	c3                   	ret    

c0019b39 <Krnl::smpEntry()>:
c0019b39:	eb fe                	jmp    c0019b39 <Krnl::smpEntry()>

c0019b3b <Krnl::startCPU(int)>:
c0019b3b:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0019b40:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b47:	0f 84 36 01 00 00    	je     c0019c83 <Krnl::startCPU(int)+0x148>
c0019b4d:	53                   	push   ebx
c0019b4e:	83 ec 10             	sub    esp,0x10
c0019b51:	fa                   	cli    
c0019b52:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c0019b58:	6a 1b                	push   0x1b
c0019b5a:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c0019b60:	e8 1d 52 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019b65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019b6a:	89 c3                	mov    ebx,eax
c0019b6c:	58                   	pop    eax
c0019b6d:	5a                   	pop    edx
c0019b6e:	53                   	push   ebx
c0019b6f:	68 7c c0 02 c0       	push   0xc002c07c
c0019b74:	e8 03 8d ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0019b79:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b91:	c1 e0 18             	shl    eax,0x18
c0019b94:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b9a:	83 c4 10             	add    esp,0x10
c0019b9d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ba3:	09 c2                	or     edx,eax
c0019ba5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019bab:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019bb1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bb7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bbd:	80 cd c5             	or     ch,0xc5
c0019bc0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bc6:	f3 90                	pause  
c0019bc8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bca:	0f ba e1 0c          	bt     ecx,0xc
c0019bce:	72 f6                	jb     c0019bc6 <Krnl::startCPU(int)+0x8b>
c0019bd0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bd6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019bdc:	09 c1                	or     ecx,eax
c0019bde:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019be4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bea:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bf0:	80 cd 85             	or     ch,0x85
c0019bf3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bf9:	f3 90                	pause  
c0019bfb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bfd:	0f ba e1 0c          	bt     ecx,0xc
c0019c01:	72 f6                	jb     c0019bf9 <Krnl::startCPU(int)+0xbe>
c0019c03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c0d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c13:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c19:	09 c1                	or     ecx,eax
c0019c1b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c21:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c27:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019c2d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019c33:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c39:	f3 90                	pause  
c0019c3b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c3d:	0f ba e1 0c          	bt     ecx,0xc
c0019c41:	72 f6                	jb     c0019c39 <Krnl::startCPU(int)+0xfe>
c0019c43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c4d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c53:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c59:	09 c8                	or     eax,ecx
c0019c5b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019c61:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019c67:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019c6c:	0d 02 06 00 00       	or     eax,0x602
c0019c71:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019c77:	f3 90                	pause  
c0019c79:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c7b:	0f ba e0 0c          	bt     eax,0xc
c0019c7f:	72 f6                	jb     c0019c77 <Krnl::startCPU(int)+0x13c>
c0019c81:	eb fe                	jmp    c0019c81 <Krnl::startCPU(int)+0x146>
c0019c83:	c3                   	ret    

c0019c84 <Krnl::startCPUs()>:
c0019c84:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0019c89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c8f:	88 c2                	mov    dl,al
c0019c91:	83 e2 0a             	and    edx,0xa
c0019c94:	80 fa 0a             	cmp    dl,0xa
c0019c97:	75 09                	jne    c0019ca2 <Krnl::startCPUs()+0x1e>
c0019c99:	a8 01                	test   al,0x1
c0019c9b:	74 05                	je     c0019ca2 <Krnl::startCPUs()+0x1e>
c0019c9d:	e9 f9 64 fe ff       	jmp    c000019b <prepareTramp>
c0019ca2:	c3                   	ret    
c0019ca3:	90                   	nop

c0019ca4 <EnvVarContainer::getEnv(char const*)>:
c0019ca4:	57                   	push   edi
c0019ca5:	56                   	push   esi
c0019ca6:	53                   	push   ebx
c0019ca7:	31 db                	xor    ebx,ebx
c0019ca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cad:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019caf:	7e 2b                	jle    c0019cdc <EnvVarContainer::getEnv(char const*)+0x38>
c0019cb1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019cb8:	50                   	push   eax
c0019cb9:	50                   	push   eax
c0019cba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cbd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019cc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019cc4:	e8 cf 6b fe ff       	call   c0000898 <strcmp>
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	85 c0                	test   eax,eax
c0019cce:	75 09                	jne    c0019cd9 <EnvVarContainer::getEnv(char const*)+0x35>
c0019cd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cd3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019cd7:	eb 05                	jmp    c0019cde <EnvVarContainer::getEnv(char const*)+0x3a>
c0019cd9:	43                   	inc    ebx
c0019cda:	eb d1                	jmp    c0019cad <EnvVarContainer::getEnv(char const*)+0x9>
c0019cdc:	31 c0                	xor    eax,eax
c0019cde:	5b                   	pop    ebx
c0019cdf:	5e                   	pop    esi
c0019ce0:	5f                   	pop    edi
c0019ce1:	c3                   	ret    

c0019ce2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ce2:	55                   	push   ebp
c0019ce3:	57                   	push   edi
c0019ce4:	56                   	push   esi
c0019ce5:	53                   	push   ebx
c0019ce6:	83 ec 28             	sub    esp,0x28
c0019ce9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019ced:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019cf1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019cf5:	56                   	push   esi
c0019cf6:	e8 71 6a fe ff       	call   c000076c <strlen>
c0019cfb:	40                   	inc    eax
c0019cfc:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cff:	e8 17 5b ff ff       	call   c000f81b <malloc>
c0019d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d0b:	e8 5c 6a fe ff       	call   c000076c <strlen>
c0019d10:	40                   	inc    eax
c0019d11:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d14:	e8 02 5b ff ff       	call   c000f81b <malloc>
c0019d19:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d20:	e8 47 6a fe ff       	call   c000076c <strlen>
c0019d25:	83 c4 0c             	add    esp,0xc
c0019d28:	40                   	inc    eax
c0019d29:	50                   	push   eax
c0019d2a:	6a 00                	push   0x0
c0019d2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d30:	e8 1b 6a fe ff       	call   c0000750 <memset>
c0019d35:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d38:	e8 2f 6a fe ff       	call   c000076c <strlen>
c0019d3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019d41:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d49:	89 de                	mov    esi,ebx
c0019d4b:	e8 1c 6a fe ff       	call   c000076c <strlen>
c0019d50:	83 c4 0c             	add    esp,0xc
c0019d53:	40                   	inc    eax
c0019d54:	50                   	push   eax
c0019d55:	6a 00                	push   0x0
c0019d57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d5b:	e8 f0 69 fe ff       	call   c0000750 <memset>
c0019d60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d63:	e8 04 6a fe ff       	call   c000076c <strlen>
c0019d68:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d6c:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d74:	40                   	inc    eax
c0019d75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019d78:	c1 e0 03             	shl    eax,0x3
c0019d7b:	5a                   	pop    edx
c0019d7c:	59                   	pop    ecx
c0019d7d:	50                   	push   eax
c0019d7e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d81:	e8 81 5a ff ff       	call   c000f807 <realloc>
c0019d86:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019d8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d8d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019d90:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019d94:	b9 08 00 00 00       	mov    ecx,0x8
c0019d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d9b:	83 c4 2c             	add    esp,0x2c
c0019d9e:	5b                   	pop    ebx
c0019d9f:	5e                   	pop    esi
c0019da0:	5f                   	pop    edi
c0019da1:	5d                   	pop    ebp
c0019da2:	c3                   	ret    
c0019da3:	90                   	nop

c0019da4 <EnvVarContainer::deleteEnv(char const*)>:
c0019da4:	c3                   	ret    
c0019da5:	90                   	nop

c0019da6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019da6:	55                   	push   ebp
c0019da7:	57                   	push   edi
c0019da8:	56                   	push   esi
c0019da9:	53                   	push   ebx
c0019daa:	81 ec 38 01 00 00    	sub    esp,0x138
c0019db0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019db7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019dbe:	68 14 01 00 00       	push   0x114
c0019dc3:	e8 53 5a ff ff       	call   c000f81b <malloc>
c0019dc8:	83 c4 0c             	add    esp,0xc
c0019dcb:	89 c3                	mov    ebx,eax
c0019dcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019dd0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019dd7:	50                   	push   eax
c0019dd8:	e8 09 90 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c0019ddd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019de0:	e8 d3 92 ff ff       	call   c00130b8 <File::exists()>
c0019de5:	83 c4 10             	add    esp,0x10
c0019de8:	84 c0                	test   al,al
c0019dea:	75 31                	jne    c0019e1d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019dec:	50                   	push   eax
c0019ded:	50                   	push   eax
c0019dee:	6a 12                	push   0x12
c0019df0:	53                   	push   ebx
c0019df1:	e8 54 90 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c0019df6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019df8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019dfb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dfe:	e8 69 69 fe ff       	call   c000076c <strlen>
c0019e03:	5a                   	pop    edx
c0019e04:	31 d2                	xor    edx,edx
c0019e06:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e0a:	51                   	push   ecx
c0019e0b:	56                   	push   esi
c0019e0c:	52                   	push   edx
c0019e0d:	50                   	push   eax
c0019e0e:	53                   	push   ebx
c0019e0f:	ff d7                	call   edi
c0019e11:	83 c4 14             	add    esp,0x14
c0019e14:	53                   	push   ebx
c0019e15:	e8 8e 90 ff ff       	call   c0012ea8 <File::close()>
c0019e1a:	83 c4 10             	add    esp,0x10
c0019e1d:	56                   	push   esi
c0019e1e:	31 f6                	xor    esi,esi
c0019e20:	68 00 01 00 00       	push   0x100
c0019e25:	6a 00                	push   0x0
c0019e27:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019e2b:	50                   	push   eax
c0019e2c:	e8 1f 69 fe ff       	call   c0000750 <memset>
c0019e31:	5f                   	pop    edi
c0019e32:	58                   	pop    eax
c0019e33:	6a 01                	push   0x1
c0019e35:	53                   	push   ebx
c0019e36:	e8 0f 90 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c0019e3b:	83 c4 10             	add    esp,0x10
c0019e3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e46:	83 ec 0c             	sub    esp,0xc
c0019e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e4b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e4f:	51                   	push   ecx
c0019e50:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e54:	52                   	push   edx
c0019e55:	6a 00                	push   0x0
c0019e57:	6a 01                	push   0x1
c0019e59:	53                   	push   ebx
c0019e5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e5d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e61:	83 c4 20             	add    esp,0x20
c0019e64:	3c 0d                	cmp    al,0xd
c0019e66:	0f 84 09 01 00 00    	je     c0019f75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019e6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e71:	0f 84 ef 00 00 00    	je     c0019f66 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e77:	3c 0a                	cmp    al,0xa
c0019e79:	74 13                	je     c0019e8e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e80:	74 0c                	je     c0019e8e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e82:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019e88:	0f 8e d8 00 00 00    	jle    c0019f66 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	8d 78 01             	lea    edi,[eax+0x1]
c0019e98:	57                   	push   edi
c0019e99:	e8 7d 59 ff ff       	call   c000f81b <malloc>
c0019e9e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ea2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ea6:	8d 56 04             	lea    edx,[esi+0x4]
c0019ea9:	89 14 24             	mov    DWORD PTR [esp],edx
c0019eac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019eb0:	e8 66 59 ff ff       	call   c000f81b <malloc>
c0019eb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019eb9:	83 c4 0c             	add    esp,0xc
c0019ebc:	57                   	push   edi
c0019ebd:	6a 00                	push   0x0
c0019ebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ec3:	e8 88 68 fe ff       	call   c0000750 <memset>
c0019ec8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ecc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ed0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ed4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ed6:	83 c4 0c             	add    esp,0xc
c0019ed9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019edd:	52                   	push   edx
c0019ede:	6a 00                	push   0x0
c0019ee0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ee4:	e8 67 68 fe ff       	call   c0000750 <memset>
c0019ee9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019eed:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019ef1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ef4:	e8 73 68 fe ff       	call   c000076c <strlen>
c0019ef9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019efd:	89 c1                	mov    ecx,eax
c0019eff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f04:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019f07:	40                   	inc    eax
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019f0e:	85 d2                	test   edx,edx
c0019f10:	75 0c                	jne    c0019f1e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019f12:	83 ec 0c             	sub    esp,0xc
c0019f15:	6a 08                	push   0x8
c0019f17:	e8 ff 58 ff ff       	call   c000f81b <malloc>
c0019f1c:	eb 0c                	jmp    c0019f2a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019f1e:	c1 e0 03             	shl    eax,0x3
c0019f21:	51                   	push   ecx
c0019f22:	51                   	push   ecx
c0019f23:	50                   	push   eax
c0019f24:	52                   	push   edx
c0019f25:	e8 dd 58 ff ff       	call   c000f807 <realloc>
c0019f2a:	83 c4 10             	add    esp,0x10
c0019f2d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f33:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019f36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f3a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f3e:	b9 08 00 00 00       	mov    ecx,0x8
c0019f43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f45:	31 f6                	xor    esi,esi
c0019f47:	50                   	push   eax
c0019f48:	68 00 01 00 00       	push   0x100
c0019f4d:	6a 00                	push   0x0
c0019f4f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f53:	50                   	push   eax
c0019f54:	e8 f7 67 fe ff       	call   c0000750 <memset>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f64:	eb 0f                	jmp    c0019f75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f66:	3c 3d                	cmp    al,0x3d
c0019f68:	74 07                	je     c0019f71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019f6a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019f6e:	46                   	inc    esi
c0019f6f:	eb 04                	jmp    c0019f75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f71:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019f75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f7a:	0f 85 c6 fe ff ff    	jne    c0019e46 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019f80:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019f86:	5b                   	pop    ebx
c0019f87:	5e                   	pop    esi
c0019f88:	5f                   	pop    edi
c0019f89:	5d                   	pop    ebp
c0019f8a:	c3                   	ret    
c0019f8b:	90                   	nop

c0019f8c <EnvVarContainer::__loadSystem()>:
c0019f8c:	83 ec 10             	sub    esp,0x10
c0019f8f:	68 00 da 02 c0       	push   0xc002da00
c0019f94:	68 8d c0 02 c0       	push   0xc002c08d
c0019f99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f9d:	e8 04 fe ff ff       	call   c0019da6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019fa2:	83 c4 1c             	add    esp,0x1c
c0019fa5:	c3                   	ret    

c0019fa6 <EnvVarContainer::__loadUser()>:
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019fbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019fc8:	90                   	nop
c0019fc9:	c3                   	ret    

c0019fca <EnvVarContainer::~EnvVarContainer()>:
c0019fca:	83 ec 0c             	sub    esp,0xc
c0019fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fd4:	85 c0                	test   eax,eax
c0019fd6:	74 1d                	je     c0019ff5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fde:	85 c0                	test   eax,eax
c0019fe0:	74 13                	je     c0019ff5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fe9:	83 ec 0c             	sub    esp,0xc
c0019fec:	50                   	push   eax
c0019fed:	e8 39 58 ff ff       	call   c000f82b <free>
c0019ff2:	83 c4 10             	add    esp,0x10
c0019ff5:	90                   	nop
c0019ff6:	83 c4 0c             	add    esp,0xc
c0019ff9:	c3                   	ret    

c0019ffa <Krnl::getEnv(Process*, char const*)>:
c0019ffa:	53                   	push   ebx
c0019ffb:	83 ec 08             	sub    esp,0x8
c0019ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a002:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a006:	39 05 f0 f9 02 c0    	cmp    DWORD PTR ds:0xc002f9f0,eax
c001a00c:	74 04                	je     c001a012 <Krnl::getEnv(Process*, char const*)+0x18>
c001a00e:	85 c0                	test   eax,eax
c001a010:	75 0b                	jne    c001a01d <Krnl::getEnv(Process*, char const*)+0x23>
c001a012:	a1 d4 ef 02 c0       	mov    eax,ds:0xc002efd4
c001a017:	85 c0                	test   eax,eax
c001a019:	75 19                	jne    c001a034 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a01b:	eb 27                	jmp    c001a044 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a01d:	52                   	push   edx
c001a01e:	52                   	push   edx
c001a01f:	53                   	push   ebx
c001a020:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a026:	e8 79 fc ff ff       	call   c0019ca4 <EnvVarContainer::getEnv(char const*)>
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	85 c0                	test   eax,eax
c001a030:	75 28                	jne    c001a05a <Krnl::getEnv(Process*, char const*)+0x60>
c001a032:	eb de                	jmp    c001a012 <Krnl::getEnv(Process*, char const*)+0x18>
c001a034:	52                   	push   edx
c001a035:	52                   	push   edx
c001a036:	53                   	push   ebx
c001a037:	50                   	push   eax
c001a038:	e8 67 fc ff ff       	call   c0019ca4 <EnvVarContainer::getEnv(char const*)>
c001a03d:	83 c4 10             	add    esp,0x10
c001a040:	85 c0                	test   eax,eax
c001a042:	75 16                	jne    c001a05a <Krnl::getEnv(Process*, char const*)+0x60>
c001a044:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a048:	a1 d8 ef 02 c0       	mov    eax,ds:0xc002efd8
c001a04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a051:	83 c4 08             	add    esp,0x8
c001a054:	5b                   	pop    ebx
c001a055:	e9 4a fc ff ff       	jmp    c0019ca4 <EnvVarContainer::getEnv(char const*)>
c001a05a:	83 c4 08             	add    esp,0x8
c001a05d:	5b                   	pop    ebx
c001a05e:	c3                   	ret    

c001a05f <Krnl::setEnvSystem(char const*, char const*)>:
c001a05f:	83 ec 10             	sub    esp,0x10
c001a062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a066:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a06a:	ff 35 d8 ef 02 c0    	push   DWORD PTR ds:0xc002efd8
c001a070:	e8 6d fc ff ff       	call   c0019ce2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a075:	83 c4 1c             	add    esp,0x1c
c001a078:	c3                   	ret    

c001a079 <Krnl::setEnvUser(char const*, char const*)>:
c001a079:	a1 d4 ef 02 c0       	mov    eax,ds:0xc002efd4
c001a07e:	85 c0                	test   eax,eax
c001a080:	74 15                	je     c001a097 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a082:	83 ec 10             	sub    esp,0x10
c001a085:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a089:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a08d:	50                   	push   eax
c001a08e:	e8 4f fc ff ff       	call   c0019ce2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a093:	83 c4 1c             	add    esp,0x1c
c001a096:	c3                   	ret    
c001a097:	c3                   	ret    

c001a098 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a09c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a0a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0a6:	e9 37 fc ff ff       	jmp    c0019ce2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a0ab <Krnl::deleteEnvSystem(char const*)>:
c001a0ab:	c3                   	ret    

c001a0ac <Krnl::deleteEnvUser(char const*)>:
c001a0ac:	c3                   	ret    

c001a0ad <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a0ad:	c3                   	ret    

c001a0ae <Krnl::newProcessEnv(Process*)>:
c001a0ae:	83 ec 28             	sub    esp,0x28
c001a0b1:	6a 0c                	push   0xc
c001a0b3:	e8 63 57 ff ff       	call   c000f81b <malloc>
c001a0b8:	5a                   	pop    edx
c001a0b9:	59                   	pop    ecx
c001a0ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0be:	50                   	push   eax
c001a0bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0c3:	e8 e0 fe ff ff       	call   c0019fa8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0cc:	83 c4 2c             	add    esp,0x2c
c001a0cf:	c3                   	ret    

c001a0d0 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a0d0:	57                   	push   edi
c001a0d1:	56                   	push   esi
c001a0d2:	53                   	push   ebx
c001a0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d7:	83 ec 0c             	sub    esp,0xc
c001a0da:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a0e0:	6a 0c                	push   0xc
c001a0e2:	e8 34 57 ff ff       	call   c000f81b <malloc>
c001a0e7:	89 c3                	mov    ebx,eax
c001a0e9:	58                   	pop    eax
c001a0ea:	5a                   	pop    edx
c001a0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0ef:	53                   	push   ebx
c001a0f0:	e8 b3 fe ff ff       	call   c0019fa8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0f5:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0f7:	89 03                	mov    DWORD PTR [ebx],eax
c001a0f9:	c1 e0 03             	shl    eax,0x3
c001a0fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ff:	e8 17 57 ff ff       	call   c000f81b <malloc>
c001a104:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a107:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a109:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a10c:	c1 e1 03             	shl    ecx,0x3
c001a10f:	89 c7                	mov    edi,eax
c001a111:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	89 d8                	mov    eax,ebx
c001a118:	5b                   	pop    ebx
c001a119:	5e                   	pop    esi
c001a11a:	5f                   	pop    edi
c001a11b:	c3                   	ret    

c001a11c <Krnl::loadSystemEnv()>:
c001a11c:	53                   	push   ebx
c001a11d:	83 ec 14             	sub    esp,0x14
c001a120:	6a 0c                	push   0xc
c001a122:	e8 f4 56 ff ff       	call   c000f81b <malloc>
c001a127:	89 c3                	mov    ebx,eax
c001a129:	58                   	pop    eax
c001a12a:	5a                   	pop    edx
c001a12b:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001a131:	53                   	push   ebx
c001a132:	e8 71 fe ff ff       	call   c0019fa8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a13a:	89 1d d8 ef 02 c0    	mov    DWORD PTR ds:0xc002efd8,ebx
c001a140:	e8 47 fe ff ff       	call   c0019f8c <EnvVarContainer::__loadSystem()>
c001a145:	83 c4 18             	add    esp,0x18
c001a148:	5b                   	pop    ebx
c001a149:	c3                   	ret    

c001a14a <Krnl::loadUserEnv()>:
c001a14a:	53                   	push   ebx
c001a14b:	83 ec 14             	sub    esp,0x14
c001a14e:	6a 0c                	push   0xc
c001a150:	e8 c6 56 ff ff       	call   c000f81b <malloc>
c001a155:	89 c3                	mov    ebx,eax
c001a157:	58                   	pop    eax
c001a158:	5a                   	pop    edx
c001a159:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001a15f:	53                   	push   ebx
c001a160:	e8 43 fe ff ff       	call   c0019fa8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a165:	89 1d d4 ef 02 c0    	mov    DWORD PTR ds:0xc002efd4,ebx
c001a16b:	83 c4 18             	add    esp,0x18
c001a16e:	5b                   	pop    ebx
c001a16f:	c3                   	ret    

c001a170 <Krnl::flushEnv()>:
c001a170:	c3                   	ret    

c001a171 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a175:	8b 15 d4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efd4
c001a17b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a181:	a1 d8 ef 02 c0       	mov    eax,ds:0xc002efd8
c001a186:	8b 00                	mov    eax,DWORD PTR [eax]
c001a188:	03 01                	add    eax,DWORD PTR [ecx]
c001a18a:	85 d2                	test   edx,edx
c001a18c:	74 02                	je     c001a190 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a18e:	03 02                	add    eax,DWORD PTR [edx]
c001a190:	c3                   	ret    

c001a191 <Krnl::getProcessEnvPair(Process*, int)>:
c001a191:	57                   	push   edi
c001a192:	56                   	push   esi
c001a193:	8b 35 d4 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efd4
c001a199:	53                   	push   ebx
c001a19a:	85 f6                	test   esi,esi
c001a19c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1a4:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a1aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a1b0:	75 16                	jne    c001a1c8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a1b2:	39 c2                	cmp    edx,eax
c001a1b4:	7c 16                	jl     c001a1cc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a1b6:	8b 0d d8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efd8
c001a1bc:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a1be:	01 c6                	add    esi,eax
c001a1c0:	39 d6                	cmp    esi,edx
c001a1c2:	7e 3c                	jle    c001a200 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a1c4:	29 c2                	sub    edx,eax
c001a1c6:	eb 04                	jmp    c001a1cc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a1c8:	39 c2                	cmp    edx,eax
c001a1ca:	7d 05                	jge    c001a1d1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a1cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a1cf:	eb 20                	jmp    c001a1f1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a1d1:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a1d3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a1d6:	39 d1                	cmp    ecx,edx
c001a1d8:	7e 04                	jle    c001a1de <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a1da:	29 c2                	sub    edx,eax
c001a1dc:	eb 10                	jmp    c001a1ee <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a1de:	8b 35 d8 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efd8
c001a1e4:	03 0e                	add    ecx,DWORD PTR [esi]
c001a1e6:	39 d1                	cmp    ecx,edx
c001a1e8:	7e 16                	jle    c001a200 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a1ea:	29 c2                	sub    edx,eax
c001a1ec:	29 fa                	sub    edx,edi
c001a1ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a1f1:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a1f4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a1f6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a1f9:	89 03                	mov    DWORD PTR [ebx],eax
c001a1fb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1fe:	eb 1d                	jmp    c001a21d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a200:	83 ec 0c             	sub    esp,0xc
c001a203:	68 af c0 02 c0       	push   0xc002c0af
c001a208:	e8 18 00 00 00       	call   c001a225 <Krnl::panic(char const*)>
c001a20d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a213:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a21a:	83 c4 10             	add    esp,0x10
c001a21d:	89 d8                	mov    eax,ebx
c001a21f:	5b                   	pop    ebx
c001a220:	5e                   	pop    esi
c001a221:	5f                   	pop    edi
c001a222:	c2 04 00             	ret    0x4

c001a225 <Krnl::panic(char const*)>:
c001a225:	55                   	push   ebp
c001a226:	89 e5                	mov    ebp,esp
c001a228:	53                   	push   ebx
c001a229:	83 ec 10             	sub    esp,0x10
c001a22c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a22f:	fa                   	cli    
c001a230:	c6 05 e4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efe4,0x1
c001a237:	53                   	push   ebx
c001a238:	e8 38 56 ff ff       	call   c000f875 <Krnl::setBootMessage(char const*)>
c001a23d:	58                   	pop    eax
c001a23e:	c6 05 00 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d400,0x0
c001a245:	5a                   	pop    edx
c001a246:	53                   	push   ebx
c001a247:	68 c9 c0 02 c0       	push   0xc002c0c9
c001a24c:	e8 2b 86 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001a251:	59                   	pop    ecx
c001a252:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a257:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a25d:	e8 73 63 ff ff       	call   c00105d5 <setActiveTerminal(VgaText*)>
c001a262:	83 c4 0c             	add    esp,0xc
c001a265:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a26a:	6a 01                	push   0x1
c001a26c:	6a 0f                	push   0xf
c001a26e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a274:	e8 bb 61 ff ff       	call   c0010434 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a279:	58                   	pop    eax
c001a27a:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a27f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a285:	e8 cc 66 ff ff       	call   c0010956 <VgaText::clearScreen()>
c001a28a:	58                   	pop    eax
c001a28b:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a290:	5a                   	pop    edx
c001a291:	68 e2 c0 02 c0       	push   0xc002c0e2
c001a296:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a29c:	e8 41 68 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a2a1:	59                   	pop    ecx
c001a2a2:	58                   	pop    eax
c001a2a3:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a2a8:	68 88 c1 02 c0       	push   0xc002c188
c001a2ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2b3:	e8 2a 68 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a2b8:	58                   	pop    eax
c001a2b9:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a2be:	5a                   	pop    edx
c001a2bf:	68 fe c0 02 c0       	push   0xc002c0fe
c001a2c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ca:	e8 13 68 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a2cf:	59                   	pop    ecx
c001a2d0:	58                   	pop    eax
c001a2d1:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a2d6:	53                   	push   ebx
c001a2d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2dd:	e8 00 68 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a2e2:	58                   	pop    eax
c001a2e3:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a2e8:	5a                   	pop    edx
c001a2e9:	68 1e c1 02 c0       	push   0xc002c11e
c001a2ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2f4:	e8 e9 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a2f9:	a1 e0 ef 02 c0       	mov    eax,ds:0xc002efe0
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	85 c0                	test   eax,eax
c001a303:	74 02                	je     c001a307 <Krnl::panic(char const*)+0xe2>
c001a305:	ff d0                	call   eax
c001a307:	83 ec 0c             	sub    esp,0xc
c001a30a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a30d:	e8 8f 30 00 00       	call   c001d3a1 <Thr::getDriverNameFromAddress(unsigned long)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	89 c3                	mov    ebx,eax
c001a317:	85 c0                	test   eax,eax
c001a319:	0f 84 4e 02 00 00    	je     c001a56d <Krnl::panic(char const*)+0x348>
c001a31f:	83 ec 08             	sub    esp,0x8
c001a322:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a327:	68 c4 c1 02 c0       	push   0xc002c1c4
c001a32c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a332:	e8 ab 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a337:	58                   	pop    eax
c001a338:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a33d:	5a                   	pop    edx
c001a33e:	68 fe c0 02 c0       	push   0xc002c0fe
c001a343:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a349:	e8 94 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a34e:	59                   	pop    ecx
c001a34f:	58                   	pop    eax
c001a350:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a355:	53                   	push   ebx
c001a356:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a35c:	e8 81 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a361:	83 c4 10             	add    esp,0x10
c001a364:	83 ec 08             	sub    esp,0x8
c001a367:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a36c:	68 1d c1 02 c0       	push   0xc002c11d
c001a371:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a377:	e8 66 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a37c:	58                   	pop    eax
c001a37d:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a382:	5a                   	pop    edx
c001a383:	68 1c c2 02 c0       	push   0xc002c21c
c001a388:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a38e:	e8 4f 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a393:	59                   	pop    ecx
c001a394:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a399:	5b                   	pop    ebx
c001a39a:	68 5c c2 02 c0       	push   0xc002c25c
c001a39f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a5:	e8 38 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a3aa:	58                   	pop    eax
c001a3ab:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a3b0:	5a                   	pop    edx
c001a3b1:	68 09 c1 02 c0       	push   0xc002c109
c001a3b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3bc:	e8 21 67 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a3c1:	59                   	pop    ecx
c001a3c2:	5b                   	pop    ebx
c001a3c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3c6:	68 21 c1 02 c0       	push   0xc002c121
c001a3cb:	e8 ac 84 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001a3d0:	58                   	pop    eax
c001a3d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3d4:	5a                   	pop    edx
c001a3d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3d8:	68 2a c1 02 c0       	push   0xc002c12a
c001a3dd:	e8 9a 84 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001a3e2:	59                   	pop    ecx
c001a3e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3e6:	5b                   	pop    ebx
c001a3e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3ec:	68 33 c1 02 c0       	push   0xc002c133
c001a3f1:	e8 86 84 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001a3f6:	58                   	pop    eax
c001a3f7:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a3fc:	5a                   	pop    edx
c001a3fd:	68 a0 c2 02 c0       	push   0xc002c2a0
c001a402:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a408:	e8 d5 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a40d:	59                   	pop    ecx
c001a40e:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a413:	5b                   	pop    ebx
c001a414:	68 3c c1 02 c0       	push   0xc002c13c
c001a419:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a41f:	e8 be 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a424:	0f 20 c0             	mov    eax,cr0
c001a427:	5a                   	pop    edx
c001a428:	59                   	pop    ecx
c001a429:	50                   	push   eax
c001a42a:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a42f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a435:	e8 62 66 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a43a:	5b                   	pop    ebx
c001a43b:	58                   	pop    eax
c001a43c:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a441:	68 46 c1 02 c0       	push   0xc002c146
c001a446:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a44c:	e8 91 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a451:	0f 20 d0             	mov    eax,cr2
c001a454:	5a                   	pop    edx
c001a455:	59                   	pop    ecx
c001a456:	50                   	push   eax
c001a457:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a45c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a462:	e8 35 66 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a467:	5b                   	pop    ebx
c001a468:	58                   	pop    eax
c001a469:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a46e:	68 50 c1 02 c0       	push   0xc002c150
c001a473:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a479:	e8 64 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a47e:	0f 20 d8             	mov    eax,cr3
c001a481:	5a                   	pop    edx
c001a482:	59                   	pop    ecx
c001a483:	50                   	push   eax
c001a484:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a489:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a48f:	e8 08 66 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a494:	5b                   	pop    ebx
c001a495:	58                   	pop    eax
c001a496:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a49b:	68 63 c1 02 c0       	push   0xc002c163
c001a4a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a6:	e8 37 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a4ab:	0f 20 e0             	mov    eax,cr4
c001a4ae:	5a                   	pop    edx
c001a4af:	59                   	pop    ecx
c001a4b0:	50                   	push   eax
c001a4b1:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a4b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4bc:	e8 db 65 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a4c1:	5b                   	pop    ebx
c001a4c2:	58                   	pop    eax
c001a4c3:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a4c8:	68 6d c1 02 c0       	push   0xc002c16d
c001a4cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d3:	e8 0a 66 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a4d8:	5a                   	pop    edx
c001a4d9:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a4de:	59                   	pop    ecx
c001a4df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4e8:	50                   	push   eax
c001a4e9:	e8 ae 65 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a4ee:	5b                   	pop    ebx
c001a4ef:	58                   	pop    eax
c001a4f0:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a4f5:	68 84 c1 02 c0       	push   0xc002c184
c001a4fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a500:	e8 dd 65 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a505:	5a                   	pop    edx
c001a506:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a50b:	59                   	pop    ecx
c001a50c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a512:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a515:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a518:	50                   	push   eax
c001a519:	e8 7e 65 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a51e:	5b                   	pop    ebx
c001a51f:	58                   	pop    eax
c001a520:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a525:	68 84 c1 02 c0       	push   0xc002c184
c001a52a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a530:	e8 ad 65 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a535:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a53a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a53d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a543:	8b 12                	mov    edx,DWORD PTR [edx]
c001a545:	59                   	pop    ecx
c001a546:	5b                   	pop    ebx
c001a547:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a54a:	50                   	push   eax
c001a54b:	e8 4c 65 ff ff       	call   c0010a9c <VgaText::putx(unsigned int)>
c001a550:	83 c4 10             	add    esp,0x10
c001a553:	b2 fe                	mov    dl,0xfe
c001a555:	e4 60                	in     al,0x60
c001a557:	3c 1c                	cmp    al,0x1c
c001a559:	74 04                	je     c001a55f <Krnl::panic(char const*)+0x33a>
c001a55b:	3c 5a                	cmp    al,0x5a
c001a55d:	75 f6                	jne    c001a555 <Krnl::panic(char const*)+0x330>
c001a55f:	e4 64                	in     al,0x64
c001a561:	a8 02                	test   al,0x2
c001a563:	75 fa                	jne    c001a55f <Krnl::panic(char const*)+0x33a>
c001a565:	88 d0                	mov    al,dl
c001a567:	e6 64                	out    0x64,al
c001a569:	fa                   	cli    
c001a56a:	f4                   	hlt    
c001a56b:	eb e8                	jmp    c001a555 <Krnl::panic(char const*)+0x330>
c001a56d:	50                   	push   eax
c001a56e:	50                   	push   eax
c001a56f:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a574:	68 f0 c1 02 c0       	push   0xc002c1f0
c001a579:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57f:	e8 5e 65 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a584:	58                   	pop    eax
c001a585:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a58a:	5a                   	pop    edx
c001a58b:	68 fe c0 02 c0       	push   0xc002c0fe
c001a590:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a596:	e8 47 65 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a59b:	59                   	pop    ecx
c001a59c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5a1:	5b                   	pop    ebx
c001a5a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5a5:	83 c0 0c             	add    eax,0xc
c001a5a8:	50                   	push   eax
c001a5a9:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001a5ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b4:	e8 29 65 ff ff       	call   c0010ae2 <VgaText::puts(char const*)>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	e9 a3 fd ff ff       	jmp    c001a364 <Krnl::panic(char const*)+0x13f>

c001a5c1 <Net::switchEndian16(unsigned short)>:
c001a5c1:	83 ec 04             	sub    esp,0x4
c001a5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a5cc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5d0:	c1 f8 08             	sar    eax,0x8
c001a5d3:	89 c2                	mov    edx,eax
c001a5d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5d9:	c1 e0 08             	shl    eax,0x8
c001a5dc:	09 d0                	or     eax,edx
c001a5de:	83 c4 04             	add    esp,0x4
c001a5e1:	c3                   	ret    

c001a5e2 <Net::switchEndian32(unsigned int)>:
c001a5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e6:	c1 e8 18             	shr    eax,0x18
c001a5e9:	89 c2                	mov    edx,eax
c001a5eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ef:	c1 e0 08             	shl    eax,0x8
c001a5f2:	25 00 00 ff 00       	and    eax,0xff0000
c001a5f7:	09 c2                	or     edx,eax
c001a5f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fd:	c1 e8 08             	shr    eax,0x8
c001a600:	25 00 ff 00 00       	and    eax,0xff00
c001a605:	09 c2                	or     edx,eax
c001a607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a60b:	c1 e0 18             	shl    eax,0x18
c001a60e:	09 d0                	or     eax,edx
c001a610:	c3                   	ret    

c001a611 <Net::crc32Calc(unsigned char*, int)>:
c001a611:	83 ec 10             	sub    esp,0x10
c001a614:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a619:	75 07                	jne    c001a622 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a61b:	b8 00 00 00 00       	mov    eax,0x0
c001a620:	eb 7c                	jmp    c001a69e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a622:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a627:	7f 07                	jg     c001a630 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a629:	b8 00 00 00 00       	mov    eax,0x0
c001a62e:	eb 6e                	jmp    c001a69e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a630:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a638:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a644:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a648:	7d 4e                	jge    c001a698 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a64a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a64e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a652:	01 d0                	add    eax,edx
c001a654:	8a 00                	mov    al,BYTE PTR [eax]
c001a656:	0f b6 c0             	movzx  eax,al
c001a659:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a65d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a665:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a66a:	7f 26                	jg     c001a692 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a66c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a670:	83 e0 01             	and    eax,0x1
c001a673:	74 0d                	je     c001a682 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a675:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a679:	d1 e8                	shr    eax,1
c001a67b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a680:	eb 06                	jmp    c001a688 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a686:	d1 e8                	shr    eax,1
c001a688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a68c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a690:	eb d3                	jmp    c001a665 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a692:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a696:	eb a8                	jmp    c001a640 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a69c:	f7 d0                	not    eax
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	c3                   	ret    

c001a6a2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a6a2:	57                   	push   edi
c001a6a3:	56                   	push   esi
c001a6a4:	53                   	push   ebx
c001a6a5:	83 ec 60             	sub    esp,0x60
c001a6a8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6af:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6b3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a6bb:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a6c0:	7f 1a                	jg     c001a6dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a6c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6c9:	8d 50 01             	lea    edx,[eax+0x1]
c001a6cc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6d3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a6d6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a6da:	eb df                	jmp    c001a6bb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a6dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6e3:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6ed:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6fb:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a6ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a703:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a70b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a70f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a713:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a71b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a71f:	89 c6                	mov    esi,eax
c001a721:	89 d7                	mov    edi,edx
c001a723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a725:	89 c8                	mov    eax,ecx
c001a727:	89 fa                	mov    edx,edi
c001a729:	89 f3                	mov    ebx,esi
c001a72b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a72f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a733:	89 04 24             	mov    DWORD PTR [esp],eax
c001a736:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a73e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a745:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a749:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a74d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a751:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a759:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a75d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a765:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a769:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a76d:	89 c6                	mov    esi,eax
c001a76f:	89 d7                	mov    edi,edx
c001a771:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a773:	89 c8                	mov    eax,ecx
c001a775:	89 fa                	mov    edx,edi
c001a777:	89 f3                	mov    ebx,esi
c001a779:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a77d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a781:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a785:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a78d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a794:	0f b7 c0             	movzx  eax,ax
c001a797:	c1 f8 08             	sar    eax,0x8
c001a79a:	89 c1                	mov    ecx,eax
c001a79c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7ad:	88 ca                	mov    dl,cl
c001a7af:	88 10                	mov    BYTE PTR [eax],dl
c001a7b1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a7b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7bf:	8d 48 01             	lea    ecx,[eax+0x1]
c001a7c2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a7c9:	88 10                	mov    BYTE PTR [eax],dl
c001a7cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a7cf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a7d3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a7da:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a7de:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a7e2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a7e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a7ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7f2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a7f6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a7fa:	89 c6                	mov    esi,eax
c001a7fc:	89 d7                	mov    edi,edx
c001a7fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a800:	89 c8                	mov    eax,ecx
c001a802:	89 fa                	mov    edx,edi
c001a804:	89 f3                	mov    ebx,esi
c001a806:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a80a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a80e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a812:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a816:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a81d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a824:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a828:	50                   	push   eax
c001a829:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a82d:	e8 df fd ff ff       	call   c001a611 <Net::crc32Calc(unsigned char*, int)>
c001a832:	83 c4 08             	add    esp,0x8
c001a835:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a839:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a83d:	c1 e8 18             	shr    eax,0x18
c001a840:	89 c1                	mov    ecx,eax
c001a842:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a849:	8d 50 01             	lea    edx,[eax+0x1]
c001a84c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a853:	88 ca                	mov    dl,cl
c001a855:	88 10                	mov    BYTE PTR [eax],dl
c001a857:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a85b:	c1 e8 10             	shr    eax,0x10
c001a85e:	89 c1                	mov    ecx,eax
c001a860:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a867:	8d 50 01             	lea    edx,[eax+0x1]
c001a86a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a871:	88 ca                	mov    dl,cl
c001a873:	88 10                	mov    BYTE PTR [eax],dl
c001a875:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a879:	c1 e8 08             	shr    eax,0x8
c001a87c:	89 c1                	mov    ecx,eax
c001a87e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a885:	8d 50 01             	lea    edx,[eax+0x1]
c001a888:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a88f:	88 ca                	mov    dl,cl
c001a891:	88 10                	mov    BYTE PTR [eax],dl
c001a893:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a89a:	8d 50 01             	lea    edx,[eax+0x1]
c001a89d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8a4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a8a8:	88 10                	mov    BYTE PTR [eax],dl
c001a8aa:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8ae:	83 c4 60             	add    esp,0x60
c001a8b1:	5b                   	pop    ebx
c001a8b2:	5e                   	pop    esi
c001a8b3:	5f                   	pop    edi
c001a8b4:	c3                   	ret    

c001a8b5 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a8b5:	57                   	push   edi
c001a8b6:	56                   	push   esi
c001a8b7:	53                   	push   ebx
c001a8b8:	83 ec 70             	sub    esp,0x70
c001a8bb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8c2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a8c6:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a8ce:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8d5:	83 c0 0e             	add    eax,0xe
c001a8d8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8e7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8ff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a903:	89 c6                	mov    esi,eax
c001a905:	89 d7                	mov    edi,edx
c001a907:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a909:	89 c8                	mov    eax,ecx
c001a90b:	89 fa                	mov    edx,edi
c001a90d:	89 f3                	mov    ebx,esi
c001a90f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a913:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a917:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a91b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a923:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a92a:	83 c0 08             	add    eax,0x8
c001a92d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a931:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a938:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a93c:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a944:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a948:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a94c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a950:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a954:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a958:	89 c6                	mov    esi,eax
c001a95a:	89 d7                	mov    edi,edx
c001a95c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a95e:	89 c8                	mov    eax,ecx
c001a960:	89 fa                	mov    edx,edi
c001a962:	89 f3                	mov    ebx,esi
c001a964:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a968:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a970:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a978:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a97f:	8d 50 01             	lea    edx,[eax+0x1]
c001a982:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a989:	8a 00                	mov    al,BYTE PTR [eax]
c001a98b:	0f b6 c0             	movzx  eax,al
c001a98e:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a993:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a99a:	8d 50 01             	lea    edx,[eax+0x1]
c001a99d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a9a4:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a6:	0f b6 c0             	movzx  eax,al
c001a9a9:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a9ae:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a9b3:	c1 e0 08             	shl    eax,0x8
c001a9b6:	89 c2                	mov    edx,eax
c001a9b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a9bc:	09 d0                	or     eax,edx
c001a9be:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a9c5:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a9c9:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a9d1:	75 46                	jne    c001aa19 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a9d3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9dd:	66 3d dc 05          	cmp    ax,0x5dc
c001a9e1:	77 16                	ja     c001a9f9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a9e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9ed:	0f b7 c0             	movzx  eax,ax
c001a9f0:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a9f7:	eb 20                	jmp    c001aa19 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a9f9:	83 ec 0c             	sub    esp,0xc
c001a9fc:	68 c8 c2 02 c0       	push   0xc002c2c8
c001aa01:	e8 76 7e ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa10:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aa14:	e9 17 01 00 00       	jmp    c001ab30 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aa19:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa20:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aa27:	8b 12                	mov    edx,DWORD PTR [edx]
c001aa29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aa2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aa34:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aa38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aa3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa50:	89 c6                	mov    esi,eax
c001aa52:	89 d7                	mov    edi,edx
c001aa54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa56:	89 c8                	mov    eax,ecx
c001aa58:	89 fa                	mov    edx,edi
c001aa5a:	89 f3                	mov    ebx,esi
c001aa5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aa60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa64:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa67:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa6e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aa75:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa7c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa86:	8a 00                	mov    al,BYTE PTR [eax]
c001aa88:	0f b6 c0             	movzx  eax,al
c001aa8b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001aa8f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa96:	8d 50 01             	lea    edx,[eax+0x1]
c001aa99:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aaa0:	8a 00                	mov    al,BYTE PTR [eax]
c001aaa2:	0f b6 c0             	movzx  eax,al
c001aaa5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001aaa9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aab0:	8d 50 01             	lea    edx,[eax+0x1]
c001aab3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aaba:	8a 00                	mov    al,BYTE PTR [eax]
c001aabc:	0f b6 c0             	movzx  eax,al
c001aabf:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001aac3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaca:	8d 50 01             	lea    edx,[eax+0x1]
c001aacd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aad4:	8a 00                	mov    al,BYTE PTR [eax]
c001aad6:	0f b6 c0             	movzx  eax,al
c001aad9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001aadd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aae1:	c1 e0 18             	shl    eax,0x18
c001aae4:	89 c2                	mov    edx,eax
c001aae6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aaea:	c1 e0 10             	shl    eax,0x10
c001aaed:	09 c2                	or     edx,eax
c001aaef:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aaf3:	c1 e0 08             	shl    eax,0x8
c001aaf6:	09 d0                	or     eax,edx
c001aaf8:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001aafc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ab00:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab07:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ab0b:	83 e8 04             	sub    eax,0x4
c001ab0e:	83 ec 08             	sub    esp,0x8
c001ab11:	50                   	push   eax
c001ab12:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ab16:	e8 f6 fa ff ff       	call   c001a611 <Net::crc32Calc(unsigned char*, int)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ab22:	0f 94 c2             	sete   dl
c001ab25:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab2c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ab2f:	90                   	nop
c001ab30:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab37:	83 c4 70             	add    esp,0x70
c001ab3a:	5b                   	pop    ebx
c001ab3b:	5e                   	pop    esi
c001ab3c:	5f                   	pop    edi
c001ab3d:	c2 04 00             	ret    0x4

c001ab40 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ab40:	55                   	push   ebp
c001ab41:	57                   	push   edi
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab4a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ab51:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ab53:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ab56:	80 fb 40             	cmp    bl,0x40
c001ab59:	75 1b                	jne    c001ab76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ab5b:	8a 16                	mov    dl,BYTE PTR [esi]
c001ab5d:	84 d2                	test   dl,dl
c001ab5f:	0f 84 f1 00 00 00    	je     c001ac56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab65:	8d 46 01             	lea    eax,[esi+0x1]
c001ab68:	80 fa 3a             	cmp    dl,0x3a
c001ab6b:	74 04                	je     c001ab71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ab6d:	89 c6                	mov    esi,eax
c001ab6f:	eb ea                	jmp    c001ab5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ab71:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ab74:	89 c6                	mov    esi,eax
c001ab76:	50                   	push   eax
c001ab77:	6a 40                	push   0x40
c001ab79:	6a 00                	push   0x0
c001ab7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab7f:	50                   	push   eax
c001ab80:	e8 cb 5b fe ff       	call   c0000750 <memset>
c001ab85:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ab8c:	31 c0                	xor    eax,eax
c001ab8e:	83 c4 10             	add    esp,0x10
c001ab91:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ab93:	84 c9                	test   cl,cl
c001ab95:	0f 84 bb 00 00 00    	je     c001ac56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab9b:	3d c7 00 00 00       	cmp    eax,0xc7
c001aba0:	0f 8f b0 00 00 00    	jg     c001ac56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aba6:	80 f9 0a             	cmp    cl,0xa
c001aba9:	0f 85 98 00 00 00    	jne    c001ac47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001abaf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001abb4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001abb8:	a8 df                	test   al,0xdf
c001abba:	0f 94 c1             	sete   cl
c001abbd:	3c 23                	cmp    al,0x23
c001abbf:	0f 94 c2             	sete   dl
c001abc2:	08 d1                	or     cl,dl
c001abc4:	75 4a                	jne    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abc6:	8d 50 f7             	lea    edx,[eax-0x9]
c001abc9:	80 fa 01             	cmp    dl,0x1
c001abcc:	76 42                	jbe    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abce:	3c 5b                	cmp    al,0x5b
c001abd0:	75 42                	jne    c001ac14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001abd2:	80 fb 40             	cmp    bl,0x40
c001abd5:	75 39                	jne    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abd7:	83 ec 0c             	sub    esp,0xc
c001abda:	8d 54 24 65          	lea    edx,[esp+0x65]
c001abde:	52                   	push   edx
c001abdf:	e8 88 5b fe ff       	call   c000076c <strlen>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	83 f8 3f             	cmp    eax,0x3f
c001abea:	77 6a                	ja     c001ac56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abec:	50                   	push   eax
c001abed:	50                   	push   eax
c001abee:	8d 54 24 61          	lea    edx,[esp+0x61]
c001abf2:	52                   	push   edx
c001abf3:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abf7:	52                   	push   edx
c001abf8:	e8 0f 5c fe ff       	call   c000080c <strcpy>
c001abfd:	58                   	pop    eax
c001abfe:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac02:	52                   	push   edx
c001ac03:	e8 64 5b fe ff       	call   c000076c <strlen>
c001ac08:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	31 d2                	xor    edx,edx
c001ac12:	eb 3a                	jmp    c001ac4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac14:	80 fb 40             	cmp    bl,0x40
c001ac17:	74 06                	je     c001ac1f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac19:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ac1d:	eb 20                	jmp    c001ac3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ac1f:	50                   	push   eax
c001ac20:	50                   	push   eax
c001ac21:	55                   	push   ebp
c001ac22:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac26:	50                   	push   eax
c001ac27:	e8 6c 5c fe ff       	call   c0000898 <strcmp>
c001ac2c:	83 c4 10             	add    esp,0x10
c001ac2f:	85 c0                	test   eax,eax
c001ac31:	75 dd                	jne    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac33:	eb e4                	jmp    c001ac19 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ac35:	8d 50 01             	lea    edx,[eax+0x1]
c001ac38:	80 f9 3d             	cmp    cl,0x3d
c001ac3b:	74 1d                	je     c001ac5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ac3d:	89 d0                	mov    eax,edx
c001ac3f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac41:	84 c9                	test   cl,cl
c001ac43:	75 f0                	jne    c001ac35 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ac45:	eb 0f                	jmp    c001ac56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac47:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ac4e:	47                   	inc    edi
c001ac4f:	89 d0                	mov    eax,edx
c001ac51:	e9 3b ff ff ff       	jmp    c001ab91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ac56:	31 c0                	xor    eax,eax
c001ac58:	eb 33                	jmp    c001ac8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ac5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ac61:	50                   	push   eax
c001ac62:	50                   	push   eax
c001ac63:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ac67:	50                   	push   eax
c001ac68:	56                   	push   esi
c001ac69:	e8 2a 5c fe ff       	call   c0000898 <strcmp>
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	85 c0                	test   eax,eax
c001ac73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac77:	75 97                	jne    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac79:	51                   	push   ecx
c001ac7a:	51                   	push   ecx
c001ac7b:	52                   	push   edx
c001ac7c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ac83:	e8 84 5b fe ff       	call   c000080c <strcpy>
c001ac88:	83 c4 10             	add    esp,0x10
c001ac8b:	b0 01                	mov    al,0x1
c001ac8d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac93:	5b                   	pop    ebx
c001ac94:	5e                   	pop    esi
c001ac95:	5f                   	pop    edi
c001ac96:	5d                   	pop    ebp
c001ac97:	c3                   	ret    

c001ac98 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ac98:	57                   	push   edi
c001ac99:	56                   	push   esi
c001ac9a:	53                   	push   ebx
c001ac9b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aca1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aca8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001acaf:	53                   	push   ebx
c001acb0:	e8 b7 5a fe ff       	call   c000076c <strlen>
c001acb5:	89 34 24             	mov    DWORD PTR [esp],esi
c001acb8:	89 c7                	mov    edi,eax
c001acba:	e8 ad 5a fe ff       	call   c000076c <strlen>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001acc6:	3d ff 00 00 00       	cmp    eax,0xff
c001accb:	0f 87 d3 00 00 00    	ja     c001ada4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001acd1:	57                   	push   edi
c001acd2:	57                   	push   edi
c001acd3:	56                   	push   esi
c001acd4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001acd8:	56                   	push   esi
c001acd9:	e8 2e 5b fe ff       	call   c000080c <strcpy>
c001acde:	58                   	pop    eax
c001acdf:	5a                   	pop    edx
c001ace0:	68 6a c6 02 c0       	push   0xc002c66a
c001ace5:	56                   	push   esi
c001ace6:	e8 61 5c fe ff       	call   c000094c <strcat>
c001aceb:	59                   	pop    ecx
c001acec:	5f                   	pop    edi
c001aced:	53                   	push   ebx
c001acee:	56                   	push   esi
c001acef:	e8 58 5c fe ff       	call   c000094c <strcat>
c001acf4:	58                   	pop    eax
c001acf5:	5a                   	pop    edx
c001acf6:	68 14 c3 02 c0       	push   0xc002c314
c001acfb:	56                   	push   esi
c001acfc:	e8 4b 5c fe ff       	call   c000094c <strcat>
c001ad01:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad08:	e8 0e 4b ff ff       	call   c000f81b <malloc>
c001ad0d:	83 c4 0c             	add    esp,0xc
c001ad10:	89 c3                	mov    ebx,eax
c001ad12:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001ad18:	56                   	push   esi
c001ad19:	50                   	push   eax
c001ad1a:	e8 c7 80 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	85 db                	test   ebx,ebx
c001ad24:	74 7e                	je     c001ada4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad26:	51                   	push   ecx
c001ad27:	51                   	push   ecx
c001ad28:	6a 01                	push   0x1
c001ad2a:	53                   	push   ebx
c001ad2b:	e8 1a 81 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	85 c0                	test   eax,eax
c001ad35:	74 08                	je     c001ad3f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ad37:	83 ec 0c             	sub    esp,0xc
c001ad3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad3c:	53                   	push   ebx
c001ad3d:	eb 5f                	jmp    c001ad9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ad3f:	52                   	push   edx
c001ad40:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ad44:	50                   	push   eax
c001ad45:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad49:	50                   	push   eax
c001ad4a:	53                   	push   ebx
c001ad4b:	e8 a6 83 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001ad50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad54:	83 c4 10             	add    esp,0x10
c001ad57:	89 c1                	mov    ecx,eax
c001ad59:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ad5d:	74 31                	je     c001ad90 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad5f:	83 ec 0c             	sub    esp,0xc
c001ad62:	50                   	push   eax
c001ad63:	e8 b3 4a ff ff       	call   c000f81b <malloc>
c001ad68:	89 c6                	mov    esi,eax
c001ad6a:	58                   	pop    eax
c001ad6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ad71:	52                   	push   edx
c001ad72:	56                   	push   esi
c001ad73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad7b:	53                   	push   ebx
c001ad7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad7f:	83 c4 20             	add    esp,0x20
c001ad82:	85 c0                	test   eax,eax
c001ad84:	75 0a                	jne    c001ad90 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad8a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ad8e:	74 18                	je     c001ada8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ad90:	83 ec 0c             	sub    esp,0xc
c001ad93:	53                   	push   ebx
c001ad94:	e8 0f 81 ff ff       	call   c0012ea8 <File::close()>
c001ad99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ada1:	83 c4 10             	add    esp,0x10
c001ada4:	31 c0                	xor    eax,eax
c001ada6:	eb 3b                	jmp    c001ade3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	53                   	push   ebx
c001adac:	e8 f7 80 ff ff       	call   c0012ea8 <File::close()>
c001adb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adb9:	83 c4 0c             	add    esp,0xc
c001adbc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001adc3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001adca:	56                   	push   esi
c001adcb:	e8 70 fd ff ff       	call   c001ab40 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001add0:	89 34 24             	mov    DWORD PTR [esp],esi
c001add3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001add7:	e8 4f 4a ff ff       	call   c000f82b <free>
c001addc:	83 c4 10             	add    esp,0x10
c001addf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ade3:	81 c4 20 01 00 00    	add    esp,0x120
c001ade9:	5b                   	pop    ebx
c001adea:	5e                   	pop    esi
c001adeb:	5f                   	pop    edi
c001adec:	c3                   	ret    

c001aded <Reg::getLine(char*, char*, char*)>:
c001aded:	57                   	push   edi
c001adee:	56                   	push   esi
c001adef:	53                   	push   ebx
c001adf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adf4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adf8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001adfc:	57                   	push   edi
c001adfd:	56                   	push   esi
c001adfe:	53                   	push   ebx
c001adff:	68 19 c3 02 c0       	push   0xc002c319
c001ae04:	e8 8f fe ff ff       	call   c001ac98 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae09:	83 c4 10             	add    esp,0x10
c001ae0c:	84 c0                	test   al,al
c001ae0e:	75 10                	jne    c001ae20 <Reg::getLine(char*, char*, char*)+0x33>
c001ae10:	57                   	push   edi
c001ae11:	56                   	push   esi
c001ae12:	53                   	push   ebx
c001ae13:	68 3e c3 02 c0       	push   0xc002c33e
c001ae18:	e8 7b fe ff ff       	call   c001ac98 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	5b                   	pop    ebx
c001ae21:	5e                   	pop    esi
c001ae22:	5f                   	pop    edi
c001ae23:	c3                   	ret    

c001ae24 <Reg::readInt(char*, char*, int*)>:
c001ae24:	55                   	push   ebp
c001ae25:	57                   	push   edi
c001ae26:	56                   	push   esi
c001ae27:	53                   	push   ebx
c001ae28:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ae2e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ae32:	57                   	push   edi
c001ae33:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae3a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae41:	e8 a7 ff ff ff       	call   c001aded <Reg::getLine(char*, char*, char*)>
c001ae46:	83 c4 10             	add    esp,0x10
c001ae49:	84 c0                	test   al,al
c001ae4b:	0f 84 b3 00 00 00    	je     c001af04 <Reg::readInt(char*, char*, int*)+0xe0>
c001ae51:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ae55:	80 fa 2b             	cmp    dl,0x2b
c001ae58:	74 0c                	je     c001ae66 <Reg::readInt(char*, char*, int*)+0x42>
c001ae5a:	80 fa 2d             	cmp    dl,0x2d
c001ae5d:	75 0e                	jne    c001ae6d <Reg::readInt(char*, char*, int*)+0x49>
c001ae5f:	ba 01 00 00 00       	mov    edx,0x1
c001ae64:	eb 0b                	jmp    c001ae71 <Reg::readInt(char*, char*, int*)+0x4d>
c001ae66:	ba 01 00 00 00       	mov    edx,0x1
c001ae6b:	eb 02                	jmp    c001ae6f <Reg::readInt(char*, char*, int*)+0x4b>
c001ae6d:	31 d2                	xor    edx,edx
c001ae6f:	31 c0                	xor    eax,eax
c001ae71:	be 0a 00 00 00       	mov    esi,0xa
c001ae76:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ae7b:	75 20                	jne    c001ae9d <Reg::readInt(char*, char*, int*)+0x79>
c001ae7d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ae81:	80 f9 78             	cmp    cl,0x78
c001ae84:	75 0a                	jne    c001ae90 <Reg::readInt(char*, char*, int*)+0x6c>
c001ae86:	83 c2 02             	add    edx,0x2
c001ae89:	be 10 00 00 00       	mov    esi,0x10
c001ae8e:	eb 0d                	jmp    c001ae9d <Reg::readInt(char*, char*, int*)+0x79>
c001ae90:	80 f9 62             	cmp    cl,0x62
c001ae93:	75 08                	jne    c001ae9d <Reg::readInt(char*, char*, int*)+0x79>
c001ae95:	83 c2 02             	add    edx,0x2
c001ae98:	be 02 00 00 00       	mov    esi,0x2
c001ae9d:	01 d7                	add    edi,edx
c001ae9f:	31 d2                	xor    edx,edx
c001aea1:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aea3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aea7:	80 fb 0d             	cmp    bl,0xd
c001aeaa:	0f 94 c3             	sete   bl
c001aead:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aeb2:	0f 94 c1             	sete   cl
c001aeb5:	08 cb                	or     bl,cl
c001aeb7:	75 3a                	jne    c001aef3 <Reg::readInt(char*, char*, int*)+0xcf>
c001aeb9:	0f af d6             	imul   edx,esi
c001aebc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aec1:	83 fe 10             	cmp    esi,0x10
c001aec4:	75 26                	jne    c001aeec <Reg::readInt(char*, char*, int*)+0xc8>
c001aec6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aeca:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aecd:	89 e9                	mov    ecx,ebp
c001aecf:	80 f9 05             	cmp    cl,0x5
c001aed2:	77 06                	ja     c001aeda <Reg::readInt(char*, char*, int*)+0xb6>
c001aed4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aed8:	eb 16                	jmp    c001aef0 <Reg::readInt(char*, char*, int*)+0xcc>
c001aeda:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aede:	83 e9 61             	sub    ecx,0x61
c001aee1:	80 f9 05             	cmp    cl,0x5
c001aee4:	77 06                	ja     c001aeec <Reg::readInt(char*, char*, int*)+0xc8>
c001aee6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aeea:	eb 04                	jmp    c001aef0 <Reg::readInt(char*, char*, int*)+0xcc>
c001aeec:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aef0:	47                   	inc    edi
c001aef1:	eb ae                	jmp    c001aea1 <Reg::readInt(char*, char*, int*)+0x7d>
c001aef3:	84 c0                	test   al,al
c001aef5:	74 02                	je     c001aef9 <Reg::readInt(char*, char*, int*)+0xd5>
c001aef7:	f7 da                	neg    edx
c001aef9:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af00:	89 10                	mov    DWORD PTR [eax],edx
c001af02:	88 d8                	mov    al,bl
c001af04:	81 c4 ec 00 00 00    	add    esp,0xec
c001af0a:	5b                   	pop    ebx
c001af0b:	5e                   	pop    esi
c001af0c:	5f                   	pop    edi
c001af0d:	5d                   	pop    ebp
c001af0e:	c3                   	ret    

c001af0f <Reg::readString(char*, char*, char*, int)>:
c001af0f:	57                   	push   edi
c001af10:	56                   	push   esi
c001af11:	53                   	push   ebx
c001af12:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af18:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001af1f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001af23:	57                   	push   edi
c001af24:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af2b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af32:	e8 b6 fe ff ff       	call   c001aded <Reg::getLine(char*, char*, char*)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	89 c6                	mov    esi,eax
c001af3c:	84 c0                	test   al,al
c001af3e:	74 44                	je     c001af84 <Reg::readString(char*, char*, char*, int)+0x75>
c001af40:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001af47:	31 c0                	xor    eax,eax
c001af49:	4a                   	dec    edx
c001af4a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001af4d:	84 c9                	test   cl,cl
c001af4f:	74 0f                	je     c001af60 <Reg::readString(char*, char*, char*, int)+0x51>
c001af51:	39 c2                	cmp    edx,eax
c001af53:	7e 0b                	jle    c001af60 <Reg::readString(char*, char*, char*, int)+0x51>
c001af55:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001af58:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001af5d:	40                   	inc    eax
c001af5e:	eb ea                	jmp    c001af4a <Reg::readString(char*, char*, char*, int)+0x3b>
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	53                   	push   ebx
c001af64:	e8 03 58 fe ff       	call   c000076c <strlen>
c001af69:	83 c4 10             	add    esp,0x10
c001af6c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001af71:	75 11                	jne    c001af84 <Reg::readString(char*, char*, char*, int)+0x75>
c001af73:	83 ec 0c             	sub    esp,0xc
c001af76:	53                   	push   ebx
c001af77:	e8 f0 57 fe ff       	call   c000076c <strlen>
c001af7c:	83 c4 10             	add    esp,0x10
c001af7f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001af84:	81 c4 d0 00 00 00    	add    esp,0xd0
c001af8a:	89 f0                	mov    eax,esi
c001af8c:	5b                   	pop    ebx
c001af8d:	5e                   	pop    esi
c001af8e:	5f                   	pop    edi
c001af8f:	c3                   	ret    

c001af90 <Reg::readBool(char*, char*, bool*)>:
c001af90:	83 ec 20             	sub    esp,0x20
c001af93:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af97:	50                   	push   eax
c001af98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afa0:	e8 7f fe ff ff       	call   c001ae24 <Reg::readInt(char*, char*, int*)>
c001afa5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001afaa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001afae:	0f 95 02             	setne  BYTE PTR [edx]
c001afb1:	83 c4 2c             	add    esp,0x2c
c001afb4:	c3                   	ret    

c001afb5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001afb5:	53                   	push   ebx
c001afb6:	83 ec 1c             	sub    esp,0x1c
c001afb9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001afbd:	8d 44 24 13          	lea    eax,[esp+0x13]
c001afc1:	50                   	push   eax
c001afc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afca:	e8 c1 ff ff ff       	call   c001af90 <Reg::readBool(char*, char*, bool*)>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	84 c0                	test   al,al
c001afd4:	74 04                	je     c001afda <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001afd6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001afda:	88 d8                	mov    al,bl
c001afdc:	83 c4 18             	add    esp,0x18
c001afdf:	5b                   	pop    ebx
c001afe0:	c3                   	ret    

c001afe1 <Reg::readIntWithDefault(char*, char*, int)>:
c001afe1:	53                   	push   ebx
c001afe2:	83 ec 1c             	sub    esp,0x1c
c001afe5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001afe9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afed:	50                   	push   eax
c001afee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff6:	e8 29 fe ff ff       	call   c001ae24 <Reg::readInt(char*, char*, int*)>
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	84 c0                	test   al,al
c001b000:	74 04                	je     c001b006 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b002:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b006:	89 d8                	mov    eax,ebx
c001b008:	83 c4 18             	add    esp,0x18
c001b00b:	5b                   	pop    ebx
c001b00c:	c3                   	ret    

c001b00d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b00d:	57                   	push   edi
c001b00e:	56                   	push   esi
c001b00f:	56                   	push   esi
c001b010:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b014:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b018:	56                   	push   esi
c001b019:	57                   	push   edi
c001b01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b022:	e8 e8 fe ff ff       	call   c001af0f <Reg::readString(char*, char*, char*, int)>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	84 c0                	test   al,al
c001b02c:	75 1a                	jne    c001b048 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b02e:	51                   	push   ecx
c001b02f:	56                   	push   esi
c001b030:	6a 00                	push   0x0
c001b032:	57                   	push   edi
c001b033:	e8 18 57 fe ff       	call   c0000750 <memset>
c001b038:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b03b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b03f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b041:	83 c4 10             	add    esp,0x10
c001b044:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b048:	89 f8                	mov    eax,edi
c001b04a:	5a                   	pop    edx
c001b04b:	5e                   	pop    esi
c001b04c:	5f                   	pop    edi
c001b04d:	c3                   	ret    

c001b04e <Sys::eject(regs*)>:
c001b04e:	83 ec 0c             	sub    esp,0xc
c001b051:	83 ca ff             	or     edx,0xffffffff
c001b054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b058:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b05b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b060:	83 e9 41             	sub    ecx,0x41
c001b063:	83 f9 19             	cmp    ecx,0x19
c001b066:	77 18                	ja     c001b080 <Sys::eject(regs*)+0x32>
c001b068:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c001b06f:	85 c9                	test   ecx,ecx
c001b071:	74 0d                	je     c001b080 <Sys::eject(regs*)+0x32>
c001b073:	83 ec 0c             	sub    esp,0xc
c001b076:	51                   	push   ecx
c001b077:	e8 fc b0 ff ff       	call   c0016178 <LogicalDisk::eject()>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	99                   	cdq    
c001b080:	83 c4 0c             	add    esp,0xc
c001b083:	c3                   	ret    

c001b084 <Sys::exit(regs*)>:
c001b084:	83 ec 18             	sub    esp,0x18
c001b087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b08b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b08e:	e8 d3 35 00 00       	call   c001e666 <terminateTask(int)>
c001b093:	83 c8 ff             	or     eax,0xffffffff
c001b096:	83 c4 1c             	add    esp,0x1c
c001b099:	89 c2                	mov    edx,eax
c001b09b:	c3                   	ret    

c001b09c <Sys::getCwd(regs*)>:
c001b09c:	83 ec 10             	sub    esp,0x10
c001b09f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0a3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b0a6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0b1:	e8 32 7b ff ff       	call   c0012be8 <Fs::getcwd(Process*, char*, int)>
c001b0b6:	83 c4 1c             	add    esp,0x1c
c001b0b9:	99                   	cdq    
c001b0ba:	c3                   	ret    

c001b0bb <Sys::getPID(regs*)>:
c001b0bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0c5:	99                   	cdq    
c001b0c6:	c3                   	ret    

c001b0c7 <Sys::getRAMData(regs*)>:
c001b0c7:	8b 0d 14 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e514
c001b0cd:	69 05 10 e5 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e510,0xc8
c001b0d7:	99                   	cdq    
c001b0d8:	f7 f9                	idiv   ecx
c001b0da:	c1 e0 18             	shl    eax,0x18
c001b0dd:	09 c8                	or     eax,ecx
c001b0df:	99                   	cdq    
c001b0e0:	c3                   	ret    

c001b0e1 <Sys::getVGAPtr(regs*)>:
c001b0e1:	55                   	push   ebp
c001b0e2:	57                   	push   edi
c001b0e3:	56                   	push   esi
c001b0e4:	53                   	push   ebx
c001b0e5:	83 ec 18             	sub    esp,0x18
c001b0e8:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0ec:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b0ef:	e8 be 30 00 00       	call   c001e1b2 <Thr::processFromPID(int)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	89 c1                	mov    ecx,eax
c001b0f9:	b8 01 00 00 00       	mov    eax,0x1
c001b0fe:	85 c9                	test   ecx,ecx
c001b100:	74 59                	je     c001b15b <Sys::getVGAPtr(regs*)+0x7a>
c001b102:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b108:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b10c:	74 0c                	je     c001b11a <Sys::getVGAPtr(regs*)+0x39>
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	53                   	push   ebx
c001b112:	e8 be 54 ff ff       	call   c00105d5 <setActiveTerminal(VgaText*)>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b11d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b120:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b125:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b127:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b12a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b12d:	81 c3 82 00 00 00    	add    ebx,0x82
c001b133:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b139:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b13c:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b13f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b145:	50                   	push   eax
c001b146:	50                   	push   eax
c001b147:	53                   	push   ebx
c001b148:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b14b:	05 a8 0f 00 00       	add    eax,0xfa8
c001b150:	50                   	push   eax
c001b151:	e8 b6 56 fe ff       	call   c000080c <strcpy>
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	31 c0                	xor    eax,eax
c001b15b:	83 c4 0c             	add    esp,0xc
c001b15e:	31 d2                	xor    edx,edx
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	5f                   	pop    edi
c001b163:	5d                   	pop    ebp
c001b164:	c3                   	ret    

c001b165 <Sys::loadDLL(regs*)>:
c001b165:	56                   	push   esi
c001b166:	53                   	push   ebx
c001b167:	31 d2                	xor    edx,edx
c001b169:	51                   	push   ecx
c001b16a:	b8 01 00 00 00       	mov    eax,0x1
c001b16f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b173:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b177:	0f 84 8c 00 00 00    	je     c001b209 <Sys::loadDLL(regs*)+0xa4>
c001b17d:	83 ec 0c             	sub    esp,0xc
c001b180:	68 14 01 00 00       	push   0x114
c001b185:	e8 91 46 ff ff       	call   c000f81b <malloc>
c001b18a:	83 c4 0c             	add    esp,0xc
c001b18d:	89 c3                	mov    ebx,eax
c001b18f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b194:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b197:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b19a:	53                   	push   ebx
c001b19b:	e8 46 7c ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001b1a0:	83 c4 10             	add    esp,0x10
c001b1a3:	31 d2                	xor    edx,edx
c001b1a5:	b8 02 00 00 00       	mov    eax,0x2
c001b1aa:	85 db                	test   ebx,ebx
c001b1ac:	74 5b                	je     c001b209 <Sys::loadDLL(regs*)+0xa4>
c001b1ae:	83 ec 0c             	sub    esp,0xc
c001b1b1:	53                   	push   ebx
c001b1b2:	e8 01 7f ff ff       	call   c00130b8 <File::exists()>
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	84 c0                	test   al,al
c001b1bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1be:	75 11                	jne    c001b1d1 <Sys::loadDLL(regs*)+0x6c>
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	53                   	push   ebx
c001b1c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1c7:	83 c4 10             	add    esp,0x10
c001b1ca:	b8 03 00 00 00       	mov    eax,0x3
c001b1cf:	eb 36                	jmp    c001b207 <Sys::loadDLL(regs*)+0xa2>
c001b1d1:	83 ec 0c             	sub    esp,0xc
c001b1d4:	53                   	push   ebx
c001b1d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1d8:	58                   	pop    eax
c001b1d9:	5a                   	pop    edx
c001b1da:	6a 00                	push   0x0
c001b1dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1df:	e8 0e 22 00 00       	call   c001d3f2 <Thr::loadDLL(char const*, bool)>
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	89 c1                	mov    ecx,eax
c001b1e9:	31 d2                	xor    edx,edx
c001b1eb:	b8 04 00 00 00       	mov    eax,0x4
c001b1f0:	85 c9                	test   ecx,ecx
c001b1f2:	74 15                	je     c001b209 <Sys::loadDLL(regs*)+0xa4>
c001b1f4:	53                   	push   ebx
c001b1f5:	53                   	push   ebx
c001b1f6:	ff 35 c8 e4 02 c0    	push   DWORD PTR ds:0xc002e4c8
c001b1fc:	51                   	push   ecx
c001b1fd:	e8 21 24 00 00       	call   c001d623 <Thr::executeDLL(unsigned long, void*)>
c001b202:	83 c4 10             	add    esp,0x10
c001b205:	31 c0                	xor    eax,eax
c001b207:	31 d2                	xor    edx,edx
c001b209:	59                   	pop    ecx
c001b20a:	5b                   	pop    ebx
c001b20b:	5e                   	pop    esi
c001b20c:	c3                   	ret    

c001b20d <Sys::read(regs*)>:
c001b20d:	57                   	push   edi
c001b20e:	56                   	push   esi
c001b20f:	53                   	push   ebx
c001b210:	83 ec 10             	sub    esp,0x10
c001b213:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b217:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b21a:	83 f8 02             	cmp    eax,0x2
c001b21d:	77 10                	ja     c001b22f <Sys::read(regs*)+0x22>
c001b21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b224:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b227:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b22d:	eb 0e                	jmp    c001b23d <Sys::read(regs*)+0x30>
c001b22f:	83 ec 0c             	sub    esp,0xc
c001b232:	50                   	push   eax
c001b233:	e8 13 61 ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	89 c1                	mov    ecx,eax
c001b23d:	83 c8 ff             	or     eax,0xffffffff
c001b240:	85 c9                	test   ecx,ecx
c001b242:	89 c2                	mov    edx,eax
c001b244:	74 28                	je     c001b26e <Sys::read(regs*)+0x61>
c001b246:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b24e:	31 ff                	xor    edi,edi
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b255:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b259:	52                   	push   edx
c001b25a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b25d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b260:	57                   	push   edi
c001b261:	56                   	push   esi
c001b262:	51                   	push   ecx
c001b263:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b26a:	83 c4 20             	add    esp,0x20
c001b26d:	99                   	cdq    
c001b26e:	83 c4 10             	add    esp,0x10
c001b271:	5b                   	pop    ebx
c001b272:	5e                   	pop    esi
c001b273:	5f                   	pop    edi
c001b274:	c3                   	ret    

c001b275 <Sys::sbrk(regs*)>:
c001b275:	56                   	push   esi
c001b276:	53                   	push   ebx
c001b277:	50                   	push   eax
c001b278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b281:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b284:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b287:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b28d:	85 db                	test   ebx,ebx
c001b28f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b292:	74 02                	je     c001b296 <Sys::sbrk(regs*)+0x21>
c001b294:	79 06                	jns    c001b29c <Sys::sbrk(regs*)+0x27>
c001b296:	89 f0                	mov    eax,esi
c001b298:	31 d2                	xor    edx,edx
c001b29a:	eb 2a                	jmp    c001b2c6 <Sys::sbrk(regs*)+0x51>
c001b29c:	83 c8 ff             	or     eax,0xffffffff
c001b29f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b2a5:	89 c2                	mov    edx,eax
c001b2a7:	77 1d                	ja     c001b2c6 <Sys::sbrk(regs*)+0x51>
c001b2a9:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2af:	50                   	push   eax
c001b2b0:	c1 ea 0c             	shr    edx,0xc
c001b2b3:	68 07 0c 00 00       	push   0xc07
c001b2b8:	52                   	push   edx
c001b2b9:	51                   	push   ecx
c001b2ba:	e8 8b 69 ff ff       	call   c0011c4a <VAS::allocatePages(int, int)>
c001b2bf:	89 f0                	mov    eax,esi
c001b2c1:	31 d2                	xor    edx,edx
c001b2c3:	83 c4 10             	add    esp,0x10
c001b2c6:	59                   	pop    ecx
c001b2c7:	5b                   	pop    ebx
c001b2c8:	5e                   	pop    esi
c001b2c9:	c3                   	ret    

c001b2ca <Sys::setCwd(regs*)>:
c001b2ca:	83 ec 14             	sub    esp,0x14
c001b2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2d1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2dc:	e8 76 7e ff ff       	call   c0013157 <Fs::setcwd(Process*, char*)>
c001b2e1:	83 c4 1c             	add    esp,0x1c
c001b2e4:	99                   	cdq    
c001b2e5:	c3                   	ret    

c001b2e6 <Sys::setTime(regs*)>:
c001b2e6:	55                   	push   ebp
c001b2e7:	31 c9                	xor    ecx,ecx
c001b2e9:	57                   	push   edi
c001b2ea:	bd 0c 00 00 00       	mov    ebp,0xc
c001b2ef:	56                   	push   esi
c001b2f0:	53                   	push   ebx
c001b2f1:	31 db                	xor    ebx,ebx
c001b2f3:	83 ec 10             	sub    esp,0x10
c001b2f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b2fa:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b2fd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b300:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b303:	89 c2                	mov    edx,eax
c001b305:	66 81 ef 6c 07       	sub    di,0x76c
c001b30a:	83 e2 1f             	and    edx,0x1f
c001b30d:	c1 e7 10             	shl    edi,0x10
c001b310:	42                   	inc    edx
c001b311:	c1 e8 05             	shr    eax,0x5
c001b314:	88 d1                	mov    cl,dl
c001b316:	31 d2                	xor    edx,edx
c001b318:	f7 f5                	div    ebp
c001b31a:	89 dd                	mov    ebp,ebx
c001b31c:	88 d5                	mov    ch,dl
c001b31e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b324:	0f b7 c1             	movzx  eax,cx
c001b327:	31 d2                	xor    edx,edx
c001b329:	09 f8                	or     eax,edi
c001b32b:	bf 3c 00 00 00       	mov    edi,0x3c
c001b330:	89 c1                	mov    ecx,eax
c001b332:	89 f0                	mov    eax,esi
c001b334:	f7 f7                	div    edi
c001b336:	c1 e2 10             	shl    edx,0x10
c001b339:	09 d5                	or     ebp,edx
c001b33b:	31 d2                	xor    edx,edx
c001b33d:	89 eb                	mov    ebx,ebp
c001b33f:	f7 f7                	div    edi
c001b341:	bf 10 0e 00 00       	mov    edi,0xe10
c001b346:	88 d7                	mov    bh,dl
c001b348:	89 f0                	mov    eax,esi
c001b34a:	31 d2                	xor    edx,edx
c001b34c:	f7 f7                	div    edi
c001b34e:	bf 18 00 00 00       	mov    edi,0x18
c001b353:	31 d2                	xor    edx,edx
c001b355:	f7 f7                	div    edi
c001b357:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b35c:	88 d3                	mov    bl,dl
c001b35e:	53                   	push   ebx
c001b35f:	51                   	push   ecx
c001b360:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b366:	e8 35 86 ff ff       	call   c00139a0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b36b:	83 c4 1c             	add    esp,0x1c
c001b36e:	83 f0 01             	xor    eax,0x1
c001b371:	5b                   	pop    ebx
c001b372:	0f b6 c0             	movzx  eax,al
c001b375:	5e                   	pop    esi
c001b376:	31 d2                	xor    edx,edx
c001b378:	5f                   	pop    edi
c001b379:	5d                   	pop    ebp
c001b37a:	c3                   	ret    

c001b37b <Sys::timezone(regs*)>:
c001b37b:	53                   	push   ebx
c001b37c:	83 ec 08             	sub    esp,0x8
c001b37f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b383:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b387:	75 17                	jne    c001b3a0 <Sys::timezone(regs*)+0x25>
c001b389:	83 ec 0c             	sub    esp,0xc
c001b38c:	68 59 c3 02 c0       	push   0xc002c359
c001b391:	e8 e6 74 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001b396:	83 c8 ff             	or     eax,0xffffffff
c001b399:	83 c4 10             	add    esp,0x10
c001b39c:	89 c2                	mov    edx,eax
c001b39e:	eb 20                	jmp    c001b3c0 <Sys::timezone(regs*)+0x45>
c001b3a0:	83 ec 0c             	sub    esp,0xc
c001b3a3:	68 6e c3 02 c0       	push   0xc002c36e
c001b3a8:	e8 cf 74 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001b3ad:	58                   	pop    eax
c001b3ae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b3b1:	e8 4c 83 ff ff       	call   c0013702 <User::loadClockSettings(int)>
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	b8 01 00 00 00       	mov    eax,0x1
c001b3be:	31 d2                	xor    edx,edx
c001b3c0:	83 c4 08             	add    esp,0x8
c001b3c3:	5b                   	pop    ebx
c001b3c4:	c3                   	ret    

c001b3c5 <Sys::write(regs*)>:
c001b3c5:	57                   	push   edi
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	83 ec 10             	sub    esp,0x10
c001b3cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3d2:	83 f8 02             	cmp    eax,0x2
c001b3d5:	77 10                	ja     c001b3e7 <Sys::write(regs*)+0x22>
c001b3d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3df:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3e5:	eb 0e                	jmp    c001b3f5 <Sys::write(regs*)+0x30>
c001b3e7:	83 ec 0c             	sub    esp,0xc
c001b3ea:	50                   	push   eax
c001b3eb:	e8 5b 5f ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b3f0:	83 c4 10             	add    esp,0x10
c001b3f3:	89 c1                	mov    ecx,eax
c001b3f5:	83 c8 ff             	or     eax,0xffffffff
c001b3f8:	85 c9                	test   ecx,ecx
c001b3fa:	89 c2                	mov    edx,eax
c001b3fc:	74 28                	je     c001b426 <Sys::write(regs*)+0x61>
c001b3fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b406:	31 ff                	xor    edi,edi
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b40d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b411:	52                   	push   edx
c001b412:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b415:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b418:	57                   	push   edi
c001b419:	56                   	push   esi
c001b41a:	51                   	push   ecx
c001b41b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b41e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b422:	83 c4 20             	add    esp,0x20
c001b425:	99                   	cdq    
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	5b                   	pop    ebx
c001b42a:	5e                   	pop    esi
c001b42b:	5f                   	pop    edi
c001b42c:	c3                   	ret    

c001b42d <Sys::wsbe(regs*)>:
c001b42d:	57                   	push   edi
c001b42e:	b9 0b 00 00 00       	mov    ecx,0xb
c001b433:	56                   	push   esi
c001b434:	be ad c3 02 c0       	mov    esi,0xc002c3ad
c001b439:	53                   	push   ebx
c001b43a:	83 ec 30             	sub    esp,0x30
c001b43d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b441:	fc                   	cld    
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b447:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b44b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b450:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b453:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b459:	8b 06                	mov    eax,DWORD PTR [esi]
c001b45b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b45e:	57                   	push   edi
c001b45f:	e8 08 53 fe ff       	call   c000076c <strlen>
c001b464:	5a                   	pop    edx
c001b465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b469:	52                   	push   edx
c001b46a:	31 d2                	xor    edx,edx
c001b46c:	57                   	push   edi
c001b46d:	52                   	push   edx
c001b46e:	50                   	push   eax
c001b46f:	56                   	push   esi
c001b470:	ff d3                	call   ebx
c001b472:	83 c4 14             	add    esp,0x14
c001b475:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b479:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b47c:	e8 e5 31 00 00       	call   c001e666 <terminateTask(int)>
c001b481:	83 c4 40             	add    esp,0x40
c001b484:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b489:	5b                   	pop    ebx
c001b48a:	31 d2                	xor    edx,edx
c001b48c:	5e                   	pop    esi
c001b48d:	5f                   	pop    edi
c001b48e:	c3                   	ret    

c001b48f <Sys::yield(regs*)>:
c001b48f:	57                   	push   edi
c001b490:	56                   	push   esi
c001b491:	53                   	push   ebx
c001b492:	fa                   	cli    
c001b493:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001b499:	e8 19 29 00 00       	call   c001ddb7 <schedule()>
c001b49e:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001b4a3:	48                   	dec    eax
c001b4a4:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001b4a9:	75 01                	jne    c001b4ac <Sys::yield(regs*)+0x1d>
c001b4ab:	fb                   	sti    
c001b4ac:	8b 35 30 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb30
c001b4b2:	8b 3d 34 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb34
c001b4b8:	89 f0                	mov    eax,esi
c001b4ba:	89 fb                	mov    ebx,edi
c001b4bc:	89 f1                	mov    ecx,esi
c001b4be:	c1 e0 07             	shl    eax,0x7
c001b4c1:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b4c5:	25 80 30 0f 00       	and    eax,0xf3080
c001b4ca:	c1 eb 17             	shr    ebx,0x17
c001b4cd:	31 c8                	xor    eax,ecx
c001b4cf:	89 da                	mov    edx,ebx
c001b4d1:	5b                   	pop    ebx
c001b4d2:	5e                   	pop    esi
c001b4d3:	5f                   	pop    edi
c001b4d4:	c3                   	ret    

c001b4d5 <sysCallSeekDir(regs*)>:
c001b4d5:	31 c0                	xor    eax,eax
c001b4d7:	31 d2                	xor    edx,edx
c001b4d9:	c3                   	ret    

c001b4da <sysCallTellDir(regs*)>:
c001b4da:	31 c0                	xor    eax,eax
c001b4dc:	31 d2                	xor    edx,edx
c001b4de:	c3                   	ret    

c001b4df <sysCallVerify(regs*)>:
c001b4df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4e3:	31 d2                	xor    edx,edx
c001b4e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4e8:	c3                   	ret    

c001b4e9 <sysCallGetArgc(regs*)>:
c001b4e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b4f7:	99                   	cdq    
c001b4f8:	c3                   	ret    

c001b4f9 <sysFormatDisk(regs*)>:
c001b4f9:	56                   	push   esi
c001b4fa:	53                   	push   ebx
c001b4fb:	53                   	push   ebx
c001b4fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b500:	8b 1d 34 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e634
c001b506:	eb 25                	jmp    c001b52d <sysFormatDisk(regs*)+0x34>
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b50e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b510:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b513:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b516:	50                   	push   eax
c001b517:	ff 34 85 c0 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1540]
c001b51e:	53                   	push   ebx
c001b51f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b522:	83 c4 20             	add    esp,0x20
c001b525:	83 f8 08             	cmp    eax,0x8
c001b528:	75 12                	jne    c001b53c <sysFormatDisk(regs*)+0x43>
c001b52a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b52d:	85 db                	test   ebx,ebx
c001b52f:	75 d7                	jne    c001b508 <sysFormatDisk(regs*)+0xf>
c001b531:	59                   	pop    ecx
c001b532:	b8 03 00 00 00       	mov    eax,0x3
c001b537:	31 d2                	xor    edx,edx
c001b539:	5b                   	pop    ebx
c001b53a:	5e                   	pop    esi
c001b53b:	c3                   	ret    
c001b53c:	85 c0                	test   eax,eax
c001b53e:	74 1b                	je     c001b55b <sysFormatDisk(regs*)+0x62>
c001b540:	83 f8 09             	cmp    eax,0x9
c001b543:	74 0b                	je     c001b550 <sysFormatDisk(regs*)+0x57>
c001b545:	59                   	pop    ecx
c001b546:	b8 02 00 00 00       	mov    eax,0x2
c001b54b:	31 d2                	xor    edx,edx
c001b54d:	5b                   	pop    ebx
c001b54e:	5e                   	pop    esi
c001b54f:	c3                   	ret    
c001b550:	59                   	pop    ecx
c001b551:	b8 01 00 00 00       	mov    eax,0x1
c001b556:	31 d2                	xor    edx,edx
c001b558:	5b                   	pop    ebx
c001b559:	5e                   	pop    esi
c001b55a:	c3                   	ret    
c001b55b:	59                   	pop    ecx
c001b55c:	31 c0                	xor    eax,eax
c001b55e:	31 d2                	xor    edx,edx
c001b560:	5b                   	pop    ebx
c001b561:	5e                   	pop    esi
c001b562:	c3                   	ret    

c001b563 <sysSetDiskVolumeLabel(regs*)>:
c001b563:	56                   	push   esi
c001b564:	53                   	push   ebx
c001b565:	53                   	push   ebx
c001b566:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b56a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b56d:	83 f8 19             	cmp    eax,0x19
c001b570:	77 29                	ja     c001b59b <sysSetDiskVolumeLabel(regs*)+0x38>
c001b572:	8b 0c 85 c0 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1540]
c001b579:	85 c9                	test   ecx,ecx
c001b57b:	74 1e                	je     c001b59b <sysSetDiskVolumeLabel(regs*)+0x38>
c001b57d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b580:	85 d2                	test   edx,edx
c001b582:	74 17                	je     c001b59b <sysSetDiskVolumeLabel(regs*)+0x38>
c001b584:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b58a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b58c:	52                   	push   edx
c001b58d:	50                   	push   eax
c001b58e:	51                   	push   ecx
c001b58f:	53                   	push   ebx
c001b590:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	99                   	cdq    
c001b597:	59                   	pop    ecx
c001b598:	5b                   	pop    ebx
c001b599:	5e                   	pop    esi
c001b59a:	c3                   	ret    
c001b59b:	59                   	pop    ecx
c001b59c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5a6:	5b                   	pop    ebx
c001b5a7:	5e                   	pop    esi
c001b5a8:	c3                   	ret    

c001b5a9 <sysGetDiskVolumeLabel(regs*)>:
c001b5a9:	57                   	push   edi
c001b5aa:	56                   	push   esi
c001b5ab:	53                   	push   ebx
c001b5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b5b3:	83 fa 19             	cmp    edx,0x19
c001b5b6:	77 34                	ja     c001b5ec <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5b8:	8b 0c 95 c0 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1540]
c001b5bf:	85 c9                	test   ecx,ecx
c001b5c1:	74 29                	je     c001b5ec <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5c3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b5c6:	85 db                	test   ebx,ebx
c001b5c8:	74 22                	je     c001b5ec <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b5cd:	85 c0                	test   eax,eax
c001b5cf:	74 1b                	je     c001b5ec <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5d1:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b5d7:	83 ec 0c             	sub    esp,0xc
c001b5da:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b5dc:	50                   	push   eax
c001b5dd:	53                   	push   ebx
c001b5de:	52                   	push   edx
c001b5df:	51                   	push   ecx
c001b5e0:	56                   	push   esi
c001b5e1:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b5e4:	83 c4 20             	add    esp,0x20
c001b5e7:	99                   	cdq    
c001b5e8:	5b                   	pop    ebx
c001b5e9:	5e                   	pop    esi
c001b5ea:	5f                   	pop    edi
c001b5eb:	c3                   	ret    
c001b5ec:	5b                   	pop    ebx
c001b5ed:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f7:	5e                   	pop    esi
c001b5f8:	5f                   	pop    edi
c001b5f9:	c3                   	ret    

c001b5fa <sysShutdown(regs*)>:
c001b5fa:	83 ec 0c             	sub    esp,0xc
c001b5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b601:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b604:	85 c0                	test   eax,eax
c001b606:	74 18                	je     c001b620 <sysShutdown(regs*)+0x26>
c001b608:	83 f8 01             	cmp    eax,0x1
c001b60b:	74 38                	je     c001b645 <sysShutdown(regs*)+0x4b>
c001b60d:	83 f8 02             	cmp    eax,0x2
c001b610:	74 24                	je     c001b636 <sysShutdown(regs*)+0x3c>
c001b612:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b617:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	c3                   	ret    
c001b620:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b625:	8b 10                	mov    edx,DWORD PTR [eax]
c001b627:	6a 00                	push   0x0
c001b629:	6a 00                	push   0x0
c001b62b:	6a 00                	push   0x0
c001b62d:	50                   	push   eax
c001b62e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	eb dc                	jmp    c001b612 <sysShutdown(regs*)+0x18>
c001b636:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001b63b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b63d:	6a 00                	push   0x0
c001b63f:	6a 00                	push   0x0
c001b641:	6a 01                	push   0x1
c001b643:	eb e8                	jmp    c001b62d <sysShutdown(regs*)+0x33>
c001b645:	a1 40 eb 02 c0       	mov    eax,ds:0xc002eb40
c001b64a:	85 c0                	test   eax,eax
c001b64c:	74 02                	je     c001b650 <sysShutdown(regs*)+0x56>
c001b64e:	ff d0                	call   eax
c001b650:	31 c0                	xor    eax,eax
c001b652:	31 d2                	xor    edx,edx
c001b654:	83 c4 0c             	add    esp,0xc
c001b657:	c3                   	ret    

c001b658 <sysCallRealpath(regs*)>:
c001b658:	83 ec 0c             	sub    esp,0xc
c001b65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b662:	85 d2                	test   edx,edx
c001b664:	74 07                	je     c001b66d <sysCallRealpath(regs*)+0x15>
c001b666:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b669:	85 c0                	test   eax,eax
c001b66b:	75 0b                	jne    c001b678 <sysCallRealpath(regs*)+0x20>
c001b66d:	b8 01 00 00 00       	mov    eax,0x1
c001b672:	31 d2                	xor    edx,edx
c001b674:	83 c4 0c             	add    esp,0xc
c001b677:	c3                   	ret    
c001b678:	51                   	push   ecx
c001b679:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b67f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b682:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b688:	51                   	push   ecx
c001b689:	52                   	push   edx
c001b68a:	50                   	push   eax
c001b68b:	e8 ac 75 ff ff       	call   c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b690:	83 c4 10             	add    esp,0x10
c001b693:	31 c0                	xor    eax,eax
c001b695:	31 d2                	xor    edx,edx
c001b697:	83 c4 0c             	add    esp,0xc
c001b69a:	c3                   	ret    

c001b69b <sysCallReadDir(regs*)>:
c001b69b:	53                   	push   ebx
c001b69c:	83 ec 18             	sub    esp,0x18
c001b69f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6a6:	83 f8 02             	cmp    eax,0x2
c001b6a9:	76 60                	jbe    c001b70b <sysCallReadDir(regs*)+0x70>
c001b6ab:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b6b2:	77 48                	ja     c001b6fc <sysCallReadDir(regs*)+0x61>
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	50                   	push   eax
c001b6b8:	e8 8e 5c ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	85 c0                	test   eax,eax
c001b6c2:	74 38                	je     c001b6fc <sysCallReadDir(regs*)+0x61>
c001b6c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6cc:	83 ec 0c             	sub    esp,0xc
c001b6cf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6d1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b6d5:	51                   	push   ecx
c001b6d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6d9:	6a 00                	push   0x0
c001b6db:	68 10 01 00 00       	push   0x110
c001b6e0:	50                   	push   eax
c001b6e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6e4:	83 c4 20             	add    esp,0x20
c001b6e7:	85 c0                	test   eax,eax
c001b6e9:	74 29                	je     c001b714 <sysCallReadDir(regs*)+0x79>
c001b6eb:	83 f8 07             	cmp    eax,0x7
c001b6ee:	74 1b                	je     c001b70b <sysCallReadDir(regs*)+0x70>
c001b6f0:	b8 02 00 00 00       	mov    eax,0x2
c001b6f5:	31 d2                	xor    edx,edx
c001b6f7:	83 c4 18             	add    esp,0x18
c001b6fa:	5b                   	pop    ebx
c001b6fb:	c3                   	ret    
c001b6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b701:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b706:	83 c4 18             	add    esp,0x18
c001b709:	5b                   	pop    ebx
c001b70a:	c3                   	ret    
c001b70b:	b8 01 00 00 00       	mov    eax,0x1
c001b710:	31 d2                	xor    edx,edx
c001b712:	eb e3                	jmp    c001b6f7 <sysCallReadDir(regs*)+0x5c>
c001b714:	31 c0                	xor    eax,eax
c001b716:	31 d2                	xor    edx,edx
c001b718:	eb dd                	jmp    c001b6f7 <sysCallReadDir(regs*)+0x5c>

c001b71a <sysCallIsATTY(regs*)>:
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b721:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b724:	83 f8 02             	cmp    eax,0x2
c001b727:	76 07                	jbe    c001b730 <sysCallIsATTY(regs*)+0x16>
c001b729:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b72e:	75 26                	jne    c001b756 <sysCallIsATTY(regs*)+0x3c>
c001b730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b735:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b738:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b73e:	85 c0                	test   eax,eax
c001b740:	74 24                	je     c001b766 <sysCallIsATTY(regs*)+0x4c>
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	8b 10                	mov    edx,DWORD PTR [eax]
c001b747:	50                   	push   eax
c001b748:	ff 12                	call   DWORD PTR [edx]
c001b74a:	31 d2                	xor    edx,edx
c001b74c:	0f b6 c0             	movzx  eax,al
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	83 c4 0c             	add    esp,0xc
c001b755:	c3                   	ret    
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	50                   	push   eax
c001b75a:	e8 ec 5b ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b75f:	83 c4 10             	add    esp,0x10
c001b762:	85 c0                	test   eax,eax
c001b764:	75 dc                	jne    c001b742 <sysCallIsATTY(regs*)+0x28>
c001b766:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b76b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b770:	83 c4 0c             	add    esp,0xc
c001b773:	c3                   	ret    

c001b774 <sysCallSeek(regs*)>:
c001b774:	53                   	push   ebx
c001b775:	83 ec 08             	sub    esp,0x8
c001b778:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b77c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b77f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b782:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b788:	77 32                	ja     c001b7bc <sysCallSeek(regs*)+0x48>
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	50                   	push   eax
c001b78e:	e8 b8 5b ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b793:	83 c4 0c             	add    esp,0xc
c001b796:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b799:	31 db                	xor    ebx,ebx
c001b79b:	53                   	push   ebx
c001b79c:	51                   	push   ecx
c001b79d:	50                   	push   eax
c001b79e:	e8 65 77 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001b7a3:	83 c4 10             	add    esp,0x10
c001b7a6:	85 c0                	test   eax,eax
c001b7a8:	0f 95 c0             	setne  al
c001b7ab:	31 d2                	xor    edx,edx
c001b7ad:	0f b6 c0             	movzx  eax,al
c001b7b0:	f7 d8                	neg    eax
c001b7b2:	83 d2 00             	adc    edx,0x0
c001b7b5:	83 c4 08             	add    esp,0x8
c001b7b8:	f7 da                	neg    edx
c001b7ba:	5b                   	pop    ebx
c001b7bb:	c3                   	ret    
c001b7bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c6:	83 c4 08             	add    esp,0x8
c001b7c9:	5b                   	pop    ebx
c001b7ca:	c3                   	ret    

c001b7cb <sysCallTell(regs*)>:
c001b7cb:	53                   	push   ebx
c001b7cc:	83 ec 08             	sub    esp,0x8
c001b7cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7d6:	83 f8 02             	cmp    eax,0x2
c001b7d9:	76 4d                	jbe    c001b828 <sysCallTell(regs*)+0x5d>
c001b7db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b7e0:	76 19                	jbe    c001b7fb <sysCallTell(regs*)+0x30>
c001b7e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7e5:	31 d2                	xor    edx,edx
c001b7e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7f4:	31 c0                	xor    eax,eax
c001b7f6:	83 c4 08             	add    esp,0x8
c001b7f9:	5b                   	pop    ebx
c001b7fa:	c3                   	ret    
c001b7fb:	83 ec 0c             	sub    esp,0xc
c001b7fe:	50                   	push   eax
c001b7ff:	e8 47 5b ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b804:	5a                   	pop    edx
c001b805:	59                   	pop    ecx
c001b806:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b809:	50                   	push   eax
c001b80a:	e8 4f 77 ff ff       	call   c0012f5e <File::tell(unsigned long long*)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	85 c0                	test   eax,eax
c001b814:	0f 95 c0             	setne  al
c001b817:	31 d2                	xor    edx,edx
c001b819:	0f b6 c0             	movzx  eax,al
c001b81c:	f7 d8                	neg    eax
c001b81e:	83 d2 00             	adc    edx,0x0
c001b821:	83 c4 08             	add    esp,0x8
c001b824:	f7 da                	neg    edx
c001b826:	5b                   	pop    ebx
c001b827:	c3                   	ret    
c001b828:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b82d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b832:	83 c4 08             	add    esp,0x8
c001b835:	5b                   	pop    ebx
c001b836:	c3                   	ret    

c001b837 <sysCallSize(regs*)>:
c001b837:	53                   	push   ebx
c001b838:	83 ec 18             	sub    esp,0x18
c001b83b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b83f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b842:	83 f8 02             	cmp    eax,0x2
c001b845:	76 53                	jbe    c001b89a <sysCallSize(regs*)+0x63>
c001b847:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b84c:	76 19                	jbe    c001b867 <sysCallSize(regs*)+0x30>
c001b84e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b851:	31 d2                	xor    edx,edx
c001b853:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b860:	31 c0                	xor    eax,eax
c001b862:	83 c4 18             	add    esp,0x18
c001b865:	5b                   	pop    ebx
c001b866:	c3                   	ret    
c001b867:	83 ec 0c             	sub    esp,0xc
c001b86a:	50                   	push   eax
c001b86b:	e8 db 5a ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b870:	83 c4 0c             	add    esp,0xc
c001b873:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b877:	52                   	push   edx
c001b878:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b87b:	50                   	push   eax
c001b87c:	e8 75 78 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	85 c0                	test   eax,eax
c001b886:	0f 95 c0             	setne  al
c001b889:	31 d2                	xor    edx,edx
c001b88b:	0f b6 c0             	movzx  eax,al
c001b88e:	f7 d8                	neg    eax
c001b890:	83 d2 00             	adc    edx,0x0
c001b893:	83 c4 18             	add    esp,0x18
c001b896:	f7 da                	neg    edx
c001b898:	5b                   	pop    ebx
c001b899:	c3                   	ret    
c001b89a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b89f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8a4:	83 c4 18             	add    esp,0x18
c001b8a7:	5b                   	pop    ebx
c001b8a8:	c3                   	ret    

c001b8a9 <sysCallSizeFromFilename(regs*)>:
c001b8a9:	57                   	push   edi
c001b8aa:	56                   	push   esi
c001b8ab:	53                   	push   ebx
c001b8ac:	83 ec 20             	sub    esp,0x20
c001b8af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8b3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b8b6:	83 fb 02             	cmp    ebx,0x2
c001b8b9:	0f 86 88 00 00 00    	jbe    c001b947 <sysCallSizeFromFilename(regs*)+0x9e>
c001b8bf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b8c5:	76 1b                	jbe    c001b8e2 <sysCallSizeFromFilename(regs*)+0x39>
c001b8c7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b8ca:	31 d2                	xor    edx,edx
c001b8cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8d9:	83 c4 20             	add    esp,0x20
c001b8dc:	31 c0                	xor    eax,eax
c001b8de:	5b                   	pop    ebx
c001b8df:	5e                   	pop    esi
c001b8e0:	5f                   	pop    edi
c001b8e1:	c3                   	ret    
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	68 14 01 00 00       	push   0x114
c001b8ea:	e8 2c 3f ff ff       	call   c000f81b <malloc>
c001b8ef:	83 c4 0c             	add    esp,0xc
c001b8f2:	89 c7                	mov    edi,eax
c001b8f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8fc:	53                   	push   ebx
c001b8fd:	57                   	push   edi
c001b8fe:	e8 e3 74 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001b903:	83 c4 0c             	add    esp,0xc
c001b906:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b90a:	50                   	push   eax
c001b90b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b90e:	57                   	push   edi
c001b90f:	e8 e2 77 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001b914:	83 c4 10             	add    esp,0x10
c001b917:	85 ff                	test   edi,edi
c001b919:	74 14                	je     c001b92f <sysCallSizeFromFilename(regs*)+0x86>
c001b91b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b91f:	8b 17                	mov    edx,DWORD PTR [edi]
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	57                   	push   edi
c001b925:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b92f:	85 c0                	test   eax,eax
c001b931:	0f 95 c0             	setne  al
c001b934:	31 d2                	xor    edx,edx
c001b936:	0f b6 c0             	movzx  eax,al
c001b939:	f7 d8                	neg    eax
c001b93b:	83 d2 00             	adc    edx,0x0
c001b93e:	83 c4 20             	add    esp,0x20
c001b941:	f7 da                	neg    edx
c001b943:	5b                   	pop    ebx
c001b944:	5e                   	pop    esi
c001b945:	5f                   	pop    edi
c001b946:	c3                   	ret    
c001b947:	83 c4 20             	add    esp,0x20
c001b94a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b94f:	5b                   	pop    ebx
c001b950:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b955:	5e                   	pop    esi
c001b956:	5f                   	pop    edi
c001b957:	c3                   	ret    

c001b958 <sysCallClose(regs*)>:
c001b958:	53                   	push   ebx
c001b959:	83 ec 08             	sub    esp,0x8
c001b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b960:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b963:	83 f8 02             	cmp    eax,0x2
c001b966:	76 41                	jbe    c001b9a9 <sysCallClose(regs*)+0x51>
c001b968:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b96e:	83 fa 01             	cmp    edx,0x1
c001b971:	76 2d                	jbe    c001b9a0 <sysCallClose(regs*)+0x48>
c001b973:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b978:	77 2f                	ja     c001b9a9 <sysCallClose(regs*)+0x51>
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	50                   	push   eax
c001b97e:	e8 c8 59 ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001b983:	89 c3                	mov    ebx,eax
c001b985:	89 04 24             	mov    DWORD PTR [esp],eax
c001b988:	e8 1b 75 ff ff       	call   c0012ea8 <File::close()>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	85 db                	test   ebx,ebx
c001b992:	74 0c                	je     c001b9a0 <sysCallClose(regs*)+0x48>
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b999:	53                   	push   ebx
c001b99a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	31 c0                	xor    eax,eax
c001b9a2:	31 d2                	xor    edx,edx
c001b9a4:	83 c4 08             	add    esp,0x8
c001b9a7:	5b                   	pop    ebx
c001b9a8:	c3                   	ret    
c001b9a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b3:	83 c4 08             	add    esp,0x8
c001b9b6:	5b                   	pop    ebx
c001b9b7:	c3                   	ret    

c001b9b8 <sysCallOpenDir(regs*)>:
c001b9b8:	56                   	push   esi
c001b9b9:	53                   	push   ebx
c001b9ba:	53                   	push   ebx
c001b9bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9bf:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b9c2:	85 f6                	test   esi,esi
c001b9c4:	74 59                	je     c001ba1f <sysCallOpenDir(regs*)+0x67>
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	68 14 01 00 00       	push   0x114
c001b9ce:	e8 48 3e ff ff       	call   c000f81b <malloc>
c001b9d3:	83 c4 0c             	add    esp,0xc
c001b9d6:	89 c6                	mov    esi,eax
c001b9d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9dd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9e3:	56                   	push   esi
c001b9e4:	e8 a9 78 ff ff       	call   c0013292 <Directory::Directory(char const*, Process*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	85 f6                	test   esi,esi
c001b9ee:	74 2f                	je     c001ba1f <sysCallOpenDir(regs*)+0x67>
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	56                   	push   esi
c001b9f4:	e8 fd 78 ff ff       	call   c00132f6 <Directory::open()>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	85 c0                	test   eax,eax
c001b9fe:	75 1f                	jne    c001ba1f <sysCallOpenDir(regs*)+0x67>
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	56                   	push   esi
c001ba04:	e8 4d 56 ff ff       	call   c0011056 <UnixFile::getFileDescriptor()>
c001ba09:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	89 02                	mov    DWORD PTR [edx],eax
c001ba11:	c1 f8 1f             	sar    eax,0x1f
c001ba14:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba17:	31 c0                	xor    eax,eax
c001ba19:	59                   	pop    ecx
c001ba1a:	31 d2                	xor    edx,edx
c001ba1c:	5b                   	pop    ebx
c001ba1d:	5e                   	pop    esi
c001ba1e:	c3                   	ret    
c001ba1f:	59                   	pop    ecx
c001ba20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba25:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2a:	5b                   	pop    ebx
c001ba2b:	5e                   	pop    esi
c001ba2c:	c3                   	ret    

c001ba2d <sysCallCloseDir(regs*)>:
c001ba2d:	53                   	push   ebx
c001ba2e:	83 ec 08             	sub    esp,0x8
c001ba31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba38:	8d 50 fd             	lea    edx,[eax-0x3]
c001ba3b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001ba41:	77 2f                	ja     c001ba72 <sysCallCloseDir(regs*)+0x45>
c001ba43:	83 ec 0c             	sub    esp,0xc
c001ba46:	50                   	push   eax
c001ba47:	e8 ff 58 ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001ba4c:	89 c3                	mov    ebx,eax
c001ba4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba51:	e8 fc 78 ff ff       	call   c0013352 <Directory::close()>
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	85 db                	test   ebx,ebx
c001ba5b:	74 0c                	je     c001ba69 <sysCallCloseDir(regs*)+0x3c>
c001ba5d:	83 ec 0c             	sub    esp,0xc
c001ba60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba62:	53                   	push   ebx
c001ba63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba66:	83 c4 10             	add    esp,0x10
c001ba69:	31 c0                	xor    eax,eax
c001ba6b:	31 d2                	xor    edx,edx
c001ba6d:	83 c4 08             	add    esp,0x8
c001ba70:	5b                   	pop    ebx
c001ba71:	c3                   	ret    
c001ba72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba77:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba7c:	83 c4 08             	add    esp,0x8
c001ba7f:	5b                   	pop    ebx
c001ba80:	c3                   	ret    

c001ba81 <sysCallMakeDir(regs*)>:
c001ba81:	56                   	push   esi
c001ba82:	53                   	push   ebx
c001ba83:	83 ec 10             	sub    esp,0x10
c001ba86:	68 14 01 00 00       	push   0x114
c001ba8b:	e8 8b 3d ff ff       	call   c000f81b <malloc>
c001ba90:	83 c4 0c             	add    esp,0xc
c001ba93:	89 c3                	mov    ebx,eax
c001ba95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baa1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001baa4:	53                   	push   ebx
c001baa5:	e8 e8 77 ff ff       	call   c0013292 <Directory::Directory(char const*, Process*)>
c001baaa:	83 c4 10             	add    esp,0x10
c001baad:	85 db                	test   ebx,ebx
c001baaf:	74 32                	je     c001bae3 <sysCallMakeDir(regs*)+0x62>
c001bab1:	83 ec 0c             	sub    esp,0xc
c001bab4:	53                   	push   ebx
c001bab5:	e8 1c 7a ff ff       	call   c00134d6 <Directory::create()>
c001baba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001babd:	89 c6                	mov    esi,eax
c001babf:	e8 8e 78 ff ff       	call   c0013352 <Directory::close()>
c001bac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bacc:	83 c4 10             	add    esp,0x10
c001bacf:	31 c0                	xor    eax,eax
c001bad1:	59                   	pop    ecx
c001bad2:	85 f6                	test   esi,esi
c001bad4:	5b                   	pop    ebx
c001bad5:	0f 95 c0             	setne  al
c001bad8:	5e                   	pop    esi
c001bad9:	31 d2                	xor    edx,edx
c001badb:	f7 d8                	neg    eax
c001badd:	83 d2 00             	adc    edx,0x0
c001bae0:	f7 da                	neg    edx
c001bae2:	c3                   	ret    
c001bae3:	59                   	pop    ecx
c001bae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baee:	5b                   	pop    ebx
c001baef:	5e                   	pop    esi
c001baf0:	c3                   	ret    

c001baf1 <sysCallWait(regs*)>:
c001baf1:	83 ec 10             	sub    esp,0x10
c001baf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001baf8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bafb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bafe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bb01:	e8 b4 24 00 00       	call   c001dfba <waitTask(int, int*, int)>
c001bb06:	83 c4 1c             	add    esp,0x1c
c001bb09:	99                   	cdq    
c001bb0a:	c3                   	ret    

c001bb0b <sysCallNotImpl(regs*)>:
c001bb0b:	83 ec 18             	sub    esp,0x18
c001bb0e:	68 d9 c3 02 c0       	push   0xc002c3d9
c001bb13:	e8 0d e7 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001bb18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb22:	83 c4 1c             	add    esp,0x1c
c001bb25:	c3                   	ret    

c001bb26 <sysPanic(regs*)>:
c001bb26:	83 ec 18             	sub    esp,0x18
c001bb29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb2d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bb30:	e8 f0 e6 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001bb35:	b8 01 00 00 00       	mov    eax,0x1
c001bb3a:	31 d2                	xor    edx,edx
c001bb3c:	83 c4 1c             	add    esp,0x1c
c001bb3f:	c3                   	ret    

c001bb40 <sysCallRmdir(regs*)>:
c001bb40:	56                   	push   esi
c001bb41:	53                   	push   ebx
c001bb42:	83 ec 20             	sub    esp,0x20
c001bb45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb49:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb4c:	68 14 01 00 00       	push   0x114
c001bb51:	e8 c5 3c ff ff       	call   c000f81b <malloc>
c001bb56:	83 c4 0c             	add    esp,0xc
c001bb59:	89 c3                	mov    ebx,eax
c001bb5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb60:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb63:	56                   	push   esi
c001bb64:	53                   	push   ebx
c001bb65:	e8 7c 72 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001bb6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb6d:	e8 50 74 ff ff       	call   c0012fc2 <File::unlink()>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	85 db                	test   ebx,ebx
c001bb77:	74 14                	je     c001bb8d <sysCallRmdir(regs*)+0x4d>
c001bb79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb7f:	83 ec 0c             	sub    esp,0xc
c001bb82:	53                   	push   ebx
c001bb83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8d:	85 c0                	test   eax,eax
c001bb8f:	0f 95 c0             	setne  al
c001bb92:	31 d2                	xor    edx,edx
c001bb94:	0f b6 c0             	movzx  eax,al
c001bb97:	f7 d8                	neg    eax
c001bb99:	83 d2 00             	adc    edx,0x0
c001bb9c:	83 c4 14             	add    esp,0x14
c001bb9f:	f7 da                	neg    edx
c001bba1:	5b                   	pop    ebx
c001bba2:	5e                   	pop    esi
c001bba3:	c3                   	ret    

c001bba4 <sysCallUnlink(regs*)>:
c001bba4:	56                   	push   esi
c001bba5:	53                   	push   ebx
c001bba6:	83 ec 20             	sub    esp,0x20
c001bba9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bbad:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bbb0:	68 14 01 00 00       	push   0x114
c001bbb5:	e8 61 3c ff ff       	call   c000f81b <malloc>
c001bbba:	83 c4 0c             	add    esp,0xc
c001bbbd:	89 c3                	mov    ebx,eax
c001bbbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbc4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbc7:	56                   	push   esi
c001bbc8:	53                   	push   ebx
c001bbc9:	e8 18 72 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001bbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbd1:	e8 ec 73 ff ff       	call   c0012fc2 <File::unlink()>
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	85 db                	test   ebx,ebx
c001bbdb:	74 14                	je     c001bbf1 <sysCallUnlink(regs*)+0x4d>
c001bbdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbe1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbe3:	83 ec 0c             	sub    esp,0xc
c001bbe6:	53                   	push   ebx
c001bbe7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbf1:	85 c0                	test   eax,eax
c001bbf3:	0f 95 c0             	setne  al
c001bbf6:	31 d2                	xor    edx,edx
c001bbf8:	0f b6 c0             	movzx  eax,al
c001bbfb:	f7 d8                	neg    eax
c001bbfd:	83 d2 00             	adc    edx,0x0
c001bc00:	83 c4 14             	add    esp,0x14
c001bc03:	f7 da                	neg    edx
c001bc05:	5b                   	pop    ebx
c001bc06:	5e                   	pop    esi
c001bc07:	c3                   	ret    

c001bc08 <sysCallGetArgv(regs*)>:
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc0f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bc12:	85 c0                	test   eax,eax
c001bc14:	78 2b                	js     c001bc41 <sysCallGetArgv(regs*)+0x39>
c001bc16:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bc1c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bc1f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bc25:	7d 1a                	jge    c001bc41 <sysCallGetArgv(regs*)+0x39>
c001bc27:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bc2e:	85 c0                	test   eax,eax
c001bc30:	74 17                	je     c001bc49 <sysCallGetArgv(regs*)+0x41>
c001bc32:	83 ec 08             	sub    esp,0x8
c001bc35:	50                   	push   eax
c001bc36:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bc39:	e8 ce 4b fe ff       	call   c000080c <strcpy>
c001bc3e:	83 c4 10             	add    esp,0x10
c001bc41:	31 c0                	xor    eax,eax
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	83 c4 0c             	add    esp,0xc
c001bc48:	c3                   	ret    
c001bc49:	b8 01 00 00 00       	mov    eax,0x1
c001bc4e:	31 d2                	xor    edx,edx
c001bc50:	83 c4 0c             	add    esp,0xc
c001bc53:	c3                   	ret    

c001bc54 <sysCallTTYName(regs*)>:
c001bc54:	56                   	push   esi
c001bc55:	53                   	push   ebx
c001bc56:	53                   	push   ebx
c001bc57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc5b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bc5e:	85 c0                	test   eax,eax
c001bc60:	74 5f                	je     c001bcc1 <sysCallTTYName(regs*)+0x6d>
c001bc62:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc65:	83 f8 02             	cmp    eax,0x2
c001bc68:	77 3e                	ja     c001bca8 <sysCallTTYName(regs*)+0x54>
c001bc6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc72:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bc78:	85 db                	test   ebx,ebx
c001bc7a:	74 45                	je     c001bcc1 <sysCallTTYName(regs*)+0x6d>
c001bc7c:	83 ec 0c             	sub    esp,0xc
c001bc7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc81:	53                   	push   ebx
c001bc82:	ff 10                	call   DWORD PTR [eax]
c001bc84:	83 c4 10             	add    esp,0x10
c001bc87:	84 c0                	test   al,al
c001bc89:	74 41                	je     c001bccc <sysCallTTYName(regs*)+0x78>
c001bc8b:	83 ec 08             	sub    esp,0x8
c001bc8e:	81 c3 82 00 00 00    	add    ebx,0x82
c001bc94:	53                   	push   ebx
c001bc95:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc98:	e8 6f 4b fe ff       	call   c000080c <strcpy>
c001bc9d:	83 c4 10             	add    esp,0x10
c001bca0:	31 c0                	xor    eax,eax
c001bca2:	59                   	pop    ecx
c001bca3:	31 d2                	xor    edx,edx
c001bca5:	5b                   	pop    ebx
c001bca6:	5e                   	pop    esi
c001bca7:	c3                   	ret    
c001bca8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcad:	74 bb                	je     c001bc6a <sysCallTTYName(regs*)+0x16>
c001bcaf:	83 ec 0c             	sub    esp,0xc
c001bcb2:	50                   	push   eax
c001bcb3:	e8 93 56 ff ff       	call   c001134b <getFromFileDescriptor(int)>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	89 c3                	mov    ebx,eax
c001bcbd:	85 db                	test   ebx,ebx
c001bcbf:	75 bb                	jne    c001bc7c <sysCallTTYName(regs*)+0x28>
c001bcc1:	59                   	pop    ecx
c001bcc2:	b8 01 00 00 00       	mov    eax,0x1
c001bcc7:	31 d2                	xor    edx,edx
c001bcc9:	5b                   	pop    ebx
c001bcca:	5e                   	pop    esi
c001bccb:	c3                   	ret    
c001bccc:	59                   	pop    ecx
c001bccd:	b8 02 00 00 00       	mov    eax,0x2
c001bcd2:	31 d2                	xor    edx,edx
c001bcd4:	5b                   	pop    ebx
c001bcd5:	5e                   	pop    esi
c001bcd6:	c3                   	ret    

c001bcd7 <sysCallUSleep(regs*)>:
c001bcd7:	83 ec 14             	sub    esp,0x14
c001bcda:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bcdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bce3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bcea:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bced:	01 ca                	add    edx,ecx
c001bcef:	52                   	push   edx
c001bcf0:	50                   	push   eax
c001bcf1:	e8 9b 23 00 00       	call   c001e091 <nanoSleep(unsigned long long)>
c001bcf6:	31 c0                	xor    eax,eax
c001bcf8:	31 d2                	xor    edx,edx
c001bcfa:	83 c4 1c             	add    esp,0x1c
c001bcfd:	c3                   	ret    

c001bcfe <sysCallSpawn(regs*)>:
c001bcfe:	56                   	push   esi
c001bcff:	53                   	push   ebx
c001bd00:	50                   	push   eax
c001bd01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bd08:	85 c0                	test   eax,eax
c001bd0a:	75 08                	jne    c001bd14 <sysCallSpawn(regs*)+0x16>
c001bd0c:	59                   	pop    ecx
c001bd0d:	31 c0                	xor    eax,eax
c001bd0f:	31 d2                	xor    edx,edx
c001bd11:	5b                   	pop    ebx
c001bd12:	5e                   	pop    esi
c001bd13:	c3                   	ret    
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	68 3f 07 00 00       	push   0x73f
c001bd1c:	e8 fa 3a ff ff       	call   c000f81b <malloc>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	89 c6                	mov    esi,eax
c001bd26:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bd29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd2c:	85 c0                	test   eax,eax
c001bd2e:	75 32                	jne    c001bd62 <sysCallSpawn(regs*)+0x64>
c001bd30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd38:	52                   	push   edx
c001bd39:	50                   	push   eax
c001bd3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd3d:	56                   	push   esi
c001bd3e:	e8 73 1a 00 00       	call   c001d7b6 <Process::Process(char const*, Process*, char**)>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bd4d:	75 bd                	jne    c001bd0c <sysCallSpawn(regs*)+0xe>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	56                   	push   esi
c001bd53:	e8 40 1f 00 00       	call   c001dc98 <Process::createUserThread()>
c001bd58:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	99                   	cdq    
c001bd5e:	59                   	pop    ecx
c001bd5f:	5b                   	pop    ebx
c001bd60:	5e                   	pop    esi
c001bd61:	c3                   	ret    
c001bd62:	31 c0                	xor    eax,eax
c001bd64:	eb d2                	jmp    c001bd38 <sysCallSpawn(regs*)+0x3a>

c001bd66 <sysCallGetEnv(regs*)>:
c001bd66:	57                   	push   edi
c001bd67:	56                   	push   esi
c001bd68:	53                   	push   ebx
c001bd69:	83 ec 1c             	sub    esp,0x1c
c001bd6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bd70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd75:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bd78:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bd7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7e:	e8 ee e3 ff ff       	call   c001a171 <Krnl::getProcessTotalEnvCount(Process*)>
c001bd83:	83 c4 10             	add    esp,0x10
c001bd86:	39 c7                	cmp    edi,eax
c001bd88:	7c 14                	jl     c001bd9e <sysCallGetEnv(regs*)+0x38>
c001bd8a:	85 f6                	test   esi,esi
c001bd8c:	75 0b                	jne    c001bd99 <sysCallGetEnv(regs*)+0x33>
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	31 c0                	xor    eax,eax
c001bd93:	5b                   	pop    ebx
c001bd94:	31 d2                	xor    edx,edx
c001bd96:	5e                   	pop    esi
c001bd97:	5f                   	pop    edi
c001bd98:	c3                   	ret    
c001bd99:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bd9c:	eb f0                	jmp    c001bd8e <sysCallGetEnv(regs*)+0x28>
c001bd9e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bda2:	52                   	push   edx
c001bda3:	57                   	push   edi
c001bda4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bdaa:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bdad:	50                   	push   eax
c001bdae:	e8 de e3 ff ff       	call   c001a191 <Krnl::getProcessEnvPair(Process*, int)>
c001bdb3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bdb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdba:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bdbe:	83 c4 0c             	add    esp,0xc
c001bdc1:	85 c9                	test   ecx,ecx
c001bdc3:	75 23                	jne    c001bde8 <sysCallGetEnv(regs*)+0x82>
c001bdc5:	83 ec 0c             	sub    esp,0xc
c001bdc8:	50                   	push   eax
c001bdc9:	e8 9e 49 fe ff       	call   c000076c <strlen>
c001bdce:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdd1:	89 c3                	mov    ebx,eax
c001bdd3:	e8 94 49 fe ff       	call   c000076c <strlen>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bddf:	83 c4 10             	add    esp,0x10
c001bde2:	31 d2                	xor    edx,edx
c001bde4:	5b                   	pop    ebx
c001bde5:	5e                   	pop    esi
c001bde6:	5f                   	pop    edi
c001bde7:	c3                   	ret    
c001bde8:	83 ec 08             	sub    esp,0x8
c001bdeb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bdee:	50                   	push   eax
c001bdef:	56                   	push   esi
c001bdf0:	e8 17 4a fe ff       	call   c000080c <strcpy>
c001bdf5:	58                   	pop    eax
c001bdf6:	5a                   	pop    edx
c001bdf7:	68 f3 c3 02 c0       	push   0xc002c3f3
c001bdfc:	56                   	push   esi
c001bdfd:	e8 4a 4b fe ff       	call   c000094c <strcat>
c001be02:	59                   	pop    ecx
c001be03:	5b                   	pop    ebx
c001be04:	57                   	push   edi
c001be05:	56                   	push   esi
c001be06:	e8 41 4b fe ff       	call   c000094c <strcat>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	e9 7b ff ff ff       	jmp    c001bd8e <sysCallGetEnv(regs*)+0x28>

c001be13 <sysAppSettings(regs*)>:
c001be13:	57                   	push   edi
c001be14:	56                   	push   esi
c001be15:	56                   	push   esi
c001be16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be1d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001be23:	25 e0 1f 00 00       	and    eax,0x1fe0
c001be28:	66 3d c0 09          	cmp    ax,0x9c0
c001be2c:	75 2e                	jne    c001be5c <sysAppSettings(regs*)+0x49>
c001be2e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001be34:	83 e0 1f             	and    eax,0x1f
c001be37:	3c 01                	cmp    al,0x1
c001be39:	74 2c                	je     c001be67 <sysAppSettings(regs*)+0x54>
c001be3b:	3c 07                	cmp    al,0x7
c001be3d:	0f 84 b3 00 00 00    	je     c001bef6 <sysAppSettings(regs*)+0xe3>
c001be43:	84 c0                	test   al,al
c001be45:	0f 84 d2 00 00 00    	je     c001bf1d <sysAppSettings(regs*)+0x10a>
c001be4b:	3c 08                	cmp    al,0x8
c001be4d:	74 63                	je     c001beb2 <sysAppSettings(regs*)+0x9f>
c001be4f:	59                   	pop    ecx
c001be50:	0f b6 c0             	movzx  eax,al
c001be53:	5e                   	pop    esi
c001be54:	05 e8 03 00 00       	add    eax,0x3e8
c001be59:	5f                   	pop    edi
c001be5a:	99                   	cdq    
c001be5b:	c3                   	ret    
c001be5c:	b8 01 00 00 00       	mov    eax,0x1
c001be61:	59                   	pop    ecx
c001be62:	31 d2                	xor    edx,edx
c001be64:	5e                   	pop    esi
c001be65:	5f                   	pop    edi
c001be66:	c3                   	ret    
c001be67:	50                   	push   eax
c001be68:	68 00 01 00 00       	push   0x100
c001be6d:	6a 00                	push   0x0
c001be6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be77:	83 c0 0c             	add    eax,0xc
c001be7a:	50                   	push   eax
c001be7b:	e8 d0 48 fe ff       	call   c0000750 <memset>
c001be80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be85:	b9 ff 00 00 00       	mov    ecx,0xff
c001be8a:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001be8d:	83 c7 0c             	add    edi,0xc
c001be90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be97:	5a                   	pop    edx
c001be98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be9b:	59                   	pop    ecx
c001be9c:	8d 50 0c             	lea    edx,[eax+0xc]
c001be9f:	52                   	push   edx
c001bea0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bea6:	e8 c9 45 ff ff       	call   c0010474 <VgaText::setTitle(char*)>
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	31 c0                	xor    eax,eax
c001beb0:	eb af                	jmp    c001be61 <sysAppSettings(regs*)+0x4e>
c001beb2:	83 ec 08             	sub    esp,0x8
c001beb5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bebb:	83 e0 0f             	and    eax,0xf
c001bebe:	50                   	push   eax
c001bebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001becd:	e8 92 45 ff ff       	call   c0010464 <VgaText::setTitleColour(VgaColour)>
c001bed2:	5f                   	pop    edi
c001bed3:	58                   	pop    eax
c001bed4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001beda:	c1 e8 04             	shr    eax,0x4
c001bedd:	83 e0 0f             	and    eax,0xf
c001bee0:	50                   	push   eax
c001bee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bee9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001beef:	e8 60 45 ff ff       	call   c0010454 <VgaText::setTitleTextColour(VgaColour)>
c001bef4:	eb b5                	jmp    c001beab <sysAppSettings(regs*)+0x98>
c001bef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001befb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001befe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bf04:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bf0a:	c0 e8 06             	shr    al,0x6
c001bf0d:	83 e0 01             	and    eax,0x1
c001bf10:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bf16:	31 c0                	xor    eax,eax
c001bf18:	e9 44 ff ff ff       	jmp    c001be61 <sysAppSettings(regs*)+0x4e>
c001bf1d:	b8 02 00 00 00       	mov    eax,0x2
c001bf22:	e9 3a ff ff ff       	jmp    c001be61 <sysAppSettings(regs*)+0x4e>

c001bf27 <sysSetFatAttrib(regs*)>:
c001bf27:	57                   	push   edi
c001bf28:	56                   	push   esi
c001bf29:	53                   	push   ebx
c001bf2a:	83 ec 1c             	sub    esp,0x1c
c001bf2d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bf31:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bf34:	68 14 01 00 00       	push   0x114
c001bf39:	e8 dd 38 ff ff       	call   c000f81b <malloc>
c001bf3e:	83 c4 0c             	add    esp,0xc
c001bf41:	89 c3                	mov    ebx,eax
c001bf43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf48:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf4b:	57                   	push   edi
c001bf4c:	53                   	push   ebx
c001bf4d:	e8 94 6e ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001bf52:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf55:	83 c4 0c             	add    esp,0xc
c001bf58:	0f b6 d4             	movzx  edx,ah
c001bf5b:	0f b6 c0             	movzx  eax,al
c001bf5e:	52                   	push   edx
c001bf5f:	50                   	push   eax
c001bf60:	53                   	push   ebx
c001bf61:	e8 f6 70 ff ff       	call   c001305c <File::chfatattr(unsigned char, unsigned char)>
c001bf66:	83 c4 10             	add    esp,0x10
c001bf69:	85 db                	test   ebx,ebx
c001bf6b:	74 14                	je     c001bf81 <sysSetFatAttrib(regs*)+0x5a>
c001bf6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf71:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf73:	83 ec 0c             	sub    esp,0xc
c001bf76:	53                   	push   ebx
c001bf77:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf7a:	83 c4 10             	add    esp,0x10
c001bf7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf81:	85 c0                	test   eax,eax
c001bf83:	0f 95 c0             	setne  al
c001bf86:	31 d2                	xor    edx,edx
c001bf88:	0f b6 c0             	movzx  eax,al
c001bf8b:	f7 d8                	neg    eax
c001bf8d:	83 d2 00             	adc    edx,0x0
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	f7 da                	neg    edx
c001bf95:	5b                   	pop    ebx
c001bf96:	5e                   	pop    esi
c001bf97:	5f                   	pop    edi
c001bf98:	c3                   	ret    

c001bf99 <sysPipe(regs*)>:
c001bf99:	57                   	push   edi
c001bf9a:	56                   	push   esi
c001bf9b:	53                   	push   ebx
c001bf9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa0:	83 ec 0c             	sub    esp,0xc
c001bfa3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bfa6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bfa9:	6a 20                	push   0x20
c001bfab:	e8 6b 38 ff ff       	call   c000f81b <malloc>
c001bfb0:	89 c3                	mov    ebx,eax
c001bfb2:	58                   	pop    eax
c001bfb3:	5a                   	pop    edx
c001bfb4:	68 00 50 00 00       	push   0x5000
c001bfb9:	53                   	push   ebx
c001bfba:	e8 2d 42 ff ff       	call   c00101ec <Pipe::Pipe(int)>
c001bfbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc2:	e8 8f 50 ff ff       	call   c0011056 <UnixFile::getFileDescriptor()>
c001bfc7:	89 07                	mov    DWORD PTR [edi],eax
c001bfc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfcc:	e8 85 50 ff ff       	call   c0011056 <UnixFile::getFileDescriptor()>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	89 06                	mov    DWORD PTR [esi],eax
c001bfd6:	31 d2                	xor    edx,edx
c001bfd8:	5b                   	pop    ebx
c001bfd9:	31 c0                	xor    eax,eax
c001bfdb:	5e                   	pop    esi
c001bfdc:	5f                   	pop    edi
c001bfdd:	c3                   	ret    

c001bfde <sysGetUnixTime(regs*)>:
c001bfde:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001bfe3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfe9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfed:	e9 e6 77 ff ff       	jmp    c00137d8 <Clock::timeInSecondsLocal()>

c001bff2 <string_ends_with(char const*, char const*)>:
c001bff2:	57                   	push   edi
c001bff3:	56                   	push   esi
c001bff4:	53                   	push   ebx
c001bff5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bff9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bffd:	83 ec 0c             	sub    esp,0xc
c001c000:	53                   	push   ebx
c001c001:	e8 66 47 fe ff       	call   c000076c <strlen>
c001c006:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c009:	89 c6                	mov    esi,eax
c001c00b:	e8 5c 47 fe ff       	call   c000076c <strlen>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	39 c6                	cmp    esi,eax
c001c015:	7d 06                	jge    c001c01d <string_ends_with(char const*, char const*)+0x2b>
c001c017:	5b                   	pop    ebx
c001c018:	31 c0                	xor    eax,eax
c001c01a:	5e                   	pop    esi
c001c01b:	5f                   	pop    edi
c001c01c:	c3                   	ret    
c001c01d:	83 ec 08             	sub    esp,0x8
c001c020:	29 c6                	sub    esi,eax
c001c022:	57                   	push   edi
c001c023:	01 f3                	add    ebx,esi
c001c025:	53                   	push   ebx
c001c026:	e8 6d 48 fe ff       	call   c0000898 <strcmp>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	85 c0                	test   eax,eax
c001c030:	5b                   	pop    ebx
c001c031:	0f 94 c0             	sete   al
c001c034:	5e                   	pop    esi
c001c035:	0f b6 c0             	movzx  eax,al
c001c038:	5f                   	pop    edi
c001c039:	c3                   	ret    

c001c03a <sysCallOpen(regs*)>:
c001c03a:	56                   	push   esi
c001c03b:	53                   	push   ebx
c001c03c:	81 ec 04 01 00 00    	sub    esp,0x104
c001c042:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c049:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c04c:	85 c9                	test   ecx,ecx
c001c04e:	0f 84 ad 01 00 00    	je     c001c201 <sysCallOpen(regs*)+0x1c7>
c001c054:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c057:	85 c0                	test   eax,eax
c001c059:	0f 84 a2 01 00 00    	je     c001c201 <sysCallOpen(regs*)+0x1c7>
c001c05f:	52                   	push   edx
c001c060:	68 f5 c3 02 c0       	push   0xc002c3f5
c001c065:	50                   	push   eax
c001c066:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c06a:	56                   	push   esi
c001c06b:	e8 cc 6b ff ff       	call   c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c070:	89 34 24             	mov    DWORD PTR [esp],esi
c001c073:	e8 f4 46 fe ff       	call   c000076c <strlen>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	48                   	dec    eax
c001c07c:	74 1d                	je     c001c09b <sysCallOpen(regs*)+0x61>
c001c07e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c081:	eb 0f                	jmp    c001c092 <sysCallOpen(regs*)+0x58>
c001c083:	80 fa 3a             	cmp    dl,0x3a
c001c086:	74 0f                	je     c001c097 <sysCallOpen(regs*)+0x5d>
c001c088:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c08c:	48                   	dec    eax
c001c08d:	74 0c                	je     c001c09b <sysCallOpen(regs*)+0x61>
c001c08f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c092:	80 fa 2e             	cmp    dl,0x2e
c001c095:	75 ec                	jne    c001c083 <sysCallOpen(regs*)+0x49>
c001c097:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c09b:	83 ec 08             	sub    esp,0x8
c001c09e:	68 f9 c3 02 c0       	push   0xc002c3f9
c001c0a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0a6:	e8 47 ff ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c0ab:	83 c4 10             	add    esp,0x10
c001c0ae:	85 c0                	test   eax,eax
c001c0b0:	74 1d                	je     c001c0cf <sysCallOpen(regs*)+0x95>
c001c0b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c0b5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c0bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0c2:	81 c4 04 01 00 00    	add    esp,0x104
c001c0c8:	31 c0                	xor    eax,eax
c001c0ca:	31 d2                	xor    edx,edx
c001c0cc:	5b                   	pop    ebx
c001c0cd:	5e                   	pop    esi
c001c0ce:	c3                   	ret    
c001c0cf:	83 ec 08             	sub    esp,0x8
c001c0d2:	68 fe c3 02 c0       	push   0xc002c3fe
c001c0d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0da:	e8 13 ff ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	85 c0                	test   eax,eax
c001c0e4:	75 cc                	jne    c001c0b2 <sysCallOpen(regs*)+0x78>
c001c0e6:	83 ec 08             	sub    esp,0x8
c001c0e9:	68 fa c3 02 c0       	push   0xc002c3fa
c001c0ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0f1:	e8 a2 47 fe ff       	call   c0000898 <strcmp>
c001c0f6:	83 c4 10             	add    esp,0x10
c001c0f9:	85 c0                	test   eax,eax
c001c0fb:	74 b5                	je     c001c0b2 <sysCallOpen(regs*)+0x78>
c001c0fd:	83 ec 08             	sub    esp,0x8
c001c100:	68 f9 c3 02 c0       	push   0xc002c3f9
c001c105:	56                   	push   esi
c001c106:	e8 e7 fe ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	85 c0                	test   eax,eax
c001c110:	75 a0                	jne    c001c0b2 <sysCallOpen(regs*)+0x78>
c001c112:	83 ec 08             	sub    esp,0x8
c001c115:	68 03 c4 02 c0       	push   0xc002c403
c001c11a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c11d:	e8 d0 fe ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c122:	83 c4 10             	add    esp,0x10
c001c125:	85 c0                	test   eax,eax
c001c127:	0f 85 e7 00 00 00    	jne    c001c214 <sysCallOpen(regs*)+0x1da>
c001c12d:	83 ec 08             	sub    esp,0x8
c001c130:	68 08 c4 02 c0       	push   0xc002c408
c001c135:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c138:	e8 b5 fe ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c13d:	83 c4 10             	add    esp,0x10
c001c140:	85 c0                	test   eax,eax
c001c142:	0f 85 cc 00 00 00    	jne    c001c214 <sysCallOpen(regs*)+0x1da>
c001c148:	83 ec 08             	sub    esp,0x8
c001c14b:	68 04 c4 02 c0       	push   0xc002c404
c001c150:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c153:	e8 40 47 fe ff       	call   c0000898 <strcmp>
c001c158:	83 c4 10             	add    esp,0x10
c001c15b:	85 c0                	test   eax,eax
c001c15d:	0f 84 b1 00 00 00    	je     c001c214 <sysCallOpen(regs*)+0x1da>
c001c163:	83 ec 08             	sub    esp,0x8
c001c166:	68 03 c4 02 c0       	push   0xc002c403
c001c16b:	56                   	push   esi
c001c16c:	e8 81 fe ff ff       	call   c001bff2 <string_ends_with(char const*, char const*)>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	85 c0                	test   eax,eax
c001c176:	0f 85 98 00 00 00    	jne    c001c214 <sysCallOpen(regs*)+0x1da>
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	68 14 01 00 00       	push   0x114
c001c184:	e8 92 36 ff ff       	call   c000f81b <malloc>
c001c189:	83 c4 0c             	add    esp,0xc
c001c18c:	89 c6                	mov    esi,eax
c001c18e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c193:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c196:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c199:	56                   	push   esi
c001c19a:	e8 47 6c ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001c19f:	83 c4 10             	add    esp,0x10
c001c1a2:	85 f6                	test   esi,esi
c001c1a4:	74 5b                	je     c001c201 <sysCallOpen(regs*)+0x1c7>
c001c1a6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c1a9:	0f b6 c2             	movzx  eax,dl
c001c1ac:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c1af:	89 d0                	mov    eax,edx
c001c1b1:	83 e0 01             	and    eax,0x1
c001c1b4:	f6 c2 02             	test   dl,0x2
c001c1b7:	74 03                	je     c001c1bc <sysCallOpen(regs*)+0x182>
c001c1b9:	83 c8 02             	or     eax,0x2
c001c1bc:	f6 c2 04             	test   dl,0x4
c001c1bf:	74 03                	je     c001c1c4 <sysCallOpen(regs*)+0x18a>
c001c1c1:	83 c8 04             	or     eax,0x4
c001c1c4:	f6 c2 08             	test   dl,0x8
c001c1c7:	74 03                	je     c001c1cc <sysCallOpen(regs*)+0x192>
c001c1c9:	83 c8 0a             	or     eax,0xa
c001c1cc:	83 e2 10             	and    edx,0x10
c001c1cf:	74 03                	je     c001c1d4 <sysCallOpen(regs*)+0x19a>
c001c1d1:	83 c8 12             	or     eax,0x12
c001c1d4:	83 ec 08             	sub    esp,0x8
c001c1d7:	50                   	push   eax
c001c1d8:	56                   	push   esi
c001c1d9:	e8 6c 6c ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001c1de:	83 c4 10             	add    esp,0x10
c001c1e1:	85 c0                	test   eax,eax
c001c1e3:	75 1c                	jne    c001c201 <sysCallOpen(regs*)+0x1c7>
c001c1e5:	83 ec 0c             	sub    esp,0xc
c001c1e8:	56                   	push   esi
c001c1e9:	e8 68 4e ff ff       	call   c0011056 <UnixFile::getFileDescriptor()>
c001c1ee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1f1:	83 c4 10             	add    esp,0x10
c001c1f4:	89 02                	mov    DWORD PTR [edx],eax
c001c1f6:	c1 f8 1f             	sar    eax,0x1f
c001c1f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1fc:	e9 c1 fe ff ff       	jmp    c001c0c2 <sysCallOpen(regs*)+0x88>
c001c201:	81 c4 04 01 00 00    	add    esp,0x104
c001c207:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c20c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c211:	5b                   	pop    ebx
c001c212:	5e                   	pop    esi
c001c213:	c3                   	ret    
c001c214:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c217:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c21d:	e9 99 fe ff ff       	jmp    c001c0bb <sysCallOpen(regs*)+0x81>

c001c222 <Sys::loadSyscalls()>:
c001c222:	c7 05 00 f0 02 c0 8f b4 01 c0 	mov    DWORD PTR ds:0xc002f000,0xc001b48f
c001c22c:	c7 05 04 f0 02 c0 84 b0 01 c0 	mov    DWORD PTR ds:0xc002f004,0xc001b084
c001c236:	c7 05 08 f0 02 c0 75 b2 01 c0 	mov    DWORD PTR ds:0xc002f008,0xc001b275
c001c240:	c7 05 0c f0 02 c0 c5 b3 01 c0 	mov    DWORD PTR ds:0xc002f00c,0xc001b3c5
c001c24a:	c7 05 10 f0 02 c0 0d b2 01 c0 	mov    DWORD PTR ds:0xc002f010,0xc001b20d
c001c254:	c7 05 14 f0 02 c0 bb b0 01 c0 	mov    DWORD PTR ds:0xc002f014,0xc001b0bb
c001c25e:	c7 05 18 f0 02 c0 9c b0 01 c0 	mov    DWORD PTR ds:0xc002f018,0xc001b09c
c001c268:	c7 05 1c f0 02 c0 ca b2 01 c0 	mov    DWORD PTR ds:0xc002f01c,0xc001b2ca
c001c272:	c7 05 24 f0 02 c0 58 b9 01 c0 	mov    DWORD PTR ds:0xc002f024,0xc001b958
c001c27c:	c7 05 20 f0 02 c0 3a c0 01 c0 	mov    DWORD PTR ds:0xc002f020,0xc001c03a
c001c286:	c7 05 28 f0 02 c0 b8 b9 01 c0 	mov    DWORD PTR ds:0xc002f028,0xc001b9b8
c001c290:	c7 05 2c f0 02 c0 9b b6 01 c0 	mov    DWORD PTR ds:0xc002f02c,0xc001b69b
c001c29a:	c7 05 30 f0 02 c0 d5 b4 01 c0 	mov    DWORD PTR ds:0xc002f030,0xc001b4d5
c001c2a4:	c7 05 34 f0 02 c0 da b4 01 c0 	mov    DWORD PTR ds:0xc002f034,0xc001b4da
c001c2ae:	c7 05 38 f0 02 c0 81 ba 01 c0 	mov    DWORD PTR ds:0xc002f038,0xc001ba81
c001c2b8:	c7 05 3c f0 02 c0 2d ba 01 c0 	mov    DWORD PTR ds:0xc002f03c,0xc001ba2d
c001c2c2:	c7 05 40 f0 02 c0 74 b7 01 c0 	mov    DWORD PTR ds:0xc002f040,0xc001b774
c001c2cc:	c7 05 44 f0 02 c0 cb b7 01 c0 	mov    DWORD PTR ds:0xc002f044,0xc001b7cb
c001c2d6:	c7 05 48 f0 02 c0 37 b8 01 c0 	mov    DWORD PTR ds:0xc002f048,0xc001b837
c001c2e0:	c7 05 4c f0 02 c0 df b4 01 c0 	mov    DWORD PTR ds:0xc002f04c,0xc001b4df
c001c2ea:	c7 05 50 f0 02 c0 f1 ba 01 c0 	mov    DWORD PTR ds:0xc002f050,0xc001baf1
c001c2f4:	c7 05 54 f0 02 c0 0b bb 01 c0 	mov    DWORD PTR ds:0xc002f054,0xc001bb0b
c001c2fe:	c7 05 58 f0 02 c0 0b bb 01 c0 	mov    DWORD PTR ds:0xc002f058,0xc001bb0b
c001c308:	c7 05 5c f0 02 c0 40 bb 01 c0 	mov    DWORD PTR ds:0xc002f05c,0xc001bb40
c001c312:	c7 05 60 f0 02 c0 a4 bb 01 c0 	mov    DWORD PTR ds:0xc002f060,0xc001bba4
c001c31c:	c7 05 64 f0 02 c0 e9 b4 01 c0 	mov    DWORD PTR ds:0xc002f064,0xc001b4e9
c001c326:	c7 05 68 f0 02 c0 08 bc 01 c0 	mov    DWORD PTR ds:0xc002f068,0xc001bc08
c001c330:	c7 05 6c f0 02 c0 58 b6 01 c0 	mov    DWORD PTR ds:0xc002f06c,0xc001b658
c001c33a:	c7 05 70 f0 02 c0 54 bc 01 c0 	mov    DWORD PTR ds:0xc002f070,0xc001bc54
c001c344:	c7 05 74 f0 02 c0 1a b7 01 c0 	mov    DWORD PTR ds:0xc002f074,0xc001b71a
c001c34e:	c7 05 78 f0 02 c0 d7 bc 01 c0 	mov    DWORD PTR ds:0xc002f078,0xc001bcd7
c001c358:	c7 05 7c f0 02 c0 a9 b8 01 c0 	mov    DWORD PTR ds:0xc002f07c,0xc001b8a9
c001c362:	c7 05 80 f0 02 c0 fe bc 01 c0 	mov    DWORD PTR ds:0xc002f080,0xc001bcfe
c001c36c:	c7 05 84 f0 02 c0 66 bd 01 c0 	mov    DWORD PTR ds:0xc002f084,0xc001bd66
c001c376:	c7 05 88 f0 02 c0 13 be 01 c0 	mov    DWORD PTR ds:0xc002f088,0xc001be13
c001c380:	c7 05 8c f0 02 c0 f9 b4 01 c0 	mov    DWORD PTR ds:0xc002f08c,0xc001b4f9
c001c38a:	c7 05 90 f0 02 c0 63 b5 01 c0 	mov    DWORD PTR ds:0xc002f090,0xc001b563
c001c394:	c7 05 94 f0 02 c0 a9 b5 01 c0 	mov    DWORD PTR ds:0xc002f094,0xc001b5a9
c001c39e:	c7 05 98 f0 02 c0 27 bf 01 c0 	mov    DWORD PTR ds:0xc002f098,0xc001bf27
c001c3a8:	c7 05 9c f0 02 c0 26 bb 01 c0 	mov    DWORD PTR ds:0xc002f09c,0xc001bb26
c001c3b2:	c7 05 a0 f0 02 c0 fa b5 01 c0 	mov    DWORD PTR ds:0xc002f0a0,0xc001b5fa
c001c3bc:	c7 05 a4 f0 02 c0 99 bf 01 c0 	mov    DWORD PTR ds:0xc002f0a4,0xc001bf99
c001c3c6:	c7 05 a8 f0 02 c0 de bf 01 c0 	mov    DWORD PTR ds:0xc002f0a8,0xc001bfde
c001c3d0:	c7 05 ac f0 02 c0 65 b1 01 c0 	mov    DWORD PTR ds:0xc002f0ac,0xc001b165
c001c3da:	c7 05 b0 f0 02 c0 e6 b2 01 c0 	mov    DWORD PTR ds:0xc002f0b0,0xc001b2e6
c001c3e4:	c7 05 b4 f0 02 c0 7b b3 01 c0 	mov    DWORD PTR ds:0xc002f0b4,0xc001b37b
c001c3ee:	c7 05 b8 f0 02 c0 4e b0 01 c0 	mov    DWORD PTR ds:0xc002f0b8,0xc001b04e
c001c3f8:	c7 05 bc f0 02 c0 2d b4 01 c0 	mov    DWORD PTR ds:0xc002f0bc,0xc001b42d
c001c402:	c7 05 c0 f0 02 c0 c7 b0 01 c0 	mov    DWORD PTR ds:0xc002f0c0,0xc001b0c7
c001c40c:	c7 05 c4 f0 02 c0 e1 b0 01 c0 	mov    DWORD PTR ds:0xc002f0c4,0xc001b0e1
c001c416:	c3                   	ret    

c001c417 <Sys::systemCall(regs*, void*)>:
c001c417:	53                   	push   ebx
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c41f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c422:	83 f8 7f             	cmp    eax,0x7f
c001c425:	77 16                	ja     c001c43d <Sys::systemCall(regs*, void*)+0x26>
c001c427:	8b 14 85 00 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1000]
c001c42e:	85 d2                	test   edx,edx
c001c430:	74 0b                	je     c001c43d <Sys::systemCall(regs*, void*)+0x26>
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	53                   	push   ebx
c001c436:	ff d2                	call   edx
c001c438:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c43b:	eb 0d                	jmp    c001c44a <Sys::systemCall(regs*, void*)+0x33>
c001c43d:	52                   	push   edx
c001c43e:	52                   	push   edx
c001c43f:	50                   	push   eax
c001c440:	68 0d c4 02 c0       	push   0xc002c40d
c001c445:	e8 32 64 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c44a:	83 c4 10             	add    esp,0x10
c001c44d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c452:	31 d2                	xor    edx,edx
c001c454:	83 c4 08             	add    esp,0x8
c001c457:	5b                   	pop    ebx
c001c458:	c3                   	ret    

c001c459 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c459:	55                   	push   ebp
c001c45a:	57                   	push   edi
c001c45b:	56                   	push   esi
c001c45c:	53                   	push   ebx
c001c45d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c463:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c46a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c471:	85 c0                	test   eax,eax
c001c473:	0f 95 c1             	setne  cl
c001c476:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c47e:	0f 94 c2             	sete   dl
c001c481:	84 d1                	test   cl,dl
c001c483:	74 23                	je     c001c4a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c485:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c48b:	74 1b                	je     c001c4a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c48d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c493:	89 da                	mov    edx,ebx
c001c495:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c49b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c4a1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c4a8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c4af:	05 ff 0f 00 00       	add    eax,0xfff
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4bb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c4c1:	c1 e8 0c             	shr    eax,0xc
c001c4c4:	89 fe                	mov    esi,edi
c001c4c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4ca:	c1 ee 0c             	shr    esi,0xc
c001c4cd:	6a 01                	push   0x1
c001c4cf:	e8 cd 4f ff ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c001c4d4:	89 c5                	mov    ebp,eax
c001c4d6:	58                   	pop    eax
c001c4d7:	5a                   	pop    edx
c001c4d8:	56                   	push   esi
c001c4d9:	68 21 c4 02 c0       	push   0xc002c421
c001c4de:	e8 99 63 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c4e3:	59                   	pop    ecx
c001c4e4:	58                   	pop    eax
c001c4e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c4e9:	68 33 c4 02 c0       	push   0xc002c433
c001c4ee:	e8 89 63 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c4fc:	0f 86 31 01 00 00    	jbe    c001c633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c502:	c1 e6 0c             	shl    esi,0xc
c001c505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c508:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c50f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c516:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c519:	01 df                	add    edi,ebx
c001c51b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c51e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c522:	0f 84 08 01 00 00    	je     c001c630 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c528:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c52e:	76 05                	jbe    c001c535 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c530:	bf 00 10 00 00       	mov    edi,0x1000
c001c535:	83 ec 0c             	sub    esp,0xc
c001c538:	31 d2                	xor    edx,edx
c001c53a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c541:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c543:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c547:	50                   	push   eax
c001c548:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c54c:	56                   	push   esi
c001c54d:	52                   	push   edx
c001c54e:	57                   	push   edi
c001c54f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c556:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c559:	83 c4 20             	add    esp,0x20
c001c55c:	85 c0                	test   eax,eax
c001c55e:	74 0a                	je     c001c56a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c560:	53                   	push   ebx
c001c561:	53                   	push   ebx
c001c562:	50                   	push   eax
c001c563:	68 45 c4 02 c0       	push   0xc002c445
c001c568:	eb 0f                	jmp    c001c579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c56a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c56e:	74 20                	je     c001c590 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c570:	51                   	push   ecx
c001c571:	51                   	push   ecx
c001c572:	6a 00                	push   0x0
c001c574:	68 70 c4 02 c0       	push   0xc002c470
c001c579:	e8 fe 62 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c57e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c581:	e8 4b 52 ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c586:	83 c4 10             	add    esp,0x10
c001c589:	31 c0                	xor    eax,eax
c001c58b:	e9 68 01 00 00       	jmp    c001c6f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c590:	fa                   	cli    
c001c591:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001c597:	e8 7b 36 ff ff       	call   c000fc17 <Phys::allocatePage()>
c001c59c:	6a 07                	push   0x7
c001c59e:	89 c7                	mov    edi,eax
c001c5a0:	55                   	push   ebp
c001c5a1:	50                   	push   eax
c001c5a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5aa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5b0:	e8 93 55 ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c5b5:	83 c4 0c             	add    esp,0xc
c001c5b8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c5bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5c5:	6a 00                	push   0x0
c001c5c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5d5:	e8 c8 53 ff ff       	call   c00119a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c5da:	58                   	pop    eax
c001c5db:	5a                   	pop    edx
c001c5dc:	68 07 0c 00 00       	push   0xc07
c001c5e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c5e5:	57                   	push   edi
c001c5e6:	89 ef                	mov    edi,ebp
c001c5e8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5f5:	6a 00                	push   0x0
c001c5f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c605:	e8 fa 58 ff ff       	call   c0011f04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c60a:	b9 00 10 00 00       	mov    ecx,0x1000
c001c60f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c611:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001c616:	83 c4 20             	add    esp,0x20
c001c619:	48                   	dec    eax
c001c61a:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001c61f:	85 c0                	test   eax,eax
c001c621:	75 01                	jne    c001c624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c623:	fb                   	sti    
c001c624:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c62b:	e9 df fe ff ff       	jmp    c001c50f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c630:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c633:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c63b:	0f 86 a9 00 00 00    	jbe    c001c6ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c641:	fa                   	cli    
c001c642:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001c648:	51                   	push   ecx
c001c649:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c650:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c656:	6a 00                	push   0x0
c001c658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c65d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c660:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c666:	e8 37 53 ff ff       	call   c00119a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c66b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c66f:	c1 e6 0c             	shl    esi,0xc
c001c672:	01 de                	add    esi,ebx
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	39 de                	cmp    esi,ebx
c001c679:	74 61                	je     c001c6dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c67b:	e8 97 35 ff ff       	call   c000fc17 <Phys::allocatePage()>
c001c680:	6a 07                	push   0x7
c001c682:	89 c7                	mov    edi,eax
c001c684:	55                   	push   ebp
c001c685:	50                   	push   eax
c001c686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c68b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c68e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c694:	e8 af 54 ff ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c699:	58                   	pop    eax
c001c69a:	5a                   	pop    edx
c001c69b:	68 07 0c 00 00       	push   0xc07
c001c6a0:	53                   	push   ebx
c001c6a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c6a7:	57                   	push   edi
c001c6a8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c6af:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6b5:	6a 00                	push   0x0
c001c6b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6c5:	e8 3a 58 ff ff       	call   c0011f04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c6ca:	83 c4 1c             	add    esp,0x1c
c001c6cd:	68 00 10 00 00       	push   0x1000
c001c6d2:	6a 00                	push   0x0
c001c6d4:	55                   	push   ebp
c001c6d5:	e8 76 40 fe ff       	call   c0000750 <memset>
c001c6da:	eb 98                	jmp    c001c674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c6dc:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001c6e1:	48                   	dec    eax
c001c6e2:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001c6e7:	75 01                	jne    c001c6ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c6e9:	fb                   	sti    
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	55                   	push   ebp
c001c6ee:	e8 de 50 ff ff       	call   c00117d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	b0 01                	mov    al,0x1
c001c6f8:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c6fe:	5b                   	pop    ebx
c001c6ff:	5e                   	pop    esi
c001c700:	5f                   	pop    edi
c001c701:	5d                   	pop    ebp
c001c702:	c3                   	ret    

c001c703 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c703:	55                   	push   ebp
c001c704:	57                   	push   edi
c001c705:	56                   	push   esi
c001c706:	53                   	push   ebx
c001c707:	83 ec 48             	sub    esp,0x48
c001c70a:	68 14 01 00 00       	push   0x114
c001c70f:	e8 07 31 ff ff       	call   c000f81b <malloc>
c001c714:	83 c4 0c             	add    esp,0xc
c001c717:	89 c6                	mov    esi,eax
c001c719:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c71d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c721:	50                   	push   eax
c001c722:	e8 bf 66 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001c727:	58                   	pop    eax
c001c728:	5a                   	pop    edx
c001c729:	6a 01                	push   0x1
c001c72b:	56                   	push   esi
c001c72c:	e8 19 67 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	85 c0                	test   eax,eax
c001c736:	0f 85 47 01 00 00    	jne    c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c73c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	6a 34                	push   0x34
c001c749:	e8 cd 30 ff ff       	call   c000f81b <malloc>
c001c74e:	89 c3                	mov    ebx,eax
c001c750:	58                   	pop    eax
c001c751:	8b 06                	mov    eax,DWORD PTR [esi]
c001c753:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c757:	57                   	push   edi
c001c758:	53                   	push   ebx
c001c759:	6a 00                	push   0x0
c001c75b:	6a 34                	push   0x34
c001c75d:	56                   	push   esi
c001c75e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c761:	83 c4 20             	add    esp,0x20
c001c764:	85 c0                	test   eax,eax
c001c766:	0f 85 17 01 00 00    	jne    c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c76c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c772:	0f 85 0b 01 00 00    	jne    c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c778:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c77b:	85 c0                	test   eax,eax
c001c77d:	0f 84 00 01 00 00    	je     c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c783:	31 d2                	xor    edx,edx
c001c785:	55                   	push   ebp
c001c786:	52                   	push   edx
c001c787:	50                   	push   eax
c001c788:	56                   	push   esi
c001c789:	e8 7a 67 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001c78e:	83 c4 10             	add    esp,0x10
c001c791:	85 c0                	test   eax,eax
c001c793:	0f 85 ea 00 00 00    	jne    c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c799:	83 ec 0c             	sub    esp,0xc
c001c79c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c79f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c7a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7a7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c7ab:	0f af c2             	imul   eax,edx
c001c7ae:	50                   	push   eax
c001c7af:	e8 67 30 ff ff       	call   c000f81b <malloc>
c001c7b4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7c1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c7c5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c7c9:	0f af c2             	imul   eax,edx
c001c7cc:	99                   	cdq    
c001c7cd:	52                   	push   edx
c001c7ce:	50                   	push   eax
c001c7cf:	56                   	push   esi
c001c7d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7d3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c7d6:	83 c4 20             	add    esp,0x20
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	0f 84 a2 00 00 00    	je     c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7e1:	31 d2                	xor    edx,edx
c001c7e3:	51                   	push   ecx
c001c7e4:	52                   	push   edx
c001c7e5:	50                   	push   eax
c001c7e6:	56                   	push   esi
c001c7e7:	e8 1c 67 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	85 c0                	test   eax,eax
c001c7f1:	0f 85 8c 00 00 00    	jne    c001c883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7f7:	83 ec 0c             	sub    esp,0xc
c001c7fa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7fe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c802:	31 ed                	xor    ebp,ebp
c001c804:	0f af c2             	imul   eax,edx
c001c807:	50                   	push   eax
c001c808:	e8 0e 30 ff ff       	call   c000f81b <malloc>
c001c80d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c80f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c813:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c81a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c81e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c822:	0f af c2             	imul   eax,edx
c001c825:	99                   	cdq    
c001c826:	52                   	push   edx
c001c827:	50                   	push   eax
c001c828:	56                   	push   esi
c001c829:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c82c:	83 c4 20             	add    esp,0x20
c001c82f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c837:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c83b:	0f 86 80 00 00 00    	jbe    c001c8c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c841:	0f b7 fd             	movzx  edi,bp
c001c844:	c1 e7 05             	shl    edi,0x5
c001c847:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c84b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c84e:	75 6b                	jne    c001c8bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c850:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c857:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c85e:	52                   	push   edx
c001c85f:	31 d2                	xor    edx,edx
c001c861:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c864:	52                   	push   edx
c001c865:	50                   	push   eax
c001c866:	56                   	push   esi
c001c867:	e8 9c 66 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	85 c0                	test   eax,eax
c001c871:	74 17                	je     c001c88a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c873:	83 ec 0c             	sub    esp,0xc
c001c876:	68 9c c4 02 c0       	push   0xc002c49c
c001c87b:	e8 fc 5f ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c880:	83 c4 10             	add    esp,0x10
c001c883:	31 c0                	xor    eax,eax
c001c885:	e9 87 00 00 00       	jmp    c001c911 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c890:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c893:	50                   	push   eax
c001c894:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c898:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c89c:	56                   	push   esi
c001c89d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c8a1:	e8 b3 fb ff ff       	call   c001c459 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c8a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8aa:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c8ae:	83 c4 20             	add    esp,0x20
c001c8b1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c8b5:	73 04                	jae    c001c8bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8bb:	45                   	inc    ebp
c001c8bc:	e9 76 ff ff ff       	jmp    c001c837 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c8c1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c8c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8cd:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c8d3:	83 ec 0c             	sub    esp,0xc
c001c8d6:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c8dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c8e1:	05 00 10 00 00       	add    eax,0x1000
c001c8e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ed:	e8 39 2f ff ff       	call   c000f82b <free>
c001c8f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8f5:	e8 31 2f ff ff       	call   c000f82b <free>
c001c8fa:	58                   	pop    eax
c001c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8ff:	e8 27 2f ff ff       	call   c000f82b <free>
c001c904:	89 34 24             	mov    DWORD PTR [esp],esi
c001c907:	e8 9c 65 ff ff       	call   c0012ea8 <File::close()>
c001c90c:	83 c4 10             	add    esp,0x10
c001c90f:	b0 01                	mov    al,0x1
c001c911:	83 c4 3c             	add    esp,0x3c
c001c914:	5b                   	pop    ebx
c001c915:	5e                   	pop    esi
c001c916:	5f                   	pop    edi
c001c917:	5d                   	pop    ebp
c001c918:	c3                   	ret    

c001c919 <Thr::runtimeReferenceHelper()>:
c001c919:	83 ec 18             	sub    esp,0x18
c001c91c:	68 a4 c4 02 c0       	push   0xc002c4a4
c001c921:	e8 56 5f ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001c926:	fa                   	cli    
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	eb fe                	jmp    c001c92a <Thr::runtimeReferenceHelper()+0x11>

c001c92c <Thr::getAddressOfKernelSymbol(char const*)>:
c001c92c:	57                   	push   edi
c001c92d:	56                   	push   esi
c001c92e:	53                   	push   ebx
c001c92f:	31 db                	xor    ebx,ebx
c001c931:	39 1d a0 f9 02 c0    	cmp    DWORD PTR ds:0xc002f9a0,ebx
c001c937:	7e 3c                	jle    c001c975 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c939:	8b 34 9d 20 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd06e0]
c001c940:	31 ff                	xor    edi,edi
c001c942:	39 3c 9d 20 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd07e0],edi
c001c949:	7e 27                	jle    c001c972 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c94b:	50                   	push   eax
c001c94c:	50                   	push   eax
c001c94d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c951:	8b 06                	mov    eax,DWORD PTR [esi]
c001c953:	03 04 9d a0 f8 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0760]
c001c95a:	50                   	push   eax
c001c95b:	e8 38 3f fe ff       	call   c0000898 <strcmp>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	85 c0                	test   eax,eax
c001c965:	75 05                	jne    c001c96c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c967:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c96a:	eb 0b                	jmp    c001c977 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c96c:	83 c6 10             	add    esi,0x10
c001c96f:	47                   	inc    edi
c001c970:	eb d0                	jmp    c001c942 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c972:	43                   	inc    ebx
c001c973:	eb bc                	jmp    c001c931 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c975:	31 c0                	xor    eax,eax
c001c977:	5b                   	pop    ebx
c001c978:	5e                   	pop    esi
c001c979:	5f                   	pop    edi
c001c97a:	c3                   	ret    

c001c97b <Thr::loadKernelSymbolTable(char const*)>:
c001c97b:	55                   	push   ebp
c001c97c:	57                   	push   edi
c001c97d:	56                   	push   esi
c001c97e:	53                   	push   ebx
c001c97f:	83 ec 68             	sub    esp,0x68
c001c982:	8b 35 f0 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f9f0
c001c988:	68 14 01 00 00       	push   0x114
c001c98d:	e8 89 2e ff ff       	call   c000f81b <malloc>
c001c992:	83 c4 0c             	add    esp,0xc
c001c995:	89 c3                	mov    ebx,eax
c001c997:	56                   	push   esi
c001c998:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c99c:	50                   	push   eax
c001c99d:	e8 44 64 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001c9a2:	5e                   	pop    esi
c001c9a3:	5f                   	pop    edi
c001c9a4:	6a 01                	push   0x1
c001c9a6:	53                   	push   ebx
c001c9a7:	e8 9e 64 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	74 0a                	je     c001c9bd <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c9b3:	83 ec 0c             	sub    esp,0xc
c001c9b6:	68 c6 c4 02 c0       	push   0xc002c4c6
c001c9bb:	eb 34                	jmp    c001c9f1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c9bd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c9c5:	83 ec 0c             	sub    esp,0xc
c001c9c8:	6a 34                	push   0x34
c001c9ca:	e8 4c 2e ff ff       	call   c000f81b <malloc>
c001c9cf:	59                   	pop    ecx
c001c9d0:	89 c7                	mov    edi,eax
c001c9d2:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c9d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9d8:	56                   	push   esi
c001c9d9:	57                   	push   edi
c001c9da:	6a 00                	push   0x0
c001c9dc:	6a 34                	push   0x34
c001c9de:	53                   	push   ebx
c001c9df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9e2:	83 c4 20             	add    esp,0x20
c001c9e5:	85 c0                	test   eax,eax
c001c9e7:	74 17                	je     c001ca00 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c9e9:	83 ec 0c             	sub    esp,0xc
c001c9ec:	68 dd c4 02 c0       	push   0xc002c4dd
c001c9f1:	e8 2f d8 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	31 c0                	xor    eax,eax
c001c9fb:	e9 31 02 00 00       	jmp    c001cc31 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ca00:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca06:	75 e1                	jne    c001c9e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca08:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca0b:	85 c0                	test   eax,eax
c001ca0d:	74 da                	je     c001c9e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca0f:	52                   	push   edx
c001ca10:	31 d2                	xor    edx,edx
c001ca12:	52                   	push   edx
c001ca13:	50                   	push   eax
c001ca14:	53                   	push   ebx
c001ca15:	e8 ee 64 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	85 c0                	test   eax,eax
c001ca1f:	75 c8                	jne    c001c9e9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca21:	83 ec 0c             	sub    esp,0xc
c001ca24:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca28:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca2c:	31 ed                	xor    ebp,ebp
c001ca2e:	0f af c2             	imul   eax,edx
c001ca31:	50                   	push   eax
c001ca32:	e8 e4 2d ff ff       	call   c000f81b <malloc>
c001ca37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca3d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca44:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca4c:	0f af c2             	imul   eax,edx
c001ca4f:	99                   	cdq    
c001ca50:	52                   	push   edx
c001ca51:	50                   	push   eax
c001ca52:	53                   	push   ebx
c001ca53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca56:	83 c4 20             	add    esp,0x20
c001ca59:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca61:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca79:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca7d:	0f 86 aa 00 00 00    	jbe    c001cb2d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca83:	0f b7 f5             	movzx  esi,bp
c001ca86:	6b f6 28             	imul   esi,esi,0x28
c001ca89:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca8d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca94:	50                   	push   eax
c001ca95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca99:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca9d:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca9f:	6b c0 28             	imul   eax,eax,0x28
c001caa2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001caa6:	89 d0                	mov    eax,edx
c001caa8:	31 d2                	xor    edx,edx
c001caaa:	52                   	push   edx
c001caab:	50                   	push   eax
c001caac:	53                   	push   ebx
c001caad:	e8 56 64 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cab2:	83 c4 0c             	add    esp,0xc
c001cab5:	6a 20                	push   0x20
c001cab7:	6a 00                	push   0x0
c001cab9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cabd:	52                   	push   edx
c001cabe:	e8 8d 3c fe ff       	call   c0000750 <memset>
c001cac3:	58                   	pop    eax
c001cac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cac6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001caca:	51                   	push   ecx
c001cacb:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cacf:	52                   	push   edx
c001cad0:	6a 00                	push   0x0
c001cad2:	6a 1f                	push   0x1f
c001cad4:	53                   	push   ebx
c001cad5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad8:	83 c4 18             	add    esp,0x18
c001cadb:	68 f4 c4 02 c0       	push   0xc002c4f4
c001cae0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cae4:	52                   	push   edx
c001cae5:	e8 ae 3d fe ff       	call   c0000898 <strcmp>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	85 c0                	test   eax,eax
c001caef:	75 0f                	jne    c001cb00 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001caf1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cafc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb00:	50                   	push   eax
c001cb01:	50                   	push   eax
c001cb02:	68 fc c4 02 c0       	push   0xc002c4fc
c001cb07:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cb0b:	50                   	push   eax
c001cb0c:	e8 87 3d fe ff       	call   c0000898 <strcmp>
c001cb11:	83 c4 10             	add    esp,0x10
c001cb14:	85 c0                	test   eax,eax
c001cb16:	75 0f                	jne    c001cb27 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cb18:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb27:	45                   	inc    ebp
c001cb28:	e9 4c ff ff ff       	jmp    c001ca79 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cb2d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb32:	75 10                	jne    c001cb44 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cb34:	83 ec 0c             	sub    esp,0xc
c001cb37:	68 04 c5 02 c0       	push   0xc002c504
c001cb3c:	e8 e4 d6 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001cb41:	83 c4 10             	add    esp,0x10
c001cb44:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cb49:	75 10                	jne    c001cb5b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cb4b:	83 ec 0c             	sub    esp,0xc
c001cb4e:	68 04 c5 02 c0       	push   0xc002c504
c001cb53:	e8 cd d6 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	31 d2                	xor    edx,edx
c001cb5d:	50                   	push   eax
c001cb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb62:	52                   	push   edx
c001cb63:	50                   	push   eax
c001cb64:	53                   	push   ebx
c001cb65:	e8 9e 63 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cb6a:	5a                   	pop    edx
c001cb6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb6f:	e8 a7 2c ff ff       	call   c000f81b <malloc>
c001cb74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb7c:	31 c9                	xor    ecx,ecx
c001cb7e:	5e                   	pop    esi
c001cb7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb81:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb85:	55                   	push   ebp
c001cb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb8a:	51                   	push   ecx
c001cb8b:	52                   	push   edx
c001cb8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb90:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb94:	53                   	push   ebx
c001cb95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb98:	83 c4 14             	add    esp,0x14
c001cb9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb9f:	e8 77 2c ff ff       	call   c000f81b <malloc>
c001cba4:	89 c6                	mov    esi,eax
c001cba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cba8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbab:	56                   	push   esi
c001cbac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cbb4:	51                   	push   ecx
c001cbb5:	52                   	push   edx
c001cbb6:	53                   	push   ebx
c001cbb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbbe:	8b 15 a0 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f9a0
c001cbc4:	83 c4 1c             	add    esp,0x1c
c001cbc7:	c1 e8 04             	shr    eax,0x4
c001cbca:	89 04 95 20 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd07e0],eax
c001cbd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbd5:	31 d2                	xor    edx,edx
c001cbd7:	52                   	push   edx
c001cbd8:	50                   	push   eax
c001cbd9:	53                   	push   ebx
c001cbda:	e8 29 63 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cbdf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbe1:	31 d2                	xor    edx,edx
c001cbe3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbe6:	56                   	push   esi
c001cbe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbeb:	52                   	push   edx
c001cbec:	50                   	push   eax
c001cbed:	53                   	push   ebx
c001cbee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbf1:	83 c4 14             	add    esp,0x14
c001cbf4:	53                   	push   ebx
c001cbf5:	e8 ae 62 ff ff       	call   c0012ea8 <File::close()>
c001cbfa:	5d                   	pop    ebp
c001cbfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbff:	e8 27 2c ff ff       	call   c000f82b <free>
c001cc04:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc07:	e8 1f 2c ff ff       	call   c000f82b <free>
c001cc0c:	a1 a0 f9 02 c0       	mov    eax,ds:0xc002f9a0
c001cc11:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc15:	8d 50 01             	lea    edx,[eax+0x1]
c001cc18:	89 0c 85 20 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd06e0],ecx
c001cc1f:	89 34 85 a0 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0760],esi
c001cc26:	89 15 a0 f9 02 c0    	mov    DWORD PTR ds:0xc002f9a0,edx
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	b0 01                	mov    al,0x1
c001cc31:	83 c4 5c             	add    esp,0x5c
c001cc34:	5b                   	pop    ebx
c001cc35:	5e                   	pop    esi
c001cc36:	5f                   	pop    edi
c001cc37:	5d                   	pop    ebp
c001cc38:	c3                   	ret    

c001cc39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc39:	55                   	push   ebp
c001cc3a:	57                   	push   edi
c001cc3b:	56                   	push   esi
c001cc3c:	53                   	push   ebx
c001cc3d:	81 ec 68 03 00 00    	sub    esp,0x368
c001cc43:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cc4a:	8b 1d f0 f9 02 c0    	mov    ebx,DWORD PTR ds:0xc002f9f0
c001cc50:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cc54:	68 14 01 00 00       	push   0x114
c001cc59:	e8 bd 2b ff ff       	call   c000f81b <malloc>
c001cc5e:	83 c4 0c             	add    esp,0xc
c001cc61:	89 c5                	mov    ebp,eax
c001cc63:	53                   	push   ebx
c001cc64:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cc6b:	50                   	push   eax
c001cc6c:	e8 75 61 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001cc71:	5e                   	pop    esi
c001cc72:	5f                   	pop    edi
c001cc73:	6a 01                	push   0x1
c001cc75:	55                   	push   ebp
c001cc76:	e8 cf 61 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	85 c0                	test   eax,eax
c001cc80:	0f 85 a7 06 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc86:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	6a 34                	push   0x34
c001cc93:	e8 83 2b ff ff       	call   c000f81b <malloc>
c001cc98:	5b                   	pop    ebx
c001cc99:	89 c7                	mov    edi,eax
c001cc9b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cca2:	53                   	push   ebx
c001cca3:	57                   	push   edi
c001cca4:	6a 00                	push   0x0
c001cca6:	6a 34                	push   0x34
c001cca8:	55                   	push   ebp
c001cca9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccac:	83 c4 20             	add    esp,0x20
c001ccaf:	85 c0                	test   eax,eax
c001ccb1:	0f 85 76 06 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccb7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccbd:	0f 85 6a 06 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccc3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccc6:	85 c0                	test   eax,eax
c001ccc8:	0f 84 5f 06 00 00    	je     c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccce:	31 d2                	xor    edx,edx
c001ccd0:	51                   	push   ecx
c001ccd1:	52                   	push   edx
c001ccd2:	50                   	push   eax
c001ccd3:	55                   	push   ebp
c001ccd4:	e8 2f 62 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	85 c0                	test   eax,eax
c001ccde:	0f 85 49 06 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cce4:	83 ec 0c             	sub    esp,0xc
c001cce7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ccea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ccf2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf6:	0f af c2             	imul   eax,edx
c001ccf9:	50                   	push   eax
c001ccfa:	e8 1c 2b ff ff       	call   c000f81b <malloc>
c001ccff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd0d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd11:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd15:	0f af c2             	imul   eax,edx
c001cd18:	99                   	cdq    
c001cd19:	52                   	push   edx
c001cd1a:	50                   	push   eax
c001cd1b:	55                   	push   ebp
c001cd1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd1f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cd22:	83 c4 20             	add    esp,0x20
c001cd25:	85 c0                	test   eax,eax
c001cd27:	0f 84 00 06 00 00    	je     c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd2d:	52                   	push   edx
c001cd2e:	31 d2                	xor    edx,edx
c001cd30:	52                   	push   edx
c001cd31:	50                   	push   eax
c001cd32:	55                   	push   ebp
c001cd33:	e8 d0 61 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	85 c0                	test   eax,eax
c001cd3d:	0f 85 ea 05 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd43:	83 ec 0c             	sub    esp,0xc
c001cd46:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd4a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd4e:	31 f6                	xor    esi,esi
c001cd50:	0f af c2             	imul   eax,edx
c001cd53:	50                   	push   eax
c001cd54:	e8 c2 2a ff ff       	call   c000f81b <malloc>
c001cd59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd67:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd6b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd6f:	0f af c2             	imul   eax,edx
c001cd72:	99                   	cdq    
c001cd73:	52                   	push   edx
c001cd74:	50                   	push   eax
c001cd75:	55                   	push   ebp
c001cd76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd79:	83 c4 20             	add    esp,0x20
c001cd7c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd80:	0f 86 8a 00 00 00    	jbe    c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd86:	0f b7 de             	movzx  ebx,si
c001cd89:	c1 e3 05             	shl    ebx,0x5
c001cd8c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd90:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd93:	75 75                	jne    c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd95:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd98:	31 d2                	xor    edx,edx
c001cd9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cda1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cda5:	50                   	push   eax
c001cda6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cda9:	52                   	push   edx
c001cdaa:	50                   	push   eax
c001cdab:	55                   	push   ebp
c001cdac:	e8 57 61 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	85 c0                	test   eax,eax
c001cdb6:	0f 85 71 05 00 00    	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdbc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cdc3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdc6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cdca:	31 d2                	xor    edx,edx
c001cdcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cdd0:	83 ec 0c             	sub    esp,0xc
c001cdd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdd7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdde:	50                   	push   eax
c001cddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cde3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde7:	52                   	push   edx
c001cde8:	50                   	push   eax
c001cde9:	55                   	push   ebp
c001cdea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cded:	83 c4 1c             	add    esp,0x1c
c001cdf0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cdf3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cdf6:	50                   	push   eax
c001cdf7:	6a 00                	push   0x0
c001cdf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ce01:	50                   	push   eax
c001ce02:	e8 49 39 fe ff       	call   c0000750 <memset>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	46                   	inc    esi
c001ce0b:	e9 6c ff ff ff       	jmp    c001cd7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ce10:	53                   	push   ebx
c001ce11:	31 db                	xor    ebx,ebx
c001ce13:	68 00 01 00 00       	push   0x100
c001ce18:	6a 00                	push   0x0
c001ce1a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ce1e:	50                   	push   eax
c001ce1f:	e8 2c 39 fe ff       	call   c0000750 <memset>
c001ce24:	83 c4 0c             	add    esp,0xc
c001ce27:	68 00 01 00 00       	push   0x100
c001ce2c:	6a 00                	push   0x0
c001ce2e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ce35:	50                   	push   eax
c001ce36:	e8 15 39 fe ff       	call   c0000750 <memset>
c001ce3b:	83 c4 10             	add    esp,0x10
c001ce3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce46:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce4e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ce56:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce5e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ce66:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ce6a:	0f 86 30 01 00 00    	jbe    c001cfa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce70:	0f b7 f3             	movzx  esi,bx
c001ce73:	6b f6 28             	imul   esi,esi,0x28
c001ce76:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce7a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce81:	52                   	push   edx
c001ce82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce86:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce8a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce8c:	6b d2 28             	imul   edx,edx,0x28
c001ce8f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce93:	31 d2                	xor    edx,edx
c001ce95:	52                   	push   edx
c001ce96:	50                   	push   eax
c001ce97:	55                   	push   ebp
c001ce98:	e8 6b 60 ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001ce9d:	83 c4 0c             	add    esp,0xc
c001cea0:	6a 20                	push   0x20
c001cea2:	6a 00                	push   0x0
c001cea4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ceab:	51                   	push   ecx
c001ceac:	e8 9f 38 fe ff       	call   c0000750 <memset>
c001ceb1:	59                   	pop    ecx
c001ceb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceb5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ceb9:	52                   	push   edx
c001ceba:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cec1:	51                   	push   ecx
c001cec2:	6a 00                	push   0x0
c001cec4:	6a 1f                	push   0x1f
c001cec6:	55                   	push   ebp
c001cec7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceca:	83 c4 1c             	add    esp,0x1c
c001cecd:	6a 09                	push   0x9
c001cecf:	68 1e c5 02 c0       	push   0xc002c51e
c001ced4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cedb:	51                   	push   ecx
c001cedc:	e8 6b 37 fe ff       	call   c000064c <memcmp>
c001cee1:	83 c4 10             	add    esp,0x10
c001cee4:	85 c0                	test   eax,eax
c001cee6:	75 21                	jne    c001cf09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cef0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cef4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cef8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cefb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf02:	89 d0                	mov    eax,edx
c001cf04:	40                   	inc    eax
c001cf05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf09:	50                   	push   eax
c001cf0a:	6a 09                	push   0x9
c001cf0c:	68 28 c5 02 c0       	push   0xc002c528
c001cf11:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf18:	50                   	push   eax
c001cf19:	e8 2e 37 fe ff       	call   c000064c <memcmp>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	85 c0                	test   eax,eax
c001cf23:	75 21                	jne    c001cf46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cf25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf2d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cf31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf35:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf38:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf3f:	89 d0                	mov    eax,edx
c001cf41:	40                   	inc    eax
c001cf42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf46:	50                   	push   eax
c001cf47:	50                   	push   eax
c001cf48:	68 f4 c4 02 c0       	push   0xc002c4f4
c001cf4d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf54:	50                   	push   eax
c001cf55:	e8 3e 39 fe ff       	call   c0000898 <strcmp>
c001cf5a:	83 c4 10             	add    esp,0x10
c001cf5d:	85 c0                	test   eax,eax
c001cf5f:	75 0f                	jne    c001cf70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cf61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf70:	50                   	push   eax
c001cf71:	50                   	push   eax
c001cf72:	68 fc c4 02 c0       	push   0xc002c4fc
c001cf77:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf7e:	50                   	push   eax
c001cf7f:	e8 14 39 fe ff       	call   c0000898 <strcmp>
c001cf84:	83 c4 10             	add    esp,0x10
c001cf87:	85 c0                	test   eax,eax
c001cf89:	75 0f                	jne    c001cf9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf8b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf9a:	43                   	inc    ebx
c001cf9b:	e9 c6 fe ff ff       	jmp    c001ce66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cfa0:	31 d2                	xor    edx,edx
c001cfa2:	50                   	push   eax
c001cfa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfa7:	52                   	push   edx
c001cfa8:	50                   	push   eax
c001cfa9:	55                   	push   ebp
c001cfaa:	e8 59 5f ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cfaf:	58                   	pop    eax
c001cfb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfb4:	e8 62 28 ff ff       	call   c000f81b <malloc>
c001cfb9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfbc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cfc0:	31 d2                	xor    edx,edx
c001cfc2:	58                   	pop    eax
c001cfc3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfc7:	53                   	push   ebx
c001cfc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cfcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfd0:	52                   	push   edx
c001cfd1:	50                   	push   eax
c001cfd2:	55                   	push   ebp
c001cfd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfd6:	83 c4 14             	add    esp,0x14
c001cfd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfdd:	e8 39 28 ff ff       	call   c000f81b <malloc>
c001cfe2:	31 d2                	xor    edx,edx
c001cfe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cfe8:	83 c4 0c             	add    esp,0xc
c001cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfef:	52                   	push   edx
c001cff0:	50                   	push   eax
c001cff1:	55                   	push   ebp
c001cff2:	e8 11 5f ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001cff7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cffa:	31 d2                	xor    edx,edx
c001cffc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d003:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d007:	52                   	push   edx
c001d008:	50                   	push   eax
c001d009:	55                   	push   ebp
c001d00a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d00d:	83 c4 20             	add    esp,0x20
c001d010:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d018:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d01c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d020:	0f 84 0b 03 00 00    	je     c001d331 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d026:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d02d:	31 d2                	xor    edx,edx
c001d02f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d033:	c1 e8 03             	shr    eax,0x3
c001d036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d03a:	51                   	push   ecx
c001d03b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d03f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d043:	52                   	push   edx
c001d044:	50                   	push   eax
c001d045:	55                   	push   ebp
c001d046:	e8 bd 5e ff ff       	call   c0012f08 <File::seek(unsigned long long)>
c001d04b:	5b                   	pop    ebx
c001d04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d050:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d057:	e8 bf 27 ff ff       	call   c000f81b <malloc>
c001d05c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d05f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d063:	31 d2                	xor    edx,edx
c001d065:	5e                   	pop    esi
c001d066:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d06a:	50                   	push   eax
c001d06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d06f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d073:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d07a:	52                   	push   edx
c001d07b:	50                   	push   eax
c001d07c:	55                   	push   ebp
c001d07d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d080:	83 c4 20             	add    esp,0x20
c001d083:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d08b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d08f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d093:	0f 8d 7c 02 00 00    	jge    c001d315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d099:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d09d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0a1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d0a6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d0a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d0ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0b1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d0b5:	89 d8                	mov    eax,ebx
c001d0b7:	c1 e8 08             	shr    eax,0x8
c001d0ba:	89 c6                	mov    esi,eax
c001d0bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d0c0:	c1 e6 04             	shl    esi,0x4
c001d0c3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d0c7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d0ca:	85 d2                	test   edx,edx
c001d0cc:	0f 85 bf 00 00 00    	jne    c001d191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0d9:	03 06                	add    eax,DWORD PTR [esi]
c001d0db:	50                   	push   eax
c001d0dc:	e8 4b f8 ff ff       	call   c001c92c <Thr::getAddressOfKernelSymbol(char const*)>
c001d0e1:	83 c4 10             	add    esp,0x10
c001d0e4:	89 c2                	mov    edx,eax
c001d0e6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d0eb:	85 c0                	test   eax,eax
c001d0ed:	0f 85 9e 00 00 00    	jne    c001d191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0f3:	83 ec 0c             	sub    esp,0xc
c001d0f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0fa:	03 06                	add    eax,DWORD PTR [esi]
c001d0fc:	50                   	push   eax
c001d0fd:	e8 73 16 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d102:	83 c4 10             	add    esp,0x10
c001d105:	89 c2                	mov    edx,eax
c001d107:	85 c0                	test   eax,eax
c001d109:	0f 85 82 00 00 00    	jne    c001d191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d10f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d113:	50                   	push   eax
c001d114:	50                   	push   eax
c001d115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d119:	03 06                	add    eax,DWORD PTR [esi]
c001d11b:	50                   	push   eax
c001d11c:	68 32 c5 02 c0       	push   0xc002c532
c001d121:	e8 56 57 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d126:	58                   	pop    eax
c001d127:	5a                   	pop    edx
c001d128:	68 4c c5 02 c0       	push   0xc002c54c
c001d12d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d134:	50                   	push   eax
c001d135:	e8 d2 36 fe ff       	call   c000080c <strcpy>
c001d13a:	59                   	pop    ecx
c001d13b:	58                   	pop    eax
c001d13c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d140:	03 06                	add    eax,DWORD PTR [esi]
c001d142:	50                   	push   eax
c001d143:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d14a:	50                   	push   eax
c001d14b:	e8 fc 37 fe ff       	call   c000094c <strcat>
c001d150:	58                   	pop    eax
c001d151:	5a                   	pop    edx
c001d152:	68 e2 c5 02 c0       	push   0xc002c5e2
c001d157:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d15e:	50                   	push   eax
c001d15f:	e8 e8 37 fe ff       	call   c000094c <strcat>
c001d164:	83 c4 10             	add    esp,0x10
c001d167:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d16c:	0f 84 5d 01 00 00    	je     c001d2cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d17c:	50                   	push   eax
c001d17d:	e8 a3 d0 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d189:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d18d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d191:	80 fb 01             	cmp    bl,0x1
c001d194:	0f 85 88 00 00 00    	jne    c001d222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d19a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d1a1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d1a5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d1a9:	01 ce                	add    esi,ecx
c001d1ab:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d1b1:	0f 94 c0             	sete   al
c001d1b4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d1ba:	0f 94 c3             	sete   bl
c001d1bd:	09 c3                	or     ebx,eax
c001d1bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1c1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d1c6:	74 41                	je     c001d209 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d1c8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d1cb:	84 db                	test   bl,bl
c001d1cd:	75 15                	jne    c001d1e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d1cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1d3:	66 83 f8 0c          	cmp    ax,0xc
c001d1d7:	76 05                	jbe    c001d1de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d1d9:	b8 0c 00 00 00       	mov    eax,0xc
c001d1de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1e2:	76 37                	jbe    c001d21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1e4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d1e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1ed:	0f 84 dc 00 00 00    	je     c001d2cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d1f3:	83 ec 0c             	sub    esp,0xc
c001d1f6:	68 63 c5 02 c0       	push   0xc002c563
c001d1fb:	e8 25 d0 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d200:	83 c4 10             	add    esp,0x10
c001d203:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d207:	eb 12                	jmp    c001d21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d209:	01 c1                	add    ecx,eax
c001d20b:	84 db                	test   bl,bl
c001d20d:	75 0c                	jne    c001d21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d20f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d213:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d217:	77 02                	ja     c001d21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d219:	01 d1                	add    ecx,edx
c001d21b:	89 0e                	mov    DWORD PTR [esi],ecx
c001d21d:	e9 ea 00 00 00       	jmp    c001d30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d222:	80 fb 02             	cmp    bl,0x2
c001d225:	75 7c                	jne    c001d2a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d227:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d22e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d232:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d236:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d23c:	74 20                	je     c001d25e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d23e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d244:	74 18                	je     c001d25e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d246:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d24a:	b9 0a 00 00 00       	mov    ecx,0xa
c001d24f:	66 83 f8 0e          	cmp    ax,0xe
c001d253:	77 03                	ja     c001d258 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d255:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d258:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d25c:	76 1f                	jbe    c001d27d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d25e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d262:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d267:	74 66                	je     c001d2cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d269:	83 ec 0c             	sub    esp,0xc
c001d26c:	68 7f c5 02 c0       	push   0xc002c57f
c001d271:	e8 af cf ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d27d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d27f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d284:	74 13                	je     c001d299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d286:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d28a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d291:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d295:	01 c8                	add    eax,ecx
c001d297:	eb 04                	jmp    c001d29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d299:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d29d:	01 c2                	add    edx,eax
c001d29f:	89 16                	mov    DWORD PTR [esi],edx
c001d2a1:	eb 69                	jmp    c001d30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d2a3:	0f b6 db             	movzx  ebx,bl
c001d2a6:	50                   	push   eax
c001d2a7:	50                   	push   eax
c001d2a8:	53                   	push   ebx
c001d2a9:	68 9b c5 02 c0       	push   0xc002c59b
c001d2ae:	e8 c9 55 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2bb:	74 12                	je     c001d2cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2bd:	83 ec 0c             	sub    esp,0xc
c001d2c0:	68 a6 c5 02 c0       	push   0xc002c5a6
c001d2c5:	e8 5b cf ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	eb 3d                	jmp    c001d30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d2cf:	83 ec 0c             	sub    esp,0xc
c001d2d2:	55                   	push   ebp
c001d2d3:	e8 d0 5b ff ff       	call   c0012ea8 <File::close()>
c001d2d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2e1:	59                   	pop    ecx
c001d2e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2e6:	e8 40 25 ff ff       	call   c000f82b <free>
c001d2eb:	5b                   	pop    ebx
c001d2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2f0:	e8 36 25 ff ff       	call   c000f82b <free>
c001d2f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2f8:	e8 2e 25 ff ff       	call   c000f82b <free>
c001d2fd:	5e                   	pop    esi
c001d2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d302:	e8 24 25 ff ff       	call   c000f82b <free>
c001d307:	83 c4 10             	add    esp,0x10
c001d30a:	eb 21                	jmp    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d30c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d310:	e9 76 fd ff ff       	jmp    c001d08b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d315:	83 ec 0c             	sub    esp,0xc
c001d318:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d31c:	e8 0a 25 ff ff       	call   c000f82b <free>
c001d321:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d325:	83 c4 10             	add    esp,0x10
c001d328:	e9 eb fc ff ff       	jmp    c001d018 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d32d:	31 c0                	xor    eax,eax
c001d32f:	eb 33                	jmp    c001d364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d331:	83 ec 0c             	sub    esp,0xc
c001d334:	55                   	push   ebp
c001d335:	e8 6e 5b ff ff       	call   c0012ea8 <File::close()>
c001d33a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d33d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d340:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d343:	58                   	pop    eax
c001d344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d348:	e8 de 24 ff ff       	call   c000f82b <free>
c001d34d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d350:	e8 d6 24 ff ff       	call   c000f82b <free>
c001d355:	5a                   	pop    edx
c001d356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d35a:	e8 cc 24 ff ff       	call   c000f82b <free>
c001d35f:	83 c4 10             	add    esp,0x10
c001d362:	b0 01                	mov    al,0x1
c001d364:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d36a:	5b                   	pop    ebx
c001d36b:	5e                   	pop    esi
c001d36c:	5f                   	pop    edi
c001d36d:	5d                   	pop    ebp
c001d36e:	c3                   	ret    

c001d36f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d36f:	56                   	push   esi
c001d370:	31 d2                	xor    edx,edx
c001d372:	53                   	push   ebx
c001d373:	8b 1d 00 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f200
c001d379:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d37d:	39 d3                	cmp    ebx,edx
c001d37f:	7e 1b                	jle    c001d39c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d381:	8b 04 95 20 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0be0]
c001d388:	39 c8                	cmp    eax,ecx
c001d38a:	77 0d                	ja     c001d399 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d38c:	8b 34 95 20 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0de0]
c001d393:	01 c6                	add    esi,eax
c001d395:	39 ce                	cmp    esi,ecx
c001d397:	77 05                	ja     c001d39e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d399:	42                   	inc    edx
c001d39a:	eb e1                	jmp    c001d37d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d39c:	31 c0                	xor    eax,eax
c001d39e:	5b                   	pop    ebx
c001d39f:	5e                   	pop    esi
c001d3a0:	c3                   	ret    

c001d3a1 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d3a1:	53                   	push   ebx
c001d3a2:	31 c0                	xor    eax,eax
c001d3a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d3a8:	8b 1d 00 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f200
c001d3ae:	39 c3                	cmp    ebx,eax
c001d3b0:	7e 22                	jle    c001d3d4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d3b2:	8b 14 85 20 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0be0]
c001d3b9:	39 ca                	cmp    edx,ecx
c001d3bb:	77 14                	ja     c001d3d1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d3bd:	03 14 85 20 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0de0]
c001d3c4:	39 ca                	cmp    edx,ecx
c001d3c6:	76 09                	jbe    c001d3d1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d3c8:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c001d3cf:	eb 05                	jmp    c001d3d6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d3d1:	40                   	inc    eax
c001d3d2:	eb da                	jmp    c001d3ae <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d3d4:	31 c0                	xor    eax,eax
c001d3d6:	5b                   	pop    ebx
c001d3d7:	c3                   	ret    

c001d3d8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d3d8:	53                   	push   ebx
c001d3d9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d3dd:	53                   	push   ebx
c001d3de:	e8 8c ff ff ff       	call   c001d36f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d3e3:	5a                   	pop    edx
c001d3e4:	31 d2                	xor    edx,edx
c001d3e6:	85 c0                	test   eax,eax
c001d3e8:	74 04                	je     c001d3ee <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d3ea:	89 da                	mov    edx,ebx
c001d3ec:	29 c2                	sub    edx,eax
c001d3ee:	89 d0                	mov    eax,edx
c001d3f0:	5b                   	pop    ebx
c001d3f1:	c3                   	ret    

c001d3f2 <Thr::loadDLL(char const*, bool)>:
c001d3f2:	55                   	push   ebp
c001d3f3:	57                   	push   edi
c001d3f4:	56                   	push   esi
c001d3f5:	53                   	push   ebx
c001d3f6:	81 ec 34 01 00 00    	sub    esp,0x134
c001d3fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d403:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d40a:	56                   	push   esi
c001d40b:	68 be c5 02 c0       	push   0xc002c5be
c001d410:	e8 67 54 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d415:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d41c:	e8 fa 23 ff ff       	call   c000f81b <malloc>
c001d421:	83 c4 0c             	add    esp,0xc
c001d424:	89 c3                	mov    ebx,eax
c001d426:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001d42c:	56                   	push   esi
c001d42d:	50                   	push   eax
c001d42e:	e8 b3 59 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	85 db                	test   ebx,ebx
c001d438:	75 3c                	jne    c001d476 <Thr::loadDLL(char const*, bool)+0x84>
c001d43a:	89 f8                	mov    eax,edi
c001d43c:	84 c0                	test   al,al
c001d43e:	0f 84 d2 01 00 00    	je     c001d616 <Thr::loadDLL(char const*, bool)+0x224>
c001d444:	55                   	push   ebp
c001d445:	55                   	push   ebp
c001d446:	68 cf c5 02 c0       	push   0xc002c5cf
c001d44b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d44f:	55                   	push   ebp
c001d450:	e8 b7 33 fe ff       	call   c000080c <strcpy>
c001d455:	58                   	pop    eax
c001d456:	5a                   	pop    edx
c001d457:	56                   	push   esi
c001d458:	55                   	push   ebp
c001d459:	e8 ee 34 fe ff       	call   c000094c <strcat>
c001d45e:	59                   	pop    ecx
c001d45f:	58                   	pop    eax
c001d460:	68 e2 c5 02 c0       	push   0xc002c5e2
c001d465:	55                   	push   ebp
c001d466:	e8 e1 34 fe ff       	call   c000094c <strcat>
c001d46b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d46e:	e8 b2 cd ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d473:	83 c4 10             	add    esp,0x10
c001d476:	51                   	push   ecx
c001d477:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d47b:	50                   	push   eax
c001d47c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d480:	50                   	push   eax
c001d481:	53                   	push   ebx
c001d482:	e8 6f 5c ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001d487:	83 c4 10             	add    esp,0x10
c001d48a:	85 db                	test   ebx,ebx
c001d48c:	74 0c                	je     c001d49a <Thr::loadDLL(char const*, bool)+0xa8>
c001d48e:	83 ec 0c             	sub    esp,0xc
c001d491:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d493:	53                   	push   ebx
c001d494:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d49f:	75 0a                	jne    c001d4ab <Thr::loadDLL(char const*, bool)+0xb9>
c001d4a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4a5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d4a9:	75 3c                	jne    c001d4e7 <Thr::loadDLL(char const*, bool)+0xf5>
c001d4ab:	89 f8                	mov    eax,edi
c001d4ad:	84 c0                	test   al,al
c001d4af:	0f 84 49 01 00 00    	je     c001d5fe <Thr::loadDLL(char const*, bool)+0x20c>
c001d4b5:	51                   	push   ecx
c001d4b6:	51                   	push   ecx
c001d4b7:	68 cf c5 02 c0       	push   0xc002c5cf
c001d4bc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d4c0:	53                   	push   ebx
c001d4c1:	e8 46 33 fe ff       	call   c000080c <strcpy>
c001d4c6:	5d                   	pop    ebp
c001d4c7:	58                   	pop    eax
c001d4c8:	56                   	push   esi
c001d4c9:	53                   	push   ebx
c001d4ca:	e8 7d 34 fe ff       	call   c000094c <strcat>
c001d4cf:	58                   	pop    eax
c001d4d0:	5a                   	pop    edx
c001d4d1:	68 e2 c5 02 c0       	push   0xc002c5e2
c001d4d6:	53                   	push   ebx
c001d4d7:	e8 70 34 fe ff       	call   c000094c <strcat>
c001d4dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4df:	e8 41 cd ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	52                   	push   edx
c001d4e8:	6a 03                	push   0x3
c001d4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d4f2:	05 ff 0f 00 00       	add    eax,0xfff
c001d4f7:	83 d2 00             	adc    edx,0x0
c001d4fa:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d4fe:	50                   	push   eax
c001d4ff:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c001d505:	e8 40 47 ff ff       	call   c0011c4a <VAS::allocatePages(int, int)>
c001d50a:	59                   	pop    ecx
c001d50b:	89 c3                	mov    ebx,eax
c001d50d:	5d                   	pop    ebp
c001d50e:	50                   	push   eax
c001d50f:	68 8d a7 02 c0       	push   0xc002a78d
c001d514:	e8 63 53 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d519:	89 34 24             	mov    DWORD PTR [esp],esi
c001d51c:	e8 4b 32 fe ff       	call   c000076c <strlen>
c001d521:	8b 2d 00 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f200
c001d527:	40                   	inc    eax
c001d528:	89 04 24             	mov    DWORD PTR [esp],eax
c001d52b:	e8 eb 22 ff ff       	call   c000f81b <malloc>
c001d530:	89 04 ad 20 f6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd09e0],eax
c001d537:	58                   	pop    eax
c001d538:	a1 00 f2 02 c0       	mov    eax,ds:0xc002f200
c001d53d:	5a                   	pop    edx
c001d53e:	56                   	push   esi
c001d53f:	ff 34 85 20 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e0]
c001d546:	e8 c1 32 fe ff       	call   c000080c <strcpy>
c001d54b:	a1 00 f2 02 c0       	mov    eax,ds:0xc002f200
c001d550:	8d 50 01             	lea    edx,[eax+0x1]
c001d553:	89 1c 85 20 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0be0],ebx
c001d55a:	89 15 00 f2 02 c0    	mov    DWORD PTR ds:0xc002f200,edx
c001d560:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d564:	83 c4 0c             	add    esp,0xc
c001d567:	89 14 85 20 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0de0],edx
c001d56e:	6a 01                	push   0x1
c001d570:	53                   	push   ebx
c001d571:	56                   	push   esi
c001d572:	e8 c2 f6 ff ff       	call   c001cc39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d577:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d57b:	83 c4 10             	add    esp,0x10
c001d57e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d583:	0f 85 89 00 00 00    	jne    c001d612 <Thr::loadDLL(char const*, bool)+0x220>
c001d589:	89 f8                	mov    eax,edi
c001d58b:	84 c0                	test   al,al
c001d58d:	74 73                	je     c001d602 <Thr::loadDLL(char const*, bool)+0x210>
c001d58f:	83 ec 0c             	sub    esp,0xc
c001d592:	68 e4 c5 02 c0       	push   0xc002c5e4
c001d597:	e8 89 cc ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d59c:	83 c4 10             	add    esp,0x10
c001d59f:	eb 61                	jmp    c001d602 <Thr::loadDLL(char const*, bool)+0x210>
c001d5a1:	50                   	push   eax
c001d5a2:	50                   	push   eax
c001d5a3:	89 e8                	mov    eax,ebp
c001d5a5:	c1 e0 0c             	shl    eax,0xc
c001d5a8:	01 d8                	add    eax,ebx
c001d5aa:	50                   	push   eax
c001d5ab:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c001d5b1:	e8 fc 41 ff ff       	call   c00117b2 <VAS::getPageTableEntry(unsigned long)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5bb:	a8 60                	test   al,0x60
c001d5bd:	75 11                	jne    c001d5d0 <Thr::loadDLL(char const*, bool)+0x1de>
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d5c7:	50                   	push   eax
c001d5c8:	e8 d9 25 ff ff       	call   c000fba6 <Phys::freePage(unsigned long)>
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	45                   	inc    ebp
c001d5d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d5d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5d9:	05 ff 0f 00 00       	add    eax,0xfff
c001d5de:	bf 00 00 00 00       	mov    edi,0x0
c001d5e3:	83 d2 00             	adc    edx,0x0
c001d5e6:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d5ea:	c1 ea 0c             	shr    edx,0xc
c001d5ed:	39 c5                	cmp    ebp,eax
c001d5ef:	89 d1                	mov    ecx,edx
c001d5f1:	89 f8                	mov    eax,edi
c001d5f3:	19 c8                	sbb    eax,ecx
c001d5f5:	72 aa                	jb     c001d5a1 <Thr::loadDLL(char const*, bool)+0x1af>
c001d5f7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d5fc:	75 18                	jne    c001d616 <Thr::loadDLL(char const*, bool)+0x224>
c001d5fe:	31 db                	xor    ebx,ebx
c001d600:	eb 14                	jmp    c001d616 <Thr::loadDLL(char const*, bool)+0x224>
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	68 03 c6 02 c0       	push   0xc002c603
c001d60a:	e8 16 cc ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	31 ed                	xor    ebp,ebp
c001d614:	eb bb                	jmp    c001d5d1 <Thr::loadDLL(char const*, bool)+0x1df>
c001d616:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d61c:	89 d8                	mov    eax,ebx
c001d61e:	5b                   	pop    ebx
c001d61f:	5e                   	pop    esi
c001d620:	5f                   	pop    edi
c001d621:	5d                   	pop    ebp
c001d622:	c3                   	ret    

c001d623 <Thr::executeDLL(unsigned long, void*)>:
c001d623:	56                   	push   esi
c001d624:	53                   	push   ebx
c001d625:	52                   	push   edx
c001d626:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d62a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d62e:	85 db                	test   ebx,ebx
c001d630:	75 10                	jne    c001d642 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d632:	83 ec 0c             	sub    esp,0xc
c001d635:	68 1f c6 02 c0       	push   0xc002c61f
c001d63a:	e8 e6 cb ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001d63f:	83 c4 10             	add    esp,0x10
c001d642:	50                   	push   eax
c001d643:	50                   	push   eax
c001d644:	53                   	push   ebx
c001d645:	68 49 c6 02 c0       	push   0xc002c649
c001d64a:	e8 2d 52 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d64f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d653:	89 d8                	mov    eax,ebx
c001d655:	83 c4 14             	add    esp,0x14
c001d658:	5b                   	pop    ebx
c001d659:	5e                   	pop    esi
c001d65a:	ff e0                	jmp    eax

c001d65c <userModeEntryPoint(void*)>:
c001d65c:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001d661:	48                   	dec    eax
c001d662:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001d667:	75 01                	jne    c001d66a <userModeEntryPoint(void*)+0xe>
c001d669:	fb                   	sti    
c001d66a:	fb                   	sti    
c001d66b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d670:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d673:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d67d:	e9 a8 2c fe ff       	jmp    c000032a <goToUsermode>

c001d682 <changeTSS>:
c001d682:	83 ec 14             	sub    esp,0x14
c001d685:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d68a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d68d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d692:	c1 e2 15             	shl    edx,0x15
c001d695:	29 d0                	sub    eax,edx
c001d697:	50                   	push   eax
c001d698:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001d69d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6a3:	05 7c 11 00 00       	add    eax,0x117c
c001d6a8:	50                   	push   eax
c001d6a9:	e8 48 37 ff ff       	call   c0010df6 <TSS::setESP(unsigned long)>
c001d6ae:	83 c4 1c             	add    esp,0x1c
c001d6b1:	c3                   	ret    

c001d6b2 <switchToThread(ThreadControlBlock*)>:
c001d6b2:	57                   	push   edi
c001d6b3:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001d6b8:	56                   	push   esi
c001d6b9:	85 c0                	test   eax,eax
c001d6bb:	53                   	push   ebx
c001d6bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6c0:	0f 85 88 00 00 00    	jne    c001d74e <switchToThread(ThreadControlBlock*)+0x9c>
c001d6c6:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d6c9:	3c ff                	cmp    al,0xff
c001d6cb:	74 7d                	je     c001d74a <switchToThread(ThreadControlBlock*)+0x98>
c001d6cd:	0f b6 d0             	movzx  edx,al
c001d6d0:	b8 84 03 00 00       	mov    eax,0x384
c001d6d5:	29 d0                	sub    eax,edx
c001d6d7:	c1 e0 10             	shl    eax,0x10
c001d6da:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d6dd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d6e0:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c001d6e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6eb:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d6f2:	74 4a                	je     c001d73e <switchToThread(ThreadControlBlock*)+0x8c>
c001d6f4:	0f 31                	rdtsc  
c001d6f6:	a3 08 fa 02 c0       	mov    ds:0xc002fa08,eax
c001d6fb:	89 c6                	mov    esi,eax
c001d6fd:	89 d7                	mov    edi,edx
c001d6ff:	2b 35 f8 f9 02 c0    	sub    esi,DWORD PTR ds:0xc002f9f8
c001d705:	89 15 0c fa 02 c0    	mov    DWORD PTR ds:0xc002fa0c,edx
c001d70b:	1b 3d fc f9 02 c0    	sbb    edi,DWORD PTR ds:0xc002f9fc
c001d711:	89 35 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,esi
c001d717:	a3 f8 f9 02 c0       	mov    ds:0xc002f9f8,eax
c001d71c:	89 3d 04 fa 02 c0    	mov    DWORD PTR ds:0xc002fa04,edi
c001d722:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d728:	89 15 fc f9 02 c0    	mov    DWORD PTR ds:0xc002f9fc,edx
c001d72e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d731:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d734:	01 c6                	add    esi,eax
c001d736:	11 d7                	adc    edi,edx
c001d738:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d73b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d73e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d742:	5b                   	pop    ebx
c001d743:	5e                   	pop    esi
c001d744:	5f                   	pop    edi
c001d745:	e9 18 2c fe ff       	jmp    c0000362 <switchToThreadASM>
c001d74a:	31 c0                	xor    eax,eax
c001d74c:	eb 8f                	jmp    c001d6dd <switchToThread(ThreadControlBlock*)+0x2b>
c001d74e:	5b                   	pop    ebx
c001d74f:	c7 05 c0 f9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x1
c001d759:	5e                   	pop    esi
c001d75a:	5f                   	pop    edi
c001d75b:	c3                   	ret    

c001d75c <Process::addArgs(char**)>:
c001d75c:	57                   	push   edi
c001d75d:	56                   	push   esi
c001d75e:	53                   	push   ebx
c001d75f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d763:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d767:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d771:	85 ff                	test   edi,edi
c001d773:	74 3d                	je     c001d7b2 <Process::addArgs(char**)+0x56>
c001d775:	8b 07                	mov    eax,DWORD PTR [edi]
c001d777:	85 c0                	test   eax,eax
c001d779:	74 37                	je     c001d7b2 <Process::addArgs(char**)+0x56>
c001d77b:	31 db                	xor    ebx,ebx
c001d77d:	83 ec 0c             	sub    esp,0xc
c001d780:	50                   	push   eax
c001d781:	e8 e6 2f fe ff       	call   c000076c <strlen>
c001d786:	40                   	inc    eax
c001d787:	89 04 24             	mov    DWORD PTR [esp],eax
c001d78a:	e8 8c 20 ff ff       	call   c000f81b <malloc>
c001d78f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d796:	5a                   	pop    edx
c001d797:	59                   	pop    ecx
c001d798:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d79b:	43                   	inc    ebx
c001d79c:	50                   	push   eax
c001d79d:	e8 6a 30 fe ff       	call   c000080c <strcpy>
c001d7a2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d7a8:	83 c4 10             	add    esp,0x10
c001d7ab:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d7ae:	85 c0                	test   eax,eax
c001d7b0:	75 cb                	jne    c001d77d <Process::addArgs(char**)+0x21>
c001d7b2:	5b                   	pop    ebx
c001d7b3:	5e                   	pop    esi
c001d7b4:	5f                   	pop    edi
c001d7b5:	c3                   	ret    

c001d7b6 <Process::Process(char const*, Process*, char**)>:
c001d7b6:	56                   	push   esi
c001d7b7:	53                   	push   ebx
c001d7b8:	83 ec 14             	sub    esp,0x14
c001d7bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7bf:	05 0c 02 00 00       	add    eax,0x20c
c001d7c4:	bb 07 00 00 00       	mov    ebx,0x7
c001d7c9:	89 c6                	mov    esi,eax
c001d7cb:	85 db                	test   ebx,ebx
c001d7cd:	78 12                	js     c001d7e1 <Process::Process(char const*, Process*, char**)+0x2b>
c001d7cf:	83 ec 0c             	sub    esp,0xc
c001d7d2:	56                   	push   esi
c001d7d3:	e8 3e b8 00 00       	call   c0029016 <ThreadControlBlock::ThreadControlBlock()>
c001d7d8:	83 c4 10             	add    esp,0x10
c001d7db:	83 c6 63             	add    esi,0x63
c001d7de:	4b                   	dec    ebx
c001d7df:	eb ea                	jmp    c001d7cb <Process::Process(char const*, Process*, char**)+0x15>
c001d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7e5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d7ec:	83 ec 0c             	sub    esp,0xc
c001d7ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7f3:	e8 b6 c8 ff ff       	call   c001a0ae <Krnl::newProcessEnv(Process*)>
c001d7f8:	83 c4 10             	add    esp,0x10
c001d7fb:	89 c2                	mov    edx,eax
c001d7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d801:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d80b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d814:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c001d819:	8d 50 01             	lea    edx,[eax+0x1]
c001d81c:	89 15 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,edx
c001d822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d826:	89 02                	mov    DWORD PTR [edx],eax
c001d828:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d830:	83 ec 0c             	sub    esp,0xc
c001d833:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d837:	e8 df 1f ff ff       	call   c000f81b <malloc>
c001d83c:	83 c4 10             	add    esp,0x10
c001d83f:	89 c3                	mov    ebx,eax
c001d841:	83 ec 08             	sub    esp,0x8
c001d844:	6a 00                	push   0x0
c001d846:	53                   	push   ebx
c001d847:	e8 a6 47 ff ff       	call   c0011ff2 <VAS::VAS(bool)>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d853:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d85d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d86b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d86f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d879:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d87f:	85 c0                	test   eax,eax
c001d881:	74 42                	je     c001d8c5 <Process::Process(char const*, Process*, char**)+0x10f>
c001d883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d887:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d88d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d897:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8a1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d8a7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8b1:	05 0c 01 00 00       	add    eax,0x10c
c001d8b6:	83 ec 08             	sub    esp,0x8
c001d8b9:	52                   	push   edx
c001d8ba:	50                   	push   eax
c001d8bb:	e8 4c 2f fe ff       	call   c000080c <strcpy>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	eb 63                	jmp    c001d928 <Process::Process(char const*, Process*, char**)+0x172>
c001d8c5:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d8cd:	83 ec 0c             	sub    esp,0xc
c001d8d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d8d4:	e8 42 1f ff ff       	call   c000f81b <malloc>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	89 c3                	mov    ebx,eax
c001d8de:	83 ec 08             	sub    esp,0x8
c001d8e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8e5:	53                   	push   ebx
c001d8e6:	e8 1d 32 ff ff       	call   c0010b08 <VgaText::VgaText(char const*)>
c001d8eb:	83 c4 10             	add    esp,0x10
c001d8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8fc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d902:	83 ec 0c             	sub    esp,0xc
c001d905:	50                   	push   eax
c001d906:	e8 bc 29 ff ff       	call   c00102c7 <addToTerminalCycle(VgaText*)>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d912:	05 0c 01 00 00       	add    eax,0x10c
c001d917:	83 ec 08             	sub    esp,0x8
c001d91a:	68 68 c6 02 c0       	push   0xc002c668
c001d91f:	50                   	push   eax
c001d920:	e8 e7 2e fe ff       	call   c000080c <strcpy>
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92c:	83 c0 0c             	add    eax,0xc
c001d92f:	83 ec 08             	sub    esp,0x8
c001d932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d936:	50                   	push   eax
c001d937:	e8 d0 2e fe ff       	call   c000080c <strcpy>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	83 ec 08             	sub    esp,0x8
c001d942:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d946:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d94a:	e8 0d fe ff ff       	call   c001d75c <Process::addArgs(char**)>
c001d94f:	83 c4 10             	add    esp,0x10
c001d952:	83 ec 08             	sub    esp,0x8
c001d955:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d959:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d95d:	e8 a1 ed ff ff       	call   c001c703 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d969:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d96d:	83 f0 01             	xor    eax,0x1
c001d970:	88 c2                	mov    dl,al
c001d972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d976:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d97c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d981:	83 ec 08             	sub    esp,0x8
c001d984:	50                   	push   eax
c001d985:	68 c0 c6 02 c0       	push   0xc002c6c0
c001d98a:	e8 ed 4e ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	90                   	nop
c001d993:	83 c4 14             	add    esp,0x14
c001d996:	5b                   	pop    ebx
c001d997:	5e                   	pop    esi
c001d998:	c3                   	ret    
c001d999:	90                   	nop

c001d99a <Process::Process(bool, char const*, Process*, char**)>:
c001d99a:	56                   	push   esi
c001d99b:	53                   	push   ebx
c001d99c:	83 ec 24             	sub    esp,0x24
c001d99f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d9a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9ab:	05 0c 02 00 00       	add    eax,0x20c
c001d9b0:	bb 07 00 00 00       	mov    ebx,0x7
c001d9b5:	89 c6                	mov    esi,eax
c001d9b7:	85 db                	test   ebx,ebx
c001d9b9:	78 12                	js     c001d9cd <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d9bb:	83 ec 0c             	sub    esp,0xc
c001d9be:	56                   	push   esi
c001d9bf:	e8 52 b6 00 00       	call   c0029016 <ThreadControlBlock::ThreadControlBlock()>
c001d9c4:	83 c4 10             	add    esp,0x10
c001d9c7:	83 c6 63             	add    esi,0x63
c001d9ca:	4b                   	dec    ebx
c001d9cb:	eb ea                	jmp    c001d9b7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d9cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9d1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9d8:	83 ec 0c             	sub    esp,0xc
c001d9db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9df:	e8 ca c6 ff ff       	call   c001a0ae <Krnl::newProcessEnv(Process*)>
c001d9e4:	83 c4 10             	add    esp,0x10
c001d9e7:	89 c2                	mov    edx,eax
c001d9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9ed:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d9f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9f7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da00:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c001da05:	8d 50 01             	lea    edx,[eax+0x1]
c001da08:	89 15 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,edx
c001da0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da12:	89 02                	mov    DWORD PTR [edx],eax
c001da14:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001da1c:	83 ec 0c             	sub    esp,0xc
c001da1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001da23:	e8 f3 1d ff ff       	call   c000f81b <malloc>
c001da28:	83 c4 10             	add    esp,0x10
c001da2b:	89 c3                	mov    ebx,eax
c001da2d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001da32:	83 ec 08             	sub    esp,0x8
c001da35:	50                   	push   eax
c001da36:	53                   	push   ebx
c001da37:	e8 b6 45 ff ff       	call   c0011ff2 <VAS::VAS(bool)>
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da43:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da4d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da5b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da5f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da6f:	85 c0                	test   eax,eax
c001da71:	74 42                	je     c001dab5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001da73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da77:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da7d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da87:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da91:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da97:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daa1:	05 0c 01 00 00       	add    eax,0x10c
c001daa6:	83 ec 08             	sub    esp,0x8
c001daa9:	52                   	push   edx
c001daaa:	50                   	push   eax
c001daab:	e8 5c 2d fe ff       	call   c000080c <strcpy>
c001dab0:	83 c4 10             	add    esp,0x10
c001dab3:	eb 63                	jmp    c001db18 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dab5:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dabd:	83 ec 0c             	sub    esp,0xc
c001dac0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dac4:	e8 52 1d ff ff       	call   c000f81b <malloc>
c001dac9:	83 c4 10             	add    esp,0x10
c001dacc:	89 c3                	mov    ebx,eax
c001dace:	83 ec 08             	sub    esp,0x8
c001dad1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dad5:	53                   	push   ebx
c001dad6:	e8 2d 30 ff ff       	call   c0010b08 <VgaText::VgaText(char const*)>
c001dadb:	83 c4 10             	add    esp,0x10
c001dade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001daf2:	83 ec 0c             	sub    esp,0xc
c001daf5:	50                   	push   eax
c001daf6:	e8 cc 27 ff ff       	call   c00102c7 <addToTerminalCycle(VgaText*)>
c001dafb:	83 c4 10             	add    esp,0x10
c001dafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db02:	05 0c 01 00 00       	add    eax,0x10c
c001db07:	83 ec 08             	sub    esp,0x8
c001db0a:	68 68 c6 02 c0       	push   0xc002c668
c001db0f:	50                   	push   eax
c001db10:	e8 f7 2c fe ff       	call   c000080c <strcpy>
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db1c:	83 c0 0c             	add    eax,0xc
c001db1f:	83 ec 08             	sub    esp,0x8
c001db22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001db26:	50                   	push   eax
c001db27:	e8 e0 2c fe ff       	call   c000080c <strcpy>
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	83 ec 08             	sub    esp,0x8
c001db32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db3a:	e8 1d fc ff ff       	call   c001d75c <Process::addArgs(char**)>
c001db3f:	83 c4 10             	add    esp,0x10
c001db42:	90                   	nop
c001db43:	83 c4 24             	add    esp,0x24
c001db46:	5b                   	pop    ebx
c001db47:	5e                   	pop    esi
c001db48:	c3                   	ret    

c001db49 <taskStartupFunction>:
c001db49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db4e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001db51:	c3                   	ret    

c001db52 <Semaphore::Semaphore(int)>:
c001db52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db5a:	89 10                	mov    DWORD PTR [eax],edx
c001db5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db60:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db76:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db7d:	90                   	nop
c001db7e:	c3                   	ret    
c001db7f:	90                   	nop

c001db80 <Mutex::Mutex()>:
c001db80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db84:	6a 01                	push   0x1
c001db86:	50                   	push   eax
c001db87:	e8 c6 ff ff ff       	call   c001db52 <Semaphore::Semaphore(int)>
c001db8c:	83 c4 08             	add    esp,0x8
c001db8f:	90                   	nop
c001db90:	c3                   	ret    
c001db91:	90                   	nop

c001db92 <Process::createThread(void (*)(void*), void*, int)>:
c001db92:	55                   	push   ebp
c001db93:	31 c9                	xor    ecx,ecx
c001db95:	57                   	push   edi
c001db96:	56                   	push   esi
c001db97:	53                   	push   ebx
c001db98:	83 ec 1c             	sub    esp,0x1c
c001db9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db9f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dba6:	89 f2                	mov    edx,esi
c001dba8:	0f b7 c2             	movzx  eax,dx
c001dbab:	83 e2 01             	and    edx,0x1
c001dbae:	74 16                	je     c001dbc6 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dbb0:	d1 f8                	sar    eax,1
c001dbb2:	41                   	inc    ecx
c001dbb3:	89 c2                	mov    edx,eax
c001dbb5:	83 f9 10             	cmp    ecx,0x10
c001dbb8:	75 ee                	jne    c001dba8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dbba:	83 c4 1c             	add    esp,0x1c
c001dbbd:	31 db                	xor    ebx,ebx
c001dbbf:	89 d8                	mov    eax,ebx
c001dbc1:	5b                   	pop    ebx
c001dbc2:	5e                   	pop    esi
c001dbc3:	5f                   	pop    edi
c001dbc4:	5d                   	pop    ebp
c001dbc5:	c3                   	ret    
c001dbc6:	b8 01 00 00 00       	mov    eax,0x1
c001dbcb:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dbce:	d3 e0                	shl    eax,cl
c001dbd0:	09 c6                	or     esi,eax
c001dbd2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dbd5:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dbdc:	89 c6                	mov    esi,eax
c001dbde:	c1 e6 05             	shl    esi,0x5
c001dbe1:	01 f0                	add    eax,esi
c001dbe3:	01 d8                	add    eax,ebx
c001dbe5:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dbec:	75 0a                	jne    c001dbf8 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dbee:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dbf8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dbfe:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dc02:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dc05:	01 ca                	add    edx,ecx
c001dc07:	83 ec 08             	sub    esp,0x8
c001dc0a:	89 d0                	mov    eax,edx
c001dc0c:	c1 e0 05             	shl    eax,0x5
c001dc0f:	01 d0                	add    eax,edx
c001dc11:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dc15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc19:	01 d8                	add    eax,ebx
c001dc1b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dc21:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dc27:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dc2d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dc33:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc39:	89 cd                	mov    ebp,ecx
c001dc3b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dc3f:	f7 dd                	neg    ebp
c001dc41:	c1 e5 15             	shl    ebp,0x15
c001dc44:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dc4a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dc50:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dc5a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dc60:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dc6a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc78:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dc7f:	53                   	push   ebx
c001dc80:	68 e4 f9 02 c0       	push   0xc002f9e4
c001dc85:	e8 46 b1 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc8a:	89 d8                	mov    eax,ebx
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	83 c4 1c             	add    esp,0x1c
c001dc92:	5b                   	pop    ebx
c001dc93:	5e                   	pop    esi
c001dc94:	5f                   	pop    edi
c001dc95:	5d                   	pop    ebp
c001dc96:	c3                   	ret    
c001dc97:	90                   	nop

c001dc98 <Process::createUserThread()>:
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	68 80 00 00 00       	push   0x80
c001dca0:	6a 00                	push   0x0
c001dca2:	68 5c d6 01 c0       	push   0xc001d65c
c001dca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcab:	e8 e2 fe ff ff       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c001dcb0:	83 c4 1c             	add    esp,0x1c
c001dcb3:	c3                   	ret    

c001dcb4 <setupMultitasking(void (*)())>:
c001dcb4:	56                   	push   esi
c001dcb5:	53                   	push   ebx
c001dcb6:	51                   	push   ecx
c001dcb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcbb:	eb 10                	jmp    c001dccd <setupMultitasking(void (*)())+0x19>
c001dcbd:	83 ec 0c             	sub    esp,0xc
c001dcc0:	68 e4 f9 02 c0       	push   0xc002f9e4
c001dcc5:	e8 58 b0 00 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	83 ec 0c             	sub    esp,0xc
c001dcd0:	68 e4 f9 02 c0       	push   0xc002f9e4
c001dcd5:	e8 24 b0 00 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	84 c0                	test   al,al
c001dcdf:	74 dc                	je     c001dcbd <setupMultitasking(void (*)())+0x9>
c001dce1:	83 ec 0c             	sub    esp,0xc
c001dce4:	68 3f 07 00 00       	push   0x73f
c001dce9:	e8 2d 1b ff ff       	call   c000f81b <malloc>
c001dcee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcf5:	89 c3                	mov    ebx,eax
c001dcf7:	6a 00                	push   0x0
c001dcf9:	68 6c c6 02 c0       	push   0xc002c66c
c001dcfe:	6a 01                	push   0x1
c001dd00:	50                   	push   eax
c001dd01:	e8 94 fc ff ff       	call   c001d99a <Process::Process(bool, char const*, Process*, char**)>
c001dd06:	83 c4 14             	add    esp,0x14
c001dd09:	89 1d f0 f9 02 c0    	mov    DWORD PTR ds:0xc002f9f0,ebx
c001dd0f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dd15:	e8 bb 28 ff ff       	call   c00105d5 <setActiveTerminal(VgaText*)>
c001dd1a:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dd22:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dd2c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd32:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dd35:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dd3f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dd45:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dd4b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dd55:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dd5f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd69:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd6f:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd79:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd7f:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd89:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd8f:	58                   	pop    eax
c001dd90:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd96:	5a                   	pop    edx
c001dd97:	68 68 c6 02 c0       	push   0xc002c668
c001dd9c:	50                   	push   eax
c001dd9d:	e8 6a 2a fe ff       	call   c000080c <strcpy>
c001dda2:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dda9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001ddad:	83 c4 14             	add    esp,0x14
c001ddb0:	5b                   	pop    ebx
c001ddb1:	5e                   	pop    esi
c001ddb2:	e9 9d 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001ddb7 <schedule()>:
c001ddb7:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001ddbc:	85 c0                	test   eax,eax
c001ddbe:	74 0b                	je     c001ddcb <schedule()+0x14>
c001ddc0:	c7 05 c0 f9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x1
c001ddca:	c3                   	ret    
c001ddcb:	53                   	push   ebx
c001ddcc:	83 ec 14             	sub    esp,0x14
c001ddcf:	68 e4 f9 02 c0       	push   0xc002f9e4
c001ddd4:	e8 25 af 00 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	84 c0                	test   al,al
c001ddde:	75 38                	jne    c001de18 <schedule()+0x61>
c001dde0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dde8:	4a                   	dec    edx
c001dde9:	74 32                	je     c001de1d <schedule()+0x66>
c001ddeb:	83 ec 0c             	sub    esp,0xc
c001ddee:	68 e4 f9 02 c0       	push   0xc002f9e4
c001ddf3:	e8 22 af 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf8:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c001ddff:	89 c3                	mov    ebx,eax
c001de01:	e8 1c af 00 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de06:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001de0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de10:	e8 9d f8 ff ff       	call   c001d6b2 <switchToThread(ThreadControlBlock*)>
c001de15:	83 c4 10             	add    esp,0x10
c001de18:	83 c4 08             	add    esp,0x8
c001de1b:	5b                   	pop    ebx
c001de1c:	c3                   	ret    
c001de1d:	83 ec 08             	sub    esp,0x8
c001de20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001de27:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001de2d:	68 e4 f9 02 c0       	push   0xc002f9e4
c001de32:	e8 99 af 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de37:	83 c4 10             	add    esp,0x10
c001de3a:	eb af                	jmp    c001ddeb <schedule()+0x34>

c001de3c <Semaphore::tryAcquire()>:
c001de3c:	53                   	push   ebx
c001de3d:	83 ec 08             	sub    esp,0x8
c001de40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de44:	fa                   	cli    
c001de45:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001de4a:	8d 50 01             	lea    edx,[eax+0x1]
c001de4d:	89 15 c8 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c8,edx
c001de53:	8b 15 c4 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f9c4
c001de59:	8d 5a 01             	lea    ebx,[edx+0x1]
c001de5c:	89 1d c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,ebx
c001de62:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001de65:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001de67:	7c 2a                	jl     c001de93 <Semaphore::tryAcquire()+0x57>
c001de69:	89 15 c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,edx
c001de6f:	85 d2                	test   edx,edx
c001de71:	75 0a                	jne    c001de7d <Semaphore::tryAcquire()+0x41>
c001de73:	8b 15 c0 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f9c0
c001de79:	85 d2                	test   edx,edx
c001de7b:	75 5b                	jne    c001ded8 <Semaphore::tryAcquire()+0x9c>
c001de7d:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001de82:	85 c0                	test   eax,eax
c001de84:	74 07                	je     c001de8d <Semaphore::tryAcquire()+0x51>
c001de86:	31 c0                	xor    eax,eax
c001de88:	83 c4 08             	add    esp,0x8
c001de8b:	5b                   	pop    ebx
c001de8c:	c3                   	ret    
c001de8d:	fb                   	sti    
c001de8e:	83 c4 08             	add    esp,0x8
c001de91:	5b                   	pop    ebx
c001de92:	c3                   	ret    
c001de93:	43                   	inc    ebx
c001de94:	89 15 c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,edx
c001de9a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001de9d:	85 d2                	test   edx,edx
c001de9f:	75 1f                	jne    c001dec0 <Semaphore::tryAcquire()+0x84>
c001dea1:	8b 0d c0 f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f9c0
c001dea7:	85 c9                	test   ecx,ecx
c001dea9:	74 15                	je     c001dec0 <Semaphore::tryAcquire()+0x84>
c001deab:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001deb5:	e8 fd fe ff ff       	call   c001ddb7 <schedule()>
c001deba:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001debf:	48                   	dec    eax
c001dec0:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001dec5:	85 c0                	test   eax,eax
c001dec7:	75 08                	jne    c001ded1 <Semaphore::tryAcquire()+0x95>
c001dec9:	fb                   	sti    
c001deca:	b0 01                	mov    al,0x1
c001decc:	83 c4 08             	add    esp,0x8
c001decf:	5b                   	pop    ebx
c001ded0:	c3                   	ret    
c001ded1:	b0 01                	mov    al,0x1
c001ded3:	83 c4 08             	add    esp,0x8
c001ded6:	5b                   	pop    ebx
c001ded7:	c3                   	ret    
c001ded8:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001dee2:	e8 d0 fe ff ff       	call   c001ddb7 <schedule()>
c001dee7:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001deec:	48                   	dec    eax
c001deed:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001def2:	85 c0                	test   eax,eax
c001def4:	75 90                	jne    c001de86 <Semaphore::tryAcquire()+0x4a>
c001def6:	eb 95                	jmp    c001de8d <Semaphore::tryAcquire()+0x51>

c001def8 <Semaphore::assertLocked(char const*)>:
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001deff:	fa                   	cli    
c001df00:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001df06:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001df0b:	8d 48 01             	lea    ecx,[eax+0x1]
c001df0e:	89 0d c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,ecx
c001df14:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001df16:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001df19:	7c 24                	jl     c001df3f <Semaphore::assertLocked(char const*)+0x47>
c001df1b:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001df20:	85 c0                	test   eax,eax
c001df22:	75 09                	jne    c001df2d <Semaphore::assertLocked(char const*)+0x35>
c001df24:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c001df29:	85 c0                	test   eax,eax
c001df2b:	75 29                	jne    c001df56 <Semaphore::assertLocked(char const*)+0x5e>
c001df2d:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001df32:	48                   	dec    eax
c001df33:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001df38:	75 01                	jne    c001df3b <Semaphore::assertLocked(char const*)+0x43>
c001df3a:	fb                   	sti    
c001df3b:	83 c4 0c             	add    esp,0xc
c001df3e:	c3                   	ret    
c001df3f:	83 ec 0c             	sub    esp,0xc
c001df42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001df46:	e8 da c2 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001df4b:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001df50:	83 c4 10             	add    esp,0x10
c001df53:	48                   	dec    eax
c001df54:	eb c5                	jmp    c001df1b <Semaphore::assertLocked(char const*)+0x23>
c001df56:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001df60:	e8 52 fe ff ff       	call   c001ddb7 <schedule()>
c001df65:	eb c6                	jmp    c001df2d <Semaphore::assertLocked(char const*)+0x35>

c001df67 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001df67:	83 ec 0c             	sub    esp,0xc
c001df6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df73:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df76:	e8 3c fe ff ff       	call   c001ddb7 <schedule()>
c001df7b:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001df80:	48                   	dec    eax
c001df81:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001df86:	75 01                	jne    c001df89 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001df88:	fb                   	sti    
c001df89:	83 c4 0c             	add    esp,0xc
c001df8c:	c3                   	ret    

c001df8d <blockTask(TaskState)>:
c001df8d:	83 ec 0c             	sub    esp,0xc
c001df90:	fa                   	cli    
c001df91:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001df97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfa0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dfa3:	e8 0f fe ff ff       	call   c001ddb7 <schedule()>
c001dfa8:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001dfad:	48                   	dec    eax
c001dfae:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001dfb3:	75 01                	jne    c001dfb6 <blockTask(TaskState)+0x29>
c001dfb5:	fb                   	sti    
c001dfb6:	83 c4 0c             	add    esp,0xc
c001dfb9:	c3                   	ret    

c001dfba <waitTask(int, int*, int)>:
c001dfba:	83 ec 18             	sub    esp,0x18
c001dfbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfc6:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dfc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dfcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfd2:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dfd5:	6a 07                	push   0x7
c001dfd7:	e8 b1 ff ff ff       	call   c001df8d <blockTask(TaskState)>
c001dfdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfe1:	83 c4 10             	add    esp,0x10
c001dfe4:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dfe7:	85 d2                	test   edx,edx
c001dfe9:	74 0a                	je     c001dff5 <waitTask(int, int*, int)+0x3b>
c001dfeb:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dfee:	89 02                	mov    DWORD PTR [edx],eax
c001dff0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dff5:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dff8:	83 c4 0c             	add    esp,0xc
c001dffb:	c3                   	ret    

c001dffc <nanoSleepUntil(unsigned long long)>:
c001dffc:	83 ec 0c             	sub    esp,0xc
c001dfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e003:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e007:	3b 05 30 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002eb30
c001e00d:	89 d1                	mov    ecx,edx
c001e00f:	1b 0d 34 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eb34
c001e015:	73 04                	jae    c001e01b <nanoSleepUntil(unsigned long long)+0x1f>
c001e017:	83 c4 0c             	add    esp,0xc
c001e01a:	c3                   	ret    
c001e01b:	fa                   	cli    
c001e01c:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e022:	83 ec 08             	sub    esp,0x8
c001e025:	ff 05 c4 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c4
c001e02b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e031:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e034:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e037:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e03d:	68 d8 f9 02 c0       	push   0xc002f9d8
c001e042:	e8 89 ad 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e047:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e04e:	e8 3a ff ff ff       	call   c001df8d <blockTask(TaskState)>
c001e053:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	48                   	dec    eax
c001e05c:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001e061:	85 c0                	test   eax,eax
c001e063:	75 09                	jne    c001e06e <nanoSleepUntil(unsigned long long)+0x72>
c001e065:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c001e06a:	85 c0                	test   eax,eax
c001e06c:	75 12                	jne    c001e080 <nanoSleepUntil(unsigned long long)+0x84>
c001e06e:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e073:	48                   	dec    eax
c001e074:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e079:	75 9c                	jne    c001e017 <nanoSleepUntil(unsigned long long)+0x1b>
c001e07b:	fb                   	sti    
c001e07c:	83 c4 0c             	add    esp,0xc
c001e07f:	c3                   	ret    
c001e080:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001e08a:	e8 28 fd ff ff       	call   c001ddb7 <schedule()>
c001e08f:	eb dd                	jmp    c001e06e <nanoSleepUntil(unsigned long long)+0x72>

c001e091 <nanoSleep(unsigned long long)>:
c001e091:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c001e096:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c001e09c:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e0a0:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e0a4:	e9 53 ff ff ff       	jmp    c001dffc <nanoSleepUntil(unsigned long long)>

c001e0a9 <sleep(unsigned long long)>:
c001e0a9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e0b1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e0b6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e0ba:	01 ca                	add    edx,ecx
c001e0bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0c4:	eb cb                	jmp    c001e091 <nanoSleep(unsigned long long)>

c001e0c6 <Semaphore::acquire()>:
c001e0c6:	83 ec 0c             	sub    esp,0xc
c001e0c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0cd:	fa                   	cli    
c001e0ce:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e0d3:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e0d9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e0dc:	89 0d c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,ecx
c001e0e2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e0e5:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e0e7:	7d 28                	jge    c001e111 <Semaphore::acquire()+0x4b>
c001e0e9:	41                   	inc    ecx
c001e0ea:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e0ed:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001e0f2:	85 c0                	test   eax,eax
c001e0f4:	75 09                	jne    c001e0ff <Semaphore::acquire()+0x39>
c001e0f6:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c001e0fb:	85 c0                	test   eax,eax
c001e0fd:	75 5d                	jne    c001e15c <Semaphore::acquire()+0x96>
c001e0ff:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e104:	48                   	dec    eax
c001e105:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e10a:	75 01                	jne    c001e10d <Semaphore::acquire()+0x47>
c001e10c:	fb                   	sti    
c001e10d:	83 c4 0c             	add    esp,0xc
c001e110:	c3                   	ret    
c001e111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e116:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e11d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e120:	85 c9                	test   ecx,ecx
c001e122:	74 49                	je     c001e16d <Semaphore::acquire()+0xa7>
c001e124:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e127:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e12d:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e135:	83 ec 0c             	sub    esp,0xc
c001e138:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e13b:	68 e8 c6 02 c0       	push   0xc002c6e8
c001e140:	e8 37 47 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001e145:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e14c:	e8 3c fe ff ff       	call   c001df8d <blockTask(TaskState)>
c001e151:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e156:	83 c4 10             	add    esp,0x10
c001e159:	48                   	dec    eax
c001e15a:	eb 91                	jmp    c001e0ed <Semaphore::acquire()+0x27>
c001e15c:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001e166:	e8 4c fc ff ff       	call   c001ddb7 <schedule()>
c001e16b:	eb 92                	jmp    c001e0ff <Semaphore::acquire()+0x39>
c001e16d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e172:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e175:	eb b9                	jmp    c001e130 <Semaphore::acquire()+0x6a>

c001e177 <taskReturned>:
c001e177:	83 ec 18             	sub    esp,0x18
c001e17a:	68 08 c7 02 c0       	push   0xc002c708
c001e17f:	e8 a1 c0 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001e184:	83 c4 10             	add    esp,0x10
c001e187:	83 ec 0c             	sub    esp,0xc
c001e18a:	6a 02                	push   0x2
c001e18c:	e8 fc fd ff ff       	call   c001df8d <blockTask(TaskState)>
c001e191:	fa                   	cli    
c001e192:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e198:	e8 1a fc ff ff       	call   c001ddb7 <schedule()>
c001e19d:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	48                   	dec    eax
c001e1a6:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e1ab:	85 c0                	test   eax,eax
c001e1ad:	75 d8                	jne    c001e187 <taskReturned+0x10>
c001e1af:	fb                   	sti    
c001e1b0:	eb d5                	jmp    c001e187 <taskReturned+0x10>

c001e1b2 <Thr::processFromPID(int)>:
c001e1b2:	57                   	push   edi
c001e1b3:	56                   	push   esi
c001e1b4:	53                   	push   ebx
c001e1b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e1b9:	fa                   	cli    
c001e1ba:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e1c8:	e8 4d ab 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1cd:	83 c4 10             	add    esp,0x10
c001e1d0:	89 c7                	mov    edi,eax
c001e1d2:	eb 14                	jmp    c001e1e8 <Thr::processFromPID(int)+0x36>
c001e1d4:	83 ec 0c             	sub    esp,0xc
c001e1d7:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e1dc:	e8 39 ab 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	39 f8                	cmp    eax,edi
c001e1e6:	74 49                	je     c001e231 <Thr::processFromPID(int)+0x7f>
c001e1e8:	83 ec 0c             	sub    esp,0xc
c001e1eb:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e1f0:	e8 25 ab 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1f5:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c001e1fc:	89 c3                	mov    ebx,eax
c001e1fe:	e8 1f ab 00 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e203:	58                   	pop    eax
c001e204:	5a                   	pop    edx
c001e205:	53                   	push   ebx
c001e206:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e20b:	e8 c0 ab 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e210:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e213:	83 c4 10             	add    esp,0x10
c001e216:	39 30                	cmp    DWORD PTR [eax],esi
c001e218:	75 ba                	jne    c001e1d4 <Thr::processFromPID(int)+0x22>
c001e21a:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e21f:	48                   	dec    eax
c001e220:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e225:	74 07                	je     c001e22e <Thr::processFromPID(int)+0x7c>
c001e227:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e22a:	5b                   	pop    ebx
c001e22b:	5e                   	pop    esi
c001e22c:	5f                   	pop    edi
c001e22d:	c3                   	ret    
c001e22e:	fb                   	sti    
c001e22f:	eb f6                	jmp    c001e227 <Thr::processFromPID(int)+0x75>
c001e231:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e236:	48                   	dec    eax
c001e237:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e23c:	75 05                	jne    c001e243 <Thr::processFromPID(int)+0x91>
c001e23e:	fb                   	sti    
c001e23f:	5b                   	pop    ebx
c001e240:	5e                   	pop    esi
c001e241:	5f                   	pop    edi
c001e242:	c3                   	ret    
c001e243:	5b                   	pop    ebx
c001e244:	31 c0                	xor    eax,eax
c001e246:	5e                   	pop    esi
c001e247:	5f                   	pop    edi
c001e248:	c3                   	ret    

c001e249 <unblockTask(ThreadControlBlock*)>:
c001e249:	53                   	push   ebx
c001e24a:	83 ec 08             	sub    esp,0x8
c001e24d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e251:	fa                   	cli    
c001e252:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e258:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e25b:	85 c0                	test   eax,eax
c001e25d:	74 5a                	je     c001e2b9 <unblockTask(ThreadControlBlock*)+0x70>
c001e25f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e262:	48                   	dec    eax
c001e263:	74 31                	je     c001e296 <unblockTask(ThreadControlBlock*)+0x4d>
c001e265:	83 ec 0c             	sub    esp,0xc
c001e268:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e26d:	e8 a8 aa 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	85 c0                	test   eax,eax
c001e277:	75 17                	jne    c001e290 <unblockTask(ThreadControlBlock*)+0x47>
c001e279:	eb 50                	jmp    c001e2cb <unblockTask(ThreadControlBlock*)+0x82>
c001e27b:	83 ec 08             	sub    esp,0x8
c001e27e:	50                   	push   eax
c001e27f:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e284:	e8 19 ae 00 00       	call   c00290a2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	85 c0                	test   eax,eax
c001e28e:	74 3b                	je     c001e2cb <unblockTask(ThreadControlBlock*)+0x82>
c001e290:	39 c3                	cmp    ebx,eax
c001e292:	75 e7                	jne    c001e27b <unblockTask(ThreadControlBlock*)+0x32>
c001e294:	eb 10                	jmp    c001e2a6 <unblockTask(ThreadControlBlock*)+0x5d>
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	68 8a c6 02 c0       	push   0xc002c68a
c001e29e:	e8 d9 45 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e2ab:	48                   	dec    eax
c001e2ac:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e2b1:	75 01                	jne    c001e2b4 <unblockTask(ThreadControlBlock*)+0x6b>
c001e2b3:	fb                   	sti    
c001e2b4:	83 c4 08             	add    esp,0x8
c001e2b7:	5b                   	pop    ebx
c001e2b8:	c3                   	ret    
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	68 73 c6 02 c0       	push   0xc002c673
c001e2c1:	e8 b6 45 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001e2c6:	83 c4 10             	add    esp,0x10
c001e2c9:	eb db                	jmp    c001e2a6 <unblockTask(ThreadControlBlock*)+0x5d>
c001e2cb:	83 ec 08             	sub    esp,0x8
c001e2ce:	53                   	push   ebx
c001e2cf:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e2d4:	e8 f7 aa 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2d9:	83 c4 10             	add    esp,0x10
c001e2dc:	eb c8                	jmp    c001e2a6 <unblockTask(ThreadControlBlock*)+0x5d>

c001e2de <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e2de:	55                   	push   ebp
c001e2df:	57                   	push   edi
c001e2e0:	56                   	push   esi
c001e2e1:	53                   	push   ebx
c001e2e2:	83 ec 1c             	sub    esp,0x1c
c001e2e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2e9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2ec:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e2f2:	85 ff                	test   edi,edi
c001e2f4:	7e 20                	jle    c001e316 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e2f6:	31 f6                	xor    esi,esi
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e302:	46                   	inc    esi
c001e303:	e8 23 15 ff ff       	call   c000f82b <free>
c001e308:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e314:	7f e2                	jg     c001e2f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e316:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e320:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e325:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e328:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e32b:	d3 c0                	rol    eax,cl
c001e32d:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e334:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e337:	89 f7                	mov    edi,esi
c001e339:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e341:	0f 85 64 01 00 00    	jne    c001e4ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e347:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e34d:	85 ed                	test   ebp,ebp
c001e34f:	74 1b                	je     c001e36c <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e351:	83 ec 0c             	sub    esp,0xc
c001e354:	55                   	push   ebp
c001e355:	e8 70 bc ff ff       	call   c0019fca <EnvVarContainer::~EnvVarContainer()>
c001e35a:	59                   	pop    ecx
c001e35b:	5e                   	pop    esi
c001e35c:	6a 0c                	push   0xc
c001e35e:	55                   	push   ebp
c001e35f:	e8 37 44 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001e364:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	89 f7                	mov    edi,esi
c001e36c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e372:	85 c0                	test   eax,eax
c001e374:	0f 84 aa 00 00 00    	je     c001e424 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e37a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e37d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e381:	31 c9                	xor    ecx,ecx
c001e383:	eb 10                	jmp    c001e395 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e385:	41                   	inc    ecx
c001e386:	83 f9 10             	cmp    ecx,0x10
c001e389:	0f 84 95 00 00 00    	je     c001e424 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e38f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e395:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e39c:	d3 fa                	sar    edx,cl
c001e39e:	83 e2 01             	and    edx,0x1
c001e3a1:	74 e2                	je     c001e385 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3a3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e3a6:	01 ca                	add    edx,ecx
c001e3a8:	89 d5                	mov    ebp,edx
c001e3aa:	c1 e5 05             	shl    ebp,0x5
c001e3ad:	01 ea                	add    edx,ebp
c001e3af:	01 d0                	add    eax,edx
c001e3b1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e3b7:	83 fd 07             	cmp    ebp,0x7
c001e3ba:	75 c9                	jne    c001e385 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3bc:	05 40 02 00 00       	add    eax,0x240
c001e3c1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e3c4:	83 fd ff             	cmp    ebp,0xffffffff
c001e3c7:	0f 8c e6 00 00 00    	jl     c001e4b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e3cd:	0f 84 97 01 00 00    	je     c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e3d3:	85 ed                	test   ebp,ebp
c001e3d5:	0f 84 7e 01 00 00    	je     c001e559 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e3db:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e3dd:	75 a6                	jne    c001e385 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3df:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e3e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3e9:	01 d0                	add    eax,edx
c001e3eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e3ef:	83 ec 0c             	sub    esp,0xc
c001e3f2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e3f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3fb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e401:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e408:	50                   	push   eax
c001e409:	e8 3b fe ff ff       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c001e40e:	83 c4 10             	add    esp,0x10
c001e411:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e414:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e418:	89 f7                	mov    edi,esi
c001e41a:	41                   	inc    ecx
c001e41b:	83 f9 10             	cmp    ecx,0x10
c001e41e:	0f 85 6b ff ff ff    	jne    c001e38f <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e424:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e42a:	85 c0                	test   eax,eax
c001e42c:	74 5d                	je     c001e48b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e42e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e434:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e43a:	74 4f                	je     c001e48b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e43c:	83 ec 0c             	sub    esp,0xc
c001e43f:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e444:	e8 d1 a8 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e449:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c001e450:	89 c7                	mov    edi,eax
c001e452:	e8 a7 a8 00 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	84 c0                	test   al,al
c001e45c:	0f 84 c2 00 00 00    	je     c001e524 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e462:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e465:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e46b:	85 d2                	test   edx,edx
c001e46d:	74 0f                	je     c001e47e <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e46f:	83 ec 0c             	sub    esp,0xc
c001e472:	8b 02                	mov    eax,DWORD PTR [edx]
c001e474:	52                   	push   edx
c001e475:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e478:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e47b:	83 c4 10             	add    esp,0x10
c001e47e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e488:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e48b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e491:	85 db                	test   ebx,ebx
c001e493:	74 16                	je     c001e4ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e495:	83 ec 0c             	sub    esp,0xc
c001e498:	53                   	push   ebx
c001e499:	e8 2e 35 ff ff       	call   c00119cc <VAS::~VAS()>
c001e49e:	58                   	pop    eax
c001e49f:	5a                   	pop    edx
c001e4a0:	6a 14                	push   0x14
c001e4a2:	53                   	push   ebx
c001e4a3:	e8 f3 42 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001e4a8:	83 c4 10             	add    esp,0x10
c001e4ab:	83 c4 1c             	add    esp,0x1c
c001e4ae:	5b                   	pop    ebx
c001e4af:	5e                   	pop    esi
c001e4b0:	5f                   	pop    edi
c001e4b1:	5d                   	pop    ebp
c001e4b2:	c3                   	ret    
c001e4b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4b7:	83 ec 0c             	sub    esp,0xc
c001e4ba:	68 3c c7 02 c0       	push   0xc002c73c
c001e4bf:	e8 61 bd ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001e4c4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	89 f7                	mov    edi,esi
c001e4cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4d0:	e9 b0 fe ff ff       	jmp    c001e385 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e4db:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e4e1:	75 1c                	jne    c001e4ff <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e4e3:	83 ec 0c             	sub    esp,0xc
c001e4e6:	68 a4 c7 02 c0       	push   0xc002c7a4
c001e4eb:	e8 8c 43 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001e4f0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e4f7:	e8 91 fa ff ff       	call   c001df8d <blockTask(TaskState)>
c001e4fc:	83 c4 10             	add    esp,0x10
c001e4ff:	83 ec 08             	sub    esp,0x8
c001e502:	56                   	push   esi
c001e503:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e508:	e8 c3 a8 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e50d:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c001e514:	e8 01 a8 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	39 f8                	cmp    eax,edi
c001e51e:	0f 84 3e ff ff ff    	je     c001e462 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e524:	83 ec 0c             	sub    esp,0xc
c001e527:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e52c:	e8 e9 a7 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e531:	c7 04 24 e4 f9 02 c0 	mov    DWORD PTR [esp],0xc002f9e4
c001e538:	89 c6                	mov    esi,eax
c001e53a:	e8 e3 a7 00 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e53f:	83 c4 10             	add    esp,0x10
c001e542:	39 f3                	cmp    ebx,esi
c001e544:	74 b9                	je     c001e4ff <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e546:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e549:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54c:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e552:	75 ab                	jne    c001e4ff <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e554:	e9 7c ff ff ff       	jmp    c001e4d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e55d:	83 ec 0c             	sub    esp,0xc
c001e560:	68 70 c7 02 c0       	push   0xc002c770
c001e565:	e9 55 ff ff ff       	jmp    c001e4bf <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e56a:	8b 36                	mov    esi,DWORD PTR [esi]
c001e56c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e570:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e573:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e576:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e57c:	01 d7                	add    edi,edx
c001e57e:	89 f8                	mov    eax,edi
c001e580:	e9 66 fe ff ff       	jmp    c001e3eb <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e585 <cleanerTaskFunction(void*)>:
c001e585:	53                   	push   ebx
c001e586:	83 ec 08             	sub    esp,0x8
c001e589:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e58e:	48                   	dec    eax
c001e58f:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e594:	75 01                	jne    c001e597 <cleanerTaskFunction(void*)+0x12>
c001e596:	fb                   	sti    
c001e597:	fa                   	cli    
c001e598:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e59d:	80 3d ac f9 02 c0 00 	cmp    BYTE PTR ds:0xc002f9ac,0x0
c001e5a4:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a7:	89 15 c8 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c8,edx
c001e5ad:	0f 84 a1 00 00 00    	je     c001e654 <cleanerTaskFunction(void*)+0xcf>
c001e5b3:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e5b8:	85 c0                	test   eax,eax
c001e5ba:	75 01                	jne    c001e5bd <cleanerTaskFunction(void*)+0x38>
c001e5bc:	fb                   	sti    
c001e5bd:	c6 05 ac f9 02 c0 00 	mov    BYTE PTR ds:0xc002f9ac,0x0
c001e5c4:	fa                   	cli    
c001e5c5:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e5cb:	ff 05 c4 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c4
c001e5d1:	fa                   	cli    
c001e5d2:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e5d8:	eb 26                	jmp    c001e600 <cleanerTaskFunction(void*)+0x7b>
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	68 cc f9 02 c0       	push   0xc002f9cc
c001e5e2:	e8 33 a7 00 00       	call   c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5e7:	c7 04 24 cc f9 02 c0 	mov    DWORD PTR [esp],0xc002f9cc
c001e5ee:	89 c3                	mov    ebx,eax
c001e5f0:	e8 2d a7 00 00       	call   c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5f8:	e8 e1 fc ff ff       	call   c001e2de <cleanupTerminatedTask(ThreadControlBlock*)>
c001e5fd:	83 c4 10             	add    esp,0x10
c001e600:	83 ec 0c             	sub    esp,0xc
c001e603:	68 cc f9 02 c0       	push   0xc002f9cc
c001e608:	e8 f1 a6 00 00       	call   c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	84 c0                	test   al,al
c001e612:	74 c6                	je     c001e5da <cleanerTaskFunction(void*)+0x55>
c001e614:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e619:	48                   	dec    eax
c001e61a:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e61f:	75 01                	jne    c001e622 <cleanerTaskFunction(void*)+0x9d>
c001e621:	fb                   	sti    
c001e622:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e627:	48                   	dec    eax
c001e628:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001e62d:	0f 85 56 ff ff ff    	jne    c001e589 <cleanerTaskFunction(void*)+0x4>
c001e633:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c001e638:	85 c0                	test   eax,eax
c001e63a:	0f 84 49 ff ff ff    	je     c001e589 <cleanerTaskFunction(void*)+0x4>
c001e640:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001e64a:	e8 68 f7 ff ff       	call   c001ddb7 <schedule()>
c001e64f:	e9 35 ff ff ff       	jmp    c001e589 <cleanerTaskFunction(void*)+0x4>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	6a 02                	push   0x2
c001e659:	e8 09 f9 ff ff       	call   c001df67 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	e9 57 ff ff ff       	jmp    c001e5bd <cleanerTaskFunction(void*)+0x38>

c001e666 <terminateTask(int)>:
c001e666:	83 ec 14             	sub    esp,0x14
c001e669:	fa                   	cli    
c001e66a:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e670:	ff 05 c4 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c4
c001e676:	fa                   	cli    
c001e677:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e67d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e686:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e68e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e691:	50                   	push   eax
c001e692:	68 cc f9 02 c0       	push   0xc002f9cc
c001e697:	e8 34 a7 00 00       	call   c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6a1:	83 c4 10             	add    esp,0x10
c001e6a4:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e6ab:	a1 a8 f9 02 c0       	mov    eax,ds:0xc002f9a8
c001e6b0:	85 c0                	test   eax,eax
c001e6b2:	74 53                	je     c001e707 <terminateTask(int)+0xa1>
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	c6 05 ac f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9ac,0x1
c001e6be:	50                   	push   eax
c001e6bf:	e8 85 fb ff ff       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e6cc:	48                   	dec    eax
c001e6cd:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e6d2:	75 01                	jne    c001e6d5 <terminateTask(int)+0x6f>
c001e6d4:	fb                   	sti    
c001e6d5:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e6da:	48                   	dec    eax
c001e6db:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001e6e0:	75 09                	jne    c001e6eb <terminateTask(int)+0x85>
c001e6e2:	83 3d c0 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f9c0,0x0
c001e6e9:	75 2e                	jne    c001e719 <terminateTask(int)+0xb3>
c001e6eb:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e6f0:	48                   	dec    eax
c001e6f1:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e6f6:	75 01                	jne    c001e6f9 <terminateTask(int)+0x93>
c001e6f8:	fb                   	sti    
c001e6f9:	fa                   	cli    
c001e6fa:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e700:	e8 b2 f6 ff ff       	call   c001ddb7 <schedule()>
c001e705:	eb e4                	jmp    c001e6eb <terminateTask(int)+0x85>
c001e707:	83 ec 0c             	sub    esp,0xc
c001e70a:	68 a1 c6 02 c0       	push   0xc002c6a1
c001e70f:	e8 68 41 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001e714:	83 c4 10             	add    esp,0x10
c001e717:	eb ae                	jmp    c001e6c7 <terminateTask(int)+0x61>
c001e719:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001e723:	eb db                	jmp    c001e700 <terminateTask(int)+0x9a>

c001e725 <Thr::terminateFromIRQ(int)>:
c001e725:	83 ec 18             	sub    esp,0x18
c001e728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e72c:	e8 35 ff ff ff       	call   c001e666 <terminateTask(int)>
c001e731:	90                   	nop

c001e732 <Semaphore::release()>:
c001e732:	83 ec 0c             	sub    esp,0xc
c001e735:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e739:	fa                   	cli    
c001e73a:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e73f:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e745:	8d 48 01             	lea    ecx,[eax+0x1]
c001e748:	89 0d c4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c4,ecx
c001e74e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e751:	85 c9                	test   ecx,ecx
c001e753:	74 3c                	je     c001e791 <Semaphore::release()+0x5f>
c001e755:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e75e:	51                   	push   ecx
c001e75f:	e8 e5 fa ff ff       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c001e764:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	48                   	dec    eax
c001e76d:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001e772:	85 c0                	test   eax,eax
c001e774:	75 09                	jne    c001e77f <Semaphore::release()+0x4d>
c001e776:	a1 c0 f9 02 c0       	mov    eax,ds:0xc002f9c0
c001e77b:	85 c0                	test   eax,eax
c001e77d:	75 17                	jne    c001e796 <Semaphore::release()+0x64>
c001e77f:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e784:	48                   	dec    eax
c001e785:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e78a:	75 01                	jne    c001e78d <Semaphore::release()+0x5b>
c001e78c:	fb                   	sti    
c001e78d:	83 c4 0c             	add    esp,0xc
c001e790:	c3                   	ret    
c001e791:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e794:	eb d7                	jmp    c001e76d <Semaphore::release()+0x3b>
c001e796:	c7 05 c0 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c0,0x0
c001e7a0:	e8 12 f6 ff ff       	call   c001ddb7 <schedule()>
c001e7a5:	eb d8                	jmp    c001e77f <Semaphore::release()+0x4d>

c001e7a7 <__static_initialization_and_destruction_0(int, int)>:
c001e7a7:	83 ec 0c             	sub    esp,0xc
c001e7aa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7af:	0f 85 88 00 00 00    	jne    c001e83d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7b5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7bd:	75 7e                	jne    c001e83d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7bf:	83 ec 0c             	sub    esp,0xc
c001e7c2:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e7c7:	e8 94 a8 00 00       	call   c0029060 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	83 ec 04             	sub    esp,0x4
c001e7d2:	68 84 d2 02 c0       	push   0xc002d284
c001e7d7:	68 e4 f9 02 c0       	push   0xc002f9e4
c001e7dc:	68 14 90 02 c0       	push   0xc0029014
c001e7e1:	e8 2f 3f ff ff       	call   c0012715 <__cxa_atexit>
c001e7e6:	83 c4 10             	add    esp,0x10
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	68 d8 f9 02 c0       	push   0xc002f9d8
c001e7f1:	e8 6a a8 00 00       	call   c0029060 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	83 ec 04             	sub    esp,0x4
c001e7fc:	68 84 d2 02 c0       	push   0xc002d284
c001e801:	68 d8 f9 02 c0       	push   0xc002f9d8
c001e806:	68 14 90 02 c0       	push   0xc0029014
c001e80b:	e8 05 3f ff ff       	call   c0012715 <__cxa_atexit>
c001e810:	83 c4 10             	add    esp,0x10
c001e813:	83 ec 0c             	sub    esp,0xc
c001e816:	68 cc f9 02 c0       	push   0xc002f9cc
c001e81b:	e8 40 a8 00 00       	call   c0029060 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e820:	83 c4 10             	add    esp,0x10
c001e823:	83 ec 04             	sub    esp,0x4
c001e826:	68 84 d2 02 c0       	push   0xc002d284
c001e82b:	68 cc f9 02 c0       	push   0xc002f9cc
c001e830:	68 14 90 02 c0       	push   0xc0029014
c001e835:	e8 db 3e ff ff       	call   c0012715 <__cxa_atexit>
c001e83a:	83 c4 10             	add    esp,0x10
c001e83d:	90                   	nop
c001e83e:	83 c4 0c             	add    esp,0xc
c001e841:	c3                   	ret    

c001e842 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e842:	83 ec 0c             	sub    esp,0xc
c001e845:	83 ec 08             	sub    esp,0x8
c001e848:	68 ff ff 00 00       	push   0xffff
c001e84d:	6a 01                	push   0x1
c001e84f:	e8 53 ff ff ff       	call   c001e7a7 <__static_initialization_and_destruction_0(int, int)>
c001e854:	83 c4 10             	add    esp,0x10
c001e857:	83 c4 0c             	add    esp,0xc
c001e85a:	c3                   	ret    

c001e85b <Vm::inbv(unsigned short)>:
c001e85b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e85f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e864:	75 06                	jne    c001e86c <Vm::inbv(unsigned short)+0x11>
c001e866:	a0 2c fa 02 c0       	mov    al,ds:0xc002fa2c
c001e86b:	c3                   	ret    
c001e86c:	ec                   	in     al,dx
c001e86d:	c3                   	ret    

c001e86e <Vm::outbv(unsigned short, unsigned char)>:
c001e86e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e872:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e876:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e87b:	75 25                	jne    c001e8a2 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e87d:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c001e883:	8d 51 01             	lea    edx,[ecx+0x1]
c001e886:	88 81 40 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd05c0],al
c001e88c:	89 15 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,edx
c001e892:	83 fa 20             	cmp    edx,0x20
c001e895:	75 0c                	jne    c001e8a3 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e897:	c7 05 2c fa 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fa2c,0x1f
c001e8a1:	c3                   	ret    
c001e8a2:	ee                   	out    dx,al
c001e8a3:	c3                   	ret    

c001e8a4 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ae:	c1 e0 04             	shl    eax,0x4
c001e8b1:	01 d0                	add    eax,edx
c001e8b3:	c3                   	ret    

c001e8b4 <Vm::getSegment(unsigned int)>:
c001e8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b8:	c1 e8 10             	shr    eax,0x10
c001e8bb:	c3                   	ret    

c001e8bc <Vm::getOffset(unsigned int)>:
c001e8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c0:	c3                   	ret    

c001e8c1 <Vm::mainloop2()>:
c001e8c1:	83 ec 18             	sub    esp,0x18
c001e8c4:	fa                   	cli    
c001e8c5:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e8cb:	6a 02                	push   0x2
c001e8cd:	c6 05 25 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa25,0x1
c001e8d4:	e8 8e f6 ff ff       	call   c001df67 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8de:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e8e2:	52                   	push   edx
c001e8e3:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e8e7:	52                   	push   edx
c001e8e8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e8ec:	52                   	push   edx
c001e8ed:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e8f1:	50                   	push   eax
c001e8f2:	e8 03 1a fe ff       	call   c00002fa <goToVM86>
c001e8f7:	83 c4 2c             	add    esp,0x2c
c001e8fa:	c3                   	ret    

c001e8fb <Vm::mainVm8086Loop(void*)>:
c001e8fb:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e900:	48                   	dec    eax
c001e901:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e906:	75 01                	jne    c001e909 <Vm::mainVm8086Loop(void*)+0xe>
c001e908:	fb                   	sti    
c001e909:	eb b6                	jmp    c001e8c1 <Vm::mainloop2()>

c001e90b <Vm::mainloop3(unsigned long)>:
c001e90b:	83 ec 18             	sub    esp,0x18
c001e90e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e912:	fa                   	cli    
c001e913:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e919:	6a 02                	push   0x2
c001e91b:	c6 05 24 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa24,0x1
c001e922:	a3 20 fa 02 c0       	mov    ds:0xc002fa20,eax
c001e927:	e8 3b f6 ff ff       	call   c001df67 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e92c:	83 c4 1c             	add    esp,0x1c
c001e92f:	eb 90                	jmp    c001e8c1 <Vm::mainloop2()>

c001e931 <Vm::initialise8086()>:
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 80 00 00 00       	push   0x80
c001e939:	6a 00                	push   0x0
c001e93b:	68 fb e8 01 c0       	push   0xc001e8fb
c001e940:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001e946:	e8 47 f2 ff ff       	call   c001db92 <Process::createThread(void (*)(void*), void*, int)>
c001e94b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e952:	a3 28 fa 02 c0       	mov    ds:0xc002fa28,eax
c001e957:	68 00 01 00 00       	push   0x100
c001e95c:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c001e961:	6a 00                	push   0x0
c001e963:	6a 00                	push   0x0
c001e965:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e96b:	e8 ce 34 ff ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e970:	83 c4 2c             	add    esp,0x2c
c001e973:	c3                   	ret    

c001e974 <Vm::finish8086()>:
c001e974:	53                   	push   ebx
c001e975:	83 ec 08             	sub    esp,0x8
c001e978:	fa                   	cli    
c001e979:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001e97f:	80 3d 24 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa24,0x0
c001e986:	75 15                	jne    c001e99d <Vm::finish8086()+0x29>
c001e988:	e8 2a f4 ff ff       	call   c001ddb7 <schedule()>
c001e98d:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e992:	48                   	dec    eax
c001e993:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001e998:	75 de                	jne    c001e978 <Vm::finish8086()+0x4>
c001e99a:	fb                   	sti    
c001e99b:	eb db                	jmp    c001e978 <Vm::finish8086()+0x4>
c001e99d:	83 ec 0c             	sub    esp,0xc
c001e9a0:	8b 1d 20 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa20
c001e9a6:	ff 35 28 fa 02 c0    	push   DWORD PTR ds:0xc002fa28
c001e9ac:	c6 05 24 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa24,0x0
c001e9b3:	e8 91 f8 ff ff       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c001e9b8:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9c3:	89 15 c8 f9 02 c0    	mov    DWORD PTR ds:0xc002f9c8,edx
c001e9c9:	85 d2                	test   edx,edx
c001e9cb:	75 01                	jne    c001e9ce <Vm::finish8086()+0x5a>
c001e9cd:	fb                   	sti    
c001e9ce:	89 d8                	mov    eax,ebx
c001e9d0:	83 c4 08             	add    esp,0x8
c001e9d3:	5b                   	pop    ebx
c001e9d4:	c3                   	ret    

c001e9d5 <Vm::getOutput8086(unsigned char*)>:
c001e9d5:	57                   	push   edi
c001e9d6:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c001e9dc:	56                   	push   esi
c001e9dd:	be 40 fa 02 c0       	mov    esi,0xc002fa40
c001e9e2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e9e8:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001e9ed:	5e                   	pop    esi
c001e9ee:	c7 05 2c fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa2c,0x0
c001e9f8:	5f                   	pop    edi
c001e9f9:	c3                   	ret    

c001e9fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e9fa:	55                   	push   ebp
c001e9fb:	57                   	push   edi
c001e9fc:	56                   	push   esi
c001e9fd:	53                   	push   ebx
c001e9fe:	83 ec 2c             	sub    esp,0x2c
c001ea01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ea05:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ea09:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ea0d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ea11:	fa                   	cli    
c001ea12:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c001ea18:	0f b6 35 25 fa 02 c0 	movzx  esi,BYTE PTR ds:0xc002fa25
c001ea1f:	89 f0                	mov    eax,esi
c001ea21:	84 c0                	test   al,al
c001ea23:	75 1d                	jne    c001ea42 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ea25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ea29:	e8 89 f3 ff ff       	call   c001ddb7 <schedule()>
c001ea2e:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001ea33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea37:	48                   	dec    eax
c001ea38:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001ea3d:	75 d2                	jne    c001ea11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea3f:	fb                   	sti    
c001ea40:	eb cf                	jmp    c001ea11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea42:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c001ea47:	c7 05 2c fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa2c,0x0
c001ea51:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ea55:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ea59:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ea5d:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ea61:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea65:	50                   	push   eax
c001ea66:	6a 20                	push   0x20
c001ea68:	6a 00                	push   0x0
c001ea6a:	68 40 fa 02 c0       	push   0xc002fa40
c001ea6f:	e8 dc 1c fe ff       	call   c0000750 <memset>
c001ea74:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea7b:	e8 9b 0d ff ff       	call   c000f81b <malloc>
c001ea80:	83 c4 0c             	add    esp,0xc
c001ea83:	89 c3                	mov    ebx,eax
c001ea85:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c001ea8b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea8f:	50                   	push   eax
c001ea90:	e8 51 43 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c001ea95:	83 c4 10             	add    esp,0x10
c001ea98:	85 db                	test   ebx,ebx
c001ea9a:	75 0a                	jne    c001eaa6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	68 cc c7 02 c0       	push   0xc002c7cc
c001eaa4:	eb 3e                	jmp    c001eae4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eaa6:	50                   	push   eax
c001eaa7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eaab:	50                   	push   eax
c001eaac:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eab0:	50                   	push   eax
c001eab1:	53                   	push   ebx
c001eab2:	e8 3f 46 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c001eab7:	83 c4 10             	add    esp,0x10
c001eaba:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eabf:	74 0a                	je     c001eacb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	68 e0 c7 02 c0       	push   0xc002c7e0
c001eac9:	eb 19                	jmp    c001eae4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eacb:	51                   	push   ecx
c001eacc:	51                   	push   ecx
c001eacd:	6a 01                	push   0x1
c001eacf:	53                   	push   ebx
c001ead0:	e8 75 43 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c001ead5:	83 c4 10             	add    esp,0x10
c001ead8:	85 c0                	test   eax,eax
c001eada:	74 24                	je     c001eb00 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eadc:	83 ec 0c             	sub    esp,0xc
c001eadf:	68 f9 c7 02 c0       	push   0xc002c7f9
c001eae4:	e8 3c b7 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001eae9:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001eaee:	83 c4 10             	add    esp,0x10
c001eaf1:	48                   	dec    eax
c001eaf2:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001eaf7:	85 c0                	test   eax,eax
c001eaf9:	75 01                	jne    c001eafc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eafb:	fb                   	sti    
c001eafc:	31 f6                	xor    esi,esi
c001eafe:	eb 58                	jmp    c001eb58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eb00:	0f b7 ed             	movzx  ebp,bp
c001eb03:	50                   	push   eax
c001eb04:	0f b7 ff             	movzx  edi,di
c001eb07:	50                   	push   eax
c001eb08:	55                   	push   ebp
c001eb09:	57                   	push   edi
c001eb0a:	e8 95 fd ff ff       	call   c001e8a4 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb0f:	5a                   	pop    edx
c001eb10:	8b 13                	mov    edx,DWORD PTR [ebx]
c001eb12:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb16:	51                   	push   ecx
c001eb17:	50                   	push   eax
c001eb18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb20:	53                   	push   ebx
c001eb21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb24:	83 c4 14             	add    esp,0x14
c001eb27:	53                   	push   ebx
c001eb28:	e8 7b 43 ff ff       	call   c0012ea8 <File::close()>
c001eb2d:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c001eb32:	83 c4 10             	add    esp,0x10
c001eb35:	48                   	dec    eax
c001eb36:	c6 05 25 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa25,0x0
c001eb3d:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c001eb42:	85 c0                	test   eax,eax
c001eb44:	75 01                	jne    c001eb47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001eb46:	fb                   	sti    
c001eb47:	83 ec 0c             	sub    esp,0xc
c001eb4a:	ff 35 28 fa 02 c0    	push   DWORD PTR ds:0xc002fa28
c001eb50:	e8 f4 f6 ff ff       	call   c001e249 <unblockTask(ThreadControlBlock*)>
c001eb55:	83 c4 10             	add    esp,0x10
c001eb58:	83 c4 2c             	add    esp,0x2c
c001eb5b:	89 f0                	mov    eax,esi
c001eb5d:	5b                   	pop    ebx
c001eb5e:	5e                   	pop    esi
c001eb5f:	5f                   	pop    edi
c001eb60:	5d                   	pop    ebp
c001eb61:	c3                   	ret    

c001eb62 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb62:	57                   	push   edi
c001eb63:	56                   	push   esi
c001eb64:	53                   	push   ebx
c001eb65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb71:	83 e8 06             	sub    eax,0x6
c001eb74:	0f b7 c0             	movzx  eax,ax
c001eb77:	50                   	push   eax
c001eb78:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb7d:	50                   	push   eax
c001eb7e:	e8 21 fd ff ff       	call   c001e8a4 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb83:	5a                   	pop    edx
c001eb84:	5e                   	pop    esi
c001eb85:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eb88:	8d 56 fa             	lea    edx,[esi-0x6]
c001eb8b:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb91:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eb94:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eb97:	83 c2 02             	add    edx,0x2
c001eb9a:	66 89 10             	mov    WORD PTR [eax],dx
c001eb9d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eba0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eba4:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eba7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ebab:	89 d6                	mov    esi,edx
c001ebad:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebb3:	66 81 e6 ff fd       	and    si,0xfdff
c001ebb8:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebbc:	74 07                	je     c001ebc5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebbe:	89 d6                	mov    esi,edx
c001ebc0:	66 81 ce 00 02       	or     si,0x200
c001ebc5:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebce:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebd2:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebda:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebdd:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ebe5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ebe8:	5b                   	pop    ebx
c001ebe9:	5e                   	pop    esi
c001ebea:	5f                   	pop    edi
c001ebeb:	c3                   	ret    

c001ebec <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ebec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebf1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebf6:	c1 e0 04             	shl    eax,0x4
c001ebf9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ebfc:	c3                   	ret    

c001ebfd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ebfd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec02:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec07:	c1 e0 04             	shl    eax,0x4
c001ec0a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec0e:	c3                   	ret    

c001ec0f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec19:	c1 e0 04             	shl    eax,0x4
c001ec1c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec1f:	c3                   	ret    

c001ec20 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec2a:	c1 e0 04             	shl    eax,0x4
c001ec2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec31:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec34:	c3                   	ret    

c001ec35 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec3f:	c1 e0 04             	shl    eax,0x4
c001ec42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec46:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec4a:	c3                   	ret    

c001ec4b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec4b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec50:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec55:	c1 e0 04             	shl    eax,0x4
c001ec58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec5c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec5f:	c3                   	ret    

c001ec60 <Vm::faultHandler(regs*)>:
c001ec60:	55                   	push   ebp
c001ec61:	57                   	push   edi
c001ec62:	56                   	push   esi
c001ec63:	53                   	push   ebx
c001ec64:	83 ec 1c             	sub    esp,0x1c
c001ec67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec6b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ec6e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ec72:	0f b7 f8             	movzx  edi,ax
c001ec75:	52                   	push   edx
c001ec76:	0f b7 c0             	movzx  eax,ax
c001ec79:	50                   	push   eax
c001ec7a:	e8 25 fc ff ff       	call   c001e8a4 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec7f:	5a                   	pop    edx
c001ec80:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ec83:	59                   	pop    ecx
c001ec84:	89 c1                	mov    ecx,eax
c001ec86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ec8d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec96:	0f b7 c5             	movzx  eax,bp
c001ec99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec9d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001eca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eca5:	e8 fa fb ff ff       	call   c001e8a4 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecaa:	5e                   	pop    esi
c001ecab:	be 06 00 00 00       	mov    esi,0x6
c001ecb0:	5a                   	pop    edx
c001ecb1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ecb6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ecbb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ecbe:	80 fa 9d             	cmp    dl,0x9d
c001ecc1:	0f 84 2c 02 00 00    	je     c001eef3 <Vm::faultHandler(regs*)+0x293>
c001ecc7:	0f 87 91 00 00 00    	ja     c001ed5e <Vm::faultHandler(regs*)+0xfe>
c001eccd:	80 fa 66             	cmp    dl,0x66
c001ecd0:	0f 84 98 01 00 00    	je     c001ee6e <Vm::faultHandler(regs*)+0x20e>
c001ecd6:	77 47                	ja     c001ed1f <Vm::faultHandler(regs*)+0xbf>
c001ecd8:	80 fa 36             	cmp    dl,0x36
c001ecdb:	0f 84 80 01 00 00    	je     c001ee61 <Vm::faultHandler(regs*)+0x201>
c001ece1:	77 1a                	ja     c001ecfd <Vm::faultHandler(regs*)+0x9d>
c001ece3:	80 fa 26             	cmp    dl,0x26
c001ece6:	0f 84 4e 01 00 00    	je     c001ee3a <Vm::faultHandler(regs*)+0x1da>
c001ecec:	80 fa 2e             	cmp    dl,0x2e
c001ecef:	0f 85 e2 05 00 00    	jne    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ecf5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecf8:	31 f6                	xor    esi,esi
c001ecfa:	41                   	inc    ecx
c001ecfb:	eb be                	jmp    c001ecbb <Vm::faultHandler(regs*)+0x5b>
c001ecfd:	80 fa 64             	cmp    dl,0x64
c001ed00:	0f 84 41 01 00 00    	je     c001ee47 <Vm::faultHandler(regs*)+0x1e7>
c001ed06:	0f 87 48 01 00 00    	ja     c001ee54 <Vm::faultHandler(regs*)+0x1f4>
c001ed0c:	80 fa 3e             	cmp    dl,0x3e
c001ed0f:	0f 85 c2 05 00 00    	jne    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ed15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed18:	be 01 00 00 00       	mov    esi,0x1
c001ed1d:	eb db                	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ed1f:	80 fa 6d             	cmp    dl,0x6d
c001ed22:	0f 84 ec 02 00 00    	je     c001f014 <Vm::faultHandler(regs*)+0x3b4>
c001ed28:	77 17                	ja     c001ed41 <Vm::faultHandler(regs*)+0xe1>
c001ed2a:	80 fa 67             	cmp    dl,0x67
c001ed2d:	0f 84 48 01 00 00    	je     c001ee7b <Vm::faultHandler(regs*)+0x21b>
c001ed33:	80 fa 6c             	cmp    dl,0x6c
c001ed36:	0f 84 69 02 00 00    	je     c001efa5 <Vm::faultHandler(regs*)+0x345>
c001ed3c:	e9 96 05 00 00       	jmp    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ed41:	80 fa 6f             	cmp    dl,0x6f
c001ed44:	0f 84 f4 03 00 00    	je     c001f13e <Vm::faultHandler(regs*)+0x4de>
c001ed4a:	0f 82 59 03 00 00    	jb     c001f0a9 <Vm::faultHandler(regs*)+0x449>
c001ed50:	80 fa 9c             	cmp    dl,0x9c
c001ed53:	0f 84 2f 01 00 00    	je     c001ee88 <Vm::faultHandler(regs*)+0x228>
c001ed59:	e9 79 05 00 00       	jmp    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ed5e:	80 fa ec             	cmp    dl,0xec
c001ed61:	0f 84 14 05 00 00    	je     c001f27b <Vm::faultHandler(regs*)+0x61b>
c001ed67:	77 7b                	ja     c001ede4 <Vm::faultHandler(regs*)+0x184>
c001ed69:	80 fa e4             	cmp    dl,0xe4
c001ed6c:	0f 84 93 04 00 00    	je     c001f205 <Vm::faultHandler(regs*)+0x5a5>
c001ed72:	77 53                	ja     c001edc7 <Vm::faultHandler(regs*)+0x167>
c001ed74:	80 fa cd             	cmp    dl,0xcd
c001ed77:	0f 84 d9 01 00 00    	je     c001ef56 <Vm::faultHandler(regs*)+0x2f6>
c001ed7d:	80 fa cf             	cmp    dl,0xcf
c001ed80:	0f 85 51 05 00 00    	jne    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ed86:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ed89:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ed8c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ed90:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ed93:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ed97:	81 ca 00 02 02 00    	or     edx,0x20200
c001ed9d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eda0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eda4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edaa:	66 c1 e8 09          	shr    ax,0x9
c001edae:	83 e0 01             	and    eax,0x1
c001edb1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001edb4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001edb7:	83 c0 06             	add    eax,0x6
c001edba:	25 ff ff 00 00       	and    eax,0xffff
c001edbf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001edc2:	e9 0c 05 00 00       	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x673>
c001edc7:	80 fa e6             	cmp    dl,0xe6
c001edca:	0f 84 7f 04 00 00    	je     c001f24f <Vm::faultHandler(regs*)+0x5ef>
c001edd0:	0f 82 4b 04 00 00    	jb     c001f221 <Vm::faultHandler(regs*)+0x5c1>
c001edd6:	80 fa e7             	cmp    dl,0xe7
c001edd9:	0f 84 87 04 00 00    	je     c001f266 <Vm::faultHandler(regs*)+0x606>
c001eddf:	e9 f3 04 00 00       	jmp    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ede4:	80 fa ef             	cmp    dl,0xef
c001ede7:	0f 84 d1 04 00 00    	je     c001f2be <Vm::faultHandler(regs*)+0x65e>
c001eded:	77 28                	ja     c001ee17 <Vm::faultHandler(regs*)+0x1b7>
c001edef:	80 fa ed             	cmp    dl,0xed
c001edf2:	0f 84 9f 04 00 00    	je     c001f297 <Vm::faultHandler(regs*)+0x637>
c001edf8:	80 fa ee             	cmp    dl,0xee
c001edfb:	0f 85 d6 04 00 00    	jne    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ee01:	50                   	push   eax
c001ee02:	50                   	push   eax
c001ee03:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee07:	50                   	push   eax
c001ee08:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee0c:	50                   	push   eax
c001ee0d:	e8 5c fa ff ff       	call   c001e86e <Vm::outbv(unsigned short, unsigned char)>
c001ee12:	e9 9f 04 00 00       	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x656>
c001ee17:	80 fa fa             	cmp    dl,0xfa
c001ee1a:	0f 84 69 01 00 00    	je     c001ef89 <Vm::faultHandler(regs*)+0x329>
c001ee20:	80 fa fb             	cmp    dl,0xfb
c001ee23:	0f 84 6e 01 00 00    	je     c001ef97 <Vm::faultHandler(regs*)+0x337>
c001ee29:	80 fa f3             	cmp    dl,0xf3
c001ee2c:	0f 85 a5 04 00 00    	jne    c001f2d7 <Vm::faultHandler(regs*)+0x677>
c001ee32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee35:	e9 c0 fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee3d:	be 02 00 00 00       	mov    esi,0x2
c001ee42:	e9 b3 fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee47:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee4a:	be 03 00 00 00       	mov    esi,0x3
c001ee4f:	e9 a6 fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee54:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee57:	be 04 00 00 00       	mov    esi,0x4
c001ee5c:	e9 99 fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee61:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee64:	be 05 00 00 00       	mov    esi,0x5
c001ee69:	e9 8c fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee6e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee71:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ee76:	e9 7f fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee7b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee7e:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ee83:	e9 72 fe ff ff       	jmp    c001ecfa <Vm::faultHandler(regs*)+0x9a>
c001ee88:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ee8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee8f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee94:	74 30                	je     c001eec6 <Vm::faultHandler(regs*)+0x266>
c001ee96:	83 e9 04             	sub    ecx,0x4
c001ee99:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ee9f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eea5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eea8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eeab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eeb1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eeb5:	0f 84 15 04 00 00    	je     c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001eebb:	80 ce 02             	or     dh,0x2
c001eebe:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eec1:	e9 0a 04 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001eec6:	83 e9 02             	sub    ecx,0x2
c001eec9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eecf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eed2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eed6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eedc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eee0:	74 05                	je     c001eee7 <Vm::faultHandler(regs*)+0x287>
c001eee2:	80 ce 02             	or     dh,0x2
c001eee5:	eb 03                	jmp    c001eeea <Vm::faultHandler(regs*)+0x28a>
c001eee7:	80 e6 fd             	and    dh,0xfd
c001eeea:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eeee:	e9 dd 03 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001eef3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eef8:	74 2a                	je     c001ef24 <Vm::faultHandler(regs*)+0x2c4>
c001eefa:	8b 10                	mov    edx,DWORD PTR [eax]
c001eefc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ef02:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef08:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef13:	c1 e8 09             	shr    eax,0x9
c001ef16:	83 e0 01             	and    eax,0x1
c001ef19:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef1c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef1f:	83 c0 04             	add    eax,0x4
c001ef22:	eb 25                	jmp    c001ef49 <Vm::faultHandler(regs*)+0x2e9>
c001ef24:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ef27:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef2d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef30:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ef33:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef39:	66 c1 e8 09          	shr    ax,0x9
c001ef3d:	83 e0 01             	and    eax,0x1
c001ef40:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef43:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef46:	83 c0 02             	add    eax,0x2
c001ef49:	25 ff ff 00 00       	and    eax,0xffff
c001ef4e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef51:	e9 7a 03 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001ef56:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef5a:	3c ee                	cmp    al,0xee
c001ef5c:	75 10                	jne    c001ef6e <Vm::faultHandler(regs*)+0x30e>
c001ef5e:	83 ec 0c             	sub    esp,0xc
c001ef61:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ef64:	e8 a2 f9 ff ff       	call   c001e90b <Vm::mainloop3(unsigned long)>
c001ef69:	e9 4b 03 00 00       	jmp    c001f2b9 <Vm::faultHandler(regs*)+0x659>
c001ef6e:	83 ec 0c             	sub    esp,0xc
c001ef71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ef75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef79:	51                   	push   ecx
c001ef7a:	50                   	push   eax
c001ef7b:	53                   	push   ebx
c001ef7c:	e8 e1 fb ff ff       	call   c001eb62 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ef81:	83 c4 20             	add    esp,0x20
c001ef84:	e9 4a 03 00 00       	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x673>
c001ef89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef8e:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef92:	e9 39 03 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001ef97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef9c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001efa0:	e9 2b 03 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001efa5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001efa8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001efad:	74 2b                	je     c001efda <Vm::faultHandler(regs*)+0x37a>
c001efaf:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001efb6:	76 22                	jbe    c001efda <Vm::faultHandler(regs*)+0x37a>
c001efb8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001efbc:	50                   	push   eax
c001efbd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001efc1:	50                   	push   eax
c001efc2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001efc6:	50                   	push   eax
c001efc7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001efcb:	50                   	push   eax
c001efcc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efd0:	50                   	push   eax
c001efd1:	6a 6c                	push   0x6c
c001efd3:	6a 6c                	push   0x6c
c001efd5:	e9 b9 01 00 00       	jmp    c001f193 <Vm::faultHandler(regs*)+0x533>
c001efda:	83 ec 0c             	sub    esp,0xc
c001efdd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efe1:	0f b7 f6             	movzx  esi,si
c001efe4:	50                   	push   eax
c001efe5:	e8 71 f8 ff ff       	call   c001e85b <Vm::inbv(unsigned short)>
c001efea:	83 c4 0c             	add    esp,0xc
c001efed:	0f b6 c0             	movzx  eax,al
c001eff0:	50                   	push   eax
c001eff1:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eff5:	50                   	push   eax
c001eff6:	56                   	push   esi
c001eff7:	e8 24 fc ff ff       	call   c001ec20 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001effc:	83 c4 10             	add    esp,0x10
c001efff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f002:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f006:	74 03                	je     c001f00b <Vm::faultHandler(regs*)+0x3ab>
c001f008:	48                   	dec    eax
c001f009:	eb 01                	jmp    c001f00c <Vm::faultHandler(regs*)+0x3ac>
c001f00b:	40                   	inc    eax
c001f00c:	0f b7 c0             	movzx  eax,ax
c001f00f:	e9 8d 00 00 00       	jmp    c001f0a1 <Vm::faultHandler(regs*)+0x441>
c001f014:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f017:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f01a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f01f:	74 29                	je     c001f04a <Vm::faultHandler(regs*)+0x3ea>
c001f021:	3d ff ff 00 00       	cmp    eax,0xffff
c001f026:	76 22                	jbe    c001f04a <Vm::faultHandler(regs*)+0x3ea>
c001f028:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f02c:	50                   	push   eax
c001f02d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f031:	50                   	push   eax
c001f032:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f036:	50                   	push   eax
c001f037:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f03b:	50                   	push   eax
c001f03c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f040:	50                   	push   eax
c001f041:	6a 6d                	push   0x6d
c001f043:	6a 6d                	push   0x6d
c001f045:	e9 49 01 00 00       	jmp    c001f193 <Vm::faultHandler(regs*)+0x533>
c001f04a:	0f b7 c8             	movzx  ecx,ax
c001f04d:	0f b7 f6             	movzx  esi,si
c001f050:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f053:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f058:	74 20                	je     c001f07a <Vm::faultHandler(regs*)+0x41a>
c001f05a:	ed                   	in     eax,dx
c001f05b:	55                   	push   ebp
c001f05c:	50                   	push   eax
c001f05d:	51                   	push   ecx
c001f05e:	56                   	push   esi
c001f05f:	e8 e7 fb ff ff       	call   c001ec4b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f064:	83 c4 10             	add    esp,0x10
c001f067:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f06a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f06e:	74 05                	je     c001f075 <Vm::faultHandler(regs*)+0x415>
c001f070:	83 e8 04             	sub    eax,0x4
c001f073:	eb 27                	jmp    c001f09c <Vm::faultHandler(regs*)+0x43c>
c001f075:	83 c0 04             	add    eax,0x4
c001f078:	eb 22                	jmp    c001f09c <Vm::faultHandler(regs*)+0x43c>
c001f07a:	66 ed                	in     ax,dx
c001f07c:	0f b7 c0             	movzx  eax,ax
c001f07f:	57                   	push   edi
c001f080:	50                   	push   eax
c001f081:	51                   	push   ecx
c001f082:	56                   	push   esi
c001f083:	e8 ad fb ff ff       	call   c001ec35 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f088:	83 c4 10             	add    esp,0x10
c001f08b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f08e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f092:	74 05                	je     c001f099 <Vm::faultHandler(regs*)+0x439>
c001f094:	83 e8 02             	sub    eax,0x2
c001f097:	eb 03                	jmp    c001f09c <Vm::faultHandler(regs*)+0x43c>
c001f099:	83 c0 02             	add    eax,0x2
c001f09c:	25 ff ff 00 00       	and    eax,0xffff
c001f0a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f0a4:	e9 27 02 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001f0a9:	8d 46 ff             	lea    eax,[esi-0x1]
c001f0ac:	3c 05                	cmp    al,0x5
c001f0ae:	77 24                	ja     c001f0d4 <Vm::faultHandler(regs*)+0x474>
c001f0b0:	0f b6 c0             	movzx  eax,al
c001f0b3:	ff 24 85 6c c8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3794]
c001f0ba:	0f b7 fd             	movzx  edi,bp
c001f0bd:	eb 15                	jmp    c001f0d4 <Vm::faultHandler(regs*)+0x474>
c001f0bf:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f0c3:	eb 0f                	jmp    c001f0d4 <Vm::faultHandler(regs*)+0x474>
c001f0c5:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f0c9:	eb 09                	jmp    c001f0d4 <Vm::faultHandler(regs*)+0x474>
c001f0cb:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f0cf:	eb 03                	jmp    c001f0d4 <Vm::faultHandler(regs*)+0x474>
c001f0d1:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f0d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f0d7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f0dc:	74 29                	je     c001f107 <Vm::faultHandler(regs*)+0x4a7>
c001f0de:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0e3:	76 22                	jbe    c001f107 <Vm::faultHandler(regs*)+0x4a7>
c001f0e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0e9:	50                   	push   eax
c001f0ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0ee:	50                   	push   eax
c001f0ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f0f3:	50                   	push   eax
c001f0f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0f8:	50                   	push   eax
c001f0f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0fd:	50                   	push   eax
c001f0fe:	6a 6e                	push   0x6e
c001f100:	6a 6e                	push   0x6e
c001f102:	e9 8c 00 00 00       	jmp    c001f193 <Vm::faultHandler(regs*)+0x533>
c001f107:	0f b7 c0             	movzx  eax,ax
c001f10a:	52                   	push   edx
c001f10b:	52                   	push   edx
c001f10c:	50                   	push   eax
c001f10d:	57                   	push   edi
c001f10e:	e8 d9 fa ff ff       	call   c001ebec <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f113:	59                   	pop    ecx
c001f114:	0f b6 c0             	movzx  eax,al
c001f117:	5e                   	pop    esi
c001f118:	50                   	push   eax
c001f119:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f11d:	50                   	push   eax
c001f11e:	e8 4b f7 ff ff       	call   c001e86e <Vm::outbv(unsigned short, unsigned char)>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f129:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f12d:	74 03                	je     c001f132 <Vm::faultHandler(regs*)+0x4d2>
c001f12f:	48                   	dec    eax
c001f130:	eb 01                	jmp    c001f133 <Vm::faultHandler(regs*)+0x4d3>
c001f132:	40                   	inc    eax
c001f133:	0f b7 c0             	movzx  eax,ax
c001f136:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f139:	e9 92 01 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001f13e:	8d 46 ff             	lea    eax,[esi-0x1]
c001f141:	3c 05                	cmp    al,0x5
c001f143:	77 1f                	ja     c001f164 <Vm::faultHandler(regs*)+0x504>
c001f145:	0f b6 c0             	movzx  eax,al
c001f148:	ff 24 85 84 c8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd377c]
c001f14f:	89 ef                	mov    edi,ebp
c001f151:	eb 11                	jmp    c001f164 <Vm::faultHandler(regs*)+0x504>
c001f153:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f156:	eb 0c                	jmp    c001f164 <Vm::faultHandler(regs*)+0x504>
c001f158:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f15b:	eb 07                	jmp    c001f164 <Vm::faultHandler(regs*)+0x504>
c001f15d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f160:	eb 02                	jmp    c001f164 <Vm::faultHandler(regs*)+0x504>
c001f162:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f164:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f167:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f16c:	74 37                	je     c001f1a5 <Vm::faultHandler(regs*)+0x545>
c001f16e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f174:	76 2f                	jbe    c001f1a5 <Vm::faultHandler(regs*)+0x545>
c001f176:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f17a:	50                   	push   eax
c001f17b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f17f:	50                   	push   eax
c001f180:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f184:	50                   	push   eax
c001f185:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f189:	50                   	push   eax
c001f18a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f18e:	50                   	push   eax
c001f18f:	6a 6f                	push   0x6f
c001f191:	6a 6f                	push   0x6f
c001f193:	68 12 c8 02 c0       	push   0xc002c812
c001f198:	e8 df 36 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001f19d:	83 c4 20             	add    esp,0x20
c001f1a0:	e9 86 01 00 00       	jmp    c001f32b <Vm::faultHandler(regs*)+0x6cb>
c001f1a5:	0f b7 d7             	movzx  edx,di
c001f1a8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f1ab:	0f b7 c6             	movzx  eax,si
c001f1ae:	81 e1 00 04 00 00    	and    ecx,0x400
c001f1b4:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f1b7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1bc:	74 1d                	je     c001f1db <Vm::faultHandler(regs*)+0x57b>
c001f1be:	55                   	push   ebp
c001f1bf:	55                   	push   ebp
c001f1c0:	50                   	push   eax
c001f1c1:	52                   	push   edx
c001f1c2:	e8 48 fa ff ff       	call   c001ec0f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f1c7:	83 c4 10             	add    esp,0x10
c001f1ca:	89 fa                	mov    edx,edi
c001f1cc:	ef                   	out    dx,eax
c001f1cd:	85 c9                	test   ecx,ecx
c001f1cf:	74 05                	je     c001f1d6 <Vm::faultHandler(regs*)+0x576>
c001f1d1:	83 ee 04             	sub    esi,0x4
c001f1d4:	eb 21                	jmp    c001f1f7 <Vm::faultHandler(regs*)+0x597>
c001f1d6:	83 c6 04             	add    esi,0x4
c001f1d9:	eb 1c                	jmp    c001f1f7 <Vm::faultHandler(regs*)+0x597>
c001f1db:	55                   	push   ebp
c001f1dc:	55                   	push   ebp
c001f1dd:	50                   	push   eax
c001f1de:	52                   	push   edx
c001f1df:	e8 19 fa ff ff       	call   c001ebfd <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f1e4:	83 c4 10             	add    esp,0x10
c001f1e7:	89 fa                	mov    edx,edi
c001f1e9:	66 ef                	out    dx,ax
c001f1eb:	85 c9                	test   ecx,ecx
c001f1ed:	74 05                	je     c001f1f4 <Vm::faultHandler(regs*)+0x594>
c001f1ef:	83 ee 02             	sub    esi,0x2
c001f1f2:	eb 03                	jmp    c001f1f7 <Vm::faultHandler(regs*)+0x597>
c001f1f4:	83 c6 02             	add    esi,0x2
c001f1f7:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f1fd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f200:	e9 cb 00 00 00       	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001f205:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f213:	50                   	push   eax
c001f214:	e8 42 f6 ff ff       	call   c001e85b <Vm::inbv(unsigned short)>
c001f219:	0f b6 c0             	movzx  eax,al
c001f21c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f21f:	eb 3f                	jmp    c001f260 <Vm::faultHandler(regs*)+0x600>
c001f221:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f226:	74 07                	je     c001f22f <Vm::faultHandler(regs*)+0x5cf>
c001f228:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f22c:	ed                   	in     eax,dx
c001f22d:	eb 14                	jmp    c001f243 <Vm::faultHandler(regs*)+0x5e3>
c001f22f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f232:	66 31 f6             	xor    si,si
c001f235:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f238:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f23c:	66 ed                	in     ax,dx
c001f23e:	0f b7 c0             	movzx  eax,ax
c001f241:	09 f0                	or     eax,esi
c001f243:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f246:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f24a:	e9 84 00 00 00       	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x673>
c001f24f:	52                   	push   edx
c001f250:	52                   	push   edx
c001f251:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f255:	50                   	push   eax
c001f256:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f25a:	50                   	push   eax
c001f25b:	e8 0e f6 ff ff       	call   c001e86e <Vm::outbv(unsigned short, unsigned char)>
c001f260:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f264:	eb 53                	jmp    c001f2b9 <Vm::faultHandler(regs*)+0x659>
c001f266:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f269:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f26d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f272:	74 03                	je     c001f277 <Vm::faultHandler(regs*)+0x617>
c001f274:	ef                   	out    dx,eax
c001f275:	eb cf                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e6>
c001f277:	66 ef                	out    dx,ax
c001f279:	eb cb                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e6>
c001f27b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f282:	83 ec 0c             	sub    esp,0xc
c001f285:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f289:	50                   	push   eax
c001f28a:	e8 cc f5 ff ff       	call   c001e85b <Vm::inbv(unsigned short)>
c001f28f:	0f b6 c0             	movzx  eax,al
c001f292:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f295:	eb 1f                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x656>
c001f297:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f29a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f29f:	74 03                	je     c001f2a4 <Vm::faultHandler(regs*)+0x644>
c001f2a1:	ed                   	in     eax,dx
c001f2a2:	eb 0d                	jmp    c001f2b1 <Vm::faultHandler(regs*)+0x651>
c001f2a4:	66 ed                	in     ax,dx
c001f2a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f2a9:	0f b7 c0             	movzx  eax,ax
c001f2ac:	66 31 d2             	xor    dx,dx
c001f2af:	09 d0                	or     eax,edx
c001f2b1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f2b4:	eb 1a                	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001f2b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2b9:	83 c4 10             	add    esp,0x10
c001f2bc:	eb 15                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x673>
c001f2be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f2c1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f2c4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2c9:	74 03                	je     c001f2ce <Vm::faultHandler(regs*)+0x66e>
c001f2cb:	ef                   	out    dx,eax
c001f2cc:	eb 02                	jmp    c001f2d0 <Vm::faultHandler(regs*)+0x670>
c001f2ce:	66 ef                	out    dx,ax
c001f2d0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2d3:	b0 01                	mov    al,0x1
c001f2d5:	eb 56                	jmp    c001f32d <Vm::faultHandler(regs*)+0x6cd>
c001f2d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2db:	50                   	push   eax
c001f2dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2e0:	50                   	push   eax
c001f2e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2e5:	50                   	push   eax
c001f2e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2ea:	50                   	push   eax
c001f2eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2ef:	50                   	push   eax
c001f2f0:	52                   	push   edx
c001f2f1:	52                   	push   edx
c001f2f2:	68 3f c8 02 c0       	push   0xc002c83f
c001f2f7:	e8 80 35 ff ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c001f2fc:	83 c4 20             	add    esp,0x20
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	6a 60                	push   0x60
c001f304:	e8 52 f5 ff ff       	call   c001e85b <Vm::inbv(unsigned short)>
c001f309:	83 c4 10             	add    esp,0x10
c001f30c:	3c 1c                	cmp    al,0x1c
c001f30e:	74 04                	je     c001f314 <Vm::faultHandler(regs*)+0x6b4>
c001f310:	3c 5a                	cmp    al,0x5a
c001f312:	75 eb                	jne    c001f2ff <Vm::faultHandler(regs*)+0x69f>
c001f314:	3c 5a                	cmp    al,0x5a
c001f316:	74 04                	je     c001f31c <Vm::faultHandler(regs*)+0x6bc>
c001f318:	3c 1c                	cmp    al,0x1c
c001f31a:	75 0f                	jne    c001f32b <Vm::faultHandler(regs*)+0x6cb>
c001f31c:	83 ec 0c             	sub    esp,0xc
c001f31f:	6a 60                	push   0x60
c001f321:	e8 35 f5 ff ff       	call   c001e85b <Vm::inbv(unsigned short)>
c001f326:	83 c4 10             	add    esp,0x10
c001f329:	eb e9                	jmp    c001f314 <Vm::faultHandler(regs*)+0x6b4>
c001f32b:	31 c0                	xor    eax,eax
c001f32d:	83 c4 1c             	add    esp,0x1c
c001f330:	5b                   	pop    ebx
c001f331:	5e                   	pop    esi
c001f332:	5f                   	pop    edi
c001f333:	5d                   	pop    ebp
c001f334:	c3                   	ret    

c001f335 <Vm::fpuInternalTo32(unsigned long long)>:
c001f335:	57                   	push   edi
c001f336:	56                   	push   esi
c001f337:	53                   	push   ebx
c001f338:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f340:	89 d6                	mov    esi,edx
c001f342:	89 d7                	mov    edi,edx
c001f344:	89 c1                	mov    ecx,eax
c001f346:	c1 ef 14             	shr    edi,0x14
c001f349:	89 d3                	mov    ebx,edx
c001f34b:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f351:	31 d2                	xor    edx,edx
c001f353:	89 f8                	mov    eax,edi
c001f355:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f35b:	bf ff 00 00 00       	mov    edi,0xff
c001f360:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f365:	83 d2 ff             	adc    edx,0xffffffff
c001f368:	39 c7                	cmp    edi,eax
c001f36a:	bf 00 00 00 00       	mov    edi,0x0
c001f36f:	19 d7                	sbb    edi,edx
c001f371:	72 15                	jb     c001f388 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f373:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f377:	c1 e0 17             	shl    eax,0x17
c001f37a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f380:	09 f1                	or     ecx,esi
c001f382:	09 c1                	or     ecx,eax
c001f384:	89 cf                	mov    edi,ecx
c001f386:	eb 02                	jmp    c001f38a <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f388:	31 ff                	xor    edi,edi
c001f38a:	89 f8                	mov    eax,edi
c001f38c:	5b                   	pop    ebx
c001f38d:	5e                   	pop    esi
c001f38e:	5f                   	pop    edi
c001f38f:	c3                   	ret    

c001f390 <Vm::fpuInternalTo64(unsigned long long)>:
c001f390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f398:	c3                   	ret    

c001f399 <Vm::fpu32ToInternal(unsigned int)>:
c001f399:	57                   	push   edi
c001f39a:	31 ff                	xor    edi,edi
c001f39c:	56                   	push   esi
c001f39d:	53                   	push   ebx
c001f39e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3a2:	89 cb                	mov    ebx,ecx
c001f3a4:	89 ce                	mov    esi,ecx
c001f3a6:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f3ac:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f3b2:	c1 e9 17             	shr    ecx,0x17
c001f3b5:	89 f0                	mov    eax,esi
c001f3b7:	0f b6 d1             	movzx  edx,cl
c001f3ba:	81 c2 80 03 00 00    	add    edx,0x380
c001f3c0:	89 d1                	mov    ecx,edx
c001f3c2:	89 fa                	mov    edx,edi
c001f3c4:	c1 e1 14             	shl    ecx,0x14
c001f3c7:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f3cb:	c1 e0 1d             	shl    eax,0x1d
c001f3ce:	89 d7                	mov    edi,edx
c001f3d0:	89 c6                	mov    esi,eax
c001f3d2:	89 ca                	mov    edx,ecx
c001f3d4:	89 f0                	mov    eax,esi
c001f3d6:	09 fa                	or     edx,edi
c001f3d8:	09 da                	or     edx,ebx
c001f3da:	5b                   	pop    ebx
c001f3db:	5e                   	pop    esi
c001f3dc:	5f                   	pop    edi
c001f3dd:	c3                   	ret    

c001f3de <Vm::fpu64ToInternal(unsigned long long)>:
c001f3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3e6:	c3                   	ret    

c001f3e7 <Vm::fpuFloatToLong(unsigned long long)>:
c001f3e7:	57                   	push   edi
c001f3e8:	31 c0                	xor    eax,eax
c001f3ea:	56                   	push   esi
c001f3eb:	31 d2                	xor    edx,edx
c001f3ed:	53                   	push   ebx
c001f3ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3f6:	89 d9                	mov    ecx,ebx
c001f3f8:	c1 e9 14             	shr    ecx,0x14
c001f3fb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f401:	89 cf                	mov    edi,ecx
c001f403:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f409:	78 33                	js     c001f43e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f40b:	89 d9                	mov    ecx,ebx
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f415:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f41b:	89 ca                	mov    edx,ecx
c001f41d:	b9 34 00 00 00       	mov    ecx,0x34
c001f422:	29 f9                	sub    ecx,edi
c001f424:	0f ad d0             	shrd   eax,edx,cl
c001f427:	d3 fa                	sar    edx,cl
c001f429:	f6 c1 20             	test   cl,0x20
c001f42c:	74 05                	je     c001f433 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f42e:	89 d0                	mov    eax,edx
c001f430:	c1 fa 1f             	sar    edx,0x1f
c001f433:	85 db                	test   ebx,ebx
c001f435:	79 07                	jns    c001f43e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f437:	f7 d8                	neg    eax
c001f439:	83 d2 00             	adc    edx,0x0
c001f43c:	f7 da                	neg    edx
c001f43e:	5b                   	pop    ebx
c001f43f:	5e                   	pop    esi
c001f440:	5f                   	pop    edi
c001f441:	c3                   	ret    

c001f442 <Vm::fpuULongToFloat(unsigned long long)>:
c001f442:	57                   	push   edi
c001f443:	31 c9                	xor    ecx,ecx
c001f445:	56                   	push   esi
c001f446:	53                   	push   ebx
c001f447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f44b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f44f:	0f ba e7 14          	bt     edi,0x14
c001f453:	72 07                	jb     c001f45c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f455:	01 f6                	add    esi,esi
c001f457:	11 ff                	adc    edi,edi
c001f459:	41                   	inc    ecx
c001f45a:	eb f3                	jmp    c001f44f <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f45c:	89 fa                	mov    edx,edi
c001f45e:	89 f0                	mov    eax,esi
c001f460:	bb 33 04 00 00       	mov    ebx,0x433
c001f465:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f46b:	29 cb                	sub    ebx,ecx
c001f46d:	89 d9                	mov    ecx,ebx
c001f46f:	5b                   	pop    ebx
c001f470:	c1 e1 14             	shl    ecx,0x14
c001f473:	5e                   	pop    esi
c001f474:	09 ca                	or     edx,ecx
c001f476:	5f                   	pop    edi
c001f477:	c3                   	ret    

c001f478 <Vm::fpuLongToFloat(long long)>:
c001f478:	56                   	push   esi
c001f479:	31 c0                	xor    eax,eax
c001f47b:	53                   	push   ebx
c001f47c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f480:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f484:	39 c8                	cmp    eax,ecx
c001f486:	19 d8                	sbb    eax,ebx
c001f488:	7d 04                	jge    c001f48e <Vm::fpuLongToFloat(long long)+0x16>
c001f48a:	31 f6                	xor    esi,esi
c001f48c:	eb 0c                	jmp    c001f49a <Vm::fpuLongToFloat(long long)+0x22>
c001f48e:	f7 d9                	neg    ecx
c001f490:	be 01 00 00 00       	mov    esi,0x1
c001f495:	83 d3 00             	adc    ebx,0x0
c001f498:	f7 db                	neg    ebx
c001f49a:	31 c0                	xor    eax,eax
c001f49c:	0f ba e3 14          	bt     ebx,0x14
c001f4a0:	72 07                	jb     c001f4a9 <Vm::fpuLongToFloat(long long)+0x31>
c001f4a2:	01 c9                	add    ecx,ecx
c001f4a4:	11 db                	adc    ebx,ebx
c001f4a6:	40                   	inc    eax
c001f4a7:	eb f3                	jmp    c001f49c <Vm::fpuLongToFloat(long long)+0x24>
c001f4a9:	ba 33 04 00 00       	mov    edx,0x433
c001f4ae:	29 c2                	sub    edx,eax
c001f4b0:	89 c8                	mov    eax,ecx
c001f4b2:	c1 e2 14             	shl    edx,0x14
c001f4b5:	89 d9                	mov    ecx,ebx
c001f4b7:	89 f3                	mov    ebx,esi
c001f4b9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f4bf:	09 ca                	or     edx,ecx
c001f4c1:	84 db                	test   bl,bl
c001f4c3:	74 06                	je     c001f4cb <Vm::fpuLongToFloat(long long)+0x53>
c001f4c5:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f4cb:	5b                   	pop    ebx
c001f4cc:	5e                   	pop    esi
c001f4cd:	c3                   	ret    

c001f4ce <Vm::fpuGet0()>:
c001f4ce:	31 c0                	xor    eax,eax
c001f4d0:	31 d2                	xor    edx,edx
c001f4d2:	c3                   	ret    

c001f4d3 <Vm::fpuGet1()>:
c001f4d3:	b8 01 00 00 00       	mov    eax,0x1
c001f4d8:	31 d2                	xor    edx,edx
c001f4da:	c3                   	ret    

c001f4db <Vm::fpuGetPi()>:
c001f4db:	b8 03 00 00 00       	mov    eax,0x3
c001f4e0:	31 d2                	xor    edx,edx
c001f4e2:	c3                   	ret    

c001f4e3 <Vm::fpuGetLog2E()>:
c001f4e3:	83 ec 18             	sub    esp,0x18
c001f4e6:	68 9c c8 02 c0       	push   0xc002c89c
c001f4eb:	e8 35 ad ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f4f0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4f5:	31 d2                	xor    edx,edx
c001f4f7:	83 c4 1c             	add    esp,0x1c
c001f4fa:	c3                   	ret    

c001f4fb <Vm::fpuGetLogE2()>:
c001f4fb:	83 ec 18             	sub    esp,0x18
c001f4fe:	68 a8 c8 02 c0       	push   0xc002c8a8
c001f503:	e8 1d ad ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f508:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f50d:	31 d2                	xor    edx,edx
c001f50f:	83 c4 1c             	add    esp,0x1c
c001f512:	c3                   	ret    

c001f513 <Vm::fpuGetLog210()>:
c001f513:	83 ec 18             	sub    esp,0x18
c001f516:	68 b4 c8 02 c0       	push   0xc002c8b4
c001f51b:	e8 05 ad ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f520:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f525:	31 d2                	xor    edx,edx
c001f527:	83 c4 1c             	add    esp,0x1c
c001f52a:	c3                   	ret    

c001f52b <Vm::fpuGetLog102()>:
c001f52b:	83 ec 18             	sub    esp,0x18
c001f52e:	68 c1 c8 02 c0       	push   0xc002c8c1
c001f533:	e8 ed ac ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f538:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f53d:	31 d2                	xor    edx,edx
c001f53f:	83 c4 1c             	add    esp,0x1c
c001f542:	c3                   	ret    

c001f543 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f547:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f54b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f54f:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f553:	0f 92 c0             	setb   al
c001f556:	c3                   	ret    

c001f557 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f557:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f563:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f567:	09 c2                	or     edx,eax
c001f569:	0f 94 c0             	sete   al
c001f56c:	c3                   	ret    

c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f56d:	57                   	push   edi
c001f56e:	56                   	push   esi
c001f56f:	53                   	push   ebx
c001f570:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f574:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f578:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f57c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f580:	57                   	push   edi
c001f581:	56                   	push   esi
c001f582:	53                   	push   ebx
c001f583:	51                   	push   ecx
c001f584:	e8 ce ff ff ff       	call   c001f557 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f589:	83 c4 10             	add    esp,0x10
c001f58c:	88 c2                	mov    dl,al
c001f58e:	31 c0                	xor    eax,eax
c001f590:	84 d2                	test   dl,dl
c001f592:	75 0c                	jne    c001f5a0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f594:	57                   	push   edi
c001f595:	56                   	push   esi
c001f596:	53                   	push   ebx
c001f597:	51                   	push   ecx
c001f598:	e8 a6 ff ff ff       	call   c001f543 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f59d:	83 c4 10             	add    esp,0x10
c001f5a0:	83 e0 01             	and    eax,0x1
c001f5a3:	5b                   	pop    ebx
c001f5a4:	88 c1                	mov    cl,al
c001f5a6:	83 e2 01             	and    edx,0x1
c001f5a9:	a0 61 fa 02 c0       	mov    al,ds:0xc002fa61
c001f5ae:	c1 e2 06             	shl    edx,0x6
c001f5b1:	83 e0 ba             	and    eax,0xffffffba
c001f5b4:	5e                   	pop    esi
c001f5b5:	09 c8                	or     eax,ecx
c001f5b7:	5f                   	pop    edi
c001f5b8:	09 d0                	or     eax,edx
c001f5ba:	a2 61 fa 02 c0       	mov    ds:0xc002fa61,al
c001f5bf:	c3                   	ret    

c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f5c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5c8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f5cc:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f5d0:	c3                   	ret    

c001f5d1 <Vm::fpuAbs(unsigned long long)>:
c001f5d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5d9:	c3                   	ret    

c001f5da <Vm::fpuChs(unsigned long long)>:
c001f5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5e2:	f7 d8                	neg    eax
c001f5e4:	83 d2 00             	adc    edx,0x0
c001f5e7:	f7 da                	neg    edx
c001f5e9:	c3                   	ret    

c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f5ea:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f5ee:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f5f3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f5f7:	eb c7                	jmp    c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f5f9:	53                   	push   ebx
c001f5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f602:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f606:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f60a:	0f af ca             	imul   ecx,edx
c001f60d:	0f af d8             	imul   ebx,eax
c001f610:	f7 e2                	mul    edx
c001f612:	01 d9                	add    ecx,ebx
c001f614:	5b                   	pop    ebx
c001f615:	01 ca                	add    edx,ecx
c001f617:	c3                   	ret    

c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f618:	83 ec 0c             	sub    esp,0xc
c001f61b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f61f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f62b:	e8 74 76 00 00       	call   c0026ca4 <__udivdi3>
c001f630:	83 c4 1c             	add    esp,0x1c
c001f633:	c3                   	ret    

c001f634 <Vm::fpuSquare(unsigned long long)>:
c001f634:	50                   	push   eax
c001f635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f639:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f63d:	52                   	push   edx
c001f63e:	50                   	push   eax
c001f63f:	52                   	push   edx
c001f640:	50                   	push   eax
c001f641:	e8 b3 ff ff ff       	call   c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f646:	83 c4 14             	add    esp,0x14
c001f649:	c3                   	ret    

c001f64a <Vm::fpuGetReg(int)>:
c001f64a:	83 ec 0c             	sub    esp,0xc
c001f64d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f652:	76 10                	jbe    c001f664 <Vm::fpuGetReg(int)+0x1a>
c001f654:	83 ec 0c             	sub    esp,0xc
c001f657:	68 ce c8 02 c0       	push   0xc002c8ce
c001f65c:	e8 c4 ab ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f661:	83 c4 10             	add    esp,0x10
c001f664:	a0 61 fa 02 c0       	mov    al,ds:0xc002fa61
c001f669:	b9 08 00 00 00       	mov    ecx,0x8
c001f66e:	c0 e8 03             	shr    al,0x3
c001f671:	83 e0 07             	and    eax,0x7
c001f674:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f678:	99                   	cdq    
c001f679:	f7 f9                	idiv   ecx
c001f67b:	8b 04 d5 64 fa 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd059c]
c001f682:	8b 14 d5 68 fa 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0598]
c001f689:	83 c4 0c             	add    esp,0xc
c001f68c:	c3                   	ret    

c001f68d <Vm::fpuSetReg(int, unsigned long long)>:
c001f68d:	57                   	push   edi
c001f68e:	56                   	push   esi
c001f68f:	52                   	push   edx
c001f690:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f694:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f698:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f69d:	76 10                	jbe    c001f6af <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f69f:	83 ec 0c             	sub    esp,0xc
c001f6a2:	68 e1 c8 02 c0       	push   0xc002c8e1
c001f6a7:	e8 79 ab ff ff       	call   c001a225 <Krnl::panic(char const*)>
c001f6ac:	83 c4 10             	add    esp,0x10
c001f6af:	a0 61 fa 02 c0       	mov    al,ds:0xc002fa61
c001f6b4:	b9 08 00 00 00       	mov    ecx,0x8
c001f6b9:	c0 e8 03             	shr    al,0x3
c001f6bc:	83 e0 07             	and    eax,0x7
c001f6bf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f6c3:	99                   	cdq    
c001f6c4:	f7 f9                	idiv   ecx
c001f6c6:	89 34 d5 64 fa 02 c0 	mov    DWORD PTR [edx*8-0x3ffd059c],esi
c001f6cd:	89 3c d5 68 fa 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0598],edi
c001f6d4:	58                   	pop    eax
c001f6d5:	5e                   	pop    esi
c001f6d6:	5f                   	pop    edi
c001f6d7:	c3                   	ret    

c001f6d8 <Vm::fpuPush(unsigned long long)>:
c001f6d8:	a0 61 fa 02 c0       	mov    al,ds:0xc002fa61
c001f6dd:	c0 e8 03             	shr    al,0x3
c001f6e0:	83 e0 07             	and    eax,0x7
c001f6e3:	83 c0 07             	add    eax,0x7
c001f6e6:	88 c2                	mov    dl,al
c001f6e8:	83 e0 07             	and    eax,0x7
c001f6eb:	83 e2 07             	and    edx,0x7
c001f6ee:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f6f5:	8a 15 61 fa 02 c0    	mov    dl,BYTE PTR ds:0xc002fa61
c001f6fb:	83 e2 c7             	and    edx,0xffffffc7
c001f6fe:	09 ca                	or     edx,ecx
c001f700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f704:	88 15 61 fa 02 c0    	mov    BYTE PTR ds:0xc002fa61,dl
c001f70a:	89 0c c5 68 fa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0598],ecx
c001f711:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f715:	89 14 c5 64 fa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd059c],edx
c001f71c:	a1 a4 fa 02 c0       	mov    eax,ds:0xc002faa4
c001f721:	83 f8 08             	cmp    eax,0x8
c001f724:	75 08                	jne    c001f72e <Vm::fpuPush(unsigned long long)+0x56>
c001f726:	80 0d 60 fa 02 c0 40 	or     BYTE PTR ds:0xc002fa60,0x40
c001f72d:	c3                   	ret    
c001f72e:	40                   	inc    eax
c001f72f:	a3 a4 fa 02 c0       	mov    ds:0xc002faa4,eax
c001f734:	c3                   	ret    

c001f735 <Vm::fpuPop()>:
c001f735:	8a 0d 61 fa 02 c0    	mov    cl,BYTE PTR ds:0xc002fa61
c001f73b:	53                   	push   ebx
c001f73c:	c0 e9 03             	shr    cl,0x3
c001f73f:	8a 1d 61 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002fa61
c001f745:	83 e1 07             	and    ecx,0x7
c001f748:	83 e3 c7             	and    ebx,0xffffffc7
c001f74b:	8b 04 cd 64 fa 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd059c]
c001f752:	8b 14 cd 68 fa 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0598]
c001f759:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f760:	83 e1 38             	and    ecx,0x38
c001f763:	09 d9                	or     ecx,ebx
c001f765:	88 0d 61 fa 02 c0    	mov    BYTE PTR ds:0xc002fa61,cl
c001f76b:	8b 0d a4 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002faa4
c001f771:	85 c9                	test   ecx,ecx
c001f773:	74 09                	je     c001f77e <Vm::fpuPop()+0x49>
c001f775:	49                   	dec    ecx
c001f776:	89 0d a4 fa 02 c0    	mov    DWORD PTR ds:0xc002faa4,ecx
c001f77c:	eb 07                	jmp    c001f785 <Vm::fpuPop()+0x50>
c001f77e:	80 0d 60 fa 02 c0 40 	or     BYTE PTR ds:0xc002fa60,0x40
c001f785:	5b                   	pop    ebx
c001f786:	c3                   	ret    

c001f787 <Vm::x87Handler(regs*)>:
c001f787:	55                   	push   ebp
c001f788:	57                   	push   edi
c001f789:	56                   	push   esi
c001f78a:	53                   	push   ebx
c001f78b:	83 ec 1c             	sub    esp,0x1c
c001f78e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f792:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f797:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f79a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f7a2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f7a6:	50                   	push   eax
c001f7a7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f7ab:	50                   	push   eax
c001f7ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7b0:	50                   	push   eax
c001f7b1:	53                   	push   ebx
c001f7b2:	e8 87 a1 ff ff       	call   c001993e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f7b7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f7ba:	83 c4 10             	add    esp,0x10
c001f7bd:	89 c6                	mov    esi,eax
c001f7bf:	80 fa d9             	cmp    dl,0xd9
c001f7c2:	0f 85 52 01 00 00    	jne    c001f91a <Vm::x87Handler(regs*)+0x193>
c001f7c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7cc:	8d 50 20             	lea    edx,[eax+0x20]
c001f7cf:	80 fa 0e             	cmp    dl,0xe
c001f7d2:	0f 87 86 00 00 00    	ja     c001f85e <Vm::x87Handler(regs*)+0xd7>
c001f7d8:	0f b6 d2             	movzx  edx,dl
c001f7db:	ff 24 95 f4 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd370c]
c001f7e2:	e8 e7 fc ff ff       	call   c001f4ce <Vm::fpuGet0()>
c001f7e7:	eb 05                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f7e9:	e8 e5 fc ff ff       	call   c001f4d3 <Vm::fpuGet1()>
c001f7ee:	57                   	push   edi
c001f7ef:	57                   	push   edi
c001f7f0:	52                   	push   edx
c001f7f1:	50                   	push   eax
c001f7f2:	e8 e1 fe ff ff       	call   c001f6d8 <Vm::fpuPush(unsigned long long)>
c001f7f7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7fb:	83 c4 10             	add    esp,0x10
c001f7fe:	b0 01                	mov    al,0x1
c001f800:	e9 e3 09 00 00       	jmp    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001f805:	83 ec 0c             	sub    esp,0xc
c001f808:	6a 00                	push   0x0
c001f80a:	e8 3b fe ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f80f:	59                   	pop    ecx
c001f810:	5e                   	pop    esi
c001f811:	52                   	push   edx
c001f812:	50                   	push   eax
c001f813:	e8 c2 fd ff ff       	call   c001f5da <Vm::fpuChs(unsigned long long)>
c001f818:	eb 13                	jmp    c001f82d <Vm::x87Handler(regs*)+0xa6>
c001f81a:	83 ec 0c             	sub    esp,0xc
c001f81d:	6a 00                	push   0x0
c001f81f:	e8 26 fe ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f824:	5f                   	pop    edi
c001f825:	5d                   	pop    ebp
c001f826:	52                   	push   edx
c001f827:	50                   	push   eax
c001f828:	e8 a4 fd ff ff       	call   c001f5d1 <Vm::fpuAbs(unsigned long long)>
c001f82d:	83 c4 0c             	add    esp,0xc
c001f830:	52                   	push   edx
c001f831:	50                   	push   eax
c001f832:	6a 00                	push   0x0
c001f834:	e8 54 fe ff ff       	call   c001f68d <Vm::fpuSetReg(int, unsigned long long)>
c001f839:	eb bc                	jmp    c001f7f7 <Vm::x87Handler(regs*)+0x70>
c001f83b:	e8 d3 fc ff ff       	call   c001f513 <Vm::fpuGetLog210()>
c001f840:	eb ac                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f842:	e8 9c fc ff ff       	call   c001f4e3 <Vm::fpuGetLog2E()>
c001f847:	eb a5                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f849:	e8 8d fc ff ff       	call   c001f4db <Vm::fpuGetPi()>
c001f84e:	eb 9e                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f850:	e8 d6 fc ff ff       	call   c001f52b <Vm::fpuGetLog102()>
c001f855:	eb 97                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f857:	e8 9f fc ff ff       	call   c001f4fb <Vm::fpuGetLogE2()>
c001f85c:	eb 90                	jmp    c001f7ee <Vm::x87Handler(regs*)+0x67>
c001f85e:	8d 50 40             	lea    edx,[eax+0x40]
c001f861:	80 fa 07             	cmp    dl,0x7
c001f864:	77 15                	ja     c001f87b <Vm::x87Handler(regs*)+0xf4>
c001f866:	83 ec 0c             	sub    esp,0xc
c001f869:	2d c0 00 00 00       	sub    eax,0xc0
c001f86e:	50                   	push   eax
c001f86f:	e8 d6 fd ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f874:	59                   	pop    ecx
c001f875:	5e                   	pop    esi
c001f876:	e9 75 ff ff ff       	jmp    c001f7f0 <Vm::x87Handler(regs*)+0x69>
c001f87b:	8d 50 38             	lea    edx,[eax+0x38]
c001f87e:	80 fa 07             	cmp    dl,0x7
c001f881:	77 3c                	ja     c001f8bf <Vm::x87Handler(regs*)+0x138>
c001f883:	83 ec 0c             	sub    esp,0xc
c001f886:	2d c8 00 00 00       	sub    eax,0xc8
c001f88b:	50                   	push   eax
c001f88c:	e8 b9 fd ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f891:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f898:	89 c6                	mov    esi,eax
c001f89a:	89 d7                	mov    edi,edx
c001f89c:	e8 a9 fd ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f8a1:	83 c4 0c             	add    esp,0xc
c001f8a4:	52                   	push   edx
c001f8a5:	50                   	push   eax
c001f8a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8aa:	2d c8 00 00 00       	sub    eax,0xc8
c001f8af:	50                   	push   eax
c001f8b0:	e8 d8 fd ff ff       	call   c001f68d <Vm::fpuSetReg(int, unsigned long long)>
c001f8b5:	83 c4 0c             	add    esp,0xc
c001f8b8:	57                   	push   edi
c001f8b9:	56                   	push   esi
c001f8ba:	e9 73 ff ff ff       	jmp    c001f832 <Vm::x87Handler(regs*)+0xab>
c001f8bf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8c3:	84 d2                	test   dl,dl
c001f8c5:	75 0f                	jne    c001f8d6 <Vm::x87Handler(regs*)+0x14f>
c001f8c7:	83 ec 0c             	sub    esp,0xc
c001f8ca:	ff 36                	push   DWORD PTR [esi]
c001f8cc:	e8 c8 fa ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001f8d1:	e9 bf 00 00 00       	jmp    c001f995 <Vm::x87Handler(regs*)+0x20e>
c001f8d6:	80 fa 03             	cmp    dl,0x3
c001f8d9:	75 13                	jne    c001f8ee <Vm::x87Handler(regs*)+0x167>
c001f8db:	e8 55 fe ff ff       	call   c001f735 <Vm::fpuPop()>
c001f8e0:	55                   	push   ebp
c001f8e1:	55                   	push   ebp
c001f8e2:	52                   	push   edx
c001f8e3:	50                   	push   eax
c001f8e4:	e8 4c fa ff ff       	call   c001f335 <Vm::fpuInternalTo32(unsigned long long)>
c001f8e9:	e9 88 00 00 00       	jmp    c001f976 <Vm::x87Handler(regs*)+0x1ef>
c001f8ee:	80 fa 05             	cmp    dl,0x5
c001f8f1:	75 0e                	jne    c001f901 <Vm::x87Handler(regs*)+0x17a>
c001f8f3:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f8f6:	66 a3 62 fa 02 c0    	mov    ds:0xc002fa62,ax
c001f8fc:	e9 df 00 00 00       	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x259>
c001f901:	31 c0                	xor    eax,eax
c001f903:	80 fa 07             	cmp    dl,0x7
c001f906:	0f 85 dc 08 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001f90c:	66 a1 62 fa 02 c0    	mov    ax,ds:0xc002fa62
c001f912:	66 89 06             	mov    WORD PTR [esi],ax
c001f915:	e9 c6 00 00 00       	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x259>
c001f91a:	80 fa d8             	cmp    dl,0xd8
c001f91d:	0f 84 c9 00 00 00    	je     c001f9ec <Vm::x87Handler(regs*)+0x265>
c001f923:	80 fa dc             	cmp    dl,0xdc
c001f926:	0f 84 0d 02 00 00    	je     c001fb39 <Vm::x87Handler(regs*)+0x3b2>
c001f92c:	80 fa de             	cmp    dl,0xde
c001f92f:	0f 84 cd 02 00 00    	je     c001fc02 <Vm::x87Handler(regs*)+0x47b>
c001f935:	80 fa dd             	cmp    dl,0xdd
c001f938:	0f 84 5f 04 00 00    	je     c001fd9d <Vm::x87Handler(regs*)+0x616>
c001f93e:	80 fa da             	cmp    dl,0xda
c001f941:	0f 84 24 05 00 00    	je     c001fe6b <Vm::x87Handler(regs*)+0x6e4>
c001f947:	80 fa df             	cmp    dl,0xdf
c001f94a:	0f 84 68 05 00 00    	je     c001feb8 <Vm::x87Handler(regs*)+0x731>
c001f950:	31 c0                	xor    eax,eax
c001f952:	80 fa db             	cmp    dl,0xdb
c001f955:	0f 85 8d 08 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001f95b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f95f:	80 fa 03             	cmp    dl,0x3
c001f962:	0f 85 70 06 00 00    	jne    c001ffd8 <Vm::x87Handler(regs*)+0x851>
c001f968:	e8 c8 fd ff ff       	call   c001f735 <Vm::fpuPop()>
c001f96d:	55                   	push   ebp
c001f96e:	55                   	push   ebp
c001f96f:	52                   	push   edx
c001f970:	50                   	push   eax
c001f971:	e8 71 fa ff ff       	call   c001f3e7 <Vm::fpuFloatToLong(unsigned long long)>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	89 06                	mov    DWORD PTR [esi],eax
c001f97b:	eb 63                	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x259>
c001f97d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f981:	84 d2                	test   dl,dl
c001f983:	0f 85 e6 05 00 00    	jne    c001ff6f <Vm::x87Handler(regs*)+0x7e8>
c001f989:	57                   	push   edi
c001f98a:	57                   	push   edi
c001f98b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f98e:	ff 36                	push   DWORD PTR [esi]
c001f990:	e8 49 fa ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c001f995:	5e                   	pop    esi
c001f996:	5f                   	pop    edi
c001f997:	52                   	push   edx
c001f998:	50                   	push   eax
c001f999:	e8 3a fd ff ff       	call   c001f6d8 <Vm::fpuPush(unsigned long long)>
c001f99e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f9a2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f9a5:	e9 51 fe ff ff       	jmp    c001f7fb <Vm::x87Handler(regs*)+0x74>
c001f9aa:	80 fa 03             	cmp    dl,0x3
c001f9ad:	0f 85 d7 06 00 00    	jne    c002008a <Vm::x87Handler(regs*)+0x903>
c001f9b3:	57                   	push   edi
c001f9b4:	57                   	push   edi
c001f9b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f9b8:	ff 36                	push   DWORD PTR [esi]
c001f9ba:	e8 1f fa ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c001f9bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9c6:	89 c6                	mov    esi,eax
c001f9c8:	89 d7                	mov    edi,edx
c001f9ca:	e8 7b fc ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001f9cf:	57                   	push   edi
c001f9d0:	56                   	push   esi
c001f9d1:	52                   	push   edx
c001f9d2:	50                   	push   eax
c001f9d3:	e8 95 fb ff ff       	call   c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9d8:	83 c4 20             	add    esp,0x20
c001f9db:	e8 55 fd ff ff       	call   c001f735 <Vm::fpuPop()>
c001f9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9e4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f9e7:	e9 12 fe ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0x77>
c001f9ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9f0:	8d 50 40             	lea    edx,[eax+0x40]
c001f9f3:	80 fa 07             	cmp    dl,0x7
c001f9f6:	77 29                	ja     c001fa21 <Vm::x87Handler(regs*)+0x29a>
c001f9f8:	83 ec 0c             	sub    esp,0xc
c001f9fb:	2d c0 00 00 00       	sub    eax,0xc0
c001fa00:	50                   	push   eax
c001fa01:	e8 44 fc ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fa06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa0d:	89 c6                	mov    esi,eax
c001fa0f:	89 d7                	mov    edi,edx
c001fa11:	e8 34 fc ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fa16:	57                   	push   edi
c001fa17:	56                   	push   esi
c001fa18:	52                   	push   edx
c001fa19:	50                   	push   eax
c001fa1a:	e8 a1 fb ff ff       	call   c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa1f:	eb 2f                	jmp    c001fa50 <Vm::x87Handler(regs*)+0x2c9>
c001fa21:	8d 50 38             	lea    edx,[eax+0x38]
c001fa24:	80 fa 07             	cmp    dl,0x7
c001fa27:	77 2f                	ja     c001fa58 <Vm::x87Handler(regs*)+0x2d1>
c001fa29:	83 ec 0c             	sub    esp,0xc
c001fa2c:	2d c8 00 00 00       	sub    eax,0xc8
c001fa31:	50                   	push   eax
c001fa32:	e8 13 fc ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fa37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa3e:	89 c6                	mov    esi,eax
c001fa40:	89 d7                	mov    edi,edx
c001fa42:	e8 03 fc ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fa47:	57                   	push   edi
c001fa48:	56                   	push   esi
c001fa49:	52                   	push   edx
c001fa4a:	50                   	push   eax
c001fa4b:	e8 a9 fb ff ff       	call   c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa50:	83 c4 1c             	add    esp,0x1c
c001fa53:	e9 d8 fd ff ff       	jmp    c001f830 <Vm::x87Handler(regs*)+0xa9>
c001fa58:	8d 50 30             	lea    edx,[eax+0x30]
c001fa5b:	80 fa 07             	cmp    dl,0x7
c001fa5e:	77 0d                	ja     c001fa6d <Vm::x87Handler(regs*)+0x2e6>
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	2d d0 00 00 00       	sub    eax,0xd0
c001fa68:	e9 99 03 00 00       	jmp    c001fe06 <Vm::x87Handler(regs*)+0x67f>
c001fa6d:	8d 50 28             	lea    edx,[eax+0x28]
c001fa70:	80 fa 07             	cmp    dl,0x7
c001fa73:	77 0d                	ja     c001fa82 <Vm::x87Handler(regs*)+0x2fb>
c001fa75:	83 ec 0c             	sub    esp,0xc
c001fa78:	2d d8 00 00 00       	sub    eax,0xd8
c001fa7d:	e9 c0 03 00 00       	jmp    c001fe42 <Vm::x87Handler(regs*)+0x6bb>
c001fa82:	8d 50 20             	lea    edx,[eax+0x20]
c001fa85:	80 fa 07             	cmp    dl,0x7
c001fa88:	77 1b                	ja     c001faa5 <Vm::x87Handler(regs*)+0x31e>
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	2d e0 00 00 00       	sub    eax,0xe0
c001fa92:	50                   	push   eax
c001fa93:	e8 b2 fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fa98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa9f:	89 c6                	mov    esi,eax
c001faa1:	89 d7                	mov    edi,edx
c001faa3:	eb 22                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x340>
c001faa5:	8d 50 18             	lea    edx,[eax+0x18]
c001faa8:	80 fa 07             	cmp    dl,0x7
c001faab:	77 2d                	ja     c001fada <Vm::x87Handler(regs*)+0x353>
c001faad:	83 ec 0c             	sub    esp,0xc
c001fab0:	6a 00                	push   0x0
c001fab2:	e8 93 fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fab7:	89 c6                	mov    esi,eax
c001fab9:	89 d7                	mov    edi,edx
c001fabb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fabf:	2d e8 00 00 00       	sub    eax,0xe8
c001fac4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fac7:	e8 7e fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001facc:	57                   	push   edi
c001facd:	56                   	push   esi
c001face:	52                   	push   edx
c001facf:	50                   	push   eax
c001fad0:	e8 15 fb ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fad5:	e9 76 ff ff ff       	jmp    c001fa50 <Vm::x87Handler(regs*)+0x2c9>
c001fada:	8d 50 10             	lea    edx,[eax+0x10]
c001fadd:	80 fa 07             	cmp    dl,0x7
c001fae0:	77 1b                	ja     c001fafd <Vm::x87Handler(regs*)+0x376>
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	2d f0 00 00 00       	sub    eax,0xf0
c001faea:	50                   	push   eax
c001faeb:	e8 5a fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001faf0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faf7:	89 c6                	mov    esi,eax
c001faf9:	89 d7                	mov    edi,edx
c001fafb:	eb 22                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x398>
c001fafd:	3c f7                	cmp    al,0xf7
c001faff:	0f 86 d1 03 00 00    	jbe    c001fed6 <Vm::x87Handler(regs*)+0x74f>
c001fb05:	83 ec 0c             	sub    esp,0xc
c001fb08:	6a 00                	push   0x0
c001fb0a:	e8 3b fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fb0f:	89 c6                	mov    esi,eax
c001fb11:	89 d7                	mov    edi,edx
c001fb13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb17:	2d f8 00 00 00       	sub    eax,0xf8
c001fb1c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb1f:	e8 26 fb ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fb24:	57                   	push   edi
c001fb25:	56                   	push   esi
c001fb26:	52                   	push   edx
c001fb27:	50                   	push   eax
c001fb28:	e8 eb fa ff ff       	call   c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb2d:	83 c4 1c             	add    esp,0x1c
c001fb30:	52                   	push   edx
c001fb31:	50                   	push   eax
c001fb32:	6a 00                	push   0x0
c001fb34:	e9 51 02 00 00       	jmp    c001fd8a <Vm::x87Handler(regs*)+0x603>
c001fb39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb3d:	8d 50 40             	lea    edx,[eax+0x40]
c001fb40:	80 fa 07             	cmp    dl,0x7
c001fb43:	77 37                	ja     c001fb7c <Vm::x87Handler(regs*)+0x3f5>
c001fb45:	83 ec 0c             	sub    esp,0xc
c001fb48:	2d c0 00 00 00       	sub    eax,0xc0
c001fb4d:	50                   	push   eax
c001fb4e:	e8 f7 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fb53:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb5a:	89 c6                	mov    esi,eax
c001fb5c:	89 d7                	mov    edi,edx
c001fb5e:	e8 e7 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fb63:	57                   	push   edi
c001fb64:	56                   	push   esi
c001fb65:	52                   	push   edx
c001fb66:	50                   	push   eax
c001fb67:	e8 54 fa ff ff       	call   c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb6c:	83 c4 1c             	add    esp,0x1c
c001fb6f:	52                   	push   edx
c001fb70:	50                   	push   eax
c001fb71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb75:	2d c0 00 00 00       	sub    eax,0xc0
c001fb7a:	eb 3d                	jmp    c001fbb9 <Vm::x87Handler(regs*)+0x432>
c001fb7c:	8d 50 38             	lea    edx,[eax+0x38]
c001fb7f:	80 fa 07             	cmp    dl,0x7
c001fb82:	77 3b                	ja     c001fbbf <Vm::x87Handler(regs*)+0x438>
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	2d c8 00 00 00       	sub    eax,0xc8
c001fb8c:	50                   	push   eax
c001fb8d:	e8 b8 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fb92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb99:	89 c6                	mov    esi,eax
c001fb9b:	89 d7                	mov    edi,edx
c001fb9d:	e8 a8 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fba2:	57                   	push   edi
c001fba3:	56                   	push   esi
c001fba4:	52                   	push   edx
c001fba5:	50                   	push   eax
c001fba6:	e8 4e fa ff ff       	call   c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbab:	83 c4 1c             	add    esp,0x1c
c001fbae:	52                   	push   edx
c001fbaf:	50                   	push   eax
c001fbb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb4:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb9:	50                   	push   eax
c001fbba:	e9 75 fc ff ff       	jmp    c001f834 <Vm::x87Handler(regs*)+0xad>
c001fbbf:	83 c0 18             	add    eax,0x18
c001fbc2:	3c 07                	cmp    al,0x7
c001fbc4:	0f 87 3b 04 00 00    	ja     c0020005 <Vm::x87Handler(regs*)+0x87e>
c001fbca:	83 ec 0c             	sub    esp,0xc
c001fbcd:	6a 00                	push   0x0
c001fbcf:	e8 76 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fbd4:	89 c6                	mov    esi,eax
c001fbd6:	89 d7                	mov    edi,edx
c001fbd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbdc:	2d e8 00 00 00       	sub    eax,0xe8
c001fbe1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbe4:	e8 61 fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fbe9:	57                   	push   edi
c001fbea:	56                   	push   esi
c001fbeb:	52                   	push   edx
c001fbec:	50                   	push   eax
c001fbed:	e8 f8 f9 ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbf2:	83 c4 1c             	add    esp,0x1c
c001fbf5:	52                   	push   edx
c001fbf6:	50                   	push   eax
c001fbf7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbfb:	2d e8 00 00 00       	sub    eax,0xe8
c001fc00:	eb b7                	jmp    c001fbb9 <Vm::x87Handler(regs*)+0x432>
c001fc02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc06:	8d 50 40             	lea    edx,[eax+0x40]
c001fc09:	80 fa 07             	cmp    dl,0x7
c001fc0c:	77 3a                	ja     c001fc48 <Vm::x87Handler(regs*)+0x4c1>
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	2d c0 00 00 00       	sub    eax,0xc0
c001fc16:	50                   	push   eax
c001fc17:	e8 2e fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fc1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc23:	89 c6                	mov    esi,eax
c001fc25:	89 d7                	mov    edi,edx
c001fc27:	e8 1e fa ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fc2c:	57                   	push   edi
c001fc2d:	56                   	push   esi
c001fc2e:	52                   	push   edx
c001fc2f:	50                   	push   eax
c001fc30:	e8 8b f9 ff ff       	call   c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc35:	83 c4 1c             	add    esp,0x1c
c001fc38:	52                   	push   edx
c001fc39:	50                   	push   eax
c001fc3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc3e:	2d c0 00 00 00       	sub    eax,0xc0
c001fc43:	e9 9e 01 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0x65f>
c001fc48:	8d 50 20             	lea    edx,[eax+0x20]
c001fc4b:	80 fa 07             	cmp    dl,0x7
c001fc4e:	77 3a                	ja     c001fc8a <Vm::x87Handler(regs*)+0x503>
c001fc50:	83 ec 0c             	sub    esp,0xc
c001fc53:	2d e0 00 00 00       	sub    eax,0xe0
c001fc58:	50                   	push   eax
c001fc59:	e8 ec f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fc5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc65:	89 c6                	mov    esi,eax
c001fc67:	89 d7                	mov    edi,edx
c001fc69:	e8 dc f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fc6e:	57                   	push   edi
c001fc6f:	56                   	push   esi
c001fc70:	52                   	push   edx
c001fc71:	50                   	push   eax
c001fc72:	e8 73 f9 ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc77:	83 c4 1c             	add    esp,0x1c
c001fc7a:	52                   	push   edx
c001fc7b:	50                   	push   eax
c001fc7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc80:	2d e0 00 00 00       	sub    eax,0xe0
c001fc85:	e9 5c 01 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0x65f>
c001fc8a:	8d 50 18             	lea    edx,[eax+0x18]
c001fc8d:	80 fa 07             	cmp    dl,0x7
c001fc90:	77 3b                	ja     c001fccd <Vm::x87Handler(regs*)+0x546>
c001fc92:	83 ec 0c             	sub    esp,0xc
c001fc95:	6a 00                	push   0x0
c001fc97:	e8 ae f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fc9c:	89 c6                	mov    esi,eax
c001fc9e:	89 d7                	mov    edi,edx
c001fca0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca4:	2d e8 00 00 00       	sub    eax,0xe8
c001fca9:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcac:	e8 99 f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fcb1:	57                   	push   edi
c001fcb2:	56                   	push   esi
c001fcb3:	52                   	push   edx
c001fcb4:	50                   	push   eax
c001fcb5:	e8 30 f9 ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcba:	83 c4 1c             	add    esp,0x1c
c001fcbd:	52                   	push   edx
c001fcbe:	50                   	push   eax
c001fcbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc3:	2d e8 00 00 00       	sub    eax,0xe8
c001fcc8:	e9 19 01 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0x65f>
c001fccd:	8d 50 38             	lea    edx,[eax+0x38]
c001fcd0:	80 fa 07             	cmp    dl,0x7
c001fcd3:	77 37                	ja     c001fd0c <Vm::x87Handler(regs*)+0x585>
c001fcd5:	83 ec 0c             	sub    esp,0xc
c001fcd8:	2d c8 00 00 00       	sub    eax,0xc8
c001fcdd:	50                   	push   eax
c001fcde:	e8 67 f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fce3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcea:	89 c6                	mov    esi,eax
c001fcec:	89 d7                	mov    edi,edx
c001fcee:	e8 57 f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fcf3:	57                   	push   edi
c001fcf4:	56                   	push   esi
c001fcf5:	52                   	push   edx
c001fcf6:	50                   	push   eax
c001fcf7:	e8 fd f8 ff ff       	call   c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcfc:	83 c4 1c             	add    esp,0x1c
c001fcff:	52                   	push   edx
c001fd00:	50                   	push   eax
c001fd01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd05:	2d c8 00 00 00       	sub    eax,0xc8
c001fd0a:	eb 7d                	jmp    c001fd89 <Vm::x87Handler(regs*)+0x602>
c001fd0c:	3c f7                	cmp    al,0xf7
c001fd0e:	76 38                	jbe    c001fd48 <Vm::x87Handler(regs*)+0x5c1>
c001fd10:	83 ec 0c             	sub    esp,0xc
c001fd13:	6a 00                	push   0x0
c001fd15:	e8 30 f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fd1a:	89 c6                	mov    esi,eax
c001fd1c:	89 d7                	mov    edi,edx
c001fd1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd22:	2d f8 00 00 00       	sub    eax,0xf8
c001fd27:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd2a:	e8 1b f9 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fd2f:	57                   	push   edi
c001fd30:	56                   	push   esi
c001fd31:	52                   	push   edx
c001fd32:	50                   	push   eax
c001fd33:	e8 e0 f8 ff ff       	call   c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd38:	83 c4 1c             	add    esp,0x1c
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd41:	2d f8 00 00 00       	sub    eax,0xf8
c001fd46:	eb 41                	jmp    c001fd89 <Vm::x87Handler(regs*)+0x602>
c001fd48:	8d 50 10             	lea    edx,[eax+0x10]
c001fd4b:	80 fa 07             	cmp    dl,0x7
c001fd4e:	0f 87 5a 01 00 00    	ja     c001feae <Vm::x87Handler(regs*)+0x727>
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	2d f0 00 00 00       	sub    eax,0xf0
c001fd5c:	50                   	push   eax
c001fd5d:	e8 e8 f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fd62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd69:	89 c6                	mov    esi,eax
c001fd6b:	89 d7                	mov    edi,edx
c001fd6d:	e8 d8 f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fd72:	57                   	push   edi
c001fd73:	56                   	push   esi
c001fd74:	52                   	push   edx
c001fd75:	50                   	push   eax
c001fd76:	e8 9d f8 ff ff       	call   c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd7b:	83 c4 1c             	add    esp,0x1c
c001fd7e:	52                   	push   edx
c001fd7f:	50                   	push   eax
c001fd80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd84:	2d f0 00 00 00       	sub    eax,0xf0
c001fd89:	50                   	push   eax
c001fd8a:	e8 fe f8 ff ff       	call   c001f68d <Vm::fpuSetReg(int, unsigned long long)>
c001fd8f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd93:	e8 9d f9 ff ff       	call   c001f735 <Vm::fpuPop()>
c001fd98:	e9 5e fa ff ff       	jmp    c001f7fb <Vm::x87Handler(regs*)+0x74>
c001fd9d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda1:	8d 50 30             	lea    edx,[eax+0x30]
c001fda4:	80 fa 07             	cmp    dl,0x7
c001fda7:	77 1d                	ja     c001fdc6 <Vm::x87Handler(regs*)+0x63f>
c001fda9:	83 ec 0c             	sub    esp,0xc
c001fdac:	6a 00                	push   0x0
c001fdae:	e8 97 f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fdb3:	83 c4 0c             	add    esp,0xc
c001fdb6:	52                   	push   edx
c001fdb7:	50                   	push   eax
c001fdb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbc:	2d d0 00 00 00       	sub    eax,0xd0
c001fdc1:	e9 f3 fd ff ff       	jmp    c001fbb9 <Vm::x87Handler(regs*)+0x432>
c001fdc6:	8d 50 28             	lea    edx,[eax+0x28]
c001fdc9:	80 fa 07             	cmp    dl,0x7
c001fdcc:	77 28                	ja     c001fdf6 <Vm::x87Handler(regs*)+0x66f>
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	6a 00                	push   0x0
c001fdd3:	e8 72 f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fdd8:	83 c4 0c             	add    esp,0xc
c001fddb:	52                   	push   edx
c001fddc:	50                   	push   eax
c001fddd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde1:	2d d8 00 00 00       	sub    eax,0xd8
c001fde6:	50                   	push   eax
c001fde7:	e8 a1 f8 ff ff       	call   c001f68d <Vm::fpuSetReg(int, unsigned long long)>
c001fdec:	e8 44 f9 ff ff       	call   c001f735 <Vm::fpuPop()>
c001fdf1:	e9 01 fa ff ff       	jmp    c001f7f7 <Vm::x87Handler(regs*)+0x70>
c001fdf6:	8d 50 20             	lea    edx,[eax+0x20]
c001fdf9:	80 fa 07             	cmp    dl,0x7
c001fdfc:	77 30                	ja     c001fe2e <Vm::x87Handler(regs*)+0x6a7>
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	2d e0 00 00 00       	sub    eax,0xe0
c001fe06:	50                   	push   eax
c001fe07:	e8 3e f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe13:	89 c6                	mov    esi,eax
c001fe15:	89 d7                	mov    edi,edx
c001fe17:	e8 2e f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe1c:	57                   	push   edi
c001fe1d:	56                   	push   esi
c001fe1e:	52                   	push   edx
c001fe1f:	50                   	push   eax
c001fe20:	e8 48 f7 ff ff       	call   c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe25:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe29:	e9 54 02 00 00       	jmp    c0020082 <Vm::x87Handler(regs*)+0x8fb>
c001fe2e:	8d 50 18             	lea    edx,[eax+0x18]
c001fe31:	80 fa 07             	cmp    dl,0x7
c001fe34:	0f 87 43 fb ff ff    	ja     c001f97d <Vm::x87Handler(regs*)+0x1f6>
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	2d e8 00 00 00       	sub    eax,0xe8
c001fe42:	50                   	push   eax
c001fe43:	e8 02 f8 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe48:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe4f:	89 c6                	mov    esi,eax
c001fe51:	89 d7                	mov    edi,edx
c001fe53:	e8 f2 f7 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe58:	57                   	push   edi
c001fe59:	56                   	push   esi
c001fe5a:	52                   	push   edx
c001fe5b:	50                   	push   eax
c001fe5c:	e8 0c f7 ff ff       	call   c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe61:	83 c4 20             	add    esp,0x20
c001fe64:	e8 cc f8 ff ff       	call   c001f735 <Vm::fpuPop()>
c001fe69:	eb 62                	jmp    c001fecd <Vm::x87Handler(regs*)+0x746>
c001fe6b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fe6f:	0f 85 0f 01 00 00    	jne    c001ff84 <Vm::x87Handler(regs*)+0x7fd>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	6a 01                	push   0x1
c001fe7a:	e8 cb f7 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe86:	89 c6                	mov    esi,eax
c001fe88:	89 d7                	mov    edi,edx
c001fe8a:	e8 bb f7 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fe8f:	57                   	push   edi
c001fe90:	56                   	push   esi
c001fe91:	52                   	push   edx
c001fe92:	50                   	push   eax
c001fe93:	e8 d5 f6 ff ff       	call   c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe98:	83 c4 20             	add    esp,0x20
c001fe9b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe9f:	e8 91 f8 ff ff       	call   c001f735 <Vm::fpuPop()>
c001fea4:	e8 8c f8 ff ff       	call   c001f735 <Vm::fpuPop()>
c001fea9:	e9 50 f9 ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0x77>
c001feae:	3c d9                	cmp    al,0xd9
c001feb0:	0f 85 b5 02 00 00    	jne    c002016b <Vm::x87Handler(regs*)+0x9e4>
c001feb6:	eb bd                	jmp    c001fe75 <Vm::x87Handler(regs*)+0x6ee>
c001feb8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001febc:	0f 85 ea 02 00 00    	jne    c00201ac <Vm::x87Handler(regs*)+0xa25>
c001fec2:	0f b7 05 60 fa 02 c0 	movzx  eax,WORD PTR ds:0xc002fa60
c001fec9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fecd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fed1:	e9 28 f9 ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0x77>
c001fed6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001feda:	84 d2                	test   dl,dl
c001fedc:	75 0f                	jne    c001feed <Vm::x87Handler(regs*)+0x766>
c001fede:	83 ec 0c             	sub    esp,0xc
c001fee1:	ff 36                	push   DWORD PTR [esi]
c001fee3:	e8 b1 f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001fee8:	e9 2c 01 00 00       	jmp    c0020019 <Vm::x87Handler(regs*)+0x892>
c001feed:	80 fa 01             	cmp    dl,0x1
c001fef0:	75 0f                	jne    c001ff01 <Vm::x87Handler(regs*)+0x77a>
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	ff 36                	push   DWORD PTR [esi]
c001fef7:	e8 9d f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001fefc:	e9 81 02 00 00       	jmp    c0020182 <Vm::x87Handler(regs*)+0x9fb>
c001ff01:	80 fa 04             	cmp    dl,0x4
c001ff04:	75 0f                	jne    c001ff15 <Vm::x87Handler(regs*)+0x78e>
c001ff06:	83 ec 0c             	sub    esp,0xc
c001ff09:	ff 36                	push   DWORD PTR [esi]
c001ff0b:	e8 89 f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001ff10:	e9 86 01 00 00       	jmp    c002009b <Vm::x87Handler(regs*)+0x914>
c001ff15:	80 fa 05             	cmp    dl,0x5
c001ff18:	75 1b                	jne    c001ff35 <Vm::x87Handler(regs*)+0x7ae>
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	6a 00                	push   0x0
c001ff1f:	e8 26 f7 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001ff24:	89 c7                	mov    edi,eax
c001ff26:	89 d5                	mov    ebp,edx
c001ff28:	58                   	pop    eax
c001ff29:	ff 36                	push   DWORD PTR [esi]
c001ff2b:	e8 69 f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001ff30:	e9 a3 01 00 00       	jmp    c00200d8 <Vm::x87Handler(regs*)+0x951>
c001ff35:	80 fa 06             	cmp    dl,0x6
c001ff38:	75 0f                	jne    c001ff49 <Vm::x87Handler(regs*)+0x7c2>
c001ff3a:	83 ec 0c             	sub    esp,0xc
c001ff3d:	ff 36                	push   DWORD PTR [esi]
c001ff3f:	e8 55 f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001ff44:	e9 ae 01 00 00       	jmp    c00200f7 <Vm::x87Handler(regs*)+0x970>
c001ff49:	31 c0                	xor    eax,eax
c001ff4b:	80 fa 07             	cmp    dl,0x7
c001ff4e:	0f 85 94 02 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	6a 00                	push   0x0
c001ff59:	e8 ec f6 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001ff5e:	89 c7                	mov    edi,eax
c001ff60:	89 d5                	mov    ebp,edx
c001ff62:	58                   	pop    eax
c001ff63:	ff 36                	push   DWORD PTR [esi]
c001ff65:	e8 2f f4 ff ff       	call   c001f399 <Vm::fpu32ToInternal(unsigned int)>
c001ff6a:	e9 cb 01 00 00       	jmp    c002013a <Vm::x87Handler(regs*)+0x9b3>
c001ff6f:	80 fa 03             	cmp    dl,0x3
c001ff72:	0f 85 d3 01 00 00    	jne    c002014b <Vm::x87Handler(regs*)+0x9c4>
c001ff78:	e8 b8 f7 ff ff       	call   c001f735 <Vm::fpuPop()>
c001ff7d:	51                   	push   ecx
c001ff7e:	51                   	push   ecx
c001ff7f:	e9 de 01 00 00       	jmp    c0020162 <Vm::x87Handler(regs*)+0x9db>
c001ff84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff88:	80 fa 01             	cmp    dl,0x1
c001ff8b:	75 09                	jne    c001ff96 <Vm::x87Handler(regs*)+0x80f>
c001ff8d:	57                   	push   edi
c001ff8e:	57                   	push   edi
c001ff8f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff91:	e9 e3 01 00 00       	jmp    c0020179 <Vm::x87Handler(regs*)+0x9f2>
c001ff96:	80 fa 04             	cmp    dl,0x4
c001ff99:	75 12                	jne    c001ffad <Vm::x87Handler(regs*)+0x826>
c001ff9b:	31 d2                	xor    edx,edx
c001ff9d:	51                   	push   ecx
c001ff9e:	51                   	push   ecx
c001ff9f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	e8 d0 f4 ff ff       	call   c001f478 <Vm::fpuLongToFloat(long long)>
c001ffa8:	e9 ee 00 00 00       	jmp    c002009b <Vm::x87Handler(regs*)+0x914>
c001ffad:	31 c0                	xor    eax,eax
c001ffaf:	80 fa 07             	cmp    dl,0x7
c001ffb2:	0f 85 30 02 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	6a 00                	push   0x0
c001ffbd:	e8 88 f6 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001ffc2:	89 c7                	mov    edi,eax
c001ffc4:	89 d5                	mov    ebp,edx
c001ffc6:	58                   	pop    eax
c001ffc7:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffc9:	5a                   	pop    edx
c001ffca:	31 d2                	xor    edx,edx
c001ffcc:	52                   	push   edx
c001ffcd:	50                   	push   eax
c001ffce:	e8 a5 f4 ff ff       	call   c001f478 <Vm::fpuLongToFloat(long long)>
c001ffd3:	e9 62 01 00 00       	jmp    c002013a <Vm::x87Handler(regs*)+0x9b3>
c001ffd8:	84 d2                	test   dl,dl
c001ffda:	75 0d                	jne    c001ffe9 <Vm::x87Handler(regs*)+0x862>
c001ffdc:	31 d2                	xor    edx,edx
c001ffde:	55                   	push   ebp
c001ffdf:	55                   	push   ebp
c001ffe0:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffe2:	52                   	push   edx
c001ffe3:	50                   	push   eax
c001ffe4:	e9 d3 01 00 00       	jmp    c00201bc <Vm::x87Handler(regs*)+0xa35>
c001ffe9:	31 c0                	xor    eax,eax
c001ffeb:	80 fa 02             	cmp    dl,0x2
c001ffee:	0f 85 f4 01 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	6a 00                	push   0x0
c001fff9:	e8 4c f6 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c001fffe:	59                   	pop    ecx
c001ffff:	5f                   	pop    edi
c0020000:	e9 6a f9 ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x1e8>
c0020005:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020009:	84 d2                	test   dl,dl
c002000b:	75 2a                	jne    c0020037 <Vm::x87Handler(regs*)+0x8b0>
c002000d:	50                   	push   eax
c002000e:	50                   	push   eax
c002000f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020012:	ff 36                	push   DWORD PTR [esi]
c0020014:	e8 c5 f3 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c0020019:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020020:	89 c6                	mov    esi,eax
c0020022:	89 d7                	mov    edi,edx
c0020024:	e8 21 f6 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c0020029:	57                   	push   edi
c002002a:	56                   	push   esi
c002002b:	52                   	push   edx
c002002c:	50                   	push   eax
c002002d:	e8 8e f5 ff ff       	call   c001f5c0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020032:	e9 64 01 00 00       	jmp    c002019b <Vm::x87Handler(regs*)+0xa14>
c0020037:	80 fa 01             	cmp    dl,0x1
c002003a:	75 11                	jne    c002004d <Vm::x87Handler(regs*)+0x8c6>
c002003c:	50                   	push   eax
c002003d:	50                   	push   eax
c002003e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020041:	ff 36                	push   DWORD PTR [esi]
c0020043:	e8 96 f3 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c0020048:	e9 35 01 00 00       	jmp    c0020182 <Vm::x87Handler(regs*)+0x9fb>
c002004d:	80 fa 02             	cmp    dl,0x2
c0020050:	0f 85 54 f9 ff ff    	jne    c001f9aa <Vm::x87Handler(regs*)+0x223>
c0020056:	55                   	push   ebp
c0020057:	55                   	push   ebp
c0020058:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002005b:	ff 36                	push   DWORD PTR [esi]
c002005d:	e8 7c f3 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c0020062:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020069:	89 c6                	mov    esi,eax
c002006b:	89 d7                	mov    edi,edx
c002006d:	e8 d8 f5 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c0020072:	57                   	push   edi
c0020073:	56                   	push   esi
c0020074:	52                   	push   edx
c0020075:	50                   	push   eax
c0020076:	e8 f2 f4 ff ff       	call   c001f56d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002007b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002007f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020082:	83 c4 20             	add    esp,0x20
c0020085:	e9 74 f7 ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0x77>
c002008a:	80 fa 04             	cmp    dl,0x4
c002008d:	75 2a                	jne    c00200b9 <Vm::x87Handler(regs*)+0x932>
c002008f:	51                   	push   ecx
c0020090:	51                   	push   ecx
c0020091:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020094:	ff 36                	push   DWORD PTR [esi]
c0020096:	e8 43 f3 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c002009b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200a2:	89 c6                	mov    esi,eax
c00200a4:	89 d7                	mov    edi,edx
c00200a6:	e8 9f f5 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c00200ab:	57                   	push   edi
c00200ac:	56                   	push   esi
c00200ad:	52                   	push   edx
c00200ae:	50                   	push   eax
c00200af:	e8 36 f5 ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200b4:	e9 e2 00 00 00       	jmp    c002019b <Vm::x87Handler(regs*)+0xa14>
c00200b9:	80 fa 05             	cmp    dl,0x5
c00200bc:	75 28                	jne    c00200e6 <Vm::x87Handler(regs*)+0x95f>
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	6a 00                	push   0x0
c00200c3:	e8 82 f5 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c00200c8:	89 c7                	mov    edi,eax
c00200ca:	89 d5                	mov    ebp,edx
c00200cc:	58                   	pop    eax
c00200cd:	5a                   	pop    edx
c00200ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200d1:	ff 36                	push   DWORD PTR [esi]
c00200d3:	e8 06 f3 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c00200d8:	83 c4 10             	add    esp,0x10
c00200db:	55                   	push   ebp
c00200dc:	57                   	push   edi
c00200dd:	52                   	push   edx
c00200de:	50                   	push   eax
c00200df:	e8 06 f5 ff ff       	call   c001f5ea <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200e4:	eb 60                	jmp    c0020146 <Vm::x87Handler(regs*)+0x9bf>
c00200e6:	80 fa 06             	cmp    dl,0x6
c00200e9:	75 2a                	jne    c0020115 <Vm::x87Handler(regs*)+0x98e>
c00200eb:	51                   	push   ecx
c00200ec:	51                   	push   ecx
c00200ed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200f0:	ff 36                	push   DWORD PTR [esi]
c00200f2:	e8 e7 f2 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c00200f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200fe:	89 c6                	mov    esi,eax
c0020100:	89 d7                	mov    edi,edx
c0020102:	e8 43 f5 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c0020107:	57                   	push   edi
c0020108:	56                   	push   esi
c0020109:	52                   	push   edx
c002010a:	50                   	push   eax
c002010b:	e8 08 f5 ff ff       	call   c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020110:	e9 86 00 00 00       	jmp    c002019b <Vm::x87Handler(regs*)+0xa14>
c0020115:	31 c0                	xor    eax,eax
c0020117:	80 fa 07             	cmp    dl,0x7
c002011a:	0f 85 c8 00 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	6a 00                	push   0x0
c0020125:	e8 20 f5 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c002012a:	89 c7                	mov    edi,eax
c002012c:	89 d5                	mov    ebp,edx
c002012e:	58                   	pop    eax
c002012f:	5a                   	pop    edx
c0020130:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020133:	ff 36                	push   DWORD PTR [esi]
c0020135:	e8 a4 f2 ff ff       	call   c001f3de <Vm::fpu64ToInternal(unsigned long long)>
c002013a:	83 c4 10             	add    esp,0x10
c002013d:	55                   	push   ebp
c002013e:	57                   	push   edi
c002013f:	52                   	push   edx
c0020140:	50                   	push   eax
c0020141:	e8 d2 f4 ff ff       	call   c001f618 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020146:	83 c4 0c             	add    esp,0xc
c0020149:	eb 53                	jmp    c002019e <Vm::x87Handler(regs*)+0xa17>
c002014b:	31 c0                	xor    eax,eax
c002014d:	80 fa 02             	cmp    dl,0x2
c0020150:	0f 85 92 00 00 00    	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	6a 00                	push   0x0
c002015b:	e8 ea f4 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c0020160:	59                   	pop    ecx
c0020161:	5f                   	pop    edi
c0020162:	52                   	push   edx
c0020163:	50                   	push   eax
c0020164:	e8 27 f2 ff ff       	call   c001f390 <Vm::fpuInternalTo64(unsigned long long)>
c0020169:	eb 70                	jmp    c00201db <Vm::x87Handler(regs*)+0xa54>
c002016b:	31 c0                	xor    eax,eax
c002016d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020172:	75 74                	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c0020174:	50                   	push   eax
c0020175:	50                   	push   eax
c0020176:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020179:	31 d2                	xor    edx,edx
c002017b:	52                   	push   edx
c002017c:	50                   	push   eax
c002017d:	e8 f6 f2 ff ff       	call   c001f478 <Vm::fpuLongToFloat(long long)>
c0020182:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020189:	89 c6                	mov    esi,eax
c002018b:	89 d7                	mov    edi,edx
c002018d:	e8 b8 f4 ff ff       	call   c001f64a <Vm::fpuGetReg(int)>
c0020192:	57                   	push   edi
c0020193:	56                   	push   esi
c0020194:	52                   	push   edx
c0020195:	50                   	push   eax
c0020196:	e8 5e f4 ff ff       	call   c001f5f9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002019b:	83 c4 1c             	add    esp,0x1c
c002019e:	52                   	push   edx
c002019f:	50                   	push   eax
c00201a0:	6a 00                	push   0x0
c00201a2:	e8 e6 f4 ff ff       	call   c001f68d <Vm::fpuSetReg(int, unsigned long long)>
c00201a7:	e9 f2 f7 ff ff       	jmp    c001f99e <Vm::x87Handler(regs*)+0x217>
c00201ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201b0:	80 fa 05             	cmp    dl,0x5
c00201b3:	75 11                	jne    c00201c6 <Vm::x87Handler(regs*)+0xa3f>
c00201b5:	55                   	push   ebp
c00201b6:	55                   	push   ebp
c00201b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201ba:	ff 36                	push   DWORD PTR [esi]
c00201bc:	e8 81 f2 ff ff       	call   c001f442 <Vm::fpuULongToFloat(unsigned long long)>
c00201c1:	e9 cf f7 ff ff       	jmp    c001f995 <Vm::x87Handler(regs*)+0x20e>
c00201c6:	31 c0                	xor    eax,eax
c00201c8:	80 fa 07             	cmp    dl,0x7
c00201cb:	75 1b                	jne    c00201e8 <Vm::x87Handler(regs*)+0xa61>
c00201cd:	e8 63 f5 ff ff       	call   c001f735 <Vm::fpuPop()>
c00201d2:	51                   	push   ecx
c00201d3:	51                   	push   ecx
c00201d4:	52                   	push   edx
c00201d5:	50                   	push   eax
c00201d6:	e8 0c f2 ff ff       	call   c001f3e7 <Vm::fpuFloatToLong(unsigned long long)>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	89 06                	mov    DWORD PTR [esi],eax
c00201e0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00201e3:	e9 f8 f7 ff ff       	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x259>
c00201e8:	83 c4 1c             	add    esp,0x1c
c00201eb:	5b                   	pop    ebx
c00201ec:	5e                   	pop    esi
c00201ed:	5f                   	pop    edi
c00201ee:	5d                   	pop    ebp
c00201ef:	c3                   	ret    

c00201f0 <__static_initialization_and_destruction_0(int, int)>:
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00201f8:	75 1a                	jne    c0020214 <__static_initialization_and_destruction_0(int, int)+0x24>
c00201fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020202:	75 10                	jne    c0020214 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	68 60 fa 02 c0       	push   0xc002fa60
c002020c:	e8 99 8e 00 00       	call   c00290aa <Vm::_FPUState::_FPUState()>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	90                   	nop
c0020215:	83 c4 0c             	add    esp,0xc
c0020218:	c3                   	ret    

c0020219 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	83 ec 08             	sub    esp,0x8
c002021f:	68 ff ff 00 00       	push   0xffff
c0020224:	6a 01                	push   0x1
c0020226:	e8 c5 ff ff ff       	call   c00201f0 <__static_initialization_and_destruction_0(int, int)>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	83 c4 0c             	add    esp,0xc
c0020231:	c3                   	ret    

c0020232 <FAT::getName()>:
c0020232:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c0020237:	c3                   	ret    

c0020238 <FAT::tell(void*, unsigned long long*)>:
c0020238:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002023d:	75 06                	jne    c0020245 <FAT::tell(void*, unsigned long long*)+0xd>
c002023f:	b8 04 00 00 00       	mov    eax,0x4
c0020244:	c3                   	ret    
c0020245:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002024a:	75 06                	jne    c0020252 <FAT::tell(void*, unsigned long long*)+0x1a>
c002024c:	b8 04 00 00 00       	mov    eax,0x4
c0020251:	c3                   	ret    
c0020252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020256:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020259:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002025c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020260:	89 01                	mov    DWORD PTR [ecx],eax
c0020262:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020265:	b8 00 00 00 00       	mov    eax,0x0
c002026a:	c3                   	ret    
c002026b:	90                   	nop

c002026c <FAT::stat(void*, unsigned long long*)>:
c002026c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020271:	75 06                	jne    c0020279 <FAT::stat(void*, unsigned long long*)+0xd>
c0020273:	b8 04 00 00 00       	mov    eax,0x4
c0020278:	c3                   	ret    
c0020279:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002027e:	75 06                	jne    c0020286 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020280:	b8 04 00 00 00       	mov    eax,0x4
c0020285:	c3                   	ret    
c0020286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002028a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002028d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020294:	89 01                	mov    DWORD PTR [ecx],eax
c0020296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020299:	b8 00 00 00 00       	mov    eax,0x0
c002029e:	c3                   	ret    
c002029f:	90                   	nop

c00202a0 <FAT::~FAT()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	89 10                	mov    DWORD PTR [eax],edx
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	50                   	push   eax
c00202b6:	e8 fb 28 ff ff       	call   c0012bb6 <Filesystem::~Filesystem()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	90                   	nop
c00202bf:	83 c4 0c             	add    esp,0xc
c00202c2:	c3                   	ret    
c00202c3:	90                   	nop

c00202c4 <FAT::~FAT()>:
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 cd ff ff ff       	call   c00202a0 <FAT::~FAT()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	6a 08                	push   0x8
c00202db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202df:	e8 b7 24 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00202e4:	83 c4 10             	add    esp,0x10
c00202e7:	83 c4 0c             	add    esp,0xc
c00202ea:	c3                   	ret    
c00202eb:	90                   	nop

c00202ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00202ec:	83 ec 1c             	sub    esp,0x1c
c00202ef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00202f6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00202fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202ff:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020306:	83 f8 ff             	cmp    eax,0xffffffff
c0020309:	75 34                	jne    c002033f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002030b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002030f:	88 c2                	mov    dl,al
c0020311:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0020316:	01 d0                	add    eax,edx
c0020318:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002031c:	8b 15 c0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac0
c0020322:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020326:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c002032d:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0020332:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020336:	89 14 85 60 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04a0],edx
c002033d:	eb 17                	jmp    c0020356 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002033f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020343:	88 c2                	mov    dl,al
c0020345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020349:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020350:	01 d0                	add    eax,edx
c0020352:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020356:	83 ec 04             	sub    esp,0x4
c0020359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002035d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020361:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020365:	50                   	push   eax
c0020366:	e8 93 69 fe ff       	call   c0006cfe <f_getlabel>
c002036b:	83 c4 10             	add    esp,0x10
c002036e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020372:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020377:	75 07                	jne    c0020380 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020379:	b8 00 00 00 00       	mov    eax,0x0
c002037e:	eb 05                	jmp    c0020385 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020380:	b8 01 00 00 00       	mov    eax,0x1
c0020385:	83 c4 1c             	add    esp,0x1c
c0020388:	c3                   	ret    
c0020389:	90                   	nop

c002038a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002038a:	57                   	push   edi
c002038b:	83 ec 58             	sub    esp,0x58
c002038e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020396:	8d 54 24 10          	lea    edx,[esp+0x10]
c002039a:	b9 0f 00 00 00       	mov    ecx,0xf
c002039f:	b8 00 00 00 00       	mov    eax,0x0
c00203a4:	fc                   	cld    
c00203a5:	89 d7                	mov    edi,edx
c00203a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00203a9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203ad:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c00203b4:	83 f8 ff             	cmp    eax,0xffffffff
c00203b7:	75 34                	jne    c00203ed <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00203b9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00203bd:	88 c2                	mov    dl,al
c00203bf:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c00203c4:	01 d0                	add    eax,edx
c00203c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00203ca:	8b 15 c0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac0
c00203d0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203d4:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c00203db:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c00203e0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00203e4:	89 14 85 60 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04a0],edx
c00203eb:	eb 17                	jmp    c0020404 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00203ed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00203f1:	88 c2                	mov    dl,al
c00203f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203f7:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c00203fe:	01 d0                	add    eax,edx
c0020400:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020404:	83 ec 08             	sub    esp,0x8
c0020407:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002040b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002040f:	50                   	push   eax
c0020410:	e8 37 05 fe ff       	call   c000094c <strcat>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002041f:	50                   	push   eax
c0020420:	e8 c7 6a fe ff       	call   c0006eec <f_setlabel>
c0020425:	83 c4 10             	add    esp,0x10
c0020428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002042c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020431:	75 07                	jne    c002043a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020433:	b8 00 00 00 00       	mov    eax,0x0
c0020438:	eb 05                	jmp    c002043f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002043a:	b8 01 00 00 00       	mov    eax,0x1
c002043f:	83 c4 58             	add    esp,0x58
c0020442:	5f                   	pop    edi
c0020443:	c3                   	ret    

c0020444 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020444:	83 ec 2c             	sub    esp,0x2c
c0020447:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002044f:	83 ec 08             	sub    esp,0x8
c0020452:	68 54 c9 02 c0       	push   0xc002c954
c0020457:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002045b:	e8 38 04 fe ff       	call   c0000898 <strcmp>
c0020460:	83 c4 10             	add    esp,0x10
c0020463:	85 c0                	test   eax,eax
c0020465:	0f 94 c0             	sete   al
c0020468:	84 c0                	test   al,al
c002046a:	74 0d                	je     c0020479 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002046c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020474:	e9 a6 00 00 00       	jmp    c002051f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020479:	83 ec 08             	sub    esp,0x8
c002047c:	68 46 c9 02 c0       	push   0xc002c946
c0020481:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020485:	e8 0e 04 fe ff       	call   c0000898 <strcmp>
c002048a:	83 c4 10             	add    esp,0x10
c002048d:	85 c0                	test   eax,eax
c002048f:	0f 94 c0             	sete   al
c0020492:	84 c0                	test   al,al
c0020494:	74 0a                	je     c00204a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020496:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002049e:	eb 7f                	jmp    c002051f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204a0:	83 ec 08             	sub    esp,0x8
c00204a3:	68 4c c9 02 c0       	push   0xc002c94c
c00204a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204ac:	e8 e7 03 fe ff       	call   c0000898 <strcmp>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	85 c0                	test   eax,eax
c00204b6:	0f 94 c0             	sete   al
c00204b9:	84 c0                	test   al,al
c00204bb:	74 0a                	je     c00204c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00204bd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00204c5:	eb 58                	jmp    c002051f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204c7:	83 ec 08             	sub    esp,0x8
c00204ca:	68 0c 98 02 c0       	push   0xc002980c
c00204cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204d3:	e8 c0 03 fe ff       	call   c0000898 <strcmp>
c00204d8:	83 c4 10             	add    esp,0x10
c00204db:	85 c0                	test   eax,eax
c00204dd:	0f 94 c0             	sete   al
c00204e0:	84 c0                	test   al,al
c00204e2:	74 0a                	je     c00204ee <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00204e4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00204ec:	eb 31                	jmp    c002051f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204ee:	83 ec 08             	sub    esp,0x8
c00204f1:	68 52 c9 02 c0       	push   0xc002c952
c00204f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204fa:	e8 99 03 fe ff       	call   c0000898 <strcmp>
c00204ff:	83 c4 10             	add    esp,0x10
c0020502:	85 c0                	test   eax,eax
c0020504:	0f 94 c0             	sete   al
c0020507:	84 c0                	test   al,al
c0020509:	74 0a                	je     c0020515 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002050b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020513:	eb 0a                	jmp    c002051f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020515:	b8 08 00 00 00       	mov    eax,0x8
c002051a:	e9 df 00 00 00       	jmp    c00205fe <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002051f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020526:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002052b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002052f:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020536:	83 f8 ff             	cmp    eax,0xffffffff
c0020539:	75 34                	jne    c002056f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002053b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002053f:	88 c2                	mov    dl,al
c0020541:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0020546:	01 d0                	add    eax,edx
c0020548:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002054c:	8b 15 c0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac0
c0020552:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020556:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c002055d:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0020562:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020566:	89 14 85 60 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04a0],edx
c002056d:	eb 17                	jmp    c0020586 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002056f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020573:	88 c2                	mov    dl,al
c0020575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020579:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020580:	01 d0                	add    eax,edx
c0020582:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020586:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002058a:	88 04 24             	mov    BYTE PTR [esp],al
c002058d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020595:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002059d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00205a2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	68 00 20 00 00       	push   0x2000
c00205b2:	e8 64 f2 fe ff       	call   c000f81b <malloc>
c00205b7:	83 c4 10             	add    esp,0x10
c00205ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205be:	68 00 20 00 00       	push   0x2000
c00205c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205cb:	50                   	push   eax
c00205cc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00205d0:	50                   	push   eax
c00205d1:	e8 97 6f fe ff       	call   c000756d <f_mkfs>
c00205d6:	83 c4 10             	add    esp,0x10
c00205d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00205e2:	75 07                	jne    c00205eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00205e4:	b8 00 00 00 00       	mov    eax,0x0
c00205e9:	eb 13                	jmp    c00205fe <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205eb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00205f0:	75 07                	jne    c00205f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00205f2:	b8 09 00 00 00       	mov    eax,0x9
c00205f7:	eb 05                	jmp    c00205fe <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205f9:	b8 01 00 00 00       	mov    eax,0x1
c00205fe:	83 c4 2c             	add    esp,0x2c
c0020601:	c3                   	ret    

c0020602 <FAT::tryMount(LogicalDisk*, int)>:
c0020602:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020608:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c002060d:	83 f8 14             	cmp    eax,0x14
c0020610:	75 17                	jne    c0020629 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020612:	83 ec 0c             	sub    esp,0xc
c0020615:	68 58 c9 02 c0       	push   0xc002c958
c002061a:	e8 06 9c ff ff       	call   c001a225 <Krnl::panic(char const*)>
c002061f:	83 c4 10             	add    esp,0x10
c0020622:	b0 00                	mov    al,0x0
c0020624:	e9 d7 01 00 00       	jmp    c0020800 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020629:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020630:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020636:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002063c:	3d 00 02 00 00       	cmp    eax,0x200
c0020641:	74 07                	je     c002064a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020643:	b0 00                	mov    al,0x0
c0020645:	e9 b6 01 00 00       	jmp    c0020800 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002064a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020652:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020659:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020660:	83 f8 ff             	cmp    eax,0xffffffff
c0020663:	74 07                	je     c002066c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020665:	b0 01                	mov    al,0x1
c0020667:	e9 94 01 00 00       	jmp    c0020800 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002066c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020676:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002067e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020685:	88 c2                	mov    dl,al
c0020687:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c002068c:	01 d0                	add    eax,edx
c002068e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020695:	8b 15 c0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fac0
c002069b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00206a2:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c00206a9:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c00206ae:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00206b5:	89 14 85 60 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04a0],edx
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	68 54 02 00 00       	push   0x254
c00206c4:	e8 52 f1 fe ff       	call   c000f81b <malloc>
c00206c9:	83 c4 10             	add    esp,0x10
c00206cc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00206d3:	83 ec 04             	sub    esp,0x4
c00206d6:	6a 00                	push   0x0
c00206d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206df:	50                   	push   eax
c00206e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00206e7:	e8 09 48 fe ff       	call   c0004ef5 <f_mount>
c00206ec:	83 c4 10             	add    esp,0x10
c00206ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00206f6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00206fe:	74 19                	je     c0020719 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002070a:	e8 2c f1 fe ff       	call   c000f83b <rfree>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	b0 00                	mov    al,0x0
c0020714:	e9 e7 00 00 00       	jmp    c0020800 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020719:	83 ec 04             	sub    esp,0x4
c002071c:	68 00 01 00 00       	push   0x100
c0020721:	6a 00                	push   0x0
c0020723:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002072a:	50                   	push   eax
c002072b:	e8 20 00 fe ff       	call   c0000750 <memset>
c0020730:	83 c4 10             	add    esp,0x10
c0020733:	83 ec 08             	sub    esp,0x8
c0020736:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002073d:	50                   	push   eax
c002073e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020745:	50                   	push   eax
c0020746:	e8 01 02 fe ff       	call   c000094c <strcat>
c002074b:	83 c4 10             	add    esp,0x10
c002074e:	83 ec 08             	sub    esp,0x8
c0020751:	68 66 c9 02 c0       	push   0xc002c966
c0020756:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002075d:	50                   	push   eax
c002075e:	e8 e9 01 fe ff       	call   c000094c <strcat>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	83 ec 04             	sub    esp,0x4
c0020769:	6a 01                	push   0x1
c002076b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020772:	50                   	push   eax
c0020773:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020777:	50                   	push   eax
c0020778:	e8 da 47 fe ff       	call   c0004f57 <f_open>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020787:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002078e:	85 c0                	test   eax,eax
c0020790:	74 0a                	je     c002079c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020792:	78 2d                	js     c00207c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020794:	83 e8 04             	sub    eax,0x4
c0020797:	83 f8 01             	cmp    eax,0x1
c002079a:	77 25                	ja     c00207c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002079c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00207ab:	50                   	push   eax
c00207ac:	e8 f8 52 fe ff       	call   c0005aa9 <f_close>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	90                   	nop
c00207b5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00207bd:	74 3a                	je     c00207f9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00207bf:	eb 2d                	jmp    c00207ee <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00207c1:	83 ec 0c             	sub    esp,0xc
c00207c4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00207cb:	e8 6b f0 fe ff       	call   c000f83b <rfree>
c00207d0:	83 c4 10             	add    esp,0x10
c00207d3:	83 ec 04             	sub    esp,0x4
c00207d6:	6a 00                	push   0x0
c00207d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00207df:	50                   	push   eax
c00207e0:	6a 00                	push   0x0
c00207e2:	e8 0e 47 fe ff       	call   c0004ef5 <f_mount>
c00207e7:	83 c4 10             	add    esp,0x10
c00207ea:	b0 00                	mov    al,0x0
c00207ec:	eb 12                	jmp    c0020800 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207ee:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c00207f3:	40                   	inc    eax
c00207f4:	a3 c0 fa 02 c0       	mov    ds:0xc002fac0,eax
c00207f9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020800:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020806:	c3                   	ret    
c0020807:	90                   	nop

c0020808 <FAT::allocateSwapfile(char const*, int)>:
c0020808:	55                   	push   ebp
c0020809:	57                   	push   edi
c002080a:	56                   	push   esi
c002080b:	53                   	push   ebx
c002080c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0020812:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c002081d:	83 ec 0c             	sub    esp,0xc
c0020820:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0020827:	e8 ef ef fe ff       	call   c000f81b <malloc>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	89 c7                	mov    edi,eax
c0020831:	a1 f0 f9 02 c0       	mov    eax,ds:0xc002f9f0
c0020836:	83 ec 04             	sub    esp,0x4
c0020839:	50                   	push   eax
c002083a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0020841:	57                   	push   edi
c0020842:	e8 9f 25 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c0020847:	83 c4 10             	add    esp,0x10
c002084a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0020851:	83 ec 04             	sub    esp,0x4
c0020854:	8d 44 24 13          	lea    eax,[esp+0x13]
c0020858:	50                   	push   eax
c0020859:	8d 44 24 18          	lea    eax,[esp+0x18]
c002085d:	50                   	push   eax
c002085e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020865:	e8 8c 28 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c002086a:	83 c4 10             	add    esp,0x10
c002086d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0020874:	c1 e0 14             	shl    eax,0x14
c0020877:	89 c7                	mov    edi,eax
c0020879:	89 c5                	mov    ebp,eax
c002087b:	c1 fd 1f             	sar    ebp,0x1f
c002087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020882:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020886:	89 f9                	mov    ecx,edi
c0020888:	31 c1                	xor    ecx,eax
c002088a:	89 cb                	mov    ebx,ecx
c002088c:	89 e9                	mov    ecx,ebp
c002088e:	31 d1                	xor    ecx,edx
c0020890:	89 ce                	mov    esi,ecx
c0020892:	89 f0                	mov    eax,esi
c0020894:	09 d8                	or     eax,ebx
c0020896:	0f 84 98 00 00 00    	je     c0020934 <FAT::allocateSwapfile(char const*, int)+0x12c>
c002089c:	83 ec 0c             	sub    esp,0xc
c002089f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00208a6:	e8 17 27 ff ff       	call   c0012fc2 <File::unlink()>
c00208ab:	83 c4 10             	add    esp,0x10
c00208ae:	83 ec 08             	sub    esp,0x8
c00208b1:	6a 12                	push   0x12
c00208b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00208ba:	e8 8b 25 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c00208bf:	83 c4 10             	add    esp,0x10
c00208c2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00208c9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00208cf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00208d6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00208dd:	c1 e0 14             	shl    eax,0x14
c00208e0:	99                   	cdq    
c00208e1:	6a 01                	push   0x1
c00208e3:	52                   	push   edx
c00208e4:	50                   	push   eax
c00208e5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00208ec:	e8 68 68 fe ff       	call   c0007159 <f_expand>
c00208f1:	83 c4 10             	add    esp,0x10
c00208f4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00208fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208fd:	83 c0 10             	add    eax,0x10
c0020900:	8b 00                	mov    eax,DWORD PTR [eax]
c0020902:	83 ec 0c             	sub    esp,0xc
c0020905:	8d 54 24 24          	lea    edx,[esp+0x24]
c0020909:	52                   	push   edx
c002090a:	8d 54 24 30          	lea    edx,[esp+0x30]
c002090e:	52                   	push   edx
c002090f:	6a 00                	push   0x0
c0020911:	68 00 04 00 00       	push   0x400
c0020916:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002091d:	ff d0                	call   eax
c002091f:	83 c4 20             	add    esp,0x20
c0020922:	83 ec 0c             	sub    esp,0xc
c0020925:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002092c:	e8 77 25 ff ff       	call   c0012ea8 <File::close()>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	83 ec 08             	sub    esp,0x8
c0020937:	6a 01                	push   0x1
c0020939:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020940:	e8 05 25 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002094f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020951:	83 c0 0c             	add    eax,0xc
c0020954:	8b 00                	mov    eax,DWORD PTR [eax]
c0020956:	83 ec 0c             	sub    esp,0xc
c0020959:	8d 54 24 24          	lea    edx,[esp+0x24]
c002095d:	52                   	push   edx
c002095e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0020962:	52                   	push   edx
c0020963:	6a 00                	push   0x0
c0020965:	6a 04                	push   0x4
c0020967:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002096e:	ff d0                	call   eax
c0020970:	83 c4 20             	add    esp,0x20
c0020973:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002097a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020980:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0020987:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c002098e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020991:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020994:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c002099b:	83 ec 0c             	sub    esp,0xc
c002099e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00209a5:	e8 fe 24 ff ff       	call   c0012ea8 <File::close()>
c00209aa:	83 c4 10             	add    esp,0x10
c00209ad:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00209b4:	ba 00 00 00 00       	mov    edx,0x0
c00209b9:	81 c4 3c 04 00 00    	add    esp,0x43c
c00209bf:	5b                   	pop    ebx
c00209c0:	5e                   	pop    esi
c00209c1:	5f                   	pop    edi
c00209c2:	5d                   	pop    ebp
c00209c3:	c3                   	ret    

c00209c4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209c4:	57                   	push   edi
c00209c5:	56                   	push   esi
c00209c6:	53                   	push   ebx
c00209c7:	81 ec 50 02 00 00    	sub    esp,0x250
c00209cd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00209d5:	74 0a                	je     c00209e1 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00209d7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00209df:	75 0a                	jne    c00209eb <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00209e1:	b8 04 00 00 00       	mov    eax,0x4
c00209e6:	e9 29 01 00 00       	jmp    c0020b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00209eb:	83 ec 08             	sub    esp,0x8
c00209ee:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00209f5:	50                   	push   eax
c00209f6:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00209fd:	e8 b1 56 fe ff       	call   c00060b3 <f_readdir>
c0020a02:	83 c4 10             	add    esp,0x10
c0020a05:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020a0c:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020a13:	83 ec 0c             	sub    esp,0xc
c0020a16:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020a1d:	83 c0 1a             	add    eax,0x1a
c0020a20:	50                   	push   eax
c0020a21:	e8 46 fd fd ff       	call   c000076c <strlen>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	ba 00 00 00 00       	mov    edx,0x0
c0020a2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a36:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020a3d:	0f b6 c0             	movzx  eax,al
c0020a40:	83 e0 10             	and    eax,0x10
c0020a43:	74 07                	je     c0020a4c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020a45:	b8 02 00 00 00       	mov    eax,0x2
c0020a4a:	eb 05                	jmp    c0020a51 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020a4c:	b8 01 00 00 00       	mov    eax,0x1
c0020a51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020a55:	83 ec 08             	sub    esp,0x8
c0020a58:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a5f:	83 c0 1a             	add    eax,0x1a
c0020a62:	50                   	push   eax
c0020a63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a67:	83 c0 10             	add    eax,0x10
c0020a6a:	50                   	push   eax
c0020a6b:	e8 9c fd fd ff       	call   c000080c <strcpy>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020a7a:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020a81:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a85:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020a8c:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020a93:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020a9a:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020aa1:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020aa8:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020aaf:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020ab6:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020abd:	89 c6                	mov    esi,eax
c0020abf:	89 d7                	mov    edi,edx
c0020ac1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ac3:	89 c8                	mov    eax,ecx
c0020ac5:	89 fa                	mov    edx,edi
c0020ac7:	89 f3                	mov    ebx,esi
c0020ac9:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020ad0:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020ad7:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020ade:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020ae5:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020aeb:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020af2:	84 c0                	test   al,al
c0020af4:	75 07                	jne    c0020afd <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020af6:	b8 07 00 00 00       	mov    eax,0x7
c0020afb:	eb 17                	jmp    c0020b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020afd:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020b04:	85 c0                	test   eax,eax
c0020b06:	75 07                	jne    c0020b0f <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020b08:	b8 00 00 00 00       	mov    eax,0x0
c0020b0d:	eb 05                	jmp    c0020b14 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020b0f:	b8 01 00 00 00       	mov    eax,0x1
c0020b14:	81 c4 50 02 00 00    	add    esp,0x250
c0020b1a:	5b                   	pop    ebx
c0020b1b:	5e                   	pop    esi
c0020b1c:	5f                   	pop    edi
c0020b1d:	c3                   	ret    

c0020b1e <FAT::read(void*, unsigned long, void*, int*)>:
c0020b1e:	83 ec 1c             	sub    esp,0x1c
c0020b21:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b26:	74 07                	je     c0020b2f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020b28:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b2d:	75 07                	jne    c0020b36 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020b2f:	b8 04 00 00 00       	mov    eax,0x4
c0020b34:	eb 3d                	jmp    c0020b73 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b36:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b3a:	50                   	push   eax
c0020b3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b47:	e8 47 48 fe ff       	call   c0005393 <f_read>
c0020b4c:	83 c4 10             	add    esp,0x10
c0020b4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b57:	89 c2                	mov    edx,eax
c0020b59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b5d:	89 10                	mov    DWORD PTR [eax],edx
c0020b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b63:	85 c0                	test   eax,eax
c0020b65:	75 07                	jne    c0020b6e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b67:	b8 00 00 00 00       	mov    eax,0x0
c0020b6c:	eb 05                	jmp    c0020b73 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b6e:	b8 01 00 00 00       	mov    eax,0x1
c0020b73:	83 c4 1c             	add    esp,0x1c
c0020b76:	c3                   	ret    
c0020b77:	90                   	nop

c0020b78 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b78:	83 ec 1c             	sub    esp,0x1c
c0020b7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b80:	74 07                	je     c0020b89 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b87:	75 07                	jne    c0020b90 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b89:	b8 04 00 00 00       	mov    eax,0x4
c0020b8e:	eb 3d                	jmp    c0020bcd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b94:	50                   	push   eax
c0020b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ba1:	e8 6d 4a fe ff       	call   c0005613 <f_write>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bb1:	89 c2                	mov    edx,eax
c0020bb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020bb7:	89 10                	mov    DWORD PTR [eax],edx
c0020bb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bbd:	85 c0                	test   eax,eax
c0020bbf:	75 07                	jne    c0020bc8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020bc1:	b8 00 00 00 00       	mov    eax,0x0
c0020bc6:	eb 05                	jmp    c0020bcd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020bc8:	b8 01 00 00 00       	mov    eax,0x1
c0020bcd:	83 c4 1c             	add    esp,0x1c
c0020bd0:	c3                   	ret    
c0020bd1:	90                   	nop

c0020bd2 <FAT::close(void*)>:
c0020bd2:	83 ec 1c             	sub    esp,0x1c
c0020bd5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bda:	75 07                	jne    c0020be3 <FAT::close(void*)+0x11>
c0020bdc:	b8 04 00 00 00       	mov    eax,0x4
c0020be1:	eb 36                	jmp    c0020c19 <FAT::close(void*)+0x47>
c0020be3:	83 ec 0c             	sub    esp,0xc
c0020be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bea:	e8 ba 4e fe ff       	call   c0005aa9 <f_close>
c0020bef:	83 c4 10             	add    esp,0x10
c0020bf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bfd:	e8 29 ec fe ff       	call   c000f82b <free>
c0020c02:	83 c4 10             	add    esp,0x10
c0020c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c09:	85 c0                	test   eax,eax
c0020c0b:	75 07                	jne    c0020c14 <FAT::close(void*)+0x42>
c0020c0d:	b8 00 00 00 00       	mov    eax,0x0
c0020c12:	eb 05                	jmp    c0020c19 <FAT::close(void*)+0x47>
c0020c14:	b8 01 00 00 00       	mov    eax,0x1
c0020c19:	83 c4 1c             	add    esp,0x1c
c0020c1c:	c3                   	ret    
c0020c1d:	90                   	nop

c0020c1e <FAT::closeDir(void*)>:
c0020c1e:	83 ec 1c             	sub    esp,0x1c
c0020c21:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c26:	75 07                	jne    c0020c2f <FAT::closeDir(void*)+0x11>
c0020c28:	b8 04 00 00 00       	mov    eax,0x4
c0020c2d:	eb 36                	jmp    c0020c65 <FAT::closeDir(void*)+0x47>
c0020c2f:	83 ec 0c             	sub    esp,0xc
c0020c32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c36:	e8 56 54 fe ff       	call   c0006091 <f_closedir>
c0020c3b:	83 c4 10             	add    esp,0x10
c0020c3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c42:	83 ec 0c             	sub    esp,0xc
c0020c45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c49:	e8 dd eb fe ff       	call   c000f82b <free>
c0020c4e:	83 c4 10             	add    esp,0x10
c0020c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c55:	85 c0                	test   eax,eax
c0020c57:	75 07                	jne    c0020c60 <FAT::closeDir(void*)+0x42>
c0020c59:	b8 00 00 00 00       	mov    eax,0x0
c0020c5e:	eb 05                	jmp    c0020c65 <FAT::closeDir(void*)+0x47>
c0020c60:	b8 01 00 00 00       	mov    eax,0x1
c0020c65:	83 c4 1c             	add    esp,0x1c
c0020c68:	c3                   	ret    
c0020c69:	90                   	nop

c0020c6a <FAT::seek(void*, unsigned long long)>:
c0020c6a:	83 ec 2c             	sub    esp,0x2c
c0020c6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c7d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c82:	75 07                	jne    c0020c8b <FAT::seek(void*, unsigned long long)+0x21>
c0020c84:	b8 04 00 00 00       	mov    eax,0x4
c0020c89:	eb 2f                	jmp    c0020cba <FAT::seek(void*, unsigned long long)+0x50>
c0020c8b:	83 ec 04             	sub    esp,0x4
c0020c8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c9a:	e8 39 4e fe ff       	call   c0005ad8 <f_lseek>
c0020c9f:	83 c4 10             	add    esp,0x10
c0020ca2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ca6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020caa:	85 c0                	test   eax,eax
c0020cac:	75 07                	jne    c0020cb5 <FAT::seek(void*, unsigned long long)+0x4b>
c0020cae:	b8 00 00 00 00       	mov    eax,0x0
c0020cb3:	eb 05                	jmp    c0020cba <FAT::seek(void*, unsigned long long)+0x50>
c0020cb5:	b8 01 00 00 00       	mov    eax,0x1
c0020cba:	83 c4 2c             	add    esp,0x2c
c0020cbd:	c3                   	ret    

c0020cbe <fatWrapperReadDisk>:
c0020cbe:	83 ec 1c             	sub    esp,0x1c
c0020cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cc5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdd:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020ce4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ce8:	83 ec 0c             	sub    esp,0xc
c0020ceb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cef:	52                   	push   edx
c0020cf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cf8:	50                   	push   eax
c0020cf9:	e8 e4 54 ff ff       	call   c00161e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0020cfe:	83 c4 20             	add    esp,0x20
c0020d01:	83 c4 1c             	add    esp,0x1c
c0020d04:	c3                   	ret    

c0020d05 <fatWrapperWriteDisk>:
c0020d05:	83 ec 1c             	sub    esp,0x1c
c0020d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d14:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d1f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d24:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020d2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d2f:	83 ec 0c             	sub    esp,0xc
c0020d32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d36:	52                   	push   edx
c0020d37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d3f:	50                   	push   eax
c0020d40:	e8 09 55 ff ff       	call   c001624e <LogicalDisk::write(unsigned long long, int, void*)>
c0020d45:	83 c4 20             	add    esp,0x20
c0020d48:	83 c4 1c             	add    esp,0x1c
c0020d4b:	c3                   	ret    

c0020d4c <fatWrapperIoctl>:
c0020d4c:	53                   	push   ebx
c0020d4d:	83 ec 28             	sub    esp,0x28
c0020d50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d58:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d60:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d65:	75 31                	jne    c0020d98 <fatWrapperIoctl+0x4c>
c0020d67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d74:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020d7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d81:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d8b:	66 89 02             	mov    WORD PTR [edx],ax
c0020d8e:	b8 00 00 00 00       	mov    eax,0x0
c0020d93:	e9 b2 00 00 00       	jmp    c0020e4a <fatWrapperIoctl+0xfe>
c0020d98:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d9d:	75 6a                	jne    c0020e09 <fatWrapperIoctl+0xbd>
c0020d9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020da3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020da7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dac:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020db3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020db9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020dbf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020dc5:	89 c8                	mov    eax,ecx
c0020dc7:	89 da                	mov    edx,ebx
c0020dc9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020dcd:	c1 e0 0a             	shl    eax,0xa
c0020dd0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020dd5:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0020ddc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020de2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020de8:	89 cb                	mov    ebx,ecx
c0020dea:	c1 fb 1f             	sar    ebx,0x1f
c0020ded:	53                   	push   ebx
c0020dee:	51                   	push   ecx
c0020def:	52                   	push   edx
c0020df0:	50                   	push   eax
c0020df1:	e8 ae 5e 00 00       	call   c0026ca4 <__udivdi3>
c0020df6:	83 c4 10             	add    esp,0x10
c0020df9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020dfd:	89 01                	mov    DWORD PTR [ecx],eax
c0020dff:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e02:	b8 00 00 00 00       	mov    eax,0x0
c0020e07:	eb 41                	jmp    c0020e4a <fatWrapperIoctl+0xfe>
c0020e09:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020e0e:	75 07                	jne    c0020e17 <fatWrapperIoctl+0xcb>
c0020e10:	b8 00 00 00 00       	mov    eax,0x0
c0020e15:	eb 33                	jmp    c0020e4a <fatWrapperIoctl+0xfe>
c0020e17:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020e1c:	75 19                	jne    c0020e37 <fatWrapperIoctl+0xeb>
c0020e1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e2a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020e30:	b8 00 00 00 00       	mov    eax,0x0
c0020e35:	eb 13                	jmp    c0020e4a <fatWrapperIoctl+0xfe>
c0020e37:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020e3c:	75 07                	jne    c0020e45 <fatWrapperIoctl+0xf9>
c0020e3e:	b8 00 00 00 00       	mov    eax,0x0
c0020e43:	eb 05                	jmp    c0020e4a <fatWrapperIoctl+0xfe>
c0020e45:	b8 04 00 00 00       	mov    eax,0x4
c0020e4a:	83 c4 28             	add    esp,0x28
c0020e4d:	5b                   	pop    ebx
c0020e4e:	c3                   	ret    
c0020e4f:	90                   	nop

c0020e50 <FAT::FAT()>:
c0020e50:	83 ec 1c             	sub    esp,0x1c
c0020e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e57:	83 ec 0c             	sub    esp,0xc
c0020e5a:	50                   	push   eax
c0020e5b:	e8 32 1d ff ff       	call   c0012b92 <Filesystem::Filesystem()>
c0020e60:	83 c4 10             	add    esp,0x10
c0020e63:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c0020e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e6c:	89 10                	mov    DWORD PTR [eax],edx
c0020e6e:	c7 05 c0 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac0,0x0
c0020e78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e80:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e85:	7f 15                	jg     c0020e9c <FAT::FAT()+0x4c>
c0020e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8b:	c7 04 85 e0 fa 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0520],0xffffffff
c0020e96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e9a:	eb e4                	jmp    c0020e80 <FAT::FAT()+0x30>
c0020e9c:	90                   	nop
c0020e9d:	83 c4 1c             	add    esp,0x1c
c0020ea0:	c3                   	ret    
c0020ea1:	90                   	nop

c0020ea2 <FAT::fixFilepath(char*)>:
c0020ea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ea6:	8a 00                	mov    al,BYTE PTR [eax]
c0020ea8:	3c 40                	cmp    al,0x40
c0020eaa:	7e 2c                	jle    c0020ed8 <FAT::fixFilepath(char*)+0x36>
c0020eac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eb0:	8a 00                	mov    al,BYTE PTR [eax]
c0020eb2:	83 e8 41             	sub    eax,0x41
c0020eb5:	88 c2                	mov    dl,al
c0020eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ebb:	88 10                	mov    BYTE PTR [eax],dl
c0020ebd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ec1:	8a 00                	mov    al,BYTE PTR [eax]
c0020ec3:	0f be c0             	movsx  eax,al
c0020ec6:	8b 04 85 e0 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0520]
c0020ecd:	83 c0 30             	add    eax,0x30
c0020ed0:	88 c2                	mov    dl,al
c0020ed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ed6:	88 10                	mov    BYTE PTR [eax],dl
c0020ed8:	90                   	nop
c0020ed9:	c3                   	ret    

c0020eda <FAT::open(char const*, void**, FileOpenMode)>:
c0020eda:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ee0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ee8:	74 0a                	je     c0020ef4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020eea:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ef2:	75 0a                	jne    c0020efe <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ef4:	b8 04 00 00 00       	mov    eax,0x4
c0020ef9:	e9 fd 00 00 00       	jmp    c0020ffb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020efe:	83 ec 08             	sub    esp,0x8
c0020f01:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f0c:	50                   	push   eax
c0020f0d:	e8 fa f8 fd ff       	call   c000080c <strcpy>
c0020f12:	83 c4 10             	add    esp,0x10
c0020f15:	83 ec 08             	sub    esp,0x8
c0020f18:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020f1c:	50                   	push   eax
c0020f1d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f24:	e8 79 ff ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c0020f29:	83 c4 10             	add    esp,0x10
c0020f2c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020f34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f3b:	83 e0 01             	and    eax,0x1
c0020f3e:	74 08                	je     c0020f48 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f40:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f4f:	83 e0 04             	and    eax,0x4
c0020f52:	74 10                	je     c0020f64 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f54:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f5c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f6b:	83 e0 02             	and    eax,0x2
c0020f6e:	74 08                	je     c0020f78 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f70:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f7f:	83 e0 08             	and    eax,0x8
c0020f82:	74 08                	je     c0020f8c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f84:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f93:	83 e0 10             	and    eax,0x10
c0020f96:	74 08                	je     c0020fa0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f98:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	68 50 02 00 00       	push   0x250
c0020fa8:	e8 6e e8 fe ff       	call   c000f81b <malloc>
c0020fad:	83 c4 10             	add    esp,0x10
c0020fb0:	89 c2                	mov    edx,eax
c0020fb2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fb9:	89 10                	mov    DWORD PTR [eax],edx
c0020fbb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020fc3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fcc:	83 ec 04             	sub    esp,0x4
c0020fcf:	52                   	push   edx
c0020fd0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020fd4:	52                   	push   edx
c0020fd5:	50                   	push   eax
c0020fd6:	e8 7c 3f fe ff       	call   c0004f57 <f_open>
c0020fdb:	83 c4 10             	add    esp,0x10
c0020fde:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fe5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020fed:	74 07                	je     c0020ff6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fef:	b8 01 00 00 00       	mov    eax,0x1
c0020ff4:	eb 05                	jmp    c0020ffb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ff6:	b8 00 00 00 00       	mov    eax,0x0
c0020ffb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021001:	c3                   	ret    

c0021002 <FAT::openDir(char const*, void**)>:
c0021002:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021008:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021010:	74 0a                	je     c002101c <FAT::openDir(char const*, void**)+0x1a>
c0021012:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002101a:	75 07                	jne    c0021023 <FAT::openDir(char const*, void**)+0x21>
c002101c:	b8 04 00 00 00       	mov    eax,0x4
c0021021:	eb 7d                	jmp    c00210a0 <FAT::openDir(char const*, void**)+0x9e>
c0021023:	83 ec 08             	sub    esp,0x8
c0021026:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002102d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021031:	50                   	push   eax
c0021032:	e8 d5 f7 fd ff       	call   c000080c <strcpy>
c0021037:	83 c4 10             	add    esp,0x10
c002103a:	83 ec 08             	sub    esp,0x8
c002103d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021041:	50                   	push   eax
c0021042:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021049:	e8 54 fe ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c002104e:	83 c4 10             	add    esp,0x10
c0021051:	83 ec 0c             	sub    esp,0xc
c0021054:	6a 4c                	push   0x4c
c0021056:	e8 c0 e7 fe ff       	call   c000f81b <malloc>
c002105b:	83 c4 10             	add    esp,0x10
c002105e:	89 c2                	mov    edx,eax
c0021060:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021067:	89 10                	mov    DWORD PTR [eax],edx
c0021069:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021070:	8b 00                	mov    eax,DWORD PTR [eax]
c0021072:	83 ec 08             	sub    esp,0x8
c0021075:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021079:	52                   	push   edx
c002107a:	50                   	push   eax
c002107b:	e8 0f 4f fe ff       	call   c0005f8f <f_opendir>
c0021080:	83 c4 10             	add    esp,0x10
c0021083:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002108a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021092:	74 07                	je     c002109b <FAT::openDir(char const*, void**)+0x99>
c0021094:	b8 01 00 00 00       	mov    eax,0x1
c0021099:	eb 05                	jmp    c00210a0 <FAT::openDir(char const*, void**)+0x9e>
c002109b:	b8 00 00 00 00       	mov    eax,0x0
c00210a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210a6:	c3                   	ret    
c00210a7:	90                   	nop

c00210a8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00210a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210ae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00210b6:	75 0a                	jne    c00210c2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00210b8:	b8 04 00 00 00       	mov    eax,0x4
c00210bd:	e9 c9 00 00 00       	jmp    c002118b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210c2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00210ca:	75 0a                	jne    c00210d6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00210cc:	b8 04 00 00 00       	mov    eax,0x4
c00210d1:	e9 b5 00 00 00       	jmp    c002118b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210d6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00210de:	75 0a                	jne    c00210ea <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00210e0:	b8 04 00 00 00       	mov    eax,0x4
c00210e5:	e9 a1 00 00 00       	jmp    c002118b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210ea:	83 ec 08             	sub    esp,0x8
c00210ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210f4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210fb:	50                   	push   eax
c00210fc:	e8 0b f7 fd ff       	call   c000080c <strcpy>
c0021101:	83 c4 10             	add    esp,0x10
c0021104:	83 ec 08             	sub    esp,0x8
c0021107:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002110e:	50                   	push   eax
c002110f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021116:	e8 87 fd ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	83 ec 08             	sub    esp,0x8
c0021121:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021125:	50                   	push   eax
c0021126:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002112d:	50                   	push   eax
c002112e:	e8 1b 50 fe ff       	call   c000614e <f_stat>
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002113d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021144:	85 c0                	test   eax,eax
c0021146:	74 07                	je     c002114f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021148:	83 f8 04             	cmp    eax,0x4
c002114b:	74 32                	je     c002117f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002114d:	eb 37                	jmp    c0021186 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002114f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021153:	0f b6 c0             	movzx  eax,al
c0021156:	83 e0 10             	and    eax,0x10
c0021159:	0f 95 c2             	setne  dl
c002115c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021163:	88 10                	mov    BYTE PTR [eax],dl
c0021165:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021168:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002116c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021173:	89 01                	mov    DWORD PTR [ecx],eax
c0021175:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021178:	b8 00 00 00 00       	mov    eax,0x0
c002117d:	eb 0c                	jmp    c002118b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002117f:	b8 02 00 00 00       	mov    eax,0x2
c0021184:	eb 05                	jmp    c002118b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021186:	b8 01 00 00 00       	mov    eax,0x1
c002118b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021191:	c3                   	ret    

c0021192 <FAT::unlink(char const*)>:
c0021192:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021198:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211a0:	75 07                	jne    c00211a9 <FAT::unlink(char const*)+0x17>
c00211a2:	b8 04 00 00 00       	mov    eax,0x4
c00211a7:	eb 5c                	jmp    c0021205 <FAT::unlink(char const*)+0x73>
c00211a9:	83 ec 08             	sub    esp,0x8
c00211ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211b7:	50                   	push   eax
c00211b8:	e8 4f f6 fd ff       	call   c000080c <strcpy>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	83 ec 08             	sub    esp,0x8
c00211c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211c7:	50                   	push   eax
c00211c8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211cf:	e8 ce fc ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c00211d4:	83 c4 10             	add    esp,0x10
c00211d7:	83 ec 0c             	sub    esp,0xc
c00211da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211de:	50                   	push   eax
c00211df:	e8 bc 52 fe ff       	call   c00064a0 <f_unlink>
c00211e4:	83 c4 10             	add    esp,0x10
c00211e7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ee:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211f5:	85 c0                	test   eax,eax
c00211f7:	75 07                	jne    c0021200 <FAT::unlink(char const*)+0x6e>
c00211f9:	b8 00 00 00 00       	mov    eax,0x0
c00211fe:	eb 05                	jmp    c0021205 <FAT::unlink(char const*)+0x73>
c0021200:	b8 01 00 00 00       	mov    eax,0x1
c0021205:	81 c4 1c 01 00 00    	add    esp,0x11c
c002120b:	c3                   	ret    

c002120c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002120c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021212:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021219:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021220:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021224:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021228:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021230:	75 0a                	jne    c002123c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021232:	b8 04 00 00 00       	mov    eax,0x4
c0021237:	e9 1c 01 00 00       	jmp    c0021358 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002123c:	83 ec 08             	sub    esp,0x8
c002123f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021246:	8d 44 24 24          	lea    eax,[esp+0x24]
c002124a:	50                   	push   eax
c002124b:	e8 bc f5 fd ff       	call   c000080c <strcpy>
c0021250:	83 c4 10             	add    esp,0x10
c0021253:	83 ec 08             	sub    esp,0x8
c0021256:	8d 44 24 20          	lea    eax,[esp+0x20]
c002125a:	50                   	push   eax
c002125b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021262:	e8 3b fc ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021272:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002127a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002127f:	83 e0 01             	and    eax,0x1
c0021282:	74 08                	je     c002128c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021284:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002128c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021291:	83 e0 02             	and    eax,0x2
c0021294:	74 08                	je     c002129e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021296:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002129e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212a3:	83 e0 04             	and    eax,0x4
c00212a6:	74 08                	je     c00212b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00212a8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00212b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212b5:	83 e0 08             	and    eax,0x8
c00212b8:	74 08                	je     c00212c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00212ba:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00212c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212c7:	83 e0 01             	and    eax,0x1
c00212ca:	74 08                	je     c00212d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00212cc:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00212d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212d9:	83 e0 02             	and    eax,0x2
c00212dc:	74 08                	je     c00212e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00212de:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212eb:	83 e0 04             	and    eax,0x4
c00212ee:	74 08                	je     c00212f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212f0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212fd:	83 e0 08             	and    eax,0x8
c0021300:	74 08                	je     c002130a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021302:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002130a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021311:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021318:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021320:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021328:	83 ec 04             	sub    esp,0x4
c002132b:	52                   	push   edx
c002132c:	50                   	push   eax
c002132d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021331:	50                   	push   eax
c0021332:	e8 0b 58 fe ff       	call   c0006b42 <f_chmod>
c0021337:	83 c4 10             	add    esp,0x10
c002133a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021341:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021348:	85 c0                	test   eax,eax
c002134a:	75 07                	jne    c0021353 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002134c:	b8 00 00 00 00       	mov    eax,0x0
c0021351:	eb 05                	jmp    c0021358 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021353:	b8 01 00 00 00       	mov    eax,0x1
c0021358:	81 c4 2c 01 00 00    	add    esp,0x12c
c002135e:	c3                   	ret    
c002135f:	90                   	nop

c0021360 <FAT::rename(char const*, char const*)>:
c0021360:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021366:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002136e:	74 0a                	je     c002137a <FAT::rename(char const*, char const*)+0x1a>
c0021370:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021378:	75 0a                	jne    c0021384 <FAT::rename(char const*, char const*)+0x24>
c002137a:	b8 04 00 00 00       	mov    eax,0x4
c002137f:	e9 98 00 00 00       	jmp    c002141c <FAT::rename(char const*, char const*)+0xbc>
c0021384:	83 ec 08             	sub    esp,0x8
c0021387:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002138e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021395:	50                   	push   eax
c0021396:	e8 71 f4 fd ff       	call   c000080c <strcpy>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	83 ec 08             	sub    esp,0x8
c00213a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00213a8:	50                   	push   eax
c00213a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213b0:	e8 ed fa ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c00213b5:	83 c4 10             	add    esp,0x10
c00213b8:	83 ec 08             	sub    esp,0x8
c00213bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00213c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213c6:	50                   	push   eax
c00213c7:	e8 40 f4 fd ff       	call   c000080c <strcpy>
c00213cc:	83 c4 10             	add    esp,0x10
c00213cf:	83 ec 08             	sub    esp,0x8
c00213d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213d6:	50                   	push   eax
c00213d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213de:	e8 bf fa ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c00213e3:	83 c4 10             	add    esp,0x10
c00213e6:	83 ec 08             	sub    esp,0x8
c00213e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ed:	50                   	push   eax
c00213ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213f5:	50                   	push   eax
c00213f6:	e8 54 54 fe ff       	call   c000684f <f_rename>
c00213fb:	83 c4 10             	add    esp,0x10
c00213fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021405:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002140c:	85 c0                	test   eax,eax
c002140e:	75 07                	jne    c0021417 <FAT::rename(char const*, char const*)+0xb7>
c0021410:	b8 00 00 00 00       	mov    eax,0x0
c0021415:	eb 05                	jmp    c002141c <FAT::rename(char const*, char const*)+0xbc>
c0021417:	b8 01 00 00 00       	mov    eax,0x1
c002141c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021422:	c3                   	ret    
c0021423:	90                   	nop

c0021424 <FAT::mkdir(char const*)>:
c0021424:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002142a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021432:	75 07                	jne    c002143b <FAT::mkdir(char const*)+0x17>
c0021434:	b8 04 00 00 00       	mov    eax,0x4
c0021439:	eb 5c                	jmp    c0021497 <FAT::mkdir(char const*)+0x73>
c002143b:	83 ec 08             	sub    esp,0x8
c002143e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021445:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021449:	50                   	push   eax
c002144a:	e8 bd f3 fd ff       	call   c000080c <strcpy>
c002144f:	83 c4 10             	add    esp,0x10
c0021452:	83 ec 08             	sub    esp,0x8
c0021455:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021459:	50                   	push   eax
c002145a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021461:	e8 3c fa ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c0021466:	83 c4 10             	add    esp,0x10
c0021469:	83 ec 0c             	sub    esp,0xc
c002146c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021470:	50                   	push   eax
c0021471:	e8 ad 51 fe ff       	call   c0006623 <f_mkdir>
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021480:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021487:	85 c0                	test   eax,eax
c0021489:	75 07                	jne    c0021492 <FAT::mkdir(char const*)+0x6e>
c002148b:	b8 00 00 00 00       	mov    eax,0x0
c0021490:	eb 05                	jmp    c0021497 <FAT::mkdir(char const*)+0x73>
c0021492:	b8 01 00 00 00       	mov    eax,0x1
c0021497:	81 c4 1c 01 00 00    	add    esp,0x11c
c002149d:	c3                   	ret    

c002149e <FAT::exists(char const*)>:
c002149e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00214a4:	83 ec 08             	sub    esp,0x8
c00214a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214b2:	50                   	push   eax
c00214b3:	e8 54 f3 fd ff       	call   c000080c <strcpy>
c00214b8:	83 c4 10             	add    esp,0x10
c00214bb:	83 ec 08             	sub    esp,0x8
c00214be:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214c2:	50                   	push   eax
c00214c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214ca:	e8 d3 f9 ff ff       	call   c0020ea2 <FAT::fixFilepath(char*)>
c00214cf:	83 c4 10             	add    esp,0x10
c00214d2:	83 ec 08             	sub    esp,0x8
c00214d5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00214dc:	50                   	push   eax
c00214dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214e1:	50                   	push   eax
c00214e2:	e8 67 4c fe ff       	call   c000614e <f_stat>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214f1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214f8:	85 c0                	test   eax,eax
c00214fa:	75 04                	jne    c0021500 <FAT::exists(char const*)+0x62>
c00214fc:	b0 01                	mov    al,0x1
c00214fe:	eb 02                	jmp    c0021502 <FAT::exists(char const*)+0x64>
c0021500:	b0 00                	mov    al,0x0
c0021502:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021508:	c3                   	ret    
c0021509:	90                   	nop

c002150a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002150a:	b8 08 00 00 00       	mov    eax,0x8
c002150f:	c3                   	ret    

c0021510 <ISO9660::seek(void*, unsigned long long)>:
c0021510:	53                   	push   ebx
c0021511:	b8 04 00 00 00       	mov    eax,0x4
c0021516:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002151a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002151e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021522:	85 d2                	test   edx,edx
c0021524:	74 17                	je     c002153d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021526:	89 c8                	mov    eax,ecx
c0021528:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002152b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002152e:	b8 01 00 00 00       	mov    eax,0x1
c0021533:	73 08                	jae    c002153d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021535:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021538:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002153b:	31 c0                	xor    eax,eax
c002153d:	5b                   	pop    ebx
c002153e:	c3                   	ret    
c002153f:	90                   	nop

c0021540 <ISO9660::tell(void*, unsigned long long*)>:
c0021540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021548:	85 d2                	test   edx,edx
c002154a:	74 12                	je     c002155e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002154c:	85 c0                	test   eax,eax
c002154e:	74 0e                	je     c002155e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021550:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021553:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021556:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021559:	89 10                	mov    DWORD PTR [eax],edx
c002155b:	31 c0                	xor    eax,eax
c002155d:	c3                   	ret    
c002155e:	b8 04 00 00 00       	mov    eax,0x4
c0021563:	c3                   	ret    

c0021564 <ISO9660::getName()>:
c0021564:	b8 dc c9 02 c0       	mov    eax,0xc002c9dc
c0021569:	c3                   	ret    

c002156a <ISO9660::stat(void*, unsigned long long*)>:
c002156a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002156e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021572:	85 d2                	test   edx,edx
c0021574:	74 12                	je     c0021588 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021576:	85 c0                	test   eax,eax
c0021578:	74 0e                	je     c0021588 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002157a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002157d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021580:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021583:	89 10                	mov    DWORD PTR [eax],edx
c0021585:	31 c0                	xor    eax,eax
c0021587:	c3                   	ret    
c0021588:	b8 04 00 00 00       	mov    eax,0x4
c002158d:	c3                   	ret    

c002158e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002158e:	b8 01 00 00 00       	mov    eax,0x1
c0021593:	c3                   	ret    

c0021594 <ISO9660::unlink(char const*)>:
c0021594:	b8 01 00 00 00       	mov    eax,0x1
c0021599:	c3                   	ret    

c002159a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002159a:	b8 01 00 00 00       	mov    eax,0x1
c002159f:	c3                   	ret    

c00215a0 <ISO9660::rename(char const*, char const*)>:
c00215a0:	b8 01 00 00 00       	mov    eax,0x1
c00215a5:	c3                   	ret    

c00215a6 <ISO9660::mkdir(char const*)>:
c00215a6:	b8 01 00 00 00       	mov    eax,0x1
c00215ab:	c3                   	ret    

c00215ac <ISO9660::close(void*)>:
c00215ac:	83 ec 0c             	sub    esp,0xc
c00215af:	b8 04 00 00 00       	mov    eax,0x4
c00215b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215b8:	85 d2                	test   edx,edx
c00215ba:	74 0e                	je     c00215ca <ISO9660::close(void*)+0x1e>
c00215bc:	83 ec 0c             	sub    esp,0xc
c00215bf:	52                   	push   edx
c00215c0:	e8 66 e2 fe ff       	call   c000f82b <free>
c00215c5:	83 c4 10             	add    esp,0x10
c00215c8:	31 c0                	xor    eax,eax
c00215ca:	83 c4 0c             	add    esp,0xc
c00215cd:	c3                   	ret    

c00215ce <ISO9660::closeDir(void*)>:
c00215ce:	83 ec 0c             	sub    esp,0xc
c00215d1:	b8 04 00 00 00       	mov    eax,0x4
c00215d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215da:	85 d2                	test   edx,edx
c00215dc:	74 0e                	je     c00215ec <ISO9660::closeDir(void*)+0x1e>
c00215de:	83 ec 0c             	sub    esp,0xc
c00215e1:	52                   	push   edx
c00215e2:	e8 44 e2 fe ff       	call   c000f82b <free>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	31 c0                	xor    eax,eax
c00215ec:	83 c4 0c             	add    esp,0xc
c00215ef:	c3                   	ret    

c00215f0 <ISO9660::~ISO9660()>:
c00215f0:	83 ec 0c             	sub    esp,0xc
c00215f3:	ba 00 ca 02 c0       	mov    edx,0xc002ca00
c00215f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fc:	89 10                	mov    DWORD PTR [eax],edx
c00215fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021602:	83 ec 0c             	sub    esp,0xc
c0021605:	50                   	push   eax
c0021606:	e8 ab 15 ff ff       	call   c0012bb6 <Filesystem::~Filesystem()>
c002160b:	83 c4 10             	add    esp,0x10
c002160e:	90                   	nop
c002160f:	83 c4 0c             	add    esp,0xc
c0021612:	c3                   	ret    
c0021613:	90                   	nop

c0021614 <ISO9660::~ISO9660()>:
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	83 ec 0c             	sub    esp,0xc
c002161a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002161e:	e8 cd ff ff ff       	call   c00215f0 <ISO9660::~ISO9660()>
c0021623:	83 c4 10             	add    esp,0x10
c0021626:	83 ec 08             	sub    esp,0x8
c0021629:	6a 08                	push   0x8
c002162b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002162f:	e8 67 11 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0021634:	83 c4 10             	add    esp,0x10
c0021637:	83 c4 0c             	add    esp,0xc
c002163a:	c3                   	ret    

c002163b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002163b:	55                   	push   ebp
c002163c:	31 c9                	xor    ecx,ecx
c002163e:	57                   	push   edi
c002163f:	56                   	push   esi
c0021640:	53                   	push   ebx
c0021641:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021645:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021649:	89 eb                	mov    ebx,ebp
c002164b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002164f:	39 ce                	cmp    esi,ecx
c0021651:	7e 17                	jle    c002166a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021653:	31 d2                	xor    edx,edx
c0021655:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021659:	7d 13                	jge    c002166e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002165b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002165f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021662:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021665:	75 0d                	jne    c0021674 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021667:	42                   	inc    edx
c0021668:	eb eb                	jmp    c0021655 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002166a:	31 c0                	xor    eax,eax
c002166c:	eb 0a                	jmp    c0021678 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002166e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021672:	eb 04                	jmp    c0021678 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021674:	41                   	inc    ecx
c0021675:	43                   	inc    ebx
c0021676:	eb d7                	jmp    c002164f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021678:	5b                   	pop    ebx
c0021679:	5e                   	pop    esi
c002167a:	5f                   	pop    edi
c002167b:	5d                   	pop    ebp
c002167c:	c3                   	ret    

c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002167d:	57                   	push   edi
c002167e:	56                   	push   esi
c002167f:	53                   	push   ebx
c0021680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021688:	39 0d c0 fb 02 c0    	cmp    DWORD PTR ds:0xc002fbc0,ecx
c002168e:	75 08                	jne    c0021698 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021690:	38 05 54 da 02 c0    	cmp    BYTE PTR ds:0xc002da54,al
c0021696:	74 2b                	je     c00216c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	a2 54 da 02 c0       	mov    ds:0xc002da54,al
c00216a0:	68 e0 fb 02 c0       	push   0xc002fbe0
c00216a5:	0f be c0             	movsx  eax,al
c00216a8:	6a 01                	push   0x1
c00216aa:	89 0d c0 fb 02 c0    	mov    DWORD PTR ds:0xc002fbc0,ecx
c00216b0:	31 db                	xor    ebx,ebx
c00216b2:	53                   	push   ebx
c00216b3:	51                   	push   ecx
c00216b4:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c00216bb:	e8 22 4b ff ff       	call   c00161e2 <LogicalDisk::read(unsigned long long, int, void*)>
c00216c0:	83 c4 20             	add    esp,0x20
c00216c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00216c7:	be e0 fb 02 c0       	mov    esi,0xc002fbe0
c00216cc:	b9 00 08 00 00       	mov    ecx,0x800
c00216d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216d3:	5b                   	pop    ebx
c00216d4:	5e                   	pop    esi
c00216d5:	5f                   	pop    edi
c00216d6:	c3                   	ret    
c00216d7:	90                   	nop

c00216d8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00216d8:	81 ec 10 08 00 00    	sub    esp,0x810
c00216de:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216e5:	83 c0 41             	add    eax,0x41
c00216e8:	0f be c0             	movsx  eax,al
c00216eb:	50                   	push   eax
c00216ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216f0:	50                   	push   eax
c00216f1:	6a 10                	push   0x10
c00216f3:	e8 85 ff ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216f8:	83 c4 10             	add    esp,0x10
c00216fb:	31 c0                	xor    eax,eax
c00216fd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021702:	75 1d                	jne    c0021721 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021704:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021709:	75 16                	jne    c0021721 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002170b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021710:	75 0f                	jne    c0021721 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021712:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021717:	75 08                	jne    c0021721 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021719:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002171e:	0f 94 c0             	sete   al
c0021721:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021727:	c3                   	ret    

c0021728 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021728:	55                   	push   ebp
c0021729:	57                   	push   edi
c002172a:	56                   	push   esi
c002172b:	53                   	push   ebx
c002172c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021732:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021739:	85 ed                	test   ebp,ebp
c002173b:	0f 84 da 01 00 00    	je     c002191b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021741:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021749:	0f 84 cc 01 00 00    	je     c002191b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002174f:	b8 01 00 00 00       	mov    eax,0x1
c0021754:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021758:	0f 85 c2 01 00 00    	jne    c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002175e:	31 d2                	xor    edx,edx
c0021760:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021767:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002176a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002176d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021770:	89 04 24             	mov    DWORD PTR [esp],eax
c0021773:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021777:	01 c8                	add    eax,ecx
c0021779:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002177c:	11 da                	adc    edx,ebx
c002177e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021782:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021786:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002178a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002178e:	19 d7                	sbb    edi,edx
c0021790:	72 11                	jb     c00217a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021792:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021795:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021799:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002179d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00217a1:	eb 0c                	jmp    c00217af <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00217a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00217a7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00217ab:	29 ce                	sub    esi,ecx
c00217ad:	19 df                	sbb    edi,ebx
c00217af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00217b2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00217b5:	0f a4 c2 0b          	shld   edx,eax,0xb
c00217b9:	c1 e0 0b             	shl    eax,0xb
c00217bc:	01 c8                	add    eax,ecx
c00217be:	11 da                	adc    edx,ebx
c00217c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00217c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00217c7:	51                   	push   ecx
c00217c8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00217cc:	50                   	push   eax
c00217cd:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00217d1:	53                   	push   ebx
c00217d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00217d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217da:	0f ac d0 0b          	shrd   eax,edx,0xb
c00217de:	50                   	push   eax
c00217df:	e8 99 fe ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217e4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217e7:	b8 00 08 00 00       	mov    eax,0x800
c00217ec:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217f2:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00217f6:	29 d0                	sub    eax,edx
c00217f8:	83 c4 10             	add    esp,0x10
c00217fb:	89 f9                	mov    ecx,edi
c00217fd:	39 c6                	cmp    esi,eax
c00217ff:	83 d9 00             	sbb    ecx,0x0
c0021802:	7d 1b                	jge    c002181f <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021804:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021809:	75 12                	jne    c002181d <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002180b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021812:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021818:	e9 fa 00 00 00       	jmp    c0021917 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002181d:	89 f0                	mov    eax,esi
c002181f:	01 d3                	add    ebx,edx
c0021821:	31 d2                	xor    edx,edx
c0021823:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021827:	39 c2                	cmp    edx,eax
c0021829:	7d 14                	jge    c002183f <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002182b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021832:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021836:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021839:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002183c:	42                   	inc    edx
c002183d:	eb e8                	jmp    c0021827 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002183f:	89 c2                	mov    edx,eax
c0021841:	85 c0                	test   eax,eax
c0021843:	79 02                	jns    c0021847 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021845:	31 d2                	xor    edx,edx
c0021847:	01 c2                	add    edx,eax
c0021849:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002184c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021853:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021857:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002185b:	99                   	cdq    
c002185c:	01 c1                	add    ecx,eax
c002185e:	11 d3                	adc    ebx,edx
c0021860:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021864:	29 c6                	sub    esi,eax
c0021866:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002186a:	19 d7                	sbb    edi,edx
c002186c:	89 34 24             	mov    DWORD PTR [esp],esi
c002186f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021873:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021878:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002187b:	b8 00 00 00 00       	mov    eax,0x0
c0021880:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021884:	7d 43                	jge    c00218c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021886:	52                   	push   edx
c0021887:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002188b:	50                   	push   eax
c002188c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021894:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021898:	0f ac d0 0b          	shrd   eax,edx,0xb
c002189c:	50                   	push   eax
c002189d:	e8 db fd ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218a2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00218aa:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00218af:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00218b7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00218bf:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00218c4:	83 c4 10             	add    esp,0x10
c00218c7:	eb aa                	jmp    c0021873 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00218c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00218d0:	74 2a                	je     c00218fc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00218d2:	50                   	push   eax
c00218d3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218d7:	50                   	push   eax
c00218d8:	8d 74 24 28          	lea    esi,[esp+0x28]
c00218dc:	56                   	push   esi
c00218dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00218e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00218e5:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00218e9:	51                   	push   ecx
c00218ea:	e8 8e fd ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00218f9:	83 c4 10             	add    esp,0x10
c00218fc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021903:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021907:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002190b:	89 18                	mov    DWORD PTR [eax],ebx
c002190d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021911:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021914:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021917:	31 c0                	xor    eax,eax
c0021919:	eb 05                	jmp    c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002191b:	b8 04 00 00 00       	mov    eax,0x4
c0021920:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021926:	5b                   	pop    ebx
c0021927:	5e                   	pop    esi
c0021928:	5f                   	pop    edi
c0021929:	5d                   	pop    ebp
c002192a:	c3                   	ret    
c002192b:	90                   	nop

c002192c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002192c:	55                   	push   ebp
c002192d:	57                   	push   edi
c002192e:	56                   	push   esi
c002192f:	53                   	push   ebx
c0021930:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021936:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002193d:	85 ed                	test   ebp,ebp
c002193f:	0f 84 51 02 00 00    	je     c0021b96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021945:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002194d:	0f 84 43 02 00 00    	je     c0021b96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021953:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021956:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021959:	75 0a                	jne    c0021965 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002195b:	b8 07 00 00 00       	mov    eax,0x7
c0021960:	e9 36 02 00 00       	jmp    c0021b9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021965:	50                   	push   eax
c0021966:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002196a:	50                   	push   eax
c002196b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021972:	53                   	push   ebx
c0021973:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021976:	c1 e0 0b             	shl    eax,0xb
c0021979:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002197c:	c1 e8 0b             	shr    eax,0xb
c002197f:	50                   	push   eax
c0021980:	e8 f8 fc ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021985:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021988:	83 c4 10             	add    esp,0x10
c002198b:	89 c1                	mov    ecx,eax
c002198d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021990:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021996:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021999:	84 db                	test   bl,bl
c002199b:	0f 85 8b 00 00 00    	jne    c0021a2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00219a1:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00219a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00219aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00219b0:	29 c6                	sub    esi,eax
c00219b2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00219b6:	89 f3                	mov    ebx,esi
c00219b8:	89 f1                	mov    ecx,esi
c00219ba:	c1 fb 1f             	sar    ebx,0x1f
c00219bd:	01 f0                	add    eax,esi
c00219bf:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00219c2:	11 da                	adc    edx,ebx
c00219c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00219c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219d1:	89 d8                	mov    eax,ebx
c00219d3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00219d7:	ba 00 00 00 00       	mov    edx,0x0
c00219dc:	19 f8                	sbb    eax,edi
c00219de:	b8 00 00 00 00       	mov    eax,0x0
c00219e3:	73 08                	jae    c00219ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00219e5:	89 f0                	mov    eax,esi
c00219e7:	89 fa                	mov    edx,edi
c00219e9:	29 c8                	sub    eax,ecx
c00219eb:	19 da                	sbb    edx,ebx
c00219ed:	89 d7                	mov    edi,edx
c00219ef:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00219f2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00219f5:	09 c7                	or     edi,eax
c00219f7:	0f 84 5e ff ff ff    	je     c002195b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219fd:	57                   	push   edi
c00219fe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a02:	50                   	push   eax
c0021a03:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a0a:	53                   	push   ebx
c0021a0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a0e:	c1 e0 0b             	shl    eax,0xb
c0021a11:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021a15:	c1 e8 0b             	shr    eax,0xb
c0021a18:	50                   	push   eax
c0021a19:	e8 5f fc ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a1e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	25 ff 07 00 00       	and    eax,0x7ff
c0021a29:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021a2c:	31 ff                	xor    edi,edi
c0021a2e:	56                   	push   esi
c0021a2f:	6a 28                	push   0x28
c0021a31:	6a 00                	push   0x0
c0021a33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a37:	50                   	push   eax
c0021a38:	e8 13 ed fd ff       	call   c0000750 <memset>
c0021a3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a40:	25 ff 07 00 00       	and    eax,0x7ff
c0021a45:	89 c6                	mov    esi,eax
c0021a47:	83 c6 21             	add    esi,0x21
c0021a4a:	83 d7 00             	adc    edi,0x0
c0021a4d:	83 c4 10             	add    esp,0x10
c0021a50:	31 c9                	xor    ecx,ecx
c0021a52:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021a59:	83 f9 28             	cmp    ecx,0x28
c0021a5c:	88 04 24             	mov    BYTE PTR [esp],al
c0021a5f:	0f 94 c2             	sete   dl
c0021a62:	88 d0                	mov    al,dl
c0021a64:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a69:	39 f2                	cmp    edx,esi
c0021a6b:	ba 00 00 00 00       	mov    edx,0x0
c0021a70:	19 fa                	sbb    edx,edi
c0021a72:	0f 92 c2             	setb   dl
c0021a75:	09 c2                	or     edx,eax
c0021a77:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a7b:	0f 94 c0             	sete   al
c0021a7e:	08 d0                	or     al,dl
c0021a80:	75 16                	jne    c0021a98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021a82:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a86:	74 10                	je     c0021a98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021a88:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a8b:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a8f:	41                   	inc    ecx
c0021a90:	83 c6 01             	add    esi,0x1
c0021a93:	83 d7 00             	adc    edi,0x0
c0021a96:	eb ba                	jmp    c0021a52 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021a98:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021aa6:	56                   	push   esi
c0021aa7:	e8 c0 ec fd ff       	call   c000076c <strlen>
c0021aac:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021ab3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ab7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021abf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ac2:	5a                   	pop    edx
c0021ac3:	25 ff 07 00 00       	and    eax,0x7ff
c0021ac8:	59                   	pop    ecx
c0021ac9:	01 f8                	add    eax,edi
c0021acb:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ad1:	83 e0 02             	and    eax,0x2
c0021ad4:	3c 01                	cmp    al,0x1
c0021ad6:	19 c0                	sbb    eax,eax
c0021ad8:	83 c0 02             	add    eax,0x2
c0021adb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021adf:	56                   	push   esi
c0021ae0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ae4:	50                   	push   eax
c0021ae5:	e8 22 ed fd ff       	call   c000080c <strcpy>
c0021aea:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021aee:	83 c4 10             	add    esp,0x10
c0021af1:	84 c0                	test   al,al
c0021af3:	75 21                	jne    c0021b16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021af5:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021afd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b05:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b0d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021b14:	eb 28                	jmp    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021b16:	fe c8                	dec    al
c0021b18:	75 24                	jne    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021b1a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021b22:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b2a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b32:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b39:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b3e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021b42:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021b49:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021b52:	0f b6 f3             	movzx  esi,bl
c0021b55:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021b5c:	31 db                	xor    ebx,ebx
c0021b5e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b64:	89 df                	mov    edi,ebx
c0021b66:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b6c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021b6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b72:	39 c6                	cmp    esi,eax
c0021b74:	19 d7                	sbb    edi,edx
c0021b76:	72 10                	jb     c0021b88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021b78:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021b7f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021b86:	eb 0a                	jmp    c0021b92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021b88:	29 f0                	sub    eax,esi
c0021b8a:	19 da                	sbb    edx,ebx
c0021b8c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b8f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b92:	31 c0                	xor    eax,eax
c0021b94:	eb 05                	jmp    c0021b9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b96:	b8 04 00 00 00       	mov    eax,0x4
c0021b9b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ba1:	5b                   	pop    ebx
c0021ba2:	5e                   	pop    esi
c0021ba3:	5f                   	pop    edi
c0021ba4:	5d                   	pop    ebp
c0021ba5:	c3                   	ret    

c0021ba6 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ba6:	57                   	push   edi
c0021ba7:	56                   	push   esi
c0021ba8:	81 ec 38 08 00 00    	sub    esp,0x838
c0021bae:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021bb6:	50                   	push   eax
c0021bb7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021bbb:	50                   	push   eax
c0021bbc:	6a 10                	push   0x10
c0021bbe:	e8 ba fa ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bc3:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021bca:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021bce:	b9 22 00 00 00       	mov    ecx,0x22
c0021bd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021bd5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021be0:	89 10                	mov    DWORD PTR [eax],edx
c0021be2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021be9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bed:	89 10                	mov    DWORD PTR [eax],edx
c0021bef:	81 c4 44 08 00 00    	add    esp,0x844
c0021bf5:	b0 01                	mov    al,0x1
c0021bf7:	5e                   	pop    esi
c0021bf8:	5f                   	pop    edi
c0021bf9:	c3                   	ret    

c0021bfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bfa:	55                   	push   ebp
c0021bfb:	57                   	push   edi
c0021bfc:	56                   	push   esi
c0021bfd:	53                   	push   ebx
c0021bfe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c04:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021c0b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021c12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c16:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021c1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021c1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c22:	75 03                	jne    c0021c27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c24:	83 c3 02             	add    ebx,0x2
c0021c27:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c2a:	75 03                	jne    c0021c2f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c2c:	43                   	inc    ebx
c0021c2d:	eb f8                	jmp    c0021c27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c2f:	51                   	push   ecx
c0021c30:	68 00 01 00 00       	push   0x100
c0021c35:	6a 00                	push   0x0
c0021c37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c3b:	50                   	push   eax
c0021c3c:	e8 0f eb fd ff       	call   c0000750 <memset>
c0021c41:	83 c4 10             	add    esp,0x10
c0021c44:	31 d2                	xor    edx,edx
c0021c46:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c49:	84 c0                	test   al,al
c0021c4b:	74 21                	je     c0021c6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c4d:	3c 2f                	cmp    al,0x2f
c0021c4f:	75 0b                	jne    c0021c5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c51:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c55:	bd 01 00 00 00       	mov    ebp,0x1
c0021c5a:	eb 14                	jmp    c0021c70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c5c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c5f:	80 f9 19             	cmp    cl,0x19
c0021c62:	77 03                	ja     c0021c67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c64:	83 e8 20             	sub    eax,0x20
c0021c67:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c6b:	42                   	inc    edx
c0021c6c:	eb d8                	jmp    c0021c46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c6e:	31 ed                	xor    ebp,ebp
c0021c70:	83 ec 0c             	sub    esp,0xc
c0021c73:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c7a:	e8 9c db fe ff       	call   c000f81b <malloc>
c0021c7f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c86:	89 c6                	mov    esi,eax
c0021c88:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c8e:	c1 ef 0b             	shr    edi,0xb
c0021c91:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c98:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c9c:	83 c4 10             	add    esp,0x10
c0021c9f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ca4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ca8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021caf:	74 28                	je     c0021cd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021cb1:	52                   	push   edx
c0021cb2:	57                   	push   edi
c0021cb3:	50                   	push   eax
c0021cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021cbf:	e8 b9 f9 ff ff       	call   c002167d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cc8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ccf:	05 00 08 00 00       	add    eax,0x800
c0021cd4:	83 c4 10             	add    esp,0x10
c0021cd7:	eb cb                	jmp    c0021ca4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cd9:	83 ec 0c             	sub    esp,0xc
c0021cdc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ce0:	57                   	push   edi
c0021ce1:	e8 86 ea fd ff       	call   c000076c <strlen>
c0021ce6:	50                   	push   eax
c0021ce7:	57                   	push   edi
c0021ce8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021cef:	56                   	push   esi
c0021cf0:	e8 46 f9 ff ff       	call   c002163b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021cf5:	83 c4 20             	add    esp,0x20
c0021cf8:	85 c0                	test   eax,eax
c0021cfa:	75 13                	jne    c0021d0f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021cfc:	83 ec 0c             	sub    esp,0xc
c0021cff:	56                   	push   esi
c0021d00:	e8 26 db fe ff       	call   c000f82b <free>
c0021d05:	83 c4 10             	add    esp,0x10
c0021d08:	31 c0                	xor    eax,eax
c0021d0a:	e9 b3 00 00 00       	jmp    c0021dc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d0f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021d13:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021d17:	c1 e7 08             	shl    edi,0x8
c0021d1a:	c1 e2 10             	shl    edx,0x10
c0021d1d:	09 d7                	or     edi,edx
c0021d1f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d23:	09 d7                	or     edi,edx
c0021d25:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d29:	c1 e2 18             	shl    edx,0x18
c0021d2c:	09 d7                	or     edi,edx
c0021d2e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d32:	89 d1                	mov    ecx,edx
c0021d34:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d38:	c1 e1 08             	shl    ecx,0x8
c0021d3b:	c1 e2 10             	shl    edx,0x10
c0021d3e:	09 ca                	or     edx,ecx
c0021d40:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d44:	09 ca                	or     edx,ecx
c0021d46:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d4a:	c1 e1 18             	shl    ecx,0x18
c0021d4d:	09 ca                	or     edx,ecx
c0021d4f:	89 e9                	mov    ecx,ebp
c0021d51:	84 c9                	test   cl,cl
c0021d53:	74 3c                	je     c0021d91 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d59:	83 ec 0c             	sub    esp,0xc
c0021d5c:	56                   	push   esi
c0021d5d:	e8 c9 da fe ff       	call   c000f82b <free>
c0021d62:	83 c4 0c             	add    esp,0xc
c0021d65:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d6c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d71:	50                   	push   eax
c0021d72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d79:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d84:	52                   	push   edx
c0021d85:	57                   	push   edi
c0021d86:	53                   	push   ebx
c0021d87:	e8 6e fe ff ff       	call   c0021bfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d8c:	83 c4 20             	add    esp,0x20
c0021d8f:	eb 31                	jmp    c0021dc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d91:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d94:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d9b:	d0 e8                	shr    al,1
c0021d9d:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d9f:	83 e0 01             	and    eax,0x1
c0021da2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021da9:	83 ec 0c             	sub    esp,0xc
c0021dac:	89 13                	mov    DWORD PTR [ebx],edx
c0021dae:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021db5:	89 03                	mov    DWORD PTR [ebx],eax
c0021db7:	56                   	push   esi
c0021db8:	e8 6e da fe ff       	call   c000f82b <free>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	b0 01                	mov    al,0x1
c0021dc2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021dc8:	5b                   	pop    ebx
c0021dc9:	5e                   	pop    esi
c0021dca:	5f                   	pop    edi
c0021dcb:	5d                   	pop    ebp
c0021dcc:	c3                   	ret    

c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021dcd:	55                   	push   ebp
c0021dce:	57                   	push   edi
c0021dcf:	56                   	push   esi
c0021dd0:	53                   	push   ebx
c0021dd1:	83 ec 20             	sub    esp,0x20
c0021dd4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021dd8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ddc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021de0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021de8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021df0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021df5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021dfb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021e01:	57                   	push   edi
c0021e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e06:	50                   	push   eax
c0021e07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e0b:	50                   	push   eax
c0021e0c:	e8 95 fd ff ff       	call   c0021ba6 <readRoot(unsigned int*, unsigned int*, char)>
c0021e11:	5a                   	pop    edx
c0021e12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e16:	e8 51 e9 fd ff       	call   c000076c <strlen>
c0021e1b:	83 c4 10             	add    esp,0x10
c0021e1e:	83 f8 03             	cmp    eax,0x3
c0021e21:	77 17                	ja     c0021e3a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e27:	89 03                	mov    DWORD PTR [ebx],eax
c0021e29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e2d:	89 06                	mov    DWORD PTR [esi],eax
c0021e2f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e36:	b0 01                	mov    al,0x1
c0021e38:	eb 19                	jmp    c0021e53 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e3a:	50                   	push   eax
c0021e3b:	55                   	push   ebp
c0021e3c:	57                   	push   edi
c0021e3d:	56                   	push   esi
c0021e3e:	53                   	push   ebx
c0021e3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e4b:	e8 aa fd ff ff       	call   c0021bfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e50:	83 c4 20             	add    esp,0x20
c0021e53:	83 c4 1c             	add    esp,0x1c
c0021e56:	5b                   	pop    ebx
c0021e57:	5e                   	pop    esi
c0021e58:	5f                   	pop    edi
c0021e59:	5d                   	pop    ebp
c0021e5a:	c3                   	ret    
c0021e5b:	90                   	nop

c0021e5c <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e5c:	57                   	push   edi
c0021e5d:	56                   	push   esi
c0021e5e:	53                   	push   ebx
c0021e5f:	83 ec 10             	sub    esp,0x10
c0021e62:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e6a:	85 ff                	test   edi,edi
c0021e6c:	0f 84 8b 00 00 00    	je     c0021efd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021e72:	85 f6                	test   esi,esi
c0021e74:	0f 84 83 00 00 00    	je     c0021efd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021e7a:	b8 03 00 00 00       	mov    eax,0x3
c0021e7f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e84:	75 7c                	jne    c0021f02 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e86:	83 ec 0c             	sub    esp,0xc
c0021e89:	6a 1c                	push   0x1c
c0021e8b:	e8 8b d9 fe ff       	call   c000f81b <malloc>
c0021e90:	89 07                	mov    DWORD PTR [edi],eax
c0021e92:	89 c3                	mov    ebx,eax
c0021e94:	58                   	pop    eax
c0021e95:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e99:	50                   	push   eax
c0021e9a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e9d:	50                   	push   eax
c0021e9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ea2:	50                   	push   eax
c0021ea3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ea7:	50                   	push   eax
c0021ea8:	56                   	push   esi
c0021ea9:	e8 1f ff ff ff       	call   c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021eae:	83 c4 20             	add    esp,0x20
c0021eb1:	84 c0                	test   al,al
c0021eb3:	74 07                	je     c0021ebc <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021eb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021eba:	74 0b                	je     c0021ec7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021ebc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ec0:	b8 01 00 00 00       	mov    eax,0x1
c0021ec5:	eb 3b                	jmp    c0021f02 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ecf:	89 03                	mov    DWORD PTR [ebx],eax
c0021ed1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021edc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ee3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021eea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021eed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ef4:	8a 06                	mov    al,BYTE PTR [esi]
c0021ef6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ef9:	31 c0                	xor    eax,eax
c0021efb:	eb 05                	jmp    c0021f02 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021efd:	b8 04 00 00 00       	mov    eax,0x4
c0021f02:	83 c4 10             	add    esp,0x10
c0021f05:	5b                   	pop    ebx
c0021f06:	5e                   	pop    esi
c0021f07:	5f                   	pop    edi
c0021f08:	c3                   	ret    
c0021f09:	90                   	nop

c0021f0a <ISO9660::exists(char const*)>:
c0021f0a:	83 ec 28             	sub    esp,0x28
c0021f0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f15:	52                   	push   edx
c0021f16:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f19:	52                   	push   edx
c0021f1a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f1e:	52                   	push   edx
c0021f1f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f23:	52                   	push   edx
c0021f24:	50                   	push   eax
c0021f25:	e8 a3 fe ff ff       	call   c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f2a:	83 c4 3c             	add    esp,0x3c
c0021f2d:	c3                   	ret    

c0021f2e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f2e:	56                   	push   esi
c0021f2f:	53                   	push   ebx
c0021f30:	83 ec 14             	sub    esp,0x14
c0021f33:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f3b:	85 db                	test   ebx,ebx
c0021f3d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f41:	0f 94 c2             	sete   dl
c0021f44:	85 f6                	test   esi,esi
c0021f46:	0f 94 c0             	sete   al
c0021f49:	08 c2                	or     dl,al
c0021f4b:	75 68                	jne    c0021fb5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f4d:	85 c9                	test   ecx,ecx
c0021f4f:	74 64                	je     c0021fb5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f51:	83 ec 0c             	sub    esp,0xc
c0021f54:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f5b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f68:	50                   	push   eax
c0021f69:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f6c:	50                   	push   eax
c0021f6d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f71:	50                   	push   eax
c0021f72:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f76:	50                   	push   eax
c0021f77:	51                   	push   ecx
c0021f78:	e8 50 fe ff ff       	call   c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f7d:	83 c4 20             	add    esp,0x20
c0021f80:	ba 01 00 00 00       	mov    edx,0x1
c0021f85:	84 c0                	test   al,al
c0021f87:	74 31                	je     c0021fba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f94:	89 03                	mov    DWORD PTR [ebx],eax
c0021f96:	ba 00 00 00 00       	mov    edx,0x0
c0021f9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f9f:	85 c0                	test   eax,eax
c0021fa1:	0f 95 06             	setne  BYTE PTR [esi]
c0021fa4:	74 14                	je     c0021fba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fa6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021fac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fb3:	eb 05                	jmp    c0021fba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fb5:	ba 04 00 00 00       	mov    edx,0x4
c0021fba:	83 c4 14             	add    esp,0x14
c0021fbd:	89 d0                	mov    eax,edx
c0021fbf:	5b                   	pop    ebx
c0021fc0:	5e                   	pop    esi
c0021fc1:	c3                   	ret    

c0021fc2 <ISO9660::openDir(char const*, void**)>:
c0021fc2:	57                   	push   edi
c0021fc3:	56                   	push   esi
c0021fc4:	53                   	push   ebx
c0021fc5:	83 ec 10             	sub    esp,0x10
c0021fc8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fcc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fd0:	85 ff                	test   edi,edi
c0021fd2:	74 7b                	je     c002204f <ISO9660::openDir(char const*, void**)+0x8d>
c0021fd4:	85 f6                	test   esi,esi
c0021fd6:	74 77                	je     c002204f <ISO9660::openDir(char const*, void**)+0x8d>
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	6a 1c                	push   0x1c
c0021fdd:	e8 39 d8 fe ff       	call   c000f81b <malloc>
c0021fe2:	89 07                	mov    DWORD PTR [edi],eax
c0021fe4:	89 c3                	mov    ebx,eax
c0021fe6:	58                   	pop    eax
c0021fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021feb:	50                   	push   eax
c0021fec:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fef:	50                   	push   eax
c0021ff0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff4:	50                   	push   eax
c0021ff5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff9:	50                   	push   eax
c0021ffa:	56                   	push   esi
c0021ffb:	e8 cd fd ff ff       	call   c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022000:	83 c4 20             	add    esp,0x20
c0022003:	84 c0                	test   al,al
c0022005:	74 07                	je     c002200e <ISO9660::openDir(char const*, void**)+0x4c>
c0022007:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002200c:	75 0b                	jne    c0022019 <ISO9660::openDir(char const*, void**)+0x57>
c002200e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022012:	b8 01 00 00 00       	mov    eax,0x1
c0022017:	eb 3b                	jmp    c0022054 <ISO9660::openDir(char const*, void**)+0x92>
c0022019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002201d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022021:	89 03                	mov    DWORD PTR [ebx],eax
c0022023:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002202a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002202e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022035:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002203c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002203f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022046:	8a 06                	mov    al,BYTE PTR [esi]
c0022048:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002204b:	31 c0                	xor    eax,eax
c002204d:	eb 05                	jmp    c0022054 <ISO9660::openDir(char const*, void**)+0x92>
c002204f:	b8 04 00 00 00       	mov    eax,0x4
c0022054:	83 c4 10             	add    esp,0x10
c0022057:	5b                   	pop    ebx
c0022058:	5e                   	pop    esi
c0022059:	5f                   	pop    edi
c002205a:	c3                   	ret    
c002205b:	90                   	nop

c002205c <ISO9660::ISO9660()>:
c002205c:	83 ec 0c             	sub    esp,0xc
c002205f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022063:	83 ec 0c             	sub    esp,0xc
c0022066:	50                   	push   eax
c0022067:	e8 26 0b ff ff       	call   c0012b92 <Filesystem::Filesystem()>
c002206c:	83 c4 10             	add    esp,0x10
c002206f:	ba 00 ca 02 c0       	mov    edx,0xc002ca00
c0022074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022078:	89 10                	mov    DWORD PTR [eax],edx
c002207a:	90                   	nop
c002207b:	83 c4 0c             	add    esp,0xc
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022080:	83 ec 1c             	sub    esp,0x1c
c0022083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022087:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002208b:	89 10                	mov    DWORD PTR [eax],edx
c002208d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022091:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022095:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002209c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00220a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00220a3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00220a8:	75 23                	jne    c00220cd <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00220aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00220b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220b7:	0f af c2             	imul   eax,edx
c00220ba:	85 c0                	test   eax,eax
c00220bc:	79 03                	jns    c00220c1 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00220be:	83 c0 03             	add    eax,0x3
c00220c1:	c1 f8 02             	sar    eax,0x2
c00220c4:	05 a0 0f 00 00       	add    eax,0xfa0
c00220c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00220cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00220d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00220d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00220e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00220ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00220f5:	c1 e0 02             	shl    eax,0x2
c00220f8:	83 ec 0c             	sub    esp,0xc
c00220fb:	50                   	push   eax
c00220fc:	e8 1a d7 fe ff       	call   c000f81b <malloc>
c0022101:	83 c4 10             	add    esp,0x10
c0022104:	89 c2                	mov    edx,eax
c0022106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002210a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002210d:	83 ec 04             	sub    esp,0x4
c0022110:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022114:	50                   	push   eax
c0022115:	6a 01                	push   0x1
c0022117:	6a 04                	push   0x4
c0022119:	e8 7d 6c fe ff       	call   c0008d9b <src_new>
c002211e:	83 c4 10             	add    esp,0x10
c0022121:	89 c2                	mov    edx,eax
c0022123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022127:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002212a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002212e:	85 c0                	test   eax,eax
c0022130:	74 10                	je     c0022142 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0022132:	83 ec 0c             	sub    esp,0xc
c0022135:	68 60 ca 02 c0       	push   0xc002ca60
c002213a:	e8 e6 80 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c002213f:	83 c4 10             	add    esp,0x10
c0022142:	a0 e0 07 03 c0       	mov    al,ds:0xc00307e0
c0022147:	83 f0 01             	xor    eax,0x1
c002214a:	84 c0                	test   al,al
c002214c:	74 57                	je     c00221a5 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c002214e:	a1 7c ca 02 c0       	mov    eax,ds:0xc002ca7c
c0022153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022157:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002215f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022167:	7f 35                	jg     c002219e <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022169:	83 ec 0c             	sub    esp,0xc
c002216c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022170:	e8 5a 54 00 00       	call   c00275cf <__floatsisf>
c0022175:	83 c4 10             	add    esp,0x10
c0022178:	8b 15 7c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca7c
c002217e:	83 ec 08             	sub    esp,0x8
c0022181:	52                   	push   edx
c0022182:	50                   	push   eax
c0022183:	e8 59 50 00 00       	call   c00271e1 <__mulsf3>
c0022188:	83 c4 10             	add    esp,0x10
c002218b:	89 c2                	mov    edx,eax
c002218d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022191:	89 14 85 e0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc20],edx
c0022198:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002219c:	eb c1                	jmp    c002215f <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c002219e:	c6 05 e0 07 03 c0 01 	mov    BYTE PTR ds:0xc00307e0,0x1
c00221a5:	90                   	nop
c00221a6:	83 c4 1c             	add    esp,0x1c
c00221a9:	c3                   	ret    

c00221aa <SoundChannel::~SoundChannel()>:
c00221aa:	83 ec 0c             	sub    esp,0xc
c00221ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221b4:	83 ec 0c             	sub    esp,0xc
c00221b7:	50                   	push   eax
c00221b8:	e8 6e d6 fe ff       	call   c000f82b <free>
c00221bd:	83 c4 10             	add    esp,0x10
c00221c0:	90                   	nop
c00221c1:	83 c4 0c             	add    esp,0xc
c00221c4:	c3                   	ret    
c00221c5:	90                   	nop

c00221c6 <SoundChannel::getSampleRate()>:
c00221c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00221cc:	c3                   	ret    
c00221cd:	90                   	nop

c00221ce <SoundChannel::getBits()>:
c00221ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221d5:	c3                   	ret    

c00221d6 <SoundChannel::getBufferUsed()>:
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00221dd:	c3                   	ret    

c00221de <SoundChannel::getBufferSize()>:
c00221de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221e5:	c3                   	ret    

c00221e6 <SoundChannel::unbuffer(float*, int, int)>:
c00221e6:	56                   	push   esi
c00221e7:	53                   	push   ebx
c00221e8:	83 ec 40             	sub    esp,0x40
c00221eb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00221ef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00221f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00221f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00221fd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022201:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022205:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002220d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022211:	e8 b9 53 00 00       	call   c00275cf <__floatsisf>
c0022216:	5a                   	pop    edx
c0022217:	89 c6                	mov    esi,eax
c0022219:	ff 33                	push   DWORD PTR [ebx]
c002221b:	e8 af 53 00 00       	call   c00275cf <__floatsisf>
c0022220:	59                   	pop    ecx
c0022221:	5a                   	pop    edx
c0022222:	50                   	push   eax
c0022223:	56                   	push   esi
c0022224:	e8 7b 51 00 00       	call   c00273a4 <__divsf3>
c0022229:	89 04 24             	mov    DWORD PTR [esp],eax
c002222c:	e8 6e 66 00 00       	call   c002889f <__extendsfdf2>
c0022231:	59                   	pop    ecx
c0022232:	5e                   	pop    esi
c0022233:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022237:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002223b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022243:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022247:	50                   	push   eax
c0022248:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002224b:	e8 40 67 fe ff       	call   c0008990 <src_process>
c0022250:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022254:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022257:	83 c4 0c             	add    esp,0xc
c002225a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002225d:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022260:	29 d0                	sub    eax,edx
c0022262:	c1 e0 02             	shl    eax,0x2
c0022265:	50                   	push   eax
c0022266:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022269:	50                   	push   eax
c002226a:	51                   	push   ecx
c002226b:	e8 18 e4 fd ff       	call   c0000688 <memmove>
c0022270:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022274:	83 c4 44             	add    esp,0x44
c0022277:	5b                   	pop    ebx
c0022278:	5e                   	pop    esi
c0022279:	c3                   	ret    

c002227a <SoundChannel::buffer16(short*, int)>:
c002227a:	55                   	push   ebp
c002227b:	57                   	push   edi
c002227c:	56                   	push   esi
c002227d:	53                   	push   ebx
c002227e:	83 ec 1c             	sub    esp,0x1c
c0022281:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022285:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022288:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002228b:	0f 84 d2 00 00 00    	je     c0022363 <SoundChannel::buffer16(short*, int)+0xe9>
c0022291:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022295:	85 ed                	test   ebp,ebp
c0022297:	0f 8e c6 00 00 00    	jle    c0022363 <SoundChannel::buffer16(short*, int)+0xe9>
c002229d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222a1:	bd 00 00 00 38       	mov    ebp,0x38000000
c00222a6:	83 ec 0c             	sub    esp,0xc
c00222a9:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00222ac:	50                   	push   eax
c00222ad:	e8 1d 53 00 00       	call   c00275cf <__floatsisf>
c00222b2:	59                   	pop    ecx
c00222b3:	8d 4e 01             	lea    ecx,[esi+0x1]
c00222b6:	5f                   	pop    edi
c00222b7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00222ba:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00222bd:	55                   	push   ebp
c00222be:	50                   	push   eax
c00222bf:	e8 1d 4f 00 00       	call   c00271e1 <__mulsf3>
c00222c4:	83 c4 10             	add    esp,0x10
c00222c7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00222ca:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00222cd:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00222d0:	0f 84 99 00 00 00    	je     c002236f <SoundChannel::buffer16(short*, int)+0xf5>
c00222d6:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00222db:	74 78                	je     c0022355 <SoundChannel::buffer16(short*, int)+0xdb>
c00222dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222e1:	83 ec 0c             	sub    esp,0xc
c00222e4:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00222e8:	50                   	push   eax
c00222e9:	e8 e1 52 00 00       	call   c00275cf <__floatsisf>
c00222ee:	5f                   	pop    edi
c00222ef:	8d 4e 01             	lea    ecx,[esi+0x1]
c00222f2:	5a                   	pop    edx
c00222f3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00222f6:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00222f9:	55                   	push   ebp
c00222fa:	50                   	push   eax
c00222fb:	e8 e1 4e 00 00       	call   c00271e1 <__mulsf3>
c0022300:	83 c4 10             	add    esp,0x10
c0022303:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022306:	be 02 00 00 00       	mov    esi,0x2
c002230b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002230e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022311:	74 46                	je     c0022359 <SoundChannel::buffer16(short*, int)+0xdf>
c0022313:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022317:	eb 36                	jmp    c002234f <SoundChannel::buffer16(short*, int)+0xd5>
c0022319:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002231d:	83 ec 0c             	sub    esp,0xc
c0022320:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022324:	46                   	inc    esi
c0022325:	50                   	push   eax
c0022326:	e8 a4 52 00 00       	call   c00275cf <__floatsisf>
c002232b:	5a                   	pop    edx
c002232c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c002232f:	59                   	pop    ecx
c0022330:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022333:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002233a:	50                   	push   eax
c002233b:	e8 a1 4e 00 00       	call   c00271e1 <__mulsf3>
c0022340:	83 c4 10             	add    esp,0x10
c0022343:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022347:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002234a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002234d:	74 0a                	je     c0022359 <SoundChannel::buffer16(short*, int)+0xdf>
c002234f:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022353:	75 c4                	jne    c0022319 <SoundChannel::buffer16(short*, int)+0x9f>
c0022355:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022359:	83 c4 1c             	add    esp,0x1c
c002235c:	89 f0                	mov    eax,esi
c002235e:	5b                   	pop    ebx
c002235f:	5e                   	pop    esi
c0022360:	5f                   	pop    edi
c0022361:	5d                   	pop    ebp
c0022362:	c3                   	ret    
c0022363:	83 c4 1c             	add    esp,0x1c
c0022366:	31 f6                	xor    esi,esi
c0022368:	5b                   	pop    ebx
c0022369:	89 f0                	mov    eax,esi
c002236b:	5e                   	pop    esi
c002236c:	5f                   	pop    edi
c002236d:	5d                   	pop    ebp
c002236e:	c3                   	ret    
c002236f:	be 01 00 00 00       	mov    esi,0x1
c0022374:	eb e3                	jmp    c0022359 <SoundChannel::buffer16(short*, int)+0xdf>

c0022376 <SoundChannel::buffer8(unsigned char*, int)>:
c0022376:	55                   	push   ebp
c0022377:	57                   	push   edi
c0022378:	56                   	push   esi
c0022379:	53                   	push   ebx
c002237a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002237e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022382:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022385:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022389:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002238c:	74 7a                	je     c0022408 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002238e:	85 ff                	test   edi,edi
c0022390:	7e 76                	jle    c0022408 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022392:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022396:	8d 70 01             	lea    esi,[eax+0x1]
c0022399:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002239c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002239f:	8b 1c 9d e0 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfc20]
c00223a6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00223a9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00223ac:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00223af:	74 5e                	je     c002240f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00223b1:	83 ff 01             	cmp    edi,0x1
c00223b4:	74 4b                	je     c0022401 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00223b6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00223ba:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00223bd:	8d 70 01             	lea    esi,[eax+0x1]
c00223c0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223c3:	8b 1c 9d e0 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfc20]
c00223ca:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00223cd:	b8 02 00 00 00       	mov    eax,0x2
c00223d2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223d5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223d8:	75 23                	jne    c00223fd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00223da:	eb 27                	jmp    c0022403 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223dc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00223e1:	8d 71 01             	lea    esi,[ecx+0x1]
c00223e4:	40                   	inc    eax
c00223e5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223e8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00223eb:	8b 1c 9d e0 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfc20]
c00223f2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00223f5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223f8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223fb:	74 06                	je     c0022403 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223fd:	39 c7                	cmp    edi,eax
c00223ff:	75 db                	jne    c00223dc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022401:	89 f8                	mov    eax,edi
c0022403:	5b                   	pop    ebx
c0022404:	5e                   	pop    esi
c0022405:	5f                   	pop    edi
c0022406:	5d                   	pop    ebp
c0022407:	c3                   	ret    
c0022408:	5b                   	pop    ebx
c0022409:	31 c0                	xor    eax,eax
c002240b:	5e                   	pop    esi
c002240c:	5f                   	pop    edi
c002240d:	5d                   	pop    ebp
c002240e:	c3                   	ret    
c002240f:	b8 01 00 00 00       	mov    eax,0x1
c0022414:	eb ed                	jmp    c0022403 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022416 <SoundDevice::SoundDevice(char const*)>:
c0022416:	83 ec 1c             	sub    esp,0x1c
c0022419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241d:	83 ec 08             	sub    esp,0x8
c0022420:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022424:	50                   	push   eax
c0022425:	e8 9a 1a ff ff       	call   c0013ec4 <Device::Device(char const*)>
c002242a:	83 c4 10             	add    esp,0x10
c002242d:	ba 88 ca 02 c0       	mov    edx,0xc002ca88
c0022432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022436:	89 10                	mov    DWORD PTR [eax],edx
c0022438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022454:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002245c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022461:	7f 19                	jg     c002247c <SoundDevice::SoundDevice(char const*)+0x66>
c0022463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022467:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002246b:	83 c2 54             	add    edx,0x54
c002246e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022476:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002247a:	eb e0                	jmp    c002245c <SoundDevice::SoundDevice(char const*)+0x46>
c002247c:	90                   	nop
c002247d:	83 c4 1c             	add    esp,0x1c
c0022480:	c3                   	ret    
c0022481:	90                   	nop

c0022482 <SoundDevice::~SoundDevice()>:
c0022482:	53                   	push   ebx
c0022483:	83 ec 18             	sub    esp,0x18
c0022486:	ba 88 ca 02 c0       	mov    edx,0xc002ca88
c002248b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248f:	89 10                	mov    DWORD PTR [eax],edx
c0022491:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022499:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002249e:	7f 46                	jg     c00224e6 <SoundDevice::~SoundDevice()+0x64>
c00224a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224a8:	83 c2 54             	add    edx,0x54
c00224ab:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00224af:	85 c0                	test   eax,eax
c00224b1:	74 2d                	je     c00224e0 <SoundDevice::~SoundDevice()+0x5e>
c00224b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224bb:	83 c2 54             	add    edx,0x54
c00224be:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00224c2:	85 db                	test   ebx,ebx
c00224c4:	74 1a                	je     c00224e0 <SoundDevice::~SoundDevice()+0x5e>
c00224c6:	83 ec 0c             	sub    esp,0xc
c00224c9:	53                   	push   ebx
c00224ca:	e8 db fc ff ff       	call   c00221aa <SoundChannel::~SoundChannel()>
c00224cf:	83 c4 10             	add    esp,0x10
c00224d2:	83 ec 08             	sub    esp,0x8
c00224d5:	6a 2c                	push   0x2c
c00224d7:	53                   	push   ebx
c00224d8:	e8 be 02 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224e4:	eb b3                	jmp    c0022499 <SoundDevice::~SoundDevice()+0x17>
c00224e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ea:	83 ec 0c             	sub    esp,0xc
c00224ed:	50                   	push   eax
c00224ee:	e8 9b 16 ff ff       	call   c0013b8e <Device::~Device()>
c00224f3:	83 c4 10             	add    esp,0x10
c00224f6:	90                   	nop
c00224f7:	83 c4 18             	add    esp,0x18
c00224fa:	5b                   	pop    ebx
c00224fb:	c3                   	ret    

c00224fc <SoundDevice::~SoundDevice()>:
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	83 ec 0c             	sub    esp,0xc
c0022502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022506:	e8 77 ff ff ff       	call   c0022482 <SoundDevice::~SoundDevice()>
c002250b:	83 c4 10             	add    esp,0x10
c002250e:	83 ec 08             	sub    esp,0x8
c0022511:	68 e4 01 00 00       	push   0x1e4
c0022516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002251a:	e8 7c 02 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c002251f:	83 c4 10             	add    esp,0x10
c0022522:	83 c4 0c             	add    esp,0xc
c0022525:	c3                   	ret    

c0022526 <SoundDevice::getFreeChannelNum()>:
c0022526:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002252a:	31 c0                	xor    eax,eax
c002252c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022534:	74 09                	je     c002253f <SoundDevice::getFreeChannelNum()+0x19>
c0022536:	40                   	inc    eax
c0022537:	83 f8 20             	cmp    eax,0x20
c002253a:	75 f0                	jne    c002252c <SoundDevice::getFreeChannelNum()+0x6>
c002253c:	83 c8 ff             	or     eax,0xffffffff
c002253f:	c3                   	ret    

c0022540 <SoundDevice::addChannel(SoundChannel*)>:
c0022540:	56                   	push   esi
c0022541:	53                   	push   ebx
c0022542:	51                   	push   ecx
c0022543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022547:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002254b:	53                   	push   ebx
c002254c:	e8 d5 ff ff ff       	call   c0022526 <SoundDevice::getFreeChannelNum()>
c0022551:	5a                   	pop    edx
c0022552:	83 f8 ff             	cmp    eax,0xffffffff
c0022555:	74 51                	je     c00225a8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022557:	85 f6                	test   esi,esi
c0022559:	74 4d                	je     c00225a8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002255b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022562:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022569:	75 30                	jne    c002259b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002256b:	83 ec 0c             	sub    esp,0xc
c002256e:	56                   	push   esi
c002256f:	e8 52 fc ff ff       	call   c00221c6 <SoundChannel::getSampleRate()>
c0022574:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002257a:	89 34 24             	mov    DWORD PTR [esp],esi
c002257d:	e8 4c fc ff ff       	call   c00221ce <SoundChannel::getBits()>
c0022582:	83 c4 0c             	add    esp,0xc
c0022585:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002258b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002258d:	50                   	push   eax
c002258e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022594:	53                   	push   ebx
c0022595:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022598:	83 c4 10             	add    esp,0x10
c002259b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00225a1:	b8 01 00 00 00       	mov    eax,0x1
c00225a6:	eb 03                	jmp    c00225ab <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00225a8:	83 c8 ff             	or     eax,0xffffffff
c00225ab:	5a                   	pop    edx
c00225ac:	5b                   	pop    ebx
c00225ad:	5e                   	pop    esi
c00225ae:	c3                   	ret    
c00225af:	90                   	nop

c00225b0 <SoundDevice::removeChannel(int)>:
c00225b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225b8:	83 fa 1f             	cmp    edx,0x1f
c00225bb:	77 23                	ja     c00225e0 <SoundDevice::removeChannel(int)+0x30>
c00225bd:	8d 14 90             	lea    edx,[eax+edx*4]
c00225c0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00225c7:	74 17                	je     c00225e0 <SoundDevice::removeChannel(int)+0x30>
c00225c9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00225d3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00225d9:	75 05                	jne    c00225e0 <SoundDevice::removeChannel(int)+0x30>
c00225db:	8b 00                	mov    eax,DWORD PTR [eax]
c00225dd:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00225e0:	c3                   	ret    
c00225e1:	90                   	nop

c00225e2 <SoundDevice::floatTo16(float*, short*, int)>:
c00225e2:	57                   	push   edi
c00225e3:	56                   	push   esi
c00225e4:	53                   	push   ebx
c00225e5:	31 db                	xor    ebx,ebx
c00225e7:	83 ec 10             	sub    esp,0x10
c00225ea:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00225ee:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00225f2:	0f 8d d0 00 00 00    	jge    c00226c8 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00225f8:	83 ec 0c             	sub    esp,0xc
c00225fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022602:	e8 98 62 00 00       	call   c002889f <__extendsfdf2>
c0022607:	83 c4 10             	add    esp,0x10
c002260a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002260e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022612:	68 00 00 f0 3f       	push   0x3ff00000
c0022617:	6a 00                	push   0x0
c0022619:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002261d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022621:	e8 05 52 00 00       	call   c002782b <__adddf3>
c0022626:	83 c4 10             	add    esp,0x10
c0022629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002262d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022631:	68 00 00 e0 3f       	push   0x3fe00000
c0022636:	6a 00                	push   0x0
c0022638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002263c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022640:	e8 63 58 00 00       	call   c0027ea8 <__muldf3>
c0022645:	83 c4 10             	add    esp,0x10
c0022648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002264c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022650:	68 c0 ff df 40       	push   0x40dfffc0
c0022655:	6a 00                	push   0x0
c0022657:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002265b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002265f:	e8 44 58 00 00       	call   c0027ea8 <__muldf3>
c0022664:	59                   	pop    ecx
c0022665:	5f                   	pop    edi
c0022666:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002266a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002266e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022676:	e8 00 61 00 00       	call   c002877b <__truncdfsf2>
c002267b:	5a                   	pop    edx
c002267c:	89 c7                	mov    edi,eax
c002267e:	59                   	pop    ecx
c002267f:	68 00 fe ff 46       	push   0x46fffe00
c0022684:	50                   	push   eax
c0022685:	e8 9b 51 00 00       	call   c0027825 <__gesf2>
c002268a:	83 c4 10             	add    esp,0x10
c002268d:	85 c0                	test   eax,eax
c002268f:	78 08                	js     c0022699 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022691:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022697:	eb 29                	jmp    c00226c2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022699:	50                   	push   eax
c002269a:	50                   	push   eax
c002269b:	6a 00                	push   0x0
c002269d:	57                   	push   edi
c002269e:	e8 86 51 00 00       	call   c0027829 <__lesf2>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	85 c0                	test   eax,eax
c00226a8:	7f 08                	jg     c00226b2 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00226aa:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00226b0:	eb 10                	jmp    c00226c2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00226b2:	83 ec 0c             	sub    esp,0xc
c00226b5:	57                   	push   edi
c00226b6:	e8 81 62 00 00       	call   c002893c <lrintf>
c00226bb:	83 c4 10             	add    esp,0x10
c00226be:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00226c2:	43                   	inc    ebx
c00226c3:	e9 26 ff ff ff       	jmp    c00225ee <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00226c8:	83 c4 10             	add    esp,0x10
c00226cb:	5b                   	pop    ebx
c00226cc:	5e                   	pop    esi
c00226cd:	5f                   	pop    edi
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop

c00226d0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226d0:	57                   	push   edi
c00226d1:	56                   	push   esi
c00226d2:	53                   	push   ebx
c00226d3:	31 db                	xor    ebx,ebx
c00226d5:	83 ec 10             	sub    esp,0x10
c00226d8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226dc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226e0:	0f 8d cb 00 00 00    	jge    c00227b1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226e6:	83 ec 0c             	sub    esp,0xc
c00226e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226ed:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226f0:	e8 aa 61 00 00       	call   c002889f <__extendsfdf2>
c00226f5:	83 c4 10             	add    esp,0x10
c00226f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022700:	68 00 00 f0 3f       	push   0x3ff00000
c0022705:	6a 00                	push   0x0
c0022707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270f:	e8 17 51 00 00       	call   c002782b <__adddf3>
c0022714:	83 c4 10             	add    esp,0x10
c0022717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002271b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002271f:	68 00 00 e0 3f       	push   0x3fe00000
c0022724:	6a 00                	push   0x0
c0022726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272e:	e8 75 57 00 00       	call   c0027ea8 <__muldf3>
c0022733:	83 c4 10             	add    esp,0x10
c0022736:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002273a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002273e:	68 00 00 60 40       	push   0x40600000
c0022743:	6a 00                	push   0x0
c0022745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274d:	e8 56 57 00 00       	call   c0027ea8 <__muldf3>
c0022752:	59                   	pop    ecx
c0022753:	5f                   	pop    edi
c0022754:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022758:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002275c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022764:	e8 12 60 00 00       	call   c002877b <__truncdfsf2>
c0022769:	5a                   	pop    edx
c002276a:	89 c7                	mov    edi,eax
c002276c:	59                   	pop    ecx
c002276d:	68 00 00 fe 42       	push   0x42fe0000
c0022772:	50                   	push   eax
c0022773:	e8 ad 50 00 00       	call   c0027825 <__gesf2>
c0022778:	83 c4 10             	add    esp,0x10
c002277b:	85 c0                	test   eax,eax
c002277d:	78 06                	js     c0022785 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002277f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022783:	eb 26                	jmp    c00227ab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022785:	50                   	push   eax
c0022786:	50                   	push   eax
c0022787:	6a 00                	push   0x0
c0022789:	57                   	push   edi
c002278a:	e8 9a 50 00 00       	call   c0027829 <__lesf2>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	85 c0                	test   eax,eax
c0022794:	7f 06                	jg     c002279c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022796:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002279a:	eb 0f                	jmp    c00227ab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002279c:	83 ec 0c             	sub    esp,0xc
c002279f:	57                   	push   edi
c00227a0:	e8 97 61 00 00       	call   c002893c <lrintf>
c00227a5:	83 c4 10             	add    esp,0x10
c00227a8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227ab:	43                   	inc    ebx
c00227ac:	e9 2b ff ff ff       	jmp    c00226dc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227b1:	83 c4 10             	add    esp,0x10
c00227b4:	5b                   	pop    ebx
c00227b5:	5e                   	pop    esi
c00227b6:	5f                   	pop    edi
c00227b7:	c3                   	ret    

c00227b8 <SoundDevice::getAudio(int, float*, float*)>:
c00227b8:	55                   	push   ebp
c00227b9:	31 ed                	xor    ebp,ebp
c00227bb:	57                   	push   edi
c00227bc:	56                   	push   esi
c00227bd:	31 f6                	xor    esi,esi
c00227bf:	53                   	push   ebx
c00227c0:	83 ec 20             	sub    esp,0x20
c00227c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227cb:	c1 e0 02             	shl    eax,0x2
c00227ce:	50                   	push   eax
c00227cf:	6a 00                	push   0x0
c00227d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227d5:	e8 76 df fd ff       	call   c0000750 <memset>
c00227da:	83 c4 10             	add    esp,0x10
c00227dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227e5:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00227ec:	85 c9                	test   ecx,ecx
c00227ee:	74 52                	je     c0022842 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00227f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00227f4:	99                   	cdq    
c00227f5:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00227fb:	50                   	push   eax
c00227fc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022802:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022806:	51                   	push   ecx
c0022807:	e8 da f9 ff ff       	call   c00221e6 <SoundChannel::unbuffer(float*, int, int)>
c002280c:	31 d2                	xor    edx,edx
c002280e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022812:	83 c4 10             	add    esp,0x10
c0022815:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022819:	7d 1e                	jge    c0022839 <SoundDevice::getAudio(int, float*, float*)+0x81>
c002281b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002281f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022823:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022826:	89 cf                	mov    edi,ecx
c0022828:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002282e:	0f af ca             	imul   ecx,edx
c0022831:	42                   	inc    edx
c0022832:	01 e9                	add    ecx,ebp
c0022834:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022837:	eb dc                	jmp    c0022815 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022839:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002283d:	45                   	inc    ebp
c002283e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022842:	46                   	inc    esi
c0022843:	83 fe 20             	cmp    esi,0x20
c0022846:	75 9d                	jne    c00227e5 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002284c:	83 c4 1c             	add    esp,0x1c
c002284f:	5b                   	pop    ebx
c0022850:	5e                   	pop    esi
c0022851:	5f                   	pop    edi
c0022852:	5d                   	pop    ebp
c0022853:	c3                   	ret    

c0022854 <PCI::open(int, int, void*)>:
c0022854:	83 ec 18             	sub    esp,0x18
c0022857:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002285b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002285f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022865:	8b 10                	mov    edx,DWORD PTR [eax]
c0022867:	50                   	push   eax
c0022868:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002286b:	31 c0                	xor    eax,eax
c002286d:	83 c4 1c             	add    esp,0x1c
c0022870:	c3                   	ret    
c0022871:	90                   	nop

c0022872 <PCI::close(int, int, void*)>:
c0022872:	31 c0                	xor    eax,eax
c0022874:	c3                   	ret    
c0022875:	90                   	nop

c0022876 <PCI::PCI()>:
c0022876:	83 ec 0c             	sub    esp,0xc
c0022879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287d:	83 ec 08             	sub    esp,0x8
c0022880:	68 b8 ca 02 c0       	push   0xc002cab8
c0022885:	50                   	push   eax
c0022886:	e8 9d 0c ff ff       	call   c0013528 <Bus::Bus(char const*)>
c002288b:	83 c4 10             	add    esp,0x10
c002288e:	ba a4 cb 02 c0       	mov    edx,0xc002cba4
c0022893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022897:	89 10                	mov    DWORD PTR [eax],edx
c0022899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00228a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ab:	a3 e4 07 03 c0       	mov    ds:0xc00307e4,eax
c00228b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ba:	0f b6 d0             	movzx  edx,al
c00228bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d2:	0f b6 d0             	movzx  edx,al
c00228d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e8:	8d 50 01             	lea    edx,[eax+0x1]
c00228eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228ef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228f5:	0f b6 d0             	movzx  edx,al
c00228f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022900:	83 c9 c0             	or     ecx,0xffffffc0
c0022903:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022907:	90                   	nop
c0022908:	83 c4 0c             	add    esp,0xc
c002290b:	c3                   	ret    

c002290c <PCI::readBAR8(unsigned int, int)>:
c002290c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022914:	f6 c2 01             	test   dl,0x1
c0022917:	74 07                	je     c0022920 <PCI::readBAR8(unsigned int, int)+0x14>
c0022919:	83 e2 fc             	and    edx,0xfffffffc
c002291c:	01 c2                	add    edx,eax
c002291e:	ec                   	in     al,dx
c002291f:	c3                   	ret    
c0022920:	83 e2 f0             	and    edx,0xfffffff0
c0022923:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022926:	c3                   	ret    
c0022927:	90                   	nop

c0022928 <PCI::readBAR16(unsigned int, int)>:
c0022928:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002292c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022930:	f6 c2 01             	test   dl,0x1
c0022933:	74 08                	je     c002293d <PCI::readBAR16(unsigned int, int)+0x15>
c0022935:	83 e2 fc             	and    edx,0xfffffffc
c0022938:	01 c2                	add    edx,eax
c002293a:	66 ed                	in     ax,dx
c002293c:	c3                   	ret    
c002293d:	83 e2 f0             	and    edx,0xfffffff0
c0022940:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022944:	c3                   	ret    
c0022945:	90                   	nop

c0022946 <PCI::readBAR32(unsigned int, int)>:
c0022946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002294a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002294e:	f6 c2 01             	test   dl,0x1
c0022951:	74 07                	je     c002295a <PCI::readBAR32(unsigned int, int)+0x14>
c0022953:	83 e2 fc             	and    edx,0xfffffffc
c0022956:	01 c2                	add    edx,eax
c0022958:	ed                   	in     eax,dx
c0022959:	c3                   	ret    
c002295a:	83 e2 f0             	and    edx,0xfffffff0
c002295d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022960:	c3                   	ret    
c0022961:	90                   	nop

c0022962 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002296a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002296e:	f6 c2 01             	test   dl,0x1
c0022971:	74 07                	je     c002297a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022973:	83 e2 fc             	and    edx,0xfffffffc
c0022976:	01 ca                	add    edx,ecx
c0022978:	ee                   	out    dx,al
c0022979:	c3                   	ret    
c002297a:	83 e2 f0             	and    edx,0xfffffff0
c002297d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022980:	c3                   	ret    
c0022981:	90                   	nop

c0022982 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002298a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002298e:	f6 c2 01             	test   dl,0x1
c0022991:	74 08                	je     c002299b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022993:	83 e2 fc             	and    edx,0xfffffffc
c0022996:	01 ca                	add    edx,ecx
c0022998:	66 ef                	out    dx,ax
c002299a:	c3                   	ret    
c002299b:	83 e2 f0             	and    edx,0xfffffff0
c002299e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00229a2:	c3                   	ret    
c00229a3:	90                   	nop

c00229a4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00229a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229b0:	f6 c2 01             	test   dl,0x1
c00229b3:	74 07                	je     c00229bc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00229b5:	83 e2 fc             	and    edx,0xfffffffc
c00229b8:	01 ca                	add    edx,ecx
c00229ba:	ef                   	out    dx,eax
c00229bb:	c3                   	ret    
c00229bc:	83 e2 f0             	and    edx,0xfffffff0
c00229bf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00229c2:	c3                   	ret    
c00229c3:	90                   	nop

c00229c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229c4:	55                   	push   ebp
c00229c5:	57                   	push   edi
c00229c6:	56                   	push   esi
c00229c7:	53                   	push   ebx
c00229c8:	83 ec 0c             	sub    esp,0xc
c00229cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00229cf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00229d3:	89 f0                	mov    eax,esi
c00229d5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00229d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00229dd:	3c 07                	cmp    al,0x7
c00229df:	76 10                	jbe    c00229f1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00229e1:	83 ec 0c             	sub    esp,0xc
c00229e4:	68 c0 ca 02 c0       	push   0xc002cac0
c00229e9:	e8 37 78 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c00229ee:	83 c4 10             	add    esp,0x10
c00229f1:	80 fb 0f             	cmp    bl,0xf
c00229f4:	76 10                	jbe    c0022a06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00229f6:	83 ec 0c             	sub    esp,0xc
c00229f9:	68 f0 ca 02 c0       	push   0xc002caf0
c00229fe:	e8 22 78 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0022a03:	83 c4 10             	add    esp,0x10
c0022a06:	8d 04 36             	lea    eax,[esi+esi*1]
c0022a09:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a0e:	83 c8 f0             	or     eax,0xfffffff0
c0022a11:	ee                   	out    dx,al
c0022a12:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022a17:	89 e8                	mov    eax,ebp
c0022a19:	ee                   	out    dx,al
c0022a1a:	83 c4 0c             	add    esp,0xc
c0022a1d:	89 d8                	mov    eax,ebx
c0022a1f:	66 81 e7 fc 00       	and    di,0xfc
c0022a24:	5b                   	pop    ebx
c0022a25:	c1 e0 08             	shl    eax,0x8
c0022a28:	5e                   	pop    esi
c0022a29:	09 f8                	or     eax,edi
c0022a2b:	5f                   	pop    edi
c0022a2c:	66 0d 00 c0          	or     ax,0xc000
c0022a30:	5d                   	pop    ebp
c0022a31:	c3                   	ret    

c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a32:	57                   	push   edi
c0022a33:	56                   	push   esi
c0022a34:	53                   	push   ebx
c0022a35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022a3d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022a43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022a47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022a4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022a4f:	83 ff 01             	cmp    edi,0x1
c0022a52:	75 3e                	jne    c0022a92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022a54:	89 de                	mov    esi,ebx
c0022a56:	0f b6 c0             	movzx  eax,al
c0022a59:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022a5f:	c1 e0 10             	shl    eax,0x10
c0022a62:	0f b6 c9             	movzx  ecx,cl
c0022a65:	09 f0                	or     eax,esi
c0022a67:	c1 e1 08             	shl    ecx,0x8
c0022a6a:	0f b6 d2             	movzx  edx,dl
c0022a6d:	09 c8                	or     eax,ecx
c0022a6f:	c1 e2 0b             	shl    edx,0xb
c0022a72:	09 d0                	or     eax,edx
c0022a74:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a79:	0d 00 00 00 80       	or     eax,0x80000000
c0022a7e:	ef                   	out    dx,eax
c0022a7f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a84:	ed                   	in     eax,dx
c0022a85:	83 e3 02             	and    ebx,0x2
c0022a88:	0f b6 cb             	movzx  ecx,bl
c0022a8b:	c1 e1 03             	shl    ecx,0x3
c0022a8e:	d3 e8                	shr    eax,cl
c0022a90:	eb 43                	jmp    c0022ad5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022a92:	83 ff 02             	cmp    edi,0x2
c0022a95:	75 2c                	jne    c0022ac3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022a97:	83 ec 0c             	sub    esp,0xc
c0022a9a:	0f b6 c9             	movzx  ecx,cl
c0022a9d:	0f b6 d2             	movzx  edx,dl
c0022aa0:	0f b6 fb             	movzx  edi,bl
c0022aa3:	0f b6 c0             	movzx  eax,al
c0022aa6:	57                   	push   edi
c0022aa7:	51                   	push   ecx
c0022aa8:	52                   	push   edx
c0022aa9:	50                   	push   eax
c0022aaa:	56                   	push   esi
c0022aab:	e8 14 ff ff ff       	call   c00229c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab0:	89 c2                	mov    edx,eax
c0022ab2:	ed                   	in     eax,dx
c0022ab3:	83 e3 02             	and    ebx,0x2
c0022ab6:	83 c4 20             	add    esp,0x20
c0022ab9:	0f b6 cb             	movzx  ecx,bl
c0022abc:	c1 e1 03             	shl    ecx,0x3
c0022abf:	d3 e8                	shr    eax,cl
c0022ac1:	eb 12                	jmp    c0022ad5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ac3:	83 ec 0c             	sub    esp,0xc
c0022ac6:	68 20 cb 02 c0       	push   0xc002cb20
c0022acb:	e8 55 77 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0022ad0:	83 c4 10             	add    esp,0x10
c0022ad3:	31 c0                	xor    eax,eax
c0022ad5:	5b                   	pop    ebx
c0022ad6:	5e                   	pop    esi
c0022ad7:	5f                   	pop    edi
c0022ad8:	c3                   	ret    
c0022ad9:	90                   	nop

c0022ada <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022ada:	83 ec 18             	sub    esp,0x18
c0022add:	6a 00                	push   0x0
c0022adf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ae4:	50                   	push   eax
c0022ae5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022aea:	50                   	push   eax
c0022aeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022af0:	50                   	push   eax
c0022af1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022af5:	e8 38 ff ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022afa:	83 c4 2c             	add    esp,0x2c
c0022afd:	c3                   	ret    

c0022afe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022afe:	83 ec 18             	sub    esp,0x18
c0022b01:	6a 0e                	push   0xe
c0022b03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b08:	50                   	push   eax
c0022b09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b0e:	50                   	push   eax
c0022b0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b14:	50                   	push   eax
c0022b15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b19:	e8 14 ff ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b1e:	83 c4 2c             	add    esp,0x2c
c0022b21:	0f b6 c0             	movzx  eax,al
c0022b24:	c3                   	ret    
c0022b25:	90                   	nop

c0022b26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022b26:	55                   	push   ebp
c0022b27:	57                   	push   edi
c0022b28:	56                   	push   esi
c0022b29:	53                   	push   ebx
c0022b2a:	83 ec 18             	sub    esp,0x18
c0022b2d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022b32:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022b37:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022b3c:	6a 0a                	push   0xa
c0022b3e:	56                   	push   esi
c0022b3f:	55                   	push   ebp
c0022b40:	57                   	push   edi
c0022b41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b45:	e8 e8 fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4a:	83 c4 14             	add    esp,0x14
c0022b4d:	89 c3                	mov    ebx,eax
c0022b4f:	6a 0a                	push   0xa
c0022b51:	0f b6 db             	movzx  ebx,bl
c0022b54:	56                   	push   esi
c0022b55:	55                   	push   ebp
c0022b56:	57                   	push   edi
c0022b57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b5b:	e8 d2 fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b60:	83 c4 2c             	add    esp,0x2c
c0022b63:	25 00 ff 00 00       	and    eax,0xff00
c0022b68:	09 d8                	or     eax,ebx
c0022b6a:	5b                   	pop    ebx
c0022b6b:	5e                   	pop    esi
c0022b6c:	5f                   	pop    edi
c0022b6d:	5d                   	pop    ebp
c0022b6e:	c3                   	ret    
c0022b6f:	90                   	nop

c0022b70 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b70:	83 ec 18             	sub    esp,0x18
c0022b73:	6a 08                	push   0x8
c0022b75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b7a:	50                   	push   eax
c0022b7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b80:	50                   	push   eax
c0022b81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b86:	50                   	push   eax
c0022b87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b8b:	e8 a2 fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b90:	83 c4 2c             	add    esp,0x2c
c0022b93:	0f b6 c4             	movzx  eax,ah
c0022b96:	c3                   	ret    
c0022b97:	90                   	nop

c0022b98 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b98:	83 ec 18             	sub    esp,0x18
c0022b9b:	6a 08                	push   0x8
c0022b9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ba2:	50                   	push   eax
c0022ba3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ba8:	50                   	push   eax
c0022ba9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bae:	50                   	push   eax
c0022baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bb3:	e8 7a fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb8:	83 c4 2c             	add    esp,0x2c
c0022bbb:	c3                   	ret    

c0022bbc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022bbc:	83 ec 18             	sub    esp,0x18
c0022bbf:	6a 3c                	push   0x3c
c0022bc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bc6:	50                   	push   eax
c0022bc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bcc:	50                   	push   eax
c0022bcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bd2:	50                   	push   eax
c0022bd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bd7:	e8 56 fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bdc:	83 c4 2c             	add    esp,0x2c
c0022bdf:	c3                   	ret    

c0022be0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022be0:	83 ec 18             	sub    esp,0x18
c0022be3:	6a 18                	push   0x18
c0022be5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bea:	50                   	push   eax
c0022beb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bf0:	50                   	push   eax
c0022bf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bf6:	50                   	push   eax
c0022bf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bfb:	e8 32 fe ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c00:	83 c4 2c             	add    esp,0x2c
c0022c03:	0f b6 c4             	movzx  eax,ah
c0022c06:	c3                   	ret    
c0022c07:	90                   	nop

c0022c08 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022c08:	55                   	push   ebp
c0022c09:	57                   	push   edi
c0022c0a:	56                   	push   esi
c0022c0b:	53                   	push   ebx
c0022c0c:	83 ec 28             	sub    esp,0x28
c0022c0f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022c13:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022c18:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022c1d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022c22:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022c29:	8d 43 12             	lea    eax,[ebx+0x12]
c0022c2c:	83 c3 10             	add    ebx,0x10
c0022c2f:	0f b6 c0             	movzx  eax,al
c0022c32:	0f b6 db             	movzx  ebx,bl
c0022c35:	50                   	push   eax
c0022c36:	51                   	push   ecx
c0022c37:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022c3b:	57                   	push   edi
c0022c3c:	55                   	push   ebp
c0022c3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022c41:	e8 ec fd ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c46:	83 c4 14             	add    esp,0x14
c0022c49:	89 c6                	mov    esi,eax
c0022c4b:	53                   	push   ebx
c0022c4c:	c1 e6 10             	shl    esi,0x10
c0022c4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022c53:	51                   	push   ecx
c0022c54:	57                   	push   edi
c0022c55:	55                   	push   ebp
c0022c56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022c5a:	e8 d3 fd ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c5f:	83 c4 3c             	add    esp,0x3c
c0022c62:	0f b7 c0             	movzx  eax,ax
c0022c65:	5b                   	pop    ebx
c0022c66:	09 f0                	or     eax,esi
c0022c68:	5e                   	pop    esi
c0022c69:	5f                   	pop    edi
c0022c6a:	5d                   	pop    ebp
c0022c6b:	c3                   	ret    

c0022c6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c6c:	55                   	push   ebp
c0022c6d:	57                   	push   edi
c0022c6e:	56                   	push   esi
c0022c6f:	53                   	push   ebx
c0022c70:	83 ec 0c             	sub    esp,0xc
c0022c73:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022c77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022c7b:	89 f5                	mov    ebp,esi
c0022c7d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022c83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022c87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c93:	83 f9 01             	cmp    ecx,0x1
c0022c96:	75 5d                	jne    c0022cf5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022c98:	0f b6 c8             	movzx  ecx,al
c0022c9b:	0f b6 d2             	movzx  edx,dl
c0022c9e:	c1 e1 10             	shl    ecx,0x10
c0022ca1:	c1 e2 0b             	shl    edx,0xb
c0022ca4:	89 f0                	mov    eax,esi
c0022ca6:	25 fc 00 00 00       	and    eax,0xfc
c0022cab:	09 c1                	or     ecx,eax
c0022cad:	89 e8                	mov    eax,ebp
c0022caf:	0f b6 c0             	movzx  eax,al
c0022cb2:	c1 e0 08             	shl    eax,0x8
c0022cb5:	09 c1                	or     ecx,eax
c0022cb7:	09 d1                	or     ecx,edx
c0022cb9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022cbe:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022cc4:	89 c8                	mov    eax,ecx
c0022cc6:	ef                   	out    dx,eax
c0022cc7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ccc:	ed                   	in     eax,dx
c0022ccd:	0f b7 db             	movzx  ebx,bx
c0022cd0:	83 e6 02             	and    esi,0x2
c0022cd3:	74 0a                	je     c0022cdf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022cd5:	0f b7 d0             	movzx  edx,ax
c0022cd8:	c1 e3 10             	shl    ebx,0x10
c0022cdb:	09 d3                	or     ebx,edx
c0022cdd:	eb 05                	jmp    c0022ce4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022cdf:	66 31 c0             	xor    ax,ax
c0022ce2:	09 c3                	or     ebx,eax
c0022ce4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ce9:	89 c8                	mov    eax,ecx
c0022ceb:	ef                   	out    dx,eax
c0022cec:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022cf1:	89 d8                	mov    eax,ebx
c0022cf3:	eb 41                	jmp    c0022d36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022cf5:	83 f9 02             	cmp    ecx,0x2
c0022cf8:	75 45                	jne    c0022d3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022cfa:	83 ec 0c             	sub    esp,0xc
c0022cfd:	0f b6 d2             	movzx  edx,dl
c0022d00:	89 f1                	mov    ecx,esi
c0022d02:	0f b6 c0             	movzx  eax,al
c0022d05:	0f b6 f1             	movzx  esi,cl
c0022d08:	89 e9                	mov    ecx,ebp
c0022d0a:	56                   	push   esi
c0022d0b:	0f b6 c9             	movzx  ecx,cl
c0022d0e:	51                   	push   ecx
c0022d0f:	52                   	push   edx
c0022d10:	50                   	push   eax
c0022d11:	57                   	push   edi
c0022d12:	e8 ad fc ff ff       	call   c00229c4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d17:	89 c2                	mov    edx,eax
c0022d19:	ed                   	in     eax,dx
c0022d1a:	83 c4 20             	add    esp,0x20
c0022d1d:	0f b7 db             	movzx  ebx,bx
c0022d20:	f6 c2 02             	test   dl,0x2
c0022d23:	74 0c                	je     c0022d31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022d25:	0f b7 c8             	movzx  ecx,ax
c0022d28:	89 d8                	mov    eax,ebx
c0022d2a:	c1 e0 10             	shl    eax,0x10
c0022d2d:	09 c8                	or     eax,ecx
c0022d2f:	eb 05                	jmp    c0022d36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022d31:	66 31 c0             	xor    ax,ax
c0022d34:	09 d8                	or     eax,ebx
c0022d36:	ef                   	out    dx,eax
c0022d37:	83 c4 0c             	add    esp,0xc
c0022d3a:	5b                   	pop    ebx
c0022d3b:	5e                   	pop    esi
c0022d3c:	5f                   	pop    edi
c0022d3d:	5d                   	pop    ebp
c0022d3e:	c3                   	ret    
c0022d3f:	c7 44 24 20 20 cb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002cb20
c0022d47:	83 c4 0c             	add    esp,0xc
c0022d4a:	5b                   	pop    ebx
c0022d4b:	5e                   	pop    esi
c0022d4c:	5f                   	pop    edi
c0022d4d:	5d                   	pop    ebp
c0022d4e:	e9 d2 74 ff ff       	jmp    c001a225 <Krnl::panic(char const*)>
c0022d53:	90                   	nop

c0022d54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022d54:	55                   	push   ebp
c0022d55:	57                   	push   edi
c0022d56:	56                   	push   esi
c0022d57:	53                   	push   ebx
c0022d58:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022d5e:	80 3d f0 07 03 c0 00 	cmp    BYTE PTR ds:0xc00307f0,0x0
c0022d65:	0f 85 84 00 00 00    	jne    c0022def <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022d6b:	83 ec 0c             	sub    esp,0xc
c0022d6e:	68 14 01 00 00       	push   0x114
c0022d73:	e8 a3 ca fe ff       	call   c000f81b <malloc>
c0022d78:	83 c4 0c             	add    esp,0xc
c0022d7b:	89 c3                	mov    ebx,eax
c0022d7d:	ff 35 f0 f9 02 c0    	push   DWORD PTR ds:0xc002f9f0
c0022d83:	68 26 cb 02 c0       	push   0xc002cb26
c0022d88:	50                   	push   eax
c0022d89:	e8 58 00 ff ff       	call   c0012de6 <File::File(char const*, Process*)>
c0022d8e:	5a                   	pop    edx
c0022d8f:	59                   	pop    ecx
c0022d90:	6a 01                	push   0x1
c0022d92:	53                   	push   ebx
c0022d93:	e8 b2 00 ff ff       	call   c0012e4a <File::open(FileOpenMode)>
c0022d98:	83 c4 0c             	add    esp,0xc
c0022d9b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022d9f:	50                   	push   eax
c0022da0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022da4:	50                   	push   eax
c0022da5:	53                   	push   ebx
c0022da6:	e8 4b 03 ff ff       	call   c00130f6 <File::stat(unsigned long long*, bool*)>
c0022dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022daf:	40                   	inc    eax
c0022db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0022db3:	e8 63 ca fe ff       	call   c000f81b <malloc>
c0022db8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022dbc:	a3 ec 07 03 c0       	mov    ds:0xc00307ec,eax
c0022dc1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022dc5:	5e                   	pop    esi
c0022dc6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022dc8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022dcc:	51                   	push   ecx
c0022dcd:	50                   	push   eax
c0022dce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022dd2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022dd6:	53                   	push   ebx
c0022dd7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022dda:	83 c4 14             	add    esp,0x14
c0022ddd:	53                   	push   ebx
c0022dde:	e8 c5 00 ff ff       	call   c0012ea8 <File::close()>
c0022de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022de7:	83 c4 10             	add    esp,0x10
c0022dea:	a3 e8 07 03 c0       	mov    ds:0xc00307e8,eax
c0022def:	a1 e8 07 03 c0       	mov    eax,ds:0xc00307e8
c0022df4:	8b 15 ec 07 03 c0    	mov    edx,DWORD PTR ds:0xc00307ec
c0022dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0022dfd:	31 ff                	xor    edi,edi
c0022dff:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022e07:	31 f6                	xor    esi,esi
c0022e09:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022e0e:	31 db                	xor    ebx,ebx
c0022e10:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022e18:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022e1d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022e24:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022e28:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022e2f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022e33:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022e36:	0f 8e 6b 01 00 00    	jle    c0022fa7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022e3c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022e3f:	d4 40                	aam    0x40
c0022e41:	d5 39                	aad    0x39
c0022e43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022e47:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022e4b:	d4 40                	aam    0x40
c0022e4d:	d5 39                	aad    0x39
c0022e4f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022e53:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022e57:	d4 40                	aam    0x40
c0022e59:	d5 39                	aad    0x39
c0022e5b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022e5f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022e63:	d4 40                	aam    0x40
c0022e65:	d5 39                	aad    0x39
c0022e67:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022e6b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022e6f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e73:	3c 56                	cmp    al,0x56
c0022e75:	74 45                	je     c0022ebc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022e77:	d4 40                	aam    0x40
c0022e79:	d5 39                	aad    0x39
c0022e7b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022e7e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022e82:	0f b6 c9             	movzx  ecx,cl
c0022e85:	c1 e1 04             	shl    ecx,0x4
c0022e88:	d4 40                	aam    0x40
c0022e8a:	d5 39                	aad    0x39
c0022e8c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022e8f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022e93:	0f b6 db             	movzx  ebx,bl
c0022e96:	09 cb                	or     ebx,ecx
c0022e98:	c1 e3 04             	shl    ebx,0x4
c0022e9b:	d4 40                	aam    0x40
c0022e9d:	d5 39                	aad    0x39
c0022e9f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022ea2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022ea6:	0f b6 c9             	movzx  ecx,cl
c0022ea9:	09 cb                	or     ebx,ecx
c0022eab:	c1 e3 04             	shl    ebx,0x4
c0022eae:	89 d9                	mov    ecx,ebx
c0022eb0:	d4 40                	aam    0x40
c0022eb2:	d5 39                	aad    0x39
c0022eb4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022eb7:	0f b6 db             	movzx  ebx,bl
c0022eba:	09 cb                	or     ebx,ecx
c0022ebc:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022ec0:	80 f9 44             	cmp    cl,0x44
c0022ec3:	74 47                	je     c0022f0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022ec5:	88 c8                	mov    al,cl
c0022ec7:	d4 40                	aam    0x40
c0022ec9:	d5 39                	aad    0x39
c0022ecb:	83 e8 30             	sub    eax,0x30
c0022ece:	0f b6 e8             	movzx  ebp,al
c0022ed1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022ed5:	c1 e5 04             	shl    ebp,0x4
c0022ed8:	d4 40                	aam    0x40
c0022eda:	d5 39                	aad    0x39
c0022edc:	83 e8 30             	sub    eax,0x30
c0022edf:	0f b6 f0             	movzx  esi,al
c0022ee2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022ee6:	09 ee                	or     esi,ebp
c0022ee8:	c1 e6 04             	shl    esi,0x4
c0022eeb:	d4 40                	aam    0x40
c0022eed:	d5 39                	aad    0x39
c0022eef:	83 e8 30             	sub    eax,0x30
c0022ef2:	0f b6 e8             	movzx  ebp,al
c0022ef5:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022ef9:	09 ee                	or     esi,ebp
c0022efb:	c1 e6 04             	shl    esi,0x4
c0022efe:	89 f5                	mov    ebp,esi
c0022f00:	d4 40                	aam    0x40
c0022f02:	d5 39                	aad    0x39
c0022f04:	83 e8 30             	sub    eax,0x30
c0022f07:	0f b6 f0             	movzx  esi,al
c0022f0a:	09 ee                	or     esi,ebp
c0022f0c:	83 c7 10             	add    edi,0x10
c0022f0f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022f13:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022f16:	3c 0a                	cmp    al,0xa
c0022f18:	74 09                	je     c0022f23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022f1a:	45                   	inc    ebp
c0022f1b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f1e:	75 16                	jne    c0022f36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022f20:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022f23:	3c 0a                	cmp    al,0xa
c0022f25:	0f 94 c0             	sete   al
c0022f28:	0f b6 c0             	movzx  eax,al
c0022f2b:	01 c7                	add    edi,eax
c0022f2d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022f32:	75 0c                	jne    c0022f40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022f34:	eb 15                	jmp    c0022f4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022f36:	47                   	inc    edi
c0022f37:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022f3a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022f3e:	eb d3                	jmp    c0022f13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022f40:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022f45:	0f 85 e8 fe ff ff    	jne    c0022e33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f4b:	80 f9 44             	cmp    cl,0x44
c0022f4e:	74 0b                	je     c0022f5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022f50:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022f55:	0f 85 d8 fe ff ff    	jne    c0022e33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f5b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022f5f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022f63:	c1 e1 04             	shl    ecx,0x4
c0022f66:	83 e8 30             	sub    eax,0x30
c0022f69:	09 c8                	or     eax,ecx
c0022f6b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022f6f:	0f 85 be fe ff ff    	jne    c0022e33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f75:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022f79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f7d:	c1 e1 04             	shl    ecx,0x4
c0022f80:	83 e8 30             	sub    eax,0x30
c0022f83:	09 c8                	or     eax,ecx
c0022f85:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022f89:	0f 85 a4 fe ff ff    	jne    c0022e33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f8f:	50                   	push   eax
c0022f90:	50                   	push   eax
c0022f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022f95:	50                   	push   eax
c0022f96:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022f9d:	e8 6a d8 fd ff       	call   c000080c <strcpy>
c0022fa2:	83 c4 10             	add    esp,0x10
c0022fa5:	eb 15                	jmp    c0022fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022fa7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022fae:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022fb9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022fbc:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022fc3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022fc9:	5b                   	pop    ebx
c0022fca:	5e                   	pop    esi
c0022fcb:	5f                   	pop    edi
c0022fcc:	5d                   	pop    ebp
c0022fcd:	c3                   	ret    

c0022fce <PCI::checkBus(unsigned char)>:
c0022fce:	56                   	push   esi
c0022fcf:	53                   	push   ebx
c0022fd0:	31 db                	xor    ebx,ebx
c0022fd2:	51                   	push   ecx
c0022fd3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022fd8:	52                   	push   edx
c0022fd9:	53                   	push   ebx
c0022fda:	43                   	inc    ebx
c0022fdb:	56                   	push   esi
c0022fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fe0:	e8 37 03 00 00       	call   c002331c <PCI::checkDevice(unsigned char, unsigned char)>
c0022fe5:	83 c4 10             	add    esp,0x10
c0022fe8:	83 fb 20             	cmp    ebx,0x20
c0022feb:	75 eb                	jne    c0022fd8 <PCI::checkBus(unsigned char)+0xa>
c0022fed:	58                   	pop    eax
c0022fee:	5b                   	pop    ebx
c0022fef:	5e                   	pop    esi
c0022ff0:	c3                   	ret    
c0022ff1:	90                   	nop

c0022ff2 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ff2:	55                   	push   ebp
c0022ff3:	57                   	push   edi
c0022ff4:	56                   	push   esi
c0022ff5:	53                   	push   ebx
c0022ff6:	83 ec 1c             	sub    esp,0x1c
c0022ff9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ffd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023003:	0f 84 52 01 00 00    	je     c002315b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023009:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002300d:	66 81 f9 06 04       	cmp    cx,0x406
c0023012:	75 2c                	jne    c0023040 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023014:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023019:	50                   	push   eax
c002301a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002301f:	50                   	push   eax
c0023020:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023025:	50                   	push   eax
c0023026:	56                   	push   esi
c0023027:	e8 b4 fb ff ff       	call   c0022be0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002302c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023030:	0f b6 c0             	movzx  eax,al
c0023033:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023037:	83 c4 2c             	add    esp,0x2c
c002303a:	5b                   	pop    ebx
c002303b:	5e                   	pop    esi
c002303c:	5f                   	pop    edi
c002303d:	5d                   	pop    ebp
c002303e:	eb 8e                	jmp    c0022fce <PCI::checkBus(unsigned char)>
c0023040:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023044:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002304a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002304e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023052:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023056:	88 d3                	mov    bl,dl
c0023058:	85 c0                	test   eax,eax
c002305a:	74 33                	je     c002308f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002305c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002305f:	85 d2                	test   edx,edx
c0023061:	74 28                	je     c002308b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023063:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023069:	31 ef                	xor    edi,ebp
c002306b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023071:	75 18                	jne    c002308b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023073:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023077:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002307d:	75 0c                	jne    c002308b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002307f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023085:	0f 84 d0 00 00 00    	je     c002315b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002308b:	8b 00                	mov    eax,DWORD PTR [eax]
c002308d:	eb c9                	jmp    c0023058 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002308f:	66 81 f9 01 06       	cmp    cx,0x601
c0023094:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023098:	75 19                	jne    c00230b3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002309a:	83 ec 0c             	sub    esp,0xc
c002309d:	68 64 01 00 00       	push   0x164
c00230a2:	e8 74 c7 fe ff       	call   c000f81b <malloc>
c00230a7:	89 c5                	mov    ebp,eax
c00230a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00230ac:	e8 85 0e 00 00       	call   c0023f36 <SATABus::SATABus()>
c00230b1:	eb 1e                	jmp    c00230d1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00230b3:	66 81 f9 01 01       	cmp    cx,0x101
c00230b8:	75 60                	jne    c002311a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00230ba:	83 ec 0c             	sub    esp,0xc
c00230bd:	68 70 02 00 00       	push   0x270
c00230c2:	e8 54 c7 fe ff       	call   c000f81b <malloc>
c00230c7:	89 c5                	mov    ebp,eax
c00230c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00230cc:	e8 0f 03 00 00       	call   c00233e0 <IDE::IDE()>
c00230d1:	58                   	pop    eax
c00230d2:	5a                   	pop    edx
c00230d3:	55                   	push   ebp
c00230d4:	56                   	push   esi
c00230d5:	e8 e6 0b ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c00230da:	83 ec 1c             	sub    esp,0x1c
c00230dd:	b9 09 00 00 00       	mov    ecx,0x9
c00230e2:	fc                   	cld    
c00230e3:	89 e7                	mov    edi,esp
c00230e5:	89 de                	mov    esi,ebx
c00230e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00230e9:	55                   	push   ebp
c00230ea:	e8 e3 0a ff ff       	call   c0013bd2 <Device::preOpenPCI(PCIDeviceInfo)>
c00230ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00230f2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00230f6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00230fe:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023106:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002310e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023111:	83 c4 4c             	add    esp,0x4c
c0023114:	5b                   	pop    ebx
c0023115:	5e                   	pop    esi
c0023116:	5f                   	pop    edi
c0023117:	5d                   	pop    ebp
c0023118:	ff e0                	jmp    eax
c002311a:	83 ec 0c             	sub    esp,0xc
c002311d:	68 58 01 00 00       	push   0x158
c0023122:	e8 f4 c6 fe ff       	call   c000f81b <malloc>
c0023127:	89 c5                	mov    ebp,eax
c0023129:	58                   	pop    eax
c002312a:	5a                   	pop    edx
c002312b:	68 3f cb 02 c0       	push   0xc002cb3f
c0023130:	55                   	push   ebp
c0023131:	e8 94 0e ff ff       	call   c0013fca <DriverlessDevice::DriverlessDevice(char const*)>
c0023136:	59                   	pop    ecx
c0023137:	5f                   	pop    edi
c0023138:	55                   	push   ebp
c0023139:	56                   	push   esi
c002313a:	e8 81 0b ff ff       	call   c0013cc0 <Device::addChild(Device*)>
c002313f:	b9 09 00 00 00       	mov    ecx,0x9
c0023144:	fc                   	cld    
c0023145:	89 df                	mov    edi,ebx
c0023147:	89 de                	mov    esi,ebx
c0023149:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002314b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002314f:	83 c4 2c             	add    esp,0x2c
c0023152:	5b                   	pop    ebx
c0023153:	5e                   	pop    esi
c0023154:	5f                   	pop    edi
c0023155:	5d                   	pop    ebp
c0023156:	e9 77 0a ff ff       	jmp    c0013bd2 <Device::preOpenPCI(PCIDeviceInfo)>
c002315b:	83 c4 1c             	add    esp,0x1c
c002315e:	5b                   	pop    ebx
c002315f:	5e                   	pop    esi
c0023160:	5f                   	pop    edi
c0023161:	5d                   	pop    ebp
c0023162:	c3                   	ret    
c0023163:	90                   	nop

c0023164 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023164:	55                   	push   ebp
c0023165:	57                   	push   edi
c0023166:	56                   	push   esi
c0023167:	53                   	push   ebx
c0023168:	83 ec 68             	sub    esp,0x68
c002316b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002316f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023176:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002317a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0023181:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002318a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0023191:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023196:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002319a:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c002319f:	6a 0c                	push   0xc
c00231a1:	57                   	push   edi
c00231a2:	53                   	push   ebx
c00231a3:	56                   	push   esi
c00231a4:	55                   	push   ebp
c00231a5:	e8 88 f8 ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231aa:	83 c4 20             	add    esp,0x20
c00231ad:	57                   	push   edi
c00231ae:	53                   	push   ebx
c00231af:	56                   	push   esi
c00231b0:	55                   	push   ebp
c00231b1:	e8 70 f9 ff ff       	call   c0022b26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00231b6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00231bb:	57                   	push   edi
c00231bc:	53                   	push   ebx
c00231bd:	56                   	push   esi
c00231be:	55                   	push   ebp
c00231bf:	e8 f8 f9 ff ff       	call   c0022bbc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00231c4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00231c8:	83 c4 14             	add    esp,0x14
c00231cb:	6a 3c                	push   0x3c
c00231cd:	57                   	push   edi
c00231ce:	53                   	push   ebx
c00231cf:	56                   	push   esi
c00231d0:	55                   	push   ebp
c00231d1:	e8 5c f8 ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231d6:	0f b6 c4             	movzx  eax,ah
c00231d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00231dd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00231e1:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00231e5:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00231ea:	83 c4 20             	add    esp,0x20
c00231ed:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00231f3:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00231fa:	74 7c                	je     c0023278 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00231fc:	31 c0                	xor    eax,eax
c00231fe:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c0023204:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002320a:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023210:	7e 66                	jle    c0023278 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023212:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023215:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002321c:	39 cb                	cmp    ebx,ecx
c002321e:	75 55                	jne    c0023275 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023220:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023227:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002322b:	75 48                	jne    c0023275 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002322d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023231:	83 ec 0c             	sub    esp,0xc
c0023234:	68 59 cb 02 c0       	push   0xc002cb59
c0023239:	e8 3e f6 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002323e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023242:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c0023248:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002324c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023252:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c002325a:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c002325e:	52                   	push   edx
c002325f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023263:	53                   	push   ebx
c0023264:	68 7e cb 02 c0       	push   0xc002cb7e
c0023269:	e8 0e f6 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002326e:	83 c4 20             	add    esp,0x20
c0023271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023275:	40                   	inc    eax
c0023276:	eb 86                	jmp    c00231fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023278:	31 d2                	xor    edx,edx
c002327a:	83 ec 0c             	sub    esp,0xc
c002327d:	57                   	push   edi
c002327e:	53                   	push   ebx
c002327f:	56                   	push   esi
c0023280:	52                   	push   edx
c0023281:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023285:	55                   	push   ebp
c0023286:	e8 7d f9 ff ff       	call   c0022c08 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002328b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002328f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023293:	42                   	inc    edx
c0023294:	83 c4 20             	add    esp,0x20
c0023297:	83 fa 06             	cmp    edx,0x6
c002329a:	75 de                	jne    c002327a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c002329c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00232a1:	83 ec 0c             	sub    esp,0xc
c00232a4:	86 e0                	xchg   al,ah
c00232a6:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00232ab:	6a 02                	push   0x2
c00232ad:	57                   	push   edi
c00232ae:	53                   	push   ebx
c00232af:	56                   	push   esi
c00232b0:	55                   	push   ebp
c00232b1:	e8 7c f7 ff ff       	call   c0022a32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232b6:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00232bb:	83 c4 20             	add    esp,0x20
c00232be:	57                   	push   edi
c00232bf:	53                   	push   ebx
c00232c0:	56                   	push   esi
c00232c1:	55                   	push   ebp
c00232c2:	e8 a9 f8 ff ff       	call   c0022b70 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00232c7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00232cb:	57                   	push   edi
c00232cc:	53                   	push   ebx
c00232cd:	56                   	push   esi
c00232ce:	55                   	push   ebp
c00232cf:	e8 06 f8 ff ff       	call   c0022ada <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00232d4:	b9 09 00 00 00       	mov    ecx,0x9
c00232d9:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00232de:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00232e2:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00232e6:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00232ea:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00232ee:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00232f2:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00232f6:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00232fa:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00232fe:	83 ec 0c             	sub    esp,0xc
c0023301:	fc                   	cld    
c0023302:	89 e7                	mov    edi,esp
c0023304:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023308:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002330a:	55                   	push   ebp
c002330b:	e8 e2 fc ff ff       	call   c0022ff2 <PCI::foundDevice(PCIDeviceInfo)>
c0023310:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023316:	5b                   	pop    ebx
c0023317:	5e                   	pop    esi
c0023318:	5f                   	pop    edi
c0023319:	5d                   	pop    ebp
c002331a:	c3                   	ret    
c002331b:	90                   	nop

c002331c <PCI::checkDevice(unsigned char, unsigned char)>:
c002331c:	55                   	push   ebp
c002331d:	57                   	push   edi
c002331e:	56                   	push   esi
c002331f:	53                   	push   ebx
c0023320:	83 ec 0c             	sub    esp,0xc
c0023323:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023327:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002332c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023331:	6a 00                	push   0x0
c0023333:	56                   	push   esi
c0023334:	57                   	push   edi
c0023335:	55                   	push   ebp
c0023336:	e8 9f f7 ff ff       	call   c0022ada <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002333b:	6a 00                	push   0x0
c002333d:	56                   	push   esi
c002333e:	57                   	push   edi
c002333f:	55                   	push   ebp
c0023340:	e8 1f fe ff ff       	call   c0023164 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023345:	83 c4 20             	add    esp,0x20
c0023348:	6a 00                	push   0x0
c002334a:	56                   	push   esi
c002334b:	57                   	push   edi
c002334c:	55                   	push   ebp
c002334d:	e8 ac f7 ff ff       	call   c0022afe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023352:	83 c4 10             	add    esp,0x10
c0023355:	84 c0                	test   al,al
c0023357:	79 27                	jns    c0023380 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023359:	bb 01 00 00 00       	mov    ebx,0x1
c002335e:	53                   	push   ebx
c002335f:	56                   	push   esi
c0023360:	57                   	push   edi
c0023361:	55                   	push   ebp
c0023362:	e8 73 f7 ff ff       	call   c0022ada <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	66 40                	inc    ax
c002336c:	74 0c                	je     c002337a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002336e:	53                   	push   ebx
c002336f:	56                   	push   esi
c0023370:	57                   	push   edi
c0023371:	55                   	push   ebp
c0023372:	e8 ed fd ff ff       	call   c0023164 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023377:	83 c4 10             	add    esp,0x10
c002337a:	43                   	inc    ebx
c002337b:	83 fb 08             	cmp    ebx,0x8
c002337e:	75 de                	jne    c002335e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023380:	83 c4 0c             	add    esp,0xc
c0023383:	5b                   	pop    ebx
c0023384:	5e                   	pop    esi
c0023385:	5f                   	pop    edi
c0023386:	5d                   	pop    ebp
c0023387:	c3                   	ret    

c0023388 <PCI::detect()>:
c0023388:	56                   	push   esi
c0023389:	53                   	push   ebx
c002338a:	53                   	push   ebx
c002338b:	31 db                	xor    ebx,ebx
c002338d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023391:	6a 00                	push   0x0
c0023393:	6a 00                	push   0x0
c0023395:	6a 00                	push   0x0
c0023397:	56                   	push   esi
c0023398:	e8 61 f7 ff ff       	call   c0022afe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002339d:	83 c4 10             	add    esp,0x10
c00233a0:	a8 80                	test   al,0x80
c00233a2:	75 21                	jne    c00233c5 <PCI::detect()+0x3d>
c00233a4:	51                   	push   ecx
c00233a5:	51                   	push   ecx
c00233a6:	6a 00                	push   0x0
c00233a8:	56                   	push   esi
c00233a9:	e8 20 fc ff ff       	call   c0022fce <PCI::checkBus(unsigned char)>
c00233ae:	83 c4 10             	add    esp,0x10
c00233b1:	eb 24                	jmp    c00233d7 <PCI::detect()+0x4f>
c00233b3:	52                   	push   edx
c00233b4:	52                   	push   edx
c00233b5:	53                   	push   ebx
c00233b6:	43                   	inc    ebx
c00233b7:	56                   	push   esi
c00233b8:	e8 11 fc ff ff       	call   c0022fce <PCI::checkBus(unsigned char)>
c00233bd:	83 c4 10             	add    esp,0x10
c00233c0:	83 fb 08             	cmp    ebx,0x8
c00233c3:	74 12                	je     c00233d7 <PCI::detect()+0x4f>
c00233c5:	53                   	push   ebx
c00233c6:	6a 00                	push   0x0
c00233c8:	6a 00                	push   0x0
c00233ca:	56                   	push   esi
c00233cb:	e8 0a f7 ff ff       	call   c0022ada <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00233d0:	83 c4 10             	add    esp,0x10
c00233d3:	66 40                	inc    ax
c00233d5:	74 dc                	je     c00233b3 <PCI::detect()+0x2b>
c00233d7:	58                   	pop    eax
c00233d8:	5b                   	pop    ebx
c00233d9:	5e                   	pop    esi
c00233da:	c3                   	ret    
c00233db:	90                   	nop

c00233dc <IDE::close(int, int, void*)>:
c00233dc:	83 c8 ff             	or     eax,0xffffffff
c00233df:	c3                   	ret    

c00233e0 <IDE::IDE()>:
c00233e0:	83 ec 0c             	sub    esp,0xc
c00233e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e7:	83 ec 08             	sub    esp,0x8
c00233ea:	68 c8 cb 02 c0       	push   0xc002cbc8
c00233ef:	50                   	push   eax
c00233f0:	e8 79 0c ff ff       	call   c001406e <HardDiskController::HardDiskController(char const*)>
c00233f5:	83 c4 10             	add    esp,0x10
c00233f8:	ba 58 cc 02 c0       	mov    edx,0xc002cc58
c00233fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023401:	89 10                	mov    DWORD PTR [eax],edx
c0023403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023407:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002340e:	90                   	nop
c002340f:	83 c4 0c             	add    esp,0xc
c0023412:	c3                   	ret    
c0023413:	90                   	nop

c0023414 <IDE::prepareInterrupt(unsigned char)>:
c0023414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023419:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002341d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023425:	c3                   	ret    

c0023426 <selectDrive(unsigned char, unsigned char)>:
c0023426:	c3                   	ret    
c0023427:	90                   	nop

c0023428 <IDE::getBase(unsigned char)>:
c0023428:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002342d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023431:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023439:	c3                   	ret    

c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002343a:	55                   	push   ebp
c002343b:	57                   	push   edi
c002343c:	56                   	push   esi
c002343d:	53                   	push   ebx
c002343e:	83 ec 1c             	sub    esp,0x1c
c0023441:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023445:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023449:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002344c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023450:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023454:	80 f9 03             	cmp    cl,0x3
c0023457:	77 51                	ja     c00234aa <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002345d:	0f b6 f2             	movzx  esi,dl
c0023460:	0f b6 db             	movzx  ebx,bl
c0023463:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023466:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002346a:	83 ca 80             	or     edx,0xffffff80
c002346d:	0f b6 d2             	movzx  edx,dl
c0023470:	52                   	push   edx
c0023471:	6a 0c                	push   0xc
c0023473:	56                   	push   esi
c0023474:	57                   	push   edi
c0023475:	e8 c0 ff ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002347a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002347f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023483:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023487:	ee                   	out    dx,al
c0023488:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002348d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023491:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023495:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023499:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00234a1:	83 c4 2c             	add    esp,0x2c
c00234a4:	5b                   	pop    ebx
c00234a5:	5e                   	pop    esi
c00234a6:	5f                   	pop    edi
c00234a7:	5d                   	pop    ebp
c00234a8:	eb 90                	jmp    c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234aa:	80 fb 07             	cmp    bl,0x7
c00234ad:	77 12                	ja     c00234c1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00234af:	0f b6 d2             	movzx  edx,dl
c00234b2:	0f b6 db             	movzx  ebx,bl
c00234b5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00234bd:	89 da                	mov    edx,ebx
c00234bf:	eb 2f                	jmp    c00234f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00234c1:	80 fb 0d             	cmp    bl,0xd
c00234c4:	77 13                	ja     c00234d9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00234c6:	0f b6 d2             	movzx  edx,dl
c00234c9:	0f b6 db             	movzx  ebx,bl
c00234cc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00234d3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00234d7:	eb 17                	jmp    c00234f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00234d9:	80 fb 15             	cmp    bl,0x15
c00234dc:	77 13                	ja     c00234f1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00234de:	0f b6 d2             	movzx  edx,dl
c00234e1:	0f b6 db             	movzx  ebx,bl
c00234e4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00234ec:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00234f0:	ee                   	out    dx,al
c00234f1:	83 c4 1c             	add    esp,0x1c
c00234f4:	5b                   	pop    ebx
c00234f5:	5e                   	pop    esi
c00234f6:	5f                   	pop    edi
c00234f7:	5d                   	pop    ebp
c00234f8:	c3                   	ret    
c00234f9:	90                   	nop

c00234fa <IDE::read(unsigned char, unsigned char)>:
c00234fa:	55                   	push   ebp
c00234fb:	57                   	push   edi
c00234fc:	56                   	push   esi
c00234fd:	53                   	push   ebx
c00234fe:	83 ec 1c             	sub    esp,0x1c
c0023501:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023505:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023509:	8d 43 f8             	lea    eax,[ebx-0x8]
c002350c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023510:	3c 03                	cmp    al,0x3
c0023512:	77 43                	ja     c0023557 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023514:	0f b6 f2             	movzx  esi,dl
c0023517:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002351a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002351e:	83 c8 80             	or     eax,0xffffff80
c0023521:	0f b6 c0             	movzx  eax,al
c0023524:	50                   	push   eax
c0023525:	6a 0c                	push   0xc
c0023527:	56                   	push   esi
c0023528:	57                   	push   edi
c0023529:	e8 0c ff ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002352e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023533:	0f b6 c3             	movzx  eax,bl
c0023536:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002353a:	ec                   	in     al,dx
c002353b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002353f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023544:	52                   	push   edx
c0023545:	6a 0c                	push   0xc
c0023547:	56                   	push   esi
c0023548:	57                   	push   edi
c0023549:	e8 ec fe ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002354e:	83 c4 20             	add    esp,0x20
c0023551:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023555:	eb 49                	jmp    c00235a0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023557:	80 fb 07             	cmp    bl,0x7
c002355a:	77 12                	ja     c002356e <IDE::read(unsigned char, unsigned char)+0x74>
c002355c:	0f b6 d2             	movzx  edx,dl
c002355f:	0f b6 c3             	movzx  eax,bl
c0023562:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002356a:	89 c2                	mov    edx,eax
c002356c:	eb 31                	jmp    c002359f <IDE::read(unsigned char, unsigned char)+0xa5>
c002356e:	80 fb 0d             	cmp    bl,0xd
c0023571:	77 13                	ja     c0023586 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023573:	0f b6 d2             	movzx  edx,dl
c0023576:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002357d:	0f b6 d3             	movzx  edx,bl
c0023580:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023584:	eb 19                	jmp    c002359f <IDE::read(unsigned char, unsigned char)+0xa5>
c0023586:	31 c0                	xor    eax,eax
c0023588:	80 fb 15             	cmp    bl,0x15
c002358b:	77 13                	ja     c00235a0 <IDE::read(unsigned char, unsigned char)+0xa6>
c002358d:	0f b6 d2             	movzx  edx,dl
c0023590:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023598:	0f b6 d3             	movzx  edx,bl
c002359b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002359f:	ec                   	in     al,dx
c00235a0:	83 c4 1c             	add    esp,0x1c
c00235a3:	5b                   	pop    ebx
c00235a4:	5e                   	pop    esi
c00235a5:	5f                   	pop    edi
c00235a6:	5d                   	pop    ebp
c00235a7:	c3                   	ret    

c00235a8 <IDE::waitInterrupt(unsigned char)>:
c00235a8:	55                   	push   ebp
c00235a9:	57                   	push   edi
c00235aa:	56                   	push   esi
c00235ab:	53                   	push   ebx
c00235ac:	31 db                	xor    ebx,ebx
c00235ae:	83 ec 0c             	sub    esp,0xc
c00235b1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00235b5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00235ba:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00235c2:	89 e8                	mov    eax,ebp
c00235c4:	84 c0                	test   al,al
c00235c6:	75 34                	jne    c00235fc <IDE::waitInterrupt(unsigned char)+0x54>
c00235c8:	52                   	push   edx
c00235c9:	6a 0c                	push   0xc
c00235cb:	56                   	push   esi
c00235cc:	57                   	push   edi
c00235cd:	e8 28 ff ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c00235d2:	83 c4 10             	add    esp,0x10
c00235d5:	a8 01                	test   al,0x1
c00235d7:	75 2b                	jne    c0023604 <IDE::waitInterrupt(unsigned char)+0x5c>
c00235d9:	f6 c3 04             	test   bl,0x4
c00235dc:	75 16                	jne    c00235f4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00235de:	83 fb 32             	cmp    ebx,0x32
c00235e1:	7e 11                	jle    c00235f4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00235e3:	50                   	push   eax
c00235e4:	50                   	push   eax
c00235e5:	6a 00                	push   0x0
c00235e7:	68 80 96 98 00       	push   0x989680
c00235ec:	e8 a0 aa ff ff       	call   c001e091 <nanoSleep(unsigned long long)>
c00235f1:	83 c4 10             	add    esp,0x10
c00235f4:	83 fb 3c             	cmp    ebx,0x3c
c00235f7:	74 0b                	je     c0023604 <IDE::waitInterrupt(unsigned char)+0x5c>
c00235f9:	43                   	inc    ebx
c00235fa:	eb be                	jmp    c00235ba <IDE::waitInterrupt(unsigned char)+0x12>
c00235fc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023604:	83 c4 0c             	add    esp,0xc
c0023607:	89 e8                	mov    eax,ebp
c0023609:	5b                   	pop    ebx
c002360a:	5e                   	pop    esi
c002360b:	5f                   	pop    edi
c002360c:	5d                   	pop    ebp
c002360d:	c3                   	ret    

c002360e <ideChannel0IRQHandler(regs*, void*)>:
c002360e:	83 ec 10             	sub    esp,0x10
c0023611:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023615:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002361c:	6a 07                	push   0x7
c002361e:	6a 00                	push   0x0
c0023620:	50                   	push   eax
c0023621:	e8 d4 fe ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023626:	83 c4 1c             	add    esp,0x1c
c0023629:	c3                   	ret    

c002362a <ideChannel1IRQHandler(regs*, void*)>:
c002362a:	83 ec 10             	sub    esp,0x10
c002362d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023631:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023638:	6a 07                	push   0x7
c002363a:	6a 01                	push   0x1
c002363c:	50                   	push   eax
c002363d:	e8 b8 fe ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023642:	83 c4 1c             	add    esp,0x1c
c0023645:	c3                   	ret    

c0023646 <IDE::enableIRQs(unsigned char, bool)>:
c0023646:	57                   	push   edi
c0023647:	56                   	push   esi
c0023648:	be 04 00 00 00       	mov    esi,0x4
c002364d:	53                   	push   ebx
c002364e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023657:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002365c:	0f 94 c0             	sete   al
c002365f:	d1 e0                	shl    eax,1
c0023661:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023668:	0f b6 c0             	movzx  eax,al
c002366b:	50                   	push   eax
c002366c:	6a 0c                	push   0xc
c002366e:	57                   	push   edi
c002366f:	53                   	push   ebx
c0023670:	e8 c5 fd ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023675:	83 c4 10             	add    esp,0x10
c0023678:	50                   	push   eax
c0023679:	6a 0c                	push   0xc
c002367b:	57                   	push   edi
c002367c:	53                   	push   ebx
c002367d:	e8 78 fe ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023682:	83 c4 10             	add    esp,0x10
c0023685:	4e                   	dec    esi
c0023686:	75 f0                	jne    c0023678 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023688:	5b                   	pop    ebx
c0023689:	5e                   	pop    esi
c002368a:	5f                   	pop    edi
c002368b:	c3                   	ret    

c002368c <IDE::open(int, int, void*)>:
c002368c:	55                   	push   ebp
c002368d:	57                   	push   edi
c002368e:	56                   	push   esi
c002368f:	53                   	push   ebx
c0023690:	83 ec 1c             	sub    esp,0x1c
c0023693:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023697:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00236a0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00236a9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00236b0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00236b7:	0f 85 b0 02 00 00    	jne    c002396d <IDE::open(int, int, void*)+0x2e1>
c00236bd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00236c3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00236c7:	83 e0 7f             	and    eax,0x7f
c00236ca:	3c 05                	cmp    al,0x5
c00236cc:	74 04                	je     c00236d2 <IDE::open(int, int, void*)+0x46>
c00236ce:	3c 0f                	cmp    al,0xf
c00236d0:	75 32                	jne    c0023704 <IDE::open(int, int, void*)+0x78>
c00236d2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00236d8:	83 e0 fc             	and    eax,0xfffffffc
c00236db:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00236e2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00236e8:	83 e0 fc             	and    eax,0xfffffffc
c00236eb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00236f2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00236f8:	83 e0 fc             	and    eax,0xfffffffc
c00236fb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023702:	eb 14                	jmp    c0023718 <IDE::open(int, int, void*)+0x8c>
c0023704:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002370e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023718:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002371f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023726:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002372a:	89 c6                	mov    esi,eax
c002372c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023731:	c1 e6 10             	shl    esi,0x10
c0023734:	89 e8                	mov    eax,ebp
c0023736:	89 fa                	mov    edx,edi
c0023738:	c1 e0 0b             	shl    eax,0xb
c002373b:	09 f0                	or     eax,esi
c002373d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023744:	c1 e6 08             	shl    esi,0x8
c0023747:	09 c6                	or     esi,eax
c0023749:	89 f0                	mov    eax,esi
c002374b:	0d 08 00 00 80       	or     eax,0x80000008
c0023750:	ef                   	out    dx,eax
c0023751:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023756:	89 ca                	mov    edx,ecx
c0023758:	ed                   	in     eax,dx
c0023759:	c1 e8 10             	shr    eax,0x10
c002375c:	3d ff ff 00 00       	cmp    eax,0xffff
c0023761:	0f 84 f5 00 00 00    	je     c002385c <IDE::open(int, int, void*)+0x1d0>
c0023767:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002376d:	89 fa                	mov    edx,edi
c002376f:	89 f0                	mov    eax,esi
c0023771:	ef                   	out    dx,eax
c0023772:	b0 fe                	mov    al,0xfe
c0023774:	89 ca                	mov    edx,ecx
c0023776:	ee                   	out    dx,al
c0023777:	89 f0                	mov    eax,esi
c0023779:	89 fa                	mov    edx,edi
c002377b:	ef                   	out    dx,eax
c002377c:	89 ca                	mov    edx,ecx
c002377e:	ed                   	in     eax,dx
c002377f:	3c fe                	cmp    al,0xfe
c0023781:	0f 85 a9 00 00 00    	jne    c0023830 <IDE::open(int, int, void*)+0x1a4>
c0023787:	8b 15 c8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c8
c002378d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023794:	74 33                	je     c00237c9 <IDE::open(int, int, void*)+0x13d>
c0023796:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002379c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00237a0:	40                   	inc    eax
c00237a1:	83 ec 0c             	sub    esp,0xc
c00237a4:	0f b6 c0             	movzx  eax,al
c00237a7:	50                   	push   eax
c00237a8:	55                   	push   ebp
c00237a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00237ad:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00237b3:	51                   	push   ecx
c00237b4:	e8 95 46 ff ff       	call   c0017e4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00237b9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00237be:	83 c4 1c             	add    esp,0x1c
c00237c1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00237c7:	eb 0a                	jmp    c00237d3 <IDE::open(int, int, void*)+0x147>
c00237c9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00237d3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00237da:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00237e1:	c1 e1 10             	shl    ecx,0x10
c00237e4:	c1 e0 08             	shl    eax,0x8
c00237e7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00237ec:	09 c1                	or     ecx,eax
c00237ee:	89 fa                	mov    edx,edi
c00237f0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00237f7:	c1 e0 0b             	shl    eax,0xb
c00237fa:	09 c1                	or     ecx,eax
c00237fc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023802:	89 c8                	mov    eax,ecx
c0023804:	ef                   	out    dx,eax
c0023805:	be fc 0c 00 00       	mov    esi,0xcfc
c002380a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023810:	89 f2                	mov    edx,esi
c0023812:	ee                   	out    dx,al
c0023813:	89 c8                	mov    eax,ecx
c0023815:	89 fa                	mov    edx,edi
c0023817:	ef                   	out    dx,eax
c0023818:	89 f2                	mov    edx,esi
c002381a:	ed                   	in     eax,dx
c002381b:	0f b6 c0             	movzx  eax,al
c002381e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023824:	74 46                	je     c002386c <IDE::open(int, int, void*)+0x1e0>
c0023826:	83 ec 0c             	sub    esp,0xc
c0023829:	68 e0 cb 02 c0       	push   0xc002cbe0
c002382e:	eb 34                	jmp    c0023864 <IDE::open(int, int, void*)+0x1d8>
c0023830:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023839:	75 17                	jne    c0023852 <IDE::open(int, int, void*)+0x1c6>
c002383b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023840:	74 07                	je     c0023849 <IDE::open(int, int, void*)+0x1bd>
c0023842:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023847:	75 09                	jne    c0023852 <IDE::open(int, int, void*)+0x1c6>
c0023849:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023850:	eb 1a                	jmp    c002386c <IDE::open(int, int, void*)+0x1e0>
c0023852:	83 ec 0c             	sub    esp,0xc
c0023855:	68 e8 cb 02 c0       	push   0xc002cbe8
c002385a:	eb 08                	jmp    c0023864 <IDE::open(int, int, void*)+0x1d8>
c002385c:	83 ec 0c             	sub    esp,0xc
c002385f:	68 19 cc 02 c0       	push   0xc002cc19
c0023864:	e8 bc 69 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0023869:	83 c4 10             	add    esp,0x10
c002386c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023873:	79 1a                	jns    c002388f <IDE::open(int, int, void*)+0x203>
c0023875:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002387b:	83 e0 fc             	and    eax,0xfffffffc
c002387e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023885:	83 c0 08             	add    eax,0x8
c0023888:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002388f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023895:	89 c2                	mov    edx,eax
c0023897:	83 e2 0f             	and    edx,0xf
c002389a:	66 83 fa 08          	cmp    dx,0x8
c002389e:	75 0a                	jne    c00238aa <IDE::open(int, int, void*)+0x21e>
c00238a0:	83 e8 02             	sub    eax,0x2
c00238a3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00238aa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00238b0:	89 c2                	mov    edx,eax
c00238b2:	83 e2 0f             	and    edx,0xf
c00238b5:	66 83 fa 08          	cmp    dx,0x8
c00238b9:	75 0a                	jne    c00238c5 <IDE::open(int, int, void*)+0x239>
c00238bb:	83 e8 02             	sub    eax,0x2
c00238be:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00238c5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00238cc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00238d3:	89 d0                	mov    eax,edx
c00238d5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00238d8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00238dc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00238e0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00238e3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00238e8:	0f b6 c9             	movzx  ecx,cl
c00238eb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00238f2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00238f5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00238f9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00238fd:	8d 50 02             	lea    edx,[eax+0x2]
c0023900:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023905:	0f b6 d2             	movzx  edx,dl
c0023908:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002390e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023911:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023915:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023919:	8d 48 03             	lea    ecx,[eax+0x3]
c002391c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023921:	0f b6 c9             	movzx  ecx,cl
c0023924:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002392a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002392d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023931:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023935:	8d 50 04             	lea    edx,[eax+0x4]
c0023938:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002393e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023943:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002394a:	66 85 f6             	test   si,si
c002394d:	74 5b                	je     c00239aa <IDE::open(int, int, void*)+0x31e>
c002394f:	0f b6 d2             	movzx  edx,dl
c0023952:	83 c0 05             	add    eax,0x5
c0023955:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023958:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002395c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023960:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023966:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002396b:	eb 3d                	jmp    c00239aa <IDE::open(int, int, void*)+0x31e>
c002396d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023973:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002397a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023981:	66 05 06 02          	add    ax,0x206
c0023985:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002398c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023993:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002399a:	66 05 06 02          	add    ax,0x206
c002399e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00239a5:	e9 e5 fe ff ff       	jmp    c002388f <IDE::open(int, int, void*)+0x203>
c00239aa:	50                   	push   eax
c00239ab:	50                   	push   eax
c00239ac:	6a 00                	push   0x0
c00239ae:	53                   	push   ebx
c00239af:	e8 60 fa ff ff       	call   c0023414 <IDE::prepareInterrupt(unsigned char)>
c00239b4:	5a                   	pop    edx
c00239b5:	59                   	pop    ecx
c00239b6:	6a 01                	push   0x1
c00239b8:	53                   	push   ebx
c00239b9:	e8 56 fa ff ff       	call   c0023414 <IDE::prepareInterrupt(unsigned char)>
c00239be:	83 c4 0c             	add    esp,0xc
c00239c1:	6a 00                	push   0x0
c00239c3:	6a 00                	push   0x0
c00239c5:	53                   	push   ebx
c00239c6:	e8 7b fc ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c00239cb:	83 c4 0c             	add    esp,0xc
c00239ce:	6a 00                	push   0x0
c00239d0:	6a 01                	push   0x1
c00239d2:	53                   	push   ebx
c00239d3:	e8 6e fc ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c00239d8:	83 c4 10             	add    esp,0x10
c00239db:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00239e2:	74 34                	je     c0023a18 <IDE::open(int, int, void*)+0x38c>
c00239e4:	83 ec 0c             	sub    esp,0xc
c00239e7:	53                   	push   ebx
c00239e8:	6a 01                	push   0x1
c00239ea:	68 0e 36 02 c0       	push   0xc002360e
c00239ef:	6a 0e                	push   0xe
c00239f1:	53                   	push   ebx
c00239f2:	e8 41 02 ff ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239f7:	83 c4 14             	add    esp,0x14
c00239fa:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023a00:	53                   	push   ebx
c0023a01:	6a 01                	push   0x1
c0023a03:	68 2a 36 02 c0       	push   0xc002362a
c0023a08:	6a 0f                	push   0xf
c0023a0a:	53                   	push   ebx
c0023a0b:	e8 28 02 ff ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023a10:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023a16:	eb 38                	jmp    c0023a50 <IDE::open(int, int, void*)+0x3c4>
c0023a18:	83 ec 0c             	sub    esp,0xc
c0023a1b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023a25:	53                   	push   ebx
c0023a26:	6a 00                	push   0x0
c0023a28:	68 0e 36 02 c0       	push   0xc002360e
c0023a2d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023a33:	53                   	push   ebx
c0023a34:	e8 ff 01 ff ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023a39:	83 c4 14             	add    esp,0x14
c0023a3c:	53                   	push   ebx
c0023a3d:	6a 00                	push   0x0
c0023a3f:	68 2a 36 02 c0       	push   0xc002362a
c0023a44:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023a4a:	53                   	push   ebx
c0023a4b:	e8 e8 01 ff ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023a50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a52:	83 c4 20             	add    esp,0x20
c0023a55:	83 ec 0c             	sub    esp,0xc
c0023a58:	53                   	push   ebx
c0023a59:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023a5c:	83 c4 0c             	add    esp,0xc
c0023a5f:	6a 07                	push   0x7
c0023a61:	6a 00                	push   0x0
c0023a63:	53                   	push   ebx
c0023a64:	e8 91 fa ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023a69:	83 c4 0c             	add    esp,0xc
c0023a6c:	6a 07                	push   0x7
c0023a6e:	6a 01                	push   0x1
c0023a70:	53                   	push   ebx
c0023a71:	e8 84 fa ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023a76:	83 c4 0c             	add    esp,0xc
c0023a79:	6a 01                	push   0x1
c0023a7b:	6a 00                	push   0x0
c0023a7d:	53                   	push   ebx
c0023a7e:	e8 c3 fb ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c0023a83:	83 c4 0c             	add    esp,0xc
c0023a86:	6a 01                	push   0x1
c0023a88:	6a 01                	push   0x1
c0023a8a:	53                   	push   ebx
c0023a8b:	e8 b6 fb ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c0023a90:	83 c4 2c             	add    esp,0x2c
c0023a93:	31 c0                	xor    eax,eax
c0023a95:	5b                   	pop    ebx
c0023a96:	5e                   	pop    esi
c0023a97:	5f                   	pop    edi
c0023a98:	5d                   	pop    ebp
c0023a99:	c3                   	ret    

c0023a9a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023a9a:	55                   	push   ebp
c0023a9b:	57                   	push   edi
c0023a9c:	56                   	push   esi
c0023a9d:	53                   	push   ebx
c0023a9e:	83 ec 1c             	sub    esp,0x1c
c0023aa1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023aa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023aa9:	8d 50 f8             	lea    edx,[eax-0x8]
c0023aac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ab0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023ab4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023ab8:	80 fa 03             	cmp    dl,0x3
c0023abb:	77 5d                	ja     c0023b1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023abd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ac5:	0f b6 db             	movzx  ebx,bl
c0023ac8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023acb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023acf:	83 ca 80             	or     edx,0xffffff80
c0023ad2:	0f b6 d2             	movzx  edx,dl
c0023ad5:	52                   	push   edx
c0023ad6:	6a 0c                	push   0xc
c0023ad8:	53                   	push   ebx
c0023ad9:	56                   	push   esi
c0023ada:	e8 5b f9 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023adf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ae8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023aec:	0f b6 c0             	movzx  eax,al
c0023aef:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023af3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023af5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023afa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023afe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023b02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023b06:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023b0e:	83 c4 2c             	add    esp,0x2c
c0023b11:	5b                   	pop    ebx
c0023b12:	5e                   	pop    esi
c0023b13:	5f                   	pop    edi
c0023b14:	5d                   	pop    ebp
c0023b15:	e9 20 f9 ff ff       	jmp    c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b1a:	3c 07                	cmp    al,0x7
c0023b1c:	77 10                	ja     c0023b2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023b1e:	0f b6 db             	movzx  ebx,bl
c0023b21:	0f b6 d0             	movzx  edx,al
c0023b24:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023b2c:	eb 2d                	jmp    c0023b5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023b2e:	3c 0d                	cmp    al,0xd
c0023b30:	77 13                	ja     c0023b45 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023b32:	0f b6 db             	movzx  ebx,bl
c0023b35:	0f b6 c0             	movzx  eax,al
c0023b38:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023b3f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023b43:	eb 16                	jmp    c0023b5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023b45:	3c 15                	cmp    al,0x15
c0023b47:	77 14                	ja     c0023b5d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023b49:	0f b6 db             	movzx  ebx,bl
c0023b4c:	0f b6 c0             	movzx  eax,al
c0023b4f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023b57:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023b5b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023b5d:	83 c4 1c             	add    esp,0x1c
c0023b60:	5b                   	pop    ebx
c0023b61:	5e                   	pop    esi
c0023b62:	5f                   	pop    edi
c0023b63:	5d                   	pop    ebp
c0023b64:	c3                   	ret    
c0023b65:	90                   	nop

c0023b66 <IDE::detect()>:
c0023b66:	55                   	push   ebp
c0023b67:	57                   	push   edi
c0023b68:	56                   	push   esi
c0023b69:	53                   	push   ebx
c0023b6a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023b70:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023b77:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023b7e:	0f 85 9d 02 00 00    	jne    c0023e21 <IDE::detect()+0x2bb>
c0023b84:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023b8b:	31 f6                	xor    esi,esi
c0023b8d:	31 ed                	xor    ebp,ebp
c0023b8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023b97:	89 e8                	mov    eax,ebp
c0023b99:	c1 e0 06             	shl    eax,0x6
c0023b9c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023ba4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023ba8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023bac:	c1 e0 04             	shl    eax,0x4
c0023baf:	83 c8 a0             	or     eax,0xffffffa0
c0023bb2:	0f b6 c0             	movzx  eax,al
c0023bb5:	50                   	push   eax
c0023bb6:	6a 06                	push   0x6
c0023bb8:	56                   	push   esi
c0023bb9:	53                   	push   ebx
c0023bba:	e8 7b f8 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bbf:	83 c4 0c             	add    esp,0xc
c0023bc2:	6a 0c                	push   0xc
c0023bc4:	56                   	push   esi
c0023bc5:	53                   	push   ebx
c0023bc6:	e8 2f f9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023bcb:	83 c4 0c             	add    esp,0xc
c0023bce:	6a 0c                	push   0xc
c0023bd0:	56                   	push   esi
c0023bd1:	53                   	push   ebx
c0023bd2:	e8 23 f9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023bd7:	83 c4 0c             	add    esp,0xc
c0023bda:	6a 0c                	push   0xc
c0023bdc:	56                   	push   esi
c0023bdd:	53                   	push   ebx
c0023bde:	e8 17 f9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023be3:	83 c4 0c             	add    esp,0xc
c0023be6:	6a 0c                	push   0xc
c0023be8:	56                   	push   esi
c0023be9:	53                   	push   ebx
c0023bea:	e8 0b f9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023bef:	68 ec 00 00 00       	push   0xec
c0023bf4:	6a 07                	push   0x7
c0023bf6:	56                   	push   esi
c0023bf7:	53                   	push   ebx
c0023bf8:	e8 3d f8 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bfd:	83 c4 1c             	add    esp,0x1c
c0023c00:	6a 0c                	push   0xc
c0023c02:	56                   	push   esi
c0023c03:	53                   	push   ebx
c0023c04:	e8 f1 f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c09:	83 c4 0c             	add    esp,0xc
c0023c0c:	6a 0c                	push   0xc
c0023c0e:	56                   	push   esi
c0023c0f:	53                   	push   ebx
c0023c10:	e8 e5 f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c15:	83 c4 0c             	add    esp,0xc
c0023c18:	6a 0c                	push   0xc
c0023c1a:	56                   	push   esi
c0023c1b:	53                   	push   ebx
c0023c1c:	e8 d9 f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c21:	83 c4 0c             	add    esp,0xc
c0023c24:	6a 0c                	push   0xc
c0023c26:	56                   	push   esi
c0023c27:	53                   	push   ebx
c0023c28:	e8 cd f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c2d:	83 c4 0c             	add    esp,0xc
c0023c30:	6a 0c                	push   0xc
c0023c32:	56                   	push   esi
c0023c33:	53                   	push   ebx
c0023c34:	e8 c1 f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c39:	83 c4 10             	add    esp,0x10
c0023c3c:	84 c0                	test   al,al
c0023c3e:	0f 84 63 01 00 00    	je     c0023da7 <IDE::detect()+0x241>
c0023c44:	31 ff                	xor    edi,edi
c0023c46:	50                   	push   eax
c0023c47:	6a 0c                	push   0xc
c0023c49:	56                   	push   esi
c0023c4a:	53                   	push   ebx
c0023c4b:	e8 aa f8 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023c50:	83 c4 10             	add    esp,0x10
c0023c53:	a8 01                	test   al,0x1
c0023c55:	0f 85 6d 01 00 00    	jne    c0023dc8 <IDE::detect()+0x262>
c0023c5b:	84 c0                	test   al,al
c0023c5d:	78 04                	js     c0023c63 <IDE::detect()+0xfd>
c0023c5f:	a8 08                	test   al,0x8
c0023c61:	75 27                	jne    c0023c8a <IDE::detect()+0x124>
c0023c63:	47                   	inc    edi
c0023c64:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023c6a:	7e da                	jle    c0023c46 <IDE::detect()+0xe0>
c0023c6c:	50                   	push   eax
c0023c6d:	50                   	push   eax
c0023c6e:	6a 00                	push   0x0
c0023c70:	68 40 4b 4c 00       	push   0x4c4b40
c0023c75:	e8 17 a4 ff ff       	call   c001e091 <nanoSleep(unsigned long long)>
c0023c7a:	83 c4 10             	add    esp,0x10
c0023c7d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023c83:	75 c1                	jne    c0023c46 <IDE::detect()+0xe0>
c0023c85:	e9 3e 01 00 00       	jmp    c0023dc8 <IDE::detect()+0x262>
c0023c8a:	31 c9                	xor    ecx,ecx
c0023c8c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023c90:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023c94:	83 ec 0c             	sub    esp,0xc
c0023c97:	68 80 00 00 00       	push   0x80
c0023c9c:	57                   	push   edi
c0023c9d:	6a 00                	push   0x0
c0023c9f:	56                   	push   esi
c0023ca0:	53                   	push   ebx
c0023ca1:	e8 f4 fd ff ff       	call   c0023a9a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023ca6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023cab:	89 e8                	mov    eax,ebp
c0023cad:	89 d1                	mov    ecx,edx
c0023caf:	c1 e0 06             	shl    eax,0x6
c0023cb2:	01 d8                	add    eax,ebx
c0023cb4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023cbb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023cc2:	89 f2                	mov    edx,esi
c0023cc4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023cca:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023cce:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023cd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023cd8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023cdf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023ce7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023cee:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023cf6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023cfc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023d03:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023d09:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023d0d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023d11:	83 c4 20             	add    esp,0x20
c0023d14:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023d17:	83 c0 02             	add    eax,0x2
c0023d1a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023d20:	83 c7 02             	add    edi,0x2
c0023d23:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023d26:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023d2c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023d30:	75 e2                	jne    c0023d14 <IDE::detect()+0x1ae>
c0023d32:	89 e8                	mov    eax,ebp
c0023d34:	c1 e0 06             	shl    eax,0x6
c0023d37:	01 d8                	add    eax,ebx
c0023d39:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023d3f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023d46:	66 c1 ea 09          	shr    dx,0x9
c0023d4a:	83 e2 01             	and    edx,0x1
c0023d4d:	84 c9                	test   cl,cl
c0023d4f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023d55:	75 22                	jne    c0023d79 <IDE::detect()+0x213>
c0023d57:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023d5e:	74 46                	je     c0023da6 <IDE::detect()+0x240>
c0023d60:	83 ec 0c             	sub    esp,0xc
c0023d63:	68 7c 01 00 00       	push   0x17c
c0023d68:	e8 ae ba fe ff       	call   c000f81b <malloc>
c0023d6d:	89 c7                	mov    edi,eax
c0023d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d72:	e8 15 05 00 00       	call   c002428c <ATA::ATA()>
c0023d77:	eb 17                	jmp    c0023d90 <IDE::detect()+0x22a>
c0023d79:	83 ec 0c             	sub    esp,0xc
c0023d7c:	68 80 01 00 00       	push   0x180
c0023d81:	e8 95 ba fe ff       	call   c000f81b <malloc>
c0023d86:	89 c7                	mov    edi,eax
c0023d88:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d8b:	e8 88 0b 00 00       	call   c0024918 <ATAPI::ATAPI()>
c0023d90:	5a                   	pop    edx
c0023d91:	59                   	pop    ecx
c0023d92:	57                   	push   edi
c0023d93:	53                   	push   ebx
c0023d94:	e8 27 ff fe ff       	call   c0013cc0 <Device::addChild(Device*)>
c0023d99:	8b 07                	mov    eax,DWORD PTR [edi]
c0023d9b:	53                   	push   ebx
c0023d9c:	55                   	push   ebp
c0023d9d:	6a 00                	push   0x0
c0023d9f:	57                   	push   edi
c0023da0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023da3:	83 c4 20             	add    esp,0x20
c0023da6:	45                   	inc    ebp
c0023da7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023dac:	74 0d                	je     c0023dbb <IDE::detect()+0x255>
c0023dae:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023db6:	e9 dc fd ff ff       	jmp    c0023b97 <IDE::detect()+0x31>
c0023dbb:	4e                   	dec    esi
c0023dbc:	74 63                	je     c0023e21 <IDE::detect()+0x2bb>
c0023dbe:	be 01 00 00 00       	mov    esi,0x1
c0023dc3:	e9 c7 fd ff ff       	jmp    c0023b8f <IDE::detect()+0x29>
c0023dc8:	50                   	push   eax
c0023dc9:	6a 04                	push   0x4
c0023dcb:	56                   	push   esi
c0023dcc:	53                   	push   ebx
c0023dcd:	e8 28 f7 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023dd2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023dd6:	83 c4 0c             	add    esp,0xc
c0023dd9:	6a 05                	push   0x5
c0023ddb:	56                   	push   esi
c0023ddc:	53                   	push   ebx
c0023ddd:	e8 18 f7 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023de2:	83 c4 10             	add    esp,0x10
c0023de5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023de9:	80 fa 14             	cmp    dl,0x14
c0023dec:	75 04                	jne    c0023df2 <IDE::detect()+0x28c>
c0023dee:	3c eb                	cmp    al,0xeb
c0023df0:	eb 07                	jmp    c0023df9 <IDE::detect()+0x293>
c0023df2:	3c 96                	cmp    al,0x96
c0023df4:	75 b1                	jne    c0023da7 <IDE::detect()+0x241>
c0023df6:	80 fa 69             	cmp    dl,0x69
c0023df9:	75 ac                	jne    c0023da7 <IDE::detect()+0x241>
c0023dfb:	68 a1 00 00 00       	push   0xa1
c0023e00:	6a 07                	push   0x7
c0023e02:	56                   	push   esi
c0023e03:	53                   	push   ebx
c0023e04:	e8 31 f6 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e09:	5f                   	pop    edi
c0023e0a:	58                   	pop    eax
c0023e0b:	6a 00                	push   0x0
c0023e0d:	68 40 42 0f 00       	push   0xf4240
c0023e12:	e8 7a a2 ff ff       	call   c001e091 <nanoSleep(unsigned long long)>
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	b1 01                	mov    cl,0x1
c0023e1c:	e9 6b fe ff ff       	jmp    c0023c8c <IDE::detect()+0x126>
c0023e21:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023e27:	5b                   	pop    ebx
c0023e28:	5e                   	pop    esi
c0023e29:	5f                   	pop    edi
c0023e2a:	5d                   	pop    ebp
c0023e2b:	c3                   	ret    

c0023e2c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023e2c:	55                   	push   ebp
c0023e2d:	57                   	push   edi
c0023e2e:	56                   	push   esi
c0023e2f:	53                   	push   ebx
c0023e30:	83 ec 1c             	sub    esp,0x1c
c0023e33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023e37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023e3b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023e3f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023e43:	88 c3                	mov    bl,al
c0023e45:	84 c0                	test   al,al
c0023e47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e4b:	0f 84 81 00 00 00    	je     c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e51:	83 ec 0c             	sub    esp,0xc
c0023e54:	68 43 cc 02 c0       	push   0xc002cc43
c0023e59:	e8 1e ea fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0023e5e:	83 c4 10             	add    esp,0x10
c0023e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e65:	3c 01                	cmp    al,0x1
c0023e67:	74 63                	je     c0023ecc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023e69:	3c 02                	cmp    al,0x2
c0023e6b:	75 53                	jne    c0023ec0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023e6d:	d1 e6                	shl    esi,1
c0023e6f:	09 ee                	or     esi,ebp
c0023e71:	50                   	push   eax
c0023e72:	89 f0                	mov    eax,esi
c0023e74:	6a 01                	push   0x1
c0023e76:	0f b6 f0             	movzx  esi,al
c0023e79:	c1 e6 06             	shl    esi,0x6
c0023e7c:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023e84:	50                   	push   eax
c0023e85:	57                   	push   edi
c0023e86:	e8 6f f6 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023e8b:	83 c4 10             	add    esp,0x10
c0023e8e:	a8 01                	test   al,0x1
c0023e90:	74 02                	je     c0023e94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023e92:	b3 07                	mov    bl,0x7
c0023e94:	a8 02                	test   al,0x2
c0023e96:	74 02                	je     c0023e9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023e98:	b3 03                	mov    bl,0x3
c0023e9a:	a8 04                	test   al,0x4
c0023e9c:	74 02                	je     c0023ea0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023e9e:	b3 14                	mov    bl,0x14
c0023ea0:	a8 08                	test   al,0x8
c0023ea2:	74 02                	je     c0023ea6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023ea4:	b3 03                	mov    bl,0x3
c0023ea6:	a8 10                	test   al,0x10
c0023ea8:	74 02                	je     c0023eac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023eaa:	b3 15                	mov    bl,0x15
c0023eac:	a8 20                	test   al,0x20
c0023eae:	74 02                	je     c0023eb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023eb0:	b3 03                	mov    bl,0x3
c0023eb2:	a8 40                	test   al,0x40
c0023eb4:	74 02                	je     c0023eb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023eb6:	b3 16                	mov    bl,0x16
c0023eb8:	84 c0                	test   al,al
c0023eba:	79 16                	jns    c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ebc:	b3 0d                	mov    bl,0xd
c0023ebe:	eb 12                	jmp    c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ec0:	3c 03                	cmp    al,0x3
c0023ec2:	74 0c                	je     c0023ed0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023ec4:	3c 04                	cmp    al,0x4
c0023ec6:	75 0a                	jne    c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ec8:	b3 08                	mov    bl,0x8
c0023eca:	eb 06                	jmp    c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ecc:	b3 13                	mov    bl,0x13
c0023ece:	eb 02                	jmp    c0023ed2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ed0:	b3 17                	mov    bl,0x17
c0023ed2:	83 c4 1c             	add    esp,0x1c
c0023ed5:	88 d8                	mov    al,bl
c0023ed7:	5b                   	pop    ebx
c0023ed8:	5e                   	pop    esi
c0023ed9:	5f                   	pop    edi
c0023eda:	5d                   	pop    ebp
c0023edb:	c3                   	ret    

c0023edc <IDE::polling(unsigned char, unsigned int)>:
c0023edc:	57                   	push   edi
c0023edd:	56                   	push   esi
c0023ede:	53                   	push   ebx
c0023edf:	bb 04 00 00 00       	mov    ebx,0x4
c0023ee4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ee8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023eed:	52                   	push   edx
c0023eee:	6a 0c                	push   0xc
c0023ef0:	56                   	push   esi
c0023ef1:	57                   	push   edi
c0023ef2:	e8 03 f6 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023ef7:	83 c4 10             	add    esp,0x10
c0023efa:	4b                   	dec    ebx
c0023efb:	75 f0                	jne    c0023eed <IDE::polling(unsigned char, unsigned int)+0x11>
c0023efd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023f02:	50                   	push   eax
c0023f03:	6a 0c                	push   0xc
c0023f05:	56                   	push   esi
c0023f06:	57                   	push   edi
c0023f07:	e8 ee f5 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0023f0c:	83 c4 10             	add    esp,0x10
c0023f0f:	a8 01                	test   al,0x1
c0023f11:	75 17                	jne    c0023f2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023f13:	a8 20                	test   al,0x20
c0023f15:	75 0f                	jne    c0023f26 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023f17:	4b                   	dec    ebx
c0023f18:	74 10                	je     c0023f2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023f1a:	84 c0                	test   al,al
c0023f1c:	78 e4                	js     c0023f02 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023f1e:	a8 08                	test   al,0x8
c0023f20:	74 e0                	je     c0023f02 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023f22:	31 c0                	xor    eax,eax
c0023f24:	eb 06                	jmp    c0023f2c <IDE::polling(unsigned char, unsigned int)+0x50>
c0023f26:	b0 01                	mov    al,0x1
c0023f28:	eb 02                	jmp    c0023f2c <IDE::polling(unsigned char, unsigned int)+0x50>
c0023f2a:	b0 02                	mov    al,0x2
c0023f2c:	5b                   	pop    ebx
c0023f2d:	5e                   	pop    esi
c0023f2e:	5f                   	pop    edi
c0023f2f:	c3                   	ret    

c0023f30 <SATABus::close(int, int, void*)>:
c0023f30:	31 c0                	xor    eax,eax
c0023f32:	c3                   	ret    
c0023f33:	90                   	nop

c0023f34 <SATABus::detect()>:
c0023f34:	c3                   	ret    
c0023f35:	90                   	nop

c0023f36 <SATABus::SATABus()>:
c0023f36:	83 ec 0c             	sub    esp,0xc
c0023f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f3d:	83 ec 08             	sub    esp,0x8
c0023f40:	68 7c cc 02 c0       	push   0xc002cc7c
c0023f45:	50                   	push   eax
c0023f46:	e8 23 01 ff ff       	call   c001406e <HardDiskController::HardDiskController(char const*)>
c0023f4b:	83 c4 10             	add    esp,0x10
c0023f4e:	ba d0 cc 02 c0       	mov    edx,0xc002ccd0
c0023f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f57:	89 10                	mov    DWORD PTR [eax],edx
c0023f59:	83 ec 0c             	sub    esp,0xc
c0023f5c:	6a 50                	push   0x50
c0023f5e:	e8 ac bd fe ff       	call   c000fd0f <Phys::allocateContiguousPages(int)>
c0023f63:	83 c4 10             	add    esp,0x10
c0023f66:	89 c2                	mov    edx,eax
c0023f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023f72:	83 ec 0c             	sub    esp,0xc
c0023f75:	6a 50                	push   0x50
c0023f77:	e8 25 d5 fe ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0023f7c:	83 c4 10             	add    esp,0x10
c0023f7f:	89 c2                	mov    edx,eax
c0023f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023f8b:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c0023f90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f94:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023f9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f9e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023fa4:	83 ec 0c             	sub    esp,0xc
c0023fa7:	6a 03                	push   0x3
c0023fa9:	6a 50                	push   0x50
c0023fab:	51                   	push   ecx
c0023fac:	52                   	push   edx
c0023fad:	50                   	push   eax
c0023fae:	e8 8b de fe ff       	call   c0011e3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023fb3:	83 c4 20             	add    esp,0x20
c0023fb6:	90                   	nop
c0023fb7:	83 c4 0c             	add    esp,0xc
c0023fba:	c3                   	ret    
c0023fbb:	90                   	nop

c0023fbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023fbc:	83 ec 0c             	sub    esp,0xc
c0023fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fc3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023fc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023fc9:	09 c2                	or     edx,eax
c0023fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fcf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023fd5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023fd7:	31 c0                	xor    eax,eax
c0023fd9:	c1 e9 08             	shr    ecx,0x8
c0023fdc:	83 e1 0f             	and    ecx,0xf
c0023fdf:	39 c8                	cmp    eax,ecx
c0023fe1:	74 0a                	je     c0023fed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023fe3:	f6 c2 01             	test   dl,0x1
c0023fe6:	74 18                	je     c0024000 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023fe8:	d1 ea                	shr    edx,1
c0023fea:	40                   	inc    eax
c0023feb:	eb f2                	jmp    c0023fdf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023fed:	83 ec 0c             	sub    esp,0xc
c0023ff0:	68 a0 cc 02 c0       	push   0xc002cca0
c0023ff5:	e8 2b 62 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0023ffa:	83 c4 10             	add    esp,0x10
c0023ffd:	83 c8 ff             	or     eax,0xffffffff
c0024000:	83 c4 0c             	add    esp,0xc
c0024003:	c3                   	ret    

c0024004 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024004:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024008:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002400b:	89 c2                	mov    edx,eax
c002400d:	c1 ea 08             	shr    edx,0x8
c0024010:	83 e2 0f             	and    edx,0xf
c0024013:	fe ca                	dec    dl
c0024015:	75 31                	jne    c0024048 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024017:	83 e0 0f             	and    eax,0xf
c002401a:	3c 03                	cmp    al,0x3
c002401c:	75 2a                	jne    c0024048 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002401e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024021:	b8 02 00 00 00       	mov    eax,0x2
c0024026:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002402c:	74 1c                	je     c002404a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002402e:	b8 04 00 00 00       	mov    eax,0x4
c0024033:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024039:	74 0f                	je     c002404a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002403b:	31 c0                	xor    eax,eax
c002403d:	83 fa 03             	cmp    edx,0x3
c0024040:	0f 94 c0             	sete   al
c0024043:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024047:	c3                   	ret    
c0024048:	31 c0                	xor    eax,eax
c002404a:	c3                   	ret    
c002404b:	90                   	nop

c002404c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002404c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024050:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024053:	0f ba e2 0f          	bt     edx,0xf
c0024057:	72 f7                	jb     c0024050 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024059:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002405c:	83 ca 10             	or     edx,0x10
c002405f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024062:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024065:	83 ca 01             	or     edx,0x1
c0024068:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002406b:	c3                   	ret    

c002406c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002406c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024070:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024073:	83 e2 fe             	and    edx,0xfffffffe
c0024076:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024079:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002407c:	83 e2 ef             	and    edx,0xffffffef
c002407f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024082:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024085:	0f ba e2 0e          	bt     edx,0xe
c0024089:	72 f7                	jb     c0024082 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002408b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002408e:	0f ba e2 0f          	bt     edx,0xf
c0024092:	72 ee                	jb     c0024082 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024094:	c3                   	ret    
c0024095:	90                   	nop

c0024096 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024096:	55                   	push   ebp
c0024097:	57                   	push   edi
c0024098:	56                   	push   esi
c0024099:	53                   	push   ebx
c002409a:	83 ec 1c             	sub    esp,0x1c
c002409d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00240a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00240a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00240a9:	53                   	push   ebx
c00240aa:	89 fd                	mov    ebp,edi
c00240ac:	56                   	push   esi
c00240ad:	c1 e5 0a             	shl    ebp,0xa
c00240b0:	e8 b7 ff ff ff       	call   c002406c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00240b5:	83 ec 0c             	sub    esp,0xc
c00240b8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00240be:	01 e8                	add    eax,ebp
c00240c0:	89 03                	mov    DWORD PTR [ebx],eax
c00240c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240c4:	68 00 04 00 00       	push   0x400
c00240c9:	6a 00                	push   0x0
c00240cb:	50                   	push   eax
c00240cc:	e8 7f c6 fd ff       	call   c0000750 <memset>
c00240d1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00240d7:	89 fa                	mov    edx,edi
c00240d9:	01 e8                	add    eax,ebp
c00240db:	c1 e7 0d             	shl    edi,0xd
c00240de:	89 03                	mov    DWORD PTR [ebx],eax
c00240e0:	c1 e2 08             	shl    edx,0x8
c00240e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00240ea:	81 c2 00 80 00 00    	add    edx,0x8000
c00240f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00240f4:	89 d0                	mov    eax,edx
c00240f6:	83 c4 1c             	add    esp,0x1c
c00240f9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00240ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024102:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024105:	68 00 01 00 00       	push   0x100
c002410a:	6a 00                	push   0x0
c002410c:	50                   	push   eax
c002410d:	e8 3e c6 fd ff       	call   c0000750 <memset>
c0024112:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024116:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002411c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024126:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024129:	83 c4 10             	add    esp,0x10
c002412c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024133:	31 ff                	xor    edi,edi
c0024135:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002413b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024141:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024145:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002414b:	83 c5 20             	add    ebp,0x20
c002414e:	01 f8                	add    eax,edi
c0024150:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024153:	52                   	push   edx
c0024154:	68 00 01 00 00       	push   0x100
c0024159:	6a 00                	push   0x0
c002415b:	50                   	push   eax
c002415c:	e8 ef c5 fd ff       	call   c0000750 <memset>
c0024161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024165:	83 c4 10             	add    esp,0x10
c0024168:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002416e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024175:	01 f8                	add    eax,edi
c0024177:	81 c7 00 01 00 00    	add    edi,0x100
c002417d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024180:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024186:	75 b3                	jne    c002413b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024188:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002418c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024190:	83 c4 1c             	add    esp,0x1c
c0024193:	5b                   	pop    ebx
c0024194:	5e                   	pop    esi
c0024195:	5f                   	pop    edi
c0024196:	5d                   	pop    ebp
c0024197:	e9 b0 fe ff ff       	jmp    c002404c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002419c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002419c:	55                   	push   ebp
c002419d:	57                   	push   edi
c002419e:	56                   	push   esi
c002419f:	53                   	push   ebx
c00241a0:	31 db                	xor    ebx,ebx
c00241a2:	83 ec 0c             	sub    esp,0xc
c00241a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00241a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241ad:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00241b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00241b6:	74 7a                	je     c0024232 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00241b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00241bc:	89 d8                	mov    eax,ebx
c00241be:	c1 e0 07             	shl    eax,0x7
c00241c1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00241c8:	55                   	push   ebp
c00241c9:	56                   	push   esi
c00241ca:	e8 35 fe ff ff       	call   c0024004 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00241cf:	5a                   	pop    edx
c00241d0:	83 f8 01             	cmp    eax,0x1
c00241d3:	59                   	pop    ecx
c00241d4:	75 21                	jne    c00241f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00241d6:	50                   	push   eax
c00241d7:	53                   	push   ebx
c00241d8:	55                   	push   ebp
c00241d9:	56                   	push   esi
c00241da:	e8 b7 fe ff ff       	call   c0024096 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00241df:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241e6:	e8 30 b6 fe ff       	call   c000f81b <malloc>
c00241eb:	89 c5                	mov    ebp,eax
c00241ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00241f0:	e8 87 0d 00 00       	call   c0024f7c <SATA::SATA()>
c00241f5:	eb 24                	jmp    c002421b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00241f7:	83 f8 04             	cmp    eax,0x4
c00241fa:	75 36                	jne    c0024232 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00241fc:	51                   	push   ecx
c00241fd:	53                   	push   ebx
c00241fe:	55                   	push   ebp
c00241ff:	56                   	push   esi
c0024200:	e8 91 fe ff ff       	call   c0024096 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024205:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002420c:	e8 0a b6 fe ff       	call   c000f81b <malloc>
c0024211:	89 c5                	mov    ebp,eax
c0024213:	89 04 24             	mov    DWORD PTR [esp],eax
c0024216:	e8 d7 10 00 00       	call   c00252f2 <SATAPI::SATAPI()>
c002421b:	58                   	pop    eax
c002421c:	5a                   	pop    edx
c002421d:	55                   	push   ebp
c002421e:	56                   	push   esi
c002421f:	e8 9c fa fe ff       	call   c0013cc0 <Device::addChild(Device*)>
c0024224:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0024227:	56                   	push   esi
c0024228:	6a 00                	push   0x0
c002422a:	53                   	push   ebx
c002422b:	55                   	push   ebp
c002422c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002422f:	83 c4 20             	add    esp,0x20
c0024232:	d1 ef                	shr    edi,1
c0024234:	43                   	inc    ebx
c0024235:	83 fb 20             	cmp    ebx,0x20
c0024238:	0f 85 72 ff ff ff    	jne    c00241b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002423e:	83 c4 0c             	add    esp,0xc
c0024241:	5b                   	pop    ebx
c0024242:	5e                   	pop    esi
c0024243:	5f                   	pop    edi
c0024244:	5d                   	pop    ebp
c0024245:	c3                   	ret    

c0024246 <SATABus::open(int, int, void*)>:
c0024246:	83 ec 14             	sub    esp,0x14
c0024249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002424d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024253:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024259:	52                   	push   edx
c002425a:	50                   	push   eax
c002425b:	e8 3c ff ff ff       	call   c002419c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024260:	31 c0                	xor    eax,eax
c0024262:	83 c4 1c             	add    esp,0x1c
c0024265:	c3                   	ret    

c0024266 <ATA::close(int, int, void*)>:
c0024266:	83 ec 0c             	sub    esp,0xc
c0024269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002426d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024273:	85 c0                	test   eax,eax
c0024275:	74 0c                	je     c0024283 <ATA::close(int, int, void*)+0x1d>
c0024277:	83 ec 0c             	sub    esp,0xc
c002427a:	8b 10                	mov    edx,DWORD PTR [eax]
c002427c:	50                   	push   eax
c002427d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024280:	83 c4 10             	add    esp,0x10
c0024283:	31 c0                	xor    eax,eax
c0024285:	83 c4 0c             	add    esp,0xc
c0024288:	c3                   	ret    
c0024289:	90                   	nop

c002428a <ATA::powerSaving(PowerSavingLevel)>:
c002428a:	c3                   	ret    
c002428b:	90                   	nop

c002428c <ATA::ATA()>:
c002428c:	83 ec 0c             	sub    esp,0xc
c002428f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024293:	83 ec 04             	sub    esp,0x4
c0024296:	68 00 02 00 00       	push   0x200
c002429b:	68 c5 cd 02 c0       	push   0xc002cdc5
c00242a0:	50                   	push   eax
c00242a1:	e8 50 fe fe ff       	call   c00140f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00242a6:	83 c4 10             	add    esp,0x10
c00242a9:	ba 48 cd 02 c0       	mov    edx,0xc002cd48
c00242ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242b2:	89 10                	mov    DWORD PTR [eax],edx
c00242b4:	90                   	nop
c00242b5:	83 c4 0c             	add    esp,0xc
c00242b8:	c3                   	ret    
c00242b9:	90                   	nop

c00242ba <ATA::flush(bool)>:
c00242ba:	53                   	push   ebx
c00242bb:	83 ec 08             	sub    esp,0x8
c00242be:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00242c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242c7:	19 c0                	sbb    eax,eax
c00242c9:	83 e0 fd             	and    eax,0xfffffffd
c00242cc:	05 ea 00 00 00       	add    eax,0xea
c00242d1:	50                   	push   eax
c00242d2:	6a 07                	push   0x7
c00242d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242db:	50                   	push   eax
c00242dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e2:	e8 53 f1 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e7:	83 c4 0c             	add    esp,0xc
c00242ea:	6a 00                	push   0x0
c00242ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f3:	50                   	push   eax
c00242f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fa:	e8 dd fb ff ff       	call   c0023edc <IDE::polling(unsigned char, unsigned int)>
c00242ff:	83 c4 18             	add    esp,0x18
c0024302:	5b                   	pop    ebx
c0024303:	c3                   	ret    

c0024304 <ATA::readyForCommand()>:
c0024304:	56                   	push   esi
c0024305:	53                   	push   ebx
c0024306:	31 db                	xor    ebx,ebx
c0024308:	50                   	push   eax
c0024309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002430d:	50                   	push   eax
c002430e:	6a 0c                	push   0xc
c0024310:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024317:	50                   	push   eax
c0024318:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002431e:	e8 d7 f1 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0024323:	83 c4 10             	add    esp,0x10
c0024326:	a8 88                	test   al,0x88
c0024328:	74 23                	je     c002434d <ATA::readyForCommand()+0x49>
c002432a:	43                   	inc    ebx
c002432b:	83 fb 63             	cmp    ebx,0x63
c002432e:	7e dd                	jle    c002430d <ATA::readyForCommand()+0x9>
c0024330:	51                   	push   ecx
c0024331:	51                   	push   ecx
c0024332:	6a 00                	push   0x0
c0024334:	68 40 42 0f 00       	push   0xf4240
c0024339:	e8 53 9d ff ff       	call   c001e091 <nanoSleep(unsigned long long)>
c002433e:	83 c4 10             	add    esp,0x10
c0024341:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024347:	75 c4                	jne    c002430d <ATA::readyForCommand()+0x9>
c0024349:	31 c0                	xor    eax,eax
c002434b:	eb 02                	jmp    c002434f <ATA::readyForCommand()+0x4b>
c002434d:	b0 01                	mov    al,0x1
c002434f:	5a                   	pop    edx
c0024350:	5b                   	pop    ebx
c0024351:	5e                   	pop    esi
c0024352:	c3                   	ret    
c0024353:	90                   	nop

c0024354 <ATA::access(unsigned long long, int, void*, bool)>:
c0024354:	55                   	push   ebp
c0024355:	57                   	push   edi
c0024356:	56                   	push   esi
c0024357:	53                   	push   ebx
c0024358:	83 ec 38             	sub    esp,0x38
c002435b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002435f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0024363:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024367:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002436b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002436f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024373:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0024377:	68 f4 cc 02 c0       	push   0xc002ccf4
c002437c:	e8 fb e4 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024381:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024387:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002438b:	83 c4 10             	add    esp,0x10
c002438e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024394:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024398:	c1 e0 06             	shl    eax,0x6
c002439b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00243a3:	74 5d                	je     c0024402 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c00243a5:	89 fa                	mov    edx,edi
c00243a7:	89 f0                	mov    eax,esi
c00243a9:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00243ad:	c1 ea 1c             	shr    edx,0x1c
c00243b0:	89 d1                	mov    ecx,edx
c00243b2:	09 c1                	or     ecx,eax
c00243b4:	74 25                	je     c00243db <ATA::access(unsigned long long, int, void*, bool)+0x87>
c00243b6:	31 ed                	xor    ebp,ebp
c00243b8:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00243bf:	89 fa                	mov    edx,edi
c00243c1:	89 f0                	mov    eax,esi
c00243c3:	0f ad d0             	shrd   eax,edx,cl
c00243c6:	d3 ea                	shr    edx,cl
c00243c8:	f6 c1 20             	test   cl,0x20
c00243cb:	74 02                	je     c00243cf <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c00243cd:	89 d0                	mov    eax,edx
c00243cf:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00243d3:	45                   	inc    ebp
c00243d4:	83 fd 06             	cmp    ebp,0x6
c00243d7:	75 df                	jne    c00243b8 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c00243d9:	eb 76                	jmp    c0024451 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c00243db:	89 f0                	mov    eax,esi
c00243dd:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00243e2:	89 fa                	mov    edx,edi
c00243e4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00243eb:	0f ac d0 10          	shrd   eax,edx,0x10
c00243ef:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00243f4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00243f8:	c1 ee 18             	shr    esi,0x18
c00243fb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024400:	eb 56                	jmp    c0024458 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024402:	6a 00                	push   0x0
c0024404:	6a 3f                	push   0x3f
c0024406:	57                   	push   edi
c0024407:	56                   	push   esi
c0024408:	e8 97 29 00 00       	call   c0026da4 <__umoddi3>
c002440d:	83 c4 10             	add    esp,0x10
c0024410:	40                   	inc    eax
c0024411:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024415:	6a 00                	push   0x0
c0024417:	68 f0 03 00 00       	push   0x3f0
c002441c:	57                   	push   edi
c002441d:	56                   	push   esi
c002441e:	e8 81 28 00 00       	call   c0026ca4 <__udivdi3>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002442b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024432:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024437:	6a 00                	push   0x0
c0024439:	6a 3f                	push   0x3f
c002443b:	57                   	push   edi
c002443c:	56                   	push   esi
c002443d:	e8 62 28 00 00       	call   c0026ca4 <__udivdi3>
c0024442:	83 c4 10             	add    esp,0x10
c0024445:	89 c6                	mov    esi,eax
c0024447:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002444c:	83 e6 0f             	and    esi,0xf
c002444f:	eb 07                	jmp    c0024458 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024451:	31 f6                	xor    esi,esi
c0024453:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024458:	bf 01 00 00 00       	mov    edi,0x1
c002445d:	50                   	push   eax
c002445e:	6a 00                	push   0x0
c0024460:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024467:	50                   	push   eax
c0024468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002446c:	e8 d5 f1 ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c0024471:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024474:	e8 8b fe ff ff       	call   c0024304 <ATA::readyForCommand()>
c0024479:	83 c4 10             	add    esp,0x10
c002447c:	84 c0                	test   al,al
c002447e:	0f 84 bc 02 00 00    	je     c0024740 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024484:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002448a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024490:	c1 e0 04             	shl    eax,0x4
c0024493:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002449a:	09 c6                	or     esi,eax
c002449c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00244a1:	75 05                	jne    c00244a8 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00244a3:	83 ce a0             	or     esi,0xffffffa0
c00244a6:	eb 03                	jmp    c00244ab <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00244a8:	83 ce e0             	or     esi,0xffffffe0
c00244ab:	89 f0                	mov    eax,esi
c00244ad:	0f b6 f0             	movzx  esi,al
c00244b0:	56                   	push   esi
c00244b1:	6a 06                	push   0x6
c00244b3:	51                   	push   ecx
c00244b4:	52                   	push   edx
c00244b5:	e8 80 ef ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ba:	83 c4 10             	add    esp,0x10
c00244bd:	6a 00                	push   0x0
c00244bf:	6a 01                	push   0x1
c00244c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244c8:	50                   	push   eax
c00244c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244cf:	e8 66 ef ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244d4:	83 c4 10             	add    esp,0x10
c00244d7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00244dc:	75 6e                	jne    c002454c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00244de:	6a 00                	push   0x0
c00244e0:	6a 08                	push   0x8
c00244e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244e9:	50                   	push   eax
c00244ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244f0:	e8 45 ef ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244f5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00244fa:	50                   	push   eax
c00244fb:	6a 09                	push   0x9
c00244fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024504:	50                   	push   eax
c0024505:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002450b:	e8 2a ef ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024510:	83 c4 20             	add    esp,0x20
c0024513:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024518:	50                   	push   eax
c0024519:	6a 0a                	push   0xa
c002451b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024522:	50                   	push   eax
c0024523:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024529:	e8 0c ef ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002452e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024533:	50                   	push   eax
c0024534:	6a 0b                	push   0xb
c0024536:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002453d:	50                   	push   eax
c002453e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024544:	e8 f1 ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024549:	83 c4 20             	add    esp,0x20
c002454c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024551:	50                   	push   eax
c0024552:	6a 02                	push   0x2
c0024554:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002455b:	50                   	push   eax
c002455c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024562:	e8 d3 ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024567:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002456c:	50                   	push   eax
c002456d:	6a 03                	push   0x3
c002456f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024576:	50                   	push   eax
c0024577:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002457d:	e8 b8 ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024582:	83 c4 20             	add    esp,0x20
c0024585:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002458a:	50                   	push   eax
c002458b:	6a 04                	push   0x4
c002458d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024594:	50                   	push   eax
c0024595:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002459b:	e8 9a ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00245a5:	50                   	push   eax
c00245a6:	6a 05                	push   0x5
c00245a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245af:	50                   	push   eax
c00245b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245b6:	e8 7f ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245bb:	83 c4 20             	add    esp,0x20
c00245be:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00245c3:	0f 94 c0             	sete   al
c00245c6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00245cb:	74 09                	je     c00245d6 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00245cd:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00245d4:	eb 07                	jmp    c00245dd <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00245d6:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00245dd:	0f b6 c0             	movzx  eax,al
c00245e0:	50                   	push   eax
c00245e1:	6a 07                	push   0x7
c00245e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ea:	50                   	push   eax
c00245eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245f1:	e8 44 ee ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f6:	c7 04 24 01 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd01
c00245fd:	e8 7a e2 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024602:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024606:	83 c4 10             	add    esp,0x10
c0024609:	85 f6                	test   esi,esi
c002460b:	0f 84 f7 00 00 00    	je     c0024708 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0024611:	83 ec 0c             	sub    esp,0xc
c0024614:	68 04 cd 02 c0       	push   0xc002cd04
c0024619:	e8 5e e2 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002461e:	83 c4 0c             	add    esp,0xc
c0024621:	6a 01                	push   0x1
c0024623:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002462a:	50                   	push   eax
c002462b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024631:	e8 a6 f8 ff ff       	call   c0023edc <IDE::polling(unsigned char, unsigned int)>
c0024636:	c7 04 24 07 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd07
c002463d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0024641:	e8 36 e2 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002464d:	84 c0                	test   al,al
c002464f:	74 2b                	je     c002467c <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0024651:	0f b6 f8             	movzx  edi,al
c0024654:	57                   	push   edi
c0024655:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002465c:	50                   	push   eax
c002465d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024664:	50                   	push   eax
c0024665:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002466b:	e8 bc f7 ff ff       	call   c0023e2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024670:	c7 04 24 0a cd 02 c0 	mov    DWORD PTR [esp],0xc002cd0a
c0024677:	e9 bc 00 00 00       	jmp    c0024738 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c002467c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024681:	74 50                	je     c00246d3 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0024683:	83 ec 0c             	sub    esp,0xc
c0024686:	31 ed                	xor    ebp,ebp
c0024688:	68 15 cd 02 c0       	push   0xc002cd15
c002468d:	e8 ea e1 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024692:	83 c4 10             	add    esp,0x10
c0024695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024699:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002469d:	50                   	push   eax
c002469e:	50                   	push   eax
c002469f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246a6:	50                   	push   eax
c00246a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246ad:	e8 76 ed ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c00246b2:	89 c2                	mov    edx,eax
c00246b4:	89 f8                	mov    eax,edi
c00246b6:	66 ef                	out    dx,ax
c00246b8:	45                   	inc    ebp
c00246b9:	83 c4 10             	add    esp,0x10
c00246bc:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00246c2:	75 d1                	jne    c0024695 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00246c4:	83 ec 0c             	sub    esp,0xc
c00246c7:	68 18 cd 02 c0       	push   0xc002cd18
c00246cc:	e8 ab e1 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00246d1:	eb 24                	jmp    c00246f7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00246d3:	51                   	push   ecx
c00246d4:	51                   	push   ecx
c00246d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246dc:	50                   	push   eax
c00246dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246e3:	e8 40 ed ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c00246e8:	b9 00 01 00 00       	mov    ecx,0x100
c00246ed:	89 c2                	mov    edx,eax
c00246ef:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00246f3:	fc                   	cld    
c00246f4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00246f7:	83 c4 10             	add    esp,0x10
c00246fa:	4e                   	dec    esi
c00246fb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024703:	e9 01 ff ff ff       	jmp    c0024609 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0024708:	31 ff                	xor    edi,edi
c002470a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002470f:	74 2f                	je     c0024740 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024711:	83 ec 0c             	sub    esp,0xc
c0024714:	68 1b cd 02 c0       	push   0xc002cd1b
c0024719:	e8 5e e1 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002471e:	58                   	pop    eax
c002471f:	31 c0                	xor    eax,eax
c0024721:	5a                   	pop    edx
c0024722:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024727:	0f 94 c0             	sete   al
c002472a:	50                   	push   eax
c002472b:	53                   	push   ebx
c002472c:	e8 89 fb ff ff       	call   c00242ba <ATA::flush(bool)>
c0024731:	c7 04 24 1e cd 02 c0 	mov    DWORD PTR [esp],0xc002cd1e
c0024738:	e8 3f e1 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002473d:	83 c4 10             	add    esp,0x10
c0024740:	83 c4 2c             	add    esp,0x2c
c0024743:	89 f8                	mov    eax,edi
c0024745:	5b                   	pop    ebx
c0024746:	5e                   	pop    esi
c0024747:	5f                   	pop    edi
c0024748:	5d                   	pop    ebp
c0024749:	c3                   	ret    

c002474a <ATA::read(unsigned long long, int, void*)>:
c002474a:	57                   	push   edi
c002474b:	b8 04 00 00 00       	mov    eax,0x4
c0024750:	56                   	push   esi
c0024751:	53                   	push   ebx
c0024752:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024756:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002475a:	8d 7a ff             	lea    edi,[edx-0x1]
c002475d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024761:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024765:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002476b:	77 25                	ja     c0024792 <ATA::read(unsigned long long, int, void*)+0x48>
c002476d:	b8 06 00 00 00       	mov    eax,0x6
c0024772:	85 f6                	test   esi,esi
c0024774:	74 1c                	je     c0024792 <ATA::read(unsigned long long, int, void*)+0x48>
c0024776:	50                   	push   eax
c0024777:	50                   	push   eax
c0024778:	6a 00                	push   0x0
c002477a:	56                   	push   esi
c002477b:	52                   	push   edx
c002477c:	53                   	push   ebx
c002477d:	51                   	push   ecx
c002477e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024782:	e8 cd fb ff ff       	call   c0024354 <ATA::access(unsigned long long, int, void*, bool)>
c0024787:	83 c4 20             	add    esp,0x20
c002478a:	85 c0                	test   eax,eax
c002478c:	0f 95 c0             	setne  al
c002478f:	0f b6 c0             	movzx  eax,al
c0024792:	5b                   	pop    ebx
c0024793:	5e                   	pop    esi
c0024794:	5f                   	pop    edi
c0024795:	c3                   	ret    

c0024796 <ATA::write(unsigned long long, int, void*)>:
c0024796:	55                   	push   ebp
c0024797:	57                   	push   edi
c0024798:	56                   	push   esi
c0024799:	53                   	push   ebx
c002479a:	83 ec 18             	sub    esp,0x18
c002479d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00247a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00247a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00247a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00247ad:	68 21 cd 02 c0       	push   0xc002cd21
c00247b2:	e8 c5 e0 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c00247b7:	8d 53 ff             	lea    edx,[ebx-0x1]
c00247ba:	83 c4 10             	add    esp,0x10
c00247bd:	b8 04 00 00 00       	mov    eax,0x4
c00247c2:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00247c8:	77 25                	ja     c00247ef <ATA::write(unsigned long long, int, void*)+0x59>
c00247ca:	b8 06 00 00 00       	mov    eax,0x6
c00247cf:	85 f6                	test   esi,esi
c00247d1:	74 1c                	je     c00247ef <ATA::write(unsigned long long, int, void*)+0x59>
c00247d3:	50                   	push   eax
c00247d4:	50                   	push   eax
c00247d5:	6a 01                	push   0x1
c00247d7:	56                   	push   esi
c00247d8:	53                   	push   ebx
c00247d9:	55                   	push   ebp
c00247da:	57                   	push   edi
c00247db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00247df:	e8 70 fb ff ff       	call   c0024354 <ATA::access(unsigned long long, int, void*, bool)>
c00247e4:	83 c4 20             	add    esp,0x20
c00247e7:	85 c0                	test   eax,eax
c00247e9:	0f 95 c0             	setne  al
c00247ec:	0f b6 c0             	movzx  eax,al
c00247ef:	83 c4 0c             	add    esp,0xc
c00247f2:	5b                   	pop    ebx
c00247f3:	5e                   	pop    esi
c00247f4:	5f                   	pop    edi
c00247f5:	5d                   	pop    ebp
c00247f6:	c3                   	ret    
c00247f7:	90                   	nop

c00247f8 <ATA::detectCHS()>:
c00247f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00247fc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024802:	c1 e0 06             	shl    eax,0x6
c0024805:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002480b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024815:	c7 44 24 04 2d cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd2d
c002481d:	e9 03 5a ff ff       	jmp    c001a225 <Krnl::panic(char const*)>

c0024822 <ATA::open(int, int, void*)>:
c0024822:	53                   	push   ebx
c0024823:	83 ec 08             	sub    esp,0x8
c0024826:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002482a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002482e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024832:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024838:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002483e:	c1 e0 06             	shl    eax,0x6
c0024841:	01 d0                	add    eax,edx
c0024843:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002484a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024850:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024857:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024861:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024867:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002486e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024875:	75 0c                	jne    c0024883 <ATA::open(int, int, void*)+0x61>
c0024877:	83 ec 0c             	sub    esp,0xc
c002487a:	53                   	push   ebx
c002487b:	e8 78 ff ff ff       	call   c00247f8 <ATA::detectCHS()>
c0024880:	83 c4 10             	add    esp,0x10
c0024883:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024889:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002488f:	c1 e0 06             	shl    eax,0x6
c0024892:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024899:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00248a3:	d1 e8                	shr    eax,1
c00248a5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00248ab:	6a 04                	push   0x4
c00248ad:	6a 0c                	push   0xc
c00248af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248b6:	50                   	push   eax
c00248b7:	52                   	push   edx
c00248b8:	e8 7d eb ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248bd:	90                   	nop
c00248be:	90                   	nop
c00248bf:	6a 00                	push   0x0
c00248c1:	6a 0c                	push   0xc
c00248c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248ca:	50                   	push   eax
c00248cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248d1:	e8 64 eb ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248d6:	83 c4 14             	add    esp,0x14
c00248d9:	53                   	push   ebx
c00248da:	e8 7f f8 fe ff       	call   c001415e <PhysicalDisk::startCache()>
c00248df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248e2:	e8 ff 1a ff ff       	call   c00163e6 <createPartitionsForDisk(PhysicalDisk*)>
c00248e7:	31 c0                	xor    eax,eax
c00248e9:	83 c4 18             	add    esp,0x18
c00248ec:	5b                   	pop    ebx
c00248ed:	c3                   	ret    

c00248ee <ATAPI::write(unsigned long long, int, void*)>:
c00248ee:	b8 03 00 00 00       	mov    eax,0x3
c00248f3:	c3                   	ret    

c00248f4 <ATAPI::close(int, int, void*)>:
c00248f4:	83 ec 0c             	sub    esp,0xc
c00248f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024901:	85 c0                	test   eax,eax
c0024903:	74 0c                	je     c0024911 <ATAPI::close(int, int, void*)+0x1d>
c0024905:	83 ec 0c             	sub    esp,0xc
c0024908:	8b 10                	mov    edx,DWORD PTR [eax]
c002490a:	50                   	push   eax
c002490b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002490e:	83 c4 10             	add    esp,0x10
c0024911:	31 c0                	xor    eax,eax
c0024913:	83 c4 0c             	add    esp,0xc
c0024916:	c3                   	ret    
c0024917:	90                   	nop

c0024918 <ATAPI::ATAPI()>:
c0024918:	83 ec 0c             	sub    esp,0xc
c002491b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491f:	83 ec 04             	sub    esp,0x4
c0024922:	68 00 08 00 00       	push   0x800
c0024927:	68 65 ce 02 c0       	push   0xc002ce65
c002492c:	50                   	push   eax
c002492d:	e8 c4 f7 fe ff       	call   c00140f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024932:	83 c4 10             	add    esp,0x10
c0024935:	ba 80 cd 02 c0       	mov    edx,0xc002cd80
c002493a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002493e:	89 10                	mov    DWORD PTR [eax],edx
c0024940:	90                   	nop
c0024941:	83 c4 0c             	add    esp,0xc
c0024944:	c3                   	ret    
c0024945:	90                   	nop

c0024946 <ATAPI::readyForCommand()>:
c0024946:	56                   	push   esi
c0024947:	53                   	push   ebx
c0024948:	31 db                	xor    ebx,ebx
c002494a:	50                   	push   eax
c002494b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002494f:	50                   	push   eax
c0024950:	6a 0c                	push   0xc
c0024952:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024959:	50                   	push   eax
c002495a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024960:	e8 95 eb ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0024965:	83 c4 10             	add    esp,0x10
c0024968:	a8 88                	test   al,0x88
c002496a:	74 23                	je     c002498f <ATAPI::readyForCommand()+0x49>
c002496c:	43                   	inc    ebx
c002496d:	83 fb 63             	cmp    ebx,0x63
c0024970:	7e dd                	jle    c002494f <ATAPI::readyForCommand()+0x9>
c0024972:	51                   	push   ecx
c0024973:	51                   	push   ecx
c0024974:	6a 00                	push   0x0
c0024976:	68 40 42 0f 00       	push   0xf4240
c002497b:	e8 11 97 ff ff       	call   c001e091 <nanoSleep(unsigned long long)>
c0024980:	83 c4 10             	add    esp,0x10
c0024983:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024989:	75 c4                	jne    c002494f <ATAPI::readyForCommand()+0x9>
c002498b:	31 c0                	xor    eax,eax
c002498d:	eb 02                	jmp    c0024991 <ATAPI::readyForCommand()+0x4b>
c002498f:	b0 01                	mov    al,0x1
c0024991:	5a                   	pop    edx
c0024992:	5b                   	pop    ebx
c0024993:	5e                   	pop    esi
c0024994:	c3                   	ret    
c0024995:	90                   	nop

c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024996:	55                   	push   ebp
c0024997:	57                   	push   edi
c0024998:	56                   	push   esi
c0024999:	53                   	push   ebx
c002499a:	83 ec 20             	sub    esp,0x20
c002499d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00249a1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00249a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00249a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00249ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00249b1:	6a 01                	push   0x1
c00249b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ba:	50                   	push   eax
c00249bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249c1:	e8 80 ec ff ff       	call   c0023646 <IDE::enableIRQs(unsigned char, bool)>
c00249c6:	5e                   	pop    esi
c00249c7:	58                   	pop    eax
c00249c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249cf:	50                   	push   eax
c00249d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249d6:	e8 39 ea ff ff       	call   c0023414 <IDE::prepareInterrupt(unsigned char)>
c00249db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00249de:	e8 63 ff ff ff       	call   c0024946 <ATAPI::readyForCommand()>
c00249e3:	83 c4 10             	add    esp,0x10
c00249e6:	84 c0                	test   al,al
c00249e8:	75 0a                	jne    c00249f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00249ea:	bb 01 00 00 00       	mov    ebx,0x1
c00249ef:	e9 57 02 00 00       	jmp    c0024c4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249f4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00249fa:	c1 e0 04             	shl    eax,0x4
c00249fd:	0f b6 c0             	movzx  eax,al
c0024a00:	50                   	push   eax
c0024a01:	6a 06                	push   0x6
c0024a03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a0a:	50                   	push   eax
c0024a0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a11:	e8 24 ea ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a16:	6a 00                	push   0x0
c0024a18:	6a 01                	push   0x1
c0024a1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a21:	50                   	push   eax
c0024a22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a28:	e8 0d ea ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a2d:	83 c4 20             	add    esp,0x20
c0024a30:	0f b6 c3             	movzx  eax,bl
c0024a33:	0f b6 df             	movzx  ebx,bh
c0024a36:	50                   	push   eax
c0024a37:	6a 04                	push   0x4
c0024a39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a40:	50                   	push   eax
c0024a41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a47:	e8 ee e9 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a4c:	53                   	push   ebx
c0024a4d:	6a 05                	push   0x5
c0024a4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a56:	50                   	push   eax
c0024a57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a5d:	e8 d8 e9 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a62:	83 c4 20             	add    esp,0x20
c0024a65:	68 a0 00 00 00       	push   0xa0
c0024a6a:	6a 07                	push   0x7
c0024a6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a73:	50                   	push   eax
c0024a74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a7a:	e8 bb e9 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7f:	83 c4 0c             	add    esp,0xc
c0024a82:	6a 01                	push   0x1
c0024a84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a8b:	50                   	push   eax
c0024a8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a92:	e8 45 f4 ff ff       	call   c0023edc <IDE::polling(unsigned char, unsigned int)>
c0024a97:	83 c4 10             	add    esp,0x10
c0024a9a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024aa0:	84 c0                	test   al,al
c0024aa2:	74 23                	je     c0024ac7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024aa4:	0f b6 d8             	movzx  ebx,al
c0024aa7:	0f b6 d2             	movzx  edx,dl
c0024aaa:	53                   	push   ebx
c0024aab:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024ab2:	50                   	push   eax
c0024ab3:	52                   	push   edx
c0024ab4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024aba:	e8 6d f3 ff ff       	call   c0023e2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024abf:	83 c4 10             	add    esp,0x10
c0024ac2:	e9 84 01 00 00       	jmp    c0024c4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ac7:	0f b6 d2             	movzx  edx,dl
c0024aca:	53                   	push   ebx
c0024acb:	53                   	push   ebx
c0024acc:	52                   	push   edx
c0024acd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ad3:	e8 50 e9 ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c0024ad8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024adc:	b9 06 00 00 00       	mov    ecx,0x6
c0024ae1:	89 c2                	mov    edx,eax
c0024ae3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024ae6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024aea:	83 c4 10             	add    esp,0x10
c0024aed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024af3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024afa:	85 db                	test   ebx,ebx
c0024afc:	0f 84 ec 00 00 00    	je     c0024bee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024b02:	51                   	push   ecx
c0024b03:	51                   	push   ecx
c0024b04:	52                   	push   edx
c0024b05:	50                   	push   eax
c0024b06:	e8 9d ea ff ff       	call   c00235a8 <IDE::waitInterrupt(unsigned char)>
c0024b0b:	83 c4 10             	add    esp,0x10
c0024b0e:	84 c0                	test   al,al
c0024b10:	0f 84 d4 fe ff ff    	je     c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024b16:	56                   	push   esi
c0024b17:	56                   	push   esi
c0024b18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b1f:	50                   	push   eax
c0024b20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b26:	e8 e9 e8 ff ff       	call   c0023414 <IDE::prepareInterrupt(unsigned char)>
c0024b2b:	83 c4 0c             	add    esp,0xc
c0024b2e:	6a 04                	push   0x4
c0024b30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b37:	50                   	push   eax
c0024b38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b3e:	e8 b7 e9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0024b43:	83 c4 0c             	add    esp,0xc
c0024b46:	89 c6                	mov    esi,eax
c0024b48:	6a 05                	push   0x5
c0024b4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b51:	50                   	push   eax
c0024b52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b58:	e8 9d e9 ff ff       	call   c00234fa <IDE::read(unsigned char, unsigned char)>
c0024b5d:	89 f1                	mov    ecx,esi
c0024b5f:	0f b6 c0             	movzx  eax,al
c0024b62:	0f b6 f1             	movzx  esi,cl
c0024b65:	c1 e0 08             	shl    eax,0x8
c0024b68:	09 c6                	or     esi,eax
c0024b6a:	d1 fe                	sar    esi,1
c0024b6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024b70:	83 c4 10             	add    esp,0x10
c0024b73:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024b78:	74 41                	je     c0024bbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024b7a:	31 c9                	xor    ecx,ecx
c0024b7c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024b82:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b89:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024b8d:	75 0a                	jne    c0024b99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024b8f:	01 c9                	add    ecx,ecx
c0024b91:	01 cd                	add    ebp,ecx
c0024b93:	4b                   	dec    ebx
c0024b94:	e9 54 ff ff ff       	jmp    c0024aed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024b99:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024b9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024ba2:	51                   	push   ecx
c0024ba3:	51                   	push   ecx
c0024ba4:	52                   	push   edx
c0024ba5:	50                   	push   eax
c0024ba6:	e8 7d e8 ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c0024bab:	89 c2                	mov    edx,eax
c0024bad:	89 f0                	mov    eax,esi
c0024baf:	66 ef                	out    dx,ax
c0024bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024bb5:	83 c4 10             	add    esp,0x10
c0024bb8:	41                   	inc    ecx
c0024bb9:	eb c1                	jmp    c0024b7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024bbb:	31 f6                	xor    esi,esi
c0024bbd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024bc3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024bca:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024bce:	75 06                	jne    c0024bd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024bd0:	01 f6                	add    esi,esi
c0024bd2:	01 f5                	add    ebp,esi
c0024bd4:	eb bd                	jmp    c0024b93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024bd6:	51                   	push   ecx
c0024bd7:	51                   	push   ecx
c0024bd8:	52                   	push   edx
c0024bd9:	50                   	push   eax
c0024bda:	e8 49 e8 ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c0024bdf:	89 c2                	mov    edx,eax
c0024be1:	66 ed                	in     ax,dx
c0024be3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024be8:	83 c4 10             	add    esp,0x10
c0024beb:	46                   	inc    esi
c0024bec:	eb cf                	jmp    c0024bbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024bee:	51                   	push   ecx
c0024bef:	51                   	push   ecx
c0024bf0:	52                   	push   edx
c0024bf1:	50                   	push   eax
c0024bf2:	e8 b1 e9 ff ff       	call   c00235a8 <IDE::waitInterrupt(unsigned char)>
c0024bf7:	83 c4 10             	add    esp,0x10
c0024bfa:	84 c0                	test   al,al
c0024bfc:	0f 84 e8 fd ff ff    	je     c00249ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c02:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024c07:	52                   	push   edx
c0024c08:	52                   	push   edx
c0024c09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c10:	50                   	push   eax
c0024c11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c17:	e8 f8 e7 ff ff       	call   c0023414 <IDE::prepareInterrupt(unsigned char)>
c0024c1c:	83 c4 10             	add    esp,0x10
c0024c1f:	50                   	push   eax
c0024c20:	50                   	push   eax
c0024c21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c28:	50                   	push   eax
c0024c29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c2f:	e8 f4 e7 ff ff       	call   c0023428 <IDE::getBase(unsigned char)>
c0024c34:	8d 50 07             	lea    edx,[eax+0x7]
c0024c37:	ec                   	in     al,dx
c0024c38:	83 c4 10             	add    esp,0x10
c0024c3b:	a8 88                	test   al,0x88
c0024c3d:	74 0a                	je     c0024c49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024c3f:	4b                   	dec    ebx
c0024c40:	75 dd                	jne    c0024c1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024c42:	bb 02 00 00 00       	mov    ebx,0x2
c0024c47:	eb 02                	jmp    c0024c4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024c49:	31 db                	xor    ebx,ebx
c0024c4b:	83 c4 1c             	add    esp,0x1c
c0024c4e:	89 d8                	mov    eax,ebx
c0024c50:	5b                   	pop    ebx
c0024c51:	5e                   	pop    esi
c0024c52:	5f                   	pop    edi
c0024c53:	5d                   	pop    ebp
c0024c54:	c3                   	ret    
c0024c55:	90                   	nop

c0024c56 <ATAPI::diskRemoved()>:
c0024c56:	83 ec 18             	sub    esp,0x18
c0024c59:	68 71 ce 02 c0       	push   0xc002ce71
c0024c5e:	e8 19 dc fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c67:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024c6e:	83 c4 1c             	add    esp,0x1c
c0024c71:	c3                   	ret    

c0024c72 <ATAPI::eject()>:
c0024c72:	57                   	push   edi
c0024c73:	b9 03 00 00 00       	mov    ecx,0x3
c0024c78:	53                   	push   ebx
c0024c79:	83 ec 14             	sub    esp,0x14
c0024c7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024c80:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c84:	fc                   	cld    
c0024c85:	31 c0                	xor    eax,eax
c0024c87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c89:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024c8e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024c93:	50                   	push   eax
c0024c94:	50                   	push   eax
c0024c95:	6a 00                	push   0x0
c0024c97:	6a 00                	push   0x0
c0024c99:	6a 00                	push   0x0
c0024c9b:	6a 02                	push   0x2
c0024c9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ca1:	50                   	push   eax
c0024ca2:	53                   	push   ebx
c0024ca3:	e8 ee fc ff ff       	call   c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ca8:	83 c4 14             	add    esp,0x14
c0024cab:	53                   	push   ebx
c0024cac:	e8 a5 ff ff ff       	call   c0024c56 <ATAPI::diskRemoved()>
c0024cb1:	83 c4 24             	add    esp,0x24
c0024cb4:	31 c0                	xor    eax,eax
c0024cb6:	5b                   	pop    ebx
c0024cb7:	5f                   	pop    edi
c0024cb8:	c3                   	ret    
c0024cb9:	90                   	nop

c0024cba <ATAPI::diskInserted()>:
c0024cba:	53                   	push   ebx
c0024cbb:	83 ec 14             	sub    esp,0x14
c0024cbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024cc2:	68 88 ce 02 c0       	push   0xc002ce88
c0024cc7:	e8 b0 db fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0024ccc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024cd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cd6:	e8 83 f4 fe ff       	call   c001415e <PhysicalDisk::startCache()>
c0024cdb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cdf:	83 c4 18             	add    esp,0x18
c0024ce2:	5b                   	pop    ebx
c0024ce3:	e9 fe 16 ff ff       	jmp    c00163e6 <createPartitionsForDisk(PhysicalDisk*)>

c0024ce8 <ATAPI::detectMedia()>:
c0024ce8:	56                   	push   esi
c0024ce9:	53                   	push   ebx
c0024cea:	83 ec 28             	sub    esp,0x28
c0024ced:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cf1:	6a 0c                	push   0xc
c0024cf3:	6a 00                	push   0x0
c0024cf5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024cf9:	56                   	push   esi
c0024cfa:	e8 51 ba fd ff       	call   c0000750 <memset>
c0024cff:	58                   	pop    eax
c0024d00:	5a                   	pop    edx
c0024d01:	6a 00                	push   0x0
c0024d03:	6a 00                	push   0x0
c0024d05:	6a 00                	push   0x0
c0024d07:	6a 00                	push   0x0
c0024d09:	56                   	push   esi
c0024d0a:	53                   	push   ebx
c0024d0b:	e8 86 fc ff ff       	call   c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d10:	83 c4 1c             	add    esp,0x1c
c0024d13:	6a 0c                	push   0xc
c0024d15:	6a 00                	push   0x0
c0024d17:	56                   	push   esi
c0024d18:	e8 33 ba fd ff       	call   c0000750 <memset>
c0024d1d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024d22:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024d27:	59                   	pop    ecx
c0024d28:	58                   	pop    eax
c0024d29:	6a 01                	push   0x1
c0024d2b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024d2f:	50                   	push   eax
c0024d30:	6a 00                	push   0x0
c0024d32:	6a 12                	push   0x12
c0024d34:	56                   	push   esi
c0024d35:	53                   	push   ebx
c0024d36:	e8 5b fc ff ff       	call   c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d3b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024d3f:	83 c4 20             	add    esp,0x20
c0024d42:	83 e0 7f             	and    eax,0x7f
c0024d45:	3c 70                	cmp    al,0x70
c0024d47:	74 15                	je     c0024d5e <ATAPI::detectMedia()+0x76>
c0024d49:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d50:	75 0c                	jne    c0024d5e <ATAPI::detectMedia()+0x76>
c0024d52:	83 ec 0c             	sub    esp,0xc
c0024d55:	53                   	push   ebx
c0024d56:	e8 5f ff ff ff       	call   c0024cba <ATAPI::diskInserted()>
c0024d5b:	83 c4 10             	add    esp,0x10
c0024d5e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024d62:	83 e0 0f             	and    eax,0xf
c0024d65:	3c 02                	cmp    al,0x2
c0024d67:	75 1b                	jne    c0024d84 <ATAPI::detectMedia()+0x9c>
c0024d69:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024d6e:	75 2d                	jne    c0024d9d <ATAPI::detectMedia()+0xb5>
c0024d70:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d77:	74 24                	je     c0024d9d <ATAPI::detectMedia()+0xb5>
c0024d79:	83 ec 0c             	sub    esp,0xc
c0024d7c:	53                   	push   ebx
c0024d7d:	e8 d4 fe ff ff       	call   c0024c56 <ATAPI::diskRemoved()>
c0024d82:	eb 16                	jmp    c0024d9a <ATAPI::detectMedia()+0xb2>
c0024d84:	84 c0                	test   al,al
c0024d86:	75 15                	jne    c0024d9d <ATAPI::detectMedia()+0xb5>
c0024d88:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d8f:	75 0c                	jne    c0024d9d <ATAPI::detectMedia()+0xb5>
c0024d91:	83 ec 0c             	sub    esp,0xc
c0024d94:	53                   	push   ebx
c0024d95:	e8 20 ff ff ff       	call   c0024cba <ATAPI::diskInserted()>
c0024d9a:	83 c4 10             	add    esp,0x10
c0024d9d:	83 c4 24             	add    esp,0x24
c0024da0:	5b                   	pop    ebx
c0024da1:	5e                   	pop    esi
c0024da2:	c3                   	ret    
c0024da3:	90                   	nop

c0024da4 <ATAPI::open(int, int, void*)>:
c0024da4:	53                   	push   ebx
c0024da5:	83 ec 08             	sub    esp,0x8
c0024da8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024dac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024db0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024db4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024dba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024dc0:	c1 e0 06             	shl    eax,0x6
c0024dc3:	01 d0                	add    eax,edx
c0024dc5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024dcc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024dd2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024dd9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024de3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024de9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024df0:	6a 04                	push   0x4
c0024df2:	6a 0c                	push   0xc
c0024df4:	51                   	push   ecx
c0024df5:	52                   	push   edx
c0024df6:	e8 3f e6 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dfb:	90                   	nop
c0024dfc:	90                   	nop
c0024dfd:	6a 00                	push   0x0
c0024dff:	6a 0c                	push   0xc
c0024e01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e08:	50                   	push   eax
c0024e09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e0f:	e8 26 e6 ff ff       	call   c002343a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e14:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024e1b:	83 c4 14             	add    esp,0x14
c0024e1e:	53                   	push   ebx
c0024e1f:	e8 c4 fe ff ff       	call   c0024ce8 <ATAPI::detectMedia()>
c0024e24:	31 c0                	xor    eax,eax
c0024e26:	83 c4 18             	add    esp,0x18
c0024e29:	5b                   	pop    ebx
c0024e2a:	c3                   	ret    
c0024e2b:	90                   	nop

c0024e2c <ATAPI::read(unsigned long long, int, void*)>:
c0024e2c:	55                   	push   ebp
c0024e2d:	57                   	push   edi
c0024e2e:	56                   	push   esi
c0024e2f:	53                   	push   ebx
c0024e30:	83 ec 1c             	sub    esp,0x1c
c0024e33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024e37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e3f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024e46:	74 41                	je     c0024e89 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024e48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024e4c:	b9 03 00 00 00       	mov    ecx,0x3
c0024e51:	fc                   	cld    
c0024e52:	31 c0                	xor    eax,eax
c0024e54:	86 fb                	xchg   bl,bh
c0024e56:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e58:	c1 c3 10             	rol    ebx,0x10
c0024e5b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024e60:	89 e8                	mov    eax,ebp
c0024e62:	86 fb                	xchg   bl,bh
c0024e64:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024e68:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024e6c:	50                   	push   eax
c0024e6d:	50                   	push   eax
c0024e6e:	55                   	push   ebp
c0024e6f:	c1 e5 0b             	shl    ebp,0xb
c0024e72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e76:	6a 00                	push   0x0
c0024e78:	55                   	push   ebp
c0024e79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e7d:	50                   	push   eax
c0024e7e:	56                   	push   esi
c0024e7f:	e8 12 fb ff ff       	call   c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e84:	83 c4 20             	add    esp,0x20
c0024e87:	eb 1a                	jmp    c0024ea3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024e89:	83 ec 0c             	sub    esp,0xc
c0024e8c:	56                   	push   esi
c0024e8d:	e8 56 fe ff ff       	call   c0024ce8 <ATAPI::detectMedia()>
c0024e92:	83 c4 10             	add    esp,0x10
c0024e95:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024e9c:	75 aa                	jne    c0024e48 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024e9e:	b8 02 00 00 00       	mov    eax,0x2
c0024ea3:	83 c4 1c             	add    esp,0x1c
c0024ea6:	5b                   	pop    ebx
c0024ea7:	5e                   	pop    esi
c0024ea8:	5f                   	pop    edi
c0024ea9:	5d                   	pop    ebp
c0024eaa:	c3                   	ret    
c0024eab:	90                   	nop

c0024eac <SATA::close(int, int, void*)>:
c0024eac:	83 ec 0c             	sub    esp,0xc
c0024eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024eb9:	85 c0                	test   eax,eax
c0024ebb:	74 0c                	je     c0024ec9 <SATA::close(int, int, void*)+0x1d>
c0024ebd:	83 ec 0c             	sub    esp,0xc
c0024ec0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ec2:	50                   	push   eax
c0024ec3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	31 c0                	xor    eax,eax
c0024ecb:	83 c4 0c             	add    esp,0xc
c0024ece:	c3                   	ret    
c0024ecf:	90                   	nop

c0024ed0 <SATA::powerSaving(PowerSavingLevel)>:
c0024ed0:	c3                   	ret    
c0024ed1:	90                   	nop

c0024ed2 <SATA::open(int, int, void*)>:
c0024ed2:	56                   	push   esi
c0024ed3:	53                   	push   ebx
c0024ed4:	50                   	push   eax
c0024ed5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024edd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ee7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024eed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024efb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f05:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f0b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024f12:	e8 00 ad fe ff       	call   c000fc17 <Phys::allocatePage()>
c0024f17:	89 c6                	mov    esi,eax
c0024f19:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024f1f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f25:	e8 ed ac fe ff       	call   c000fc17 <Phys::allocatePage()>
c0024f2a:	39 c6                	cmp    esi,eax
c0024f2c:	74 10                	je     c0024f3e <SATA::open(int, int, void*)+0x6c>
c0024f2e:	83 ec 0c             	sub    esp,0xc
c0024f31:	68 b0 cd 02 c0       	push   0xc002cdb0
c0024f36:	e8 ea 52 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0024f3b:	83 c4 10             	add    esp,0x10
c0024f3e:	83 ec 0c             	sub    esp,0xc
c0024f41:	6a 02                	push   0x2
c0024f43:	e8 59 c5 fe ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c0024f48:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f4e:	6a 03                	push   0x3
c0024f50:	50                   	push   eax
c0024f51:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024f57:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c0024f5d:	e8 e6 cb fe ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024f62:	83 c4 14             	add    esp,0x14
c0024f65:	53                   	push   ebx
c0024f66:	e8 f3 f1 fe ff       	call   c001415e <PhysicalDisk::startCache()>
c0024f6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f6e:	e8 73 14 ff ff       	call   c00163e6 <createPartitionsForDisk(PhysicalDisk*)>
c0024f73:	83 c4 14             	add    esp,0x14
c0024f76:	31 c0                	xor    eax,eax
c0024f78:	5b                   	pop    ebx
c0024f79:	5e                   	pop    esi
c0024f7a:	c3                   	ret    
c0024f7b:	90                   	nop

c0024f7c <SATA::SATA()>:
c0024f7c:	83 ec 0c             	sub    esp,0xc
c0024f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f83:	83 ec 04             	sub    esp,0x4
c0024f86:	68 00 02 00 00       	push   0x200
c0024f8b:	68 c4 cd 02 c0       	push   0xc002cdc4
c0024f90:	50                   	push   eax
c0024f91:	e8 60 f1 fe ff       	call   c00140f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f96:	83 c4 10             	add    esp,0x10
c0024f99:	ba 34 ce 02 c0       	mov    edx,0xc002ce34
c0024f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa2:	89 10                	mov    DWORD PTR [eax],edx
c0024fa4:	90                   	nop
c0024fa5:	83 c4 0c             	add    esp,0xc
c0024fa8:	c3                   	ret    
c0024fa9:	90                   	nop

c0024faa <SATA::access(unsigned long long, int, void*, bool)>:
c0024faa:	55                   	push   ebp
c0024fab:	57                   	push   edi
c0024fac:	56                   	push   esi
c0024fad:	53                   	push   ebx
c0024fae:	83 ec 2c             	sub    esp,0x2c
c0024fb1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024fb5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024fb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024fbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024fc1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024fc5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fce:	7e 10                	jle    c0024fe0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024fd0:	83 ec 0c             	sub    esp,0xc
c0024fd3:	68 d4 cd 02 c0       	push   0xc002cdd4
c0024fd8:	e8 48 52 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0024fdd:	83 c4 10             	add    esp,0x10
c0024fe0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024fe6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024fec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ff6:	89 d0                	mov    eax,edx
c0024ff8:	c1 e0 07             	shl    eax,0x7
c0024ffb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024fff:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025009:	51                   	push   ecx
c002500a:	8d 42 02             	lea    eax,[edx+0x2]
c002500d:	51                   	push   ecx
c002500e:	c1 e0 07             	shl    eax,0x7
c0025011:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025015:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025019:	50                   	push   eax
c002501a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025020:	e8 97 ef ff ff       	call   c0023fbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025025:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025029:	83 c4 10             	add    esp,0x10
c002502c:	b8 01 00 00 00       	mov    eax,0x1
c0025031:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025036:	0f 84 cb 01 00 00    	je     c0025207 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002503c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025040:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025044:	c1 e0 09             	shl    eax,0x9
c0025047:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002504c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025050:	74 0e                	je     c0025060 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025052:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025058:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002505c:	89 c1                	mov    ecx,eax
c002505e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025060:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025064:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002506a:	8d 42 02             	lea    eax,[edx+0x2]
c002506d:	c1 e0 07             	shl    eax,0x7
c0025070:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025074:	8b 00                	mov    eax,DWORD PTR [eax]
c0025076:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002507c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025082:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025086:	c1 e1 05             	shl    ecx,0x5
c0025089:	01 c8                	add    eax,ecx
c002508b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002508f:	83 e1 01             	and    ecx,0x1
c0025092:	89 ce                	mov    esi,ecx
c0025094:	8a 08                	mov    cl,BYTE PTR [eax]
c0025096:	c1 e6 06             	shl    esi,0x6
c0025099:	83 e1 bf             	and    ecx,0xffffffbf
c002509c:	09 f1                	or     ecx,esi
c002509e:	88 08                	mov    BYTE PTR [eax],cl
c00250a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250a2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00250a8:	81 c9 05 00 01 00    	or     ecx,0x10005
c00250ae:	89 08                	mov    DWORD PTR [eax],ecx
c00250b0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00250b6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00250bc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00250c2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00250c5:	50                   	push   eax
c00250c6:	68 90 00 00 00       	push   0x90
c00250cb:	6a 00                	push   0x0
c00250cd:	56                   	push   esi
c00250ce:	e8 7d b6 fd ff       	call   c0000750 <memset>
c00250d3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00250d9:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00250dd:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00250e3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00250e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00250eb:	83 c4 10             	add    esp,0x10
c00250ee:	48                   	dec    eax
c00250ef:	25 ff ff 3f 00       	and    eax,0x3fffff
c00250f4:	89 c1                	mov    ecx,eax
c00250f6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00250fc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025101:	09 c8                	or     eax,ecx
c0025103:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025109:	66 8b 06             	mov    ax,WORD PTR [esi]
c002510c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025113:	66 25 00 7f          	and    ax,0x7f00
c0025117:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002511b:	66 0d 27 80          	or     ax,0x8027
c002511f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025124:	66 89 06             	mov    WORD PTR [esi],ax
c0025127:	19 c0                	sbb    eax,eax
c0025129:	83 e0 f0             	and    eax,0xfffffff0
c002512c:	83 c0 35             	add    eax,0x35
c002512f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025132:	89 e8                	mov    eax,ebp
c0025134:	c1 e8 10             	shr    eax,0x10
c0025137:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002513a:	89 e8                	mov    eax,ebp
c002513c:	c1 e8 18             	shr    eax,0x18
c002513f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025142:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025146:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002514d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025150:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025154:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025158:	89 d6                	mov    esi,edx
c002515a:	31 c0                	xor    eax,eax
c002515c:	c1 e6 07             	shl    esi,0x7
c002515f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025163:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025169:	80 e1 88             	and    cl,0x88
c002516c:	74 0a                	je     c0025178 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002516e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025173:	74 0a                	je     c002517f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025175:	40                   	inc    eax
c0025176:	eb eb                	jmp    c0025163 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025178:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002517d:	75 0a                	jne    c0025189 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002517f:	83 ec 0c             	sub    esp,0xc
c0025182:	68 0d ce 02 c0       	push   0xc002ce0d
c0025187:	eb 56                	jmp    c00251df <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025189:	b8 01 00 00 00       	mov    eax,0x1
c002518e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025192:	c1 e2 07             	shl    edx,0x7
c0025195:	d3 e0                	shl    eax,cl
c0025197:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002519b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00251a1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00251a7:	85 c8                	test   eax,ecx
c00251a9:	74 20                	je     c00251cb <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00251ab:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00251b1:	0f ba e1 1e          	bt     ecx,0x1e
c00251b5:	73 ea                	jae    c00251a1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00251b7:	83 ec 0c             	sub    esp,0xc
c00251ba:	68 1b ce 02 c0       	push   0xc002ce1b
c00251bf:	e8 61 50 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c00251c4:	83 c4 10             	add    esp,0x10
c00251c7:	31 c0                	xor    eax,eax
c00251c9:	eb 3c                	jmp    c0025207 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00251cb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00251d1:	0f ba e0 1e          	bt     eax,0x1e
c00251d5:	73 17                	jae    c00251ee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00251d7:	83 ec 0c             	sub    esp,0xc
c00251da:	68 1b ce 02 c0       	push   0xc002ce1b
c00251df:	e8 41 50 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c00251e4:	83 c4 10             	add    esp,0x10
c00251e7:	b8 01 00 00 00       	mov    eax,0x1
c00251ec:	eb 19                	jmp    c0025207 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00251ee:	31 c0                	xor    eax,eax
c00251f0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00251f5:	75 10                	jne    c0025207 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00251f7:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00251fd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025201:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025205:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025207:	83 c4 2c             	add    esp,0x2c
c002520a:	5b                   	pop    ebx
c002520b:	5e                   	pop    esi
c002520c:	5f                   	pop    edi
c002520d:	5d                   	pop    ebp
c002520e:	c3                   	ret    
c002520f:	90                   	nop

c0025210 <SATA::read(unsigned long long, int, void*)>:
c0025210:	57                   	push   edi
c0025211:	b8 04 00 00 00       	mov    eax,0x4
c0025216:	56                   	push   esi
c0025217:	53                   	push   ebx
c0025218:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002521c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025220:	8d 7a ff             	lea    edi,[edx-0x1]
c0025223:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025227:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002522b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025231:	77 25                	ja     c0025258 <SATA::read(unsigned long long, int, void*)+0x48>
c0025233:	b8 06 00 00 00       	mov    eax,0x6
c0025238:	85 f6                	test   esi,esi
c002523a:	74 1c                	je     c0025258 <SATA::read(unsigned long long, int, void*)+0x48>
c002523c:	50                   	push   eax
c002523d:	50                   	push   eax
c002523e:	6a 00                	push   0x0
c0025240:	56                   	push   esi
c0025241:	52                   	push   edx
c0025242:	53                   	push   ebx
c0025243:	51                   	push   ecx
c0025244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025248:	e8 5d fd ff ff       	call   c0024faa <SATA::access(unsigned long long, int, void*, bool)>
c002524d:	83 c4 20             	add    esp,0x20
c0025250:	85 c0                	test   eax,eax
c0025252:	0f 95 c0             	setne  al
c0025255:	0f b6 c0             	movzx  eax,al
c0025258:	5b                   	pop    ebx
c0025259:	5e                   	pop    esi
c002525a:	5f                   	pop    edi
c002525b:	c3                   	ret    

c002525c <SATA::write(unsigned long long, int, void*)>:
c002525c:	55                   	push   ebp
c002525d:	b8 04 00 00 00       	mov    eax,0x4
c0025262:	57                   	push   edi
c0025263:	56                   	push   esi
c0025264:	53                   	push   ebx
c0025265:	83 ec 0c             	sub    esp,0xc
c0025268:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002526c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025270:	8d 73 ff             	lea    esi,[ebx-0x1]
c0025273:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025277:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002527b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025281:	77 3d                	ja     c00252c0 <SATA::write(unsigned long long, int, void*)+0x64>
c0025283:	b8 06 00 00 00       	mov    eax,0x6
c0025288:	85 ed                	test   ebp,ebp
c002528a:	74 34                	je     c00252c0 <SATA::write(unsigned long long, int, void*)+0x64>
c002528c:	c1 e3 09             	shl    ebx,0x9
c002528f:	01 eb                	add    ebx,ebp
c0025291:	89 d6                	mov    esi,edx
c0025293:	89 cf                	mov    edi,ecx
c0025295:	83 c6 01             	add    esi,0x1
c0025298:	83 d7 00             	adc    edi,0x0
c002529b:	50                   	push   eax
c002529c:	50                   	push   eax
c002529d:	6a 01                	push   0x1
c002529f:	55                   	push   ebp
c00252a0:	81 c5 00 02 00 00    	add    ebp,0x200
c00252a6:	6a 01                	push   0x1
c00252a8:	51                   	push   ecx
c00252a9:	52                   	push   edx
c00252aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252ae:	e8 f7 fc ff ff       	call   c0024faa <SATA::access(unsigned long long, int, void*, bool)>
c00252b3:	83 c4 20             	add    esp,0x20
c00252b6:	89 f2                	mov    edx,esi
c00252b8:	89 f9                	mov    ecx,edi
c00252ba:	39 dd                	cmp    ebp,ebx
c00252bc:	75 d3                	jne    c0025291 <SATA::write(unsigned long long, int, void*)+0x35>
c00252be:	31 c0                	xor    eax,eax
c00252c0:	83 c4 0c             	add    esp,0xc
c00252c3:	5b                   	pop    ebx
c00252c4:	5e                   	pop    esi
c00252c5:	5f                   	pop    edi
c00252c6:	5d                   	pop    ebp
c00252c7:	c3                   	ret    

c00252c8 <SATAPI::write(unsigned long long, int, void*)>:
c00252c8:	b8 03 00 00 00       	mov    eax,0x3
c00252cd:	c3                   	ret    

c00252ce <SATAPI::close(int, int, void*)>:
c00252ce:	83 ec 0c             	sub    esp,0xc
c00252d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00252db:	85 c0                	test   eax,eax
c00252dd:	74 0c                	je     c00252eb <SATAPI::close(int, int, void*)+0x1d>
c00252df:	83 ec 0c             	sub    esp,0xc
c00252e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00252e4:	50                   	push   eax
c00252e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00252e8:	83 c4 10             	add    esp,0x10
c00252eb:	31 c0                	xor    eax,eax
c00252ed:	83 c4 0c             	add    esp,0xc
c00252f0:	c3                   	ret    
c00252f1:	90                   	nop

c00252f2 <SATAPI::SATAPI()>:
c00252f2:	83 ec 0c             	sub    esp,0xc
c00252f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f9:	83 ec 04             	sub    esp,0x4
c00252fc:	68 00 08 00 00       	push   0x800
c0025301:	68 64 ce 02 c0       	push   0xc002ce64
c0025306:	50                   	push   eax
c0025307:	e8 ea ed fe ff       	call   c00140f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002530c:	83 c4 10             	add    esp,0x10
c002530f:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c0025314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025318:	89 10                	mov    DWORD PTR [eax],edx
c002531a:	90                   	nop
c002531b:	83 c4 0c             	add    esp,0xc
c002531e:	c3                   	ret    
c002531f:	90                   	nop

c0025320 <SATAPI::diskRemoved()>:
c0025320:	83 ec 18             	sub    esp,0x18
c0025323:	68 70 ce 02 c0       	push   0xc002ce70
c0025328:	e8 4f d5 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002532d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025331:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025338:	83 c4 1c             	add    esp,0x1c
c002533b:	c3                   	ret    

c002533c <SATAPI::diskInserted()>:
c002533c:	53                   	push   ebx
c002533d:	83 ec 14             	sub    esp,0x14
c0025340:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025344:	68 87 ce 02 c0       	push   0xc002ce87
c0025349:	e8 2e d5 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002534e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025358:	e8 01 ee fe ff       	call   c001415e <PhysicalDisk::startCache()>
c002535d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025361:	83 c4 18             	add    esp,0x18
c0025364:	5b                   	pop    ebx
c0025365:	e9 7c 10 ff ff       	jmp    c00163e6 <createPartitionsForDisk(PhysicalDisk*)>

c002536a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002536a:	55                   	push   ebp
c002536b:	57                   	push   edi
c002536c:	56                   	push   esi
c002536d:	53                   	push   ebx
c002536e:	83 ec 34             	sub    esp,0x34
c0025371:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025375:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025379:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002537d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025381:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025385:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002538b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025395:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002539b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002539f:	c1 e0 07             	shl    eax,0x7
c00253a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00253a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00253aa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00253b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b8:	8d 58 02             	lea    ebx,[eax+0x2]
c00253bb:	c1 e3 07             	shl    ebx,0x7
c00253be:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00253c2:	53                   	push   ebx
c00253c3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00253c9:	e8 ee eb ff ff       	call   c0023fbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00253ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00253d2:	83 c4 10             	add    esp,0x10
c00253d5:	b8 01 00 00 00       	mov    eax,0x1
c00253da:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00253df:	0f 84 85 01 00 00    	je     c002556a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00253e5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00253eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00253ed:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00253f3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00253f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00253fd:	c1 e1 05             	shl    ecx,0x5
c0025400:	01 c8                	add    eax,ecx
c0025402:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025404:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002540a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025410:	89 08                	mov    DWORD PTR [eax],ecx
c0025412:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025418:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002541e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025424:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025427:	8d 7b 40             	lea    edi,[ebx+0x40]
c002542a:	50                   	push   eax
c002542b:	68 90 00 00 00       	push   0x90
c0025430:	6a 00                	push   0x0
c0025432:	53                   	push   ebx
c0025433:	e8 18 b3 fd ff       	call   c0000750 <memset>
c0025438:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002543c:	b9 0c 00 00 00       	mov    ecx,0xc
c0025441:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025443:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025449:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002544d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025453:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025457:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002545b:	48                   	dec    eax
c002545c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025461:	89 c1                	mov    ecx,eax
c0025463:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025469:	25 00 00 c0 ff       	and    eax,0xffc00000
c002546e:	09 c8                	or     eax,ecx
c0025470:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025476:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025479:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025480:	66 25 00 7f          	and    ax,0x7f00
c0025484:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025488:	66 0d 27 80          	or     ax,0x8027
c002548c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025490:	66 89 03             	mov    WORD PTR [ebx],ax
c0025493:	89 d0                	mov    eax,edx
c0025495:	c1 ea 18             	shr    edx,0x18
c0025498:	c1 e8 10             	shr    eax,0x10
c002549b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002549e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00254a1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00254a5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00254a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00254ac:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00254af:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00254b3:	83 c4 10             	add    esp,0x10
c00254b6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00254ba:	31 c0                	xor    eax,eax
c00254bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00254c0:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00254c6:	80 e2 88             	and    dl,0x88
c00254c9:	74 0a                	je     c00254d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00254cb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00254d0:	74 0a                	je     c00254dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00254d2:	40                   	inc    eax
c00254d3:	eb eb                	jmp    c00254c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00254d5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00254da:	75 0f                	jne    c00254eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00254dc:	83 ec 0c             	sub    esp,0xc
c00254df:	68 0d ce 02 c0       	push   0xc002ce0d
c00254e4:	e8 3c 4d ff ff       	call   c001a225 <Krnl::panic(char const*)>
c00254e9:	eb 3f                	jmp    c002552a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00254eb:	ba 01 00 00 00       	mov    edx,0x1
c00254f0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00254f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00254f8:	d3 e2                	shl    edx,cl
c00254fa:	c1 e0 07             	shl    eax,0x7
c00254fd:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025503:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025507:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c002550d:	85 ca                	test   edx,ecx
c002550f:	74 23                	je     c0025534 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025511:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025517:	0f ba e1 1e          	bt     ecx,0x1e
c002551b:	73 ea                	jae    c0025507 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c002551d:	83 ec 0c             	sub    esp,0xc
c0025520:	68 9f ce 02 c0       	push   0xc002ce9f
c0025525:	e8 52 d3 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c002552a:	83 c4 10             	add    esp,0x10
c002552d:	b8 01 00 00 00       	mov    eax,0x1
c0025532:	eb 36                	jmp    c002556a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025534:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002553a:	0f ba e0 1e          	bt     eax,0x1e
c002553e:	73 0a                	jae    c002554a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025540:	83 ec 0c             	sub    esp,0xc
c0025543:	68 b2 ce 02 c0       	push   0xc002ceb2
c0025548:	eb db                	jmp    c0025525 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c002554a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002554f:	74 17                	je     c0025568 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025551:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025556:	74 10                	je     c0025568 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025558:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c002555e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025562:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025566:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025568:	31 c0                	xor    eax,eax
c002556a:	83 c4 2c             	add    esp,0x2c
c002556d:	5b                   	pop    ebx
c002556e:	5e                   	pop    esi
c002556f:	5f                   	pop    edi
c0025570:	5d                   	pop    ebp
c0025571:	c3                   	ret    

c0025572 <SATAPI::eject()>:
c0025572:	57                   	push   edi
c0025573:	b9 03 00 00 00       	mov    ecx,0x3
c0025578:	53                   	push   ebx
c0025579:	83 ec 14             	sub    esp,0x14
c002557c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025580:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025584:	fc                   	cld    
c0025585:	31 c0                	xor    eax,eax
c0025587:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025589:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002558e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025593:	50                   	push   eax
c0025594:	6a 00                	push   0x0
c0025596:	6a 00                	push   0x0
c0025598:	6a 00                	push   0x0
c002559a:	6a 00                	push   0x0
c002559c:	6a 02                	push   0x2
c002559e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255a2:	50                   	push   eax
c00255a3:	53                   	push   ebx
c00255a4:	e8 c1 fd ff ff       	call   c002536a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255a9:	83 c4 14             	add    esp,0x14
c00255ac:	53                   	push   ebx
c00255ad:	e8 6e fd ff ff       	call   c0025320 <SATAPI::diskRemoved()>
c00255b2:	83 c4 24             	add    esp,0x24
c00255b5:	31 c0                	xor    eax,eax
c00255b7:	5b                   	pop    ebx
c00255b8:	5f                   	pop    edi
c00255b9:	c3                   	ret    

c00255ba <SATAPI::detectMedia()>:
c00255ba:	56                   	push   esi
c00255bb:	53                   	push   ebx
c00255bc:	83 ec 28             	sub    esp,0x28
c00255bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255c3:	6a 0c                	push   0xc
c00255c5:	6a 00                	push   0x0
c00255c7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00255cb:	56                   	push   esi
c00255cc:	e8 7f b1 fd ff       	call   c0000750 <memset>
c00255d1:	83 c4 0c             	add    esp,0xc
c00255d4:	6a 00                	push   0x0
c00255d6:	6a 00                	push   0x0
c00255d8:	6a 00                	push   0x0
c00255da:	6a 00                	push   0x0
c00255dc:	6a 00                	push   0x0
c00255de:	56                   	push   esi
c00255df:	53                   	push   ebx
c00255e0:	e8 85 fd ff ff       	call   c002536a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255e5:	83 c4 1c             	add    esp,0x1c
c00255e8:	6a 0c                	push   0xc
c00255ea:	6a 00                	push   0x0
c00255ec:	56                   	push   esi
c00255ed:	e8 5e b1 fd ff       	call   c0000750 <memset>
c00255f2:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00255f7:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00255fc:	83 c4 0c             	add    esp,0xc
c00255ff:	6a 01                	push   0x1
c0025601:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025605:	50                   	push   eax
c0025606:	6a 00                	push   0x0
c0025608:	6a 00                	push   0x0
c002560a:	6a 12                	push   0x12
c002560c:	56                   	push   esi
c002560d:	53                   	push   ebx
c002560e:	e8 57 fd ff ff       	call   c002536a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025613:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025617:	83 c4 20             	add    esp,0x20
c002561a:	83 e0 7f             	and    eax,0x7f
c002561d:	3c 70                	cmp    al,0x70
c002561f:	74 15                	je     c0025636 <SATAPI::detectMedia()+0x7c>
c0025621:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025628:	75 0c                	jne    c0025636 <SATAPI::detectMedia()+0x7c>
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	53                   	push   ebx
c002562e:	e8 09 fd ff ff       	call   c002533c <SATAPI::diskInserted()>
c0025633:	83 c4 10             	add    esp,0x10
c0025636:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002563a:	83 e0 0f             	and    eax,0xf
c002563d:	3c 02                	cmp    al,0x2
c002563f:	75 1b                	jne    c002565c <SATAPI::detectMedia()+0xa2>
c0025641:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025646:	75 2d                	jne    c0025675 <SATAPI::detectMedia()+0xbb>
c0025648:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002564f:	74 24                	je     c0025675 <SATAPI::detectMedia()+0xbb>
c0025651:	83 ec 0c             	sub    esp,0xc
c0025654:	53                   	push   ebx
c0025655:	e8 c6 fc ff ff       	call   c0025320 <SATAPI::diskRemoved()>
c002565a:	eb 16                	jmp    c0025672 <SATAPI::detectMedia()+0xb8>
c002565c:	84 c0                	test   al,al
c002565e:	75 15                	jne    c0025675 <SATAPI::detectMedia()+0xbb>
c0025660:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025667:	75 0c                	jne    c0025675 <SATAPI::detectMedia()+0xbb>
c0025669:	83 ec 0c             	sub    esp,0xc
c002566c:	53                   	push   ebx
c002566d:	e8 ca fc ff ff       	call   c002533c <SATAPI::diskInserted()>
c0025672:	83 c4 10             	add    esp,0x10
c0025675:	83 c4 24             	add    esp,0x24
c0025678:	5b                   	pop    ebx
c0025679:	5e                   	pop    esi
c002567a:	c3                   	ret    
c002567b:	90                   	nop

c002567c <SATAPI::open(int, int, void*)>:
c002567c:	56                   	push   esi
c002567d:	53                   	push   ebx
c002567e:	50                   	push   eax
c002567f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025683:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025687:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025691:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025697:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00256a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00256af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00256b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00256bc:	e8 56 a5 fe ff       	call   c000fc17 <Phys::allocatePage()>
c00256c1:	89 c6                	mov    esi,eax
c00256c3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256c9:	81 c6 00 10 00 00    	add    esi,0x1000
c00256cf:	e8 43 a5 fe ff       	call   c000fc17 <Phys::allocatePage()>
c00256d4:	39 c6                	cmp    esi,eax
c00256d6:	74 10                	je     c00256e8 <SATAPI::open(int, int, void*)+0x6c>
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	68 c7 ce 02 c0       	push   0xc002cec7
c00256e0:	e8 40 4b ff ff       	call   c001a225 <Krnl::panic(char const*)>
c00256e5:	83 c4 10             	add    esp,0x10
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	6a 02                	push   0x2
c00256ed:	e8 af bd fe ff       	call   c00114a1 <Virt::allocateKernelVirtualPages(int)>
c00256f2:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00256f8:	6a 03                	push   0x3
c00256fa:	50                   	push   eax
c00256fb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025701:	ff 35 30 e6 02 c0    	push   DWORD PTR ds:0xc002e630
c0025707:	e8 3c c4 fe ff       	call   c0011b48 <VAS::mapPage(unsigned long, unsigned long, int)>
c002570c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025713:	83 c4 14             	add    esp,0x14
c0025716:	53                   	push   ebx
c0025717:	e8 9e fe ff ff       	call   c00255ba <SATAPI::detectMedia()>
c002571c:	83 c4 14             	add    esp,0x14
c002571f:	31 c0                	xor    eax,eax
c0025721:	5b                   	pop    ebx
c0025722:	5e                   	pop    esi
c0025723:	c3                   	ret    

c0025724 <SATAPI::read(unsigned long long, int, void*)>:
c0025724:	55                   	push   ebp
c0025725:	57                   	push   edi
c0025726:	56                   	push   esi
c0025727:	53                   	push   ebx
c0025728:	83 ec 1c             	sub    esp,0x1c
c002572b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002572f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025733:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025737:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002573e:	74 19                	je     c0025759 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025740:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025745:	7e 2e                	jle    c0025775 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025747:	83 ec 0c             	sub    esp,0xc
c002574a:	68 dd ce 02 c0       	push   0xc002cedd
c002574f:	e8 d1 4a ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0025754:	83 c4 10             	add    esp,0x10
c0025757:	eb 1c                	jmp    c0025775 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025759:	83 ec 0c             	sub    esp,0xc
c002575c:	55                   	push   ebp
c002575d:	e8 58 fe ff ff       	call   c00255ba <SATAPI::detectMedia()>
c0025762:	83 c4 10             	add    esp,0x10
c0025765:	b8 02 00 00 00       	mov    eax,0x2
c002576a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025771:	75 cd                	jne    c0025740 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025773:	eb 49                	jmp    c00257be <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025775:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025779:	b9 03 00 00 00       	mov    ecx,0x3
c002577e:	fc                   	cld    
c002577f:	31 c0                	xor    eax,eax
c0025781:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025783:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025788:	89 d8                	mov    eax,ebx
c002578a:	86 e0                	xchg   al,ah
c002578c:	c1 c0 10             	rol    eax,0x10
c002578f:	86 e0                	xchg   al,ah
c0025791:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025795:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025799:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002579d:	50                   	push   eax
c002579e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00257a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00257a6:	56                   	push   esi
c00257a7:	53                   	push   ebx
c00257a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00257ac:	c1 e0 0b             	shl    eax,0xb
c00257af:	50                   	push   eax
c00257b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00257b4:	50                   	push   eax
c00257b5:	55                   	push   ebp
c00257b6:	e8 af fb ff ff       	call   c002536a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00257bb:	83 c4 20             	add    esp,0x20
c00257be:	83 c4 1c             	add    esp,0x1c
c00257c1:	5b                   	pop    ebx
c00257c2:	5e                   	pop    esi
c00257c3:	5f                   	pop    edi
c00257c4:	5d                   	pop    ebp
c00257c5:	c3                   	ret    

c00257c6 <AVX::open(int, int, void*)>:
c00257c6:	83 ec 0c             	sub    esp,0xc
c00257c9:	e8 3a 11 00 00       	call   c0026908 <avxInit>
c00257ce:	b8 00 00 00 00       	mov    eax,0x0
c00257d3:	83 c4 0c             	add    esp,0xc
c00257d6:	c3                   	ret    
c00257d7:	90                   	nop

c00257d8 <AVX::close(int, int, void*)>:
c00257d8:	83 ec 0c             	sub    esp,0xc
c00257db:	e8 29 11 00 00       	call   c0026909 <avxClose>
c00257e0:	b8 00 00 00 00       	mov    eax,0x0
c00257e5:	83 c4 0c             	add    esp,0xc
c00257e8:	c3                   	ret    
c00257e9:	90                   	nop

c00257ea <AVX::available()>:
c00257ea:	83 ec 0c             	sub    esp,0xc
c00257ed:	e8 0e 11 00 00       	call   c0026900 <avxDetect>
c00257f2:	85 c0                	test   eax,eax
c00257f4:	0f 95 c0             	setne  al
c00257f7:	83 c4 0c             	add    esp,0xc
c00257fa:	c3                   	ret    
c00257fb:	90                   	nop

c00257fc <AVX::save(void*)>:
c00257fc:	83 ec 0c             	sub    esp,0xc
c00257ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025803:	83 ec 0c             	sub    esp,0xc
c0025806:	50                   	push   eax
c0025807:	e8 fa 10 00 00       	call   c0026906 <avxSave>
c002580c:	83 c4 10             	add    esp,0x10
c002580f:	90                   	nop
c0025810:	83 c4 0c             	add    esp,0xc
c0025813:	c3                   	ret    

c0025814 <AVX::load(void*)>:
c0025814:	83 ec 0c             	sub    esp,0xc
c0025817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002581b:	83 ec 0c             	sub    esp,0xc
c002581e:	50                   	push   eax
c002581f:	e8 e3 10 00 00       	call   c0026907 <avxLoad>
c0025824:	83 c4 10             	add    esp,0x10
c0025827:	90                   	nop
c0025828:	83 c4 0c             	add    esp,0xc
c002582b:	c3                   	ret    

c002582c <AVX::AVX()>:
c002582c:	83 ec 0c             	sub    esp,0xc
c002582f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025833:	83 ec 08             	sub    esp,0x8
c0025836:	68 40 cf 02 c0       	push   0xc002cf40
c002583b:	50                   	push   eax
c002583c:	e8 93 e9 fe ff       	call   c00141d4 <FPU::FPU(char const*)>
c0025841:	83 c4 10             	add    esp,0x10
c0025844:	ba 50 cf 02 c0       	mov    edx,0xc002cf50
c0025849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584d:	89 10                	mov    DWORD PTR [eax],edx
c002584f:	90                   	nop
c0025850:	83 c4 0c             	add    esp,0xc
c0025853:	c3                   	ret    

c0025854 <MMX::available()>:
c0025854:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025859:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002585f:	83 e0 20             	and    eax,0x20
c0025862:	84 c0                	test   al,al
c0025864:	0f 95 c0             	setne  al
c0025867:	c3                   	ret    

c0025868 <MMX::open(int, int, void*)>:
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	e8 22 11 00 00       	call   c0026992 <x87Init>
c0025870:	b8 00 00 00 00       	mov    eax,0x0
c0025875:	83 c4 0c             	add    esp,0xc
c0025878:	c3                   	ret    
c0025879:	90                   	nop

c002587a <MMX::close(int, int, void*)>:
c002587a:	83 ec 0c             	sub    esp,0xc
c002587d:	e8 2a 11 00 00       	call   c00269ac <x87Close>
c0025882:	b8 00 00 00 00       	mov    eax,0x0
c0025887:	83 c4 0c             	add    esp,0xc
c002588a:	c3                   	ret    
c002588b:	90                   	nop

c002588c <MMX::save(void*)>:
c002588c:	83 ec 0c             	sub    esp,0xc
c002588f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025893:	83 ec 0c             	sub    esp,0xc
c0025896:	50                   	push   eax
c0025897:	e8 e5 10 00 00       	call   c0026981 <x87Save>
c002589c:	83 c4 10             	add    esp,0x10
c002589f:	90                   	nop
c00258a0:	83 c4 0c             	add    esp,0xc
c00258a3:	c3                   	ret    

c00258a4 <MMX::load(void*)>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258ab:	83 ec 0c             	sub    esp,0xc
c00258ae:	50                   	push   eax
c00258af:	e8 d6 10 00 00       	call   c002698a <x87Load>
c00258b4:	83 c4 10             	add    esp,0x10
c00258b7:	90                   	nop
c00258b8:	83 c4 0c             	add    esp,0xc
c00258bb:	c3                   	ret    

c00258bc <MMX::MMX()>:
c00258bc:	83 ec 0c             	sub    esp,0xc
c00258bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c3:	83 ec 08             	sub    esp,0x8
c00258c6:	68 80 cf 02 c0       	push   0xc002cf80
c00258cb:	50                   	push   eax
c00258cc:	e8 03 e9 fe ff       	call   c00141d4 <FPU::FPU(char const*)>
c00258d1:	83 c4 10             	add    esp,0x10
c00258d4:	ba 90 cf 02 c0       	mov    edx,0xc002cf90
c00258d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258dd:	89 10                	mov    DWORD PTR [eax],edx
c00258df:	90                   	nop
c00258e0:	83 c4 0c             	add    esp,0xc
c00258e3:	c3                   	ret    

c00258e4 <SSE::open(int, int, void*)>:
c00258e4:	83 ec 0c             	sub    esp,0xc
c00258e7:	e8 58 10 00 00       	call   c0026944 <sseInit>
c00258ec:	b8 00 00 00 00       	mov    eax,0x0
c00258f1:	83 c4 0c             	add    esp,0xc
c00258f4:	c3                   	ret    
c00258f5:	90                   	nop

c00258f6 <SSE::close(int, int, void*)>:
c00258f6:	83 ec 0c             	sub    esp,0xc
c00258f9:	e8 56 10 00 00       	call   c0026954 <sseClose>
c00258fe:	b8 00 00 00 00       	mov    eax,0x0
c0025903:	83 c4 0c             	add    esp,0xc
c0025906:	c3                   	ret    
c0025907:	90                   	nop

c0025908 <SSE::available()>:
c0025908:	83 ec 1c             	sub    esp,0x1c
c002590b:	e8 10 10 00 00       	call   c0026920 <absolutelyNoChanceInHell>
c0025910:	85 c0                	test   eax,eax
c0025912:	0f 95 c0             	setne  al
c0025915:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025919:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002591d:	83 c4 1c             	add    esp,0x1c
c0025920:	c3                   	ret    
c0025921:	90                   	nop

c0025922 <SSE::save(void*)>:
c0025922:	83 ec 0c             	sub    esp,0xc
c0025925:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025929:	83 ec 0c             	sub    esp,0xc
c002592c:	50                   	push   eax
c002592d:	e8 06 10 00 00       	call   c0026938 <sseSave>
c0025932:	83 c4 10             	add    esp,0x10
c0025935:	90                   	nop
c0025936:	83 c4 0c             	add    esp,0xc
c0025939:	c3                   	ret    

c002593a <SSE::load(void*)>:
c002593a:	83 ec 0c             	sub    esp,0xc
c002593d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025941:	83 ec 0c             	sub    esp,0xc
c0025944:	50                   	push   eax
c0025945:	e8 f4 0f 00 00       	call   c002693e <sseLoad>
c002594a:	83 c4 10             	add    esp,0x10
c002594d:	90                   	nop
c002594e:	83 c4 0c             	add    esp,0xc
c0025951:	c3                   	ret    

c0025952 <SSE::SSE()>:
c0025952:	83 ec 0c             	sub    esp,0xc
c0025955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025959:	83 ec 08             	sub    esp,0x8
c002595c:	68 c0 cf 02 c0       	push   0xc002cfc0
c0025961:	50                   	push   eax
c0025962:	e8 6d e8 fe ff       	call   c00141d4 <FPU::FPU(char const*)>
c0025967:	83 c4 10             	add    esp,0x10
c002596a:	ba d0 cf 02 c0       	mov    edx,0xc002cfd0
c002596f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025973:	89 10                	mov    DWORD PTR [eax],edx
c0025975:	90                   	nop
c0025976:	83 c4 0c             	add    esp,0xc
c0025979:	c3                   	ret    

c002597a <x87::open(int, int, void*)>:
c002597a:	83 ec 0c             	sub    esp,0xc
c002597d:	e8 10 10 00 00       	call   c0026992 <x87Init>
c0025982:	b8 00 00 00 00       	mov    eax,0x0
c0025987:	83 c4 0c             	add    esp,0xc
c002598a:	c3                   	ret    
c002598b:	90                   	nop

c002598c <x87::close(int, int, void*)>:
c002598c:	83 ec 0c             	sub    esp,0xc
c002598f:	e8 18 10 00 00       	call   c00269ac <x87Close>
c0025994:	b8 00 00 00 00       	mov    eax,0x0
c0025999:	83 c4 0c             	add    esp,0xc
c002599c:	c3                   	ret    
c002599d:	90                   	nop

c002599e <x87::available()>:
c002599e:	83 ec 0c             	sub    esp,0xc
c00259a1:	e8 c0 0f 00 00       	call   c0026966 <x87Detect>
c00259a6:	85 c0                	test   eax,eax
c00259a8:	0f 95 c0             	setne  al
c00259ab:	83 c4 0c             	add    esp,0xc
c00259ae:	c3                   	ret    
c00259af:	90                   	nop

c00259b0 <x87::save(void*)>:
c00259b0:	83 ec 0c             	sub    esp,0xc
c00259b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259b7:	83 ec 0c             	sub    esp,0xc
c00259ba:	50                   	push   eax
c00259bb:	e8 c1 0f 00 00       	call   c0026981 <x87Save>
c00259c0:	83 c4 10             	add    esp,0x10
c00259c3:	90                   	nop
c00259c4:	83 c4 0c             	add    esp,0xc
c00259c7:	c3                   	ret    

c00259c8 <x87::load(void*)>:
c00259c8:	83 ec 0c             	sub    esp,0xc
c00259cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259cf:	83 ec 0c             	sub    esp,0xc
c00259d2:	50                   	push   eax
c00259d3:	e8 b2 0f 00 00       	call   c002698a <x87Load>
c00259d8:	83 c4 10             	add    esp,0x10
c00259db:	90                   	nop
c00259dc:	83 c4 0c             	add    esp,0xc
c00259df:	c3                   	ret    

c00259e0 <x87::x87()>:
c00259e0:	83 ec 0c             	sub    esp,0xc
c00259e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e7:	83 ec 08             	sub    esp,0x8
c00259ea:	68 00 d0 02 c0       	push   0xc002d000
c00259ef:	50                   	push   eax
c00259f0:	e8 df e7 fe ff       	call   c00141d4 <FPU::FPU(char const*)>
c00259f5:	83 c4 10             	add    esp,0x10
c00259f8:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c00259fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a01:	89 10                	mov    DWORD PTR [eax],edx
c0025a03:	90                   	nop
c0025a04:	83 c4 0c             	add    esp,0xc
c0025a07:	c3                   	ret    

c0025a08 <APIC::disable()>:
c0025a08:	90                   	nop
c0025a09:	c3                   	ret    

c0025a0a <APIC::close(int, int, void*)>:
c0025a0a:	55                   	push   ebp
c0025a0b:	89 e5                	mov    ebp,esp
c0025a0d:	83 ec 08             	sub    esp,0x8
c0025a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a15:	83 c0 3c             	add    eax,0x3c
c0025a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1a:	83 ec 0c             	sub    esp,0xc
c0025a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a20:	ff d0                	call   eax
c0025a22:	83 c4 10             	add    esp,0x10
c0025a25:	b8 00 00 00 00       	mov    eax,0x0
c0025a2a:	c9                   	leave  
c0025a2b:	c3                   	ret    

c0025a2c <IOAPIC::close(int, int, void*)>:
c0025a2c:	b8 00 00 00 00       	mov    eax,0x0
c0025a31:	c3                   	ret    

c0025a32 <APIC::io_wait()>:
c0025a32:	eb 00                	jmp    c0025a34 <APIC::io_wait()+0x2>
c0025a34:	eb 00                	jmp    c0025a36 <APIC::io_wait()+0x4>
c0025a36:	90                   	nop
c0025a37:	c3                   	ret    

c0025a38 <APIC::getBase()>:
c0025a38:	55                   	push   ebp
c0025a39:	89 e5                	mov    ebp,esp
c0025a3b:	83 ec 18             	sub    esp,0x18
c0025a3e:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025a43:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025a49:	83 e0 08             	and    eax,0x8
c0025a4c:	84 c0                	test   al,al
c0025a4e:	75 07                	jne    c0025a57 <APIC::getBase()+0x1f>
c0025a50:	b8 00 00 00 00       	mov    eax,0x0
c0025a55:	eb 21                	jmp    c0025a78 <APIC::getBase()+0x40>
c0025a57:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025a5c:	83 ec 08             	sub    esp,0x8
c0025a5f:	6a 1b                	push   0x1b
c0025a61:	50                   	push   eax
c0025a62:	e8 1b 93 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025a67:	83 c4 10             	add    esp,0x10
c0025a6a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a6d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025a70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025a78:	c9                   	leave  
c0025a79:	c3                   	ret    

c0025a7a <APIC::eoi(unsigned char)>:
c0025a7a:	55                   	push   ebp
c0025a7b:	89 e5                	mov    ebp,esp
c0025a7d:	83 ec 28             	sub    esp,0x28
c0025a80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a83:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a8c:	e8 a7 ff ff ff       	call   c0025a38 <APIC::getBase()>
c0025a91:	83 c4 10             	add    esp,0x10
c0025a94:	05 b0 00 00 00       	add    eax,0xb0
c0025a99:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025a9f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025aa5:	90                   	nop
c0025aa6:	c9                   	leave  
c0025aa7:	c3                   	ret    

c0025aa8 <APIC::open(int, int, void*)>:
c0025aa8:	55                   	push   ebp
c0025aa9:	89 e5                	mov    ebp,esp
c0025aab:	57                   	push   edi
c0025aac:	56                   	push   esi
c0025aad:	53                   	push   ebx
c0025aae:	83 ec 2c             	sub    esp,0x2c
c0025ab1:	83 ec 0c             	sub    esp,0xc
c0025ab4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ab7:	e8 7c ff ff ff       	call   c0025a38 <APIC::getBase()>
c0025abc:	83 c4 10             	add    esp,0x10
c0025abf:	89 c2                	mov    edx,eax
c0025ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025aca:	0f b6 f8             	movzx  edi,al
c0025acd:	89 d0                	mov    eax,edx
c0025acf:	ba 00 00 00 00       	mov    edx,0x0
c0025ad4:	89 c1                	mov    ecx,eax
c0025ad6:	80 e5 ff             	and    ch,0xff
c0025ad9:	89 cb                	mov    ebx,ecx
c0025adb:	0f b6 f2             	movzx  esi,dl
c0025ade:	89 d8                	mov    eax,ebx
c0025ae0:	89 f2                	mov    edx,esi
c0025ae2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ae5:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ae8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025aec:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025af0:	83 e0 00             	and    eax,0x0
c0025af3:	09 d0                	or     eax,edx
c0025af5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b02:	8d 50 01             	lea    edx,[eax+0x1]
c0025b05:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b08:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b0e:	0f b6 d0             	movzx  edx,al
c0025b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b14:	83 c2 08             	add    edx,0x8
c0025b17:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b1b:	0f b6 c9             	movzx  ecx,cl
c0025b1e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025b24:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b28:	83 ec 0c             	sub    esp,0xc
c0025b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b2e:	e8 05 ff ff ff       	call   c0025a38 <APIC::getBase()>
c0025b33:	83 c4 10             	add    esp,0x10
c0025b36:	05 f0 00 00 00       	add    eax,0xf0
c0025b3b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025b3e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b43:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b46:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025b4d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025b54:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b57:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b5a:	89 10                	mov    DWORD PTR [eax],edx
c0025b5c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025b63:	a1 70 ed 02 c0       	mov    eax,ds:0xc002ed70
c0025b68:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025b6b:	7d 7c                	jge    c0025be9 <APIC::open(int, int, void*)+0x141>
c0025b6d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b70:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0025b77:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025b7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b7d:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0025b84:	c1 e8 08             	shr    eax,0x8
c0025b87:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025b8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b8e:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c0025b95:	c1 e8 18             	shr    eax,0x18
c0025b98:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025b9b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025b9f:	75 40                	jne    c0025be1 <APIC::open(int, int, void*)+0x139>
c0025ba1:	83 ec 0c             	sub    esp,0xc
c0025ba4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ba7:	e8 8c fe ff ff       	call   c0025a38 <APIC::getBase()>
c0025bac:	83 c4 10             	add    esp,0x10
c0025baf:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025bb3:	75 07                	jne    c0025bbc <APIC::open(int, int, void*)+0x114>
c0025bb5:	ba 60 03 00 00       	mov    edx,0x360
c0025bba:	eb 05                	jmp    c0025bc1 <APIC::open(int, int, void*)+0x119>
c0025bbc:	ba 50 03 00 00       	mov    edx,0x350
c0025bc1:	01 d0                	add    eax,edx
c0025bc3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025bc6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025bce:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025bd5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025bd9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025bdc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025bdf:	89 10                	mov    DWORD PTR [eax],edx
c0025be1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025be4:	e9 7a ff ff ff       	jmp    c0025b63 <APIC::open(int, int, void*)+0xbb>
c0025be9:	b8 00 00 00 00       	mov    eax,0x0
c0025bee:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bf1:	5b                   	pop    ebx
c0025bf2:	5e                   	pop    esi
c0025bf3:	5f                   	pop    edi
c0025bf4:	5d                   	pop    ebp
c0025bf5:	c3                   	ret    

c0025bf6 <IOAPIC::IOAPIC()>:
c0025bf6:	83 ec 0c             	sub    esp,0xc
c0025bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfd:	83 ec 08             	sub    esp,0x8
c0025c00:	68 40 d0 02 c0       	push   0xc002d040
c0025c05:	50                   	push   eax
c0025c06:	e8 b9 e2 fe ff       	call   c0013ec4 <Device::Device(char const*)>
c0025c0b:	83 c4 10             	add    esp,0x10
c0025c0e:	ba 68 d1 02 c0       	mov    edx,0xc002d168
c0025c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c17:	89 10                	mov    DWORD PTR [eax],edx
c0025c19:	90                   	nop
c0025c1a:	83 c4 0c             	add    esp,0xc
c0025c1d:	c3                   	ret    

c0025c1e <APIC::APIC()>:
c0025c1e:	53                   	push   ebx
c0025c1f:	83 ec 18             	sub    esp,0x18
c0025c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c26:	83 ec 08             	sub    esp,0x8
c0025c29:	68 48 d0 02 c0       	push   0xc002d048
c0025c2e:	50                   	push   eax
c0025c2f:	e8 fa e9 fe ff       	call   c001462e <InterruptController::InterruptController(char const*)>
c0025c34:	83 c4 10             	add    esp,0x10
c0025c37:	ba 20 d1 02 c0       	mov    edx,0xc002d120
c0025c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c40:	89 10                	mov    DWORD PTR [eax],edx
c0025c42:	a0 40 08 03 c0       	mov    al,ds:0xc0030840
c0025c47:	83 f0 01             	xor    eax,0x1
c0025c4a:	84 c0                	test   al,al
c0025c4c:	0f 84 a1 00 00 00    	je     c0025cf3 <APIC::APIC()+0xd5>
c0025c52:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025c57:	a0 20 ee 02 c0       	mov    al,ds:0xc002ee20
c0025c5c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025c60:	0f 83 86 00 00 00    	jae    c0025cec <APIC::APIC()+0xce>
c0025c66:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025c6e:	83 ec 0c             	sub    esp,0xc
c0025c71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025c75:	e8 a1 9b fe ff       	call   c000f81b <malloc>
c0025c7a:	83 c4 10             	add    esp,0x10
c0025c7d:	89 c3                	mov    ebx,eax
c0025c7f:	83 ec 0c             	sub    esp,0xc
c0025c82:	53                   	push   ebx
c0025c83:	e8 6e ff ff ff       	call   c0025bf6 <IOAPIC::IOAPIC()>
c0025c88:	83 c4 10             	add    esp,0x10
c0025c8b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025c8f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025c94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025c98:	89 14 85 20 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7e0],edx
c0025c9f:	a1 00 08 03 c0       	mov    eax,ds:0xc0030800
c0025ca4:	40                   	inc    eax
c0025ca5:	a3 00 08 03 c0       	mov    ds:0xc0030800,eax
c0025caa:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0025caf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025cb5:	83 ec 08             	sub    esp,0x8
c0025cb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025cbc:	50                   	push   eax
c0025cbd:	e8 fe df fe ff       	call   c0013cc0 <Device::addChild(Device*)>
c0025cc2:	83 c4 10             	add    esp,0x10
c0025cc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ccb:	83 c0 08             	add    eax,0x8
c0025cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cd0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025cd5:	6a 00                	push   0x0
c0025cd7:	6a 00                	push   0x0
c0025cd9:	52                   	push   edx
c0025cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025cde:	ff d0                	call   eax
c0025ce0:	83 c4 10             	add    esp,0x10
c0025ce3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ce7:	e9 6b ff ff ff       	jmp    c0025c57 <APIC::APIC()+0x39>
c0025cec:	c6 05 40 08 03 c0 01 	mov    BYTE PTR ds:0xc0030840,0x1
c0025cf3:	90                   	nop
c0025cf4:	83 c4 18             	add    esp,0x18
c0025cf7:	5b                   	pop    ebx
c0025cf8:	c3                   	ret    
c0025cf9:	90                   	nop

c0025cfa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025cfa:	55                   	push   ebp
c0025cfb:	89 e5                	mov    ebp,esp
c0025cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025d06:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025d09:	72 1d                	jb     c0025d28 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d0e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d17:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025d1d:	01 d0                	add    eax,edx
c0025d1f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025d22:	73 04                	jae    c0025d28 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025d24:	b0 01                	mov    al,0x1
c0025d26:	eb 02                	jmp    c0025d2a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025d28:	b0 00                	mov    al,0x0
c0025d2a:	5d                   	pop    ebp
c0025d2b:	c3                   	ret    

c0025d2c <IOAPIC::read(int)>:
c0025d2c:	55                   	push   ebp
c0025d2d:	89 e5                	mov    ebp,esp
c0025d2f:	83 ec 10             	sub    esp,0x10
c0025d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025d3b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025d3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d41:	0f b6 d0             	movzx  edx,al
c0025d44:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d47:	89 10                	mov    DWORD PTR [eax],edx
c0025d49:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d4c:	83 c0 10             	add    eax,0x10
c0025d4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d51:	c9                   	leave  
c0025d52:	c3                   	ret    
c0025d53:	90                   	nop

c0025d54 <IOAPIC::open(int, int, void*)>:
c0025d54:	55                   	push   ebp
c0025d55:	89 e5                	mov    ebp,esp
c0025d57:	57                   	push   edi
c0025d58:	56                   	push   esi
c0025d59:	53                   	push   ebx
c0025d5a:	83 ec 0c             	sub    esp,0xc
c0025d5d:	83 ec 0c             	sub    esp,0xc
c0025d60:	68 73 d0 02 c0       	push   0xc002d073
c0025d65:	e8 12 cb fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0025d6a:	83 c4 10             	add    esp,0x10
c0025d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d7c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d82:	8b 14 85 60 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd11a0]
c0025d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d9b:	8b 14 85 e0 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1120]
c0025da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025da5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dae:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025dbd:	0f b6 f8             	movzx  edi,al
c0025dc0:	89 d0                	mov    eax,edx
c0025dc2:	ba 00 00 00 00       	mov    edx,0x0
c0025dc7:	89 c1                	mov    ecx,eax
c0025dc9:	80 e5 ff             	and    ch,0xff
c0025dcc:	89 cb                	mov    ebx,ecx
c0025dce:	0f b6 f2             	movzx  esi,dl
c0025dd1:	89 d8                	mov    eax,ebx
c0025dd3:	89 f2                	mov    edx,esi
c0025dd5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025dd8:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ddb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ddf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025de3:	83 e0 00             	and    eax,0x0
c0025de6:	09 d0                	or     eax,edx
c0025de8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025def:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025df5:	8d 50 01             	lea    edx,[eax+0x1]
c0025df8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025dfb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025e01:	0f b6 d0             	movzx  edx,al
c0025e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e07:	83 c2 08             	add    edx,0x8
c0025e0a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025e0e:	0f b6 c9             	movzx  ecx,cl
c0025e11:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025e17:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025e1b:	83 ec 08             	sub    esp,0x8
c0025e1e:	6a 01                	push   0x1
c0025e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e23:	e8 04 ff ff ff       	call   c0025d2c <IOAPIC::read(int)>
c0025e28:	83 c4 10             	add    esp,0x10
c0025e2b:	c1 f8 10             	sar    eax,0x10
c0025e2e:	0f b6 c0             	movzx  eax,al
c0025e31:	8d 50 01             	lea    edx,[eax+0x1]
c0025e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e37:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025e3d:	b8 00 00 00 00       	mov    eax,0x0
c0025e42:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e45:	5b                   	pop    ebx
c0025e46:	5e                   	pop    esi
c0025e47:	5f                   	pop    edi
c0025e48:	5d                   	pop    ebp
c0025e49:	c3                   	ret    

c0025e4a <IOAPIC::write(int, int)>:
c0025e4a:	55                   	push   ebp
c0025e4b:	89 e5                	mov    ebp,esp
c0025e4d:	83 ec 10             	sub    esp,0x10
c0025e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e53:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e59:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e5f:	0f b6 d0             	movzx  edx,al
c0025e62:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e65:	89 10                	mov    DWORD PTR [eax],edx
c0025e67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e6a:	8d 50 10             	lea    edx,[eax+0x10]
c0025e6d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e70:	89 02                	mov    DWORD PTR [edx],eax
c0025e72:	90                   	nop
c0025e73:	c9                   	leave  
c0025e74:	c3                   	ret    
c0025e75:	90                   	nop

c0025e76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025e76:	55                   	push   ebp
c0025e77:	89 e5                	mov    ebp,esp
c0025e79:	53                   	push   ebx
c0025e7a:	83 ec 2c             	sub    esp,0x2c
c0025e7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e80:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025e83:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025e86:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025e89:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025e8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e8f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e92:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e95:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e98:	88 d8                	mov    al,bl
c0025e9a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025e9d:	88 c8                	mov    al,cl
c0025e9f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ea2:	88 d0                	mov    al,dl
c0025ea4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ea7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025eab:	83 c0 08             	add    eax,0x8
c0025eae:	01 c0                	add    eax,eax
c0025eb0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025eb3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025eb7:	83 c0 08             	add    eax,0x8
c0025eba:	01 c0                	add    eax,eax
c0025ebc:	40                   	inc    eax
c0025ebd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ec0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ec3:	50                   	push   eax
c0025ec4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec7:	e8 60 fe ff ff       	call   c0025d2c <IOAPIC::read(int)>
c0025ecc:	83 c4 08             	add    esp,0x8
c0025ecf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ed2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ed9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025edc:	c1 e0 18             	shl    eax,0x18
c0025edf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ee2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ee5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ee8:	52                   	push   edx
c0025ee9:	50                   	push   eax
c0025eea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eed:	e8 58 ff ff ff       	call   c0025e4a <IOAPIC::write(int, int)>
c0025ef2:	83 c4 0c             	add    esp,0xc
c0025ef5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ef8:	50                   	push   eax
c0025ef9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025efc:	e8 2b fe ff ff       	call   c0025d2c <IOAPIC::read(int)>
c0025f01:	83 c4 08             	add    esp,0x8
c0025f04:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f07:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025f0e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025f15:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025f1c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025f20:	74 09                	je     c0025f2b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025f22:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025f29:	eb 07                	jmp    c0025f32 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025f2b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025f32:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025f36:	74 09                	je     c0025f41 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025f38:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025f3f:	eb 07                	jmp    c0025f48 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025f41:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025f48:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025f4f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025f53:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025f56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025f59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f5c:	52                   	push   edx
c0025f5d:	50                   	push   eax
c0025f5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f61:	e8 e4 fe ff ff       	call   c0025e4a <IOAPIC::write(int, int)>
c0025f66:	83 c4 0c             	add    esp,0xc
c0025f69:	90                   	nop
c0025f6a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025f6d:	c9                   	leave  
c0025f6e:	c3                   	ret    
c0025f6f:	90                   	nop

c0025f70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025f70:	55                   	push   ebp
c0025f71:	89 e5                	mov    ebp,esp
c0025f73:	57                   	push   edi
c0025f74:	56                   	push   esi
c0025f75:	53                   	push   ebx
c0025f76:	83 ec 2c             	sub    esp,0x2c
c0025f79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f7c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025f7f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025f83:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025f87:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025f8b:	74 5a                	je     c0025fe7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f8d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025f91:	7f 44                	jg     c0025fd7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025f93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f96:	05 20 d7 02 c0       	add    eax,0xc002d720
c0025f9b:	8a 00                	mov    al,BYTE PTR [eax]
c0025f9d:	0f b6 c0             	movzx  eax,al
c0025fa0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025fa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fa6:	66 8b 84 00 00 ee 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1200]
c0025fae:	0f b7 c0             	movzx  eax,ax
c0025fb1:	83 e0 02             	and    eax,0x2
c0025fb4:	85 c0                	test   eax,eax
c0025fb6:	74 04                	je     c0025fbc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025fb8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025fbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fbf:	66 8b 84 00 00 ee 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1200]
c0025fc7:	0f b7 c0             	movzx  eax,ax
c0025fca:	83 e0 08             	and    eax,0x8
c0025fcd:	85 c0                	test   eax,eax
c0025fcf:	74 16                	je     c0025fe7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025fd1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025fd5:	eb 10                	jmp    c0025fe7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025fd7:	83 ec 0c             	sub    esp,0xc
c0025fda:	68 84 d0 02 c0       	push   0xc002d084
c0025fdf:	e8 41 42 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0025fe4:	83 c4 10             	add    esp,0x10
c0025fe7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025feb:	a1 00 08 03 c0       	mov    eax,ds:0xc0030800
c0025ff0:	83 ec 08             	sub    esp,0x8
c0025ff3:	50                   	push   eax
c0025ff4:	68 bc d0 02 c0       	push   0xc002d0bc
c0025ff9:	e8 7e c8 fe ff       	call   c001287c <Dbg::kprintf(char const*, ...)>
c0025ffe:	83 c4 10             	add    esp,0x10
c0026001:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026008:	a1 00 08 03 c0       	mov    eax,ds:0xc0030800
c002600d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026010:	7d 67                	jge    c0026079 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026012:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026015:	8b 04 85 20 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf7e0]
c002601c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002601f:	83 ec 08             	sub    esp,0x8
c0026022:	52                   	push   edx
c0026023:	50                   	push   eax
c0026024:	e8 d1 fc ff ff       	call   c0025cfa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026029:	83 c4 10             	add    esp,0x10
c002602c:	84 c0                	test   al,al
c002602e:	74 44                	je     c0026074 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026030:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026033:	8b 1c 85 20 08 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf7e0]
c002603a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002603e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026041:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026045:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026048:	83 c0 20             	add    eax,0x20
c002604b:	0f b6 f0             	movzx  esi,al
c002604e:	b8 00 00 00 00       	mov    eax,0x0
c0026053:	99                   	cdq    
c0026054:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026057:	0f b6 c9             	movzx  ecx,cl
c002605a:	83 ec 04             	sub    esp,0x4
c002605d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026060:	57                   	push   edi
c0026061:	56                   	push   esi
c0026062:	52                   	push   edx
c0026063:	50                   	push   eax
c0026064:	51                   	push   ecx
c0026065:	53                   	push   ebx
c0026066:	e8 0b fe ff ff       	call   c0025e76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002606b:	83 c4 20             	add    esp,0x20
c002606e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026072:	eb 05                	jmp    c0026079 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026074:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026077:	eb 8f                	jmp    c0026008 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026079:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002607c:	83 f0 01             	xor    eax,0x1
c002607f:	84 c0                	test   al,al
c0026081:	74 10                	je     c0026093 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026083:	83 ec 0c             	sub    esp,0xc
c0026086:	68 d3 d0 02 c0       	push   0xc002d0d3
c002608b:	e8 95 41 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0026090:	83 c4 10             	add    esp,0x10
c0026093:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026097:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002609e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00260a2:	7f 65                	jg     c0026109 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00260a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260aa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00260b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260b4:	01 ca                	add    edx,ecx
c00260b6:	83 c2 54             	add    edx,0x54
c00260b9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00260bd:	85 c0                	test   eax,eax
c00260bf:	75 43                	jne    c0026104 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00260c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00260ce:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260d1:	01 ca                	add    edx,ecx
c00260d3:	8d 4a 54             	lea    ecx,[edx+0x54]
c00260d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00260d9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00260dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00260e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00260ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260ed:	01 ca                	add    edx,ecx
c00260ef:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00260f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00260f8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00260fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260ff:	83 e8 20             	sub    eax,0x20
c0026102:	eb 1a                	jmp    c002611e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026104:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026107:	eb 95                	jmp    c002609e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026109:	83 ec 0c             	sub    esp,0xc
c002610c:	68 e0 d0 02 c0       	push   0xc002d0e0
c0026111:	e8 0f 41 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0026116:	83 c4 10             	add    esp,0x10
c0026119:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002611e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026121:	5b                   	pop    ebx
c0026122:	5e                   	pop    esi
c0026123:	5f                   	pop    edi
c0026124:	5d                   	pop    ebp
c0026125:	c3                   	ret    

c0026126 <PIC::disable()>:
c0026126:	55                   	push   ebp
c0026127:	89 e5                	mov    ebp,esp
c0026129:	83 ec 10             	sub    esp,0x10
c002612c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026132:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026136:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026139:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002613d:	ee                   	out    dx,al
c002613e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026144:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026148:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002614b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002614f:	ee                   	out    dx,al
c0026150:	90                   	nop
c0026151:	c9                   	leave  
c0026152:	c3                   	ret    
c0026153:	90                   	nop

c0026154 <PIC::close(int, int, void*)>:
c0026154:	55                   	push   ebp
c0026155:	89 e5                	mov    ebp,esp
c0026157:	83 ec 08             	sub    esp,0x8
c002615a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002615d:	8b 00                	mov    eax,DWORD PTR [eax]
c002615f:	83 c0 3c             	add    eax,0x3c
c0026162:	8b 00                	mov    eax,DWORD PTR [eax]
c0026164:	83 ec 0c             	sub    esp,0xc
c0026167:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002616a:	ff d0                	call   eax
c002616c:	83 c4 10             	add    esp,0x10
c002616f:	b8 00 00 00 00       	mov    eax,0x0
c0026174:	c9                   	leave  
c0026175:	c3                   	ret    

c0026176 <PIC::PIC()>:
c0026176:	83 ec 0c             	sub    esp,0xc
c0026179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617d:	83 ec 08             	sub    esp,0x8
c0026180:	68 8c d1 02 c0       	push   0xc002d18c
c0026185:	50                   	push   eax
c0026186:	e8 a3 e4 fe ff       	call   c001462e <InterruptController::InterruptController(char const*)>
c002618b:	83 c4 10             	add    esp,0x10
c002618e:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c0026193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026197:	89 10                	mov    DWORD PTR [eax],edx
c0026199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261a3:	0f b6 d0             	movzx  edx,al
c00261a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261aa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00261b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261bb:	0f b6 d0             	movzx  edx,al
c00261be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00261c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261d1:	8d 50 01             	lea    edx,[eax+0x1]
c00261d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261d8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00261de:	0f b6 d0             	movzx  edx,al
c00261e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00261e9:	83 e1 3f             	and    ecx,0x3f
c00261ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00261f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261fa:	0f b6 d0             	movzx  edx,al
c00261fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026201:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026212:	0f b6 d0             	movzx  edx,al
c0026215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026219:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002621e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026222:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026228:	8d 50 01             	lea    edx,[eax+0x1]
c002622b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002622f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026235:	0f b6 d0             	movzx  edx,al
c0026238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026240:	83 e1 3f             	and    ecx,0x3f
c0026243:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026247:	90                   	nop
c0026248:	83 c4 0c             	add    esp,0xc
c002624b:	c3                   	ret    

c002624c <PIC::ioWait()>:
c002624c:	eb 00                	jmp    c002624e <PIC::ioWait()+0x2>
c002624e:	eb 00                	jmp    c0026250 <PIC::ioWait()+0x4>
c0026250:	90                   	nop
c0026251:	c3                   	ret    

c0026252 <PIC::getIRQReg(int)>:
c0026252:	55                   	push   ebp
c0026253:	89 e5                	mov    ebp,esp
c0026255:	83 ec 10             	sub    esp,0x10
c0026258:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002625b:	0f b6 c0             	movzx  eax,al
c002625e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026264:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026267:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002626a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002626e:	ee                   	out    dx,al
c002626f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026272:	0f b6 c0             	movzx  eax,al
c0026275:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002627b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002627e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026281:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026285:	ee                   	out    dx,al
c0026286:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002628c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026290:	89 c2                	mov    edx,eax
c0026292:	ec                   	in     al,dx
c0026293:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026296:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026299:	0f b6 c0             	movzx  eax,al
c002629c:	c1 e0 08             	shl    eax,0x8
c002629f:	89 c1                	mov    ecx,eax
c00262a1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00262a7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00262ab:	89 c2                	mov    edx,eax
c00262ad:	ec                   	in     al,dx
c00262ae:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00262b1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00262b4:	0f b6 c0             	movzx  eax,al
c00262b7:	09 c8                	or     eax,ecx
c00262b9:	c9                   	leave  
c00262ba:	c3                   	ret    
c00262bb:	90                   	nop

c00262bc <PIC::eoi(unsigned char)>:
c00262bc:	55                   	push   ebp
c00262bd:	89 e5                	mov    ebp,esp
c00262bf:	83 ec 14             	sub    esp,0x14
c00262c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262c5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00262c8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00262cc:	75 1e                	jne    c00262ec <PIC::eoi(unsigned char)+0x30>
c00262ce:	6a 0b                	push   0xb
c00262d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262d3:	e8 7a ff ff ff       	call   c0026252 <PIC::getIRQReg(int)>
c00262d8:	83 c4 08             	add    esp,0x8
c00262db:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00262df:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00262e3:	25 80 00 00 00       	and    eax,0x80
c00262e8:	85 c0                	test   eax,eax
c00262ea:	74 5f                	je     c002634b <PIC::eoi(unsigned char)+0x8f>
c00262ec:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00262f0:	75 2d                	jne    c002631f <PIC::eoi(unsigned char)+0x63>
c00262f2:	6a 0b                	push   0xb
c00262f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f7:	e8 56 ff ff ff       	call   c0026252 <PIC::getIRQReg(int)>
c00262fc:	83 c4 08             	add    esp,0x8
c00262ff:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026303:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026306:	66 85 c0             	test   ax,ax
c0026309:	78 14                	js     c002631f <PIC::eoi(unsigned char)+0x63>
c002630b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026311:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026315:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026318:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002631c:	ee                   	out    dx,al
c002631d:	eb 2d                	jmp    c002634c <PIC::eoi(unsigned char)+0x90>
c002631f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026323:	76 12                	jbe    c0026337 <PIC::eoi(unsigned char)+0x7b>
c0026325:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002632b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002632f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026332:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026336:	ee                   	out    dx,al
c0026337:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002633d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026341:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026344:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026348:	ee                   	out    dx,al
c0026349:	eb 01                	jmp    c002634c <PIC::eoi(unsigned char)+0x90>
c002634b:	90                   	nop
c002634c:	c9                   	leave  
c002634d:	c3                   	ret    

c002634e <PIC::remap()>:
c002634e:	55                   	push   ebp
c002634f:	89 e5                	mov    ebp,esp
c0026351:	83 ec 48             	sub    esp,0x48
c0026354:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002635b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026362:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026368:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002636b:	89 c2                	mov    edx,eax
c002636d:	ec                   	in     al,dx
c002636e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026371:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026374:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026377:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002637d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026380:	89 c2                	mov    edx,eax
c0026382:	ec                   	in     al,dx
c0026383:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026386:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026389:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002638c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026392:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026396:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026399:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002639c:	ee                   	out    dx,al
c002639d:	83 ec 0c             	sub    esp,0xc
c00263a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263a3:	e8 a4 fe ff ff       	call   c002624c <PIC::ioWait()>
c00263a8:	83 c4 10             	add    esp,0x10
c00263ab:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00263b1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00263b5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00263b8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00263bb:	ee                   	out    dx,al
c00263bc:	83 ec 0c             	sub    esp,0xc
c00263bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263c2:	e8 85 fe ff ff       	call   c002624c <PIC::ioWait()>
c00263c7:	83 c4 10             	add    esp,0x10
c00263ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00263cd:	0f b6 c0             	movzx  eax,al
c00263d0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00263d6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00263d9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00263dc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00263df:	ee                   	out    dx,al
c00263e0:	83 ec 0c             	sub    esp,0xc
c00263e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e6:	e8 61 fe ff ff       	call   c002624c <PIC::ioWait()>
c00263eb:	83 c4 10             	add    esp,0x10
c00263ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263f1:	0f b6 c0             	movzx  eax,al
c00263f4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00263fa:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00263fd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026400:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026403:	ee                   	out    dx,al
c0026404:	83 ec 0c             	sub    esp,0xc
c0026407:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002640a:	e8 3d fe ff ff       	call   c002624c <PIC::ioWait()>
c002640f:	83 c4 10             	add    esp,0x10
c0026412:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026418:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002641c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002641f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026422:	ee                   	out    dx,al
c0026423:	83 ec 0c             	sub    esp,0xc
c0026426:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026429:	e8 1e fe ff ff       	call   c002624c <PIC::ioWait()>
c002642e:	83 c4 10             	add    esp,0x10
c0026431:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026437:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002643b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002643e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026441:	ee                   	out    dx,al
c0026442:	83 ec 0c             	sub    esp,0xc
c0026445:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026448:	e8 ff fd ff ff       	call   c002624c <PIC::ioWait()>
c002644d:	83 c4 10             	add    esp,0x10
c0026450:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026456:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002645a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002645d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026460:	ee                   	out    dx,al
c0026461:	83 ec 0c             	sub    esp,0xc
c0026464:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026467:	e8 e0 fd ff ff       	call   c002624c <PIC::ioWait()>
c002646c:	83 c4 10             	add    esp,0x10
c002646f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026475:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026479:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002647c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002647f:	ee                   	out    dx,al
c0026480:	83 ec 0c             	sub    esp,0xc
c0026483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026486:	e8 c1 fd ff ff       	call   c002624c <PIC::ioWait()>
c002648b:	83 c4 10             	add    esp,0x10
c002648e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026492:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026498:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002649b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002649e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00264a1:	ee                   	out    dx,al
c00264a2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00264a6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00264ac:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00264af:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00264b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00264b5:	ee                   	out    dx,al
c00264b6:	90                   	nop
c00264b7:	c9                   	leave  
c00264b8:	c3                   	ret    
c00264b9:	90                   	nop

c00264ba <PIC::open(int, int, void*)>:
c00264ba:	55                   	push   ebp
c00264bb:	89 e5                	mov    ebp,esp
c00264bd:	83 ec 18             	sub    esp,0x18
c00264c0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00264c6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00264ca:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00264cd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00264d1:	ee                   	out    dx,al
c00264d2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00264d8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00264dc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00264df:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00264e3:	ee                   	out    dx,al
c00264e4:	83 ec 0c             	sub    esp,0xc
c00264e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ea:	e8 5f fe ff ff       	call   c002634e <PIC::remap()>
c00264ef:	83 c4 10             	add    esp,0x10
c00264f2:	b8 00 00 00 00       	mov    eax,0x0
c00264f7:	c9                   	leave  
c00264f8:	c3                   	ret    
c00264f9:	90                   	nop

c00264fa <APICTimer::close(int, int, void*)>:
c00264fa:	b8 00 00 00 00       	mov    eax,0x0
c00264ff:	c3                   	ret    

c0026500 <apicTimerHandler(regs*, void*)>:
c0026500:	83 ec 0c             	sub    esp,0xc
c0026503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026507:	8b 00                	mov    eax,DWORD PTR [eax]
c0026509:	99                   	cdq    
c002650a:	52                   	push   edx
c002650b:	50                   	push   eax
c002650c:	6a 00                	push   0x0
c002650e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026513:	e8 8c 07 00 00       	call   c0026ca4 <__udivdi3>
c0026518:	83 c4 10             	add    esp,0x10
c002651b:	83 ec 08             	sub    esp,0x8
c002651e:	52                   	push   edx
c002651f:	50                   	push   eax
c0026520:	e8 66 02 ff ff       	call   c001678b <timerHandler(unsigned long long)>
c0026525:	83 c4 10             	add    esp,0x10
c0026528:	90                   	nop
c0026529:	83 c4 0c             	add    esp,0xc
c002652c:	c3                   	ret    
c002652d:	90                   	nop

c002652e <APICTimer::write(int)>:
c002652e:	53                   	push   ebx
c002652f:	83 ec 28             	sub    esp,0x28
c0026532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026536:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002653a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026540:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0026545:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002654b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026551:	83 ec 0c             	sub    esp,0xc
c0026554:	50                   	push   eax
c0026555:	e8 de f4 ff ff       	call   c0025a38 <APIC::getBase()>
c002655a:	83 c4 10             	add    esp,0x10
c002655d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026561:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c0026566:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c002656c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026570:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026574:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026578:	05 e0 03 00 00       	add    eax,0x3e0
c002657d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026587:	05 80 03 00 00       	add    eax,0x380
c002658c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026592:	fb                   	sti    
c0026593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026597:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002659b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00265a0:	83 d2 00             	adc    edx,0x0
c00265a3:	89 c1                	mov    ecx,eax
c00265a5:	89 d3                	mov    ebx,edx
c00265a7:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c00265ac:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c00265b2:	39 c8                	cmp    eax,ecx
c00265b4:	89 d0                	mov    eax,edx
c00265b6:	19 d8                	sbb    eax,ebx
c00265b8:	73 02                	jae    c00265bc <APICTimer::write(int)+0x8e>
c00265ba:	eb d7                	jmp    c0026593 <APICTimer::write(int)+0x65>
c00265bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265c0:	05 20 03 00 00       	add    eax,0x320
c00265c5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00265cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265cf:	05 90 03 00 00       	add    eax,0x390
c00265d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00265d6:	f7 d0                	not    eax
c00265d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265e4:	ba 00 00 00 00       	mov    edx,0x0
c00265e9:	f7 f3                	div    ebx
c00265eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00265ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00265f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00265f9:	0d 00 00 02 00       	or     eax,0x20000
c00265fe:	89 c2                	mov    edx,eax
c0026600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026604:	05 20 03 00 00       	add    eax,0x320
c0026609:	89 10                	mov    DWORD PTR [eax],edx
c002660b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002660f:	05 e0 03 00 00       	add    eax,0x3e0
c0026614:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002661a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002661e:	05 80 03 00 00       	add    eax,0x380
c0026623:	89 c2                	mov    edx,eax
c0026625:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026629:	89 02                	mov    DWORD PTR [edx],eax
c002662b:	90                   	nop
c002662c:	83 c4 28             	add    esp,0x28
c002662f:	5b                   	pop    ebx
c0026630:	c3                   	ret    
c0026631:	90                   	nop

c0026632 <APICTimer::open(int, int, void*)>:
c0026632:	57                   	push   edi
c0026633:	56                   	push   esi
c0026634:	53                   	push   ebx
c0026635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026639:	8b 00                	mov    eax,DWORD PTR [eax]
c002663b:	83 c0 24             	add    eax,0x24
c002663e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026640:	83 ec 08             	sub    esp,0x8
c0026643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002664b:	ff d0                	call   eax
c002664d:	83 c4 10             	add    esp,0x10
c0026650:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0026655:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002665b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026661:	83 ec 0c             	sub    esp,0xc
c0026664:	50                   	push   eax
c0026665:	e8 ce f3 ff ff       	call   c0025a38 <APIC::getBase()>
c002666a:	83 c4 10             	add    esp,0x10
c002666d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026677:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002667d:	0f b6 f8             	movzx  edi,al
c0026680:	89 d0                	mov    eax,edx
c0026682:	ba 00 00 00 00       	mov    edx,0x0
c0026687:	89 c1                	mov    ecx,eax
c0026689:	80 e5 ff             	and    ch,0xff
c002668c:	89 cb                	mov    ebx,ecx
c002668e:	0f b6 f2             	movzx  esi,dl
c0026691:	89 d8                	mov    eax,ebx
c0026693:	89 f2                	mov    edx,esi
c0026695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026699:	8d 5f 08             	lea    ebx,[edi+0x8]
c002669c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00266a0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00266a4:	83 e0 00             	and    eax,0x0
c00266a7:	09 d0                	or     eax,edx
c00266a9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00266ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00266b7:	8d 50 01             	lea    edx,[eax+0x1]
c00266ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266be:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00266c4:	0f b6 d0             	movzx  edx,al
c00266c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cb:	83 c2 08             	add    edx,0x8
c00266ce:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00266d2:	0f b6 c9             	movzx  ecx,cl
c00266d5:	81 c9 00 00 01 00    	or     ecx,0x10000
c00266db:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00266df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00266e7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00266ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00266f5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00266fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00266ff:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026705:	83 ec 0c             	sub    esp,0xc
c0026708:	51                   	push   ecx
c0026709:	6a 01                	push   0x1
c002670b:	68 00 65 02 c0       	push   0xc0026500
c0026710:	52                   	push   edx
c0026711:	50                   	push   eax
c0026712:	e8 21 d5 fe ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026717:	83 c4 20             	add    esp,0x20
c002671a:	89 c2                	mov    edx,eax
c002671c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026720:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026726:	b8 00 00 00 00       	mov    eax,0x0
c002672b:	5b                   	pop    ebx
c002672c:	5e                   	pop    esi
c002672d:	5f                   	pop    edi
c002672e:	c3                   	ret    
c002672f:	90                   	nop

c0026730 <APICTimer::APICTimer()>:
c0026730:	83 ec 0c             	sub    esp,0xc
c0026733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026737:	83 ec 08             	sub    esp,0x8
c002673a:	68 f8 d1 02 c0       	push   0xc002d1f8
c002673f:	50                   	push   eax
c0026740:	e8 b7 ff fe ff       	call   c00166fc <Timer::Timer(char const*)>
c0026745:	83 c4 10             	add    esp,0x10
c0026748:	ba 0c d2 02 c0       	mov    edx,0xc002d20c
c002674d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026751:	89 10                	mov    DWORD PTR [eax],edx
c0026753:	90                   	nop
c0026754:	83 c4 0c             	add    esp,0xc
c0026757:	c3                   	ret    

c0026758 <PIT::write(int)>:
c0026758:	83 ec 10             	sub    esp,0x10
c002675b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002675f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026763:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026769:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002676d:	a3 44 08 03 c0       	mov    ds:0xc0030844,eax
c0026772:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026777:	99                   	cdq    
c0026778:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002677c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026780:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026787:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002678c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026790:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026795:	ee                   	out    dx,al
c0026796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002679a:	0f b6 c0             	movzx  eax,al
c002679d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00267a4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00267a8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00267ac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00267b1:	ee                   	out    dx,al
c00267b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00267b6:	c1 f8 08             	sar    eax,0x8
c00267b9:	0f b6 c0             	movzx  eax,al
c00267bc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00267c3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00267c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00267cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00267d0:	ee                   	out    dx,al
c00267d1:	90                   	nop
c00267d2:	83 c4 10             	add    esp,0x10
c00267d5:	c3                   	ret    

c00267d6 <pitHandler(regs*, void*)>:
c00267d6:	83 ec 0c             	sub    esp,0xc
c00267d9:	a1 44 08 03 c0       	mov    eax,ds:0xc0030844
c00267de:	99                   	cdq    
c00267df:	52                   	push   edx
c00267e0:	50                   	push   eax
c00267e1:	6a 00                	push   0x0
c00267e3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00267e8:	e8 b7 04 00 00       	call   c0026ca4 <__udivdi3>
c00267ed:	83 c4 10             	add    esp,0x10
c00267f0:	83 ec 08             	sub    esp,0x8
c00267f3:	52                   	push   edx
c00267f4:	50                   	push   eax
c00267f5:	e8 91 ff fe ff       	call   c001678b <timerHandler(unsigned long long)>
c00267fa:	83 c4 10             	add    esp,0x10
c00267fd:	90                   	nop
c00267fe:	83 c4 0c             	add    esp,0xc
c0026801:	c3                   	ret    

c0026802 <PIT::open(int, int, void*)>:
c0026802:	83 ec 0c             	sub    esp,0xc
c0026805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026809:	8b 00                	mov    eax,DWORD PTR [eax]
c002680b:	83 c0 24             	add    eax,0x24
c002680e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026810:	83 ec 08             	sub    esp,0x8
c0026813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002681b:	ff d0                	call   eax
c002681d:	83 c4 10             	add    esp,0x10
c0026820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026824:	83 ec 0c             	sub    esp,0xc
c0026827:	6a 00                	push   0x0
c0026829:	6a 01                	push   0x1
c002682b:	68 d6 67 02 c0       	push   0xc00267d6
c0026830:	6a 00                	push   0x0
c0026832:	50                   	push   eax
c0026833:	e8 00 d4 fe ff       	call   c0013c38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026838:	83 c4 20             	add    esp,0x20
c002683b:	89 c2                	mov    edx,eax
c002683d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026841:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026847:	b8 00 00 00 00       	mov    eax,0x0
c002684c:	83 c4 0c             	add    esp,0xc
c002684f:	c3                   	ret    

c0026850 <PIT::close(int, int, void*)>:
c0026850:	83 ec 0c             	sub    esp,0xc
c0026853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026857:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026865:	6a 01                	push   0x1
c0026867:	68 d6 67 02 c0       	push   0xc00267d6
c002686c:	6a 00                	push   0x0
c002686e:	50                   	push   eax
c002686f:	e8 0e d4 fe ff       	call   c0013c82 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026874:	83 c4 10             	add    esp,0x10
c0026877:	b8 00 00 00 00       	mov    eax,0x0
c002687c:	83 c4 0c             	add    esp,0xc
c002687f:	c3                   	ret    

c0026880 <PIT::PIT()>:
c0026880:	83 ec 0c             	sub    esp,0xc
c0026883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026887:	83 ec 08             	sub    esp,0x8
c002688a:	68 34 d2 02 c0       	push   0xc002d234
c002688f:	50                   	push   eax
c0026890:	e8 67 fe fe ff       	call   c00166fc <Timer::Timer(char const*)>
c0026895:	83 c4 10             	add    esp,0x10
c0026898:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c002689d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a1:	89 10                	mov    DWORD PTR [eax],edx
c00268a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268ad:	0f b6 d0             	movzx  edx,al
c00268b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00268bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268c5:	0f b6 d0             	movzx  edx,al
c00268c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268cc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00268d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268db:	8d 50 01             	lea    edx,[eax+0x1]
c00268de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268e2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00268e8:	0f b6 d0             	movzx  edx,al
c00268eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00268f3:	83 e1 3f             	and    ecx,0x3f
c00268f6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00268fa:	90                   	nop
c00268fb:	83 c4 0c             	add    esp,0xc
c00268fe:	c3                   	ret    
c00268ff:	90                   	nop

c0026900 <avxDetect>:
c0026900:	b8 00 00 00 00       	mov    eax,0x0
c0026905:	c3                   	ret    

c0026906 <avxSave>:
c0026906:	c3                   	ret    

c0026907 <avxLoad>:
c0026907:	c3                   	ret    

c0026908 <avxInit>:
c0026908:	c3                   	ret    

c0026909 <avxClose>:
c0026909:	c3                   	ret    

c002690a <wouldSheSayYes>:
c002690a:	c3                   	ret    
c002690b:	49                   	dec    ecx
c002690c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026910:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026914:	75 20                	jne    c0026936 <sseDetect.noSSE+0x1>
c0026916:	4e                   	dec    esi
c0026917:	79 61                	jns    c002697a <x87Detect+0x14>
c0026919:	68 2e 2e 2e 00       	push   0x2e2e2e
c002691e:	66 90                	xchg   ax,ax

c0026920 <absolutelyNoChanceInHell>:
c0026920:	b8 01 00 00 00       	mov    eax,0x1
c0026925:	0f a2                	cpuid  
c0026927:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002692d:	74 06                	je     c0026935 <sseDetect.noSSE>
c002692f:	b8 01 00 00 00       	mov    eax,0x1
c0026934:	c3                   	ret    

c0026935 <sseDetect.noSSE>:
c0026935:	31 c0                	xor    eax,eax
c0026937:	c3                   	ret    

c0026938 <sseSave>:
c0026938:	0f ae 44 24 04       	fxsave [esp+0x4]
c002693d:	c3                   	ret    

c002693e <sseLoad>:
c002693e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026943:	c3                   	ret    

c0026944 <sseInit>:
c0026944:	e8 49 00 00 00       	call   c0026992 <x87Init>
c0026949:	0f 20 e0             	mov    eax,cr4
c002694c:	66 0d 00 06          	or     ax,0x600
c0026950:	0f 22 e0             	mov    cr4,eax
c0026953:	c3                   	ret    

c0026954 <sseClose>:
c0026954:	c3                   	ret    
c0026955:	66 90                	xchg   ax,ax
c0026957:	66 90                	xchg   ax,ax
c0026959:	66 90                	xchg   ax,ax
c002695b:	66 90                	xchg   ax,ax
c002695d:	66 90                	xchg   ax,ax
c002695f:	90                   	nop

c0026960 <value_37F>:
c0026960:	7f 03                	jg     c0026965 <value_37A+0x1>

c0026962 <value_37E>:
c0026962:	7e 03                	jle    c0026967 <x87Detect+0x1>

c0026964 <value_37A>:
c0026964:	7a 03                	jp     c0026969 <x87Detect+0x3>

c0026966 <x87Detect>:
c0026966:	b8 01 00 00 00       	mov    eax,0x1
c002696b:	0f a2                	cpuid  
c002696d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026973:	74 06                	je     c002697b <x87Detect.nox87>
c0026975:	b8 01 00 00 00       	mov    eax,0x1
c002697a:	c3                   	ret    

c002697b <x87Detect.nox87>:
c002697b:	b8 00 00 00 00       	mov    eax,0x0
c0026980:	c3                   	ret    

c0026981 <x87Save>:
c0026981:	55                   	push   ebp
c0026982:	89 e5                	mov    ebp,esp
c0026984:	9b dd 75 08          	fsave  [ebp+0x8]
c0026988:	c9                   	leave  
c0026989:	c3                   	ret    

c002698a <x87Load>:
c002698a:	55                   	push   ebp
c002698b:	89 e5                	mov    ebp,esp
c002698d:	dd 65 08             	frstor [ebp+0x8]
c0026990:	c9                   	leave  
c0026991:	c3                   	ret    

c0026992 <x87Init>:
c0026992:	9b db e3             	finit  
c0026995:	0f 20 c0             	mov    eax,cr0
c0026998:	66 25 fb ff          	and    ax,0xfffb
c002699c:	66 0d 22 00          	or     ax,0x22
c00269a0:	0f 22 c0             	mov    cr0,eax
c00269a3:	0f 06                	clts   
c00269a5:	d9 2d 64 69 02 c0    	fldcw  WORD PTR ds:0xc0026964
c00269ab:	c3                   	ret    

c00269ac <x87Close>:
c00269ac:	c3                   	ret    
c00269ad:	66 90                	xchg   ax,ax
c00269af:	90                   	nop

c00269b0 <__do_global_ctors_aux>:
c00269b0:	a1 a4 95 02 c0       	mov    eax,ds:0xc00295a4
c00269b5:	83 f8 ff             	cmp    eax,0xffffffff
c00269b8:	74 1a                	je     c00269d4 <__do_global_ctors_aux+0x24>
c00269ba:	55                   	push   ebp
c00269bb:	89 e5                	mov    ebp,esp
c00269bd:	53                   	push   ebx
c00269be:	52                   	push   edx
c00269bf:	bb a4 95 02 c0       	mov    ebx,0xc00295a4
c00269c4:	ff d0                	call   eax
c00269c6:	83 eb 04             	sub    ebx,0x4
c00269c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00269cb:	83 f8 ff             	cmp    eax,0xffffffff
c00269ce:	75 f4                	jne    c00269c4 <__do_global_ctors_aux+0x14>
c00269d0:	58                   	pop    eax
c00269d1:	5b                   	pop    ebx
c00269d2:	5d                   	pop    ebp
c00269d3:	c3                   	ret    
c00269d4:	c3                   	ret    
c00269d5:	66 90                	xchg   ax,ax
c00269d7:	90                   	nop

c00269d8 <__divdi3>:
c00269d8:	55                   	push   ebp
c00269d9:	57                   	push   edi
c00269da:	56                   	push   esi
c00269db:	53                   	push   ebx
c00269dc:	83 ec 1c             	sub    esp,0x1c
c00269df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00269e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00269e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00269ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00269ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00269f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269f6:	85 db                	test   ebx,ebx
c00269f8:	0f 88 8e 00 00 00    	js     c0026a8c <__divdi3+0xb4>
c00269fe:	89 dd                	mov    ebp,ebx
c0026a00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026a08:	89 d3                	mov    ebx,edx
c0026a0a:	85 d2                	test   edx,edx
c0026a0c:	79 0d                	jns    c0026a1b <__divdi3+0x43>
c0026a0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026a12:	f7 d8                	neg    eax
c0026a14:	83 d2 00             	adc    edx,0x0
c0026a17:	f7 da                	neg    edx
c0026a19:	89 d3                	mov    ebx,edx
c0026a1b:	89 c7                	mov    edi,eax
c0026a1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026a20:	85 db                	test   ebx,ebx
c0026a22:	75 48                	jne    c0026a6c <__divdi3+0x94>
c0026a24:	39 ef                	cmp    edi,ebp
c0026a26:	76 24                	jbe    c0026a4c <__divdi3+0x74>
c0026a28:	89 ea                	mov    edx,ebp
c0026a2a:	f7 f7                	div    edi
c0026a2c:	89 c1                	mov    ecx,eax
c0026a2e:	31 f6                	xor    esi,esi
c0026a30:	89 c8                	mov    eax,ecx
c0026a32:	89 f2                	mov    edx,esi
c0026a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a38:	85 c9                	test   ecx,ecx
c0026a3a:	74 07                	je     c0026a43 <__divdi3+0x6b>
c0026a3c:	f7 d8                	neg    eax
c0026a3e:	83 d2 00             	adc    edx,0x0
c0026a41:	f7 da                	neg    edx
c0026a43:	83 c4 1c             	add    esp,0x1c
c0026a46:	5b                   	pop    ebx
c0026a47:	5e                   	pop    esi
c0026a48:	5f                   	pop    edi
c0026a49:	5d                   	pop    ebp
c0026a4a:	c3                   	ret    
c0026a4b:	90                   	nop
c0026a4c:	85 ff                	test   edi,edi
c0026a4e:	75 0b                	jne    c0026a5b <__divdi3+0x83>
c0026a50:	b8 01 00 00 00       	mov    eax,0x1
c0026a55:	31 d2                	xor    edx,edx
c0026a57:	f7 f3                	div    ebx
c0026a59:	89 c7                	mov    edi,eax
c0026a5b:	31 d2                	xor    edx,edx
c0026a5d:	89 e8                	mov    eax,ebp
c0026a5f:	f7 f7                	div    edi
c0026a61:	89 c6                	mov    esi,eax
c0026a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026a66:	f7 f7                	div    edi
c0026a68:	89 c1                	mov    ecx,eax
c0026a6a:	eb c4                	jmp    c0026a30 <__divdi3+0x58>
c0026a6c:	39 eb                	cmp    ebx,ebp
c0026a6e:	77 3c                	ja     c0026aac <__divdi3+0xd4>
c0026a70:	0f bd f3             	bsr    esi,ebx
c0026a73:	83 f6 1f             	xor    esi,0x1f
c0026a76:	75 40                	jne    c0026ab8 <__divdi3+0xe0>
c0026a78:	39 eb                	cmp    ebx,ebp
c0026a7a:	72 09                	jb     c0026a85 <__divdi3+0xad>
c0026a7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026a7f:	0f 87 97 00 00 00    	ja     c0026b1c <__divdi3+0x144>
c0026a85:	b9 01 00 00 00       	mov    ecx,0x1
c0026a8a:	eb a4                	jmp    c0026a30 <__divdi3+0x58>
c0026a8c:	f7 d9                	neg    ecx
c0026a8e:	83 d3 00             	adc    ebx,0x0
c0026a91:	f7 db                	neg    ebx
c0026a93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026a96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026a9a:	89 dd                	mov    ebp,ebx
c0026a9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026aa4:	e9 5f ff ff ff       	jmp    c0026a08 <__divdi3+0x30>
c0026aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0026aac:	31 f6                	xor    esi,esi
c0026aae:	31 c9                	xor    ecx,ecx
c0026ab0:	e9 7b ff ff ff       	jmp    c0026a30 <__divdi3+0x58>
c0026ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ab8:	b8 20 00 00 00       	mov    eax,0x20
c0026abd:	29 f0                	sub    eax,esi
c0026abf:	89 f1                	mov    ecx,esi
c0026ac1:	d3 e3                	shl    ebx,cl
c0026ac3:	89 fa                	mov    edx,edi
c0026ac5:	88 c1                	mov    cl,al
c0026ac7:	d3 ea                	shr    edx,cl
c0026ac9:	09 da                	or     edx,ebx
c0026acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026acf:	89 f1                	mov    ecx,esi
c0026ad1:	d3 e7                	shl    edi,cl
c0026ad3:	89 eb                	mov    ebx,ebp
c0026ad5:	88 c1                	mov    cl,al
c0026ad7:	d3 eb                	shr    ebx,cl
c0026ad9:	89 f1                	mov    ecx,esi
c0026adb:	d3 e5                	shl    ebp,cl
c0026add:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026ae0:	88 c1                	mov    cl,al
c0026ae2:	d3 ea                	shr    edx,cl
c0026ae4:	09 d5                	or     ebp,edx
c0026ae6:	89 e8                	mov    eax,ebp
c0026ae8:	89 da                	mov    edx,ebx
c0026aea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026aee:	89 d3                	mov    ebx,edx
c0026af0:	89 c5                	mov    ebp,eax
c0026af2:	f7 e7                	mul    edi
c0026af4:	39 d3                	cmp    ebx,edx
c0026af6:	72 18                	jb     c0026b10 <__divdi3+0x138>
c0026af8:	74 0a                	je     c0026b04 <__divdi3+0x12c>
c0026afa:	89 e9                	mov    ecx,ebp
c0026afc:	31 f6                	xor    esi,esi
c0026afe:	e9 2d ff ff ff       	jmp    c0026a30 <__divdi3+0x58>
c0026b03:	90                   	nop
c0026b04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026b07:	89 f1                	mov    ecx,esi
c0026b09:	d3 e7                	shl    edi,cl
c0026b0b:	39 c7                	cmp    edi,eax
c0026b0d:	73 eb                	jae    c0026afa <__divdi3+0x122>
c0026b0f:	90                   	nop
c0026b10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026b13:	31 f6                	xor    esi,esi
c0026b15:	e9 16 ff ff ff       	jmp    c0026a30 <__divdi3+0x58>
c0026b1a:	66 90                	xchg   ax,ax
c0026b1c:	31 c9                	xor    ecx,ecx
c0026b1e:	e9 0d ff ff ff       	jmp    c0026a30 <__divdi3+0x58>
c0026b23:	90                   	nop

c0026b24 <__moddi3>:
c0026b24:	55                   	push   ebp
c0026b25:	57                   	push   edi
c0026b26:	56                   	push   esi
c0026b27:	53                   	push   ebx
c0026b28:	83 ec 2c             	sub    esp,0x2c
c0026b2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026b2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026b33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026b37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026b3b:	85 db                	test   ebx,ebx
c0026b3d:	0f 88 85 00 00 00    	js     c0026bc8 <__moddi3+0xa4>
c0026b43:	89 de                	mov    esi,ebx
c0026b45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026b4d:	89 d7                	mov    edi,edx
c0026b4f:	85 d2                	test   edx,edx
c0026b51:	79 09                	jns    c0026b5c <__moddi3+0x38>
c0026b53:	f7 d8                	neg    eax
c0026b55:	83 d2 00             	adc    edx,0x0
c0026b58:	f7 da                	neg    edx
c0026b5a:	89 d7                	mov    edi,edx
c0026b5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b60:	89 cd                	mov    ebp,ecx
c0026b62:	85 ff                	test   edi,edi
c0026b64:	75 52                	jne    c0026bb8 <__moddi3+0x94>
c0026b66:	89 c3                	mov    ebx,eax
c0026b68:	39 f0                	cmp    eax,esi
c0026b6a:	76 24                	jbe    c0026b90 <__moddi3+0x6c>
c0026b6c:	89 c8                	mov    eax,ecx
c0026b6e:	89 f2                	mov    edx,esi
c0026b70:	f7 f3                	div    ebx
c0026b72:	89 d6                	mov    esi,edx
c0026b74:	89 f0                	mov    eax,esi
c0026b76:	31 d2                	xor    edx,edx
c0026b78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b7c:	85 c9                	test   ecx,ecx
c0026b7e:	74 07                	je     c0026b87 <__moddi3+0x63>
c0026b80:	f7 d8                	neg    eax
c0026b82:	83 d2 00             	adc    edx,0x0
c0026b85:	f7 da                	neg    edx
c0026b87:	83 c4 2c             	add    esp,0x2c
c0026b8a:	5b                   	pop    ebx
c0026b8b:	5e                   	pop    esi
c0026b8c:	5f                   	pop    edi
c0026b8d:	5d                   	pop    ebp
c0026b8e:	c3                   	ret    
c0026b8f:	90                   	nop
c0026b90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026b94:	85 db                	test   ebx,ebx
c0026b96:	75 0d                	jne    c0026ba5 <__moddi3+0x81>
c0026b98:	b8 01 00 00 00       	mov    eax,0x1
c0026b9d:	31 d2                	xor    edx,edx
c0026b9f:	f7 f7                	div    edi
c0026ba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ba5:	89 f0                	mov    eax,esi
c0026ba7:	31 d2                	xor    edx,edx
c0026ba9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026bad:	f7 f7                	div    edi
c0026baf:	89 e8                	mov    eax,ebp
c0026bb1:	f7 f7                	div    edi
c0026bb3:	89 d6                	mov    esi,edx
c0026bb5:	eb bd                	jmp    c0026b74 <__moddi3+0x50>
c0026bb7:	90                   	nop
c0026bb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026bbc:	39 f7                	cmp    edi,esi
c0026bbe:	76 20                	jbe    c0026be0 <__moddi3+0xbc>
c0026bc0:	89 c8                	mov    eax,ecx
c0026bc2:	89 f2                	mov    edx,esi
c0026bc4:	eb b2                	jmp    c0026b78 <__moddi3+0x54>
c0026bc6:	66 90                	xchg   ax,ax
c0026bc8:	f7 d9                	neg    ecx
c0026bca:	83 d3 00             	adc    ebx,0x0
c0026bcd:	f7 db                	neg    ebx
c0026bcf:	89 de                	mov    esi,ebx
c0026bd1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026bd9:	e9 6f ff ff ff       	jmp    c0026b4d <__moddi3+0x29>
c0026bde:	66 90                	xchg   ax,ax
c0026be0:	0f bd c7             	bsr    eax,edi
c0026be3:	83 f0 1f             	xor    eax,0x1f
c0026be6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026bea:	75 24                	jne    c0026c10 <__moddi3+0xec>
c0026bec:	39 f7                	cmp    edi,esi
c0026bee:	72 06                	jb     c0026bf6 <__moddi3+0xd2>
c0026bf0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026bf4:	77 0c                	ja     c0026c02 <__moddi3+0xde>
c0026bf6:	89 e9                	mov    ecx,ebp
c0026bf8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026bfc:	19 fe                	sbb    esi,edi
c0026bfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c06:	89 f2                	mov    edx,esi
c0026c08:	e9 6b ff ff ff       	jmp    c0026b78 <__moddi3+0x54>
c0026c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026c10:	b8 20 00 00 00       	mov    eax,0x20
c0026c15:	89 c2                	mov    edx,eax
c0026c17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026c1b:	29 da                	sub    edx,ebx
c0026c1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026c21:	88 d9                	mov    cl,bl
c0026c23:	d3 e7                	shl    edi,cl
c0026c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c29:	88 d1                	mov    cl,dl
c0026c2b:	d3 e8                	shr    eax,cl
c0026c2d:	09 c7                	or     edi,eax
c0026c2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026c33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026c37:	89 d8                	mov    eax,ebx
c0026c39:	88 d9                	mov    cl,bl
c0026c3b:	d3 e7                	shl    edi,cl
c0026c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c41:	89 f3                	mov    ebx,esi
c0026c43:	88 d1                	mov    cl,dl
c0026c45:	d3 eb                	shr    ebx,cl
c0026c47:	89 c7                	mov    edi,eax
c0026c49:	88 c1                	mov    cl,al
c0026c4b:	d3 e6                	shl    esi,cl
c0026c4d:	89 e8                	mov    eax,ebp
c0026c4f:	88 d1                	mov    cl,dl
c0026c51:	d3 e8                	shr    eax,cl
c0026c53:	09 f0                	or     eax,esi
c0026c55:	89 f9                	mov    ecx,edi
c0026c57:	d3 e5                	shl    ebp,cl
c0026c59:	89 da                	mov    edx,ebx
c0026c5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026c5f:	89 d3                	mov    ebx,edx
c0026c61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c65:	89 c6                	mov    esi,eax
c0026c67:	89 d1                	mov    ecx,edx
c0026c69:	39 d3                	cmp    ebx,edx
c0026c6b:	72 27                	jb     c0026c94 <__moddi3+0x170>
c0026c6d:	74 21                	je     c0026c90 <__moddi3+0x16c>
c0026c6f:	29 f5                	sub    ebp,esi
c0026c71:	19 cb                	sbb    ebx,ecx
c0026c73:	89 de                	mov    esi,ebx
c0026c75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026c79:	d3 e6                	shl    esi,cl
c0026c7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026c7f:	89 f9                	mov    ecx,edi
c0026c81:	d3 ed                	shr    ebp,cl
c0026c83:	09 ee                	or     esi,ebp
c0026c85:	89 f0                	mov    eax,esi
c0026c87:	d3 eb                	shr    ebx,cl
c0026c89:	89 da                	mov    edx,ebx
c0026c8b:	e9 e8 fe ff ff       	jmp    c0026b78 <__moddi3+0x54>
c0026c90:	39 c5                	cmp    ebp,eax
c0026c92:	73 db                	jae    c0026c6f <__moddi3+0x14b>
c0026c94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026c9c:	89 d1                	mov    ecx,edx
c0026c9e:	89 c6                	mov    esi,eax
c0026ca0:	eb cd                	jmp    c0026c6f <__moddi3+0x14b>
c0026ca2:	66 90                	xchg   ax,ax

c0026ca4 <__udivdi3>:
c0026ca4:	55                   	push   ebp
c0026ca5:	57                   	push   edi
c0026ca6:	56                   	push   esi
c0026ca7:	53                   	push   ebx
c0026ca8:	83 ec 1c             	sub    esp,0x1c
c0026cab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026caf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026cb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026cb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026cbb:	85 d2                	test   edx,edx
c0026cbd:	75 41                	jne    c0026d00 <__udivdi3+0x5c>
c0026cbf:	39 f7                	cmp    edi,esi
c0026cc1:	76 15                	jbe    c0026cd8 <__udivdi3+0x34>
c0026cc3:	89 e8                	mov    eax,ebp
c0026cc5:	89 f2                	mov    edx,esi
c0026cc7:	f7 f7                	div    edi
c0026cc9:	31 db                	xor    ebx,ebx
c0026ccb:	89 da                	mov    edx,ebx
c0026ccd:	83 c4 1c             	add    esp,0x1c
c0026cd0:	5b                   	pop    ebx
c0026cd1:	5e                   	pop    esi
c0026cd2:	5f                   	pop    edi
c0026cd3:	5d                   	pop    ebp
c0026cd4:	c3                   	ret    
c0026cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026cd8:	89 f9                	mov    ecx,edi
c0026cda:	85 ff                	test   edi,edi
c0026cdc:	75 0b                	jne    c0026ce9 <__udivdi3+0x45>
c0026cde:	b8 01 00 00 00       	mov    eax,0x1
c0026ce3:	31 d2                	xor    edx,edx
c0026ce5:	f7 f7                	div    edi
c0026ce7:	89 c1                	mov    ecx,eax
c0026ce9:	31 d2                	xor    edx,edx
c0026ceb:	89 f0                	mov    eax,esi
c0026ced:	f7 f1                	div    ecx
c0026cef:	89 c3                	mov    ebx,eax
c0026cf1:	89 e8                	mov    eax,ebp
c0026cf3:	f7 f1                	div    ecx
c0026cf5:	89 da                	mov    edx,ebx
c0026cf7:	83 c4 1c             	add    esp,0x1c
c0026cfa:	5b                   	pop    ebx
c0026cfb:	5e                   	pop    esi
c0026cfc:	5f                   	pop    edi
c0026cfd:	5d                   	pop    ebp
c0026cfe:	c3                   	ret    
c0026cff:	90                   	nop
c0026d00:	39 f2                	cmp    edx,esi
c0026d02:	77 1c                	ja     c0026d20 <__udivdi3+0x7c>
c0026d04:	0f bd da             	bsr    ebx,edx
c0026d07:	83 f3 1f             	xor    ebx,0x1f
c0026d0a:	75 24                	jne    c0026d30 <__udivdi3+0x8c>
c0026d0c:	39 f2                	cmp    edx,esi
c0026d0e:	72 08                	jb     c0026d18 <__udivdi3+0x74>
c0026d10:	39 ef                	cmp    edi,ebp
c0026d12:	0f 87 84 00 00 00    	ja     c0026d9c <__udivdi3+0xf8>
c0026d18:	b8 01 00 00 00       	mov    eax,0x1
c0026d1d:	eb ac                	jmp    c0026ccb <__udivdi3+0x27>
c0026d1f:	90                   	nop
c0026d20:	31 db                	xor    ebx,ebx
c0026d22:	31 c0                	xor    eax,eax
c0026d24:	89 da                	mov    edx,ebx
c0026d26:	83 c4 1c             	add    esp,0x1c
c0026d29:	5b                   	pop    ebx
c0026d2a:	5e                   	pop    esi
c0026d2b:	5f                   	pop    edi
c0026d2c:	5d                   	pop    ebp
c0026d2d:	c3                   	ret    
c0026d2e:	66 90                	xchg   ax,ax
c0026d30:	b8 20 00 00 00       	mov    eax,0x20
c0026d35:	29 d8                	sub    eax,ebx
c0026d37:	88 d9                	mov    cl,bl
c0026d39:	d3 e2                	shl    edx,cl
c0026d3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026d3f:	89 fa                	mov    edx,edi
c0026d41:	88 c1                	mov    cl,al
c0026d43:	d3 ea                	shr    edx,cl
c0026d45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026d49:	09 d1                	or     ecx,edx
c0026d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026d4f:	88 d9                	mov    cl,bl
c0026d51:	d3 e7                	shl    edi,cl
c0026d53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d57:	89 f7                	mov    edi,esi
c0026d59:	88 c1                	mov    cl,al
c0026d5b:	d3 ef                	shr    edi,cl
c0026d5d:	88 d9                	mov    cl,bl
c0026d5f:	d3 e6                	shl    esi,cl
c0026d61:	89 ea                	mov    edx,ebp
c0026d63:	88 c1                	mov    cl,al
c0026d65:	d3 ea                	shr    edx,cl
c0026d67:	09 d6                	or     esi,edx
c0026d69:	89 f0                	mov    eax,esi
c0026d6b:	89 fa                	mov    edx,edi
c0026d6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026d71:	89 d7                	mov    edi,edx
c0026d73:	89 c6                	mov    esi,eax
c0026d75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d79:	39 d7                	cmp    edi,edx
c0026d7b:	72 13                	jb     c0026d90 <__udivdi3+0xec>
c0026d7d:	74 09                	je     c0026d88 <__udivdi3+0xe4>
c0026d7f:	89 f0                	mov    eax,esi
c0026d81:	31 db                	xor    ebx,ebx
c0026d83:	e9 43 ff ff ff       	jmp    c0026ccb <__udivdi3+0x27>
c0026d88:	88 d9                	mov    cl,bl
c0026d8a:	d3 e5                	shl    ebp,cl
c0026d8c:	39 c5                	cmp    ebp,eax
c0026d8e:	73 ef                	jae    c0026d7f <__udivdi3+0xdb>
c0026d90:	8d 46 ff             	lea    eax,[esi-0x1]
c0026d93:	31 db                	xor    ebx,ebx
c0026d95:	e9 31 ff ff ff       	jmp    c0026ccb <__udivdi3+0x27>
c0026d9a:	66 90                	xchg   ax,ax
c0026d9c:	31 c0                	xor    eax,eax
c0026d9e:	e9 28 ff ff ff       	jmp    c0026ccb <__udivdi3+0x27>
c0026da3:	90                   	nop

c0026da4 <__umoddi3>:
c0026da4:	55                   	push   ebp
c0026da5:	57                   	push   edi
c0026da6:	56                   	push   esi
c0026da7:	53                   	push   ebx
c0026da8:	83 ec 1c             	sub    esp,0x1c
c0026dab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026daf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026db3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026db7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026dbb:	89 da                	mov    edx,ebx
c0026dbd:	85 c0                	test   eax,eax
c0026dbf:	75 37                	jne    c0026df8 <__umoddi3+0x54>
c0026dc1:	39 df                	cmp    edi,ebx
c0026dc3:	76 13                	jbe    c0026dd8 <__umoddi3+0x34>
c0026dc5:	89 f0                	mov    eax,esi
c0026dc7:	f7 f7                	div    edi
c0026dc9:	89 d0                	mov    eax,edx
c0026dcb:	31 d2                	xor    edx,edx
c0026dcd:	83 c4 1c             	add    esp,0x1c
c0026dd0:	5b                   	pop    ebx
c0026dd1:	5e                   	pop    esi
c0026dd2:	5f                   	pop    edi
c0026dd3:	5d                   	pop    ebp
c0026dd4:	c3                   	ret    
c0026dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026dd8:	89 fd                	mov    ebp,edi
c0026dda:	85 ff                	test   edi,edi
c0026ddc:	75 0b                	jne    c0026de9 <__umoddi3+0x45>
c0026dde:	b8 01 00 00 00       	mov    eax,0x1
c0026de3:	31 d2                	xor    edx,edx
c0026de5:	f7 f7                	div    edi
c0026de7:	89 c5                	mov    ebp,eax
c0026de9:	89 d8                	mov    eax,ebx
c0026deb:	31 d2                	xor    edx,edx
c0026ded:	f7 f5                	div    ebp
c0026def:	89 f0                	mov    eax,esi
c0026df1:	f7 f5                	div    ebp
c0026df3:	89 d0                	mov    eax,edx
c0026df5:	eb d4                	jmp    c0026dcb <__umoddi3+0x27>
c0026df7:	90                   	nop
c0026df8:	89 f1                	mov    ecx,esi
c0026dfa:	39 d8                	cmp    eax,ebx
c0026dfc:	76 0a                	jbe    c0026e08 <__umoddi3+0x64>
c0026dfe:	89 f0                	mov    eax,esi
c0026e00:	83 c4 1c             	add    esp,0x1c
c0026e03:	5b                   	pop    ebx
c0026e04:	5e                   	pop    esi
c0026e05:	5f                   	pop    edi
c0026e06:	5d                   	pop    ebp
c0026e07:	c3                   	ret    
c0026e08:	0f bd e8             	bsr    ebp,eax
c0026e0b:	83 f5 1f             	xor    ebp,0x1f
c0026e0e:	75 1c                	jne    c0026e2c <__umoddi3+0x88>
c0026e10:	39 d8                	cmp    eax,ebx
c0026e12:	72 04                	jb     c0026e18 <__umoddi3+0x74>
c0026e14:	39 f7                	cmp    edi,esi
c0026e16:	77 08                	ja     c0026e20 <__umoddi3+0x7c>
c0026e18:	89 da                	mov    edx,ebx
c0026e1a:	29 fe                	sub    esi,edi
c0026e1c:	19 c2                	sbb    edx,eax
c0026e1e:	89 f1                	mov    ecx,esi
c0026e20:	89 c8                	mov    eax,ecx
c0026e22:	83 c4 1c             	add    esp,0x1c
c0026e25:	5b                   	pop    ebx
c0026e26:	5e                   	pop    esi
c0026e27:	5f                   	pop    edi
c0026e28:	5d                   	pop    ebp
c0026e29:	c3                   	ret    
c0026e2a:	66 90                	xchg   ax,ax
c0026e2c:	ba 20 00 00 00       	mov    edx,0x20
c0026e31:	29 ea                	sub    edx,ebp
c0026e33:	89 e9                	mov    ecx,ebp
c0026e35:	d3 e0                	shl    eax,cl
c0026e37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e3b:	89 f8                	mov    eax,edi
c0026e3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026e41:	88 d1                	mov    cl,dl
c0026e43:	d3 e8                	shr    eax,cl
c0026e45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026e49:	09 c1                	or     ecx,eax
c0026e4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026e4f:	89 e9                	mov    ecx,ebp
c0026e51:	d3 e7                	shl    edi,cl
c0026e53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e57:	89 d8                	mov    eax,ebx
c0026e59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026e5d:	88 d1                	mov    cl,dl
c0026e5f:	d3 e8                	shr    eax,cl
c0026e61:	89 c7                	mov    edi,eax
c0026e63:	89 e9                	mov    ecx,ebp
c0026e65:	d3 e3                	shl    ebx,cl
c0026e67:	89 f0                	mov    eax,esi
c0026e69:	88 d1                	mov    cl,dl
c0026e6b:	d3 e8                	shr    eax,cl
c0026e6d:	09 d8                	or     eax,ebx
c0026e6f:	89 e9                	mov    ecx,ebp
c0026e71:	d3 e6                	shl    esi,cl
c0026e73:	89 f3                	mov    ebx,esi
c0026e75:	89 fa                	mov    edx,edi
c0026e77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026e7b:	89 d1                	mov    ecx,edx
c0026e7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e81:	89 c6                	mov    esi,eax
c0026e83:	89 d7                	mov    edi,edx
c0026e85:	39 d1                	cmp    ecx,edx
c0026e87:	72 27                	jb     c0026eb0 <__umoddi3+0x10c>
c0026e89:	74 21                	je     c0026eac <__umoddi3+0x108>
c0026e8b:	89 ca                	mov    edx,ecx
c0026e8d:	29 f3                	sub    ebx,esi
c0026e8f:	19 fa                	sbb    edx,edi
c0026e91:	89 d0                	mov    eax,edx
c0026e93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026e97:	d3 e0                	shl    eax,cl
c0026e99:	89 e9                	mov    ecx,ebp
c0026e9b:	d3 eb                	shr    ebx,cl
c0026e9d:	09 d8                	or     eax,ebx
c0026e9f:	d3 ea                	shr    edx,cl
c0026ea1:	83 c4 1c             	add    esp,0x1c
c0026ea4:	5b                   	pop    ebx
c0026ea5:	5e                   	pop    esi
c0026ea6:	5f                   	pop    edi
c0026ea7:	5d                   	pop    ebp
c0026ea8:	c3                   	ret    
c0026ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0026eac:	39 c3                	cmp    ebx,eax
c0026eae:	73 db                	jae    c0026e8b <__umoddi3+0xe7>
c0026eb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026eb4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026eb8:	89 d7                	mov    edi,edx
c0026eba:	89 c6                	mov    esi,eax
c0026ebc:	eb cd                	jmp    c0026e8b <__umoddi3+0xe7>

c0026ebe <__addsf3>:
c0026ebe:	55                   	push   ebp
c0026ebf:	89 e5                	mov    ebp,esp
c0026ec1:	57                   	push   edi
c0026ec2:	56                   	push   esi
c0026ec3:	53                   	push   ebx
c0026ec4:	83 ec 08             	sub    esp,0x8
c0026ec7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026eca:	89 fa                	mov    edx,edi
c0026ecc:	89 f8                	mov    eax,edi
c0026ece:	c1 f8 17             	sar    eax,0x17
c0026ed1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026ed4:	c1 e2 08             	shl    edx,0x8
c0026ed7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026edd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ee0:	89 de                	mov    esi,ebx
c0026ee2:	c1 fe 17             	sar    esi,0x17
c0026ee5:	c1 e3 08             	shl    ebx,0x8
c0026ee8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026eee:	31 f0                	xor    eax,esi
c0026ef0:	0f 88 3b 01 00 00    	js     c0027031 <__addsf3+0x173>
c0026ef6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ef9:	29 f1                	sub    ecx,esi
c0026efb:	85 c9                	test   ecx,ecx
c0026efd:	7e 54                	jle    c0026f53 <__addsf3+0x95>
c0026eff:	89 f0                	mov    eax,esi
c0026f01:	84 c0                	test   al,al
c0026f03:	75 10                	jne    c0026f15 <__addsf3+0x57>
c0026f05:	85 db                	test   ebx,ebx
c0026f07:	0f 84 aa 02 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0026f0d:	49                   	dec    ecx
c0026f0e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026f11:	74 38                	je     c0026f4b <__addsf3+0x8d>
c0026f13:	eb 13                	jmp    c0026f28 <__addsf3+0x6a>
c0026f15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f18:	f7 d0                	not    eax
c0026f1a:	84 c0                	test   al,al
c0026f1c:	0f 84 95 02 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0026f22:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f28:	83 f9 1f             	cmp    ecx,0x1f
c0026f2b:	0f 8f 86 02 00 00    	jg     c00271b7 <__addsf3+0x2f9>
c0026f31:	89 de                	mov    esi,ebx
c0026f33:	d3 ee                	shr    esi,cl
c0026f35:	b8 20 00 00 00       	mov    eax,0x20
c0026f3a:	29 c8                	sub    eax,ecx
c0026f3c:	89 c1                	mov    ecx,eax
c0026f3e:	d3 e3                	shl    ebx,cl
c0026f40:	31 c0                	xor    eax,eax
c0026f42:	85 db                	test   ebx,ebx
c0026f44:	0f 95 c0             	setne  al
c0026f47:	09 f0                	or     eax,esi
c0026f49:	01 d0                	add    eax,edx
c0026f4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f4e:	e9 b6 00 00 00       	jmp    c0027009 <__addsf3+0x14b>
c0026f53:	74 5c                	je     c0026fb1 <__addsf3+0xf3>
c0026f55:	89 f1                	mov    ecx,esi
c0026f57:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026f5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f5d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026f61:	75 14                	jne    c0026f77 <__addsf3+0xb9>
c0026f63:	85 d2                	test   edx,edx
c0026f65:	0f 84 4c 02 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0026f6b:	49                   	dec    ecx
c0026f6c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026f6f:	0f 84 94 00 00 00    	je     c0027009 <__addsf3+0x14b>
c0026f75:	eb 12                	jmp    c0026f89 <__addsf3+0xcb>
c0026f77:	89 f0                	mov    eax,esi
c0026f79:	f7 d0                	not    eax
c0026f7b:	84 c0                	test   al,al
c0026f7d:	0f 84 34 02 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0026f83:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f89:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f8c:	83 f9 1f             	cmp    ecx,0x1f
c0026f8f:	0f 8f 22 02 00 00    	jg     c00271b7 <__addsf3+0x2f9>
c0026f95:	89 d7                	mov    edi,edx
c0026f97:	d3 ef                	shr    edi,cl
c0026f99:	b8 20 00 00 00       	mov    eax,0x20
c0026f9e:	29 c8                	sub    eax,ecx
c0026fa0:	89 c1                	mov    ecx,eax
c0026fa2:	d3 e2                	shl    edx,cl
c0026fa4:	31 c0                	xor    eax,eax
c0026fa6:	85 d2                	test   edx,edx
c0026fa8:	0f 95 c0             	setne  al
c0026fab:	09 f8                	or     eax,edi
c0026fad:	01 d8                	add    eax,ebx
c0026faf:	eb 58                	jmp    c0027009 <__addsf3+0x14b>
c0026fb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026fb4:	8d 70 01             	lea    esi,[eax+0x1]
c0026fb7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026fbd:	75 32                	jne    c0026ff1 <__addsf3+0x133>
c0026fbf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026fc3:	75 1f                	jne    c0026fe4 <__addsf3+0x126>
c0026fc5:	85 d2                	test   edx,edx
c0026fc7:	0f 84 e0 01 00 00    	je     c00271ad <__addsf3+0x2ef>
c0026fcd:	85 db                	test   ebx,ebx
c0026fcf:	0f 84 e2 01 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0026fd5:	89 d0                	mov    eax,edx
c0026fd7:	01 d8                	add    eax,ebx
c0026fd9:	0f 89 a9 01 00 00    	jns    c0027188 <__addsf3+0x2ca>
c0026fdf:	e9 9d 01 00 00       	jmp    c0027181 <__addsf3+0x2c3>
c0026fe4:	85 d2                	test   edx,edx
c0026fe6:	0f 85 cb 01 00 00    	jne    c00271b7 <__addsf3+0x2f9>
c0026fec:	e9 bc 01 00 00       	jmp    c00271ad <__addsf3+0x2ef>
c0026ff1:	31 c0                	xor    eax,eax
c0026ff3:	89 f1                	mov    ecx,esi
c0026ff5:	f7 d1                	not    ecx
c0026ff7:	84 c9                	test   cl,cl
c0026ff9:	0f 84 90 01 00 00    	je     c002718f <__addsf3+0x2d1>
c0026fff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027002:	d1 e8                	shr    eax,1
c0027004:	e9 86 01 00 00       	jmp    c002718f <__addsf3+0x2d1>
c0027009:	85 c0                	test   eax,eax
c002700b:	0f 89 7e 01 00 00    	jns    c002718f <__addsf3+0x2d1>
c0027011:	46                   	inc    esi
c0027012:	89 f2                	mov    edx,esi
c0027014:	f7 d2                	not    edx
c0027016:	84 d2                	test   dl,dl
c0027018:	0f 84 6f 01 00 00    	je     c002718d <__addsf3+0x2cf>
c002701e:	89 c2                	mov    edx,eax
c0027020:	83 e2 01             	and    edx,0x1
c0027023:	d1 e8                	shr    eax,1
c0027025:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002702a:	09 d0                	or     eax,edx
c002702c:	e9 5e 01 00 00       	jmp    c002718f <__addsf3+0x2d1>
c0027031:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027035:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027038:	89 f0                	mov    eax,esi
c002703a:	0f b6 c0             	movzx  eax,al
c002703d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027040:	29 c1                	sub    ecx,eax
c0027042:	85 c9                	test   ecx,ecx
c0027044:	7e 55                	jle    c002709b <__addsf3+0x1dd>
c0027046:	85 c0                	test   eax,eax
c0027048:	75 11                	jne    c002705b <__addsf3+0x19d>
c002704a:	85 db                	test   ebx,ebx
c002704c:	0f 84 65 01 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0027052:	49                   	dec    ecx
c0027053:	75 19                	jne    c002706e <__addsf3+0x1b0>
c0027055:	89 d0                	mov    eax,edx
c0027057:	29 d8                	sub    eax,ebx
c0027059:	eb 38                	jmp    c0027093 <__addsf3+0x1d5>
c002705b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002705e:	f7 d0                	not    eax
c0027060:	84 c0                	test   al,al
c0027062:	0f 84 4f 01 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0027068:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002706e:	83 f9 1f             	cmp    ecx,0x1f
c0027071:	0f 8f 40 01 00 00    	jg     c00271b7 <__addsf3+0x2f9>
c0027077:	89 de                	mov    esi,ebx
c0027079:	d3 ee                	shr    esi,cl
c002707b:	b8 20 00 00 00       	mov    eax,0x20
c0027080:	29 c8                	sub    eax,ecx
c0027082:	89 c1                	mov    ecx,eax
c0027084:	d3 e3                	shl    ebx,cl
c0027086:	31 c0                	xor    eax,eax
c0027088:	85 db                	test   ebx,ebx
c002708a:	0f 95 c0             	setne  al
c002708d:	09 f0                	or     eax,esi
c002708f:	29 c2                	sub    edx,eax
c0027091:	89 d0                	mov    eax,edx
c0027093:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027096:	e9 af 00 00 00       	jmp    c002714a <__addsf3+0x28c>
c002709b:	74 5c                	je     c00270f9 <__addsf3+0x23b>
c002709d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00270a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00270a7:	75 14                	jne    c00270bd <__addsf3+0x1ff>
c00270a9:	85 d2                	test   edx,edx
c00270ab:	0f 84 06 01 00 00    	je     c00271b7 <__addsf3+0x2f9>
c00270b1:	48                   	dec    eax
c00270b2:	75 1b                	jne    c00270cf <__addsf3+0x211>
c00270b4:	89 d8                	mov    eax,ebx
c00270b6:	29 d0                	sub    eax,edx
c00270b8:	e9 8d 00 00 00       	jmp    c002714a <__addsf3+0x28c>
c00270bd:	89 f1                	mov    ecx,esi
c00270bf:	f7 d1                	not    ecx
c00270c1:	84 c9                	test   cl,cl
c00270c3:	0f 84 ee 00 00 00    	je     c00271b7 <__addsf3+0x2f9>
c00270c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270d2:	83 f8 1f             	cmp    eax,0x1f
c00270d5:	0f 8f dc 00 00 00    	jg     c00271b7 <__addsf3+0x2f9>
c00270db:	89 d7                	mov    edi,edx
c00270dd:	88 c1                	mov    cl,al
c00270df:	d3 ef                	shr    edi,cl
c00270e1:	b9 20 00 00 00       	mov    ecx,0x20
c00270e6:	29 c1                	sub    ecx,eax
c00270e8:	d3 e2                	shl    edx,cl
c00270ea:	31 c0                	xor    eax,eax
c00270ec:	85 d2                	test   edx,edx
c00270ee:	0f 95 c0             	setne  al
c00270f1:	09 f8                	or     eax,edi
c00270f3:	29 c3                	sub    ebx,eax
c00270f5:	89 d8                	mov    eax,ebx
c00270f7:	eb 51                	jmp    c002714a <__addsf3+0x28c>
c00270f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270fc:	40                   	inc    eax
c00270fd:	a8 fe                	test   al,0xfe
c00270ff:	75 3d                	jne    c002713e <__addsf3+0x280>
c0027101:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027105:	0f 85 a7 00 00 00    	jne    c00271b2 <__addsf3+0x2f4>
c002710b:	85 d2                	test   edx,edx
c002710d:	75 12                	jne    c0027121 <__addsf3+0x263>
c002710f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027112:	85 db                	test   ebx,ebx
c0027114:	0f 85 9d 00 00 00    	jne    c00271b7 <__addsf3+0x2f9>
c002711a:	31 ff                	xor    edi,edi
c002711c:	e9 96 00 00 00       	jmp    c00271b7 <__addsf3+0x2f9>
c0027121:	85 db                	test   ebx,ebx
c0027123:	0f 84 8e 00 00 00    	je     c00271b7 <__addsf3+0x2f9>
c0027129:	89 d0                	mov    eax,edx
c002712b:	29 d8                	sub    eax,ebx
c002712d:	79 06                	jns    c0027135 <__addsf3+0x277>
c002712f:	89 d8                	mov    eax,ebx
c0027131:	29 d0                	sub    eax,edx
c0027133:	eb 5a                	jmp    c002718f <__addsf3+0x2d1>
c0027135:	bf 00 00 00 00       	mov    edi,0x0
c002713a:	74 7b                	je     c00271b7 <__addsf3+0x2f9>
c002713c:	eb 4a                	jmp    c0027188 <__addsf3+0x2ca>
c002713e:	89 d0                	mov    eax,edx
c0027140:	29 d8                	sub    eax,ebx
c0027142:	79 12                	jns    c0027156 <__addsf3+0x298>
c0027144:	89 d8                	mov    eax,ebx
c0027146:	29 d0                	sub    eax,edx
c0027148:	eb 09                	jmp    c0027153 <__addsf3+0x295>
c002714a:	85 c0                	test   eax,eax
c002714c:	79 41                	jns    c002718f <__addsf3+0x2d1>
c002714e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027153:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027156:	31 f6                	xor    esi,esi
c0027158:	85 c0                	test   eax,eax
c002715a:	74 33                	je     c002718f <__addsf3+0x2d1>
c002715c:	0f bd c8             	bsr    ecx,eax
c002715f:	83 f1 1f             	xor    ecx,0x1f
c0027162:	d3 e0                	shl    eax,cl
c0027164:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027168:	39 ca                	cmp    edx,ecx
c002716a:	7f 10                	jg     c002717c <__addsf3+0x2be>
c002716c:	29 d1                	sub    ecx,edx
c002716e:	41                   	inc    ecx
c002716f:	d3 e8                	shr    eax,cl
c0027171:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027174:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002717a:	eb 13                	jmp    c002718f <__addsf3+0x2d1>
c002717c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002717f:	29 ce                	sub    esi,ecx
c0027181:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027186:	eb 07                	jmp    c002718f <__addsf3+0x2d1>
c0027188:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002718b:	eb 02                	jmp    c002718f <__addsf3+0x2d1>
c002718d:	31 c0                	xor    eax,eax
c002718f:	89 c2                	mov    edx,eax
c0027191:	c1 ea 08             	shr    edx,0x8
c0027194:	a8 7f                	test   al,0x7f
c0027196:	0f 95 c1             	setne  cl
c0027199:	09 d1                	or     ecx,edx
c002719b:	83 e1 01             	and    ecx,0x1
c002719e:	c1 e8 07             	shr    eax,0x7
c00271a1:	21 c8                	and    eax,ecx
c00271a3:	c1 e6 17             	shl    esi,0x17
c00271a6:	09 d6                	or     esi,edx
c00271a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00271ab:	eb 0a                	jmp    c00271b7 <__addsf3+0x2f9>
c00271ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271b0:	eb 05                	jmp    c00271b7 <__addsf3+0x2f9>
c00271b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00271b7:	89 f8                	mov    eax,edi
c00271b9:	5a                   	pop    edx
c00271ba:	59                   	pop    ecx
c00271bb:	5b                   	pop    ebx
c00271bc:	5e                   	pop    esi
c00271bd:	5f                   	pop    edi
c00271be:	5d                   	pop    ebp
c00271bf:	c3                   	ret    

c00271c0 <__subsf3>:
c00271c0:	55                   	push   ebp
c00271c1:	89 e5                	mov    ebp,esp
c00271c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271c6:	05 00 00 00 80       	add    eax,0x80000000
c00271cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00271ce:	5d                   	pop    ebp
c00271cf:	e9 ea fc ff ff       	jmp    c0026ebe <__addsf3>

c00271d4 <__negsf2>:
c00271d4:	55                   	push   ebp
c00271d5:	89 e5                	mov    ebp,esp
c00271d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00271da:	05 00 00 00 80       	add    eax,0x80000000
c00271df:	5d                   	pop    ebp
c00271e0:	c3                   	ret    

c00271e1 <__mulsf3>:
c00271e1:	55                   	push   ebp
c00271e2:	89 e5                	mov    ebp,esp
c00271e4:	57                   	push   edi
c00271e5:	56                   	push   esi
c00271e6:	53                   	push   ebx
c00271e7:	83 ec 1c             	sub    esp,0x1c
c00271ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00271ed:	89 f0                	mov    eax,esi
c00271ef:	89 f1                	mov    ecx,esi
c00271f1:	c1 f9 17             	sar    ecx,0x17
c00271f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271f7:	c1 e0 08             	shl    eax,0x8
c00271fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271ff:	89 c1                	mov    ecx,eax
c0027201:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027204:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027207:	89 c7                	mov    edi,eax
c0027209:	c1 ff 17             	sar    edi,0x17
c002720c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027210:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027213:	89 f8                	mov    eax,edi
c0027215:	0f b6 c0             	movzx  eax,al
c0027218:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002721b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002721f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027222:	42                   	inc    edx
c0027223:	80 e2 fe             	and    dl,0xfe
c0027226:	75 7b                	jne    c00272a3 <__mulsf3+0xc2>
c0027228:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002722c:	74 54                	je     c0027282 <__mulsf3+0xa1>
c002722e:	85 c9                	test   ecx,ecx
c0027230:	0f 85 64 01 00 00    	jne    c002739a <__mulsf3+0x1b9>
c0027236:	8d 57 01             	lea    edx,[edi+0x1]
c0027239:	80 e2 fe             	and    dl,0xfe
c002723c:	75 1f                	jne    c002725d <__mulsf3+0x7c>
c002723e:	85 c0                	test   eax,eax
c0027240:	b8 00 00 00 00       	mov    eax,0x0
c0027245:	74 29                	je     c0027270 <__mulsf3+0x8f>
c0027247:	53                   	push   ebx
c0027248:	53                   	push   ebx
c0027249:	50                   	push   eax
c002724a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002724d:	e8 96 05 00 00       	call   c00277e8 <__nesf2>
c0027252:	83 c4 10             	add    esp,0x10
c0027255:	85 c0                	test   eax,eax
c0027257:	0f 85 3a 01 00 00    	jne    c0027397 <__mulsf3+0x1b6>
c002725d:	85 ff                	test   edi,edi
c002725f:	0f 89 35 01 00 00    	jns    c002739a <__mulsf3+0x1b9>
c0027265:	81 c6 00 00 00 80    	add    esi,0x80000000
c002726b:	e9 2a 01 00 00       	jmp    c002739a <__mulsf3+0x1b9>
c0027270:	51                   	push   ecx
c0027271:	51                   	push   ecx
c0027272:	50                   	push   eax
c0027273:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027276:	e8 6d 05 00 00       	call   c00277e8 <__nesf2>
c002727b:	83 c4 10             	add    esp,0x10
c002727e:	85 c0                	test   eax,eax
c0027280:	eb 15                	jmp    c0027297 <__mulsf3+0xb6>
c0027282:	85 c9                	test   ecx,ecx
c0027284:	74 0b                	je     c0027291 <__mulsf3+0xb0>
c0027286:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027289:	01 c9                	add    ecx,ecx
c002728b:	78 16                	js     c00272a3 <__mulsf3+0xc2>
c002728d:	89 d3                	mov    ebx,edx
c002728f:	eb f5                	jmp    c0027286 <__mulsf3+0xa5>
c0027291:	89 f8                	mov    eax,edi
c0027293:	f7 d0                	not    eax
c0027295:	84 c0                	test   al,al
c0027297:	75 c4                	jne    c002725d <__mulsf3+0x7c>
c0027299:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002729e:	e9 f7 00 00 00       	jmp    c002739a <__mulsf3+0x1b9>
c00272a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272a6:	c1 e6 08             	shl    esi,0x8
c00272a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00272af:	8d 57 01             	lea    edx,[edi+0x1]
c00272b2:	80 e2 fe             	and    dl,0xfe
c00272b5:	75 63                	jne    c002731a <__mulsf3+0x139>
c00272b7:	85 c0                	test   eax,eax
c00272b9:	74 2f                	je     c00272ea <__mulsf3+0x109>
c00272bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00272bf:	0f 89 d2 00 00 00    	jns    c0027397 <__mulsf3+0x1b6>
c00272c5:	52                   	push   edx
c00272c6:	52                   	push   edx
c00272c7:	6a 00                	push   0x0
c00272c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272cc:	e8 dc 04 00 00       	call   c00277ad <__eqsf2>
c00272d1:	83 c4 10             	add    esp,0x10
c00272d4:	85 c0                	test   eax,eax
c00272d6:	0f 85 bb 00 00 00    	jne    c0027397 <__mulsf3+0x1b6>
c00272dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00272e5:	e9 b0 00 00 00       	jmp    c002739a <__mulsf3+0x1b9>
c00272ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272ed:	50                   	push   eax
c00272ee:	50                   	push   eax
c00272ef:	6a 00                	push   0x0
c00272f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272f4:	e8 b4 04 00 00       	call   c00277ad <__eqsf2>
c00272f9:	83 c4 10             	add    esp,0x10
c00272fc:	85 c0                	test   eax,eax
c00272fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027301:	75 0c                	jne    c002730f <__mulsf3+0x12e>
c0027303:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027307:	0f 89 8a 00 00 00    	jns    c0027397 <__mulsf3+0x1b6>
c002730d:	eb cd                	jmp    c00272dc <__mulsf3+0xfb>
c002730f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027312:	01 f6                	add    esi,esi
c0027314:	78 04                	js     c002731a <__mulsf3+0x139>
c0027316:	89 c3                	mov    ebx,eax
c0027318:	eb f5                	jmp    c002730f <__mulsf3+0x12e>
c002731a:	89 c8                	mov    eax,ecx
c002731c:	0d 00 00 00 80       	or     eax,0x80000000
c0027321:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027327:	f7 e6                	mul    esi
c0027329:	85 c0                	test   eax,eax
c002732b:	0f 95 c0             	setne  al
c002732e:	0f b6 c0             	movzx  eax,al
c0027331:	09 c2                	or     edx,eax
c0027333:	78 03                	js     c0027338 <__mulsf3+0x157>
c0027335:	01 d2                	add    edx,edx
c0027337:	4b                   	dec    ebx
c0027338:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002733e:	7f 22                	jg     c0027362 <__mulsf3+0x181>
c0027340:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027346:	85 db                	test   ebx,ebx
c0027348:	7f 23                	jg     c002736d <__mulsf3+0x18c>
c002734a:	83 fb e9             	cmp    ebx,0xffffffe9
c002734d:	7c 1a                	jl     c0027369 <__mulsf3+0x188>
c002734f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027355:	b9 01 00 00 00       	mov    ecx,0x1
c002735a:	29 d9                	sub    ecx,ebx
c002735c:	d3 ea                	shr    edx,cl
c002735e:	31 db                	xor    ebx,ebx
c0027360:	eb 0b                	jmp    c002736d <__mulsf3+0x18c>
c0027362:	bb ff 00 00 00       	mov    ebx,0xff
c0027367:	eb 02                	jmp    c002736b <__mulsf3+0x18a>
c0027369:	31 db                	xor    ebx,ebx
c002736b:	31 d2                	xor    edx,edx
c002736d:	89 d0                	mov    eax,edx
c002736f:	c1 e8 08             	shr    eax,0x8
c0027372:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027375:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002737b:	09 fb                	or     ebx,edi
c002737d:	c1 e3 17             	shl    ebx,0x17
c0027380:	09 c3                	or     ebx,eax
c0027382:	f6 c2 7f             	test   dl,0x7f
c0027385:	0f 95 c1             	setne  cl
c0027388:	09 c8                	or     eax,ecx
c002738a:	83 e0 01             	and    eax,0x1
c002738d:	c1 ea 07             	shr    edx,0x7
c0027390:	21 c2                	and    edx,eax
c0027392:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027395:	eb 03                	jmp    c002739a <__mulsf3+0x1b9>
c0027397:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002739a:	89 f0                	mov    eax,esi
c002739c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002739f:	5b                   	pop    ebx
c00273a0:	5e                   	pop    esi
c00273a1:	5f                   	pop    edi
c00273a2:	5d                   	pop    ebp
c00273a3:	c3                   	ret    

c00273a4 <__divsf3>:
c00273a4:	55                   	push   ebp
c00273a5:	89 e5                	mov    ebp,esp
c00273a7:	57                   	push   edi
c00273a8:	56                   	push   esi
c00273a9:	53                   	push   ebx
c00273aa:	83 ec 1c             	sub    esp,0x1c
c00273ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00273b0:	89 d8                	mov    eax,ebx
c00273b2:	89 d9                	mov    ecx,ebx
c00273b4:	c1 f9 17             	sar    ecx,0x17
c00273b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00273ba:	c1 e0 08             	shl    eax,0x8
c00273bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273c2:	89 c1                	mov    ecx,eax
c00273c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00273c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00273ca:	89 c7                	mov    edi,eax
c00273cc:	c1 ff 17             	sar    edi,0x17
c00273cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00273d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00273d6:	89 f8                	mov    eax,edi
c00273d8:	0f b6 c0             	movzx  eax,al
c00273db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273de:	29 c6                	sub    esi,eax
c00273e0:	83 c6 7f             	add    esi,0x7f
c00273e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00273e6:	42                   	inc    edx
c00273e7:	80 e2 fe             	and    dl,0xfe
c00273ea:	0f 85 9c 00 00 00    	jne    c002748c <__divsf3+0xe8>
c00273f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273f4:	74 33                	je     c0027429 <__divsf3+0x85>
c00273f6:	85 c9                	test   ecx,ecx
c00273f8:	0f 85 c7 01 00 00    	jne    c00275c5 <__divsf3+0x221>
c00273fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027401:	80 e2 fe             	and    dl,0xfe
c0027404:	75 2f                	jne    c0027435 <__divsf3+0x91>
c0027406:	85 c0                	test   eax,eax
c0027408:	74 2b                	je     c0027435 <__divsf3+0x91>
c002740a:	51                   	push   ecx
c002740b:	51                   	push   ecx
c002740c:	6a 00                	push   0x0
c002740e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027411:	e8 d2 03 00 00       	call   c00277e8 <__nesf2>
c0027416:	83 c4 10             	add    esp,0x10
c0027419:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002741c:	85 c0                	test   eax,eax
c002741e:	0f 85 a1 01 00 00    	jne    c00275c5 <__divsf3+0x221>
c0027424:	e9 92 01 00 00       	jmp    c00275bb <__divsf3+0x217>
c0027429:	85 c9                	test   ecx,ecx
c002742b:	75 1b                	jne    c0027448 <__divsf3+0xa4>
c002742d:	8d 57 01             	lea    edx,[edi+0x1]
c0027430:	80 e2 fe             	and    dl,0xfe
c0027433:	74 1e                	je     c0027453 <__divsf3+0xaf>
c0027435:	85 ff                	test   edi,edi
c0027437:	0f 89 88 01 00 00    	jns    c00275c5 <__divsf3+0x221>
c002743d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027443:	e9 7d 01 00 00       	jmp    c00275c5 <__divsf3+0x221>
c0027448:	8d 56 ff             	lea    edx,[esi-0x1]
c002744b:	01 c9                	add    ecx,ecx
c002744d:	78 3d                	js     c002748c <__divsf3+0xe8>
c002744f:	89 d6                	mov    esi,edx
c0027451:	eb f5                	jmp    c0027448 <__divsf3+0xa4>
c0027453:	85 c0                	test   eax,eax
c0027455:	b8 00 00 00 00       	mov    eax,0x0
c002745a:	74 18                	je     c0027474 <__divsf3+0xd0>
c002745c:	52                   	push   edx
c002745d:	52                   	push   edx
c002745e:	50                   	push   eax
c002745f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027462:	e8 81 03 00 00       	call   c00277e8 <__nesf2>
c0027467:	83 c4 10             	add    esp,0x10
c002746a:	85 c0                	test   eax,eax
c002746c:	0f 85 50 01 00 00    	jne    c00275c2 <__divsf3+0x21e>
c0027472:	eb c1                	jmp    c0027435 <__divsf3+0x91>
c0027474:	56                   	push   esi
c0027475:	56                   	push   esi
c0027476:	50                   	push   eax
c0027477:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002747a:	e8 69 03 00 00       	call   c00277e8 <__nesf2>
c002747f:	83 c4 10             	add    esp,0x10
c0027482:	85 c0                	test   eax,eax
c0027484:	0f 84 31 01 00 00    	je     c00275bb <__divsf3+0x217>
c002748a:	eb a9                	jmp    c0027435 <__divsf3+0x91>
c002748c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002748f:	c1 e3 08             	shl    ebx,0x8
c0027492:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027498:	8d 57 01             	lea    edx,[edi+0x1]
c002749b:	80 e2 fe             	and    dl,0xfe
c002749e:	75 71                	jne    c0027511 <__divsf3+0x16d>
c00274a0:	85 c0                	test   eax,eax
c00274a2:	ba 00 00 00 00       	mov    edx,0x0
c00274a7:	74 2f                	je     c00274d8 <__divsf3+0x134>
c00274a9:	51                   	push   ecx
c00274aa:	51                   	push   ecx
c00274ab:	52                   	push   edx
c00274ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274af:	e8 f9 02 00 00       	call   c00277ad <__eqsf2>
c00274b4:	83 c4 10             	add    esp,0x10
c00274b7:	85 c0                	test   eax,eax
c00274b9:	0f 85 03 01 00 00    	jne    c00275c2 <__divsf3+0x21e>
c00274bf:	31 d2                	xor    edx,edx
c00274c1:	89 d3                	mov    ebx,edx
c00274c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274c6:	31 f8                	xor    eax,edi
c00274c8:	0f 89 f7 00 00 00    	jns    c00275c5 <__divsf3+0x221>
c00274ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00274d3:	e9 ed 00 00 00       	jmp    c00275c5 <__divsf3+0x221>
c00274d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00274db:	50                   	push   eax
c00274dc:	50                   	push   eax
c00274dd:	52                   	push   edx
c00274de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274e1:	e8 c7 02 00 00       	call   c00277ad <__eqsf2>
c00274e6:	83 c4 10             	add    esp,0x10
c00274e9:	85 c0                	test   eax,eax
c00274eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00274ee:	75 16                	jne    c0027506 <__divsf3+0x162>
c00274f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274f3:	31 fb                	xor    ebx,edi
c00274f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00274fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027501:	e9 bf 00 00 00       	jmp    c00275c5 <__divsf3+0x221>
c0027506:	8d 46 01             	lea    eax,[esi+0x1]
c0027509:	01 db                	add    ebx,ebx
c002750b:	78 04                	js     c0027511 <__divsf3+0x16d>
c002750d:	89 c6                	mov    esi,eax
c002750f:	eb f5                	jmp    c0027506 <__divsf3+0x162>
c0027511:	89 c8                	mov    eax,ecx
c0027513:	0d 00 00 00 80       	or     eax,0x80000000
c0027518:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002751e:	31 d2                	xor    edx,edx
c0027520:	39 d8                	cmp    eax,ebx
c0027522:	72 07                	jb     c002752b <__divsf3+0x187>
c0027524:	29 d8                	sub    eax,ebx
c0027526:	ba 01 00 00 00       	mov    edx,0x1
c002752b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027532:	01 d2                	add    edx,edx
c0027534:	89 c1                	mov    ecx,eax
c0027536:	01 c0                	add    eax,eax
c0027538:	85 c9                	test   ecx,ecx
c002753a:	78 04                	js     c0027540 <__divsf3+0x19c>
c002753c:	39 c3                	cmp    ebx,eax
c002753e:	77 05                	ja     c0027545 <__divsf3+0x1a1>
c0027540:	29 d8                	sub    eax,ebx
c0027542:	83 ca 01             	or     edx,0x1
c0027545:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027548:	75 e8                	jne    c0027532 <__divsf3+0x18e>
c002754a:	85 c0                	test   eax,eax
c002754c:	0f 95 c0             	setne  al
c002754f:	0f b6 c0             	movzx  eax,al
c0027552:	c1 e2 06             	shl    edx,0x6
c0027555:	09 c2                	or     edx,eax
c0027557:	78 03                	js     c002755c <__divsf3+0x1b8>
c0027559:	01 d2                	add    edx,edx
c002755b:	4e                   	dec    esi
c002755c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027562:	7f 22                	jg     c0027586 <__divsf3+0x1e2>
c0027564:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002756a:	85 f6                	test   esi,esi
c002756c:	7f 23                	jg     c0027591 <__divsf3+0x1ed>
c002756e:	83 fe e9             	cmp    esi,0xffffffe9
c0027571:	7c 1a                	jl     c002758d <__divsf3+0x1e9>
c0027573:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027579:	b9 01 00 00 00       	mov    ecx,0x1
c002757e:	29 f1                	sub    ecx,esi
c0027580:	d3 ea                	shr    edx,cl
c0027582:	31 f6                	xor    esi,esi
c0027584:	eb 0b                	jmp    c0027591 <__divsf3+0x1ed>
c0027586:	be ff 00 00 00       	mov    esi,0xff
c002758b:	eb 02                	jmp    c002758f <__divsf3+0x1eb>
c002758d:	31 f6                	xor    esi,esi
c002758f:	31 d2                	xor    edx,edx
c0027591:	89 d0                	mov    eax,edx
c0027593:	c1 e8 08             	shr    eax,0x8
c0027596:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027599:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002759f:	09 fe                	or     esi,edi
c00275a1:	c1 e6 17             	shl    esi,0x17
c00275a4:	09 c6                	or     esi,eax
c00275a6:	f6 c2 7f             	test   dl,0x7f
c00275a9:	0f 95 c1             	setne  cl
c00275ac:	09 c8                	or     eax,ecx
c00275ae:	83 e0 01             	and    eax,0x1
c00275b1:	c1 ea 07             	shr    edx,0x7
c00275b4:	21 c2                	and    edx,eax
c00275b6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00275b9:	eb 0a                	jmp    c00275c5 <__divsf3+0x221>
c00275bb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00275c0:	eb 03                	jmp    c00275c5 <__divsf3+0x221>
c00275c2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00275c5:	89 d8                	mov    eax,ebx
c00275c7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275ca:	5b                   	pop    ebx
c00275cb:	5e                   	pop    esi
c00275cc:	5f                   	pop    edi
c00275cd:	5d                   	pop    ebp
c00275ce:	c3                   	ret    

c00275cf <__floatsisf>:
c00275cf:	55                   	push   ebp
c00275d0:	89 e5                	mov    ebp,esp
c00275d2:	53                   	push   ebx
c00275d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00275d6:	85 d2                	test   edx,edx
c00275d8:	7e 2b                	jle    c0027605 <__floatsisf+0x36>
c00275da:	0f bd ca             	bsr    ecx,edx
c00275dd:	83 f1 1f             	xor    ecx,0x1f
c00275e0:	d3 e2                	shl    edx,cl
c00275e2:	89 d0                	mov    eax,edx
c00275e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275e9:	89 c3                	mov    ebx,eax
c00275eb:	c1 eb 08             	shr    ebx,0x8
c00275ee:	80 e2 7f             	and    dl,0x7f
c00275f1:	0f 95 c2             	setne  dl
c00275f4:	09 da                	or     edx,ebx
c00275f6:	83 e2 01             	and    edx,0x1
c00275f9:	c1 e8 07             	shr    eax,0x7
c00275fc:	21 c2                	and    edx,eax
c00275fe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027603:	eb 32                	jmp    c0027637 <__floatsisf+0x68>
c0027605:	b8 00 00 00 00       	mov    eax,0x0
c002760a:	74 34                	je     c0027640 <__floatsisf+0x71>
c002760c:	f7 da                	neg    edx
c002760e:	0f bd ca             	bsr    ecx,edx
c0027611:	83 f1 1f             	xor    ecx,0x1f
c0027614:	d3 e2                	shl    edx,cl
c0027616:	89 d0                	mov    eax,edx
c0027618:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002761d:	89 c3                	mov    ebx,eax
c002761f:	c1 eb 08             	shr    ebx,0x8
c0027622:	80 e2 7f             	and    dl,0x7f
c0027625:	0f 95 c2             	setne  dl
c0027628:	09 da                	or     edx,ebx
c002762a:	83 e2 01             	and    edx,0x1
c002762d:	c1 e8 07             	shr    eax,0x7
c0027630:	21 c2                	and    edx,eax
c0027632:	b8 9e 01 00 00       	mov    eax,0x19e
c0027637:	29 c8                	sub    eax,ecx
c0027639:	c1 e0 17             	shl    eax,0x17
c002763c:	09 d8                	or     eax,ebx
c002763e:	01 d0                	add    eax,edx
c0027640:	5b                   	pop    ebx
c0027641:	5d                   	pop    ebp
c0027642:	c3                   	ret    

c0027643 <__floatunsisf>:
c0027643:	55                   	push   ebp
c0027644:	89 e5                	mov    ebp,esp
c0027646:	53                   	push   ebx
c0027647:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002764a:	31 c0                	xor    eax,eax
c002764c:	85 d2                	test   edx,edx
c002764e:	74 32                	je     c0027682 <__floatunsisf+0x3f>
c0027650:	0f bd ca             	bsr    ecx,edx
c0027653:	83 f1 1f             	xor    ecx,0x1f
c0027656:	d3 e2                	shl    edx,cl
c0027658:	89 d0                	mov    eax,edx
c002765a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002765f:	89 c3                	mov    ebx,eax
c0027661:	c1 eb 08             	shr    ebx,0x8
c0027664:	80 e2 7f             	and    dl,0x7f
c0027667:	0f 95 c2             	setne  dl
c002766a:	09 da                	or     edx,ebx
c002766c:	83 e2 01             	and    edx,0x1
c002766f:	c1 e8 07             	shr    eax,0x7
c0027672:	21 c2                	and    edx,eax
c0027674:	b8 9e 00 00 00       	mov    eax,0x9e
c0027679:	29 c8                	sub    eax,ecx
c002767b:	c1 e0 17             	shl    eax,0x17
c002767e:	09 d8                	or     eax,ebx
c0027680:	01 d0                	add    eax,edx
c0027682:	5b                   	pop    ebx
c0027683:	5d                   	pop    ebp
c0027684:	c3                   	ret    

c0027685 <__fixsfsi>:
c0027685:	55                   	push   ebp
c0027686:	89 e5                	mov    ebp,esp
c0027688:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002768b:	89 d1                	mov    ecx,edx
c002768d:	c1 e1 08             	shl    ecx,0x8
c0027690:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027696:	c1 fa 17             	sar    edx,0x17
c0027699:	78 1c                	js     c00276b7 <__fixsfsi+0x32>
c002769b:	83 ea 7f             	sub    edx,0x7f
c002769e:	31 c0                	xor    eax,eax
c00276a0:	83 fa 1e             	cmp    edx,0x1e
c00276a3:	77 40                	ja     c00276e5 <__fixsfsi+0x60>
c00276a5:	89 c8                	mov    eax,ecx
c00276a7:	0d 00 00 00 80       	or     eax,0x80000000
c00276ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00276b1:	29 d1                	sub    ecx,edx
c00276b3:	d3 e8                	shr    eax,cl
c00276b5:	eb 2e                	jmp    c00276e5 <__fixsfsi+0x60>
c00276b7:	31 c0                	xor    eax,eax
c00276b9:	81 c2 81 00 00 00    	add    edx,0x81
c00276bf:	78 24                	js     c00276e5 <__fixsfsi+0x60>
c00276c1:	83 fa 1e             	cmp    edx,0x1e
c00276c4:	7e 09                	jle    c00276cf <__fixsfsi+0x4a>
c00276c6:	83 fa 1f             	cmp    edx,0x1f
c00276c9:	75 18                	jne    c00276e3 <__fixsfsi+0x5e>
c00276cb:	85 c9                	test   ecx,ecx
c00276cd:	75 14                	jne    c00276e3 <__fixsfsi+0x5e>
c00276cf:	89 c8                	mov    eax,ecx
c00276d1:	0d 00 00 00 80       	or     eax,0x80000000
c00276d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00276db:	29 d1                	sub    ecx,edx
c00276dd:	d3 e8                	shr    eax,cl
c00276df:	f7 d8                	neg    eax
c00276e1:	eb 02                	jmp    c00276e5 <__fixsfsi+0x60>
c00276e3:	31 c0                	xor    eax,eax
c00276e5:	5d                   	pop    ebp
c00276e6:	c3                   	ret    

c00276e7 <__fixunssfsi>:
c00276e7:	55                   	push   ebp
c00276e8:	89 e5                	mov    ebp,esp
c00276ea:	53                   	push   ebx
c00276eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00276ee:	89 d3                	mov    ebx,edx
c00276f0:	c1 fb 17             	sar    ebx,0x17
c00276f3:	83 eb 7f             	sub    ebx,0x7f
c00276f6:	31 c0                	xor    eax,eax
c00276f8:	83 fb 1f             	cmp    ebx,0x1f
c00276fb:	77 18                	ja     c0027715 <__fixunssfsi+0x2e>
c00276fd:	89 d0                	mov    eax,edx
c00276ff:	c1 e0 08             	shl    eax,0x8
c0027702:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027707:	0d 00 00 00 80       	or     eax,0x80000000
c002770c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027711:	29 d9                	sub    ecx,ebx
c0027713:	d3 e8                	shr    eax,cl
c0027715:	5b                   	pop    ebx
c0027716:	5d                   	pop    ebp
c0027717:	c3                   	ret    

c0027718 <__cmpsf2>:
c0027718:	55                   	push   ebp
c0027719:	89 e5                	mov    ebp,esp
c002771b:	57                   	push   edi
c002771c:	56                   	push   esi
c002771d:	53                   	push   ebx
c002771e:	83 ec 24             	sub    esp,0x24
c0027721:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027724:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027727:	e8 4f 10 00 00       	call   c002877b <__truncdfsf2>
c002772c:	5a                   	pop    edx
c002772d:	59                   	pop    ecx
c002772e:	89 c3                	mov    ebx,eax
c0027730:	c1 e8 17             	shr    eax,0x17
c0027733:	0f b6 f0             	movzx  esi,al
c0027736:	89 d8                	mov    eax,ebx
c0027738:	c1 e8 1f             	shr    eax,0x1f
c002773b:	31 c6                	xor    esi,eax
c002773d:	c1 e3 08             	shl    ebx,0x8
c0027740:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027743:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027746:	e8 30 10 00 00       	call   c002877b <__truncdfsf2>
c002774b:	83 c4 10             	add    esp,0x10
c002774e:	89 c1                	mov    ecx,eax
c0027750:	c1 e9 17             	shr    ecx,0x17
c0027753:	0f b6 c9             	movzx  ecx,cl
c0027756:	89 c7                	mov    edi,eax
c0027758:	c1 ef 1f             	shr    edi,0x1f
c002775b:	89 ca                	mov    edx,ecx
c002775d:	31 fa                	xor    edx,edi
c002775f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027762:	c1 e0 08             	shl    eax,0x8
c0027765:	89 c2                	mov    edx,eax
c0027767:	89 d8                	mov    eax,ebx
c0027769:	09 d0                	or     eax,edx
c002776b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027770:	09 f0                	or     eax,esi
c0027772:	75 08                	jne    c002777c <__cmpsf2+0x64>
c0027774:	31 c0                	xor    eax,eax
c0027776:	39 f9                	cmp    ecx,edi
c0027778:	75 0c                	jne    c0027786 <__cmpsf2+0x6e>
c002777a:	eb 29                	jmp    c00277a5 <__cmpsf2+0x8d>
c002777c:	b8 01 00 00 00       	mov    eax,0x1
c0027781:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027784:	7f 1f                	jg     c00277a5 <__cmpsf2+0x8d>
c0027786:	83 c8 ff             	or     eax,0xffffffff
c0027789:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002778c:	7c 17                	jl     c00277a5 <__cmpsf2+0x8d>
c002778e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027794:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002779a:	b8 01 00 00 00       	mov    eax,0x1
c002779f:	39 d3                	cmp    ebx,edx
c00277a1:	77 02                	ja     c00277a5 <__cmpsf2+0x8d>
c00277a3:	19 c0                	sbb    eax,eax
c00277a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00277a8:	5b                   	pop    ebx
c00277a9:	5e                   	pop    esi
c00277aa:	5f                   	pop    edi
c00277ab:	5d                   	pop    ebp
c00277ac:	c3                   	ret    

c00277ad <__eqsf2>:
c00277ad:	55                   	push   ebp
c00277ae:	89 e5                	mov    ebp,esp
c00277b0:	83 ec 24             	sub    esp,0x24
c00277b3:	6a 01                	push   0x1
c00277b5:	83 ec 0c             	sub    esp,0xc
c00277b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277bb:	e8 df 10 00 00       	call   c002889f <__extendsfdf2>
c00277c0:	83 c4 10             	add    esp,0x10
c00277c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00277c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00277c9:	52                   	push   edx
c00277ca:	50                   	push   eax
c00277cb:	50                   	push   eax
c00277cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00277cf:	e8 cb 10 00 00       	call   c002889f <__extendsfdf2>
c00277d4:	59                   	pop    ecx
c00277d5:	59                   	pop    ecx
c00277d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00277d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00277dc:	52                   	push   edx
c00277dd:	50                   	push   eax
c00277de:	e8 35 ff ff ff       	call   c0027718 <__cmpsf2>
c00277e3:	83 c4 20             	add    esp,0x20
c00277e6:	c9                   	leave  
c00277e7:	c3                   	ret    

c00277e8 <__nesf2>:
c00277e8:	eb c3                	jmp    c00277ad <__eqsf2>

c00277ea <__gtsf2>:
c00277ea:	55                   	push   ebp
c00277eb:	89 e5                	mov    ebp,esp
c00277ed:	83 ec 24             	sub    esp,0x24
c00277f0:	6a ff                	push   0xffffffff
c00277f2:	83 ec 0c             	sub    esp,0xc
c00277f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277f8:	e8 a2 10 00 00       	call   c002889f <__extendsfdf2>
c00277fd:	83 c4 10             	add    esp,0x10
c0027800:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027803:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027806:	52                   	push   edx
c0027807:	50                   	push   eax
c0027808:	50                   	push   eax
c0027809:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002780c:	e8 8e 10 00 00       	call   c002889f <__extendsfdf2>
c0027811:	59                   	pop    ecx
c0027812:	59                   	pop    ecx
c0027813:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027816:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027819:	52                   	push   edx
c002781a:	50                   	push   eax
c002781b:	e8 f8 fe ff ff       	call   c0027718 <__cmpsf2>
c0027820:	83 c4 20             	add    esp,0x20
c0027823:	c9                   	leave  
c0027824:	c3                   	ret    

c0027825 <__gesf2>:
c0027825:	eb c3                	jmp    c00277ea <__gtsf2>

c0027827 <__ltsf2>:
c0027827:	eb 84                	jmp    c00277ad <__eqsf2>

c0027829 <__lesf2>:
c0027829:	eb 82                	jmp    c00277ad <__eqsf2>

c002782b <__adddf3>:
c002782b:	55                   	push   ebp
c002782c:	89 e5                	mov    ebp,esp
c002782e:	57                   	push   edi
c002782f:	56                   	push   esi
c0027830:	53                   	push   ebx
c0027831:	83 ec 24             	sub    esp,0x24
c0027834:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027837:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002783a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002783d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027840:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027843:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027846:	89 c8                	mov    eax,ecx
c0027848:	89 ce                	mov    esi,ecx
c002784a:	c1 fe 14             	sar    esi,0x14
c002784d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027850:	89 fb                	mov    ebx,edi
c0027852:	89 fa                	mov    edx,edi
c0027854:	c1 e2 0b             	shl    edx,0xb
c0027857:	c1 e0 0b             	shl    eax,0xb
c002785a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002785f:	c1 eb 15             	shr    ebx,0x15
c0027862:	09 d8                	or     eax,ebx
c0027864:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027867:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002786a:	c1 fe 14             	sar    esi,0x14
c002786d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027870:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027873:	89 f3                	mov    ebx,esi
c0027875:	c1 e3 0b             	shl    ebx,0xb
c0027878:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002787b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002787e:	c1 e3 0b             	shl    ebx,0xb
c0027881:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027887:	c1 ee 15             	shr    esi,0x15
c002788a:	09 f3                	or     ebx,esi
c002788c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002788f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027892:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027895:	0f 88 5f 02 00 00    	js     c0027afa <__adddf3+0x2cf>
c002789b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002789e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00278a1:	85 db                	test   ebx,ebx
c00278a3:	0f 8e c7 00 00 00    	jle    c0027970 <__adddf3+0x145>
c00278a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00278b0:	75 1a                	jne    c00278cc <__adddf3+0xa1>
c00278b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00278b8:	0f 84 b2 05 00 00    	je     c0027e70 <__adddf3+0x645>
c00278be:	4b                   	dec    ebx
c00278bf:	75 23                	jne    c00278e4 <__adddf3+0xb9>
c00278c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278c7:	e9 99 00 00 00       	jmp    c0027965 <__adddf3+0x13a>
c00278cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278cf:	f7 d6                	not    esi
c00278d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278d7:	0f 84 93 05 00 00    	je     c0027e70 <__adddf3+0x645>
c00278dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278e4:	83 fb 1f             	cmp    ebx,0x1f
c00278e7:	7e 42                	jle    c002792b <__adddf3+0x100>
c00278e9:	83 fb 3f             	cmp    ebx,0x3f
c00278ec:	0f 8f 7e 05 00 00    	jg     c0027e70 <__adddf3+0x645>
c00278f2:	83 e3 1f             	and    ebx,0x1f
c00278f5:	89 d9                	mov    ecx,ebx
c00278f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278fa:	d3 ef                	shr    edi,cl
c00278fc:	31 db                	xor    ebx,ebx
c00278fe:	85 c9                	test   ecx,ecx
c0027900:	74 15                	je     c0027917 <__adddf3+0xec>
c0027902:	be 20 00 00 00       	mov    esi,0x20
c0027907:	29 ce                	sub    esi,ecx
c0027909:	89 f1                	mov    ecx,esi
c002790b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002790e:	d3 e6                	shl    esi,cl
c0027910:	31 db                	xor    ebx,ebx
c0027912:	85 f6                	test   esi,esi
c0027914:	0f 95 c3             	setne  bl
c0027917:	31 c9                	xor    ecx,ecx
c0027919:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002791d:	0f 95 c1             	setne  cl
c0027920:	09 cf                	or     edi,ecx
c0027922:	09 fb                	or     ebx,edi
c0027924:	01 da                	add    edx,ebx
c0027926:	83 d0 00             	adc    eax,0x0
c0027929:	eb 3a                	jmp    c0027965 <__adddf3+0x13a>
c002792b:	bf 20 00 00 00       	mov    edi,0x20
c0027930:	29 df                	sub    edi,ebx
c0027932:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027935:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027938:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002793b:	d3 e6                	shl    esi,cl
c002793d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027940:	88 d9                	mov    cl,bl
c0027942:	d3 ef                	shr    edi,cl
c0027944:	09 fe                	or     esi,edi
c0027946:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027949:	88 d9                	mov    cl,bl
c002794b:	d3 ef                	shr    edi,cl
c002794d:	89 fb                	mov    ebx,edi
c002794f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027952:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027955:	d3 e7                	shl    edi,cl
c0027957:	85 ff                	test   edi,edi
c0027959:	0f 95 c1             	setne  cl
c002795c:	0f b6 c9             	movzx  ecx,cl
c002795f:	09 ce                	or     esi,ecx
c0027961:	01 f2                	add    edx,esi
c0027963:	11 d8                	adc    eax,ebx
c0027965:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027968:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002796b:	e9 52 01 00 00       	jmp    c0027ac2 <__adddf3+0x297>
c0027970:	0f 84 d5 00 00 00    	je     c0027a4b <__adddf3+0x220>
c0027976:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027979:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002797c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002797f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027982:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027989:	75 20                	jne    c00279ab <__adddf3+0x180>
c002798b:	89 d6                	mov    esi,edx
c002798d:	09 c6                	or     esi,eax
c002798f:	0f 84 db 04 00 00    	je     c0027e70 <__adddf3+0x645>
c0027995:	4b                   	dec    ebx
c0027996:	75 29                	jne    c00279c1 <__adddf3+0x196>
c0027998:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002799b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002799e:	01 d1                	add    ecx,edx
c00279a0:	11 c6                	adc    esi,eax
c00279a2:	89 f0                	mov    eax,esi
c00279a4:	89 ca                	mov    edx,ecx
c00279a6:	e9 17 01 00 00       	jmp    c0027ac2 <__adddf3+0x297>
c00279ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279ae:	f7 d6                	not    esi
c00279b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279b6:	0f 84 b4 04 00 00    	je     c0027e70 <__adddf3+0x645>
c00279bc:	0d 00 00 00 80       	or     eax,0x80000000
c00279c1:	83 fb 1f             	cmp    ebx,0x1f
c00279c4:	7e 48                	jle    c0027a0e <__adddf3+0x1e3>
c00279c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279cc:	83 fb 3f             	cmp    ebx,0x3f
c00279cf:	0f 8f 9b 04 00 00    	jg     c0027e70 <__adddf3+0x645>
c00279d5:	83 e3 1f             	and    ebx,0x1f
c00279d8:	89 d9                	mov    ecx,ebx
c00279da:	89 c7                	mov    edi,eax
c00279dc:	d3 ef                	shr    edi,cl
c00279de:	31 db                	xor    ebx,ebx
c00279e0:	85 c9                	test   ecx,ecx
c00279e2:	74 12                	je     c00279f6 <__adddf3+0x1cb>
c00279e4:	be 20 00 00 00       	mov    esi,0x20
c00279e9:	29 ce                	sub    esi,ecx
c00279eb:	89 f1                	mov    ecx,esi
c00279ed:	d3 e0                	shl    eax,cl
c00279ef:	31 db                	xor    ebx,ebx
c00279f1:	85 c0                	test   eax,eax
c00279f3:	0f 95 c3             	setne  bl
c00279f6:	31 c0                	xor    eax,eax
c00279f8:	85 d2                	test   edx,edx
c00279fa:	0f 95 c0             	setne  al
c00279fd:	09 c7                	or     edi,eax
c00279ff:	09 fb                	or     ebx,edi
c0027a01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a07:	01 da                	add    edx,ebx
c0027a09:	83 d6 00             	adc    esi,0x0
c0027a0c:	eb 39                	jmp    c0027a47 <__adddf3+0x21c>
c0027a0e:	be 20 00 00 00       	mov    esi,0x20
c0027a13:	29 de                	sub    esi,ebx
c0027a15:	89 c7                	mov    edi,eax
c0027a17:	89 f1                	mov    ecx,esi
c0027a19:	d3 e7                	shl    edi,cl
c0027a1b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a1e:	89 d7                	mov    edi,edx
c0027a20:	88 d9                	mov    cl,bl
c0027a22:	d3 ef                	shr    edi,cl
c0027a24:	89 f9                	mov    ecx,edi
c0027a26:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a29:	09 cf                	or     edi,ecx
c0027a2b:	88 d9                	mov    cl,bl
c0027a2d:	d3 e8                	shr    eax,cl
c0027a2f:	89 f1                	mov    ecx,esi
c0027a31:	d3 e2                	shl    edx,cl
c0027a33:	85 d2                	test   edx,edx
c0027a35:	0f 95 c2             	setne  dl
c0027a38:	0f b6 d2             	movzx  edx,dl
c0027a3b:	09 d7                	or     edi,edx
c0027a3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a40:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a43:	01 fa                	add    edx,edi
c0027a45:	11 c6                	adc    esi,eax
c0027a47:	89 f0                	mov    eax,esi
c0027a49:	eb 77                	jmp    c0027ac2 <__adddf3+0x297>
c0027a4b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a4e:	46                   	inc    esi
c0027a4f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027a52:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027a58:	75 41                	jne    c0027a9b <__adddf3+0x270>
c0027a5a:	89 d3                	mov    ebx,edx
c0027a5c:	09 c3                	or     ebx,eax
c0027a5e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027a65:	75 27                	jne    c0027a8e <__adddf3+0x263>
c0027a67:	85 db                	test   ebx,ebx
c0027a69:	0f 84 fb 03 00 00    	je     c0027e6a <__adddf3+0x63f>
c0027a6f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a72:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027a75:	0f 84 f5 03 00 00    	je     c0027e70 <__adddf3+0x645>
c0027a7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a81:	85 c0                	test   eax,eax
c0027a83:	0f 89 91 03 00 00    	jns    c0027e1a <__adddf3+0x5ef>
c0027a89:	e9 85 03 00 00       	jmp    c0027e13 <__adddf3+0x5e8>
c0027a8e:	85 db                	test   ebx,ebx
c0027a90:	0f 85 da 03 00 00    	jne    c0027e70 <__adddf3+0x645>
c0027a96:	e9 cf 03 00 00       	jmp    c0027e6a <__adddf3+0x63f>
c0027a9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027aa1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027aa4:	f7 d1                	not    ecx
c0027aa6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027aac:	0f 84 70 03 00 00    	je     c0027e22 <__adddf3+0x5f7>
c0027ab2:	d1 ea                	shr    edx,1
c0027ab4:	89 c1                	mov    ecx,eax
c0027ab6:	c1 e1 1f             	shl    ecx,0x1f
c0027ab9:	09 ca                	or     edx,ecx
c0027abb:	d1 e8                	shr    eax,1
c0027abd:	e9 6f 03 00 00       	jmp    c0027e31 <__adddf3+0x606>
c0027ac2:	85 c0                	test   eax,eax
c0027ac4:	0f 89 67 03 00 00    	jns    c0027e31 <__adddf3+0x606>
c0027aca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027acd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ad0:	f7 d1                	not    ecx
c0027ad2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027ad8:	0f 84 44 03 00 00    	je     c0027e22 <__adddf3+0x5f7>
c0027ade:	89 d1                	mov    ecx,edx
c0027ae0:	d1 e9                	shr    ecx,1
c0027ae2:	83 e2 01             	and    edx,0x1
c0027ae5:	09 ca                	or     edx,ecx
c0027ae7:	89 c1                	mov    ecx,eax
c0027ae9:	c1 e1 1f             	shl    ecx,0x1f
c0027aec:	09 ca                	or     edx,ecx
c0027aee:	d1 e8                	shr    eax,1
c0027af0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027af5:	e9 37 03 00 00       	jmp    c0027e31 <__adddf3+0x606>
c0027afa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027afd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b03:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027b06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b0f:	29 de                	sub    esi,ebx
c0027b11:	85 f6                	test   esi,esi
c0027b13:	0f 8e bd 00 00 00    	jle    c0027bd6 <__adddf3+0x3ab>
c0027b19:	85 db                	test   ebx,ebx
c0027b1b:	75 17                	jne    c0027b34 <__adddf3+0x309>
c0027b1d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b20:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b23:	0f 84 47 03 00 00    	je     c0027e70 <__adddf3+0x645>
c0027b29:	4e                   	dec    esi
c0027b2a:	75 20                	jne    c0027b4c <__adddf3+0x321>
c0027b2c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b2f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b32:	eb 5b                	jmp    c0027b8f <__adddf3+0x364>
c0027b34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b37:	f7 d3                	not    ebx
c0027b39:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b3f:	0f 84 2b 03 00 00    	je     c0027e70 <__adddf3+0x645>
c0027b45:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027b4c:	83 fe 1f             	cmp    esi,0x1f
c0027b4f:	7e 49                	jle    c0027b9a <__adddf3+0x36f>
c0027b51:	83 fe 3f             	cmp    esi,0x3f
c0027b54:	0f 8f 16 03 00 00    	jg     c0027e70 <__adddf3+0x645>
c0027b5a:	83 e6 1f             	and    esi,0x1f
c0027b5d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027b60:	89 f1                	mov    ecx,esi
c0027b62:	d3 ef                	shr    edi,cl
c0027b64:	31 db                	xor    ebx,ebx
c0027b66:	85 f6                	test   esi,esi
c0027b68:	74 13                	je     c0027b7d <__adddf3+0x352>
c0027b6a:	b9 20 00 00 00       	mov    ecx,0x20
c0027b6f:	29 f1                	sub    ecx,esi
c0027b71:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b74:	d3 e6                	shl    esi,cl
c0027b76:	31 db                	xor    ebx,ebx
c0027b78:	85 f6                	test   esi,esi
c0027b7a:	0f 95 c3             	setne  bl
c0027b7d:	31 c9                	xor    ecx,ecx
c0027b7f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b83:	0f 95 c1             	setne  cl
c0027b86:	09 cf                	or     edi,ecx
c0027b88:	09 fb                	or     ebx,edi
c0027b8a:	29 da                	sub    edx,ebx
c0027b8c:	83 d8 00             	sbb    eax,0x0
c0027b8f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b92:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b95:	e9 aa 01 00 00       	jmp    c0027d44 <__adddf3+0x519>
c0027b9a:	bf 20 00 00 00       	mov    edi,0x20
c0027b9f:	29 f7                	sub    edi,esi
c0027ba1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ba4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ba7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027baa:	d3 e3                	shl    ebx,cl
c0027bac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027baf:	89 f1                	mov    ecx,esi
c0027bb1:	d3 ef                	shr    edi,cl
c0027bb3:	09 fb                	or     ebx,edi
c0027bb5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027bb8:	89 f1                	mov    ecx,esi
c0027bba:	d3 ef                	shr    edi,cl
c0027bbc:	89 fe                	mov    esi,edi
c0027bbe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bc1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027bc4:	d3 e7                	shl    edi,cl
c0027bc6:	85 ff                	test   edi,edi
c0027bc8:	0f 95 c1             	setne  cl
c0027bcb:	0f b6 c9             	movzx  ecx,cl
c0027bce:	09 cb                	or     ebx,ecx
c0027bd0:	29 da                	sub    edx,ebx
c0027bd2:	19 f0                	sbb    eax,esi
c0027bd4:	eb b9                	jmp    c0027b8f <__adddf3+0x364>
c0027bd6:	0f 84 cd 00 00 00    	je     c0027ca9 <__adddf3+0x47e>
c0027bdc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027bdf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027be2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027be5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027be9:	75 1b                	jne    c0027c06 <__adddf3+0x3db>
c0027beb:	89 d6                	mov    esi,edx
c0027bed:	09 c6                	or     esi,eax
c0027bef:	0f 84 7b 02 00 00    	je     c0027e70 <__adddf3+0x645>
c0027bf5:	4b                   	dec    ebx
c0027bf6:	75 24                	jne    c0027c1c <__adddf3+0x3f1>
c0027bf8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bfb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bfe:	29 d1                	sub    ecx,edx
c0027c00:	19 c6                	sbb    esi,eax
c0027c02:	89 ca                	mov    edx,ecx
c0027c04:	eb 61                	jmp    c0027c67 <__adddf3+0x43c>
c0027c06:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c09:	f7 d6                	not    esi
c0027c0b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c11:	0f 84 59 02 00 00    	je     c0027e70 <__adddf3+0x645>
c0027c17:	0d 00 00 00 80       	or     eax,0x80000000
c0027c1c:	83 fb 1f             	cmp    ebx,0x1f
c0027c1f:	7e 4d                	jle    c0027c6e <__adddf3+0x443>
c0027c21:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c24:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c27:	83 fb 3f             	cmp    ebx,0x3f
c0027c2a:	0f 8f 40 02 00 00    	jg     c0027e70 <__adddf3+0x645>
c0027c30:	83 e3 1f             	and    ebx,0x1f
c0027c33:	89 d9                	mov    ecx,ebx
c0027c35:	89 c7                	mov    edi,eax
c0027c37:	d3 ef                	shr    edi,cl
c0027c39:	31 db                	xor    ebx,ebx
c0027c3b:	85 c9                	test   ecx,ecx
c0027c3d:	74 12                	je     c0027c51 <__adddf3+0x426>
c0027c3f:	be 20 00 00 00       	mov    esi,0x20
c0027c44:	29 ce                	sub    esi,ecx
c0027c46:	89 f1                	mov    ecx,esi
c0027c48:	d3 e0                	shl    eax,cl
c0027c4a:	31 db                	xor    ebx,ebx
c0027c4c:	85 c0                	test   eax,eax
c0027c4e:	0f 95 c3             	setne  bl
c0027c51:	31 c0                	xor    eax,eax
c0027c53:	85 d2                	test   edx,edx
c0027c55:	0f 95 c0             	setne  al
c0027c58:	09 c7                	or     edi,eax
c0027c5a:	09 fb                	or     ebx,edi
c0027c5c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c5f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c62:	29 da                	sub    edx,ebx
c0027c64:	83 de 00             	sbb    esi,0x0
c0027c67:	89 f0                	mov    eax,esi
c0027c69:	e9 d6 00 00 00       	jmp    c0027d44 <__adddf3+0x519>
c0027c6e:	be 20 00 00 00       	mov    esi,0x20
c0027c73:	29 de                	sub    esi,ebx
c0027c75:	89 c7                	mov    edi,eax
c0027c77:	89 f1                	mov    ecx,esi
c0027c79:	d3 e7                	shl    edi,cl
c0027c7b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027c7e:	89 d7                	mov    edi,edx
c0027c80:	88 d9                	mov    cl,bl
c0027c82:	d3 ef                	shr    edi,cl
c0027c84:	89 f9                	mov    ecx,edi
c0027c86:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c89:	09 cf                	or     edi,ecx
c0027c8b:	88 d9                	mov    cl,bl
c0027c8d:	d3 e8                	shr    eax,cl
c0027c8f:	89 f1                	mov    ecx,esi
c0027c91:	d3 e2                	shl    edx,cl
c0027c93:	85 d2                	test   edx,edx
c0027c95:	0f 95 c2             	setne  dl
c0027c98:	0f b6 d2             	movzx  edx,dl
c0027c9b:	09 d7                	or     edi,edx
c0027c9d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ca0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ca3:	29 fa                	sub    edx,edi
c0027ca5:	19 c6                	sbb    esi,eax
c0027ca7:	eb be                	jmp    c0027c67 <__adddf3+0x43c>
c0027ca9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027cac:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027caf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027cb5:	75 6a                	jne    c0027d21 <__adddf3+0x4f6>
c0027cb7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cbb:	75 58                	jne    c0027d15 <__adddf3+0x4ea>
c0027cbd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027cc0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027cc3:	89 d6                	mov    esi,edx
c0027cc5:	09 c6                	or     esi,eax
c0027cc7:	75 17                	jne    c0027ce0 <__adddf3+0x4b5>
c0027cc9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ccc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ccf:	85 db                	test   ebx,ebx
c0027cd1:	0f 85 99 01 00 00    	jne    c0027e70 <__adddf3+0x645>
c0027cd7:	31 ff                	xor    edi,edi
c0027cd9:	31 c9                	xor    ecx,ecx
c0027cdb:	e9 90 01 00 00       	jmp    c0027e70 <__adddf3+0x645>
c0027ce0:	85 db                	test   ebx,ebx
c0027ce2:	0f 84 88 01 00 00    	je     c0027e70 <__adddf3+0x645>
c0027ce8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ceb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027cee:	85 c0                	test   eax,eax
c0027cf0:	79 10                	jns    c0027d02 <__adddf3+0x4d7>
c0027cf2:	31 c9                	xor    ecx,ecx
c0027cf4:	f7 da                	neg    edx
c0027cf6:	0f 95 c1             	setne  cl
c0027cf9:	01 c8                	add    eax,ecx
c0027cfb:	f7 d8                	neg    eax
c0027cfd:	e9 2f 01 00 00       	jmp    c0027e31 <__adddf3+0x606>
c0027d02:	31 ff                	xor    edi,edi
c0027d04:	31 c9                	xor    ecx,ecx
c0027d06:	89 c3                	mov    ebx,eax
c0027d08:	09 d3                	or     ebx,edx
c0027d0a:	0f 84 60 01 00 00    	je     c0027e70 <__adddf3+0x645>
c0027d10:	e9 05 01 00 00       	jmp    c0027e1a <__adddf3+0x5ef>
c0027d15:	31 ff                	xor    edi,edi
c0027d17:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d1c:	e9 4f 01 00 00       	jmp    c0027e70 <__adddf3+0x645>
c0027d21:	89 c1                	mov    ecx,eax
c0027d23:	89 d0                	mov    eax,edx
c0027d25:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027d28:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027d2b:	89 ca                	mov    edx,ecx
c0027d2d:	85 c9                	test   ecx,ecx
c0027d2f:	79 2c                	jns    c0027d5d <__adddf3+0x532>
c0027d31:	31 c9                	xor    ecx,ecx
c0027d33:	f7 d8                	neg    eax
c0027d35:	0f 95 c1             	setne  cl
c0027d38:	01 ca                	add    edx,ecx
c0027d3a:	f7 da                	neg    edx
c0027d3c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d3f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027d42:	eb 19                	jmp    c0027d5d <__adddf3+0x532>
c0027d44:	85 c0                	test   eax,eax
c0027d46:	0f 89 e5 00 00 00    	jns    c0027e31 <__adddf3+0x606>
c0027d4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d51:	89 c1                	mov    ecx,eax
c0027d53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d56:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d59:	89 d0                	mov    eax,edx
c0027d5b:	89 ca                	mov    edx,ecx
c0027d5d:	85 d2                	test   edx,edx
c0027d5f:	74 59                	je     c0027dba <__adddf3+0x58f>
c0027d61:	0f bd da             	bsr    ebx,edx
c0027d64:	83 f3 1f             	xor    ebx,0x1f
c0027d67:	88 d9                	mov    cl,bl
c0027d69:	d3 e2                	shl    edx,cl
c0027d6b:	bf 20 00 00 00       	mov    edi,0x20
c0027d70:	89 f9                	mov    ecx,edi
c0027d72:	29 d9                	sub    ecx,ebx
c0027d74:	89 c6                	mov    esi,eax
c0027d76:	d3 ee                	shr    esi,cl
c0027d78:	09 d6                	or     esi,edx
c0027d7a:	88 d9                	mov    cl,bl
c0027d7c:	d3 e0                	shl    eax,cl
c0027d7e:	89 c2                	mov    edx,eax
c0027d80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d83:	25 ff 07 00 00       	and    eax,0x7ff
c0027d88:	39 d8                	cmp    eax,ebx
c0027d8a:	7f 22                	jg     c0027dae <__adddf3+0x583>
c0027d8c:	29 c3                	sub    ebx,eax
c0027d8e:	43                   	inc    ebx
c0027d8f:	88 d9                	mov    cl,bl
c0027d91:	d3 ea                	shr    edx,cl
c0027d93:	29 df                	sub    edi,ebx
c0027d95:	89 f9                	mov    ecx,edi
c0027d97:	89 f0                	mov    eax,esi
c0027d99:	d3 e0                	shl    eax,cl
c0027d9b:	09 c2                	or     edx,eax
c0027d9d:	89 f0                	mov    eax,esi
c0027d9f:	88 d9                	mov    cl,bl
c0027da1:	d3 e8                	shr    eax,cl
c0027da3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027da6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027dac:	eb 6f                	jmp    c0027e1d <__adddf3+0x5f2>
c0027dae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027db1:	29 d8                	sub    eax,ebx
c0027db3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027db6:	89 f0                	mov    eax,esi
c0027db8:	eb 59                	jmp    c0027e13 <__adddf3+0x5e8>
c0027dba:	85 c0                	test   eax,eax
c0027dbc:	74 6a                	je     c0027e28 <__adddf3+0x5fd>
c0027dbe:	0f bd c8             	bsr    ecx,eax
c0027dc1:	83 f1 1f             	xor    ecx,0x1f
c0027dc4:	d3 e0                	shl    eax,cl
c0027dc6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dc9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027dcf:	83 c1 20             	add    ecx,0x20
c0027dd2:	39 cb                	cmp    ebx,ecx
c0027dd4:	7f 35                	jg     c0027e0b <__adddf3+0x5e0>
c0027dd6:	29 d9                	sub    ecx,ebx
c0027dd8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ddb:	83 fe 1f             	cmp    esi,0x1f
c0027dde:	7e 09                	jle    c0027de9 <__adddf3+0x5be>
c0027de0:	83 e9 1f             	sub    ecx,0x1f
c0027de3:	d3 e8                	shr    eax,cl
c0027de5:	89 c3                	mov    ebx,eax
c0027de7:	eb 11                	jmp    c0027dfa <__adddf3+0x5cf>
c0027de9:	b9 20 00 00 00       	mov    ecx,0x20
c0027dee:	29 f1                	sub    ecx,esi
c0027df0:	89 c3                	mov    ebx,eax
c0027df2:	d3 e3                	shl    ebx,cl
c0027df4:	89 f1                	mov    ecx,esi
c0027df6:	d3 e8                	shr    eax,cl
c0027df8:	89 c2                	mov    edx,eax
c0027dfa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dfd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e02:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e05:	89 d0                	mov    eax,edx
c0027e07:	89 da                	mov    edx,ebx
c0027e09:	eb 26                	jmp    c0027e31 <__adddf3+0x606>
c0027e0b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e0e:	29 cf                	sub    edi,ecx
c0027e10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e13:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e18:	eb 17                	jmp    c0027e31 <__adddf3+0x606>
c0027e1a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e1d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e20:	eb 0f                	jmp    c0027e31 <__adddf3+0x606>
c0027e22:	31 d2                	xor    edx,edx
c0027e24:	31 c0                	xor    eax,eax
c0027e26:	eb 09                	jmp    c0027e31 <__adddf3+0x606>
c0027e28:	89 c2                	mov    edx,eax
c0027e2a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027e31:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e34:	c1 e1 14             	shl    ecx,0x14
c0027e37:	89 c3                	mov    ebx,eax
c0027e39:	c1 eb 0b             	shr    ebx,0xb
c0027e3c:	09 d9                	or     ecx,ebx
c0027e3e:	89 d3                	mov    ebx,edx
c0027e40:	c1 eb 0b             	shr    ebx,0xb
c0027e43:	c1 e0 15             	shl    eax,0x15
c0027e46:	09 d8                	or     eax,ebx
c0027e48:	89 c7                	mov    edi,eax
c0027e4a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027e50:	0f 95 c0             	setne  al
c0027e53:	89 c6                	mov    esi,eax
c0027e55:	09 f3                	or     ebx,esi
c0027e57:	83 e3 01             	and    ebx,0x1
c0027e5a:	c1 ea 0a             	shr    edx,0xa
c0027e5d:	21 da                	and    edx,ebx
c0027e5f:	89 f8                	mov    eax,edi
c0027e61:	01 d0                	add    eax,edx
c0027e63:	83 d1 00             	adc    ecx,0x0
c0027e66:	89 c7                	mov    edi,eax
c0027e68:	eb 06                	jmp    c0027e70 <__adddf3+0x645>
c0027e6a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e6d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e70:	89 f8                	mov    eax,edi
c0027e72:	89 ca                	mov    edx,ecx
c0027e74:	83 c4 24             	add    esp,0x24
c0027e77:	5b                   	pop    ebx
c0027e78:	5e                   	pop    esi
c0027e79:	5f                   	pop    edi
c0027e7a:	5d                   	pop    ebp
c0027e7b:	c3                   	ret    

c0027e7c <__subdf3>:
c0027e7c:	55                   	push   ebp
c0027e7d:	89 e5                	mov    ebp,esp
c0027e7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027e85:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e8b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027e8e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027e91:	5d                   	pop    ebp
c0027e92:	e9 94 f9 ff ff       	jmp    c002782b <__adddf3>

c0027e97 <__negdf2>:
c0027e97:	55                   	push   ebp
c0027e98:	89 e5                	mov    ebp,esp
c0027e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e9d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ea0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ea6:	5d                   	pop    ebp
c0027ea7:	c3                   	ret    

c0027ea8 <__muldf3>:
c0027ea8:	55                   	push   ebp
c0027ea9:	89 e5                	mov    ebp,esp
c0027eab:	57                   	push   edi
c0027eac:	56                   	push   esi
c0027ead:	53                   	push   ebx
c0027eae:	83 ec 24             	sub    esp,0x24
c0027eb1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027eb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027eb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027eba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ebd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027ec0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027ec3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ec6:	89 c8                	mov    eax,ecx
c0027ec8:	c1 f8 14             	sar    eax,0x14
c0027ecb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ece:	89 f8                	mov    eax,edi
c0027ed0:	89 fb                	mov    ebx,edi
c0027ed2:	c1 e3 0b             	shl    ebx,0xb
c0027ed5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ed8:	c1 e1 0b             	shl    ecx,0xb
c0027edb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ee1:	c1 e8 15             	shr    eax,0x15
c0027ee4:	09 c1                	or     ecx,eax
c0027ee6:	89 d6                	mov    esi,edx
c0027ee8:	89 d0                	mov    eax,edx
c0027eea:	c1 f8 14             	sar    eax,0x14
c0027eed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ef0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ef3:	89 c3                	mov    ebx,eax
c0027ef5:	c1 e3 0b             	shl    ebx,0xb
c0027ef8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027efb:	c1 e6 0b             	shl    esi,0xb
c0027efe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f04:	c1 e8 15             	shr    eax,0x15
c0027f07:	09 c6                	or     esi,eax
c0027f09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f11:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f17:	25 ff 07 00 00       	and    eax,0x7ff
c0027f1c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f22:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f25:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027f2c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f2f:	40                   	inc    eax
c0027f30:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f35:	0f 85 8d 00 00 00    	jne    c0027fc8 <__muldf3+0x120>
c0027f3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f3e:	09 c8                	or     eax,ecx
c0027f40:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027f44:	74 44                	je     c0027f8a <__muldf3+0xe2>
c0027f46:	85 c0                	test   eax,eax
c0027f48:	0f 85 31 02 00 00    	jne    c002817f <__muldf3+0x2d7>
c0027f4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f51:	40                   	inc    eax
c0027f52:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f57:	75 13                	jne    c0027f6c <__muldf3+0xc4>
c0027f59:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f5c:	09 f1                	or     ecx,esi
c0027f5e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027f62:	74 22                	je     c0027f86 <__muldf3+0xde>
c0027f64:	85 c9                	test   ecx,ecx
c0027f66:	0f 85 0d 02 00 00    	jne    c0028179 <__muldf3+0x2d1>
c0027f6c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027f70:	0f 89 09 02 00 00    	jns    c002817f <__muldf3+0x2d7>
c0027f76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f79:	05 00 00 00 80       	add    eax,0x80000000
c0027f7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f81:	e9 f9 01 00 00       	jmp    c002817f <__muldf3+0x2d7>
c0027f86:	85 c9                	test   ecx,ecx
c0027f88:	eb 2e                	jmp    c0027fb8 <__muldf3+0x110>
c0027f8a:	85 c0                	test   eax,eax
c0027f8c:	74 20                	je     c0027fae <__muldf3+0x106>
c0027f8e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027f91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f97:	c1 ef 1f             	shr    edi,0x1f
c0027f9a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027f9d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027fa0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027fa3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa6:	09 f9                	or     ecx,edi
c0027fa8:	78 1e                	js     c0027fc8 <__muldf3+0x120>
c0027faa:	89 c3                	mov    ebx,eax
c0027fac:	eb e0                	jmp    c0027f8e <__muldf3+0xe6>
c0027fae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fb1:	f7 d0                	not    eax
c0027fb3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027fb8:	75 b2                	jne    c0027f6c <__muldf3+0xc4>
c0027fba:	31 ff                	xor    edi,edi
c0027fbc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027fc3:	e9 b7 01 00 00       	jmp    c002817f <__muldf3+0x2d7>
c0027fc8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fcb:	40                   	inc    eax
c0027fcc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fd1:	75 57                	jne    c002802a <__muldf3+0x182>
c0027fd3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027fd6:	09 f0                	or     eax,esi
c0027fd8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027fdc:	74 23                	je     c0028001 <__muldf3+0x159>
c0027fde:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027fe2:	0f 89 91 01 00 00    	jns    c0028179 <__muldf3+0x2d1>
c0027fe8:	85 c0                	test   eax,eax
c0027fea:	0f 85 89 01 00 00    	jne    c0028179 <__muldf3+0x2d1>
c0027ff0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ff3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027ff9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ffc:	e9 7e 01 00 00       	jmp    c002817f <__muldf3+0x2d7>
c0028001:	85 c0                	test   eax,eax
c0028003:	75 0c                	jne    c0028011 <__muldf3+0x169>
c0028005:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028009:	0f 89 6a 01 00 00    	jns    c0028179 <__muldf3+0x2d1>
c002800f:	eb df                	jmp    c0027ff0 <__muldf3+0x148>
c0028011:	01 f6                	add    esi,esi
c0028013:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028016:	c1 ea 1f             	shr    edx,0x1f
c0028019:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002801c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002801f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028022:	09 d6                	or     esi,edx
c0028024:	78 04                	js     c002802a <__muldf3+0x182>
c0028026:	89 c3                	mov    ebx,eax
c0028028:	eb e7                	jmp    c0028011 <__muldf3+0x169>
c002802a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028030:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028036:	89 c8                	mov    eax,ecx
c0028038:	f7 e6                	mul    esi
c002803a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002803d:	89 c7                	mov    edi,eax
c002803f:	89 c8                	mov    eax,ecx
c0028041:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028044:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028047:	89 c1                	mov    ecx,eax
c0028049:	89 f0                	mov    eax,esi
c002804b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002804e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028051:	89 c6                	mov    esi,eax
c0028053:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028056:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028059:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002805c:	31 c0                	xor    eax,eax
c002805e:	01 f1                	add    ecx,esi
c0028060:	0f 92 c0             	setb   al
c0028063:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028066:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028069:	83 d6 00             	adc    esi,0x0
c002806c:	01 c7                	add    edi,eax
c002806e:	83 d6 00             	adc    esi,0x0
c0028071:	01 ca                	add    edx,ecx
c0028073:	0f 92 c1             	setb   cl
c0028076:	0f b6 c9             	movzx  ecx,cl
c0028079:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002807c:	83 d6 00             	adc    esi,0x0
c002807f:	01 cf                	add    edi,ecx
c0028081:	83 d6 00             	adc    esi,0x0
c0028084:	31 c9                	xor    ecx,ecx
c0028086:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028089:	0f 95 c1             	setne  cl
c002808c:	09 cf                	or     edi,ecx
c002808e:	85 f6                	test   esi,esi
c0028090:	78 0c                	js     c002809e <__muldf3+0x1f6>
c0028092:	01 f6                	add    esi,esi
c0028094:	89 f8                	mov    eax,edi
c0028096:	c1 e8 1f             	shr    eax,0x1f
c0028099:	09 c6                	or     esi,eax
c002809b:	01 ff                	add    edi,edi
c002809d:	4b                   	dec    ebx
c002809e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00280a4:	0f 8f 85 00 00 00    	jg     c002812f <__muldf3+0x287>
c00280aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00280b0:	85 db                	test   ebx,ebx
c00280b2:	0f 8f 84 00 00 00    	jg     c002813c <__muldf3+0x294>
c00280b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00280bb:	7c 79                	jl     c0028136 <__muldf3+0x28e>
c00280bd:	ba 01 00 00 00       	mov    edx,0x1
c00280c2:	29 da                	sub    edx,ebx
c00280c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280ca:	83 fa 1f             	cmp    edx,0x1f
c00280cd:	7e 30                	jle    c00280ff <__muldf3+0x257>
c00280cf:	83 fa 20             	cmp    edx,0x20
c00280d2:	75 0b                	jne    c00280df <__muldf3+0x237>
c00280d4:	31 c0                	xor    eax,eax
c00280d6:	85 ff                	test   edi,edi
c00280d8:	0f 95 c0             	setne  al
c00280db:	89 c7                	mov    edi,eax
c00280dd:	eb 1a                	jmp    c00280f9 <__muldf3+0x251>
c00280df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00280e2:	89 f0                	mov    eax,esi
c00280e4:	d3 e0                	shl    eax,cl
c00280e6:	09 f8                	or     eax,edi
c00280e8:	0f 95 c0             	setne  al
c00280eb:	0f b6 c0             	movzx  eax,al
c00280ee:	89 c7                	mov    edi,eax
c00280f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00280f5:	29 d9                	sub    ecx,ebx
c00280f7:	d3 ee                	shr    esi,cl
c00280f9:	09 f7                	or     edi,esi
c00280fb:	31 db                	xor    ebx,ebx
c00280fd:	eb 3b                	jmp    c002813a <__muldf3+0x292>
c00280ff:	83 c3 1f             	add    ebx,0x1f
c0028102:	89 f0                	mov    eax,esi
c0028104:	88 d9                	mov    cl,bl
c0028106:	d3 e0                	shl    eax,cl
c0028108:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002810b:	89 f8                	mov    eax,edi
c002810d:	88 d1                	mov    cl,dl
c002810f:	d3 e8                	shr    eax,cl
c0028111:	89 c1                	mov    ecx,eax
c0028113:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028116:	09 c8                	or     eax,ecx
c0028118:	88 d9                	mov    cl,bl
c002811a:	d3 e7                	shl    edi,cl
c002811c:	31 db                	xor    ebx,ebx
c002811e:	85 ff                	test   edi,edi
c0028120:	0f 95 c3             	setne  bl
c0028123:	89 df                	mov    edi,ebx
c0028125:	09 c7                	or     edi,eax
c0028127:	88 d1                	mov    cl,dl
c0028129:	d3 ee                	shr    esi,cl
c002812b:	31 db                	xor    ebx,ebx
c002812d:	eb 0d                	jmp    c002813c <__muldf3+0x294>
c002812f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028134:	eb 02                	jmp    c0028138 <__muldf3+0x290>
c0028136:	31 db                	xor    ebx,ebx
c0028138:	31 ff                	xor    edi,edi
c002813a:	31 f6                	xor    esi,esi
c002813c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002813f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028142:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028147:	09 c3                	or     ebx,eax
c0028149:	c1 e3 14             	shl    ebx,0x14
c002814c:	89 f0                	mov    eax,esi
c002814e:	c1 e8 0b             	shr    eax,0xb
c0028151:	09 c3                	or     ebx,eax
c0028153:	89 f8                	mov    eax,edi
c0028155:	c1 e8 0b             	shr    eax,0xb
c0028158:	c1 e6 15             	shl    esi,0x15
c002815b:	09 c6                	or     esi,eax
c002815d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028163:	0f 95 c1             	setne  cl
c0028166:	09 c8                	or     eax,ecx
c0028168:	83 e0 01             	and    eax,0x1
c002816b:	c1 ef 0a             	shr    edi,0xa
c002816e:	21 c7                	and    edi,eax
c0028170:	01 f7                	add    edi,esi
c0028172:	83 d3 00             	adc    ebx,0x0
c0028175:	89 da                	mov    edx,ebx
c0028177:	eb 03                	jmp    c002817c <__muldf3+0x2d4>
c0028179:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002817c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002817f:	89 f8                	mov    eax,edi
c0028181:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028184:	83 c4 24             	add    esp,0x24
c0028187:	5b                   	pop    ebx
c0028188:	5e                   	pop    esi
c0028189:	5f                   	pop    edi
c002818a:	5d                   	pop    ebp
c002818b:	c3                   	ret    

c002818c <__divdf3>:
c002818c:	55                   	push   ebp
c002818d:	89 e5                	mov    ebp,esp
c002818f:	57                   	push   edi
c0028190:	56                   	push   esi
c0028191:	53                   	push   ebx
c0028192:	83 ec 2c             	sub    esp,0x2c
c0028195:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028198:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002819b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002819e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00281a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00281a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00281a7:	89 ce                	mov    esi,ecx
c00281a9:	89 c8                	mov    eax,ecx
c00281ab:	c1 f8 14             	sar    eax,0x14
c00281ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00281b1:	89 f8                	mov    eax,edi
c00281b3:	89 fb                	mov    ebx,edi
c00281b5:	c1 e3 0b             	shl    ebx,0xb
c00281b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00281bb:	c1 e6 0b             	shl    esi,0xb
c00281be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00281c4:	c1 e8 15             	shr    eax,0x15
c00281c7:	09 c6                	or     esi,eax
c00281c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00281cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00281cf:	89 c2                	mov    edx,eax
c00281d1:	c1 fa 14             	sar    edx,0x14
c00281d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00281d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00281da:	89 de                	mov    esi,ebx
c00281dc:	c1 e6 0b             	shl    esi,0xb
c00281df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00281e2:	c1 e0 0b             	shl    eax,0xb
c00281e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281ea:	c1 eb 15             	shr    ebx,0x15
c00281ed:	09 d8                	or     eax,ebx
c00281ef:	89 c2                	mov    edx,eax
c00281f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281f4:	25 ff 07 00 00       	and    eax,0x7ff
c00281f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00281fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00281ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028205:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028208:	29 d8                	sub    eax,ebx
c002820a:	05 ff 03 00 00       	add    eax,0x3ff
c002820f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028212:	46                   	inc    esi
c0028213:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028219:	0f 85 a5 00 00 00    	jne    c00282c4 <__divdf3+0x138>
c002821f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028222:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028225:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028229:	74 2a                	je     c0028255 <__divdf3+0xc9>
c002822b:	85 f6                	test   esi,esi
c002822d:	0f 85 cc 02 00 00    	jne    c00284ff <__divdf3+0x373>
c0028233:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028236:	40                   	inc    eax
c0028237:	a9 fe 07 00 00       	test   eax,0x7fe
c002823c:	75 26                	jne    c0028264 <__divdf3+0xd8>
c002823e:	85 db                	test   ebx,ebx
c0028240:	74 22                	je     c0028264 <__divdf3+0xd8>
c0028242:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028245:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028248:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002824b:	09 d0                	or     eax,edx
c002824d:	0f 85 ac 02 00 00    	jne    c00284ff <__divdf3+0x373>
c0028253:	eb 63                	jmp    c00282b8 <__divdf3+0x12c>
c0028255:	85 f6                	test   esi,esi
c0028257:	75 22                	jne    c002827b <__divdf3+0xef>
c0028259:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002825c:	40                   	inc    eax
c002825d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028262:	74 36                	je     c002829a <__divdf3+0x10e>
c0028264:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028268:	0f 89 91 02 00 00    	jns    c00284ff <__divdf3+0x373>
c002826e:	89 f8                	mov    eax,edi
c0028270:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028276:	e9 80 02 00 00       	jmp    c00284fb <__divdf3+0x36f>
c002827b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002827e:	01 f6                	add    esi,esi
c0028280:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028283:	c1 ef 1f             	shr    edi,0x1f
c0028286:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028289:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002828c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002828f:	09 f7                	or     edi,esi
c0028291:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028294:	78 2e                	js     c00282c4 <__divdf3+0x138>
c0028296:	89 c8                	mov    eax,ecx
c0028298:	eb e1                	jmp    c002827b <__divdf3+0xef>
c002829a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002829d:	09 d0                	or     eax,edx
c002829f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00282a3:	74 0f                	je     c00282b4 <__divdf3+0x128>
c00282a5:	85 c0                	test   eax,eax
c00282a7:	74 bb                	je     c0028264 <__divdf3+0xd8>
c00282a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00282ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00282af:	e9 4b 02 00 00       	jmp    c00284ff <__divdf3+0x373>
c00282b4:	85 c0                	test   eax,eax
c00282b6:	75 ac                	jne    c0028264 <__divdf3+0xd8>
c00282b8:	31 ff                	xor    edi,edi
c00282ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00282bf:	e9 3b 02 00 00       	jmp    c00284ff <__divdf3+0x373>
c00282c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00282ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00282d0:	75 6b                	jne    c002833d <__divdf3+0x1b1>
c00282d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282d5:	09 d6                	or     esi,edx
c00282d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00282db:	74 28                	je     c0028305 <__divdf3+0x179>
c00282dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00282e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00282e3:	85 f6                	test   esi,esi
c00282e5:	0f 85 14 02 00 00    	jne    c00284ff <__divdf3+0x373>
c00282eb:	31 ff                	xor    edi,edi
c00282ed:	31 c9                	xor    ecx,ecx
c00282ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00282f5:	0f 89 04 02 00 00    	jns    c00284ff <__divdf3+0x373>
c00282fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028300:	e9 fa 01 00 00       	jmp    c00284ff <__divdf3+0x373>
c0028305:	85 f6                	test   esi,esi
c0028307:	75 1b                	jne    c0028324 <__divdf3+0x198>
c0028309:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002830c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002830f:	25 00 00 00 80       	and    eax,0x80000000
c0028314:	31 c9                	xor    ecx,ecx
c0028316:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002831b:	89 cf                	mov    edi,ecx
c002831d:	89 c1                	mov    ecx,eax
c002831f:	e9 db 01 00 00       	jmp    c00284ff <__divdf3+0x373>
c0028324:	01 d2                	add    edx,edx
c0028326:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028329:	c1 eb 1f             	shr    ebx,0x1f
c002832c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002832f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028332:	8d 48 01             	lea    ecx,[eax+0x1]
c0028335:	09 da                	or     edx,ebx
c0028337:	78 04                	js     c002833d <__divdf3+0x1b1>
c0028339:	89 c8                	mov    eax,ecx
c002833b:	eb e7                	jmp    c0028324 <__divdf3+0x198>
c002833d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028340:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028346:	81 ca 00 00 00 80    	or     edx,0x80000000
c002834c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002834f:	39 d6                	cmp    esi,edx
c0028351:	77 0d                	ja     c0028360 <__divdf3+0x1d4>
c0028353:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028356:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028359:	72 1b                	jb     c0028376 <__divdf3+0x1ea>
c002835b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002835e:	75 16                	jne    c0028376 <__divdf3+0x1ea>
c0028360:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028363:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028366:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028369:	83 de 00             	sbb    esi,0x0
c002836c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002836f:	ba 01 00 00 00       	mov    edx,0x1
c0028374:	eb 02                	jmp    c0028378 <__divdf3+0x1ec>
c0028376:	31 d2                	xor    edx,edx
c0028378:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002837f:	31 ff                	xor    edi,edi
c0028381:	01 ff                	add    edi,edi
c0028383:	89 d1                	mov    ecx,edx
c0028385:	c1 e9 1f             	shr    ecx,0x1f
c0028388:	09 cf                	or     edi,ecx
c002838a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002838d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028390:	89 da                	mov    edx,ebx
c0028392:	89 f3                	mov    ebx,esi
c0028394:	8d 34 36             	lea    esi,[esi+esi*1]
c0028397:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002839a:	c1 e9 1f             	shr    ecx,0x1f
c002839d:	09 ce                	or     esi,ecx
c002839f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283a2:	01 c9                	add    ecx,ecx
c00283a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00283a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00283aa:	85 db                	test   ebx,ebx
c00283ac:	78 29                	js     c00283d7 <__divdf3+0x24b>
c00283ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00283b1:	72 07                	jb     c00283ba <__divdf3+0x22e>
c00283b3:	75 3c                	jne    c00283f1 <__divdf3+0x265>
c00283b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283b8:	77 37                	ja     c00283f1 <__divdf3+0x265>
c00283ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00283bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00283c0:	31 d2                	xor    edx,edx
c00283c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00283c5:	0f 97 c2             	seta   dl
c00283c8:	29 d6                	sub    esi,edx
c00283ca:	89 d9                	mov    ecx,ebx
c00283cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00283cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00283d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00283d5:	eb 17                	jmp    c00283ee <__divdf3+0x262>
c00283d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00283da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283e0:	0f 97 c1             	seta   cl
c00283e3:	0f b6 c9             	movzx  ecx,cl
c00283e6:	29 ce                	sub    esi,ecx
c00283e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00283eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00283ee:	83 ca 01             	or     edx,0x1
c00283f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00283f4:	75 8b                	jne    c0028381 <__divdf3+0x1f5>
c00283f6:	c1 e7 09             	shl    edi,0x9
c00283f9:	89 d1                	mov    ecx,edx
c00283fb:	c1 e9 17             	shr    ecx,0x17
c00283fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028401:	09 f3                	or     ebx,esi
c0028403:	0f 95 c3             	setne  bl
c0028406:	0f b6 db             	movzx  ebx,bl
c0028409:	c1 e2 09             	shl    edx,0x9
c002840c:	09 d3                	or     ebx,edx
c002840e:	89 ca                	mov    edx,ecx
c0028410:	09 fa                	or     edx,edi
c0028412:	78 0c                	js     c0028420 <__divdf3+0x294>
c0028414:	01 d2                	add    edx,edx
c0028416:	89 d9                	mov    ecx,ebx
c0028418:	c1 e9 1f             	shr    ecx,0x1f
c002841b:	09 ca                	or     edx,ecx
c002841d:	01 db                	add    ebx,ebx
c002841f:	48                   	dec    eax
c0028420:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028425:	0f 8f 83 00 00 00    	jg     c00284ae <__divdf3+0x322>
c002842b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028431:	85 c0                	test   eax,eax
c0028433:	0f 8f 82 00 00 00    	jg     c00284bb <__divdf3+0x32f>
c0028439:	83 f8 cc             	cmp    eax,0xffffffcc
c002843c:	7c 77                	jl     c00284b5 <__divdf3+0x329>
c002843e:	be 01 00 00 00       	mov    esi,0x1
c0028443:	29 c6                	sub    esi,eax
c0028445:	81 ca 00 00 00 80    	or     edx,0x80000000
c002844b:	83 fe 1f             	cmp    esi,0x1f
c002844e:	7e 2f                	jle    c002847f <__divdf3+0x2f3>
c0028450:	83 fe 20             	cmp    esi,0x20
c0028453:	75 0a                	jne    c002845f <__divdf3+0x2d3>
c0028455:	85 db                	test   ebx,ebx
c0028457:	0f 95 c3             	setne  bl
c002845a:	0f b6 db             	movzx  ebx,bl
c002845d:	eb 1a                	jmp    c0028479 <__divdf3+0x2ed>
c002845f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028462:	89 d7                	mov    edi,edx
c0028464:	d3 e7                	shl    edi,cl
c0028466:	89 f9                	mov    ecx,edi
c0028468:	09 d9                	or     ecx,ebx
c002846a:	0f 95 c3             	setne  bl
c002846d:	0f b6 db             	movzx  ebx,bl
c0028470:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028475:	29 c1                	sub    ecx,eax
c0028477:	d3 ea                	shr    edx,cl
c0028479:	09 d3                	or     ebx,edx
c002847b:	31 c0                	xor    eax,eax
c002847d:	eb 3a                	jmp    c00284b9 <__divdf3+0x32d>
c002847f:	83 c0 1f             	add    eax,0x1f
c0028482:	89 d7                	mov    edi,edx
c0028484:	88 c1                	mov    cl,al
c0028486:	d3 e7                	shl    edi,cl
c0028488:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002848b:	89 df                	mov    edi,ebx
c002848d:	89 f1                	mov    ecx,esi
c002848f:	d3 ef                	shr    edi,cl
c0028491:	89 f9                	mov    ecx,edi
c0028493:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028496:	09 cf                	or     edi,ecx
c0028498:	88 c1                	mov    cl,al
c002849a:	d3 e3                	shl    ebx,cl
c002849c:	85 db                	test   ebx,ebx
c002849e:	0f 95 c3             	setne  bl
c00284a1:	0f b6 db             	movzx  ebx,bl
c00284a4:	09 fb                	or     ebx,edi
c00284a6:	89 f1                	mov    ecx,esi
c00284a8:	d3 ea                	shr    edx,cl
c00284aa:	31 c0                	xor    eax,eax
c00284ac:	eb 0d                	jmp    c00284bb <__divdf3+0x32f>
c00284ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00284b3:	eb 02                	jmp    c00284b7 <__divdf3+0x32b>
c00284b5:	31 c0                	xor    eax,eax
c00284b7:	31 db                	xor    ebx,ebx
c00284b9:	31 d2                	xor    edx,edx
c00284bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00284be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00284c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00284c7:	09 c8                	or     eax,ecx
c00284c9:	c1 e0 14             	shl    eax,0x14
c00284cc:	89 d1                	mov    ecx,edx
c00284ce:	c1 e9 0b             	shr    ecx,0xb
c00284d1:	09 c8                	or     eax,ecx
c00284d3:	89 c6                	mov    esi,eax
c00284d5:	89 d9                	mov    ecx,ebx
c00284d7:	c1 e9 0b             	shr    ecx,0xb
c00284da:	c1 e2 15             	shl    edx,0x15
c00284dd:	09 ca                	or     edx,ecx
c00284df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00284e5:	0f 95 c0             	setne  al
c00284e8:	09 c1                	or     ecx,eax
c00284ea:	83 e1 01             	and    ecx,0x1
c00284ed:	c1 eb 0a             	shr    ebx,0xa
c00284f0:	21 cb                	and    ebx,ecx
c00284f2:	01 d3                	add    ebx,edx
c00284f4:	89 d8                	mov    eax,ebx
c00284f6:	83 d6 00             	adc    esi,0x0
c00284f9:	89 f2                	mov    edx,esi
c00284fb:	89 c7                	mov    edi,eax
c00284fd:	89 d1                	mov    ecx,edx
c00284ff:	89 f8                	mov    eax,edi
c0028501:	89 ca                	mov    edx,ecx
c0028503:	83 c4 2c             	add    esp,0x2c
c0028506:	5b                   	pop    ebx
c0028507:	5e                   	pop    esi
c0028508:	5f                   	pop    edi
c0028509:	5d                   	pop    ebp
c002850a:	c3                   	ret    

c002850b <__floatsidf>:
c002850b:	55                   	push   ebp
c002850c:	89 e5                	mov    ebp,esp
c002850e:	56                   	push   esi
c002850f:	53                   	push   ebx
c0028510:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028513:	85 db                	test   ebx,ebx
c0028515:	7e 15                	jle    c002852c <__floatsidf+0x21>
c0028517:	0f bd cb             	bsr    ecx,ebx
c002851a:	83 f1 1f             	xor    ecx,0x1f
c002851d:	d3 e3                	shl    ebx,cl
c002851f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028525:	b8 1e 04 00 00       	mov    eax,0x41e
c002852a:	eb 21                	jmp    c002854d <__floatsidf+0x42>
c002852c:	b8 00 00 00 00       	mov    eax,0x0
c0028531:	ba 00 00 00 00       	mov    edx,0x0
c0028536:	74 2a                	je     c0028562 <__floatsidf+0x57>
c0028538:	f7 db                	neg    ebx
c002853a:	0f bd cb             	bsr    ecx,ebx
c002853d:	83 f1 1f             	xor    ecx,0x1f
c0028540:	d3 e3                	shl    ebx,cl
c0028542:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028548:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002854d:	29 c8                	sub    eax,ecx
c002854f:	c1 e0 14             	shl    eax,0x14
c0028552:	89 c1                	mov    ecx,eax
c0028554:	89 de                	mov    esi,ebx
c0028556:	c1 ee 0b             	shr    esi,0xb
c0028559:	09 f1                	or     ecx,esi
c002855b:	89 ca                	mov    edx,ecx
c002855d:	c1 e3 15             	shl    ebx,0x15
c0028560:	89 d8                	mov    eax,ebx
c0028562:	5b                   	pop    ebx
c0028563:	5e                   	pop    esi
c0028564:	5d                   	pop    ebp
c0028565:	c3                   	ret    

c0028566 <__floatunsidf>:
c0028566:	55                   	push   ebp
c0028567:	89 e5                	mov    ebp,esp
c0028569:	56                   	push   esi
c002856a:	53                   	push   ebx
c002856b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002856e:	85 db                	test   ebx,ebx
c0028570:	74 2a                	je     c002859c <__floatunsidf+0x36>
c0028572:	0f bd cb             	bsr    ecx,ebx
c0028575:	83 f1 1f             	xor    ecx,0x1f
c0028578:	d3 e3                	shl    ebx,cl
c002857a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028580:	b8 1e 04 00 00       	mov    eax,0x41e
c0028585:	29 c8                	sub    eax,ecx
c0028587:	c1 e0 14             	shl    eax,0x14
c002858a:	89 c1                	mov    ecx,eax
c002858c:	89 de                	mov    esi,ebx
c002858e:	c1 ee 0b             	shr    esi,0xb
c0028591:	09 f1                	or     ecx,esi
c0028593:	89 ca                	mov    edx,ecx
c0028595:	c1 e3 15             	shl    ebx,0x15
c0028598:	89 d8                	mov    eax,ebx
c002859a:	eb 04                	jmp    c00285a0 <__floatunsidf+0x3a>
c002859c:	31 c0                	xor    eax,eax
c002859e:	31 d2                	xor    edx,edx
c00285a0:	5b                   	pop    ebx
c00285a1:	5e                   	pop    esi
c00285a2:	5d                   	pop    ebp
c00285a3:	c3                   	ret    

c00285a4 <__fixdfsi>:
c00285a4:	55                   	push   ebp
c00285a5:	89 e5                	mov    ebp,esp
c00285a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00285aa:	89 d1                	mov    ecx,edx
c00285ac:	c1 e1 0b             	shl    ecx,0xb
c00285af:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00285b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00285b8:	c1 e8 15             	shr    eax,0x15
c00285bb:	09 c1                	or     ecx,eax
c00285bd:	c1 fa 14             	sar    edx,0x14
c00285c0:	78 1f                	js     c00285e1 <__fixdfsi+0x3d>
c00285c2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00285c8:	31 c0                	xor    eax,eax
c00285ca:	83 fa 1e             	cmp    edx,0x1e
c00285cd:	77 40                	ja     c002860f <__fixdfsi+0x6b>
c00285cf:	89 c8                	mov    eax,ecx
c00285d1:	0d 00 00 00 80       	or     eax,0x80000000
c00285d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00285db:	29 d1                	sub    ecx,edx
c00285dd:	d3 e8                	shr    eax,cl
c00285df:	eb 2e                	jmp    c002860f <__fixdfsi+0x6b>
c00285e1:	31 c0                	xor    eax,eax
c00285e3:	81 c2 01 04 00 00    	add    edx,0x401
c00285e9:	78 24                	js     c002860f <__fixdfsi+0x6b>
c00285eb:	83 fa 1e             	cmp    edx,0x1e
c00285ee:	7e 09                	jle    c00285f9 <__fixdfsi+0x55>
c00285f0:	83 fa 1f             	cmp    edx,0x1f
c00285f3:	75 18                	jne    c002860d <__fixdfsi+0x69>
c00285f5:	85 c9                	test   ecx,ecx
c00285f7:	75 14                	jne    c002860d <__fixdfsi+0x69>
c00285f9:	89 c8                	mov    eax,ecx
c00285fb:	0d 00 00 00 80       	or     eax,0x80000000
c0028600:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028605:	29 d1                	sub    ecx,edx
c0028607:	d3 e8                	shr    eax,cl
c0028609:	f7 d8                	neg    eax
c002860b:	eb 02                	jmp    c002860f <__fixdfsi+0x6b>
c002860d:	31 c0                	xor    eax,eax
c002860f:	5d                   	pop    ebp
c0028610:	c3                   	ret    

c0028611 <__fixunsdfsi>:
c0028611:	55                   	push   ebp
c0028612:	89 e5                	mov    ebp,esp
c0028614:	53                   	push   ebx
c0028615:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028618:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002861b:	89 d3                	mov    ebx,edx
c002861d:	c1 fb 14             	sar    ebx,0x14
c0028620:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028626:	31 c0                	xor    eax,eax
c0028628:	83 fb 1f             	cmp    ebx,0x1f
c002862b:	77 1d                	ja     c002864a <__fixunsdfsi+0x39>
c002862d:	89 d0                	mov    eax,edx
c002862f:	c1 e0 0b             	shl    eax,0xb
c0028632:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028637:	c1 e9 15             	shr    ecx,0x15
c002863a:	09 c8                	or     eax,ecx
c002863c:	0d 00 00 00 80       	or     eax,0x80000000
c0028641:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028646:	29 d9                	sub    ecx,ebx
c0028648:	d3 e8                	shr    eax,cl
c002864a:	5b                   	pop    ebx
c002864b:	5d                   	pop    ebp
c002864c:	c3                   	ret    

c002864d <__cmpdf2>:
c002864d:	55                   	push   ebp
c002864e:	89 e5                	mov    ebp,esp
c0028650:	57                   	push   edi
c0028651:	56                   	push   esi
c0028652:	53                   	push   ebx
c0028653:	83 ec 0c             	sub    esp,0xc
c0028656:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028659:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002865c:	89 ca                	mov    edx,ecx
c002865e:	c1 ea 14             	shr    edx,0x14
c0028661:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028667:	89 cb                	mov    ebx,ecx
c0028669:	c1 fb 1f             	sar    ebx,0x1f
c002866c:	31 da                	xor    edx,ebx
c002866e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028671:	89 df                	mov    edi,ebx
c0028673:	c1 e7 0b             	shl    edi,0xb
c0028676:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028679:	c1 e1 0b             	shl    ecx,0xb
c002867c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028682:	c1 eb 15             	shr    ebx,0x15
c0028685:	09 d9                	or     ecx,ebx
c0028687:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002868a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002868d:	89 ce                	mov    esi,ecx
c002868f:	c1 ee 14             	shr    esi,0x14
c0028692:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028698:	89 cb                	mov    ebx,ecx
c002869a:	c1 fb 1f             	sar    ebx,0x1f
c002869d:	31 de                	xor    esi,ebx
c002869f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00286a2:	89 df                	mov    edi,ebx
c00286a4:	c1 e7 0b             	shl    edi,0xb
c00286a7:	c1 e1 0b             	shl    ecx,0xb
c00286aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286b0:	c1 eb 15             	shr    ebx,0x15
c00286b3:	09 d9                	or     ecx,ebx
c00286b5:	89 d3                	mov    ebx,edx
c00286b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00286bd:	43                   	inc    ebx
c00286be:	83 fb 01             	cmp    ebx,0x1
c00286c1:	77 08                	ja     c00286cb <__cmpdf2+0x7e>
c00286c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00286c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00286c9:	75 68                	jne    c0028733 <__cmpdf2+0xe6>
c00286cb:	89 f3                	mov    ebx,esi
c00286cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00286d3:	43                   	inc    ebx
c00286d4:	83 fb 01             	cmp    ebx,0x1
c00286d7:	77 06                	ja     c00286df <__cmpdf2+0x92>
c00286d9:	89 fb                	mov    ebx,edi
c00286db:	09 cb                	or     ebx,ecx
c00286dd:	75 54                	jne    c0028733 <__cmpdf2+0xe6>
c00286df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00286e2:	09 f8                	or     eax,edi
c00286e4:	09 c8                	or     eax,ecx
c00286e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00286e9:	75 12                	jne    c00286fd <__cmpdf2+0xb0>
c00286eb:	8d 42 01             	lea    eax,[edx+0x1]
c00286ee:	83 f8 01             	cmp    eax,0x1
c00286f1:	77 0a                	ja     c00286fd <__cmpdf2+0xb0>
c00286f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00286f6:	31 c0                	xor    eax,eax
c00286f8:	83 fb 01             	cmp    ebx,0x1
c00286fb:	76 36                	jbe    c0028733 <__cmpdf2+0xe6>
c00286fd:	b8 01 00 00 00       	mov    eax,0x1
c0028702:	39 f2                	cmp    edx,esi
c0028704:	7f 2d                	jg     c0028733 <__cmpdf2+0xe6>
c0028706:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002870b:	7c 26                	jl     c0028733 <__cmpdf2+0xe6>
c002870d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028710:	77 07                	ja     c0028719 <__cmpdf2+0xcc>
c0028712:	72 16                	jb     c002872a <__cmpdf2+0xdd>
c0028714:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028717:	76 0a                	jbe    c0028723 <__cmpdf2+0xd6>
c0028719:	89 d0                	mov    eax,edx
c002871b:	c1 f8 1f             	sar    eax,0x1f
c002871e:	83 c8 01             	or     eax,0x1
c0028721:	eb 10                	jmp    c0028733 <__cmpdf2+0xe6>
c0028723:	b8 00 00 00 00       	mov    eax,0x0
c0028728:	73 09                	jae    c0028733 <__cmpdf2+0xe6>
c002872a:	89 d0                	mov    eax,edx
c002872c:	c1 f8 1f             	sar    eax,0x1f
c002872f:	83 e0 02             	and    eax,0x2
c0028732:	48                   	dec    eax
c0028733:	83 c4 0c             	add    esp,0xc
c0028736:	5b                   	pop    ebx
c0028737:	5e                   	pop    esi
c0028738:	5f                   	pop    edi
c0028739:	5d                   	pop    ebp
c002873a:	c3                   	ret    

c002873b <__eqdf2>:
c002873b:	55                   	push   ebp
c002873c:	89 e5                	mov    ebp,esp
c002873e:	50                   	push   eax
c002873f:	6a 01                	push   0x1
c0028741:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028744:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028747:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002874a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002874d:	e8 fb fe ff ff       	call   c002864d <__cmpdf2>
c0028752:	83 c4 18             	add    esp,0x18
c0028755:	c9                   	leave  
c0028756:	c3                   	ret    

c0028757 <__nedf2>:
c0028757:	eb e2                	jmp    c002873b <__eqdf2>

c0028759 <__gtdf2>:
c0028759:	55                   	push   ebp
c002875a:	89 e5                	mov    ebp,esp
c002875c:	50                   	push   eax
c002875d:	6a ff                	push   0xffffffff
c002875f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028762:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028765:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002876b:	e8 dd fe ff ff       	call   c002864d <__cmpdf2>
c0028770:	83 c4 18             	add    esp,0x18
c0028773:	c9                   	leave  
c0028774:	c3                   	ret    

c0028775 <__gedf2>:
c0028775:	eb e2                	jmp    c0028759 <__gtdf2>

c0028777 <__ltdf2>:
c0028777:	eb c2                	jmp    c002873b <__eqdf2>

c0028779 <__ledf2>:
c0028779:	eb c0                	jmp    c002873b <__eqdf2>

c002877b <__truncdfsf2>:
c002877b:	55                   	push   ebp
c002877c:	89 e5                	mov    ebp,esp
c002877e:	57                   	push   edi
c002877f:	56                   	push   esi
c0028780:	53                   	push   ebx
c0028781:	83 ec 0c             	sub    esp,0xc
c0028784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028787:	89 d1                	mov    ecx,edx
c0028789:	c1 f9 14             	sar    ecx,0x14
c002878c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002878f:	89 df                	mov    edi,ebx
c0028791:	c1 e7 0b             	shl    edi,0xb
c0028794:	89 d0                	mov    eax,edx
c0028796:	c1 e0 0b             	shl    eax,0xb
c0028799:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002879e:	c1 eb 15             	shr    ebx,0x15
c00287a1:	09 d8                	or     eax,ebx
c00287a3:	89 cb                	mov    ebx,ecx
c00287a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00287ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00287b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00287b7:	0f 86 9e 00 00 00    	jbe    c002885b <__truncdfsf2+0xe0>
c00287bd:	85 db                	test   ebx,ebx
c00287bf:	75 0a                	jne    c00287cb <__truncdfsf2+0x50>
c00287c1:	c1 fa 17             	sar    edx,0x17
c00287c4:	30 d2                	xor    dl,dl
c00287c6:	e9 84 00 00 00       	jmp    c002884f <__truncdfsf2+0xd4>
c00287cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00287d1:	83 fe 83             	cmp    esi,0xffffff83
c00287d4:	7d 4b                	jge    c0028821 <__truncdfsf2+0xa6>
c00287d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00287db:	29 f1                	sub    ecx,esi
c00287dd:	83 f9 1f             	cmp    ecx,0x1f
c00287e0:	7f 6b                	jg     c002884d <__truncdfsf2+0xd2>
c00287e2:	0d 00 00 00 80       	or     eax,0x80000000
c00287e7:	89 c3                	mov    ebx,eax
c00287e9:	d3 eb                	shr    ebx,cl
c00287eb:	be 01 00 00 00       	mov    esi,0x1
c00287f0:	d3 e6                	shl    esi,cl
c00287f2:	4e                   	dec    esi
c00287f3:	21 f0                	and    eax,esi
c00287f5:	09 f8                	or     eax,edi
c00287f7:	0f 95 c0             	setne  al
c00287fa:	0f b6 c0             	movzx  eax,al
c00287fd:	09 c3                	or     ebx,eax
c00287ff:	89 d9                	mov    ecx,ebx
c0028801:	c1 e9 08             	shr    ecx,0x8
c0028804:	f6 c3 7f             	test   bl,0x7f
c0028807:	0f 95 c0             	setne  al
c002880a:	09 c8                	or     eax,ecx
c002880c:	83 e0 01             	and    eax,0x1
c002880f:	c1 eb 07             	shr    ebx,0x7
c0028812:	21 c3                	and    ebx,eax
c0028814:	81 e2 00 00 00 80    	and    edx,0x80000000
c002881a:	09 d1                	or     ecx,edx
c002881c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002881f:	eb 76                	jmp    c0028897 <__truncdfsf2+0x11c>
c0028821:	83 c6 80             	add    esi,0xffffff80
c0028824:	7e 1d                	jle    c0028843 <__truncdfsf2+0xc8>
c0028826:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002882c:	75 0b                	jne    c0028839 <__truncdfsf2+0xbe>
c002882e:	09 f8                	or     eax,edi
c0028830:	74 09                	je     c002883b <__truncdfsf2+0xc0>
c0028832:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028837:	eb 02                	jmp    c002883b <__truncdfsf2+0xc0>
c0028839:	31 c0                	xor    eax,eax
c002883b:	c1 fa 17             	sar    edx,0x17
c002883e:	80 ca ff             	or     dl,0xff
c0028841:	eb 0e                	jmp    c0028851 <__truncdfsf2+0xd6>
c0028843:	c1 fa 1f             	sar    edx,0x1f
c0028846:	c1 e2 08             	shl    edx,0x8
c0028849:	09 ca                	or     edx,ecx
c002884b:	eb 04                	jmp    c0028851 <__truncdfsf2+0xd6>
c002884d:	31 d2                	xor    edx,edx
c002884f:	31 c0                	xor    eax,eax
c0028851:	c1 e2 17             	shl    edx,0x17
c0028854:	c1 e8 08             	shr    eax,0x8
c0028857:	09 d0                	or     eax,edx
c0028859:	eb 3c                	jmp    c0028897 <__truncdfsf2+0x11c>
c002885b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028861:	89 ca                	mov    edx,ecx
c0028863:	c1 fa 0b             	sar    edx,0xb
c0028866:	c1 e2 08             	shl    edx,0x8
c0028869:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002886c:	31 db                	xor    ebx,ebx
c002886e:	85 ff                	test   edi,edi
c0028870:	0f 95 c3             	setne  bl
c0028873:	09 d8                	or     eax,ebx
c0028875:	89 c3                	mov    ebx,eax
c0028877:	c1 eb 08             	shr    ebx,0x8
c002887a:	a8 7f                	test   al,0x7f
c002887c:	0f 95 c2             	setne  dl
c002887f:	89 d6                	mov    esi,edx
c0028881:	09 de                	or     esi,ebx
c0028883:	83 e6 01             	and    esi,0x1
c0028886:	c1 e8 07             	shr    eax,0x7
c0028889:	21 f0                	and    eax,esi
c002888b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002888e:	09 ca                	or     edx,ecx
c0028890:	c1 e2 17             	shl    edx,0x17
c0028893:	09 da                	or     edx,ebx
c0028895:	01 d0                	add    eax,edx
c0028897:	83 c4 0c             	add    esp,0xc
c002889a:	5b                   	pop    ebx
c002889b:	5e                   	pop    esi
c002889c:	5f                   	pop    edi
c002889d:	5d                   	pop    ebp
c002889e:	c3                   	ret    

c002889f <__extendsfdf2>:
c002889f:	55                   	push   ebp
c00288a0:	89 e5                	mov    ebp,esp
c00288a2:	57                   	push   edi
c00288a3:	56                   	push   esi
c00288a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00288a7:	89 d1                	mov    ecx,edx
c00288a9:	c1 f9 17             	sar    ecx,0x17
c00288ac:	c1 e2 08             	shl    edx,0x8
c00288af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00288b5:	89 c8                	mov    eax,ecx
c00288b7:	80 e4 f8             	and    ah,0xf8
c00288ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00288bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00288c3:	75 27                	jne    c00288ec <__extendsfdf2+0x4d>
c00288c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00288cb:	75 18                	jne    c00288e5 <__extendsfdf2+0x46>
c00288cd:	85 d2                	test   edx,edx
c00288cf:	74 20                	je     c00288f1 <__extendsfdf2+0x52>
c00288d1:	41                   	inc    ecx
c00288d2:	01 d2                	add    edx,edx
c00288d4:	79 fb                	jns    c00288d1 <__extendsfdf2+0x32>
c00288d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00288dc:	29 c8                	sub    eax,ecx
c00288de:	05 81 03 00 00       	add    eax,0x381
c00288e3:	eb 0c                	jmp    c00288f1 <__extendsfdf2+0x52>
c00288e5:	05 00 07 00 00       	add    eax,0x700
c00288ea:	eb 05                	jmp    c00288f1 <__extendsfdf2+0x52>
c00288ec:	05 80 03 00 00       	add    eax,0x380
c00288f1:	c1 e0 14             	shl    eax,0x14
c00288f4:	89 c1                	mov    ecx,eax
c00288f6:	89 d0                	mov    eax,edx
c00288f8:	c1 e8 0b             	shr    eax,0xb
c00288fb:	09 c1                	or     ecx,eax
c00288fd:	c1 e2 15             	shl    edx,0x15
c0028900:	89 d0                	mov    eax,edx
c0028902:	89 ca                	mov    edx,ecx
c0028904:	5e                   	pop    esi
c0028905:	5f                   	pop    edi
c0028906:	5d                   	pop    ebp
c0028907:	c3                   	ret    
c0028908:	66 90                	xchg   ax,ax
c002890a:	66 90                	xchg   ax,ax
c002890c:	66 90                	xchg   ax,ax
c002890e:	66 90                	xchg   ax,ax

c0028910 <fabs>:
c0028910:	83 ec 0c             	sub    esp,0xc
c0028913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028917:	89 04 24             	mov    DWORD PTR [esp],eax
c002891a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002891e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028923:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028927:	dd 04 24             	fld    QWORD PTR [esp]
c002892a:	83 c4 0c             	add    esp,0xc
c002892d:	c3                   	ret    
c002892e:	66 90                	xchg   ax,ax

c0028930 <lrint>:
c0028930:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028934:	83 ec 04             	sub    esp,0x4
c0028937:	db 1c 24             	fistp  DWORD PTR [esp]
c002893a:	58                   	pop    eax
c002893b:	c3                   	ret    

c002893c <lrintf>:
c002893c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028940:	83 ec 04             	sub    esp,0x4
c0028943:	db 1c 24             	fistp  DWORD PTR [esp]
c0028946:	58                   	pop    eax
c0028947:	c3                   	ret    

Disassembly of section .init:

c0028948 <_init>:
c0028948:	55                   	push   ebp
c0028949:	89 e5                	mov    ebp,esp
c002894b:	e8 c8 77 fd ff       	call   c0000118 <frame_dummy>
c0028950:	e8 5b e0 ff ff       	call   c00269b0 <__do_global_ctors_aux>
c0028955:	5d                   	pop    ebp
c0028956:	c3                   	ret    

Disassembly of section .fini:

c0028957 <_fini>:
c0028957:	55                   	push   ebp
c0028958:	89 e5                	mov    ebp,esp
c002895a:	e8 49 77 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002895f:	5d                   	pop    ebp
c0028960:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028962 <Computer::~Computer()>:
c0028962:	83 ec 0c             	sub    esp,0xc
c0028965:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c002896a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896e:	89 10                	mov    DWORD PTR [eax],edx
c0028970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028974:	83 ec 0c             	sub    esp,0xc
c0028977:	50                   	push   eax
c0028978:	e8 11 b2 fe ff       	call   c0013b8e <Device::~Device()>
c002897d:	83 c4 10             	add    esp,0x10
c0028980:	90                   	nop
c0028981:	83 c4 0c             	add    esp,0xc
c0028984:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028986 <Computer::~Computer()>:
c0028986:	83 ec 0c             	sub    esp,0xc
c0028989:	83 ec 0c             	sub    esp,0xc
c002898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028990:	e8 cd ff ff ff       	call   c0028962 <Computer::~Computer()>
c0028995:	83 c4 10             	add    esp,0x10
c0028998:	83 ec 08             	sub    esp,0x8
c002899b:	68 ec 01 00 00       	push   0x1ec
c00289a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a4:	e8 f2 9d fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00289a9:	83 c4 10             	add    esp,0x10
c00289ac:	83 c4 0c             	add    esp,0xc
c00289af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00289b0 <idleCommon()>:
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	fa                   	cli    
c00289b4:	ff 05 c8 f9 02 c0    	inc    DWORD PTR ds:0xc002f9c8
c00289ba:	e8 f8 53 ff ff       	call   c001ddb7 <schedule()>
c00289bf:	a1 c8 f9 02 c0       	mov    eax,ds:0xc002f9c8
c00289c4:	48                   	dec    eax
c00289c5:	a3 c8 f9 02 c0       	mov    ds:0xc002f9c8,eax
c00289ca:	75 01                	jne    c00289cd <idleCommon()+0x1d>
c00289cc:	fb                   	sti    
c00289cd:	83 c4 0c             	add    esp,0xc
c00289d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00289d2 <LinkedList<UnixFile>::~LinkedList()>:
c00289d2:	90                   	nop
c00289d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00289d4 <LinkedList<UnixFile>::LinkedList()>:
c00289d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a0d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a14:	90                   	nop
c0028a15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028a16 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a1e:	75 10                	jne    c0028a30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028a20:	83 ec 0c             	sub    esp,0xc
c0028a23:	68 f0 a8 02 c0       	push   0xc002a8f0
c0028a28:	e8 f8 17 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028a2d:	83 c4 10             	add    esp,0x10
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a36:	85 c0                	test   eax,eax
c0028a38:	74 34                	je     c0028a6e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a41:	85 c0                	test   eax,eax
c0028a43:	74 29                	je     c0028a6e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a6c:	eb 65                	jmp    c0028ad3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a74:	85 c0                	test   eax,eax
c0028a76:	75 4b                	jne    c0028ac3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a7f:	85 c0                	test   eax,eax
c0028a81:	75 40                	jne    c0028ac3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a8b:	89 10                	mov    DWORD PTR [eax],edx
c0028a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aad:	85 c0                	test   eax,eax
c0028aaf:	74 22                	je     c0028ad3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ab1:	83 ec 0c             	sub    esp,0xc
c0028ab4:	68 12 a9 02 c0       	push   0xc002a912
c0028ab9:	e8 67 17 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028abe:	83 c4 10             	add    esp,0x10
c0028ac1:	eb 10                	jmp    c0028ad3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ac3:	83 ec 0c             	sub    esp,0xc
c0028ac6:	68 1c a9 02 c0       	push   0xc002a91c
c0028acb:	e8 55 17 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028ad0:	83 c4 10             	add    esp,0x10
c0028ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ada:	8d 50 01             	lea    edx,[eax+0x1]
c0028add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ae4:	90                   	nop
c0028ae5:	83 c4 0c             	add    esp,0xc
c0028ae8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028aea <LinkedList<UnixFile>::getFirstElement()>:
c0028aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028af2 <LinkedList<UnixFile>::removeFirst()>:
c0028af2:	83 ec 0c             	sub    esp,0xc
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028afb:	85 c0                	test   eax,eax
c0028afd:	75 12                	jne    c0028b11 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028aff:	83 ec 0c             	sub    esp,0xc
c0028b02:	68 28 a9 02 c0       	push   0xc002a928
c0028b07:	e8 19 17 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028b0c:	83 c4 10             	add    esp,0x10
c0028b0f:	eb 7e                	jmp    c0028b8f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	74 10                	je     c0028b2f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	68 73 a9 02 c0       	push   0xc002a973
c0028b27:	e8 f9 16 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028b2c:	83 c4 10             	add    esp,0x10
c0028b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b38:	85 c0                	test   eax,eax
c0028b3a:	75 33                	jne    c0028b6f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b55:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b58:	83 f8 01             	cmp    eax,0x1
c0028b5b:	74 21                	je     c0028b7e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028b5d:	83 ec 0c             	sub    esp,0xc
c0028b60:	68 4c a9 02 c0       	push   0xc002a94c
c0028b65:	e8 bb 16 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028b6a:	83 c4 10             	add    esp,0x10
c0028b6d:	eb 0f                	jmp    c0028b7e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b75:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	89 10                	mov    DWORD PTR [eax],edx
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b85:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b8f:	83 c4 0c             	add    esp,0xc
c0028b92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028b94 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b9b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028b9c <DriverlessDevice::~DriverlessDevice()>:
c0028b9c:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c0028ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ba5:	89 10                	mov    DWORD PTR [eax],edx
c0028ba7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bab:	50                   	push   eax
c0028bac:	e8 dd af fe ff       	call   c0013b8e <Device::~Device()>
c0028bb1:	83 c4 04             	add    esp,0x4
c0028bb4:	90                   	nop
c0028bb5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028bb6 <DriverlessDevice::~DriverlessDevice()>:
c0028bb6:	83 ec 0c             	sub    esp,0xc
c0028bb9:	83 ec 0c             	sub    esp,0xc
c0028bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc0:	e8 d7 ff ff ff       	call   c0028b9c <DriverlessDevice::~DriverlessDevice()>
c0028bc5:	83 c4 10             	add    esp,0x10
c0028bc8:	83 ec 08             	sub    esp,0x8
c0028bcb:	68 58 01 00 00       	push   0x158
c0028bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd4:	e8 c2 9b fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0028bd9:	83 c4 10             	add    esp,0x10
c0028bdc:	83 c4 0c             	add    esp,0xc
c0028bdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028be0 <LinkedList<Device>::addElement(Device*)>:
c0028be0:	83 ec 0c             	sub    esp,0xc
c0028be3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028be8:	75 10                	jne    c0028bfa <LinkedList<Device>::addElement(Device*)+0x1a>
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	68 f0 a8 02 c0       	push   0xc002a8f0
c0028bf2:	e8 2e 16 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c00:	85 c0                	test   eax,eax
c0028c02:	74 3a                	je     c0028c3e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0b:	85 c0                	test   eax,eax
c0028c0d:	74 2f                	je     c0028c3e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c1a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c32:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028c3c:	eb 68                	jmp    c0028ca6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c44:	85 c0                	test   eax,eax
c0028c46:	75 4e                	jne    c0028c96 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c4f:	85 c0                	test   eax,eax
c0028c51:	75 43                	jne    c0028c96 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c5b:	89 10                	mov    DWORD PTR [eax],edx
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c6f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c80:	85 c0                	test   eax,eax
c0028c82:	74 22                	je     c0028ca6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	68 12 a9 02 c0       	push   0xc002a912
c0028c8c:	e8 94 15 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028c91:	83 c4 10             	add    esp,0x10
c0028c94:	eb 10                	jmp    c0028ca6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	68 1c a9 02 c0       	push   0xc002a91c
c0028c9e:	e8 82 15 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028caa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cad:	8d 50 01             	lea    edx,[eax+0x1]
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cb7:	90                   	nop
c0028cb8:	83 c4 0c             	add    esp,0xc
c0028cbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028cbc <LinkedList<Device>::LinkedList()>:
c0028cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cfc:	90                   	nop
c0028cfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028cfe <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d04:	85 c0                	test   eax,eax
c0028d06:	75 0e                	jne    c0028d16 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d0f:	85 c0                	test   eax,eax
c0028d11:	75 03                	jne    c0028d16 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028d13:	b0 01                	mov    al,0x1
c0028d15:	c3                   	ret    
c0028d16:	b0 00                	mov    al,0x0
c0028d18:	90                   	nop
c0028d19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028d1a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d20:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028d22 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028d22:	83 ec 0c             	sub    esp,0xc
c0028d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d2b:	85 c0                	test   eax,eax
c0028d2d:	75 15                	jne    c0028d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028d2f:	83 ec 0c             	sub    esp,0xc
c0028d32:	68 28 a9 02 c0       	push   0xc002a928
c0028d37:	e8 e9 14 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028d3c:	83 c4 10             	add    esp,0x10
c0028d3f:	e9 88 00 00 00       	jmp    c0028dcc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d4e:	85 c0                	test   eax,eax
c0028d50:	0f 95 c0             	setne  al
c0028d53:	84 c0                	test   al,al
c0028d55:	74 10                	je     c0028d67 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028d57:	83 ec 0c             	sub    esp,0xc
c0028d5a:	68 73 a9 02 c0       	push   0xc002a973
c0028d5f:	e8 c1 14 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028d64:	83 c4 10             	add    esp,0x10
c0028d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d70:	85 c0                	test   eax,eax
c0028d72:	0f 94 c0             	sete   al
c0028d75:	84 c0                	test   al,al
c0028d77:	74 33                	je     c0028dac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d95:	83 f8 01             	cmp    eax,0x1
c0028d98:	74 21                	je     c0028dbb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	68 4c a9 02 c0       	push   0xc002a94c
c0028da2:	e8 7e 14 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	eb 0f                	jmp    c0028dbb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028db2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db9:	89 10                	mov    DWORD PTR [eax],edx
c0028dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028dc2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028dcc:	83 c4 0c             	add    esp,0xc
c0028dcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028dd0:	83 ec 0c             	sub    esp,0xc
c0028dd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028dd8:	75 10                	jne    c0028dea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	68 f0 a8 02 c0       	push   0xc002a8f0
c0028de2:	e8 3e 14 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028de7:	83 c4 10             	add    esp,0x10
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0028df0:	85 c0                	test   eax,eax
c0028df2:	74 34                	je     c0028e28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dfb:	85 c0                	test   eax,eax
c0028dfd:	74 29                	je     c0028e28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028e0a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028e15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e1f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028e26:	eb 65                	jmp    c0028e8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e2e:	85 c0                	test   eax,eax
c0028e30:	75 4b                	jne    c0028e7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e39:	85 c0                	test   eax,eax
c0028e3b:	75 40                	jne    c0028e7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028e45:	89 10                	mov    DWORD PTR [eax],edx
c0028e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028e4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e59:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e67:	85 c0                	test   eax,eax
c0028e69:	74 22                	je     c0028e8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028e6b:	83 ec 0c             	sub    esp,0xc
c0028e6e:	68 12 a9 02 c0       	push   0xc002a912
c0028e73:	e8 ad 13 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028e78:	83 c4 10             	add    esp,0x10
c0028e7b:	eb 10                	jmp    c0028e8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028e7d:	83 ec 0c             	sub    esp,0xc
c0028e80:	68 1c a9 02 c0       	push   0xc002a91c
c0028e85:	e8 9b 13 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028e8a:	83 c4 10             	add    esp,0x10
c0028e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e94:	8d 50 01             	lea    edx,[eax+0x1]
c0028e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e9e:	90                   	nop
c0028e9f:	83 c4 0c             	add    esp,0xc
c0028ea2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028ea4 <ACPI::~ACPI()>:
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0028eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb0:	89 10                	mov    DWORD PTR [eax],edx
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	50                   	push   eax
c0028eba:	e8 cf ac fe ff       	call   c0013b8e <Device::~Device()>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	90                   	nop
c0028ec3:	83 c4 0c             	add    esp,0xc
c0028ec6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ec8 <ACPI::~ACPI()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed2:	e8 cd ff ff ff       	call   c0028ea4 <ACPI::~ACPI()>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	83 ec 08             	sub    esp,0x8
c0028edd:	68 64 12 00 00       	push   0x1264
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 b0 98 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 c4 0c             	add    esp,0xc
c0028ef1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028ef2 <LinkedList<Device>::~LinkedList()>:
c0028ef2:	90                   	nop
c0028ef3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028ef4 <LinkedList<Device>::isEmpty()>:
c0028ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ef8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028efa:	85 c0                	test   eax,eax
c0028efc:	75 0e                	jne    c0028f0c <LinkedList<Device>::isEmpty()+0x18>
c0028efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f05:	85 c0                	test   eax,eax
c0028f07:	75 03                	jne    c0028f0c <LinkedList<Device>::isEmpty()+0x18>
c0028f09:	b0 01                	mov    al,0x1
c0028f0b:	c3                   	ret    
c0028f0c:	b0 00                	mov    al,0x0
c0028f0e:	90                   	nop
c0028f0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028f10 <LinkedList<Device>::getFirstElement()>:
c0028f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f14:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f16:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028f18 <LinkedList<Device>::removeFirst()>:
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f21:	85 c0                	test   eax,eax
c0028f23:	75 15                	jne    c0028f3a <LinkedList<Device>::removeFirst()+0x22>
c0028f25:	83 ec 0c             	sub    esp,0xc
c0028f28:	68 28 a9 02 c0       	push   0xc002a928
c0028f2d:	e8 f3 12 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028f32:	83 c4 10             	add    esp,0x10
c0028f35:	e9 87 00 00 00       	jmp    c0028fc1 <LinkedList<Device>::removeFirst()+0xa9>
c0028f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f41:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028f47:	85 c0                	test   eax,eax
c0028f49:	74 10                	je     c0028f5b <LinkedList<Device>::removeFirst()+0x43>
c0028f4b:	83 ec 0c             	sub    esp,0xc
c0028f4e:	68 73 a9 02 c0       	push   0xc002a973
c0028f53:	e8 cd 12 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028f58:	83 c4 10             	add    esp,0x10
c0028f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f61:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028f67:	85 c0                	test   eax,eax
c0028f69:	75 33                	jne    c0028f9e <LinkedList<Device>::removeFirst()+0x86>
c0028f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f87:	83 f8 01             	cmp    eax,0x1
c0028f8a:	74 24                	je     c0028fb0 <LinkedList<Device>::removeFirst()+0x98>
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	68 4c a9 02 c0       	push   0xc002a94c
c0028f94:	e8 8c 12 ff ff       	call   c001a225 <Krnl::panic(char const*)>
c0028f99:	83 c4 10             	add    esp,0x10
c0028f9c:	eb 12                	jmp    c0028fb0 <LinkedList<Device>::removeFirst()+0x98>
c0028f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fa4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	89 10                	mov    DWORD PTR [eax],edx
c0028fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fb7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fc1:	83 c4 0c             	add    esp,0xc
c0028fc4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028fc6 <CPU::~CPU()>:
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	ba 58 c0 02 c0       	mov    edx,0xc002c058
c0028fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd2:	89 10                	mov    DWORD PTR [eax],edx
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	83 ec 0c             	sub    esp,0xc
c0028fdb:	50                   	push   eax
c0028fdc:	e8 ad ab fe ff       	call   c0013b8e <Device::~Device()>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	90                   	nop
c0028fe5:	83 c4 0c             	add    esp,0xc
c0028fe8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028fea <CPU::~CPU()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	83 ec 0c             	sub    esp,0xc
c0028ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff4:	e8 cd ff ff ff       	call   c0028fc6 <CPU::~CPU()>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	83 ec 08             	sub    esp,0x8
c0028fff:	68 98 11 00 00       	push   0x1198
c0029004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029008:	e8 8e 97 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	83 c4 0c             	add    esp,0xc
c0029013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029014 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029014:	90                   	nop
c0029015:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029016 <ThreadControlBlock::ThreadControlBlock()>:
c0029016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002901a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029025:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002902c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029030:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002903b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029046:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002904d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029051:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029059:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002905d:	90                   	nop
c002905e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029060 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002906a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002906e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029075:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029079:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029084:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002908a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002908e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029099:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290a0:	90                   	nop
c00290a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00290a2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00290a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00290a9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00290aa <Vm::_FPUState::_FPUState()>:
c00290aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290ae:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00290b5:	90                   	nop
c00290b6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00290b8 <PCI::~PCI()>:
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	ba a4 cb 02 c0       	mov    edx,0xc002cba4
c00290c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c4:	89 10                	mov    DWORD PTR [eax],edx
c00290c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	50                   	push   eax
c00290ce:	e8 8b a4 fe ff       	call   c001355e <Bus::~Bus()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	90                   	nop
c00290d7:	83 c4 0c             	add    esp,0xc
c00290da:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00290dc <PCI::~PCI()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	83 ec 0c             	sub    esp,0xc
c00290e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e6:	e8 cd ff ff ff       	call   c00290b8 <PCI::~PCI()>
c00290eb:	83 c4 10             	add    esp,0x10
c00290ee:	83 ec 08             	sub    esp,0x8
c00290f1:	68 5c 01 00 00       	push   0x15c
c00290f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fa:	e8 9c 96 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00290ff:	83 c4 10             	add    esp,0x10
c0029102:	83 c4 0c             	add    esp,0xc
c0029105:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029106 <IDE::~IDE()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	ba 58 cc 02 c0       	mov    edx,0xc002cc58
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 10                	mov    DWORD PTR [eax],edx
c0029114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	50                   	push   eax
c002911c:	e8 83 af fe ff       	call   c00140a4 <HardDiskController::~HardDiskController()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	90                   	nop
c0029125:	83 c4 0c             	add    esp,0xc
c0029128:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002912a <IDE::~IDE()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	83 ec 0c             	sub    esp,0xc
c0029130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029134:	e8 cd ff ff ff       	call   c0029106 <IDE::~IDE()>
c0029139:	83 c4 10             	add    esp,0x10
c002913c:	83 ec 08             	sub    esp,0x8
c002913f:	68 70 02 00 00       	push   0x270
c0029144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029148:	e8 4e 96 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	83 c4 0c             	add    esp,0xc
c0029153:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029154 <SATABus::~SATABus()>:
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	ba d0 cc 02 c0       	mov    edx,0xc002ccd0
c002915c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029160:	89 10                	mov    DWORD PTR [eax],edx
c0029162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	50                   	push   eax
c002916a:	e8 35 af fe ff       	call   c00140a4 <HardDiskController::~HardDiskController()>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	90                   	nop
c0029173:	83 c4 0c             	add    esp,0xc
c0029176:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029178 <SATABus::~SATABus()>:
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	83 ec 0c             	sub    esp,0xc
c002917e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029182:	e8 cd ff ff ff       	call   c0029154 <SATABus::~SATABus()>
c0029187:	83 c4 10             	add    esp,0x10
c002918a:	83 ec 08             	sub    esp,0x8
c002918d:	68 64 01 00 00       	push   0x164
c0029192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029196:	e8 00 96 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002919b:	83 c4 10             	add    esp,0x10
c002919e:	83 c4 0c             	add    esp,0xc
c00291a1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00291a2 <ATA::~ATA()>:
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	ba 48 cd 02 c0       	mov    edx,0xc002cd48
c00291aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ae:	89 10                	mov    DWORD PTR [eax],edx
c00291b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	50                   	push   eax
c00291b8:	e8 c9 af fe ff       	call   c0014186 <PhysicalDisk::~PhysicalDisk()>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	90                   	nop
c00291c1:	83 c4 0c             	add    esp,0xc
c00291c4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00291c6 <ATA::~ATA()>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	83 ec 0c             	sub    esp,0xc
c00291cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d0:	e8 cd ff ff ff       	call   c00291a2 <ATA::~ATA()>
c00291d5:	83 c4 10             	add    esp,0x10
c00291d8:	83 ec 08             	sub    esp,0x8
c00291db:	68 7c 01 00 00       	push   0x17c
c00291e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e4:	e8 b2 95 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00291e9:	83 c4 10             	add    esp,0x10
c00291ec:	83 c4 0c             	add    esp,0xc
c00291ef:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00291f0 <ATAPI::~ATAPI()>:
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	ba 80 cd 02 c0       	mov    edx,0xc002cd80
c00291f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fc:	89 10                	mov    DWORD PTR [eax],edx
c00291fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	50                   	push   eax
c0029206:	e8 7b af fe ff       	call   c0014186 <PhysicalDisk::~PhysicalDisk()>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	90                   	nop
c002920f:	83 c4 0c             	add    esp,0xc
c0029212:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029214 <ATAPI::~ATAPI()>:
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	83 ec 0c             	sub    esp,0xc
c002921a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921e:	e8 cd ff ff ff       	call   c00291f0 <ATAPI::~ATAPI()>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	83 ec 08             	sub    esp,0x8
c0029229:	68 80 01 00 00       	push   0x180
c002922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029232:	e8 64 95 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029237:	83 c4 10             	add    esp,0x10
c002923a:	83 c4 0c             	add    esp,0xc
c002923d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002923e <SATA::~SATA()>:
c002923e:	83 ec 0c             	sub    esp,0xc
c0029241:	ba 34 ce 02 c0       	mov    edx,0xc002ce34
c0029246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924a:	89 10                	mov    DWORD PTR [eax],edx
c002924c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029250:	83 ec 0c             	sub    esp,0xc
c0029253:	50                   	push   eax
c0029254:	e8 2d af fe ff       	call   c0014186 <PhysicalDisk::~PhysicalDisk()>
c0029259:	83 c4 10             	add    esp,0x10
c002925c:	90                   	nop
c002925d:	83 c4 0c             	add    esp,0xc
c0029260:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029262 <SATA::~SATA()>:
c0029262:	83 ec 0c             	sub    esp,0xc
c0029265:	83 ec 0c             	sub    esp,0xc
c0029268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002926c:	e8 cd ff ff ff       	call   c002923e <SATA::~SATA()>
c0029271:	83 c4 10             	add    esp,0x10
c0029274:	83 ec 08             	sub    esp,0x8
c0029277:	68 7c 01 00 00       	push   0x17c
c002927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029280:	e8 16 95 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029285:	83 c4 10             	add    esp,0x10
c0029288:	83 c4 0c             	add    esp,0xc
c002928b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002928c <SATAPI::~SATAPI()>:
c002928c:	83 ec 0c             	sub    esp,0xc
c002928f:	ba 10 cf 02 c0       	mov    edx,0xc002cf10
c0029294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029298:	89 10                	mov    DWORD PTR [eax],edx
c002929a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929e:	83 ec 0c             	sub    esp,0xc
c00292a1:	50                   	push   eax
c00292a2:	e8 df ae fe ff       	call   c0014186 <PhysicalDisk::~PhysicalDisk()>
c00292a7:	83 c4 10             	add    esp,0x10
c00292aa:	90                   	nop
c00292ab:	83 c4 0c             	add    esp,0xc
c00292ae:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00292b0 <SATAPI::~SATAPI()>:
c00292b0:	83 ec 0c             	sub    esp,0xc
c00292b3:	83 ec 0c             	sub    esp,0xc
c00292b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ba:	e8 cd ff ff ff       	call   c002928c <SATAPI::~SATAPI()>
c00292bf:	83 c4 10             	add    esp,0x10
c00292c2:	83 ec 08             	sub    esp,0x8
c00292c5:	68 80 01 00 00       	push   0x180
c00292ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ce:	e8 c8 94 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00292d3:	83 c4 10             	add    esp,0x10
c00292d6:	83 c4 0c             	add    esp,0xc
c00292d9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00292da <AVX::~AVX()>:
c00292da:	83 ec 0c             	sub    esp,0xc
c00292dd:	ba 50 cf 02 c0       	mov    edx,0xc002cf50
c00292e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e6:	89 10                	mov    DWORD PTR [eax],edx
c00292e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ec:	83 ec 0c             	sub    esp,0xc
c00292ef:	50                   	push   eax
c00292f0:	e8 15 af fe ff       	call   c001420a <FPU::~FPU()>
c00292f5:	83 c4 10             	add    esp,0x10
c00292f8:	90                   	nop
c00292f9:	83 c4 0c             	add    esp,0xc
c00292fc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00292fe <AVX::~AVX()>:
c00292fe:	83 ec 0c             	sub    esp,0xc
c0029301:	83 ec 0c             	sub    esp,0xc
c0029304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029308:	e8 cd ff ff ff       	call   c00292da <AVX::~AVX()>
c002930d:	83 c4 10             	add    esp,0x10
c0029310:	83 ec 08             	sub    esp,0x8
c0029313:	68 58 01 00 00       	push   0x158
c0029318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002931c:	e8 7a 94 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029321:	83 c4 10             	add    esp,0x10
c0029324:	83 c4 0c             	add    esp,0xc
c0029327:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029328 <MMX::~MMX()>:
c0029328:	83 ec 0c             	sub    esp,0xc
c002932b:	ba 90 cf 02 c0       	mov    edx,0xc002cf90
c0029330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029334:	89 10                	mov    DWORD PTR [eax],edx
c0029336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933a:	83 ec 0c             	sub    esp,0xc
c002933d:	50                   	push   eax
c002933e:	e8 c7 ae fe ff       	call   c001420a <FPU::~FPU()>
c0029343:	83 c4 10             	add    esp,0x10
c0029346:	90                   	nop
c0029347:	83 c4 0c             	add    esp,0xc
c002934a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002934c <MMX::~MMX()>:
c002934c:	83 ec 0c             	sub    esp,0xc
c002934f:	83 ec 0c             	sub    esp,0xc
c0029352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029356:	e8 cd ff ff ff       	call   c0029328 <MMX::~MMX()>
c002935b:	83 c4 10             	add    esp,0x10
c002935e:	83 ec 08             	sub    esp,0x8
c0029361:	68 58 01 00 00       	push   0x158
c0029366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002936a:	e8 2c 94 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002936f:	83 c4 10             	add    esp,0x10
c0029372:	83 c4 0c             	add    esp,0xc
c0029375:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029376 <SSE::~SSE()>:
c0029376:	83 ec 0c             	sub    esp,0xc
c0029379:	ba d0 cf 02 c0       	mov    edx,0xc002cfd0
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	89 10                	mov    DWORD PTR [eax],edx
c0029384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029388:	83 ec 0c             	sub    esp,0xc
c002938b:	50                   	push   eax
c002938c:	e8 79 ae fe ff       	call   c001420a <FPU::~FPU()>
c0029391:	83 c4 10             	add    esp,0x10
c0029394:	90                   	nop
c0029395:	83 c4 0c             	add    esp,0xc
c0029398:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002939a <SSE::~SSE()>:
c002939a:	83 ec 0c             	sub    esp,0xc
c002939d:	83 ec 0c             	sub    esp,0xc
c00293a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a4:	e8 cd ff ff ff       	call   c0029376 <SSE::~SSE()>
c00293a9:	83 c4 10             	add    esp,0x10
c00293ac:	83 ec 08             	sub    esp,0x8
c00293af:	68 58 01 00 00       	push   0x158
c00293b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293b8:	e8 de 93 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00293bd:	83 c4 10             	add    esp,0x10
c00293c0:	83 c4 0c             	add    esp,0xc
c00293c3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00293c4 <x87::~x87()>:
c00293c4:	83 ec 0c             	sub    esp,0xc
c00293c7:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c00293cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d0:	89 10                	mov    DWORD PTR [eax],edx
c00293d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d6:	83 ec 0c             	sub    esp,0xc
c00293d9:	50                   	push   eax
c00293da:	e8 2b ae fe ff       	call   c001420a <FPU::~FPU()>
c00293df:	83 c4 10             	add    esp,0x10
c00293e2:	90                   	nop
c00293e3:	83 c4 0c             	add    esp,0xc
c00293e6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00293e8 <x87::~x87()>:
c00293e8:	83 ec 0c             	sub    esp,0xc
c00293eb:	83 ec 0c             	sub    esp,0xc
c00293ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f2:	e8 cd ff ff ff       	call   c00293c4 <x87::~x87()>
c00293f7:	83 c4 10             	add    esp,0x10
c00293fa:	83 ec 08             	sub    esp,0x8
c00293fd:	68 58 01 00 00       	push   0x158
c0029402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029406:	e8 90 93 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002940b:	83 c4 10             	add    esp,0x10
c002940e:	83 c4 0c             	add    esp,0xc
c0029411:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029412 <IOAPIC::~IOAPIC()>:
c0029412:	83 ec 0c             	sub    esp,0xc
c0029415:	ba 68 d1 02 c0       	mov    edx,0xc002d168
c002941a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941e:	89 10                	mov    DWORD PTR [eax],edx
c0029420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029424:	83 ec 0c             	sub    esp,0xc
c0029427:	50                   	push   eax
c0029428:	e8 61 a7 fe ff       	call   c0013b8e <Device::~Device()>
c002942d:	83 c4 10             	add    esp,0x10
c0029430:	90                   	nop
c0029431:	83 c4 0c             	add    esp,0xc
c0029434:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029436 <IOAPIC::~IOAPIC()>:
c0029436:	83 ec 0c             	sub    esp,0xc
c0029439:	83 ec 0c             	sub    esp,0xc
c002943c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029440:	e8 cd ff ff ff       	call   c0029412 <IOAPIC::~IOAPIC()>
c0029445:	83 c4 10             	add    esp,0x10
c0029448:	83 ec 08             	sub    esp,0x8
c002944b:	68 68 01 00 00       	push   0x168
c0029450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029454:	e8 42 93 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029459:	83 c4 10             	add    esp,0x10
c002945c:	83 c4 0c             	add    esp,0xc
c002945f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029460 <APIC::~APIC()>:
c0029460:	83 ec 0c             	sub    esp,0xc
c0029463:	ba 20 d1 02 c0       	mov    edx,0xc002d120
c0029468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946c:	89 10                	mov    DWORD PTR [eax],edx
c002946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029472:	83 ec 0c             	sub    esp,0xc
c0029475:	50                   	push   eax
c0029476:	e8 59 b2 fe ff       	call   c00146d4 <InterruptController::~InterruptController()>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	90                   	nop
c002947f:	83 c4 0c             	add    esp,0xc
c0029482:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029484 <APIC::~APIC()>:
c0029484:	83 ec 0c             	sub    esp,0xc
c0029487:	83 ec 0c             	sub    esp,0xc
c002948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002948e:	e8 cd ff ff ff       	call   c0029460 <APIC::~APIC()>
c0029493:	83 c4 10             	add    esp,0x10
c0029496:	83 ec 08             	sub    esp,0x8
c0029499:	68 58 21 00 00       	push   0x2158
c002949e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294a2:	e8 f4 92 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00294a7:	83 c4 10             	add    esp,0x10
c00294aa:	83 c4 0c             	add    esp,0xc
c00294ad:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00294ae <PIC::~PIC()>:
c00294ae:	83 ec 0c             	sub    esp,0xc
c00294b1:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c00294b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ba:	89 10                	mov    DWORD PTR [eax],edx
c00294bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c0:	83 ec 0c             	sub    esp,0xc
c00294c3:	50                   	push   eax
c00294c4:	e8 0b b2 fe ff       	call   c00146d4 <InterruptController::~InterruptController()>
c00294c9:	83 c4 10             	add    esp,0x10
c00294cc:	90                   	nop
c00294cd:	83 c4 0c             	add    esp,0xc
c00294d0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00294d2 <PIC::~PIC()>:
c00294d2:	83 ec 0c             	sub    esp,0xc
c00294d5:	83 ec 0c             	sub    esp,0xc
c00294d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294dc:	e8 cd ff ff ff       	call   c00294ae <PIC::~PIC()>
c00294e1:	83 c4 10             	add    esp,0x10
c00294e4:	83 ec 08             	sub    esp,0x8
c00294e7:	68 58 21 00 00       	push   0x2158
c00294ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294f0:	e8 a6 92 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00294f5:	83 c4 10             	add    esp,0x10
c00294f8:	83 c4 0c             	add    esp,0xc
c00294fb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00294fc <APICTimer::~APICTimer()>:
c00294fc:	83 ec 0c             	sub    esp,0xc
c00294ff:	ba 0c d2 02 c0       	mov    edx,0xc002d20c
c0029504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029508:	89 10                	mov    DWORD PTR [eax],edx
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	83 ec 0c             	sub    esp,0xc
c0029511:	50                   	push   eax
c0029512:	e8 1b d2 fe ff       	call   c0016732 <Timer::~Timer()>
c0029517:	83 c4 10             	add    esp,0x10
c002951a:	90                   	nop
c002951b:	83 c4 0c             	add    esp,0xc
c002951e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029520 <APICTimer::~APICTimer()>:
c0029520:	83 ec 0c             	sub    esp,0xc
c0029523:	83 ec 0c             	sub    esp,0xc
c0029526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002952a:	e8 cd ff ff ff       	call   c00294fc <APICTimer::~APICTimer()>
c002952f:	83 c4 10             	add    esp,0x10
c0029532:	83 ec 08             	sub    esp,0x8
c0029535:	68 60 01 00 00       	push   0x160
c002953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002953e:	e8 58 92 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029543:	83 c4 10             	add    esp,0x10
c0029546:	83 c4 0c             	add    esp,0xc
c0029549:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002954a <PIT::~PIT()>:
c002954a:	83 ec 0c             	sub    esp,0xc
c002954d:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c0029552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029556:	89 10                	mov    DWORD PTR [eax],edx
c0029558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955c:	83 ec 0c             	sub    esp,0xc
c002955f:	50                   	push   eax
c0029560:	e8 cd d1 fe ff       	call   c0016732 <Timer::~Timer()>
c0029565:	83 c4 10             	add    esp,0x10
c0029568:	90                   	nop
c0029569:	83 c4 0c             	add    esp,0xc
c002956c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002956e <PIT::~PIT()>:
c002956e:	83 ec 0c             	sub    esp,0xc
c0029571:	83 ec 0c             	sub    esp,0xc
c0029574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029578:	e8 cd ff ff ff       	call   c002954a <PIT::~PIT()>
c002957d:	83 c4 10             	add    esp,0x10
c0029580:	83 ec 08             	sub    esp,0x8
c0029583:	68 5c 01 00 00       	push   0x15c
c0029588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002958c:	e8 0a 92 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029591:	83 c4 10             	add    esp,0x10
c0029594:	83 c4 0c             	add    esp,0xc
c0029597:	c3                   	ret    
