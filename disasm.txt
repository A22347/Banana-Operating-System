
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fb 01 c0       	mov    eax,0xc001fbf4
c0000025:	3d f4 fb 01 c0       	cmp    eax,0xc001fbf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fb 01 c0       	push   0xc001fbf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fb 01 c0       	mov    eax,0xc001fbf4
c0000051:	2d f4 fb 01 c0       	sub    eax,0xc001fbf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fb 01 c0       	push   0xc001fbf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 98 ce 01 c0       	mov    ebx,0xc001ce98
c0000097:	81 eb 94 ce 01 c0    	sub    ebx,0xc001ce94
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 94 ce 01 c0       	mov    esi,0xc001ce94
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fb 01 c0       	push   0xc001fbf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 f4 fb 01 c0       	push   0xc001fbf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 30 2e 01 00       	call   c00130e0 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 16 a1 00 00       	call   c000a3de <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 0e 2e 01 00       	call   c00130e0 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 17 33 01 00       	call   c0013608 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 66 39 01 00       	call   c0013c60 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 ec fe 00 00       	jmp    c001026e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 a0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3160],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3160],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 a0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3160],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 a0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3160],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 a0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3160],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 a4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe305c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 06 53 01 00       	jmp    c0016ff0 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 34 53 01 00       	jmp    c0017034 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 59 53 01 00       	jmp    c0017078 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 00 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f00]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 00 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f00]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba bc cf 01 c0       	mov    edx,0xc001cfbc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 c2 cf 01 c0       	mov    eax,0xc001cfc2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 80 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f80]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 cb cf 01 c0       	mov    eax,0xc001cfcb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 00 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f00]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 50 d0 01 c0       	mov    eax,0xc001d050
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 40 d0 01 c0       	mov    ebx,0xc001d040
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 20 d0 01 c0       	mov    edx,0xc001d020
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 30 d0 01 c0       	mov    edx,0xc001d030
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba d2 cf 01 c0       	mov    edx,0xc001cfd2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba de cf 01 c0       	mov    edx,0xc001cfde
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba f2 cf 01 c0       	mov    edx,0xc001cff2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 20 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d420
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 20 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d420
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 20 d2 01 c0       	mov    eax,0xc001d220
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 60 d1 01 c0       	mov    eax,0xc001d160
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 20 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ee0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 4d 19 01 00       	call   c00178cc <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 20 d5 01 c0       	push   0xc001d520
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 20 d5 01 c0       	push   0xc001d520
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 23 d5 01 c0       	push   0xc001d523
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 2a d5 01 c0       	push   0xc001d52a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 86 51 00 00       	call   c000bb5e <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 31 d5 01 c0       	push   0xc001d531
c0006a09:	e8 fd 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 4a d5 01 c0       	push   0xc001d54a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 fa c9 00 00       	call   c0013430 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 0d cc 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 ac 40 01 c0       	push   0xc00140ac
c0006a5a:	52                   	push   edx
c0006a5b:	e8 f8 cb 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 48 d6 01 c0       	push   0xc001d648
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 92 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006a79:	e8 0d da 00 00       	call   c001448b <Vm::initialise8086()>
c0006a7e:	e8 21 3f 00 00       	call   c000a9a4 <Fs::initVFS()>
c0006a83:	c7 04 24 57 d5 01 c0 	mov    DWORD PTR [esp],0xc001d557
c0006a8a:	e8 7c 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 48 d6 01 c0       	push   0xc001d648
c0006aae:	e8 58 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006ab3:	e8 2e 96 00 00       	call   c00100e6 <Krnl::loadSystemEnv()>
c0006ab8:	e8 8b 98 00 00       	call   c0010348 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 71 d5 01 c0       	push   0xc001d571
c0006ac7:	68 7a d5 01 c0       	push   0xc001d57a
c0006acc:	e8 f5 ae 00 00       	call   c00119c6 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 d7 49 00 00       	call   c000b4b0 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 6c d6 01 c0 	mov    DWORD PTR [esp],0xc001d66c
c0006ae0:	e8 26 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 65 50 00 00       	call   c000bb5c <Device::loadDriversForAll()>
c0006af7:	c7 04 24 82 d5 01 c0 	mov    DWORD PTR [esp],0xc001d582
c0006afe:	e8 08 91 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 93 d5 01 c0       	push   0xc001d593
c0006b12:	e8 36 c3 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 5e c5 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 47 cf 00 00       	call   c0013a74 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 af d5 01 c0       	push   0xc001d5af
c0006b41:	50                   	push   eax
c0006b42:	e8 91 50 00 00       	call   c000bbd8 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba b8 d6 01 c0       	mov    edx,0xc001d6b8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 65 52 01 00       	call   c001be96 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 cc 84 00 00       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 a5 84 00 00       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 83 84 00 00       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 61 84 00 00       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 6f 83 00 00       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 4a 83 00 00       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 cf 50 01 00       	call   c001be50 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 cc 4d 01 00       	call   c001bb70 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 66 83 00 00       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 b8 d5 01 c0       	push   0xc001d5b8
c0006e14:	e8 6a 94 00 00       	call   c0010283 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 be d5 01 c0       	push   0xc001d5be
c0006e4c:	e8 32 94 00 00       	call   c0010283 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 17 7d 00 00       	jmp    c000ebb0 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 c4 d5 01 c0       	push   0xc001d5c4
c0006eed:	0f 94 05 60 f8 01 c0 	sete   BYTE PTR ds:0xc001f860
c0006ef4:	e8 12 8d 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 39 78 00 00       	call   c000e748 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 22 4b 00 00       	call   c000ba40 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 dc d5 01 c0 	mov    DWORD PTR [esp],0xc001d5dc
c0006f37:	e8 cf 8c 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 9e 82 00 00       	call   c000f1f0 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 df 4a 00 00       	call   c000ba40 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 8c d6 01 c0       	push   0xc001d68c
c0006f7e:	e8 88 8c 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006f83:	e8 3a e6 00 00       	call   c00155c2 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 f6 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5f6
c0006f8f:	e8 77 8c 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 d0 c7 00 00       	call   c0013770 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 11 d6 01 c0       	push   0xc001d611
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 12 36 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 22 d6 01 c0       	push   0xc001d622
c000700e:	e8 70 92 00 00       	call   c0010283 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 2f d6 01 c0       	push   0xc001d62f
c0007023:	e8 5b 92 00 00       	call   c0010283 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 39 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d639
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 44 92 00 00       	jmp    c0010283 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 77 e0 00 00       	call   c001529c <HalSystemIdle()>
c0007225:	e8 28 52 01 00       	call   c001c452 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 00 bc 01 c0       	push   0xc001bc00
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 10 bc 01 c0       	push   0xc001bc10
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 1a bc 01 c0       	push   0xc001bc1a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 24 bc 01 c0       	push   0xc001bc24
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 2e bc 01 c0       	push   0xc001bc2e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 38 bc 01 c0       	push   0xc001bc38
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 42 bc 01 c0       	push   0xc001bc42
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 4c bc 01 c0       	push   0xc001bc4c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 56 bc 01 c0       	push   0xc001bc56
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 5e bc 01 c0       	push   0xc001bc5e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 68 bc 01 c0       	push   0xc001bc68
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 70 bc 01 c0       	push   0xc001bc70
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 78 bc 01 c0       	push   0xc001bc78
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 80 bc 01 c0       	push   0xc001bc80
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 88 bc 01 c0       	push   0xc001bc88
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 90 bc 01 c0       	push   0xc001bc90
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 9a bc 01 c0       	push   0xc001bc9a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 a4 bc 01 c0       	push   0xc001bca4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ae bc 01 c0       	push   0xc001bcae
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 48 bd 01 c0       	push   0xc001bd48
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 4f bd 01 c0       	push   0xc001bd4f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 3a bd 01 c0       	push   0xc001bd3a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 41 bd 01 c0       	push   0xc001bd41
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 b8 bc 01 c0       	push   0xc001bcb8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 c2 bc 01 c0       	push   0xc001bcc2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 cc bc 01 c0       	push   0xc001bccc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 d6 bc 01 c0       	push   0xc001bcd6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 e0 bc 01 c0       	push   0xc001bce0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 ea bc 01 c0       	push   0xc001bcea
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 f4 bc 01 c0       	push   0xc001bcf4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 fe bc 01 c0       	push   0xc001bcfe
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 08 bd 01 c0       	push   0xc001bd08
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 12 bd 01 c0       	push   0xc001bd12
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 1c bd 01 c0       	push   0xc001bd1c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 26 bd 01 c0       	push   0xc001bd26
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 30 bd 01 c0       	push   0xc001bd30
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 e1 bd 01 c0       	push   0xc001bde1
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 eb bd 01 c0       	push   0xc001bdeb
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 f5 bd 01 c0       	push   0xc001bdf5
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 ff bd 01 c0       	push   0xc001bdff
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 09 be 01 c0       	push   0xc001be09
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 13 be 01 c0       	push   0xc001be13
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 1d be 01 c0       	push   0xc001be1d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 27 be 01 c0       	push   0xc001be27
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 56 bc 01 c0       	push   0xc001bc56
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 48 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f848
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 48 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f848
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 48 f8 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f848,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 48 f8 01 c0       	mov    eax,ds:0xc001f848
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 dc d6 01 c0       	push   0xc001d6dc
c000770e:	e8 f0 2e 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 0c d7 01 c0       	push   0xc001d70c
c000772d:	e8 51 8b 00 00       	call   c0010283 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 11 d7 01 c0       	push   0xc001d711
c0007743:	e8 3b 8b 00 00       	call   c0010283 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 18 d7 01 c0       	push   0xc001d718
c0007862:	e8 9c 2d 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 31 83 00 00       	call   c000fb9d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 4c 4b 01 00       	call   c001c3ea <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 30 d7 01 c0       	push   0xc001d730
c000792c:	e8 52 89 00 00       	call   c0010283 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 30 d7 01 c0       	push   0xc001d730
c0007993:	e8 eb 88 00 00       	call   c0010283 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 4c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f84c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 4c f8 01 c0    	add    eax,DWORD PTR ds:0xc001f84c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 4c f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f84c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 d5 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7d5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 00 88 00 00       	jmp    c0010283 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 0e 28 00 00       	call   c000a2fe <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 58 d7 01 c0       	push   0xc001d758
c0007aff:	e8 7f 87 00 00       	call   c0010283 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 eb d7 01 c0       	push   0xc001d7eb
c0007c18:	e8 e6 29 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 88 d7 01 c0       	push   0xc001d788
c0007ca4:	e8 5a 29 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ac d7 01 c0       	push   0xc001d7ac
c0007d40:	e8 be 28 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 11 d8 01 c0       	push   0xc001d811
c0007d76:	e8 88 28 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 03 d8 01 c0       	push   0xc001d803
c0007de5:	e8 99 84 00 00       	call   c0010283 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 13 26 00 00       	call   c000a50d <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 2d d8 01 c0       	push   0xc001d82d
c0007fa7:	e8 d7 82 00 00       	call   c0010283 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 83 b8 00 00       	call   c0013878 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 43 42 01 00       	call   c001c2d0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 4a d8 01 c0       	push   0xc001d84a
c00080a2:	e8 dc 81 00 00       	call   c0010283 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 9c 23 00 00       	call   c000a50d <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 d4 46 00 00       	call   c000c860 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 a2 e2 00 00       	call   c0016454 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0780]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0780]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 c5 df 00 00       	call   c00162e0 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 20 e0 00 00       	jmp    c00163e8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 84 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d884
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 6f 7e 00 00       	jmp    c0010283 <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 e8 2e 00 00       	jmp    c000b457 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 92 d8 01 c0       	mov    esi,0xc001d892
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 32 db 00 00       	call   c00163e8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 a3 d8 01 c0       	push   0xc001d8a3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 a9 d8 01 c0       	push   0xc001d8a9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 af d8 01 c0       	push   0xc001d8af
c0008b78:	e8 06 77 00 00       	call   c0010283 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba cc d9 01 c0       	mov    edx,0xc001d9cc
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f8 01 c0       	mov    eax,ds:0xc001f8c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 33 36 01 00       	call   c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba cc d9 01 c0       	mov    edx,0xc001d9cc
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 37 35 01 00       	call   c001c58c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 2b 35 01 00       	call   c001c594 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 31 34 01 00       	call   c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 a4 d9 01 c0       	push   0xc001d9a4
c00090a9:	e8 d5 71 00 00       	call   c0010283 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 31 14 00 00       	call   c000a50d <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 e5 13 00 00       	call   c000a50d <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 3a 34 01 00       	call   c001c58c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 c7 34 01 00       	call   c001c636 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 85 32 01 00       	call   c001c476 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 44 f8 01 c0       	push   0xc001f844
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 74 c4 01 c0       	push   0xc001c474
c0009206:	e8 b2 12 00 00       	call   c000a4bd <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f8c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 fc d9 01 c0       	push   0xc001d9fc
c00092ff:	e8 7f 6f 00 00       	call   c0010283 <KePanic(char const*)>
c0009304:	8b 3d c4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f8 01 c0       	mov    eax,ds:0xc001f8c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f8 01 c0       	mov    ds:0xc001f8c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f8cc
c00093bf:	03 05 d4 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8cc
c00093d5:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 8d db 01 c0       	push   0xc001db8d
c0009419:	e8 65 6e 00 00       	call   c0010283 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 a4 db 01 c0       	push   0xc001dba4
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8d0,ebx
c00094b7:	c6 05 d8 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f8d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f8 01 c0       	mov    ds:0xc001f8d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f8cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c00094e9:	f7 35 cc f8 01 c0    	div    DWORD PTR ds:0xc001f8cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 1c da 01 c0       	push   0xc001da1c
c0009521:	e8 5d 6d 00 00       	call   c0010283 <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 bb db 01 c0       	push   0xc001dbbb
c00095e8:	e8 96 6c 00 00       	call   c0010283 <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 40 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da40
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 42 6c 00 00       	jmp    c0010283 <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 d7 db 01 c0       	push   0xc001dbd7
c000964f:	e8 2f 6c 00 00       	call   c0010283 <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 f3 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbf3
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 e6 6b 00 00       	jmp    c0010283 <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 64 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da64
c00096bd:	e9 41 0f 00 00       	jmp    c000a603 <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 0d dc 01 c0       	push   0xc001dc0d
c000971e:	e8 e0 0e 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 88 da 01 c0       	push   0xc001da88
c0009969:	e8 95 0c 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 f0 da 01 c0       	push   0xc001daf0
c0009986:	e8 f8 68 00 00       	call   c0010283 <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 14 db 01 c0       	push   0xc001db14
c0009ae1:	e8 9d 67 00 00       	call   c0010283 <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 40 db 01 c0       	push   0xc001db40
c0009da4:	e8 da 64 00 00       	call   c0010283 <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 28             	sub    esp,0x28
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 e4 1c 00 00       	call   c000bcd4 <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 27 dc 01 c0       	push   0xc001dc27
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	fa                   	cli    
c000a099:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a09e:	40                   	inc    eax
c000a09f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a0a4:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a0a9:	83 ec 04             	sub    esp,0x4
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	6a 01                	push   0x1
c000a0b2:	50                   	push   eax
c000a0b3:	e8 b2 f6 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c000a0b8:	83 c4 10             	add    esp,0x10
c000a0bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a0c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a0c7:	b9 7d 00 02 c0       	mov    ecx,0xc002007d
c000a0cc:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a0d1:	29 d1                	sub    ecx,edx
c000a0d3:	89 ca                	mov    edx,ecx
c000a0d5:	81 c2 ff 0f 00 00    	add    edx,0xfff
c000a0db:	c1 ea 0c             	shr    edx,0xc
c000a0de:	39 d0                	cmp    eax,edx
c000a0e0:	73 50                	jae    c000a132 <VAS::VAS(bool)+0x314>
c000a0e2:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a0e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a0eb:	c1 e2 0c             	shl    edx,0xc
c000a0ee:	89 d1                	mov    ecx,edx
c000a0f0:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a0f5:	01 ca                	add    edx,ecx
c000a0f7:	83 ec 04             	sub    esp,0x4
c000a0fa:	52                   	push   edx
c000a0fb:	6a 01                	push   0x1
c000a0fd:	50                   	push   eax
c000a0fe:	e8 2b f4 ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000a103:	83 c4 10             	add    esp,0x10
c000a106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a10e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a110:	83 e0 fd             	and    eax,0xfffffffd
c000a113:	89 c2                	mov    edx,eax
c000a115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a119:	89 10                	mov    DWORD PTR [eax],edx
c000a11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a11f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a121:	83 c8 04             	or     eax,0x4
c000a124:	89 c2                	mov    edx,eax
c000a126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a12a:	89 10                	mov    DWORD PTR [eax],edx
c000a12c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a130:	eb 91                	jmp    c000a0c3 <VAS::VAS(bool)+0x2a5>
c000a132:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a137:	48                   	dec    eax
c000a138:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a13d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a142:	85 c0                	test   eax,eax
c000a144:	75 01                	jne    c000a147 <VAS::VAS(bool)+0x329>
c000a146:	fb                   	sti    
c000a147:	90                   	nop
c000a148:	83 c4 28             	add    esp,0x28
c000a14b:	5b                   	pop    ebx
c000a14c:	c3                   	ret    
c000a14d:	90                   	nop

c000a14e <VAS::evict(unsigned long)>:
c000a14e:	55                   	push   ebp
c000a14f:	57                   	push   edi
c000a150:	56                   	push   esi
c000a151:	53                   	push   ebx
c000a152:	83 ec 1c             	sub    esp,0x1c
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a15d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a161:	e8 60 f2 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a166:	8b 0d cc f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8cc
c000a16c:	89 c7                	mov    edi,eax
c000a16e:	85 c9                	test   ecx,ecx
c000a170:	7e 3e                	jle    c000a1b0 <VAS::evict(unsigned long)+0x62>
c000a172:	89 ee                	mov    esi,ebp
c000a174:	31 db                	xor    ebx,ebx
c000a176:	83 ec 0c             	sub    esp,0xc
c000a179:	57                   	push   edi
c000a17a:	e8 35 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a17f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a182:	01 d8                	add    eax,ebx
c000a184:	6a 01                	push   0x1
c000a186:	31 d2                	xor    edx,edx
c000a188:	43                   	inc    ebx
c000a189:	52                   	push   edx
c000a18a:	81 c6 00 02 00 00    	add    esi,0x200
c000a190:	50                   	push   eax
c000a191:	0f be 05 d8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8d8
c000a198:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a19f:	52                   	push   edx
c000a1a0:	e8 ef 2b 00 00       	call   c000cd94 <LogicalDisk::write(unsigned long long, int, void*)>
c000a1a5:	83 c4 20             	add    esp,0x20
c000a1a8:	39 1d cc f8 01 c0    	cmp    DWORD PTR ds:0xc001f8cc,ebx
c000a1ae:	7f c6                	jg     c000a176 <VAS::evict(unsigned long)+0x28>
c000a1b0:	83 ec 08             	sub    esp,0x8
c000a1b3:	c1 e7 0b             	shl    edi,0xb
c000a1b6:	55                   	push   ebp
c000a1b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1bb:	50                   	push   eax
c000a1bc:	e8 99 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a1c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1c3:	89 d1                	mov    ecx,edx
c000a1c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1cb:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1d1:	09 cf                	or     edi,ecx
c000a1d3:	89 38                	mov    DWORD PTR [eax],edi
c000a1d5:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1d8:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a1de:	e8 50 d8 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a1e3:	0f 20 d8             	mov    eax,cr3
c000a1e6:	0f 22 d8             	mov    cr3,eax
c000a1e9:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a1ee:	c7 44 24 40 35 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc35
c000a1f6:	8d 50 01             	lea    edx,[eax+0x1]
c000a1f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1fd:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a203:	83 c4 2c             	add    esp,0x2c
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	5d                   	pop    ebp
c000a20a:	e9 f4 03 00 00       	jmp    c000a603 <Dbg::kprintf(char const*, ...)>
c000a20f:	90                   	nop

c000a210 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a210:	55                   	push   ebp
c000a211:	57                   	push   edi
c000a212:	56                   	push   esi
c000a213:	53                   	push   ebx
c000a214:	83 ec 14             	sub    esp,0x14
c000a217:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a21b:	53                   	push   ebx
c000a21c:	68 46 dc 01 c0       	push   0xc001dc46
c000a221:	e8 dd 03 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a226:	83 c4 10             	add    esp,0x10
c000a229:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a22f:	74 21                	je     c000a252 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a231:	83 ec 08             	sub    esp,0x8
c000a234:	53                   	push   ebx
c000a235:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a239:	57                   	push   edi
c000a23a:	e8 1b f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	89 c6                	mov    esi,eax
c000a244:	85 c0                	test   eax,eax
c000a246:	74 0a                	je     c000a252 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a248:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a24a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a250:	74 0a                	je     c000a25c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a252:	31 c0                	xor    eax,eax
c000a254:	83 c4 0c             	add    esp,0xc
c000a257:	5b                   	pop    ebx
c000a258:	5e                   	pop    esi
c000a259:	5f                   	pop    edi
c000a25a:	5d                   	pop    ebp
c000a25b:	c3                   	ret    
c000a25c:	e8 34 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a261:	c1 ed 0b             	shr    ebp,0xb
c000a264:	8b 16                	mov    edx,DWORD PTR [esi]
c000a266:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a26c:	09 c2                	or     edx,eax
c000a26e:	81 ca 01 08 00 00    	or     edx,0x801
c000a274:	89 16                	mov    DWORD PTR [esi],edx
c000a276:	8b 35 cc f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8cc
c000a27c:	85 f6                	test   esi,esi
c000a27e:	7e 3e                	jle    c000a2be <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a280:	89 df                	mov    edi,ebx
c000a282:	31 f6                	xor    esi,esi
c000a284:	83 ec 0c             	sub    esp,0xc
c000a287:	55                   	push   ebp
c000a288:	e8 27 f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a28d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a290:	01 f0                	add    eax,esi
c000a292:	6a 01                	push   0x1
c000a294:	31 d2                	xor    edx,edx
c000a296:	46                   	inc    esi
c000a297:	52                   	push   edx
c000a298:	81 c7 00 02 00 00    	add    edi,0x200
c000a29e:	50                   	push   eax
c000a29f:	0f be 05 d8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8d8
c000a2a6:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a2ad:	51                   	push   ecx
c000a2ae:	e8 75 2a 00 00       	call   c000cd28 <LogicalDisk::read(unsigned long long, int, void*)>
c000a2b3:	83 c4 20             	add    esp,0x20
c000a2b6:	39 35 cc f8 01 c0    	cmp    DWORD PTR ds:0xc001f8cc,esi
c000a2bc:	7f c6                	jg     c000a284 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2be:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a2c3:	48                   	dec    eax
c000a2c4:	52                   	push   edx
c000a2c5:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a2ca:	50                   	push   eax
c000a2cb:	53                   	push   ebx
c000a2cc:	68 59 dc 01 c0       	push   0xc001dc59
c000a2d1:	e8 2d 03 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a2d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2d9:	e8 b8 f0 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a2de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	48                   	dec    eax
c000a2e7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a2ec:	85 c0                	test   eax,eax
c000a2ee:	75 01                	jne    c000a2f1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2f0:	fb                   	sti    
c000a2f1:	0f 20 d8             	mov    eax,cr3
c000a2f4:	0f 22 d8             	mov    cr3,eax
c000a2f7:	b0 01                	mov    al,0x1
c000a2f9:	e9 56 ff ff ff       	jmp    c000a254 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2fe <VAS::scanForEviction()>:
c000a2fe:	57                   	push   edi
c000a2ff:	31 ff                	xor    edi,edi
c000a301:	56                   	push   esi
c000a302:	53                   	push   ebx
c000a303:	83 ec 10             	sub    esp,0x10
c000a306:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a30a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a30d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a313:	75 0e                	jne    c000a323 <VAS::scanForEviction()+0x25>
c000a315:	89 da                	mov    edx,ebx
c000a317:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a31a:	c1 ea 16             	shr    edx,0x16
c000a31d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a321:	74 4e                	je     c000a371 <VAS::scanForEviction()+0x73>
c000a323:	53                   	push   ebx
c000a324:	56                   	push   esi
c000a325:	e8 30 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a32a:	5a                   	pop    edx
c000a32b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a32d:	59                   	pop    ecx
c000a32e:	89 d1                	mov    ecx,edx
c000a330:	81 e1 01 08 00 00    	and    ecx,0x801
c000a336:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a33c:	74 3e                	je     c000a37c <VAS::scanForEviction()+0x7e>
c000a33e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a344:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a34a:	76 2b                	jbe    c000a377 <VAS::scanForEviction()+0x79>
c000a34c:	47                   	inc    edi
c000a34d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a354:	83 ff 03             	cmp    edi,0x3
c000a357:	74 32                	je     c000a38b <VAS::scanForEviction()+0x8d>
c000a359:	31 db                	xor    ebx,ebx
c000a35b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a361:	75 c0                	jne    c000a323 <VAS::scanForEviction()+0x25>
c000a363:	89 da                	mov    edx,ebx
c000a365:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a368:	c1 ea 16             	shr    edx,0x16
c000a36b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a36f:	75 b2                	jne    c000a323 <VAS::scanForEviction()+0x25>
c000a371:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a377:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a37a:	eb 91                	jmp    c000a30d <VAS::scanForEviction()+0xf>
c000a37c:	f6 c2 20             	test   dl,0x20
c000a37f:	74 13                	je     c000a394 <VAS::scanForEviction()+0x96>
c000a381:	83 e2 df             	and    edx,0xffffffdf
c000a384:	89 10                	mov    DWORD PTR [eax],edx
c000a386:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a389:	eb b3                	jmp    c000a33e <VAS::scanForEviction()+0x40>
c000a38b:	83 c4 10             	add    esp,0x10
c000a38e:	31 c0                	xor    eax,eax
c000a390:	5b                   	pop    ebx
c000a391:	5e                   	pop    esi
c000a392:	5f                   	pop    edi
c000a393:	c3                   	ret    
c000a394:	83 ec 08             	sub    esp,0x8
c000a397:	89 d0                	mov    eax,edx
c000a399:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a39e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a3a2:	53                   	push   ebx
c000a3a3:	68 6e dc 01 c0       	push   0xc001dc6e
c000a3a8:	e8 56 02 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a3ad:	58                   	pop    eax
c000a3ae:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3b1:	5a                   	pop    edx
c000a3b2:	51                   	push   ecx
c000a3b3:	56                   	push   esi
c000a3b4:	e8 95 fd ff ff       	call   c000a14e <VAS::evict(unsigned long)>
c000a3b9:	5b                   	pop    ebx
c000a3ba:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3bd:	5f                   	pop    edi
c000a3be:	50                   	push   eax
c000a3bf:	68 82 dc 01 c0       	push   0xc001dc82
c000a3c4:	e8 3a 02 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a3c9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3d0:	83 c4 10             	add    esp,0x10
c000a3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3d7:	83 c4 10             	add    esp,0x10
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	c3                   	ret    

c000a3de <mapVASFirstTime>:
c000a3de:	55                   	push   ebp
c000a3df:	57                   	push   edi
c000a3e0:	56                   	push   esi
c000a3e1:	53                   	push   ebx
c000a3e2:	83 ec 0c             	sub    esp,0xc
c000a3e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3ea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3ed:	4a                   	dec    edx
c000a3ee:	0f 84 b1 00 00 00    	je     c000a4a5 <mapVASFirstTime+0xc7>
c000a3f4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3f7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3fa:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3ff:	c1 e5 15             	shl    ebp,0x15
c000a402:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a407:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a40d:	29 eb                	sub    ebx,ebp
c000a40f:	29 ef                	sub    edi,ebp
c000a411:	e8 7f d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a416:	83 ec 0c             	sub    esp,0xc
c000a419:	68 03 04 00 00       	push   0x403
c000a41e:	6a 01                	push   0x1
c000a420:	53                   	push   ebx
c000a421:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a427:	50                   	push   eax
c000a428:	56                   	push   esi
c000a429:	e8 c4 f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a42e:	83 c4 20             	add    esp,0x20
c000a431:	39 fb                	cmp    ebx,edi
c000a433:	75 dc                	jne    c000a411 <mapVASFirstTime+0x33>
c000a435:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a43a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a43f:	29 eb                	sub    ebx,ebp
c000a441:	29 ef                	sub    edi,ebp
c000a443:	e8 4d d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a448:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a44c:	19 d2                	sbb    edx,edx
c000a44e:	83 ec 0c             	sub    esp,0xc
c000a451:	83 e2 04             	and    edx,0x4
c000a454:	81 c2 03 04 00 00    	add    edx,0x403
c000a45a:	52                   	push   edx
c000a45b:	6a 01                	push   0x1
c000a45d:	53                   	push   ebx
c000a45e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a464:	50                   	push   eax
c000a465:	56                   	push   esi
c000a466:	e8 87 f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a46b:	83 c4 20             	add    esp,0x20
c000a46e:	39 df                	cmp    edi,ebx
c000a470:	75 d1                	jne    c000a443 <mapVASFirstTime+0x65>
c000a472:	b8 7c 10 02 c0       	mov    eax,0xc002107c
c000a477:	2d 00 00 02 c0       	sub    eax,0xc0020000
c000a47c:	c1 e8 0c             	shr    eax,0xc
c000a47f:	50                   	push   eax
c000a480:	68 7d 00 02 c0       	push   0xc002007d
c000a485:	68 00 00 02 c0       	push   0xc0020000
c000a48a:	68 64 db 01 c0       	push   0xc001db64
c000a48f:	e8 6f 01 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a494:	0f 20 d8             	mov    eax,cr3
c000a497:	0f 22 d8             	mov    cr3,eax
c000a49a:	83 c4 10             	add    esp,0x10
c000a49d:	83 c4 0c             	add    esp,0xc
c000a4a0:	5b                   	pop    ebx
c000a4a1:	5e                   	pop    esi
c000a4a2:	5f                   	pop    edi
c000a4a3:	5d                   	pop    ebp
c000a4a4:	c3                   	ret    
c000a4a5:	83 ec 0c             	sub    esp,0xc
c000a4a8:	68 95 dc 01 c0       	push   0xc001dc95
c000a4ad:	e8 51 01 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	83 c4 0c             	add    esp,0xc
c000a4b8:	5b                   	pop    ebx
c000a4b9:	5e                   	pop    esi
c000a4ba:	5f                   	pop    edi
c000a4bb:	5d                   	pop    ebp
c000a4bc:	c3                   	ret    

c000a4bd <__cxa_atexit>:
c000a4bd:	31 c0                	xor    eax,eax
c000a4bf:	c3                   	ret    

c000a4c0 <__cxa_finalize>:
c000a4c0:	c3                   	ret    

c000a4c1 <__stack_chk_fail>:
c000a4c1:	55                   	push   ebp
c000a4c2:	89 e5                	mov    ebp,esp
c000a4c4:	83 ec 10             	sub    esp,0x10
c000a4c7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4ca:	68 ae dc 01 c0       	push   0xc001dcae
c000a4cf:	e8 2f 01 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a4d4:	58                   	pop    eax
c000a4d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4d8:	5a                   	pop    edx
c000a4d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4dc:	68 ae dc 01 c0       	push   0xc001dcae
c000a4e1:	e8 1d 01 00 00       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000a4e6:	c7 04 24 b6 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcb6
c000a4ed:	e8 91 5d 00 00       	call   c0010283 <KePanic(char const*)>
c000a4f2:	83 c4 10             	add    esp,0x10
c000a4f5:	c9                   	leave  
c000a4f6:	c3                   	ret    

c000a4f7 <__cxa_pure_virtual>:
c000a4f7:	83 ec 18             	sub    esp,0x18
c000a4fa:	68 ce dc 01 c0       	push   0xc001dcce
c000a4ff:	e8 7f 5d 00 00       	call   c0010283 <KePanic(char const*)>
c000a504:	83 c4 1c             	add    esp,0x1c
c000a507:	c3                   	ret    

c000a508 <operator new[](unsigned long)>:
c000a508:	e9 ac d2 ff ff       	jmp    c00077b9 <malloc>

c000a50d <operator delete(void*, unsigned long)>:
c000a50d:	e9 c7 d2 ff ff       	jmp    c00077d9 <rfree>

c000a512 <operator delete[](void*)>:
c000a512:	e9 c2 d2 ff ff       	jmp    c00077d9 <rfree>

c000a517 <operator delete[](void*, unsigned long)>:
c000a517:	e9 bd d2 ff ff       	jmp    c00077d9 <rfree>

c000a51c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a51c:	55                   	push   ebp
c000a51d:	b9 04 00 00 00       	mov    ecx,0x4
c000a522:	57                   	push   edi
c000a523:	56                   	push   esi
c000a524:	be 93 d8 01 c0       	mov    esi,0xc001d893
c000a529:	53                   	push   ebx
c000a52a:	83 ec 20             	sub    esp,0x20
c000a52d:	a1 92 d8 01 c0       	mov    eax,ds:0xc001d892
c000a532:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a536:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a53a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a53e:	a1 9f d8 01 c0       	mov    eax,ds:0xc001d89f
c000a543:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a547:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a54b:	fc                   	cld    
c000a54c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a54e:	89 ee                	mov    esi,ebp
c000a550:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a554:	eb 02                	jmp    c000a558 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a556:	89 c6                	mov    esi,eax
c000a558:	31 d2                	xor    edx,edx
c000a55a:	41                   	inc    ecx
c000a55b:	89 f0                	mov    eax,esi
c000a55d:	f7 f3                	div    ebx
c000a55f:	39 de                	cmp    esi,ebx
c000a561:	73 f3                	jae    c000a556 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a563:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a566:	eb 02                	jmp    c000a56a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a568:	89 c5                	mov    ebp,eax
c000a56a:	31 d2                	xor    edx,edx
c000a56c:	49                   	dec    ecx
c000a56d:	89 e8                	mov    eax,ebp
c000a56f:	f7 f3                	div    ebx
c000a571:	39 dd                	cmp    ebp,ebx
c000a573:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a577:	88 11                	mov    BYTE PTR [ecx],dl
c000a579:	73 ed                	jae    c000a568 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a57b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a57f:	83 c4 20             	add    esp,0x20
c000a582:	5b                   	pop    ebx
c000a583:	5e                   	pop    esi
c000a584:	5f                   	pop    edi
c000a585:	5d                   	pop    ebp
c000a586:	c3                   	ret    

c000a587 <Dbg::logc(char)>:
c000a587:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a58b:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a592:	75 12                	jne    c000a5a6 <Dbg::logc(char)+0x1f>
c000a594:	ba fd 03 00 00       	mov    edx,0x3fd
c000a599:	ec                   	in     al,dx
c000a59a:	a8 20                	test   al,0x20
c000a59c:	74 fb                	je     c000a599 <Dbg::logc(char)+0x12>
c000a59e:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5a3:	88 c8                	mov    al,cl
c000a5a5:	ee                   	out    dx,al
c000a5a6:	c3                   	ret    

c000a5a7 <Dbg::logs(char*)>:
c000a5a7:	53                   	push   ebx
c000a5a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5ac:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5af:	84 c0                	test   al,al
c000a5b1:	74 0f                	je     c000a5c2 <Dbg::logs(char*)+0x1b>
c000a5b3:	50                   	push   eax
c000a5b4:	43                   	inc    ebx
c000a5b5:	e8 cd ff ff ff       	call   c000a587 <Dbg::logc(char)>
c000a5ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5bd:	5a                   	pop    edx
c000a5be:	84 c0                	test   al,al
c000a5c0:	75 f1                	jne    c000a5b3 <Dbg::logs(char*)+0xc>
c000a5c2:	5b                   	pop    ebx
c000a5c3:	c3                   	ret    

c000a5c4 <Dbg::logWriteInt(unsigned int)>:
c000a5c4:	83 ec 10             	sub    esp,0x10
c000a5c7:	6a 0a                	push   0xa
c000a5c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5cd:	50                   	push   eax
c000a5ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d2:	50                   	push   eax
c000a5d3:	e8 44 ff ff ff       	call   c000a51c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5d8:	50                   	push   eax
c000a5d9:	e8 c9 ff ff ff       	call   c000a5a7 <Dbg::logs(char*)>
c000a5de:	83 c4 20             	add    esp,0x20
c000a5e1:	c3                   	ret    

c000a5e2 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5e2:	83 ec 10             	sub    esp,0x10
c000a5e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5e9:	50                   	push   eax
c000a5ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5ee:	50                   	push   eax
c000a5ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5f3:	52                   	push   edx
c000a5f4:	e8 23 ff ff ff       	call   c000a51c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5f9:	50                   	push   eax
c000a5fa:	e8 a8 ff ff ff       	call   c000a5a7 <Dbg::logs(char*)>
c000a5ff:	83 c4 20             	add    esp,0x20
c000a602:	c3                   	ret    

c000a603 <Dbg::kprintf(char const*, ...)>:
c000a603:	55                   	push   ebp
c000a604:	57                   	push   edi
c000a605:	56                   	push   esi
c000a606:	53                   	push   ebx
c000a607:	83 ec 0c             	sub    esp,0xc
c000a60a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a60e:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a615:	74 08                	je     c000a61f <Dbg::kprintf(char const*, ...)+0x1c>
c000a617:	83 c4 0c             	add    esp,0xc
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	5f                   	pop    edi
c000a61d:	5d                   	pop    ebp
c000a61e:	c3                   	ret    
c000a61f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a623:	31 ff                	xor    edi,edi
c000a625:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a629:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a62c:	84 c0                	test   al,al
c000a62e:	74 e7                	je     c000a617 <Dbg::kprintf(char const*, ...)+0x14>
c000a630:	8d 77 01             	lea    esi,[edi+0x1]
c000a633:	3c 25                	cmp    al,0x25
c000a635:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a638:	75 47                	jne    c000a681 <Dbg::kprintf(char const*, ...)+0x7e>
c000a63a:	83 c7 02             	add    edi,0x2
c000a63d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a640:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a643:	83 e8 25             	sub    eax,0x25
c000a646:	3c 53                	cmp    al,0x53
c000a648:	0f 87 d2 00 00 00    	ja     c000a720 <Dbg::kprintf(char const*, ...)+0x11d>
c000a64e:	25 ff 00 00 00       	and    eax,0xff
c000a653:	ff 24 85 e4 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe231c]
c000a65a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a65e:	89 c8                	mov    eax,ecx
c000a660:	83 c1 04             	add    ecx,0x4
c000a663:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a667:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a669:	55                   	push   ebp
c000a66a:	e8 55 ff ff ff       	call   c000a5c4 <Dbg::logWriteInt(unsigned int)>
c000a66f:	58                   	pop    eax
c000a670:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a673:	84 c0                	test   al,al
c000a675:	74 a0                	je     c000a617 <Dbg::kprintf(char const*, ...)+0x14>
c000a677:	8d 77 01             	lea    esi,[edi+0x1]
c000a67a:	3c 25                	cmp    al,0x25
c000a67c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a67f:	74 b9                	je     c000a63a <Dbg::kprintf(char const*, ...)+0x37>
c000a681:	50                   	push   eax
c000a682:	89 f7                	mov    edi,esi
c000a684:	e8 fe fe ff ff       	call   c000a587 <Dbg::logc(char)>
c000a689:	89 ee                	mov    esi,ebp
c000a68b:	58                   	pop    eax
c000a68c:	eb e2                	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a68e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a692:	89 c8                	mov    eax,ecx
c000a694:	83 c1 04             	add    ecx,0x4
c000a697:	8b 00                	mov    eax,DWORD PTR [eax]
c000a699:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a69d:	50                   	push   eax
c000a69e:	e8 04 ff ff ff       	call   c000a5a7 <Dbg::logs(char*)>
c000a6a3:	58                   	pop    eax
c000a6a4:	eb ca                	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6aa:	89 d0                	mov    eax,edx
c000a6ac:	83 c2 04             	add    edx,0x4
c000a6af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6b5:	50                   	push   eax
c000a6b6:	e8 09 ff ff ff       	call   c000a5c4 <Dbg::logWriteInt(unsigned int)>
c000a6bb:	58                   	pop    eax
c000a6bc:	eb b2                	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c2:	89 d0                	mov    eax,edx
c000a6c4:	83 c2 04             	add    edx,0x4
c000a6c7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6ce:	50                   	push   eax
c000a6cf:	e8 b3 fe ff ff       	call   c000a587 <Dbg::logc(char)>
c000a6d4:	58                   	pop    eax
c000a6d5:	eb 99                	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6db:	89 c8                	mov    eax,ecx
c000a6dd:	83 c1 04             	add    ecx,0x4
c000a6e0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6e4:	6a 10                	push   0x10
c000a6e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6e8:	51                   	push   ecx
c000a6e9:	e8 f4 fe ff ff       	call   c000a5e2 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6ee:	5d                   	pop    ebp
c000a6ef:	58                   	pop    eax
c000a6f0:	e9 7b ff ff ff       	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6f9:	89 d0                	mov    eax,edx
c000a6fb:	83 c2 08             	add    edx,0x8
c000a6fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a702:	6a 10                	push   0x10
c000a704:	8b 00                	mov    eax,DWORD PTR [eax]
c000a706:	50                   	push   eax
c000a707:	e8 d6 fe ff ff       	call   c000a5e2 <Dbg::logWriteIntBase(unsigned int, int)>
c000a70c:	58                   	pop    eax
c000a70d:	5a                   	pop    edx
c000a70e:	e9 5d ff ff ff       	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a713:	6a 25                	push   0x25
c000a715:	e8 6d fe ff ff       	call   c000a587 <Dbg::logc(char)>
c000a71a:	5a                   	pop    edx
c000a71b:	e9 50 ff ff ff       	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>
c000a720:	6a 25                	push   0x25
c000a722:	e8 60 fe ff ff       	call   c000a587 <Dbg::logc(char)>
c000a727:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a72b:	50                   	push   eax
c000a72c:	e8 56 fe ff ff       	call   c000a587 <Dbg::logc(char)>
c000a731:	5a                   	pop    edx
c000a732:	59                   	pop    ecx
c000a733:	e9 38 ff ff ff       	jmp    c000a670 <Dbg::kprintf(char const*, ...)+0x6d>

c000a738 <File::read(unsigned long long, void*, int*)>:
c000a738:	53                   	push   ebx
c000a739:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a73d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a741:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a748:	3c 19                	cmp    al,0x19
c000a74a:	77 35                	ja     c000a781 <File::read(unsigned long long, void*, int*)+0x49>
c000a74c:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a753:	85 c0                	test   eax,eax
c000a755:	74 2a                	je     c000a781 <File::read(unsigned long long, void*, int*)+0x49>
c000a757:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a75d:	85 c0                	test   eax,eax
c000a75f:	74 20                	je     c000a781 <File::read(unsigned long long, void*, int*)+0x49>
c000a761:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a765:	74 21                	je     c000a788 <File::read(unsigned long long, void*, int*)+0x50>
c000a767:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a769:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a76d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a773:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a777:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a77b:	5b                   	pop    ebx
c000a77c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a77f:	ff e0                	jmp    eax
c000a781:	b8 0b 00 00 00       	mov    eax,0xb
c000a786:	eb 05                	jmp    c000a78d <File::read(unsigned long long, void*, int*)+0x55>
c000a788:	b8 05 00 00 00       	mov    eax,0x5
c000a78d:	5b                   	pop    ebx
c000a78e:	c3                   	ret    
c000a78f:	90                   	nop

c000a790 <File::write(unsigned long long, void*, int*)>:
c000a790:	53                   	push   ebx
c000a791:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a795:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a799:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a0:	3c 19                	cmp    al,0x19
c000a7a2:	77 35                	ja     c000a7d9 <File::write(unsigned long long, void*, int*)+0x49>
c000a7a4:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a7ab:	85 c0                	test   eax,eax
c000a7ad:	74 2a                	je     c000a7d9 <File::write(unsigned long long, void*, int*)+0x49>
c000a7af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7b5:	85 c0                	test   eax,eax
c000a7b7:	74 20                	je     c000a7d9 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7bd:	74 21                	je     c000a7e0 <File::write(unsigned long long, void*, int*)+0x50>
c000a7bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7d3:	5b                   	pop    ebx
c000a7d4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7d7:	ff e0                	jmp    eax
c000a7d9:	b8 0b 00 00 00       	mov    eax,0xb
c000a7de:	eb 05                	jmp    c000a7e5 <File::write(unsigned long long, void*, int*)+0x55>
c000a7e0:	b8 05 00 00 00       	mov    eax,0x5
c000a7e5:	5b                   	pop    ebx
c000a7e6:	c3                   	ret    
c000a7e7:	90                   	nop

c000a7e8 <Directory::read(unsigned long long, void*, int*)>:
c000a7e8:	53                   	push   ebx
c000a7e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7f8:	3c 19                	cmp    al,0x19
c000a7fa:	77 35                	ja     c000a831 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7fc:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a803:	85 c0                	test   eax,eax
c000a805:	74 2a                	je     c000a831 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a807:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a80d:	85 c0                	test   eax,eax
c000a80f:	74 20                	je     c000a831 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a811:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a815:	74 21                	je     c000a838 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a817:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a819:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a81d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a827:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a82b:	5b                   	pop    ebx
c000a82c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a82f:	ff e0                	jmp    eax
c000a831:	b8 0b 00 00 00       	mov    eax,0xb
c000a836:	eb 05                	jmp    c000a83d <Directory::read(unsigned long long, void*, int*)+0x55>
c000a838:	b8 05 00 00 00       	mov    eax,0x5
c000a83d:	5b                   	pop    ebx
c000a83e:	c3                   	ret    
c000a83f:	90                   	nop

c000a840 <Directory::write(unsigned long long, void*, int*)>:
c000a840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a844:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a84b:	b8 0b 00 00 00       	mov    eax,0xb
c000a850:	80 fa 19             	cmp    dl,0x19
c000a853:	77 18                	ja     c000a86d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a855:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a85c:	85 d2                	test   edx,edx
c000a85e:	74 0d                	je     c000a86d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a860:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a867:	19 c0                	sbb    eax,eax
c000a869:	83 e0 0a             	and    eax,0xa
c000a86c:	40                   	inc    eax
c000a86d:	c3                   	ret    

c000a86e <File::isAtty()>:
c000a86e:	31 c0                	xor    eax,eax
c000a870:	c3                   	ret    
c000a871:	90                   	nop

c000a872 <Directory::isAtty()>:
c000a872:	31 c0                	xor    eax,eax
c000a874:	c3                   	ret    
c000a875:	90                   	nop

c000a876 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a876:	b8 0a 00 00 00       	mov    eax,0xa
c000a87b:	c3                   	ret    

c000a87c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a87c:	b8 0a 00 00 00       	mov    eax,0xa
c000a881:	c3                   	ret    

c000a882 <Filesystem::allocateSwapfile(char const*, int)>:
c000a882:	31 c0                	xor    eax,eax
c000a884:	31 d2                	xor    edx,edx
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <File::~File()>:
c000a888:	83 ec 0c             	sub    esp,0xc
c000a88b:	ba a4 de 01 c0       	mov    edx,0xc001dea4
c000a890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a894:	89 10                	mov    DWORD PTR [eax],edx
c000a896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89a:	83 ec 0c             	sub    esp,0xc
c000a89d:	50                   	push   eax
c000a89e:	e8 81 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a8a3:	83 c4 10             	add    esp,0x10
c000a8a6:	90                   	nop
c000a8a7:	83 c4 0c             	add    esp,0xc
c000a8aa:	c3                   	ret    
c000a8ab:	90                   	nop

c000a8ac <File::~File()>:
c000a8ac:	83 ec 0c             	sub    esp,0xc
c000a8af:	83 ec 0c             	sub    esp,0xc
c000a8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8b6:	e8 cd ff ff ff       	call   c000a888 <File::~File()>
c000a8bb:	83 c4 10             	add    esp,0x10
c000a8be:	83 ec 08             	sub    esp,0x8
c000a8c1:	68 14 01 00 00       	push   0x114
c000a8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ca:	e8 3e fc ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000a8cf:	83 c4 10             	add    esp,0x10
c000a8d2:	83 c4 0c             	add    esp,0xc
c000a8d5:	c3                   	ret    

c000a8d6 <Directory::~Directory()>:
c000a8d6:	83 ec 0c             	sub    esp,0xc
c000a8d9:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000a8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e2:	89 10                	mov    DWORD PTR [eax],edx
c000a8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e8:	83 ec 0c             	sub    esp,0xc
c000a8eb:	50                   	push   eax
c000a8ec:	e8 33 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a8f1:	83 c4 10             	add    esp,0x10
c000a8f4:	90                   	nop
c000a8f5:	83 c4 0c             	add    esp,0xc
c000a8f8:	c3                   	ret    
c000a8f9:	90                   	nop

c000a8fa <Directory::~Directory()>:
c000a8fa:	83 ec 0c             	sub    esp,0xc
c000a8fd:	83 ec 0c             	sub    esp,0xc
c000a900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a904:	e8 cd ff ff ff       	call   c000a8d6 <Directory::~Directory()>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	83 ec 08             	sub    esp,0x8
c000a90f:	68 14 01 00 00       	push   0x114
c000a914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a918:	e8 f0 fb ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	83 c4 0c             	add    esp,0xc
c000a923:	c3                   	ret    

c000a924 <Filesystem::Filesystem()>:
c000a924:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000a929:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92d:	89 10                	mov    DWORD PTR [eax],edx
c000a92f:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a939:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a940:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a945:	90                   	nop
c000a946:	c3                   	ret    
c000a947:	90                   	nop

c000a948 <Filesystem::~Filesystem()>:
c000a948:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000a94d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a951:	89 10                	mov    DWORD PTR [eax],edx
c000a953:	90                   	nop
c000a954:	c3                   	ret    
c000a955:	90                   	nop

c000a956 <Filesystem::~Filesystem()>:
c000a956:	83 ec 0c             	sub    esp,0xc
c000a959:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a95d:	e8 e6 ff ff ff       	call   c000a948 <Filesystem::~Filesystem()>
c000a962:	83 c4 04             	add    esp,0x4
c000a965:	83 ec 08             	sub    esp,0x8
c000a968:	6a 08                	push   0x8
c000a96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a96e:	e8 9a fb ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	83 c4 0c             	add    esp,0xc
c000a979:	c3                   	ret    

c000a97a <Fs::getcwd(Process*, char*, int)>:
c000a97a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a97e:	31 c0                	xor    eax,eax
c000a980:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a983:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a987:	7d 15                	jge    c000a99e <Fs::getcwd(Process*, char*, int)+0x24>
c000a989:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a98d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a994:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a997:	84 c9                	test   cl,cl
c000a999:	74 06                	je     c000a9a1 <Fs::getcwd(Process*, char*, int)+0x27>
c000a99b:	40                   	inc    eax
c000a99c:	eb e2                	jmp    c000a980 <Fs::getcwd(Process*, char*, int)+0x6>
c000a99e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9a1:	31 c0                	xor    eax,eax
c000a9a3:	c3                   	ret    

c000a9a4 <Fs::initVFS()>:
c000a9a4:	83 ec 18             	sub    esp,0x18
c000a9a7:	6a 08                	push   0x8
c000a9a9:	e8 0b ce ff ff       	call   c00077b9 <malloc>
c000a9ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b1:	e8 de c7 00 00       	call   c0017194 <FAT::FAT()>
c000a9b6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9bd:	e8 f7 cd ff ff       	call   c00077b9 <malloc>
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	e8 26 d5 00 00       	call   c0017ef0 <ISO9660::ISO9660()>
c000a9ca:	83 c4 1c             	add    esp,0x1c
c000a9cd:	c3                   	ret    

c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9ce:	55                   	push   ebp
c000a9cf:	57                   	push   edi
c000a9d0:	56                   	push   esi
c000a9d1:	53                   	push   ebx
c000a9d2:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9d8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9df:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9e6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9ed:	68 00 04 00 00       	push   0x400
c000a9f2:	6a 00                	push   0x0
c000a9f4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9f8:	56                   	push   esi
c000a9f9:	e8 d2 5a ff ff       	call   c00004d0 <memset>
c000a9fe:	83 c4 10             	add    esp,0x10
c000aa01:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa05:	75 0b                	jne    c000aa12 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa07:	50                   	push   eax
c000aa08:	50                   	push   eax
c000aa09:	57                   	push   edi
c000aa0a:	56                   	push   esi
c000aa0b:	e8 f0 5b ff ff       	call   c0000600 <strcpy>
c000aa10:	eb 41                	jmp    c000aa53 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa12:	8a 07                	mov    al,BYTE PTR [edi]
c000aa14:	3c 5c                	cmp    al,0x5c
c000aa16:	74 04                	je     c000aa1c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa18:	3c 2f                	cmp    al,0x2f
c000aa1a:	75 18                	jne    c000aa34 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa1c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa1f:	3c 60                	cmp    al,0x60
c000aa21:	7e 03                	jle    c000aa26 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa23:	83 e8 20             	sub    eax,0x20
c000aa26:	88 04 24             	mov    BYTE PTR [esp],al
c000aa29:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa30:	50                   	push   eax
c000aa31:	50                   	push   eax
c000aa32:	eb 18                	jmp    c000aa4c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa34:	50                   	push   eax
c000aa35:	50                   	push   eax
c000aa36:	55                   	push   ebp
c000aa37:	56                   	push   esi
c000aa38:	e8 c3 5b ff ff       	call   c0000600 <strcpy>
c000aa3d:	5a                   	pop    edx
c000aa3e:	59                   	pop    ecx
c000aa3f:	68 5a ec 01 c0       	push   0xc001ec5a
c000aa44:	56                   	push   esi
c000aa45:	e8 76 5d ff ff       	call   c00007c0 <strcat>
c000aa4a:	5d                   	pop    ebp
c000aa4b:	58                   	pop    eax
c000aa4c:	57                   	push   edi
c000aa4d:	56                   	push   esi
c000aa4e:	e8 6d 5d ff ff       	call   c00007c0 <strcat>
c000aa53:	83 c4 10             	add    esp,0x10
c000aa56:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa59:	3c 60                	cmp    al,0x60
c000aa5b:	7e 03                	jle    c000aa60 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa5d:	83 e8 20             	sub    eax,0x20
c000aa60:	88 04 24             	mov    BYTE PTR [esp],al
c000aa63:	88 03                	mov    BYTE PTR [ebx],al
c000aa65:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa6c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa72:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa76:	bf 03 00 00 00       	mov    edi,0x3
c000aa7b:	b8 03 00 00 00       	mov    eax,0x3
c000aa80:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa83:	84 d2                	test   dl,dl
c000aa85:	0f 84 91 00 00 00    	je     c000ab1c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa8b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa8e:	80 fa 5c             	cmp    dl,0x5c
c000aa91:	74 05                	je     c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa93:	80 fa 2f             	cmp    dl,0x2f
c000aa96:	75 12                	jne    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa98:	89 c5                	mov    ebp,eax
c000aa9a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa9f:	74 09                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa1:	40                   	inc    eax
c000aaa2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaa6:	89 cf                	mov    edi,ecx
c000aaa8:	eb d6                	jmp    c000aa80 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aaaa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aaaf:	75 5b                	jne    c000ab0c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab1:	80 fa 2e             	cmp    dl,0x2e
c000aab4:	75 56                	jne    c000ab0c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aaba:	74 19                	je     c000aad5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aabc:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aac1:	74 53                	je     c000ab16 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aac3:	89 f9                	mov    ecx,edi
c000aac5:	41                   	inc    ecx
c000aac6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aac9:	80 fa 2f             	cmp    dl,0x2f
c000aacc:	74 f7                	je     c000aac5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aace:	80 fa 5c             	cmp    dl,0x5c
c000aad1:	74 f2                	je     c000aac5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad3:	eb d1                	jmp    c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aada:	74 3a                	je     c000ab16 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aadc:	83 f8 03             	cmp    eax,0x3
c000aadf:	74 c5                	je     c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae1:	41                   	inc    ecx
c000aae2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aae5:	80 fa 2f             	cmp    dl,0x2f
c000aae8:	74 f7                	je     c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaea:	80 fa 5c             	cmp    dl,0x5c
c000aaed:	74 f2                	je     c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaef:	48                   	dec    eax
c000aaf0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf4:	75 06                	jne    c000aafc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aaf6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aafa:	eb f3                	jmp    c000aaef <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aafc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab00:	74 07                	je     c000ab09 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab06:	48                   	dec    eax
c000ab07:	eb f3                	jmp    c000aafc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab09:	40                   	inc    eax
c000ab0a:	eb 9a                	jmp    c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab0c:	80 fa 2f             	cmp    dl,0x2f
c000ab0f:	74 95                	je     c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab11:	80 fa 5c             	cmp    dl,0x5c
c000ab14:	74 90                	je     c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab16:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab19:	40                   	inc    eax
c000ab1a:	eb 8a                	jmp    c000aaa6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab20:	83 ec 0c             	sub    esp,0xc
c000ab23:	53                   	push   ebx
c000ab24:	e8 17 5a ff ff       	call   c0000540 <strlen>
c000ab29:	83 c4 10             	add    esp,0x10
c000ab2c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab31:	75 26                	jne    c000ab59 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab33:	83 ec 0c             	sub    esp,0xc
c000ab36:	53                   	push   ebx
c000ab37:	e8 04 5a ff ff       	call   c0000540 <strlen>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab44:	74 26                	je     c000ab6c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab46:	83 ec 0c             	sub    esp,0xc
c000ab49:	53                   	push   ebx
c000ab4a:	e8 f1 59 ff ff       	call   c0000540 <strlen>
c000ab4f:	83 c4 10             	add    esp,0x10
c000ab52:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab57:	eb c7                	jmp    c000ab20 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab59:	83 ec 0c             	sub    esp,0xc
c000ab5c:	53                   	push   ebx
c000ab5d:	e8 de 59 ff ff       	call   c0000540 <strlen>
c000ab62:	83 c4 10             	add    esp,0x10
c000ab65:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab6a:	74 c7                	je     c000ab33 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab6c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab72:	5b                   	pop    ebx
c000ab73:	5e                   	pop    esi
c000ab74:	5f                   	pop    edi
c000ab75:	5d                   	pop    ebp
c000ab76:	c3                   	ret    
c000ab77:	90                   	nop

c000ab78 <File::File(char const*, Process*)>:
c000ab78:	83 ec 0c             	sub    esp,0xc
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	83 ec 08             	sub    esp,0x8
c000ab82:	6a 00                	push   0x0
c000ab84:	50                   	push   eax
c000ab85:	e8 b8 e2 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000ab8a:	83 c4 10             	add    esp,0x10
c000ab8d:	ba a4 de 01 c0       	mov    edx,0xc001dea4
c000ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab96:	89 10                	mov    DWORD PTR [eax],edx
c000ab98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab9c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	83 c0 0d             	add    eax,0xd
c000aba9:	83 ec 04             	sub    esp,0x4
c000abac:	52                   	push   edx
c000abad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb1:	50                   	push   eax
c000abb2:	e8 17 fe ff ff       	call   c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abc1:	8d 50 bf             	lea    edx,[eax-0x41]
c000abc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abe0:	25 ff 00 00 00       	and    eax,0xff
c000abe5:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000abec:	85 c0                	test   eax,eax
c000abee:	74 42                	je     c000ac32 <File::File(char const*, Process*)+0xba>
c000abf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abfa:	25 ff 00 00 00       	and    eax,0xff
c000abff:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac06:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac0c:	85 c0                	test   eax,eax
c000ac0e:	75 22                	jne    c000ac32 <File::File(char const*, Process*)+0xba>
c000ac10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac14:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac1a:	25 ff 00 00 00       	and    eax,0xff
c000ac1f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	50                   	push   eax
c000ac2a:	e8 37 20 00 00       	call   c000cc66 <LogicalDisk::mount()>
c000ac2f:	83 c4 10             	add    esp,0x10
c000ac32:	90                   	nop
c000ac33:	83 c4 0c             	add    esp,0xc
c000ac36:	c3                   	ret    
c000ac37:	90                   	nop

c000ac38 <File::open(FileOpenMode)>:
c000ac38:	53                   	push   ebx
c000ac39:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3e:	83 ec 08             	sub    esp,0x8
c000ac41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac45:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac4c:	80 fa 19             	cmp    dl,0x19
c000ac4f:	77 40                	ja     c000ac91 <File::open(FileOpenMode)+0x59>
c000ac51:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac58:	85 d2                	test   edx,edx
c000ac5a:	74 35                	je     c000ac91 <File::open(FileOpenMode)+0x59>
c000ac5c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac62:	85 d2                	test   edx,edx
c000ac64:	74 2b                	je     c000ac91 <File::open(FileOpenMode)+0x59>
c000ac66:	b8 06 00 00 00       	mov    eax,0x6
c000ac6b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac6f:	75 20                	jne    c000ac91 <File::open(FileOpenMode)+0x59>
c000ac71:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac73:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac7d:	51                   	push   ecx
c000ac7e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac81:	51                   	push   ecx
c000ac82:	52                   	push   edx
c000ac83:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	85 c0                	test   eax,eax
c000ac8b:	75 04                	jne    c000ac91 <File::open(FileOpenMode)+0x59>
c000ac8d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac91:	83 c4 08             	add    esp,0x8
c000ac94:	5b                   	pop    ebx
c000ac95:	c3                   	ret    

c000ac96 <File::close()>:
c000ac96:	53                   	push   ebx
c000ac97:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9c:	83 ec 08             	sub    esp,0x8
c000ac9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acaa:	80 fa 19             	cmp    dl,0x19
c000acad:	77 41                	ja     c000acf0 <File::close()+0x5a>
c000acaf:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000acb6:	85 db                	test   ebx,ebx
c000acb8:	74 36                	je     c000acf0 <File::close()+0x5a>
c000acba:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000acc1:	74 2d                	je     c000acf0 <File::close()+0x5a>
c000acc3:	b8 05 00 00 00       	mov    eax,0x5
c000acc8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000accc:	74 22                	je     c000acf0 <File::close()+0x5a>
c000acce:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acd2:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000acd9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000acdf:	53                   	push   ebx
c000ace0:	53                   	push   ebx
c000ace1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ace3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ace9:	50                   	push   eax
c000acea:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000aced:	83 c4 10             	add    esp,0x10
c000acf0:	83 c4 08             	add    esp,0x8
c000acf3:	5b                   	pop    ebx
c000acf4:	c3                   	ret    
c000acf5:	90                   	nop

c000acf6 <File::seek(unsigned long long)>:
c000acf6:	56                   	push   esi
c000acf7:	53                   	push   ebx
c000acf8:	b8 0b 00 00 00       	mov    eax,0xb
c000acfd:	51                   	push   ecx
c000acfe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad06:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad11:	80 fa 19             	cmp    dl,0x19
c000ad14:	77 31                	ja     c000ad47 <File::seek(unsigned long long)+0x51>
c000ad16:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad1d:	85 d2                	test   edx,edx
c000ad1f:	74 26                	je     c000ad47 <File::seek(unsigned long long)+0x51>
c000ad21:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad27:	85 d2                	test   edx,edx
c000ad29:	74 1c                	je     c000ad47 <File::seek(unsigned long long)+0x51>
c000ad2b:	b8 05 00 00 00       	mov    eax,0x5
c000ad30:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad34:	74 11                	je     c000ad47 <File::seek(unsigned long long)+0x51>
c000ad36:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad38:	53                   	push   ebx
c000ad39:	51                   	push   ecx
c000ad3a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad40:	52                   	push   edx
c000ad41:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	5a                   	pop    edx
c000ad48:	5b                   	pop    ebx
c000ad49:	5e                   	pop    esi
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <File::tell(unsigned long long*)>:
c000ad4c:	83 ec 0c             	sub    esp,0xc
c000ad4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad58:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad5f:	80 fa 19             	cmp    dl,0x19
c000ad62:	77 34                	ja     c000ad98 <File::tell(unsigned long long*)+0x4c>
c000ad64:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad6b:	85 d2                	test   edx,edx
c000ad6d:	74 29                	je     c000ad98 <File::tell(unsigned long long*)+0x4c>
c000ad6f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad75:	85 d2                	test   edx,edx
c000ad77:	74 1f                	je     c000ad98 <File::tell(unsigned long long*)+0x4c>
c000ad79:	b8 05 00 00 00       	mov    eax,0x5
c000ad7e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad82:	74 14                	je     c000ad98 <File::tell(unsigned long long*)+0x4c>
c000ad84:	50                   	push   eax
c000ad85:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad91:	52                   	push   edx
c000ad92:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad95:	83 c4 10             	add    esp,0x10
c000ad98:	83 c4 0c             	add    esp,0xc
c000ad9b:	c3                   	ret    

c000ad9c <File::rewind()>:
c000ad9c:	83 ec 10             	sub    esp,0x10
c000ad9f:	6a 00                	push   0x0
c000ada1:	6a 00                	push   0x0
c000ada3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ada7:	e8 4a ff ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c000adac:	83 c4 1c             	add    esp,0x1c
c000adaf:	c3                   	ret    

c000adb0 <File::unlink()>:
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	b8 0b 00 00 00       	mov    eax,0xb
c000adb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adc3:	80 f9 19             	cmp    cl,0x19
c000adc6:	77 2f                	ja     c000adf7 <File::unlink()+0x47>
c000adc8:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adcf:	85 c9                	test   ecx,ecx
c000add1:	74 24                	je     c000adf7 <File::unlink()+0x47>
c000add3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000add9:	85 c9                	test   ecx,ecx
c000addb:	74 1a                	je     c000adf7 <File::unlink()+0x47>
c000addd:	b8 06 00 00 00       	mov    eax,0x6
c000ade2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ade6:	75 0f                	jne    c000adf7 <File::unlink()+0x47>
c000ade8:	83 c2 0d             	add    edx,0xd
c000adeb:	50                   	push   eax
c000adec:	50                   	push   eax
c000aded:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adef:	52                   	push   edx
c000adf0:	51                   	push   ecx
c000adf1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adf4:	83 c4 10             	add    esp,0x10
c000adf7:	83 c4 0c             	add    esp,0xc
c000adfa:	c3                   	ret    
c000adfb:	90                   	nop

c000adfc <File::rename(char const*)>:
c000adfc:	83 ec 0c             	sub    esp,0xc
c000adff:	b8 0b 00 00 00       	mov    eax,0xb
c000ae04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae0f:	80 f9 19             	cmp    cl,0x19
c000ae12:	77 32                	ja     c000ae46 <File::rename(char const*)+0x4a>
c000ae14:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae1b:	85 c9                	test   ecx,ecx
c000ae1d:	74 27                	je     c000ae46 <File::rename(char const*)+0x4a>
c000ae1f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae25:	85 c9                	test   ecx,ecx
c000ae27:	74 1d                	je     c000ae46 <File::rename(char const*)+0x4a>
c000ae29:	b8 06 00 00 00       	mov    eax,0x6
c000ae2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae32:	75 12                	jne    c000ae46 <File::rename(char const*)+0x4a>
c000ae34:	83 c2 0d             	add    edx,0xd
c000ae37:	50                   	push   eax
c000ae38:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae3e:	52                   	push   edx
c000ae3f:	51                   	push   ecx
c000ae40:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae43:	83 c4 10             	add    esp,0x10
c000ae46:	83 c4 0c             	add    esp,0xc
c000ae49:	c3                   	ret    

c000ae4a <File::chfatattr(unsigned char, unsigned char)>:
c000ae4a:	57                   	push   edi
c000ae4b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae50:	56                   	push   esi
c000ae51:	53                   	push   ebx
c000ae52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae65:	80 f9 19             	cmp    cl,0x19
c000ae68:	77 37                	ja     c000aea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae6a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae71:	85 c9                	test   ecx,ecx
c000ae73:	74 2c                	je     c000aea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae75:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae7b:	85 c9                	test   ecx,ecx
c000ae7d:	74 22                	je     c000aea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae7f:	b8 06 00 00 00       	mov    eax,0x6
c000ae84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae88:	75 17                	jne    c000aea1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae8c:	89 f0                	mov    eax,esi
c000ae8e:	83 c2 0d             	add    edx,0xd
c000ae91:	0f b6 f0             	movzx  esi,al
c000ae94:	0f b6 db             	movzx  ebx,bl
c000ae97:	56                   	push   esi
c000ae98:	53                   	push   ebx
c000ae99:	52                   	push   edx
c000ae9a:	51                   	push   ecx
c000ae9b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	5b                   	pop    ebx
c000aea2:	5e                   	pop    esi
c000aea3:	5f                   	pop    edi
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <File::exists()>:
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	31 c0                	xor    eax,eax
c000aeab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeb6:	80 f9 19             	cmp    cl,0x19
c000aeb9:	77 24                	ja     c000aedf <File::exists()+0x39>
c000aebb:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aec2:	85 c9                	test   ecx,ecx
c000aec4:	74 19                	je     c000aedf <File::exists()+0x39>
c000aec6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aecc:	85 c9                	test   ecx,ecx
c000aece:	74 0f                	je     c000aedf <File::exists()+0x39>
c000aed0:	83 c2 0d             	add    edx,0xd
c000aed3:	50                   	push   eax
c000aed4:	50                   	push   eax
c000aed5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aed7:	52                   	push   edx
c000aed8:	51                   	push   ecx
c000aed9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	83 c4 0c             	add    esp,0xc
c000aee2:	c3                   	ret    
c000aee3:	90                   	nop

c000aee4 <File::stat(unsigned long long*, bool*)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	50                   	push   eax
c000aee7:	b8 0b 00 00 00       	mov    eax,0xb
c000aeec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aef0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aef4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aefb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aeff:	80 f9 19             	cmp    cl,0x19
c000af02:	77 3d                	ja     c000af41 <File::stat(unsigned long long*, bool*)+0x5d>
c000af04:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000af0b:	85 c9                	test   ecx,ecx
c000af0d:	74 32                	je     c000af41 <File::stat(unsigned long long*, bool*)+0x5d>
c000af0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af15:	85 c9                	test   ecx,ecx
c000af17:	74 28                	je     c000af41 <File::stat(unsigned long long*, bool*)+0x5d>
c000af19:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af1f:	74 13                	je     c000af34 <File::stat(unsigned long long*, bool*)+0x50>
c000af21:	83 ec 04             	sub    esp,0x4
c000af24:	56                   	push   esi
c000af25:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af2b:	51                   	push   ecx
c000af2c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af2f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af32:	eb 0a                	jmp    c000af3e <File::stat(unsigned long long*, bool*)+0x5a>
c000af34:	53                   	push   ebx
c000af35:	83 c2 0d             	add    edx,0xd
c000af38:	56                   	push   esi
c000af39:	52                   	push   edx
c000af3a:	51                   	push   ecx
c000af3b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af3e:	83 c4 10             	add    esp,0x10
c000af41:	5a                   	pop    edx
c000af42:	5b                   	pop    ebx
c000af43:	5e                   	pop    esi
c000af44:	c3                   	ret    

c000af45 <Fs::setcwd(Process*, char*)>:
c000af45:	55                   	push   ebp
c000af46:	57                   	push   edi
c000af47:	56                   	push   esi
c000af48:	53                   	push   ebx
c000af49:	81 ec 20 02 00 00    	sub    esp,0x220
c000af4f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af56:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af5c:	57                   	push   edi
c000af5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af64:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af68:	56                   	push   esi
c000af69:	e8 60 fa ff ff       	call   c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>
c000af6e:	89 34 24             	mov    DWORD PTR [esp],esi
c000af71:	e8 ca 55 ff ff       	call   c0000540 <strlen>
c000af76:	83 c4 10             	add    esp,0x10
c000af79:	83 f8 02             	cmp    eax,0x2
c000af7c:	77 15                	ja     c000af93 <Fs::setcwd(Process*, char*)+0x4e>
c000af7e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af83:	83 eb 41             	sub    ebx,0x41
c000af86:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af8d:	85 c0                	test   eax,eax
c000af8f:	75 1c                	jne    c000afad <Fs::setcwd(Process*, char*)+0x68>
c000af91:	eb 2f                	jmp    c000afc2 <Fs::setcwd(Process*, char*)+0x7d>
c000af93:	83 ec 0c             	sub    esp,0xc
c000af96:	56                   	push   esi
c000af97:	e8 a4 55 ff ff       	call   c0000540 <strlen>
c000af9c:	83 c4 10             	add    esp,0x10
c000af9f:	83 f8 03             	cmp    eax,0x3
c000afa2:	75 57                	jne    c000affb <Fs::setcwd(Process*, char*)+0xb6>
c000afa4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afa9:	75 50                	jne    c000affb <Fs::setcwd(Process*, char*)+0xb6>
c000afab:	eb d1                	jmp    c000af7e <Fs::setcwd(Process*, char*)+0x39>
c000afad:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000afb4:	75 0c                	jne    c000afc2 <Fs::setcwd(Process*, char*)+0x7d>
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	50                   	push   eax
c000afba:	e8 a7 1c 00 00       	call   c000cc66 <LogicalDisk::mount()>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	b8 03 00 00 00       	mov    eax,0x3
c000afc7:	83 fb 19             	cmp    ebx,0x19
c000afca:	0f 87 c6 00 00 00    	ja     c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000afd0:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000afd7:	b8 05 00 00 00       	mov    eax,0x5
c000afdc:	85 d2                	test   edx,edx
c000afde:	0f 84 b2 00 00 00    	je     c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000afe4:	b8 06 00 00 00       	mov    eax,0x6
c000afe9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aff0:	0f 85 92 00 00 00    	jne    c000b088 <Fs::setcwd(Process*, char*)+0x143>
c000aff6:	e9 9b 00 00 00       	jmp    c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000affb:	83 ec 0c             	sub    esp,0xc
c000affe:	68 14 01 00 00       	push   0x114
c000b003:	e8 b1 c7 ff ff       	call   c00077b9 <malloc>
c000b008:	83 c4 0c             	add    esp,0xc
c000b00b:	89 c3                	mov    ebx,eax
c000b00d:	55                   	push   ebp
c000b00e:	56                   	push   esi
c000b00f:	50                   	push   eax
c000b010:	e8 63 fb ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000b015:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b01a:	83 c4 0c             	add    esp,0xc
c000b01d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b021:	50                   	push   eax
c000b022:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b026:	50                   	push   eax
c000b027:	53                   	push   ebx
c000b028:	e8 b7 fe ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c000b02d:	83 c4 10             	add    esp,0x10
c000b030:	83 f8 02             	cmp    eax,0x2
c000b033:	74 04                	je     c000b039 <Fs::setcwd(Process*, char*)+0xf4>
c000b035:	85 c0                	test   eax,eax
c000b037:	74 1c                	je     c000b055 <Fs::setcwd(Process*, char*)+0x110>
c000b039:	b8 01 00 00 00       	mov    eax,0x1
c000b03e:	85 db                	test   ebx,ebx
c000b040:	74 54                	je     c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000b042:	83 ec 0c             	sub    esp,0xc
c000b045:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b047:	53                   	push   ebx
c000b048:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	b8 01 00 00 00       	mov    eax,0x1
c000b053:	eb 41                	jmp    c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000b055:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b05a:	75 1c                	jne    c000b078 <Fs::setcwd(Process*, char*)+0x133>
c000b05c:	b8 02 00 00 00       	mov    eax,0x2
c000b061:	85 db                	test   ebx,ebx
c000b063:	74 31                	je     c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b06a:	53                   	push   ebx
c000b06b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b06e:	83 c4 10             	add    esp,0x10
c000b071:	b8 02 00 00 00       	mov    eax,0x2
c000b076:	eb 1e                	jmp    c000b096 <Fs::setcwd(Process*, char*)+0x151>
c000b078:	85 db                	test   ebx,ebx
c000b07a:	74 0c                	je     c000b088 <Fs::setcwd(Process*, char*)+0x143>
c000b07c:	83 ec 0c             	sub    esp,0xc
c000b07f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b081:	53                   	push   ebx
c000b082:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	50                   	push   eax
c000b089:	50                   	push   eax
c000b08a:	56                   	push   esi
c000b08b:	57                   	push   edi
c000b08c:	e8 6f 55 ff ff       	call   c0000600 <strcpy>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	31 c0                	xor    eax,eax
c000b096:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b09c:	5b                   	pop    ebx
c000b09d:	5e                   	pop    esi
c000b09e:	5f                   	pop    edi
c000b09f:	5d                   	pop    ebp
c000b0a0:	c3                   	ret    
c000b0a1:	90                   	nop

c000b0a2 <Directory::Directory(char const*, Process*)>:
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a9:	83 ec 08             	sub    esp,0x8
c000b0ac:	6a 00                	push   0x0
c000b0ae:	50                   	push   eax
c000b0af:	e8 8e dd ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000b0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c0:	89 10                	mov    DWORD PTR [eax],edx
c000b0c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d0:	83 c0 0d             	add    eax,0xd
c000b0d3:	83 ec 04             	sub    esp,0x4
c000b0d6:	52                   	push   edx
c000b0d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0db:	50                   	push   eax
c000b0dc:	e8 ed f8 ff ff       	call   c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0eb:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b10a:	25 ff 00 00 00       	and    eax,0xff
c000b10f:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b116:	85 c0                	test   eax,eax
c000b118:	74 42                	je     c000b15c <Directory::Directory(char const*, Process*)+0xba>
c000b11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b124:	25 ff 00 00 00       	and    eax,0xff
c000b129:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b130:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b136:	85 c0                	test   eax,eax
c000b138:	75 22                	jne    c000b15c <Directory::Directory(char const*, Process*)+0xba>
c000b13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b144:	25 ff 00 00 00       	and    eax,0xff
c000b149:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	50                   	push   eax
c000b154:	e8 0d 1b 00 00       	call   c000cc66 <LogicalDisk::mount()>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	90                   	nop
c000b15d:	83 c4 0c             	add    esp,0xc
c000b160:	c3                   	ret    
c000b161:	90                   	nop

c000b162 <Directory::open()>:
c000b162:	53                   	push   ebx
c000b163:	b8 0b 00 00 00       	mov    eax,0xb
c000b168:	83 ec 08             	sub    esp,0x8
c000b16b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b16f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b176:	80 fa 19             	cmp    dl,0x19
c000b179:	77 3d                	ja     c000b1b8 <Directory::open()+0x56>
c000b17b:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b182:	85 d2                	test   edx,edx
c000b184:	74 32                	je     c000b1b8 <Directory::open()+0x56>
c000b186:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b18c:	85 d2                	test   edx,edx
c000b18e:	74 28                	je     c000b1b8 <Directory::open()+0x56>
c000b190:	b8 06 00 00 00       	mov    eax,0x6
c000b195:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b199:	75 1d                	jne    c000b1b8 <Directory::open()+0x56>
c000b19b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1a1:	50                   	push   eax
c000b1a2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1a4:	51                   	push   ecx
c000b1a5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1a8:	51                   	push   ecx
c000b1a9:	52                   	push   edx
c000b1aa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1ad:	83 c4 10             	add    esp,0x10
c000b1b0:	85 c0                	test   eax,eax
c000b1b2:	75 04                	jne    c000b1b8 <Directory::open()+0x56>
c000b1b4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1b8:	83 c4 08             	add    esp,0x8
c000b1bb:	5b                   	pop    ebx
c000b1bc:	c3                   	ret    
c000b1bd:	90                   	nop

c000b1be <Directory::close()>:
c000b1be:	53                   	push   ebx
c000b1bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c4:	83 ec 08             	sub    esp,0x8
c000b1c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1cb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1d2:	80 fa 19             	cmp    dl,0x19
c000b1d5:	77 41                	ja     c000b218 <Directory::close()+0x5a>
c000b1d7:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1de:	85 db                	test   ebx,ebx
c000b1e0:	74 36                	je     c000b218 <Directory::close()+0x5a>
c000b1e2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1e9:	74 2d                	je     c000b218 <Directory::close()+0x5a>
c000b1eb:	b8 05 00 00 00       	mov    eax,0x5
c000b1f0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1f4:	74 22                	je     c000b218 <Directory::close()+0x5a>
c000b1f6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1fa:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b201:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b207:	53                   	push   ebx
c000b208:	53                   	push   ebx
c000b209:	8b 10                	mov    edx,DWORD PTR [eax]
c000b20b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b211:	50                   	push   eax
c000b212:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	83 c4 08             	add    esp,0x8
c000b21b:	5b                   	pop    ebx
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <Directory::unlink()>:
c000b21e:	83 ec 0c             	sub    esp,0xc
c000b221:	b8 0b 00 00 00       	mov    eax,0xb
c000b226:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b231:	80 f9 19             	cmp    cl,0x19
c000b234:	77 2f                	ja     c000b265 <Directory::unlink()+0x47>
c000b236:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b23d:	85 c9                	test   ecx,ecx
c000b23f:	74 24                	je     c000b265 <Directory::unlink()+0x47>
c000b241:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b247:	85 c9                	test   ecx,ecx
c000b249:	74 1a                	je     c000b265 <Directory::unlink()+0x47>
c000b24b:	b8 06 00 00 00       	mov    eax,0x6
c000b250:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b254:	75 0f                	jne    c000b265 <Directory::unlink()+0x47>
c000b256:	83 c2 0d             	add    edx,0xd
c000b259:	50                   	push   eax
c000b25a:	50                   	push   eax
c000b25b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b25d:	52                   	push   edx
c000b25e:	51                   	push   ecx
c000b25f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	83 c4 0c             	add    esp,0xc
c000b268:	c3                   	ret    
c000b269:	90                   	nop

c000b26a <Directory::rename(char const*)>:
c000b26a:	83 ec 0c             	sub    esp,0xc
c000b26d:	b8 0b 00 00 00       	mov    eax,0xb
c000b272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27d:	80 f9 19             	cmp    cl,0x19
c000b280:	77 32                	ja     c000b2b4 <Directory::rename(char const*)+0x4a>
c000b282:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b289:	85 c9                	test   ecx,ecx
c000b28b:	74 27                	je     c000b2b4 <Directory::rename(char const*)+0x4a>
c000b28d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b293:	85 c9                	test   ecx,ecx
c000b295:	74 1d                	je     c000b2b4 <Directory::rename(char const*)+0x4a>
c000b297:	b8 06 00 00 00       	mov    eax,0x6
c000b29c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a0:	75 12                	jne    c000b2b4 <Directory::rename(char const*)+0x4a>
c000b2a2:	83 c2 0d             	add    edx,0xd
c000b2a5:	50                   	push   eax
c000b2a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2ac:	52                   	push   edx
c000b2ad:	51                   	push   ecx
c000b2ae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b1:	83 c4 10             	add    esp,0x10
c000b2b4:	83 c4 0c             	add    esp,0xc
c000b2b7:	c3                   	ret    

c000b2b8 <Directory::exists()>:
c000b2b8:	83 ec 0c             	sub    esp,0xc
c000b2bb:	31 c0                	xor    eax,eax
c000b2bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2c8:	80 f9 19             	cmp    cl,0x19
c000b2cb:	77 24                	ja     c000b2f1 <Directory::exists()+0x39>
c000b2cd:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2d4:	85 c9                	test   ecx,ecx
c000b2d6:	74 19                	je     c000b2f1 <Directory::exists()+0x39>
c000b2d8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2de:	85 c9                	test   ecx,ecx
c000b2e0:	74 0f                	je     c000b2f1 <Directory::exists()+0x39>
c000b2e2:	83 c2 0d             	add    edx,0xd
c000b2e5:	50                   	push   eax
c000b2e6:	50                   	push   eax
c000b2e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e9:	52                   	push   edx
c000b2ea:	51                   	push   ecx
c000b2eb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2ee:	83 c4 10             	add    esp,0x10
c000b2f1:	83 c4 0c             	add    esp,0xc
c000b2f4:	c3                   	ret    
c000b2f5:	90                   	nop

c000b2f6 <Directory::read(dirent*)>:
c000b2f6:	83 ec 1c             	sub    esp,0x1c
c000b2f9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b302:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b309:	80 fa 19             	cmp    dl,0x19
c000b30c:	77 30                	ja     c000b33e <Directory::read(dirent*)+0x48>
c000b30e:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b315:	85 d2                	test   edx,edx
c000b317:	74 25                	je     c000b33e <Directory::read(dirent*)+0x48>
c000b319:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b320:	74 1c                	je     c000b33e <Directory::read(dirent*)+0x48>
c000b322:	83 ec 0c             	sub    esp,0xc
c000b325:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b327:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b32b:	52                   	push   edx
c000b32c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b330:	6a 00                	push   0x0
c000b332:	68 10 01 00 00       	push   0x110
c000b337:	51                   	push   ecx
c000b338:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b33b:	83 c4 20             	add    esp,0x20
c000b33e:	83 c4 1c             	add    esp,0x1c
c000b341:	c3                   	ret    

c000b342 <Directory::create()>:
c000b342:	83 ec 0c             	sub    esp,0xc
c000b345:	b8 0b 00 00 00       	mov    eax,0xb
c000b34a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b34e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b355:	80 f9 19             	cmp    cl,0x19
c000b358:	77 2f                	ja     c000b389 <Directory::create()+0x47>
c000b35a:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b361:	85 c9                	test   ecx,ecx
c000b363:	74 24                	je     c000b389 <Directory::create()+0x47>
c000b365:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b36b:	85 c9                	test   ecx,ecx
c000b36d:	74 1a                	je     c000b389 <Directory::create()+0x47>
c000b36f:	b8 06 00 00 00       	mov    eax,0x6
c000b374:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b378:	75 0f                	jne    c000b389 <Directory::create()+0x47>
c000b37a:	83 c2 0d             	add    edx,0xd
c000b37d:	50                   	push   eax
c000b37e:	50                   	push   eax
c000b37f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b381:	52                   	push   edx
c000b382:	51                   	push   ecx
c000b383:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	83 c4 0c             	add    esp,0xc
c000b38c:	c3                   	ret    
c000b38d:	90                   	nop

c000b38e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b38e:	b8 0a 00 00 00       	mov    eax,0xa
c000b393:	c3                   	ret    

c000b394 <Bus::Bus(char const*)>:
c000b394:	83 ec 0c             	sub    esp,0xc
c000b397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39b:	83 ec 08             	sub    esp,0x8
c000b39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a2:	50                   	push   eax
c000b3a3:	e8 30 08 00 00       	call   c000bbd8 <Device::Device(char const*)>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000b3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b4:	89 10                	mov    DWORD PTR [eax],edx
c000b3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ba:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3c4:	90                   	nop
c000b3c5:	83 c4 0c             	add    esp,0xc
c000b3c8:	c3                   	ret    
c000b3c9:	90                   	nop
c000b3ca:	66 90                	xchg   ax,ax

c000b3cc <Bus::~Bus()>:
c000b3cc:	83 ec 0c             	sub    esp,0xc
c000b3cf:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000b3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d8:	89 10                	mov    DWORD PTR [eax],edx
c000b3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3de:	83 ec 0c             	sub    esp,0xc
c000b3e1:	50                   	push   eax
c000b3e2:	e8 5b 05 00 00       	call   c000b942 <Device::~Device()>
c000b3e7:	83 c4 10             	add    esp,0x10
c000b3ea:	90                   	nop
c000b3eb:	83 c4 0c             	add    esp,0xc
c000b3ee:	c3                   	ret    
c000b3ef:	90                   	nop

c000b3f0 <Bus::~Bus()>:
c000b3f0:	83 ec 0c             	sub    esp,0xc
c000b3f3:	83 ec 0c             	sub    esp,0xc
c000b3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fa:	e8 cd ff ff ff       	call   c000b3cc <Bus::~Bus()>
c000b3ff:	83 c4 10             	add    esp,0x10
c000b402:	83 ec 08             	sub    esp,0x8
c000b405:	68 58 01 00 00       	push   0x158
c000b40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40e:	e8 fa f0 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	83 c4 0c             	add    esp,0xc
c000b419:	c3                   	ret    

c000b41a <beepThread(void*)>:
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b426:	48                   	dec    eax
c000b427:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b42c:	75 01                	jne    c000b42f <beepThread(void*)+0x15>
c000b42e:	fb                   	sti    
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	6b c2 0a             	imul   eax,edx,0xa
c000b435:	50                   	push   eax
c000b436:	e8 3d 87 00 00       	call   c0013b78 <milliTenthSleep(unsigned int)>
c000b43b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b442:	e8 e3 a4 00 00       	call   c001592a <HalMakeBeep(int)>
c000b447:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b44f:	83 c4 1c             	add    esp,0x1c
c000b452:	e9 1d 86 00 00       	jmp    c0013a74 <blockTask(TaskState)>

c000b457 <Krnl::beep(int, int, bool)>:
c000b457:	56                   	push   esi
c000b458:	53                   	push   ebx
c000b459:	83 ec 10             	sub    esp,0x10
c000b45c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b460:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b468:	e8 bd a4 00 00       	call   c001592a <HalMakeBeep(int)>
c000b46d:	83 c4 10             	add    esp,0x10
c000b470:	89 f0                	mov    eax,esi
c000b472:	84 c0                	test   al,al
c000b474:	74 1e                	je     c000b494 <Krnl::beep(int, int, bool)+0x3d>
c000b476:	83 ec 0c             	sub    esp,0xc
c000b479:	6b db 0a             	imul   ebx,ebx,0xa
c000b47c:	53                   	push   ebx
c000b47d:	e8 f6 86 00 00       	call   c0013b78 <milliTenthSleep(unsigned int)>
c000b482:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b48a:	83 c4 14             	add    esp,0x14
c000b48d:	5b                   	pop    ebx
c000b48e:	5e                   	pop    esi
c000b48f:	e9 96 a4 00 00       	jmp    c001592a <HalMakeBeep(int)>
c000b494:	68 e6 00 00 00       	push   0xe6
c000b499:	53                   	push   ebx
c000b49a:	68 1a b4 00 c0       	push   0xc000b41a
c000b49f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b4a5:	e8 ae 81 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c000b4aa:	83 c4 14             	add    esp,0x14
c000b4ad:	5b                   	pop    ebx
c000b4ae:	5e                   	pop    esi
c000b4af:	c3                   	ret    

c000b4b0 <User::loadClockSettings(int)>:
c000b4b0:	53                   	push   ebx
c000b4b1:	83 ec 14             	sub    esp,0x14
c000b4b4:	68 14 01 00 00       	push   0x114
c000b4b9:	e8 fb c2 ff ff       	call   c00077b9 <malloc>
c000b4be:	83 c4 0c             	add    esp,0xc
c000b4c1:	89 c3                	mov    ebx,eax
c000b4c3:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b4c9:	68 00 df 01 c0       	push   0xc001df00
c000b4ce:	50                   	push   eax
c000b4cf:	e8 a4 f6 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000b4d4:	58                   	pop    eax
c000b4d5:	5a                   	pop    edx
c000b4d6:	6a 01                	push   0x1
c000b4d8:	53                   	push   ebx
c000b4d9:	e8 5a f7 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c000b4de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4e1:	e8 b0 f7 ff ff       	call   c000ac96 <File::close()>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	85 db                	test   ebx,ebx
c000b4eb:	74 0f                	je     c000b4fc <User::loadClockSettings(int)+0x4c>
c000b4ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4f6:	83 c4 08             	add    esp,0x8
c000b4f9:	5b                   	pop    ebx
c000b4fa:	ff e0                	jmp    eax
c000b4fc:	83 c4 08             	add    esp,0x8
c000b4ff:	5b                   	pop    ebx
c000b500:	c3                   	ret    
c000b501:	90                   	nop

c000b502 <Clock::Clock(char const*)>:
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b509:	83 ec 08             	sub    esp,0x8
c000b50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b510:	50                   	push   eax
c000b511:	e8 c2 06 00 00       	call   c000bbd8 <Device::Device(char const*)>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000b51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b522:	89 10                	mov    DWORD PTR [eax],edx
c000b524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b528:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b532:	90                   	nop
c000b533:	83 c4 0c             	add    esp,0xc
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <Clock::~Clock()>:
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000b540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b544:	89 10                	mov    DWORD PTR [eax],edx
c000b546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54a:	83 ec 0c             	sub    esp,0xc
c000b54d:	50                   	push   eax
c000b54e:	e8 ef 03 00 00       	call   c000b942 <Device::~Device()>
c000b553:	83 c4 10             	add    esp,0x10
c000b556:	90                   	nop
c000b557:	83 c4 0c             	add    esp,0xc
c000b55a:	c3                   	ret    
c000b55b:	90                   	nop

c000b55c <Clock::~Clock()>:
c000b55c:	83 ec 0c             	sub    esp,0xc
c000b55f:	83 ec 0c             	sub    esp,0xc
c000b562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b566:	e8 cd ff ff ff       	call   c000b538 <Clock::~Clock()>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 ec 08             	sub    esp,0x8
c000b571:	68 58 01 00 00       	push   0x158
c000b576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57a:	e8 8e ef ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	83 c4 0c             	add    esp,0xc
c000b585:	c3                   	ret    

c000b586 <Clock::timeInSecondsLocal()>:
c000b586:	53                   	push   ebx
c000b587:	83 ec 14             	sub    esp,0x14
c000b58a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b590:	50                   	push   eax
c000b591:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b594:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b59b:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b5a1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5a7:	89 cb                	mov    ebx,ecx
c000b5a9:	c1 fb 1f             	sar    ebx,0x1f
c000b5ac:	01 c8                	add    eax,ecx
c000b5ae:	11 da                	adc    edx,ebx
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	31 c9                	xor    ecx,ecx
c000b5b5:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b5bc:	74 05                	je     c000b5c3 <Clock::timeInSecondsLocal()+0x3d>
c000b5be:	b9 08 07 00 00       	mov    ecx,0x708
c000b5c3:	31 db                	xor    ebx,ebx
c000b5c5:	01 c8                	add    eax,ecx
c000b5c7:	11 da                	adc    edx,ebx
c000b5c9:	83 c4 08             	add    esp,0x8
c000b5cc:	5b                   	pop    ebx
c000b5cd:	c3                   	ret    

c000b5ce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5ce:	57                   	push   edi
c000b5cf:	56                   	push   esi
c000b5d0:	53                   	push   ebx
c000b5d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5df:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5e2:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b5e9:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b5ef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5f5:	99                   	cdq    
c000b5f6:	29 c6                	sub    esi,eax
c000b5f8:	19 d7                	sbb    edi,edx
c000b5fa:	89 f0                	mov    eax,esi
c000b5fc:	89 fa                	mov    edx,edi
c000b5fe:	31 f6                	xor    esi,esi
c000b600:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b607:	74 05                	je     c000b60e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b609:	be 08 07 00 00       	mov    esi,0x708
c000b60e:	31 ff                	xor    edi,edi
c000b610:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b614:	29 f0                	sub    eax,esi
c000b616:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b61a:	19 fa                	sbb    edx,edi
c000b61c:	89 d8                	mov    eax,ebx
c000b61e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b622:	5b                   	pop    ebx
c000b623:	5e                   	pop    esi
c000b624:	5f                   	pop    edi
c000b625:	ff e0                	jmp    eax

c000b627 <datetimeToSeconds(datetime_t)>:
c000b627:	55                   	push   ebp
c000b628:	57                   	push   edi
c000b629:	56                   	push   esi
c000b62a:	53                   	push   ebx
c000b62b:	83 ec 14             	sub    esp,0x14
c000b62e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b632:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b636:	89 d3                	mov    ebx,edx
c000b638:	0f b6 c6             	movzx  eax,dh
c000b63b:	c1 eb 10             	shr    ebx,0x10
c000b63e:	48                   	dec    eax
c000b63f:	66 81 eb 6c 07       	sub    bx,0x76c
c000b644:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b648:	0f b6 f5             	movzx  esi,ch
c000b64b:	89 cf                	mov    edi,ecx
c000b64d:	6b f6 3c             	imul   esi,esi,0x3c
c000b650:	c1 ef 10             	shr    edi,0x10
c000b653:	0f b6 c9             	movzx  ecx,cl
c000b656:	89 f8                	mov    eax,edi
c000b658:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b65e:	0f b6 f8             	movzx  edi,al
c000b661:	0f b6 d2             	movzx  edx,dl
c000b664:	01 fe                	add    esi,edi
c000b666:	01 f1                	add    ecx,esi
c000b668:	0f b7 f3             	movzx  esi,bx
c000b66b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b66f:	c1 f9 1f             	sar    ecx,0x1f
c000b672:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b677:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b67b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b680:	8b 0c 8d 60 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20a0]
c000b687:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b68b:	76 29                	jbe    c000b6b6 <datetimeToSeconds(datetime_t)+0x8f>
c000b68d:	f6 c3 03             	test   bl,0x3
c000b690:	75 24                	jne    c000b6b6 <datetimeToSeconds(datetime_t)+0x8f>
c000b692:	31 d2                	xor    edx,edx
c000b694:	bf 64 00 00 00       	mov    edi,0x64
c000b699:	89 d8                	mov    eax,ebx
c000b69b:	66 f7 f7             	div    di
c000b69e:	66 85 d2             	test   dx,dx
c000b6a1:	75 12                	jne    c000b6b5 <datetimeToSeconds(datetime_t)+0x8e>
c000b6a3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6a9:	bf 90 01 00 00       	mov    edi,0x190
c000b6ae:	99                   	cdq    
c000b6af:	f7 ff                	idiv   edi
c000b6b1:	85 d2                	test   edx,edx
c000b6b3:	75 01                	jne    c000b6b6 <datetimeToSeconds(datetime_t)+0x8f>
c000b6b5:	41                   	inc    ecx
c000b6b6:	66 83 fb 46          	cmp    bx,0x46
c000b6ba:	76 45                	jbe    c000b701 <datetimeToSeconds(datetime_t)+0xda>
c000b6bc:	bb 46 00 00 00       	mov    ebx,0x46
c000b6c1:	bf 64 00 00 00       	mov    edi,0x64
c000b6c6:	bd 90 01 00 00       	mov    ebp,0x190
c000b6cb:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6d0:	f6 c3 03             	test   bl,0x3
c000b6d3:	75 23                	jne    c000b6f8 <datetimeToSeconds(datetime_t)+0xd1>
c000b6d5:	89 d8                	mov    eax,ebx
c000b6d7:	99                   	cdq    
c000b6d8:	f7 ff                	idiv   edi
c000b6da:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6df:	85 d2                	test   edx,edx
c000b6e1:	75 15                	jne    c000b6f8 <datetimeToSeconds(datetime_t)+0xd1>
c000b6e3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6e9:	99                   	cdq    
c000b6ea:	f7 fd                	idiv   ebp
c000b6ec:	31 c0                	xor    eax,eax
c000b6ee:	85 d2                	test   edx,edx
c000b6f0:	0f 94 c0             	sete   al
c000b6f3:	05 6d 01 00 00       	add    eax,0x16d
c000b6f8:	01 c1                	add    ecx,eax
c000b6fa:	43                   	inc    ebx
c000b6fb:	39 f3                	cmp    ebx,esi
c000b6fd:	7c cc                	jl     c000b6cb <datetimeToSeconds(datetime_t)+0xa4>
c000b6ff:	eb 3b                	jmp    c000b73c <datetimeToSeconds(datetime_t)+0x115>
c000b701:	74 39                	je     c000b73c <datetimeToSeconds(datetime_t)+0x115>
c000b703:	b8 45 00 00 00       	mov    eax,0x45
c000b708:	89 c2                	mov    edx,eax
c000b70a:	83 e2 03             	and    edx,0x3
c000b70d:	39 f0                	cmp    eax,esi
c000b70f:	7e 13                	jle    c000b724 <datetimeToSeconds(datetime_t)+0xfd>
c000b711:	85 d2                	test   edx,edx
c000b713:	0f 94 c2             	sete   dl
c000b716:	48                   	dec    eax
c000b717:	0f b6 d2             	movzx  edx,dl
c000b71a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b720:	29 d1                	sub    ecx,edx
c000b722:	eb e4                	jmp    c000b708 <datetimeToSeconds(datetime_t)+0xe1>
c000b724:	b8 6d 01 00 00       	mov    eax,0x16d
c000b729:	85 d2                	test   edx,edx
c000b72b:	75 0d                	jne    c000b73a <datetimeToSeconds(datetime_t)+0x113>
c000b72d:	31 c0                	xor    eax,eax
c000b72f:	66 85 db             	test   bx,bx
c000b732:	0f 95 c0             	setne  al
c000b735:	05 6d 01 00 00       	add    eax,0x16d
c000b73a:	29 c1                	sub    ecx,eax
c000b73c:	b8 80 51 01 00       	mov    eax,0x15180
c000b741:	f7 e9                	imul   ecx
c000b743:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b747:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b74b:	83 c4 14             	add    esp,0x14
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	5f                   	pop    edi
c000b751:	5d                   	pop    ebp
c000b752:	c3                   	ret    
c000b753:	90                   	nop

c000b754 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b754:	57                   	push   edi
c000b755:	56                   	push   esi
c000b756:	53                   	push   ebx
c000b757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b75b:	8b 06                	mov    eax,DWORD PTR [esi]
c000b75d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b760:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b768:	e8 ba fe ff ff       	call   c000b627 <datetimeToSeconds(datetime_t)>
c000b76d:	59                   	pop    ecx
c000b76e:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b775:	5b                   	pop    ebx
c000b776:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b77c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b782:	89 cb                	mov    ebx,ecx
c000b784:	c1 fb 1f             	sar    ebx,0x1f
c000b787:	29 c8                	sub    eax,ecx
c000b789:	19 da                	sbb    edx,ebx
c000b78b:	31 c9                	xor    ecx,ecx
c000b78d:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b794:	74 05                	je     c000b79b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b796:	b9 08 07 00 00       	mov    ecx,0x708
c000b79b:	31 db                	xor    ebx,ebx
c000b79d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7a1:	29 c8                	sub    eax,ecx
c000b7a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7a7:	19 da                	sbb    edx,ebx
c000b7a9:	89 f8                	mov    eax,edi
c000b7ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7af:	5b                   	pop    ebx
c000b7b0:	5e                   	pop    esi
c000b7b1:	5f                   	pop    edi
c000b7b2:	ff e0                	jmp    eax

c000b7b4 <secondsToDatetime(unsigned long long)>:
c000b7b4:	55                   	push   ebp
c000b7b5:	57                   	push   edi
c000b7b6:	56                   	push   esi
c000b7b7:	53                   	push   ebx
c000b7b8:	83 ec 1c             	sub    esp,0x1c
c000b7bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7c3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7c7:	6a 00                	push   0x0
c000b7c9:	68 80 51 01 00       	push   0x15180
c000b7ce:	55                   	push   ebp
c000b7cf:	57                   	push   edi
c000b7d0:	e8 fb 09 01 00       	call   c001c1d0 <__udivdi3>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7e2:	6a 00                	push   0x0
c000b7e4:	68 80 51 01 00       	push   0x15180
c000b7e9:	55                   	push   ebp
c000b7ea:	57                   	push   edi
c000b7eb:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7f0:	e8 db 0a 01 00       	call   c001c2d0 <__umoddi3>
c000b7f5:	83 c4 10             	add    esp,0x10
c000b7f8:	99                   	cdq    
c000b7f9:	f7 ff                	idiv   edi
c000b7fb:	bf 3c 00 00 00       	mov    edi,0x3c
c000b800:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b803:	89 d0                	mov    eax,edx
c000b805:	99                   	cdq    
c000b806:	f7 ff                	idiv   edi
c000b808:	85 db                	test   ebx,ebx
c000b80a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b80d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b810:	79 11                	jns    c000b823 <secondsToDatetime(unsigned long long)+0x6f>
c000b812:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b816:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b81c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b821:	eb 07                	jmp    c000b82a <secondsToDatetime(unsigned long long)+0x76>
c000b823:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b828:	89 d8                	mov    eax,ebx
c000b82a:	bf b4 05 00 00       	mov    edi,0x5b4
c000b82f:	99                   	cdq    
c000b830:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b835:	f7 f9                	idiv   ecx
c000b837:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b83c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b840:	31 d2                	xor    edx,edx
c000b842:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b84a:	01 c3                	add    ebx,eax
c000b84c:	89 d8                	mov    eax,ebx
c000b84e:	f7 f1                	div    ecx
c000b850:	31 d2                	xor    edx,edx
c000b852:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b855:	89 d8                	mov    eax,ebx
c000b857:	f7 f7                	div    edi
c000b859:	31 d2                	xor    edx,edx
c000b85b:	29 c1                	sub    ecx,eax
c000b85d:	89 d8                	mov    eax,ebx
c000b85f:	f7 f5                	div    ebp
c000b861:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b866:	29 c1                	sub    ecx,eax
c000b868:	31 d2                	xor    edx,edx
c000b86a:	89 c8                	mov    eax,ecx
c000b86c:	f7 f5                	div    ebp
c000b86e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b877:	31 d2                	xor    edx,edx
c000b879:	89 c8                	mov    eax,ecx
c000b87b:	f7 f5                	div    ebp
c000b87d:	31 d2                	xor    edx,edx
c000b87f:	01 c3                	add    ebx,eax
c000b881:	89 c8                	mov    eax,ecx
c000b883:	f7 f7                	div    edi
c000b885:	bf 99 00 00 00       	mov    edi,0x99
c000b88a:	29 c3                	sub    ebx,eax
c000b88c:	31 d2                	xor    edx,edx
c000b88e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b896:	29 c3                	sub    ebx,eax
c000b898:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b89b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b89e:	bb 05 00 00 00       	mov    ebx,0x5
c000b8a3:	83 c1 02             	add    ecx,0x2
c000b8a6:	89 c8                	mov    eax,ecx
c000b8a8:	f7 f7                	div    edi
c000b8aa:	31 d2                	xor    edx,edx
c000b8ac:	89 c7                	mov    edi,eax
c000b8ae:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8b4:	83 c0 02             	add    eax,0x2
c000b8b7:	f7 f3                	div    ebx
c000b8b9:	89 eb                	mov    ebx,ebp
c000b8bb:	29 c3                	sub    ebx,eax
c000b8bd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8c3:	88 1e                	mov    BYTE PTR [esi],bl
c000b8c5:	19 c0                	sbb    eax,eax
c000b8c7:	31 d2                	xor    edx,edx
c000b8c9:	83 e0 0c             	and    eax,0xc
c000b8cc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8d0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8d8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8dc:	83 f9 01             	cmp    ecx,0x1
c000b8df:	0f 96 c2             	setbe  dl
c000b8e2:	41                   	inc    ecx
c000b8e3:	01 d0                	add    eax,edx
c000b8e5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8e8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8ec:	83 c4 1c             	add    esp,0x1c
c000b8ef:	89 f0                	mov    eax,esi
c000b8f1:	5b                   	pop    ebx
c000b8f2:	5e                   	pop    esi
c000b8f3:	5f                   	pop    edi
c000b8f4:	5d                   	pop    ebp
c000b8f5:	c2 04 00             	ret    0x4

c000b8f8 <Clock::timeInDatetimeLocal()>:
c000b8f8:	53                   	push   ebx
c000b8f9:	83 ec 14             	sub    esp,0x14
c000b8fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b900:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b904:	e8 7d fc ff ff       	call   c000b586 <Clock::timeInSecondsLocal()>
c000b909:	83 c4 0c             	add    esp,0xc
c000b90c:	52                   	push   edx
c000b90d:	50                   	push   eax
c000b90e:	53                   	push   ebx
c000b90f:	e8 a0 fe ff ff       	call   c000b7b4 <secondsToDatetime(unsigned long long)>
c000b914:	89 d8                	mov    eax,ebx
c000b916:	83 c4 14             	add    esp,0x14
c000b919:	5b                   	pop    ebx
c000b91a:	c2 04 00             	ret    0x4
c000b91d:	90                   	nop

c000b91e <Device::hibernate()>:
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <Device::wake()>:
c000b920:	c3                   	ret    
c000b921:	90                   	nop

c000b922 <Device::detect()>:
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Device::disableLegacy()>:
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <Device::powerSaving(PowerSavingLevel)>:
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <DriverlessDevice::close(int, int, void*)>:
c000b928:	31 c0                	xor    eax,eax
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <DriverlessDevice::detect()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <DriverlessDevice::open(int, int, void*)>:
c000b92e:	83 ec 18             	sub    esp,0x18
c000b931:	68 90 df 01 c0       	push   0xc001df90
c000b936:	e8 48 49 00 00       	call   c0010283 <KePanic(char const*)>
c000b93b:	83 c8 ff             	or     eax,0xffffffff
c000b93e:	83 c4 1c             	add    esp,0x1c
c000b941:	c3                   	ret    

c000b942 <Device::~Device()>:
c000b942:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	89 10                	mov    DWORD PTR [eax],edx
c000b94d:	90                   	nop
c000b94e:	c3                   	ret    
c000b94f:	90                   	nop

c000b950 <Device::~Device()>:
c000b950:	83 ec 0c             	sub    esp,0xc
c000b953:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b957:	e8 e6 ff ff ff       	call   c000b942 <Device::~Device()>
c000b95c:	83 c4 04             	add    esp,0x4
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	68 58 01 00 00       	push   0x158
c000b967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b96b:	e8 9d eb ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000b970:	83 c4 10             	add    esp,0x10
c000b973:	83 c4 0c             	add    esp,0xc
c000b976:	c3                   	ret    
c000b977:	90                   	nop

c000b978 <Device::findAndLoadDriver()>:
c000b978:	c7 44 24 04 ae df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfae
c000b980:	e9 7e ec ff ff       	jmp    c000a603 <Dbg::kprintf(char const*, ...)>
c000b985:	90                   	nop

c000b986 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b986:	57                   	push   edi
c000b987:	b9 09 00 00 00       	mov    ecx,0x9
c000b98c:	56                   	push   esi
c000b98d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b991:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b995:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b99f:	81 c7 18 01 00 00    	add    edi,0x118
c000b9a5:	fc                   	cld    
c000b9a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9a8:	5e                   	pop    esi
c000b9a9:	5f                   	pop    edi
c000b9aa:	c3                   	ret    
c000b9ab:	90                   	nop

c000b9ac <Device::preOpenACPI(void*, char*, char*)>:
c000b9ac:	57                   	push   edi
c000b9ad:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9b2:	56                   	push   esi
c000b9b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9bb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9c5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9cb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9d7:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9dc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9e2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e8:	5e                   	pop    esi
c000b9e9:	5f                   	pop    edi
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9ec:	53                   	push   ebx
c000b9ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9fd:	0f b6 c0             	movzx  eax,al
c000ba00:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba10:	5b                   	pop    ebx
c000ba11:	e9 a6 05 00 00       	jmp    c000bfbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba16 <Device::getParent()>:
c000ba16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba1a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba20:	c3                   	ret    
c000ba21:	90                   	nop

c000ba22 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba2a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba3b:	e9 e8 06 00 00       	jmp    c000c128 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba40 <Device::addChild(Device*)>:
c000ba40:	53                   	push   ebx
c000ba41:	83 ec 08             	sub    esp,0x8
c000ba44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba4c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba52:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba58:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba5a:	85 d2                	test   edx,edx
c000ba5c:	74 04                	je     c000ba62 <Device::addChild(Device*)+0x22>
c000ba5e:	89 d3                	mov    ebx,edx
c000ba60:	eb f6                	jmp    c000ba58 <Device::addChild(Device*)+0x18>
c000ba62:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba65:	83 ec 0c             	sub    esp,0xc
c000ba68:	6a 08                	push   0x8
c000ba6a:	e8 4a bd ff ff       	call   c00077b9 <malloc>
c000ba6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ba71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba7e:	83 c4 18             	add    esp,0x18
c000ba81:	5b                   	pop    ebx
c000ba82:	c3                   	ret    
c000ba83:	90                   	nop

c000ba84 <Device::removeAllChildren()>:
c000ba84:	56                   	push   esi
c000ba85:	53                   	push   ebx
c000ba86:	52                   	push   edx
c000ba87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba8b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba94:	74 17                	je     c000baad <Device::removeAllChildren()+0x29>
c000ba96:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba99:	85 c0                	test   eax,eax
c000ba9b:	74 0c                	je     c000baa9 <Device::removeAllChildren()+0x25>
c000ba9d:	83 ec 0c             	sub    esp,0xc
c000baa0:	8b 10                	mov    edx,DWORD PTR [eax]
c000baa2:	50                   	push   eax
c000baa3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baab:	eb e4                	jmp    c000ba91 <Device::removeAllChildren()+0xd>
c000baad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bab9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bac6:	58                   	pop    eax
c000bac7:	5b                   	pop    ebx
c000bac8:	5e                   	pop    esi
c000bac9:	c3                   	ret    

c000baca <Device::hibernateAll()>:
c000baca:	53                   	push   ebx
c000bacb:	83 ec 14             	sub    esp,0x14
c000bace:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad4:	53                   	push   ebx
c000bad5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bad8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bade:	83 c4 10             	add    esp,0x10
c000bae1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae4:	74 0f                	je     c000baf5 <Device::hibernateAll()+0x2b>
c000bae6:	83 ec 0c             	sub    esp,0xc
c000bae9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baec:	e8 d9 ff ff ff       	call   c000baca <Device::hibernateAll()>
c000baf1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baf3:	eb e9                	jmp    c000bade <Device::hibernateAll()+0x14>
c000baf5:	83 c4 08             	add    esp,0x8
c000baf8:	5b                   	pop    ebx
c000baf9:	c3                   	ret    

c000bafa <Device::wakeAll()>:
c000bafa:	53                   	push   ebx
c000bafb:	83 ec 14             	sub    esp,0x14
c000bafe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb04:	53                   	push   ebx
c000bb05:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb14:	74 0f                	je     c000bb25 <Device::wakeAll()+0x2b>
c000bb16:	83 ec 0c             	sub    esp,0xc
c000bb19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb1c:	e8 d9 ff ff ff       	call   c000bafa <Device::wakeAll()>
c000bb21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb23:	eb e9                	jmp    c000bb0e <Device::wakeAll()+0x14>
c000bb25:	83 c4 08             	add    esp,0x8
c000bb28:	5b                   	pop    ebx
c000bb29:	c3                   	ret    

c000bb2a <Device::detectAll()>:
c000bb2a:	53                   	push   ebx
c000bb2b:	83 ec 14             	sub    esp,0x14
c000bb2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb34:	53                   	push   ebx
c000bb35:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb44:	74 0f                	je     c000bb55 <Device::detectAll()+0x2b>
c000bb46:	83 ec 0c             	sub    esp,0xc
c000bb49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb4c:	e8 d9 ff ff ff       	call   c000bb2a <Device::detectAll()>
c000bb51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb53:	eb e9                	jmp    c000bb3e <Device::detectAll()+0x14>
c000bb55:	83 c4 08             	add    esp,0x8
c000bb58:	5b                   	pop    ebx
c000bb59:	c3                   	ret    

c000bb5a <Device::disableLegacyAll()>:
c000bb5a:	c3                   	ret    
c000bb5b:	90                   	nop

c000bb5c <Device::loadDriversForAll()>:
c000bb5c:	c3                   	ret    
c000bb5d:	90                   	nop

c000bb5e <Device::closeAll()>:
c000bb5e:	53                   	push   ebx
c000bb5f:	83 ec 08             	sub    esp,0x8
c000bb62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb68:	6a 00                	push   0x0
c000bb6a:	6a 00                	push   0x0
c000bb6c:	6a 00                	push   0x0
c000bb6e:	53                   	push   ebx
c000bb6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb7e:	74 0f                	je     c000bb8f <Device::closeAll()+0x31>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb86:	e8 d3 ff ff ff       	call   c000bb5e <Device::closeAll()>
c000bb8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb8d:	eb e9                	jmp    c000bb78 <Device::closeAll()+0x1a>
c000bb8f:	83 c4 08             	add    esp,0x8
c000bb92:	5b                   	pop    ebx
c000bb93:	c3                   	ret    

c000bb94 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb94:	56                   	push   esi
c000bb95:	53                   	push   ebx
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb9d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bba1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bba3:	56                   	push   esi
c000bba4:	53                   	push   ebx
c000bba5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bba8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbb4:	74 0f                	je     c000bbc5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbb6:	52                   	push   edx
c000bbb7:	52                   	push   edx
c000bbb8:	56                   	push   esi
c000bbb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbbc:	e8 d3 ff ff ff       	call   c000bb94 <Device::powerSavingAll(PowerSavingLevel)>
c000bbc1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbc3:	eb e9                	jmp    c000bbae <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbc5:	58                   	pop    eax
c000bbc6:	5b                   	pop    ebx
c000bbc7:	5e                   	pop    esi
c000bbc8:	c3                   	ret    
c000bbc9:	90                   	nop

c000bbca <Device::setName(char const*)>:
c000bbca:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbd2:	e9 29 4a ff ff       	jmp    c0000600 <strcpy>
c000bbd7:	90                   	nop

c000bbd8 <Device::Device(char const*)>:
c000bbd8:	83 ec 1c             	sub    esp,0x1c
c000bbdb:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000bbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe4:	89 10                	mov    DWORD PTR [eax],edx
c000bbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbea:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc06:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc14:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc1e:	83 ec 08             	sub    esp,0x8
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc29:	e8 9c ff ff ff       	call   c000bbca <Device::setName(char const*)>
c000bc2e:	83 c4 10             	add    esp,0x10
c000bc31:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc39:	83 ec 0c             	sub    esp,0xc
c000bc3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc40:	e8 74 bb ff ff       	call   c00077b9 <malloc>
c000bc45:	83 c4 10             	add    esp,0x10
c000bc48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc59:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc73:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc84:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bcce:	90                   	nop
c000bccf:	83 c4 1c             	add    esp,0x1c
c000bcd2:	c3                   	ret    
c000bcd3:	90                   	nop

c000bcd4 <Device::getName()>:
c000bcd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd8:	05 d0 00 00 00       	add    eax,0xd0
c000bcdd:	c3                   	ret    

c000bcde <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcde:	83 ec 0c             	sub    esp,0xc
c000bce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce5:	83 ec 08             	sub    esp,0x8
c000bce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcec:	50                   	push   eax
c000bced:	e8 e6 fe ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	89 10                	mov    DWORD PTR [eax],edx
c000bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd04:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd0e:	90                   	nop
c000bd0f:	83 c4 0c             	add    esp,0xc
c000bd12:	c3                   	ret    
c000bd13:	90                   	nop

c000bd14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd14:	57                   	push   edi
c000bd15:	56                   	push   esi
c000bd16:	53                   	push   ebx
c000bd17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd23:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd29:	75 0c                	jne    c000bd37 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd2b:	52                   	push   edx
c000bd2c:	52                   	push   edx
c000bd2d:	53                   	push   ebx
c000bd2e:	56                   	push   esi
c000bd2f:	e8 4e 09 01 00       	call   c001c682 <LinkedList<Device>::addElement(Device*)>
c000bd34:	83 c4 10             	add    esp,0x10
c000bd37:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd40:	74 12                	je     c000bd54 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd42:	50                   	push   eax
c000bd43:	57                   	push   edi
c000bd44:	56                   	push   esi
c000bd45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd48:	e8 c7 ff ff ff       	call   c000bd14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd4f:	83 c4 10             	add    esp,0x10
c000bd52:	eb e9                	jmp    c000bd3d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd54:	5b                   	pop    ebx
c000bd55:	5e                   	pop    esi
c000bd56:	5f                   	pop    edi
c000bd57:	c3                   	ret    

c000bd58 <getDevicesOfType(DeviceType)>:
c000bd58:	53                   	push   ebx
c000bd59:	83 ec 14             	sub    esp,0x14
c000bd5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd60:	53                   	push   ebx
c000bd61:	e8 f8 09 01 00       	call   c001c75e <LinkedList<Device>::LinkedList()>
c000bd66:	83 c4 0c             	add    esp,0xc
c000bd69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd6d:	53                   	push   ebx
c000bd6e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bd74:	e8 9b ff ff ff       	call   c000bd14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd79:	89 d8                	mov    eax,ebx
c000bd7b:	83 c4 18             	add    esp,0x18
c000bd7e:	5b                   	pop    ebx
c000bd7f:	c2 04 00             	ret    0x4
c000bd82:	66 90                	xchg   ax,ax

c000bd84 <HardDiskController::HardDiskController(char const*)>:
c000bd84:	83 ec 0c             	sub    esp,0xc
c000bd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8b:	83 ec 08             	sub    esp,0x8
c000bd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd92:	50                   	push   eax
c000bd93:	e8 40 fe ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000bd98:	83 c4 10             	add    esp,0x10
c000bd9b:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda4:	89 10                	mov    DWORD PTR [eax],edx
c000bda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdaa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdb4:	90                   	nop
c000bdb5:	83 c4 0c             	add    esp,0xc
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop
c000bdba:	66 90                	xchg   ax,ax

c000bdbc <HardDiskController::~HardDiskController()>:
c000bdbc:	83 ec 0c             	sub    esp,0xc
c000bdbf:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc8:	89 10                	mov    DWORD PTR [eax],edx
c000bdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	50                   	push   eax
c000bdd2:	e8 6b fb ff ff       	call   c000b942 <Device::~Device()>
c000bdd7:	83 c4 10             	add    esp,0x10
c000bdda:	90                   	nop
c000bddb:	83 c4 0c             	add    esp,0xc
c000bdde:	c3                   	ret    
c000bddf:	90                   	nop

c000bde0 <HardDiskController::~HardDiskController()>:
c000bde0:	83 ec 0c             	sub    esp,0xc
c000bde3:	83 ec 0c             	sub    esp,0xc
c000bde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdea:	e8 cd ff ff ff       	call   c000bdbc <HardDiskController::~HardDiskController()>
c000bdef:	83 c4 10             	add    esp,0x10
c000bdf2:	83 ec 08             	sub    esp,0x8
c000bdf5:	68 58 01 00 00       	push   0x158
c000bdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdfe:	e8 0a e7 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000be03:	83 c4 10             	add    esp,0x10
c000be06:	83 c4 0c             	add    esp,0xc
c000be09:	c3                   	ret    

c000be0a <PhysicalDisk::eject()>:
c000be0a:	83 c8 ff             	or     eax,0xffffffff
c000be0d:	c3                   	ret    

c000be0e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be0e:	83 ec 0c             	sub    esp,0xc
c000be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be15:	83 ec 08             	sub    esp,0x8
c000be18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1c:	50                   	push   eax
c000be1d:	e8 b6 fd ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000be22:	83 c4 10             	add    esp,0x10
c000be25:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000be2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2e:	89 10                	mov    DWORD PTR [eax],edx
c000be30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be34:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be66:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be70:	90                   	nop
c000be71:	83 c4 0c             	add    esp,0xc
c000be74:	c3                   	ret    
c000be75:	90                   	nop

c000be76 <PhysicalDisk::startCache()>:
c000be76:	56                   	push   esi
c000be77:	53                   	push   ebx
c000be78:	83 ec 10             	sub    esp,0x10
c000be7b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be7f:	6a 44                	push   0x44
c000be81:	e8 33 b9 ff ff       	call   c00077b9 <malloc>
c000be86:	89 c6                	mov    esi,eax
c000be88:	58                   	pop    eax
c000be89:	5a                   	pop    edx
c000be8a:	53                   	push   ebx
c000be8b:	56                   	push   esi
c000be8c:	e8 eb 15 00 00       	call   c000d47c <VCache::VCache(PhysicalDisk*)>
c000be91:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be97:	83 c4 14             	add    esp,0x14
c000be9a:	5b                   	pop    ebx
c000be9b:	5e                   	pop    esi
c000be9c:	c3                   	ret    
c000be9d:	90                   	nop

c000be9e <PhysicalDisk::~PhysicalDisk()>:
c000be9e:	83 ec 0c             	sub    esp,0xc
c000bea1:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000bea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beaa:	89 10                	mov    DWORD PTR [eax],edx
c000beac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb0:	83 ec 0c             	sub    esp,0xc
c000beb3:	50                   	push   eax
c000beb4:	e8 89 fa ff ff       	call   c000b942 <Device::~Device()>
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	90                   	nop
c000bebd:	83 c4 0c             	add    esp,0xc
c000bec0:	c3                   	ret    
c000bec1:	90                   	nop

c000bec2 <PhysicalDisk::~PhysicalDisk()>:
c000bec2:	83 ec 0c             	sub    esp,0xc
c000bec5:	83 ec 0c             	sub    esp,0xc
c000bec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000becc:	e8 cd ff ff ff       	call   c000be9e <PhysicalDisk::~PhysicalDisk()>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	83 ec 08             	sub    esp,0x8
c000bed7:	68 6c 01 00 00       	push   0x16c
c000bedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee0:	e8 28 e6 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	83 c4 0c             	add    esp,0xc
c000beeb:	c3                   	ret    

c000beec <int_handler>:
c000beec:	55                   	push   ebp
c000beed:	57                   	push   edi
c000beee:	56                   	push   esi
c000beef:	53                   	push   ebx
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bef7:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000befe:	74 0b                	je     c000bf0b <int_handler+0x1f>
c000bf00:	fa                   	cli    
c000bf01:	f4                   	hlt    
c000bf02:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bf09:	75 f5                	jne    c000bf00 <int_handler+0x14>
c000bf0b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf0e:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf11:	83 f8 17             	cmp    eax,0x17
c000bf14:	76 3e                	jbe    c000bf54 <int_handler+0x68>
c000bf16:	c1 e6 04             	shl    esi,0x4
c000bf19:	31 db                	xor    ebx,ebx
c000bf1b:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bf21:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bf27:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf2b:	85 c0                	test   eax,eax
c000bf2d:	74 13                	je     c000bf42 <int_handler+0x56>
c000bf2f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf32:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf36:	74 2a                	je     c000bf62 <int_handler+0x76>
c000bf38:	83 ec 08             	sub    esp,0x8
c000bf3b:	52                   	push   edx
c000bf3c:	57                   	push   edi
c000bf3d:	ff d0                	call   eax
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	43                   	inc    ebx
c000bf43:	83 fb 04             	cmp    ebx,0x4
c000bf46:	75 df                	jne    c000bf27 <int_handler+0x3b>
c000bf48:	83 c4 0c             	add    esp,0xc
c000bf4b:	31 c0                	xor    eax,eax
c000bf4d:	5b                   	pop    ebx
c000bf4e:	31 d2                	xor    edx,edx
c000bf50:	5e                   	pop    esi
c000bf51:	5f                   	pop    edi
c000bf52:	5d                   	pop    ebp
c000bf53:	c3                   	ret    
c000bf54:	83 ec 0c             	sub    esp,0xc
c000bf57:	50                   	push   eax
c000bf58:	e8 0a 9a 00 00       	call   c0015967 <HalEndOfInterrupt(int)>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	eb b4                	jmp    c000bf16 <int_handler+0x2a>
c000bf62:	83 ec 08             	sub    esp,0x8
c000bf65:	52                   	push   edx
c000bf66:	57                   	push   edi
c000bf67:	ff d0                	call   eax
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	83 c4 0c             	add    esp,0xc
c000bf6f:	5b                   	pop    ebx
c000bf70:	5e                   	pop    esi
c000bf71:	5f                   	pop    edi
c000bf72:	5d                   	pop    ebp
c000bf73:	c3                   	ret    

c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf74:	56                   	push   esi
c000bf75:	31 c0                	xor    eax,eax
c000bf77:	53                   	push   ebx
c000bf78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf80:	89 ca                	mov    edx,ecx
c000bf82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf86:	c1 e2 04             	shl    edx,0x4
c000bf89:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bf91:	74 15                	je     c000bfa8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf93:	40                   	inc    eax
c000bf94:	83 f8 04             	cmp    eax,0x4
c000bf97:	75 f0                	jne    c000bf89 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf99:	c7 44 24 0c a4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0a4
c000bfa1:	5b                   	pop    ebx
c000bfa2:	5e                   	pop    esi
c000bfa3:	e9 db 42 00 00       	jmp    c0010283 <KePanic(char const*)>
c000bfa8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfab:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bfb2:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bfb9:	5b                   	pop    ebx
c000bfba:	5e                   	pop    esi
c000bfbb:	c3                   	ret    

c000bfbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfbc:	57                   	push   edi
c000bfbd:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bfc3:	56                   	push   esi
c000bfc4:	53                   	push   ebx
c000bfc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfcd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfd4:	74 5b                	je     c000c031 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfd6:	89 c7                	mov    edi,eax
c000bfd8:	84 c0                	test   al,al
c000bfda:	74 24                	je     c000c000 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfdc:	83 fe 0f             	cmp    esi,0xf
c000bfdf:	0f 8f d9 00 00 00    	jg     c000c0be <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfe5:	8a 86 e0 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0720]
c000bfeb:	25 ff 00 00 00       	and    eax,0xff
c000bff0:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bff8:	89 c6                	mov    esi,eax
c000bffa:	66 d1 ef             	shr    di,1
c000bffd:	83 e7 01             	and    edi,0x1
c000c000:	83 ec 08             	sub    esp,0x8
c000c003:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c008:	31 db                	xor    ebx,ebx
c000c00a:	50                   	push   eax
c000c00b:	68 b1 e0 01 c0       	push   0xc001e0b1
c000c010:	e8 ee e5 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c01d:	85 c0                	test   eax,eax
c000c01f:	7f 51                	jg     c000c072 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c021:	83 ec 0c             	sub    esp,0xc
c000c024:	68 c8 e0 01 c0       	push   0xc001e0c8
c000c029:	e8 55 42 00 00       	call   c0010283 <KePanic(char const*)>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c034:	31 d2                	xor    edx,edx
c000c036:	89 c8                	mov    eax,ecx
c000c038:	c1 e0 04             	shl    eax,0x4
c000c03b:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000c042:	85 db                	test   ebx,ebx
c000c044:	0f 84 8b 00 00 00    	je     c000c0d5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c04a:	42                   	inc    edx
c000c04b:	83 fa 04             	cmp    edx,0x4
c000c04e:	75 eb                	jne    c000c03b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c050:	83 ec 0c             	sub    esp,0xc
c000c053:	68 1c e1 01 c0       	push   0xc001e11c
c000c058:	e8 26 42 00 00       	call   c0010283 <KePanic(char const*)>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c065:	5b                   	pop    ebx
c000c066:	5e                   	pop    esi
c000c067:	5f                   	pop    edi
c000c068:	c3                   	ret    
c000c069:	43                   	inc    ebx
c000c06a:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000c070:	7e af                	jle    c000c021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c072:	83 ec 08             	sub    esp,0x8
c000c075:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c07c:	56                   	push   esi
c000c07d:	50                   	push   eax
c000c07e:	e8 d1 f5 00 00       	call   c001b654 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c083:	83 c4 10             	add    esp,0x10
c000c086:	84 c0                	test   al,al
c000c088:	74 df                	je     c000c069 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c08a:	81 e7 ff 00 00 00    	and    edi,0xff
c000c090:	50                   	push   eax
c000c091:	8d 46 20             	lea    eax,[esi+0x20]
c000c094:	57                   	push   edi
c000c095:	25 ff 00 00 00       	and    eax,0xff
c000c09a:	6a 00                	push   0x0
c000c09c:	50                   	push   eax
c000c09d:	89 f0                	mov    eax,esi
c000c09f:	6a 00                	push   0x0
c000c0a1:	25 ff 00 00 00       	and    eax,0xff
c000c0a6:	6a 00                	push   0x0
c000c0a8:	50                   	push   eax
c000c0a9:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c0b0:	50                   	push   eax
c000c0b1:	e8 18 f7 00 00       	call   c001b7ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0b6:	83 c4 20             	add    esp,0x20
c000c0b9:	e9 73 ff ff ff       	jmp    c000c031 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0be:	83 ec 0c             	sub    esp,0xc
c000c0c1:	31 ff                	xor    edi,edi
c000c0c3:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c0c8:	e8 b6 41 00 00       	call   c0010283 <KePanic(char const*)>
c000c0cd:	83 c4 10             	add    esp,0x10
c000c0d0:	e9 2b ff ff ff       	jmp    c000c000 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0d5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0dc:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0e7:	5b                   	pop    ebx
c000c0e8:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c0ef:	89 f0                	mov    eax,esi
c000c0f1:	5e                   	pop    esi
c000c0f2:	5f                   	pop    edi
c000c0f3:	c3                   	ret    

c000c0f4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0fc:	c1 e0 04             	shl    eax,0x4
c000c0ff:	8d 50 10             	lea    edx,[eax+0x10]
c000c102:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c108:	74 08                	je     c000c112 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c10a:	83 c0 04             	add    eax,0x4
c000c10d:	39 d0                	cmp    eax,edx
c000c10f:	75 f1                	jne    c000c102 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c111:	c3                   	ret    
c000c112:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c11c:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c126:	eb e2                	jmp    c000c10a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c128 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c128:	53                   	push   ebx
c000c129:	83 ec 08             	sub    esp,0x8
c000c12c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c130:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c135:	74 0e                	je     c000c145 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c137:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c13c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c143:	75 37                	jne    c000c17c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c149:	83 c0 20             	add    eax,0x20
c000c14c:	c1 e0 04             	shl    eax,0x4
c000c14f:	8d 50 10             	lea    edx,[eax+0x10]
c000c152:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c158:	74 0c                	je     c000c166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c15a:	83 c0 04             	add    eax,0x4
c000c15d:	39 d0                	cmp    eax,edx
c000c15f:	75 f1                	jne    c000c152 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c161:	83 c4 08             	add    esp,0x8
c000c164:	5b                   	pop    ebx
c000c165:	c3                   	ret    
c000c166:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c170:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c17a:	eb de                	jmp    c000c15a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c17c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c181:	7f 12                	jg     c000c195 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c183:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c187:	31 c0                	xor    eax,eax
c000c189:	8a 81 e0 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0720]
c000c18f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c193:	eb b0                	jmp    c000c145 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c195:	83 ec 0c             	sub    esp,0xc
c000c198:	68 d5 e0 01 c0       	push   0xc001e0d5
c000c19d:	e8 e1 40 00 00       	call   c0010283 <KePanic(char const*)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	eb 9e                	jmp    c000c145 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1a7 <setupINTS()>:
c000c1a7:	31 c0                	xor    eax,eax
c000c1a9:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1b3:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c1bd:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c1c7:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c1d1:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c1db:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c1e5:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c1ef:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c1f9:	83 c0 10             	add    eax,0x10
c000c1fc:	3d 00 10 00 00       	cmp    eax,0x1000
c000c201:	75 a6                	jne    c000c1a9 <setupINTS()+0x2>
c000c203:	c3                   	ret    

c000c204 <convertLegacyIRQNumber(int)>:
c000c204:	83 ec 0c             	sub    esp,0xc
c000c207:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c211:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c218:	74 0f                	je     c000c229 <convertLegacyIRQNumber(int)+0x25>
c000c21a:	83 f8 0f             	cmp    eax,0xf
c000c21d:	7f 0e                	jg     c000c22d <convertLegacyIRQNumber(int)+0x29>
c000c21f:	31 c9                	xor    ecx,ecx
c000c221:	8a 88 e0 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0720]
c000c227:	89 c8                	mov    eax,ecx
c000c229:	83 c4 0c             	add    esp,0xc
c000c22c:	c3                   	ret    
c000c22d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c239:	e8 45 40 00 00       	call   c0010283 <KePanic(char const*)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c245:	83 c4 0c             	add    esp,0xc
c000c248:	c3                   	ret    
c000c249:	90                   	nop

c000c24a <startGUI(void*)>:
c000c24a:	55                   	push   ebp
c000c24b:	89 e5                	mov    ebp,esp
c000c24d:	53                   	push   ebx
c000c24e:	83 ec 04             	sub    esp,0x4
c000c251:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c256:	48                   	dec    eax
c000c257:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c25c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c261:	85 c0                	test   eax,eax
c000c263:	75 01                	jne    c000c266 <startGUI(void*)+0x1c>
c000c265:	fb                   	sti    
c000c266:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c26c:	83 ec 08             	sub    esp,0x8
c000c26f:	6a 01                	push   0x1
c000c271:	68 41 e1 01 c0       	push   0xc001e141
c000c276:	e8 d2 6b 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	83 ec 08             	sub    esp,0x8
c000c281:	53                   	push   ebx
c000c282:	50                   	push   eax
c000c283:	e8 f6 6d 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c291:	83 ec 08             	sub    esp,0x8
c000c294:	6a 01                	push   0x1
c000c296:	68 5b e1 01 c0       	push   0xc001e15b
c000c29b:	e8 ad 6b 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	83 ec 08             	sub    esp,0x8
c000c2a6:	53                   	push   ebx
c000c2a7:	50                   	push   eax
c000c2a8:	e8 d1 6d 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000c2ad:	83 c4 10             	add    esp,0x10
c000c2b0:	90                   	nop
c000c2b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2b4:	c9                   	leave  
c000c2b5:	c3                   	ret    

c000c2b6 <startGUIVESA(void*)>:
c000c2b6:	55                   	push   ebp
c000c2b7:	89 e5                	mov    ebp,esp
c000c2b9:	53                   	push   ebx
c000c2ba:	83 ec 04             	sub    esp,0x4
c000c2bd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2c2:	48                   	dec    eax
c000c2c3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2cd:	85 c0                	test   eax,eax
c000c2cf:	75 01                	jne    c000c2d2 <startGUIVESA(void*)+0x1c>
c000c2d1:	fb                   	sti    
c000c2d2:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	6a 01                	push   0x1
c000c2dd:	68 79 e1 01 c0       	push   0xc001e179
c000c2e2:	e8 66 6b 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000c2e7:	83 c4 10             	add    esp,0x10
c000c2ea:	83 ec 08             	sub    esp,0x8
c000c2ed:	53                   	push   ebx
c000c2ee:	50                   	push   eax
c000c2ef:	e8 8a 6d 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2fd:	83 ec 08             	sub    esp,0x8
c000c300:	6a 01                	push   0x1
c000c302:	68 5b e1 01 c0       	push   0xc001e15b
c000c307:	e8 41 6b 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	83 ec 08             	sub    esp,0x8
c000c312:	53                   	push   ebx
c000c313:	50                   	push   eax
c000c314:	e8 65 6d 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000c319:	83 c4 10             	add    esp,0x10
c000c31c:	90                   	nop
c000c31d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c320:	c9                   	leave  
c000c321:	c3                   	ret    

c000c322 <sendKeyToTerminal(unsigned char)>:
c000c322:	55                   	push   ebp
c000c323:	89 e5                	mov    ebp,esp
c000c325:	83 ec 28             	sub    esp,0x28
c000c328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c32e:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c334:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c337:	25 ff 00 00 00       	and    eax,0xff
c000c33c:	83 ec 08             	sub    esp,0x8
c000c33f:	50                   	push   eax
c000c340:	52                   	push   edx
c000c341:	e8 00 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c34d:	74 0a                	je     c000c359 <sendKeyToTerminal(unsigned char)+0x37>
c000c34f:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c353:	0f 85 8f 00 00 00    	jne    c000c3e8 <sendKeyToTerminal(unsigned char)+0xc6>
c000c359:	fa                   	cli    
c000c35a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c35f:	40                   	inc    eax
c000c360:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c365:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c36a:	40                   	inc    eax
c000c36b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c370:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c375:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c378:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c382:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c386:	74 1f                	je     c000c3a7 <sendKeyToTerminal(unsigned char)+0x85>
c000c388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c38b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c38e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c391:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c394:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c397:	83 ec 0c             	sub    esp,0xc
c000c39a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c39d:	e8 9a 79 00 00       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c000c3a2:	83 c4 10             	add    esp,0x10
c000c3a5:	eb db                	jmp    c000c382 <sendKeyToTerminal(unsigned char)+0x60>
c000c3a7:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3ac:	48                   	dec    eax
c000c3ad:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c3b2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3b7:	85 c0                	test   eax,eax
c000c3b9:	75 18                	jne    c000c3d3 <sendKeyToTerminal(unsigned char)+0xb1>
c000c3bb:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	74 0f                	je     c000c3d3 <sendKeyToTerminal(unsigned char)+0xb1>
c000c3c4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c3ce:	e8 a5 74 00 00       	call   c0013878 <schedule()>
c000c3d3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3d8:	48                   	dec    eax
c000c3d9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c3de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3e3:	85 c0                	test   eax,eax
c000c3e5:	75 01                	jne    c000c3e8 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3e7:	fb                   	sti    
c000c3e8:	90                   	nop
c000c3e9:	c9                   	leave  
c000c3ea:	c3                   	ret    

c000c3eb <sendKeyboardToken(KeyboardToken)>:
c000c3eb:	55                   	push   ebp
c000c3ec:	89 e5                	mov    ebp,esp
c000c3ee:	83 ec 18             	sub    esp,0x18
c000c3f1:	e8 dd 3e 00 00       	call   c00102d3 <Krnl::userIOReceived()>
c000c3f6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fc:	25 ff ff 00 00       	and    eax,0xffff
c000c401:	83 f2 01             	xor    edx,0x1
c000c404:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c40a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c40f:	85 c0                	test   eax,eax
c000c411:	74 24                	je     c000c437 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c413:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c419:	83 ec 04             	sub    esp,0x4
c000c41c:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c421:	83 ec 08             	sub    esp,0x8
c000c424:	89 e2                	mov    edx,esp
c000c426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c429:	89 02                	mov    DWORD PTR [edx],eax
c000c42b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c42e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c432:	ff d1                	call   ecx
c000c434:	83 c4 10             	add    esp,0x10
c000c437:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c43b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c43e:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c443:	38 c2                	cmp    dl,al
c000c445:	74 1e                	je     c000c465 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c447:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c44a:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c44f:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c454:	25 ff 00 00 00       	and    eax,0xff
c000c459:	83 ec 0c             	sub    esp,0xc
c000c45c:	50                   	push   eax
c000c45d:	e8 36 bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c462:	83 c4 10             	add    esp,0x10
c000c465:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c468:	84 c0                	test   al,al
c000c46a:	0f 84 ae 00 00 00    	je     c000c51e <sendKeyboardToken(KeyboardToken)+0x133>
c000c470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c473:	66 3d 10 03          	cmp    ax,0x310
c000c477:	75 06                	jne    c000c47f <sendKeyboardToken(KeyboardToken)+0x94>
c000c479:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c47f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c482:	66 3d 11 03          	cmp    ax,0x311
c000c486:	75 06                	jne    c000c48e <sendKeyboardToken(KeyboardToken)+0xa3>
c000c488:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c491:	66 3d 12 03          	cmp    ax,0x312
c000c495:	75 06                	jne    c000c49d <sendKeyboardToken(KeyboardToken)+0xb2>
c000c497:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a0:	66 3d 13 03          	cmp    ax,0x313
c000c4a4:	75 06                	jne    c000c4ac <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4a6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4af:	66 3d 14 03          	cmp    ax,0x314
c000c4b3:	75 06                	jne    c000c4bb <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4b5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4be:	66 3d 15 03          	cmp    ax,0x315
c000c4c2:	75 06                	jne    c000c4ca <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4c4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4cd:	66 3d 16 03          	cmp    ax,0x316
c000c4d1:	75 06                	jne    c000c4d9 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4d3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4dc:	66 3d 17 03          	cmp    ax,0x317
c000c4e0:	75 06                	jne    c000c4e8 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4eb:	66 3d 18 03          	cmp    ax,0x318
c000c4ef:	75 06                	jne    c000c4f7 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4f1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fa:	66 3d 19 03          	cmp    ax,0x319
c000c4fe:	75 06                	jne    c000c506 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c500:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c509:	66 3d 1a 03          	cmp    ax,0x31a
c000c50d:	0f 85 c9 00 00 00    	jne    c000c5dc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c513:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c519:	e9 be 00 00 00       	jmp    c000c5dc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c521:	66 3d 10 03          	cmp    ax,0x310
c000c525:	75 0a                	jne    c000c531 <sendKeyboardToken(KeyboardToken)+0x146>
c000c527:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c52d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c534:	66 3d 11 03          	cmp    ax,0x311
c000c538:	75 0a                	jne    c000c544 <sendKeyboardToken(KeyboardToken)+0x159>
c000c53a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c540:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c547:	66 3d 12 03          	cmp    ax,0x312
c000c54b:	75 0a                	jne    c000c557 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c54d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c553:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55a:	66 3d 13 03          	cmp    ax,0x313
c000c55e:	75 0a                	jne    c000c56a <sendKeyboardToken(KeyboardToken)+0x17f>
c000c560:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c566:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c56a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56d:	66 3d 14 03          	cmp    ax,0x314
c000c571:	75 0a                	jne    c000c57d <sendKeyboardToken(KeyboardToken)+0x192>
c000c573:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c579:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c580:	66 3d 15 03          	cmp    ax,0x315
c000c584:	75 0a                	jne    c000c590 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c586:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c58c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c593:	66 3d 16 03          	cmp    ax,0x316
c000c597:	75 0a                	jne    c000c5a3 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c599:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c59f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a6:	66 3d 17 03          	cmp    ax,0x317
c000c5aa:	75 0a                	jne    c000c5b6 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5ac:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b9:	66 3d 18 03          	cmp    ax,0x318
c000c5bd:	75 0a                	jne    c000c5c9 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5bf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cc:	66 3d 19 03          	cmp    ax,0x319
c000c5d0:	75 0a                	jne    c000c5dc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5d2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5df:	66 3d 00 02          	cmp    ax,0x200
c000c5e3:	75 2c                	jne    c000c611 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5e5:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c5ea:	83 f0 01             	xor    eax,0x1
c000c5ed:	84 c0                	test   al,al
c000c5ef:	74 20                	je     c000c611 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c5f6:	6a 01                	push   0x1
c000c5f8:	6a 00                	push   0x0
c000c5fa:	68 4a c2 00 c0       	push   0xc000c24a
c000c5ff:	50                   	push   eax
c000c600:	e8 53 70 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c000c605:	83 c4 10             	add    esp,0x10
c000c608:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c60f:	eb 33                	jmp    c000c644 <sendKeyboardToken(KeyboardToken)+0x259>
c000c611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c614:	66 3d 01 02          	cmp    ax,0x201
c000c618:	75 2a                	jne    c000c644 <sendKeyboardToken(KeyboardToken)+0x259>
c000c61a:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c61f:	83 f0 01             	xor    eax,0x1
c000c622:	84 c0                	test   al,al
c000c624:	74 1e                	je     c000c644 <sendKeyboardToken(KeyboardToken)+0x259>
c000c626:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c62b:	6a 01                	push   0x1
c000c62d:	6a 00                	push   0x0
c000c62f:	68 b6 c2 00 c0       	push   0xc000c2b6
c000c634:	50                   	push   eax
c000c635:	e8 1e 70 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c647:	66 3d 1d 03          	cmp    ax,0x31d
c000c64b:	75 06                	jne    c000c653 <sendKeyboardToken(KeyboardToken)+0x268>
c000c64d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c656:	66 3d 1c 03          	cmp    ax,0x31c
c000c65a:	75 06                	jne    c000c662 <sendKeyboardToken(KeyboardToken)+0x277>
c000c65c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c665:	66 3d 1b 03          	cmp    ax,0x31b
c000c669:	75 06                	jne    c000c671 <sendKeyboardToken(KeyboardToken)+0x286>
c000c66b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c674:	66 3d 1e 03          	cmp    ax,0x31e
c000c678:	75 06                	jne    c000c680 <sendKeyboardToken(KeyboardToken)+0x295>
c000c67a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c683:	66 3d 1f 03          	cmp    ax,0x31f
c000c687:	75 06                	jne    c000c68f <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c689:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c692:	66 3d 1a 03          	cmp    ax,0x31a
c000c696:	75 06                	jne    c000c69e <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c698:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c69e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6a5:	83 f0 01             	xor    eax,0x1
c000c6a8:	84 c0                	test   al,al
c000c6aa:	74 7b                	je     c000c727 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6ac:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c6b1:	84 c0                	test   al,al
c000c6b3:	74 43                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6b9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6bd:	74 2d                	je     c000c6ec <sendKeyboardToken(KeyboardToken)+0x301>
c000c6bf:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c6c5:	89 d0                	mov    eax,edx
c000c6c7:	c1 e0 02             	shl    eax,0x2
c000c6ca:	01 d0                	add    eax,edx
c000c6cc:	01 c0                	add    eax,eax
c000c6ce:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d6:	25 ff ff 00 00       	and    eax,0xffff
c000c6db:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6de:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6e3:	01 d0                	add    eax,edx
c000c6e5:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c6ea:	eb 71                	jmp    c000c75d <sendKeyboardToken(KeyboardToken)+0x372>
c000c6ec:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6f6:	eb 65                	jmp    c000c75d <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f8:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6fd:	85 c0                	test   eax,eax
c000c6ff:	74 1a                	je     c000c71b <sendKeyboardToken(KeyboardToken)+0x330>
c000c701:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c706:	25 ff 00 00 00       	and    eax,0xff
c000c70b:	83 ec 0c             	sub    esp,0xc
c000c70e:	50                   	push   eax
c000c70f:	e8 0e fc ff ff       	call   c000c322 <sendKeyToTerminal(unsigned char)>
c000c714:	83 c4 10             	add    esp,0x10
c000c717:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c71b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c725:	eb 36                	jmp    c000c75d <sendKeyboardToken(KeyboardToken)+0x372>
c000c727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72a:	66 3d 01 01          	cmp    ax,0x101
c000c72e:	75 2d                	jne    c000c75d <sendKeyboardToken(KeyboardToken)+0x372>
c000c730:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c735:	85 c0                	test   eax,eax
c000c737:	74 1a                	je     c000c753 <sendKeyboardToken(KeyboardToken)+0x368>
c000c739:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c73e:	25 ff 00 00 00       	and    eax,0xff
c000c743:	83 ec 0c             	sub    esp,0xc
c000c746:	50                   	push   eax
c000c747:	e8 d6 fb ff ff       	call   c000c322 <sendKeyToTerminal(unsigned char)>
c000c74c:	83 c4 10             	add    esp,0x10
c000c74f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c753:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c75d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c760:	83 f0 01             	xor    eax,0x1
c000c763:	84 c0                	test   al,al
c000c765:	74 4e                	je     c000c7b5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c767:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c76a:	83 f0 01             	xor    eax,0x1
c000c76d:	84 c0                	test   al,al
c000c76f:	74 44                	je     c000c7b5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c771:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c776:	83 f0 01             	xor    eax,0x1
c000c779:	84 c0                	test   al,al
c000c77b:	74 38                	je     c000c7b5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c780:	66 83 f8 1f          	cmp    ax,0x1f
c000c784:	76 09                	jbe    c000c78f <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c789:	66 83 f8 7e          	cmp    ax,0x7e
c000c78d:	76 12                	jbe    c000c7a1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c78f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c792:	66 83 f8 0a          	cmp    ax,0xa
c000c796:	74 09                	je     c000c7a1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79b:	66 83 f8 08          	cmp    ax,0x8
c000c79f:	75 14                	jne    c000c7b5 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a4:	25 ff 00 00 00       	and    eax,0xff
c000c7a9:	83 ec 0c             	sub    esp,0xc
c000c7ac:	50                   	push   eax
c000c7ad:	e8 70 fb ff ff       	call   c000c322 <sendKeyToTerminal(unsigned char)>
c000c7b2:	83 c4 10             	add    esp,0x10
c000c7b5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7b8:	83 f0 01             	xor    eax,0x1
c000c7bb:	84 c0                	test   al,al
c000c7bd:	74 51                	je     c000c810 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7c2:	83 f0 01             	xor    eax,0x1
c000c7c5:	84 c0                	test   al,al
c000c7c7:	74 47                	je     c000c810 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c9:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c7ce:	84 c0                	test   al,al
c000c7d0:	74 3e                	je     c000c810 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d5:	66 83 f8 3f          	cmp    ax,0x3f
c000c7d9:	76 35                	jbe    c000c810 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7de:	66 83 f8 7f          	cmp    ax,0x7f
c000c7e2:	77 2c                	ja     c000c810 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e7:	88 c2                	mov    dl,al
c000c7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ec:	66 83 f8 5f          	cmp    ax,0x5f
c000c7f0:	76 04                	jbe    c000c7f6 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7f2:	b0 20                	mov    al,0x20
c000c7f4:	eb 02                	jmp    c000c7f8 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7f6:	b0 00                	mov    al,0x0
c000c7f8:	29 c2                	sub    edx,eax
c000c7fa:	88 d0                	mov    al,dl
c000c7fc:	83 e8 40             	sub    eax,0x40
c000c7ff:	25 ff 00 00 00       	and    eax,0xff
c000c804:	83 ec 0c             	sub    esp,0xc
c000c807:	50                   	push   eax
c000c808:	e8 15 fb ff ff       	call   c000c322 <sendKeyToTerminal(unsigned char)>
c000c80d:	83 c4 10             	add    esp,0x10
c000c810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c813:	66 3d 00 03          	cmp    ax,0x300
c000c817:	75 0f                	jne    c000c828 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c819:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c81c:	83 f0 01             	xor    eax,0x1
c000c81f:	84 c0                	test   al,al
c000c821:	74 05                	je     c000c828 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c823:	e8 71 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c828:	90                   	nop
c000c829:	c9                   	leave  
c000c82a:	c3                   	ret    

c000c82b <clearInternalKeybuffer(VgaText*)>:
c000c82b:	55                   	push   ebp
c000c82c:	89 e5                	mov    ebp,esp
c000c82e:	83 ec 08             	sub    esp,0x8
c000c831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c834:	05 b2 00 00 00       	add    eax,0xb2
c000c839:	83 ec 0c             	sub    esp,0xc
c000c83c:	50                   	push   eax
c000c83d:	e8 fe 3c ff ff       	call   c0000540 <strlen>
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c848:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c84e:	83 ec 04             	sub    esp,0x4
c000c851:	50                   	push   eax
c000c852:	6a 00                	push   0x0
c000c854:	52                   	push   edx
c000c855:	e8 76 3c ff ff       	call   c00004d0 <memset>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	90                   	nop
c000c85e:	c9                   	leave  
c000c85f:	c3                   	ret    

c000c860 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c860:	55                   	push   ebp
c000c861:	89 e5                	mov    ebp,esp
c000c863:	83 ec 18             	sub    esp,0x18
c000c866:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c86b:	85 c0                	test   eax,eax
c000c86d:	74 2a                	je     c000c899 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c86f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c875:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c87b:	83 ec 04             	sub    esp,0x4
c000c87e:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c883:	83 ec 08             	sub    esp,0x8
c000c886:	89 e2                	mov    edx,esp
c000c888:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c88b:	89 02                	mov    DWORD PTR [edx],eax
c000c88d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c890:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c894:	ff d1                	call   ecx
c000c896:	83 c4 10             	add    esp,0x10
c000c899:	fb                   	sti    
c000c89a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8a1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8a5:	0f 84 db 00 00 00    	je     c000c986 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ae:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c8b4:	84 c0                	test   al,al
c000c8b6:	75 28                	jne    c000c8e0 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8b8:	fa                   	cli    
c000c8b9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8be:	40                   	inc    eax
c000c8bf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8c4:	e8 af 6f 00 00       	call   c0013878 <schedule()>
c000c8c9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8ce:	48                   	dec    eax
c000c8cf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8d4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8d9:	85 c0                	test   eax,eax
c000c8db:	75 ce                	jne    c000c8ab <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8dd:	fb                   	sti    
c000c8de:	eb cb                	jmp    c000c8ab <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8e3:	8d 50 01             	lea    edx,[eax+0x1]
c000c8e6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8ec:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c8f2:	88 10                	mov    BYTE PTR [eax],dl
c000c8f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f7:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c8fd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c900:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c904:	75 2e                	jne    c000c934 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c906:	83 ec 0c             	sub    esp,0xc
c000c909:	68 94 e1 01 c0       	push   0xc001e194
c000c90e:	e8 f0 dc ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c91b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c91d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c920:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c926:	83 ec 08             	sub    esp,0x8
c000c929:	6a 02                	push   0x2
c000c92b:	50                   	push   eax
c000c92c:	e8 3e 3d 00 00       	call   c001066f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c937:	05 b2 00 00 00       	add    eax,0xb2
c000c93c:	83 ec 0c             	sub    esp,0xc
c000c93f:	50                   	push   eax
c000c940:	e8 fb 3b ff ff       	call   c0000540 <strlen>
c000c945:	83 c4 10             	add    esp,0x10
c000c948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c94b:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c951:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c954:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c957:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c95d:	83 ec 04             	sub    esp,0x4
c000c960:	50                   	push   eax
c000c961:	51                   	push   ecx
c000c962:	52                   	push   edx
c000c963:	e8 78 3a ff ff       	call   c00003e0 <memmove>
c000c968:	83 c4 10             	add    esp,0x10
c000c96b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c96e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c971:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c975:	74 0a                	je     c000c981 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c977:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c97b:	0f 85 20 ff ff ff    	jne    c000c8a1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c981:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c984:	eb 03                	jmp    c000c989 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c986:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c989:	c9                   	leave  
c000c98a:	c3                   	ret    
c000c98b:	90                   	nop

c000c98c <Keyboard::Keyboard(char const*)>:
c000c98c:	83 ec 0c             	sub    esp,0xc
c000c98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c993:	83 ec 08             	sub    esp,0x8
c000c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99a:	50                   	push   eax
c000c99b:	e8 38 f2 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ac:	89 10                	mov    DWORD PTR [eax],edx
c000c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9bc:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c9c3:	90                   	nop
c000c9c4:	83 c4 0c             	add    esp,0xc
c000c9c7:	c3                   	ret    

c000c9c8 <Keyboard::~Keyboard()>:
c000c9c8:	83 ec 0c             	sub    esp,0xc
c000c9cb:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d4:	89 10                	mov    DWORD PTR [eax],edx
c000c9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	50                   	push   eax
c000c9de:	e8 5f ef ff ff       	call   c000b942 <Device::~Device()>
c000c9e3:	83 c4 10             	add    esp,0x10
c000c9e6:	90                   	nop
c000c9e7:	83 c4 0c             	add    esp,0xc
c000c9ea:	c3                   	ret    
c000c9eb:	90                   	nop

c000c9ec <Keyboard::~Keyboard()>:
c000c9ec:	83 ec 0c             	sub    esp,0xc
c000c9ef:	83 ec 0c             	sub    esp,0xc
c000c9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f6:	e8 cd ff ff ff       	call   c000c9c8 <Keyboard::~Keyboard()>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	83 ec 08             	sub    esp,0x8
c000ca01:	68 5c 01 00 00       	push   0x15c
c000ca06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0a:	e8 fe da ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000ca0f:	83 c4 10             	add    esp,0x10
c000ca12:	83 c4 0c             	add    esp,0xc
c000ca15:	c3                   	ret    

c000ca16 <LogicalDisk::close(int, int, void*)>:
c000ca16:	83 c8 ff             	or     eax,0xffffffff
c000ca19:	c3                   	ret    

c000ca1a <LogicalDisk::~LogicalDisk()>:
c000ca1a:	83 ec 0c             	sub    esp,0xc
c000ca1d:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c000ca22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca26:	89 10                	mov    DWORD PTR [eax],edx
c000ca28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	50                   	push   eax
c000ca30:	e8 0d ef ff ff       	call   c000b942 <Device::~Device()>
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	90                   	nop
c000ca39:	83 c4 0c             	add    esp,0xc
c000ca3c:	c3                   	ret    
c000ca3d:	90                   	nop

c000ca3e <LogicalDisk::~LogicalDisk()>:
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	83 ec 0c             	sub    esp,0xc
c000ca44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca48:	e8 cd ff ff ff       	call   c000ca1a <LogicalDisk::~LogicalDisk()>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	83 ec 08             	sub    esp,0x8
c000ca53:	68 74 01 00 00       	push   0x174
c000ca58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca5c:	e8 ac da ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	83 c4 0c             	add    esp,0xc
c000ca67:	c3                   	ret    

c000ca68 <LogicalDisk::open(int, int, void*)>:
c000ca68:	83 ec 18             	sub    esp,0x18
c000ca6b:	68 d8 e1 01 c0       	push   0xc001e1d8
c000ca70:	e8 0e 38 00 00       	call   c0010283 <KePanic(char const*)>
c000ca75:	83 c8 ff             	or     eax,0xffffffff
c000ca78:	83 c4 1c             	add    esp,0x1c
c000ca7b:	c3                   	ret    

c000ca7c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca7c:	53                   	push   ebx
c000ca7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca89:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca8f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca95:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca9b:	77 10                	ja     c000caad <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca9d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000caa3:	89 d3                	mov    ebx,edx
c000caa5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000caab:	72 05                	jb     c000cab2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caad:	83 c8 ff             	or     eax,0xffffffff
c000cab0:	89 c2                	mov    edx,eax
c000cab2:	5b                   	pop    ebx
c000cab3:	c3                   	ret    

c000cab4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cab4:	56                   	push   esi
c000cab5:	83 c8 ff             	or     eax,0xffffffff
c000cab8:	53                   	push   ebx
c000cab9:	89 c2                	mov    edx,eax
c000cabb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cabf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cac3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cac7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cacd:	77 27                	ja     c000caf6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cacf:	89 d8                	mov    eax,ebx
c000cad1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cad7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cadd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cae2:	89 c2                	mov    edx,eax
c000cae4:	73 10                	jae    c000caf6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cae6:	89 c8                	mov    eax,ecx
c000cae8:	89 da                	mov    edx,ebx
c000caea:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000caf0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caf6:	5b                   	pop    ebx
c000caf7:	5e                   	pop    esi
c000caf8:	c3                   	ret    
c000caf9:	90                   	nop

c000cafa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cafa:	83 ec 1c             	sub    esp,0x1c
c000cafd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb11:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb20:	83 ec 08             	sub    esp,0x8
c000cb23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb27:	50                   	push   eax
c000cb28:	e8 ab f0 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c000cb35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb39:	89 10                	mov    DWORD PTR [eax],edx
c000cb3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb55:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb6b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb71:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb77:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb82:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb88:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb96:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbaa:	90                   	nop
c000cbab:	83 c4 1c             	add    esp,0x1c
c000cbae:	c3                   	ret    
c000cbaf:	90                   	nop

c000cbb0 <LogicalDisk::assignDriveLetter()>:
c000cbb0:	55                   	push   ebp
c000cbb1:	57                   	push   edi
c000cbb2:	56                   	push   esi
c000cbb3:	53                   	push   ebx
c000cbb4:	83 ec 14             	sub    esp,0x14
c000cbb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbbb:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cbc1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbc7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbcb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbd1:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cbd7:	3c 01                	cmp    al,0x1
c000cbd9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbdd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbe1:	19 c0                	sbb    eax,eax
c000cbe3:	83 e0 02             	and    eax,0x2
c000cbe6:	83 c0 41             	add    eax,0x41
c000cbe9:	0f be e8             	movsx  ebp,al
c000cbec:	3c 43                	cmp    al,0x43
c000cbee:	75 10                	jne    c000cc00 <LogicalDisk::assignDriveLetter()+0x50>
c000cbf0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbf7:	75 5d                	jne    c000cc56 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbf9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cbfe:	75 56                	jne    c000cc56 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc00:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc03:	ba 01 00 00 00       	mov    edx,0x1
c000cc08:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc0c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc10:	d3 e2                	shl    edx,cl
c000cc12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc16:	89 d7                	mov    edi,edx
c000cc18:	89 d6                	mov    esi,edx
c000cc1a:	c1 ff 1f             	sar    edi,0x1f
c000cc1d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc21:	21 f9                	and    ecx,edi
c000cc23:	09 d1                	or     ecx,edx
c000cc25:	75 2f                	jne    c000cc56 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc2f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc35:	09 f2                	or     edx,esi
c000cc37:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cc3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc41:	09 fa                	or     edx,edi
c000cc43:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc47:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cc4d:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cc54:	eb 08                	jmp    c000cc5e <LogicalDisk::assignDriveLetter()+0xae>
c000cc56:	45                   	inc    ebp
c000cc57:	40                   	inc    eax
c000cc58:	3c 5b                	cmp    al,0x5b
c000cc5a:	75 90                	jne    c000cbec <LogicalDisk::assignDriveLetter()+0x3c>
c000cc5c:	31 c0                	xor    eax,eax
c000cc5e:	83 c4 14             	add    esp,0x14
c000cc61:	5b                   	pop    ebx
c000cc62:	5e                   	pop    esi
c000cc63:	5f                   	pop    edi
c000cc64:	5d                   	pop    ebp
c000cc65:	c3                   	ret    

c000cc66 <LogicalDisk::mount()>:
c000cc66:	56                   	push   esi
c000cc67:	53                   	push   ebx
c000cc68:	53                   	push   ebx
c000cc69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc6d:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cc73:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc7d:	85 db                	test   ebx,ebx
c000cc7f:	74 27                	je     c000cca8 <LogicalDisk::mount()+0x42>
c000cc81:	51                   	push   ecx
c000cc82:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc89:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc8b:	83 e8 41             	sub    eax,0x41
c000cc8e:	50                   	push   eax
c000cc8f:	56                   	push   esi
c000cc90:	53                   	push   ebx
c000cc91:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc94:	83 c4 10             	add    esp,0x10
c000cc97:	84 c0                	test   al,al
c000cc99:	74 08                	je     c000cca3 <LogicalDisk::mount()+0x3d>
c000cc9b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cca1:	eb 07                	jmp    c000ccaa <LogicalDisk::mount()+0x44>
c000cca3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cca6:	eb d5                	jmp    c000cc7d <LogicalDisk::mount()+0x17>
c000cca8:	31 c0                	xor    eax,eax
c000ccaa:	5a                   	pop    edx
c000ccab:	5b                   	pop    ebx
c000ccac:	5e                   	pop    esi
c000ccad:	c3                   	ret    

c000ccae <LogicalDisk::unmount()>:
c000ccae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ccbc:	c3                   	ret    
c000ccbd:	90                   	nop

c000ccbe <LogicalDisk::eject()>:
c000ccbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccce:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccd1:	90                   	nop

c000ccd2 <LogicalDisk::unassignDriveLetter()>:
c000ccd2:	57                   	push   edi
c000ccd3:	56                   	push   esi
c000ccd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccd8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ccdf:	84 c9                	test   cl,cl
c000cce1:	75 0f                	jne    c000ccf2 <LogicalDisk::unassignDriveLetter()+0x20>
c000cce3:	c7 44 24 0c fc e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1fc
c000cceb:	5e                   	pop    esi
c000ccec:	5f                   	pop    edi
c000cced:	e9 91 35 00 00       	jmp    c0010283 <KePanic(char const*)>
c000ccf2:	83 e9 41             	sub    ecx,0x41
c000ccf5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ccfc:	b8 01 00 00 00       	mov    eax,0x1
c000cd01:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cd0c:	d3 e0                	shl    eax,cl
c000cd0e:	89 c7                	mov    edi,eax
c000cd10:	f7 d0                	not    eax
c000cd12:	c1 ff 1f             	sar    edi,0x1f
c000cd15:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cd1b:	89 fe                	mov    esi,edi
c000cd1d:	f7 d6                	not    esi
c000cd1f:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cd25:	5e                   	pop    esi
c000cd26:	5f                   	pop    edi
c000cd27:	c3                   	ret    

c000cd28 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd28:	57                   	push   edi
c000cd29:	56                   	push   esi
c000cd2a:	53                   	push   ebx
c000cd2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd3b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd41:	77 41                	ja     c000cd84 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd43:	99                   	cdq    
c000cd44:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd4a:	01 c8                	add    eax,ecx
c000cd4c:	11 da                	adc    edx,ebx
c000cd4e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd54:	19 d7                	sbb    edi,edx
c000cd56:	72 33                	jb     c000cd8b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd58:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd5e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd68:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd6c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd7c:	5b                   	pop    ebx
c000cd7d:	5e                   	pop    esi
c000cd7e:	5f                   	pop    edi
c000cd7f:	e9 4e 0a 00 00       	jmp    c000d7d2 <VCache::read(unsigned long long, int, void*)>
c000cd84:	b8 05 00 00 00       	mov    eax,0x5
c000cd89:	eb 05                	jmp    c000cd90 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd8b:	b8 07 00 00 00       	mov    eax,0x7
c000cd90:	5b                   	pop    ebx
c000cd91:	5e                   	pop    esi
c000cd92:	5f                   	pop    edi
c000cd93:	c3                   	ret    

c000cd94 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd94:	57                   	push   edi
c000cd95:	56                   	push   esi
c000cd96:	53                   	push   ebx
c000cd97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd9f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cda7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdad:	77 41                	ja     c000cdf0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdaf:	99                   	cdq    
c000cdb0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdb6:	01 c8                	add    eax,ecx
c000cdb8:	11 da                	adc    edx,ebx
c000cdba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc0:	19 d7                	sbb    edi,edx
c000cdc2:	72 33                	jb     c000cdf7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdc4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdd8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cde8:	5b                   	pop    ebx
c000cde9:	5e                   	pop    esi
c000cdea:	5f                   	pop    edi
c000cdeb:	e9 cc 08 00 00       	jmp    c000d6bc <VCache::write(unsigned long long, int, void*)>
c000cdf0:	b8 05 00 00 00       	mov    eax,0x5
c000cdf5:	eb 05                	jmp    c000cdfc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdf7:	b8 07 00 00 00       	mov    eax,0x7
c000cdfc:	5b                   	pop    ebx
c000cdfd:	5e                   	pop    esi
c000cdfe:	5f                   	pop    edi
c000cdff:	c3                   	ret    

c000ce00 <Mouse::Mouse(char const*)>:
c000ce00:	83 ec 0c             	sub    esp,0xc
c000ce03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce07:	83 ec 08             	sub    esp,0x8
c000ce0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0e:	50                   	push   eax
c000ce0f:	e8 c4 ed ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	ba 50 e2 01 c0       	mov    edx,0xc001e250
c000ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce20:	89 10                	mov    DWORD PTR [eax],edx
c000ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce26:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce30:	90                   	nop
c000ce31:	83 c4 0c             	add    esp,0xc
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop
c000ce36:	66 90                	xchg   ax,ax

c000ce38 <Mouse::~Mouse()>:
c000ce38:	83 ec 0c             	sub    esp,0xc
c000ce3b:	ba 50 e2 01 c0       	mov    edx,0xc001e250
c000ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce44:	89 10                	mov    DWORD PTR [eax],edx
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	83 ec 0c             	sub    esp,0xc
c000ce4d:	50                   	push   eax
c000ce4e:	e8 ef ea ff ff       	call   c000b942 <Device::~Device()>
c000ce53:	83 c4 10             	add    esp,0x10
c000ce56:	90                   	nop
c000ce57:	83 c4 0c             	add    esp,0xc
c000ce5a:	c3                   	ret    
c000ce5b:	90                   	nop

c000ce5c <Mouse::~Mouse()>:
c000ce5c:	83 ec 0c             	sub    esp,0xc
c000ce5f:	83 ec 0c             	sub    esp,0xc
c000ce62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce66:	e8 cd ff ff ff       	call   c000ce38 <Mouse::~Mouse()>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	83 ec 08             	sub    esp,0x8
c000ce71:	68 58 01 00 00       	push   0x158
c000ce76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7a:	e8 8e d6 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	83 c4 0c             	add    esp,0xc
c000ce85:	c3                   	ret    

c000ce86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce86:	55                   	push   ebp
c000ce87:	57                   	push   edi
c000ce88:	56                   	push   esi
c000ce89:	53                   	push   ebx
c000ce8a:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce90:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce97:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce9e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cea5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ceac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ceb0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ceb4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cebb:	e8 14 ee ff ff       	call   c000bcd4 <Device::getName()>
c000cec0:	5a                   	pop    edx
c000cec1:	59                   	pop    ecx
c000cec2:	50                   	push   eax
c000cec3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cec7:	55                   	push   ebp
c000cec8:	e8 33 37 ff ff       	call   c0000600 <strcpy>
c000cecd:	5b                   	pop    ebx
c000cece:	58                   	pop    eax
c000cecf:	68 74 e2 01 c0       	push   0xc001e274
c000ced4:	55                   	push   ebp
c000ced5:	e8 e6 38 ff ff       	call   c00007c0 <strcat>
c000ceda:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cee1:	e8 d3 a8 ff ff       	call   c00077b9 <malloc>
c000cee6:	83 c4 0c             	add    esp,0xc
c000cee9:	89 c3                	mov    ebx,eax
c000ceeb:	57                   	push   edi
c000ceec:	56                   	push   esi
c000ceed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cefc:	55                   	push   ebp
c000cefd:	50                   	push   eax
c000cefe:	e8 f7 fb ff ff       	call   c000cafa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf03:	83 c4 14             	add    esp,0x14
c000cf06:	53                   	push   ebx
c000cf07:	e8 a4 fc ff ff       	call   c000cbb0 <LogicalDisk::assignDriveLetter()>
c000cf0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf0f:	e8 52 fd ff ff       	call   c000cc66 <LogicalDisk::mount()>
c000cf14:	58                   	pop    eax
c000cf15:	5a                   	pop    edx
c000cf16:	53                   	push   ebx
c000cf17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf1e:	e8 1d eb ff ff       	call   c000ba40 <Device::addChild(Device*)>
c000cf23:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf29:	5b                   	pop    ebx
c000cf2a:	5e                   	pop    esi
c000cf2b:	5f                   	pop    edi
c000cf2c:	5d                   	pop    ebp
c000cf2d:	c3                   	ret    

c000cf2e <createPartitionsForDisk(PhysicalDisk*)>:
c000cf2e:	55                   	push   ebp
c000cf2f:	57                   	push   edi
c000cf30:	56                   	push   esi
c000cf31:	53                   	push   ebx
c000cf32:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf38:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf3f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf45:	3d 00 02 00 00       	cmp    eax,0x200
c000cf4a:	74 27                	je     c000cf73 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf4c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf52:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf58:	83 ec 10             	sub    esp,0x10
c000cf5b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf5f:	99                   	cdq    
c000cf60:	c1 e6 0a             	shl    esi,0xa
c000cf63:	52                   	push   edx
c000cf64:	89 fd                	mov    ebp,edi
c000cf66:	50                   	push   eax
c000cf67:	55                   	push   ebp
c000cf68:	56                   	push   esi
c000cf69:	e8 62 f2 00 00       	call   c001c1d0 <__udivdi3>
c000cf6e:	e9 b1 00 00 00       	jmp    c000d024 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf73:	83 ec 0c             	sub    esp,0xc
c000cf76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf78:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf7c:	56                   	push   esi
c000cf7d:	6a 01                	push   0x1
c000cf7f:	6a 00                	push   0x0
c000cf81:	6a 00                	push   0x0
c000cf83:	53                   	push   ebx
c000cf84:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf87:	83 c4 20             	add    esp,0x20
c000cf8a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf92:	75 0a                	jne    c000cf9e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf94:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf9c:	74 2c                	je     c000cfca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfa4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfaa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfb0:	83 ec 10             	sub    esp,0x10
c000cfb3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfb7:	89 f7                	mov    edi,esi
c000cfb9:	c1 e0 0a             	shl    eax,0xa
c000cfbc:	c1 ff 1f             	sar    edi,0x1f
c000cfbf:	57                   	push   edi
c000cfc0:	56                   	push   esi
c000cfc1:	52                   	push   edx
c000cfc2:	50                   	push   eax
c000cfc3:	e8 08 f2 00 00       	call   c001c1d0 <__udivdi3>
c000cfc8:	eb 5a                	jmp    c000d024 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfd1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cfd8:	83 e1 7f             	and    ecx,0x7f
c000cfdb:	83 e0 7f             	and    eax,0x7f
c000cfde:	01 c1                	add    ecx,eax
c000cfe0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfe7:	83 e0 7f             	and    eax,0x7f
c000cfea:	01 c1                	add    ecx,eax
c000cfec:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cff3:	83 e0 7f             	and    eax,0x7f
c000cff6:	00 c1                	add    cl,al
c000cff8:	74 41                	je     c000d03b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cffa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d000:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d006:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d00c:	83 ec 10             	sub    esp,0x10
c000d00f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d013:	89 f7                	mov    edi,esi
c000d015:	c1 e0 0a             	shl    eax,0xa
c000d018:	c1 ff 1f             	sar    edi,0x1f
c000d01b:	57                   	push   edi
c000d01c:	56                   	push   esi
c000d01d:	52                   	push   edx
c000d01e:	50                   	push   eax
c000d01f:	e8 ac f1 00 00       	call   c001c1d0 <__udivdi3>
c000d024:	83 c4 14             	add    esp,0x14
c000d027:	52                   	push   edx
c000d028:	50                   	push   eax
c000d029:	6a 00                	push   0x0
c000d02b:	6a 00                	push   0x0
c000d02d:	53                   	push   ebx
c000d02e:	e8 53 fe ff ff       	call   c000ce86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d033:	83 c4 20             	add    esp,0x20
c000d036:	e9 79 01 00 00       	jmp    c000d1b4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d03b:	89 f0                	mov    eax,esi
c000d03d:	31 f6                	xor    esi,esi
c000d03f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d046:	75 02                	jne    c000d04a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d048:	89 f1                	mov    ecx,esi
c000d04a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d051:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d058:	c1 e2 08             	shl    edx,0x8
c000d05b:	c1 e7 10             	shl    edi,0x10
c000d05e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d066:	09 fa                	or     edx,edi
c000d068:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d070:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d077:	83 c0 10             	add    eax,0x10
c000d07a:	09 fa                	or     edx,edi
c000d07c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d083:	c1 e7 18             	shl    edi,0x18
c000d086:	09 fa                	or     edx,edi
c000d088:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d08f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d093:	c1 e7 10             	shl    edi,0x10
c000d096:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d09d:	c1 e2 08             	shl    edx,0x8
c000d0a0:	09 fa                	or     edx,edi
c000d0a2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d0a9:	09 fa                	or     edx,edi
c000d0ab:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0b2:	c1 e7 18             	shl    edi,0x18
c000d0b5:	09 fa                	or     edx,edi
c000d0b7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0bb:	46                   	inc    esi
c000d0bc:	83 fe 04             	cmp    esi,0x4
c000d0bf:	0f 85 7a ff ff ff    	jne    c000d03f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c9:	83 f0 01             	xor    eax,0x1
c000d0cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0d0:	75 57                	jne    c000d129 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0d6:	83 f0 01             	xor    eax,0x1
c000d0d9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0dd:	75 4a                	jne    c000d129 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0f3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0f9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0ff:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d105:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d109:	89 f7                	mov    edi,esi
c000d10b:	c1 e0 0a             	shl    eax,0xa
c000d10e:	c1 ff 1f             	sar    edi,0x1f
c000d111:	57                   	push   edi
c000d112:	56                   	push   esi
c000d113:	52                   	push   edx
c000d114:	50                   	push   eax
c000d115:	e8 b6 f0 00 00       	call   c001c1d0 <__udivdi3>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d121:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d125:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d129:	84 c9                	test   cl,cl
c000d12b:	74 53                	je     c000d180 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d12d:	0f b6 c9             	movzx  ecx,cl
c000d130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d134:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d138:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d13c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d140:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d144:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d148:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d14c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d150:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d154:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d15c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d160:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d164:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d168:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d16c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d170:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d174:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d178:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d17c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d180:	31 ed                	xor    ebp,ebp
c000d182:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d186:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d18a:	89 f8                	mov    eax,edi
c000d18c:	09 f0                	or     eax,esi
c000d18e:	74 1e                	je     c000d1ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d190:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d194:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d198:	89 d1                	mov    ecx,edx
c000d19a:	09 c1                	or     ecx,eax
c000d19c:	74 10                	je     c000d1ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d19e:	83 ec 0c             	sub    esp,0xc
c000d1a1:	57                   	push   edi
c000d1a2:	56                   	push   esi
c000d1a3:	52                   	push   edx
c000d1a4:	50                   	push   eax
c000d1a5:	53                   	push   ebx
c000d1a6:	e8 db fc ff ff       	call   c000ce86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1ab:	83 c4 20             	add    esp,0x20
c000d1ae:	45                   	inc    ebp
c000d1af:	83 fd 04             	cmp    ebp,0x4
c000d1b2:	75 ce                	jne    c000d182 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1b4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1ba:	5b                   	pop    ebx
c000d1bb:	5e                   	pop    esi
c000d1bc:	5f                   	pop    edi
c000d1bd:	5d                   	pop    ebp
c000d1be:	c3                   	ret    
c000d1bf:	90                   	nop

c000d1c0 <Serial::Serial(char const*)>:
c000d1c0:	83 ec 0c             	sub    esp,0xc
c000d1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c7:	83 ec 08             	sub    esp,0x8
c000d1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ce:	50                   	push   eax
c000d1cf:	e8 04 ea ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000d1d4:	83 c4 10             	add    esp,0x10
c000d1d7:	ba 88 e2 01 c0       	mov    edx,0xc001e288
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	89 10                	mov    DWORD PTR [eax],edx
c000d1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d1f0:	90                   	nop
c000d1f1:	83 c4 0c             	add    esp,0xc
c000d1f4:	c3                   	ret    
c000d1f5:	90                   	nop
c000d1f6:	66 90                	xchg   ax,ax

c000d1f8 <Serial::~Serial()>:
c000d1f8:	83 ec 0c             	sub    esp,0xc
c000d1fb:	ba 88 e2 01 c0       	mov    edx,0xc001e288
c000d200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d204:	89 10                	mov    DWORD PTR [eax],edx
c000d206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20a:	83 ec 0c             	sub    esp,0xc
c000d20d:	50                   	push   eax
c000d20e:	e8 2f e7 ff ff       	call   c000b942 <Device::~Device()>
c000d213:	83 c4 10             	add    esp,0x10
c000d216:	90                   	nop
c000d217:	83 c4 0c             	add    esp,0xc
c000d21a:	c3                   	ret    
c000d21b:	90                   	nop

c000d21c <Serial::~Serial()>:
c000d21c:	83 ec 0c             	sub    esp,0xc
c000d21f:	83 ec 0c             	sub    esp,0xc
c000d222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d226:	e8 cd ff ff ff       	call   c000d1f8 <Serial::~Serial()>
c000d22b:	83 c4 10             	add    esp,0x10
c000d22e:	83 ec 08             	sub    esp,0x8
c000d231:	68 58 01 00 00       	push   0x158
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	e8 ce d2 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	83 c4 0c             	add    esp,0xc
c000d245:	c3                   	ret    
c000d246:	66 90                	xchg   ax,ax

c000d248 <Timer::Timer(char const*)>:
c000d248:	83 ec 0c             	sub    esp,0xc
c000d24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24f:	83 ec 08             	sub    esp,0x8
c000d252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d256:	50                   	push   eax
c000d257:	e8 7c e9 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000d264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d268:	89 10                	mov    DWORD PTR [eax],edx
c000d26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d278:	90                   	nop
c000d279:	83 c4 0c             	add    esp,0xc
c000d27c:	c3                   	ret    
c000d27d:	90                   	nop
c000d27e:	66 90                	xchg   ax,ax

c000d280 <Timer::~Timer()>:
c000d280:	83 ec 0c             	sub    esp,0xc
c000d283:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000d288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28c:	89 10                	mov    DWORD PTR [eax],edx
c000d28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d292:	83 ec 0c             	sub    esp,0xc
c000d295:	50                   	push   eax
c000d296:	e8 a7 e6 ff ff       	call   c000b942 <Device::~Device()>
c000d29b:	83 c4 10             	add    esp,0x10
c000d29e:	90                   	nop
c000d29f:	83 c4 0c             	add    esp,0xc
c000d2a2:	c3                   	ret    
c000d2a3:	90                   	nop

c000d2a4 <Timer::~Timer()>:
c000d2a4:	83 ec 0c             	sub    esp,0xc
c000d2a7:	83 ec 0c             	sub    esp,0xc
c000d2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ae:	e8 cd ff ff ff       	call   c000d280 <Timer::~Timer()>
c000d2b3:	83 c4 10             	add    esp,0x10
c000d2b6:	83 ec 08             	sub    esp,0x8
c000d2b9:	68 5c 01 00 00       	push   0x15c
c000d2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c2:	e8 46 d2 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000d2c7:	83 c4 10             	add    esp,0x10
c000d2ca:	83 c4 0c             	add    esp,0xc
c000d2cd:	c3                   	ret    

c000d2ce <Timer::read()>:
c000d2ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2d8:	c3                   	ret    

c000d2d9 <setupTimer(int)>:
c000d2d9:	53                   	push   ebx
c000d2da:	83 ec 14             	sub    esp,0x14
c000d2dd:	68 5c 01 00 00       	push   0x15c
c000d2e2:	e8 d2 a4 ff ff       	call   c00077b9 <malloc>
c000d2e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2ea:	89 c3                	mov    ebx,eax
c000d2ec:	e8 fb e7 00 00       	call   c001baec <PIT::PIT()>
c000d2f1:	58                   	pop    eax
c000d2f2:	5a                   	pop    edx
c000d2f3:	53                   	push   ebx
c000d2f4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d2fa:	e8 41 e7 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c000d2ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d301:	6a 00                	push   0x0
c000d303:	6a 00                	push   0x0
c000d305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d309:	53                   	push   ebx
c000d30a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d30d:	89 d8                	mov    eax,ebx
c000d30f:	83 c4 28             	add    esp,0x28
c000d312:	5b                   	pop    ebx
c000d313:	c3                   	ret    

c000d314 <timerHandler(unsigned int)>:
c000d314:	56                   	push   esi
c000d315:	53                   	push   ebx
c000d316:	51                   	push   ecx
c000d317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31b:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d321:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d328:	0f 84 4a 01 00 00    	je     c000d478 <timerHandler(unsigned int)+0x164>
c000d32e:	fa                   	cli    
c000d32f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d335:	83 ec 0c             	sub    esp,0xc
c000d338:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d33e:	68 78 51 02 c0       	push   0xc0025178
c000d343:	e8 58 f4 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d348:	83 c4 10             	add    esp,0x10
c000d34b:	84 c0                	test   al,al
c000d34d:	0f 85 a1 00 00 00    	jne    c000d3f4 <timerHandler(unsigned int)+0xe0>
c000d353:	83 ec 0c             	sub    esp,0xc
c000d356:	68 78 51 02 c0       	push   0xc0025178
c000d35b:	e8 5c f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d360:	83 c4 10             	add    esp,0x10
c000d363:	89 c6                	mov    esi,eax
c000d365:	8d 76 00             	lea    esi,[esi+0x0]
c000d368:	83 ec 0c             	sub    esp,0xc
c000d36b:	68 78 51 02 c0       	push   0xc0025178
c000d370:	e8 47 f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d375:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d37c:	89 c3                	mov    ebx,eax
c000d37e:	e8 41 f4 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d383:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d386:	83 c4 10             	add    esp,0x10
c000d389:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d38f:	77 23                	ja     c000d3b4 <timerHandler(unsigned int)+0xa0>
c000d391:	83 ec 0c             	sub    esp,0xc
c000d394:	53                   	push   ebx
c000d395:	e8 a2 69 00 00       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	39 de                	cmp    esi,ebx
c000d39f:	75 27                	jne    c000d3c8 <timerHandler(unsigned int)+0xb4>
c000d3a1:	83 ec 0c             	sub    esp,0xc
c000d3a4:	68 78 51 02 c0       	push   0xc0025178
c000d3a9:	e8 0e f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3ae:	89 c6                	mov    esi,eax
c000d3b0:	eb 12                	jmp    c000d3c4 <timerHandler(unsigned int)+0xb0>
c000d3b2:	66 90                	xchg   ax,ax
c000d3b4:	52                   	push   edx
c000d3b5:	52                   	push   edx
c000d3b6:	53                   	push   ebx
c000d3b7:	68 78 51 02 c0       	push   0xc0025178
c000d3bc:	e8 bb f4 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	90                   	nop
c000d3c8:	83 ec 0c             	sub    esp,0xc
c000d3cb:	68 78 51 02 c0       	push   0xc0025178
c000d3d0:	e8 cb f3 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3d5:	83 c4 10             	add    esp,0x10
c000d3d8:	84 c0                	test   al,al
c000d3da:	75 18                	jne    c000d3f4 <timerHandler(unsigned int)+0xe0>
c000d3dc:	83 ec 0c             	sub    esp,0xc
c000d3df:	68 78 51 02 c0       	push   0xc0025178
c000d3e4:	e8 d3 f3 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3e9:	83 c4 10             	add    esp,0x10
c000d3ec:	39 f0                	cmp    eax,esi
c000d3ee:	0f 85 74 ff ff ff    	jne    c000d368 <timerHandler(unsigned int)+0x54>
c000d3f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d3f9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d3fd:	74 41                	je     c000d440 <timerHandler(unsigned int)+0x12c>
c000d3ff:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d406:	74 38                	je     c000d440 <timerHandler(unsigned int)+0x12c>
c000d408:	fa                   	cli    
c000d409:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d40f:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d414:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d41a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d41d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d423:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d426:	72 08                	jb     c000d430 <timerHandler(unsigned int)+0x11c>
c000d428:	e8 4b 64 00 00       	call   c0013878 <schedule()>
c000d42d:	8d 76 00             	lea    esi,[esi+0x0]
c000d430:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d435:	48                   	dec    eax
c000d436:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d43b:	75 03                	jne    c000d440 <timerHandler(unsigned int)+0x12c>
c000d43d:	fb                   	sti    
c000d43e:	66 90                	xchg   ax,ax
c000d440:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d445:	48                   	dec    eax
c000d446:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d44b:	75 1b                	jne    c000d468 <timerHandler(unsigned int)+0x154>
c000d44d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d454:	74 12                	je     c000d468 <timerHandler(unsigned int)+0x154>
c000d456:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d460:	e8 13 64 00 00       	call   c0013878 <schedule()>
c000d465:	8d 76 00             	lea    esi,[esi+0x0]
c000d468:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d46d:	48                   	dec    eax
c000d46e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d473:	75 03                	jne    c000d478 <timerHandler(unsigned int)+0x164>
c000d475:	fb                   	sti    
c000d476:	66 90                	xchg   ax,ax
c000d478:	58                   	pop    eax
c000d479:	5b                   	pop    ebx
c000d47a:	5e                   	pop    esi
c000d47b:	c3                   	ret    

c000d47c <VCache::VCache(PhysicalDisk*)>:
c000d47c:	53                   	push   ebx
c000d47d:	83 ec 18             	sub    esp,0x18
c000d480:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d489:	89 10                	mov    DWORD PTR [eax],edx
c000d48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4be:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4dc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4e3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d4fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d506:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d50d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d515:	83 ec 0c             	sub    esp,0xc
c000d518:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d51c:	e8 98 a2 ff ff       	call   c00077b9 <malloc>
c000d521:	83 c4 10             	add    esp,0x10
c000d524:	89 c3                	mov    ebx,eax
c000d526:	83 ec 0c             	sub    esp,0xc
c000d529:	53                   	push   ebx
c000d52a:	e8 15 61 00 00       	call   c0013644 <Mutex::Mutex()>
c000d52f:	83 c4 10             	add    esp,0x10
c000d532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d536:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d541:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d548:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d54f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d553:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d560:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d564:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d56a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d570:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d574:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d577:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d57a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d582:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d586:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d58c:	05 00 01 00 00       	add    eax,0x100
c000d591:	c1 e0 04             	shl    eax,0x4
c000d594:	83 ec 0c             	sub    esp,0xc
c000d597:	50                   	push   eax
c000d598:	e8 1c a2 ff ff       	call   c00077b9 <malloc>
c000d59d:	83 c4 10             	add    esp,0x10
c000d5a0:	89 c2                	mov    edx,eax
c000d5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ad:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d5c6:	c1 e0 06             	shl    eax,0x6
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	50                   	push   eax
c000d5cd:	e8 e7 a1 ff ff       	call   c00077b9 <malloc>
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	89 c2                	mov    edx,eax
c000d5d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5db:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5de:	90                   	nop
c000d5df:	83 c4 18             	add    esp,0x18
c000d5e2:	5b                   	pop    ebx
c000d5e3:	c3                   	ret    

c000d5e4 <VCache::invalidateReadBuffer()>:
c000d5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5e8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d5ee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5f2:	c3                   	ret    
c000d5f3:	90                   	nop

c000d5f4 <VCache::writeWriteBuffer()>:
c000d5f4:	53                   	push   ebx
c000d5f5:	83 ec 08             	sub    esp,0x8
c000d5f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d600:	74 1e                	je     c000d620 <VCache::writeWriteBuffer()+0x2c>
c000d602:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d605:	83 ec 0c             	sub    esp,0xc
c000d608:	8b 10                	mov    edx,DWORD PTR [eax]
c000d60a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d60d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d610:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d613:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d616:	50                   	push   eax
c000d617:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d61a:	83 c4 20             	add    esp,0x20
c000d61d:	8d 76 00             	lea    esi,[esi+0x0]
c000d620:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d627:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d62e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d632:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d639:	83 c4 08             	add    esp,0x8
c000d63c:	5b                   	pop    ebx
c000d63d:	c3                   	ret    
c000d63e:	66 90                	xchg   ax,ax

c000d640 <VCache::~VCache()>:
c000d640:	83 ec 0c             	sub    esp,0xc
c000d643:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d64c:	89 10                	mov    DWORD PTR [eax],edx
c000d64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d652:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d655:	84 c0                	test   al,al
c000d657:	74 0f                	je     c000d668 <VCache::~VCache()+0x28>
c000d659:	83 ec 0c             	sub    esp,0xc
c000d65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d660:	e8 8f ff ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c000d665:	83 c4 10             	add    esp,0x10
c000d668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d66f:	83 ec 0c             	sub    esp,0xc
c000d672:	50                   	push   eax
c000d673:	e8 51 a1 ff ff       	call   c00077c9 <free>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	50                   	push   eax
c000d686:	e8 3e a1 ff ff       	call   c00077c9 <free>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	90                   	nop
c000d68f:	83 c4 0c             	add    esp,0xc
c000d692:	c3                   	ret    
c000d693:	90                   	nop

c000d694 <VCache::~VCache()>:
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	83 ec 0c             	sub    esp,0xc
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	e8 9d ff ff ff       	call   c000d640 <VCache::~VCache()>
c000d6a3:	83 c4 10             	add    esp,0x10
c000d6a6:	83 ec 08             	sub    esp,0x8
c000d6a9:	6a 44                	push   0x44
c000d6ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6af:	e8 59 ce ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000d6b4:	83 c4 10             	add    esp,0x10
c000d6b7:	83 c4 0c             	add    esp,0xc
c000d6ba:	c3                   	ret    
c000d6bb:	90                   	nop

c000d6bc <VCache::write(unsigned long long, int, void*)>:
c000d6bc:	55                   	push   ebp
c000d6bd:	57                   	push   edi
c000d6be:	56                   	push   esi
c000d6bf:	53                   	push   ebx
c000d6c0:	83 ec 1c             	sub    esp,0x1c
c000d6c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d6d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6d7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6df:	31 c0                	xor    eax,eax
c000d6e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d6e4:	39 e8                	cmp    eax,ebp
c000d6e6:	7d 18                	jge    c000d700 <VCache::write(unsigned long long, int, void*)+0x44>
c000d6e8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6eb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6f1:	0f af c8             	imul   ecx,eax
c000d6f4:	89 ca                	mov    edx,ecx
c000d6f6:	01 f2                	add    edx,esi
c000d6f8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d6fa:	40                   	inc    eax
c000d6fb:	eb e7                	jmp    c000d6e4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d704:	74 0a                	je     c000d710 <VCache::write(unsigned long long, int, void*)+0x54>
c000d706:	53                   	push   ebx
c000d707:	e8 d8 fe ff ff       	call   c000d5e4 <VCache::invalidateReadBuffer()>
c000d70c:	58                   	pop    eax
c000d70d:	8d 76 00             	lea    esi,[esi+0x0]
c000d710:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d714:	74 5a                	je     c000d770 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d716:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d719:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d71d:	89 f8                	mov    eax,edi
c000d71f:	99                   	cdq    
c000d720:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d723:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d726:	31 c1                	xor    ecx,eax
c000d728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d72c:	31 d0                	xor    eax,edx
c000d72e:	09 c1                	or     ecx,eax
c000d730:	75 32                	jne    c000d764 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d732:	83 fd 01             	cmp    ebp,0x1
c000d735:	75 2d                	jne    c000d764 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d737:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d73a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d740:	0f af f9             	imul   edi,ecx
c000d743:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d746:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d748:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d74b:	40                   	inc    eax
c000d74c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d74f:	83 f8 40             	cmp    eax,0x40
c000d752:	75 74                	jne    c000d7c8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d754:	83 ec 0c             	sub    esp,0xc
c000d757:	53                   	push   ebx
c000d758:	e8 97 fe ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c000d75d:	83 c4 10             	add    esp,0x10
c000d760:	eb 66                	jmp    c000d7c8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d762:	66 90                	xchg   ax,ax
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	53                   	push   ebx
c000d768:	e8 87 fe ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d773:	83 fd 3f             	cmp    ebp,0x3f
c000d776:	7f 24                	jg     c000d79c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d77c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d77f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d782:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d78a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d78d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d790:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d796:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d798:	eb 2e                	jmp    c000d7c8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d79a:	66 90                	xchg   ax,ax
c000d79c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d79e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d7a2:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d7a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d7aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ae:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d7b2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7b6:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d7ba:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7bd:	83 c4 1c             	add    esp,0x1c
c000d7c0:	5b                   	pop    ebx
c000d7c1:	5e                   	pop    esi
c000d7c2:	5f                   	pop    edi
c000d7c3:	5d                   	pop    ebp
c000d7c4:	ff e0                	jmp    eax
c000d7c6:	66 90                	xchg   ax,ax
c000d7c8:	83 c4 1c             	add    esp,0x1c
c000d7cb:	31 c0                	xor    eax,eax
c000d7cd:	5b                   	pop    ebx
c000d7ce:	5e                   	pop    esi
c000d7cf:	5f                   	pop    edi
c000d7d0:	5d                   	pop    ebp
c000d7d1:	c3                   	ret    

c000d7d2 <VCache::read(unsigned long long, int, void*)>:
c000d7d2:	55                   	push   ebp
c000d7d3:	57                   	push   edi
c000d7d4:	56                   	push   esi
c000d7d5:	53                   	push   ebx
c000d7d6:	83 ec 1c             	sub    esp,0x1c
c000d7d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d7e5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d7f1:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d7f5:	74 0d                	je     c000d804 <VCache::read(unsigned long long, int, void*)+0x32>
c000d7f7:	83 ec 0c             	sub    esp,0xc
c000d7fa:	55                   	push   ebp
c000d7fb:	e8 f4 fd ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	90                   	nop
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	55                   	push   ebp
c000d808:	e8 d7 fd ff ff       	call   c000d5e4 <VCache::invalidateReadBuffer()>
c000d80d:	83 c4 0c             	add    esp,0xc
c000d810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d813:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d819:	6a 00                	push   0x0
c000d81b:	53                   	push   ebx
c000d81c:	e8 af 2c ff ff       	call   c00004d0 <memset>
c000d821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d824:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d828:	8b 10                	mov    edx,DWORD PTR [eax]
c000d82a:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d82e:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d832:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d836:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d83a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d83e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d841:	83 c4 2c             	add    esp,0x2c
c000d844:	5b                   	pop    ebx
c000d845:	5e                   	pop    esi
c000d846:	5f                   	pop    edi
c000d847:	5d                   	pop    ebp
c000d848:	ff e0                	jmp    eax

c000d84a <Video::putrect(int, int, int, int, unsigned int)>:
c000d84a:	55                   	push   ebp
c000d84b:	57                   	push   edi
c000d84c:	56                   	push   esi
c000d84d:	53                   	push   ebx
c000d84e:	83 ec 1c             	sub    esp,0x1c
c000d851:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d855:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d859:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d85d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d861:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d869:	01 df                	add    edi,ebx
c000d86b:	39 fb                	cmp    ebx,edi
c000d86d:	7d 1f                	jge    c000d88e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d86f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d873:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d877:	7d 12                	jge    c000d88b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d879:	8b 16                	mov    edx,DWORD PTR [esi]
c000d87b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d87f:	53                   	push   ebx
c000d880:	55                   	push   ebp
c000d881:	45                   	inc    ebp
c000d882:	56                   	push   esi
c000d883:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	eb e8                	jmp    c000d873 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d88b:	43                   	inc    ebx
c000d88c:	eb dd                	jmp    c000d86b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d88e:	83 c4 1c             	add    esp,0x1c
c000d891:	5b                   	pop    ebx
c000d892:	5e                   	pop    esi
c000d893:	5f                   	pop    edi
c000d894:	5d                   	pop    ebp
c000d895:	c3                   	ret    

c000d896 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d896:	55                   	push   ebp
c000d897:	57                   	push   edi
c000d898:	31 ff                	xor    edi,edi
c000d89a:	56                   	push   esi
c000d89b:	53                   	push   ebx
c000d89c:	83 ec 1c             	sub    esp,0x1c
c000d89f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d8a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d8a7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d8ae:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8b7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8bf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d8c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8c6:	01 f9                	add    ecx,edi
c000d8c8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d8cc:	7d 2f                	jge    c000d8fd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d8ce:	31 f6                	xor    esi,esi
c000d8d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8d4:	01 f2                	add    edx,esi
c000d8d6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d8da:	7d 1a                	jge    c000d8f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d8dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8df:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d8e2:	46                   	inc    esi
c000d8e3:	51                   	push   ecx
c000d8e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d8e8:	52                   	push   edx
c000d8e9:	55                   	push   ebp
c000d8ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8ed:	83 c4 10             	add    esp,0x10
c000d8f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8f4:	eb da                	jmp    c000d8d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d8f6:	47                   	inc    edi
c000d8f7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d8fb:	eb c5                	jmp    c000d8c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d8fd:	83 c4 1c             	add    esp,0x1c
c000d900:	5b                   	pop    ebx
c000d901:	5e                   	pop    esi
c000d902:	5f                   	pop    edi
c000d903:	5d                   	pop    ebp
c000d904:	c3                   	ret    
c000d905:	90                   	nop

c000d906 <Video::blit(unsigned int*, int, int, int, int)>:
c000d906:	55                   	push   ebp
c000d907:	57                   	push   edi
c000d908:	56                   	push   esi
c000d909:	53                   	push   ebx
c000d90a:	83 ec 1c             	sub    esp,0x1c
c000d90d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d911:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d915:	85 c0                	test   eax,eax
c000d917:	79 02                	jns    c000d91b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d919:	31 c0                	xor    eax,eax
c000d91b:	c1 e0 02             	shl    eax,0x2
c000d91e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d926:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d92a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d92e:	39 d8                	cmp    eax,ebx
c000d930:	7e 49                	jle    c000d97b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d932:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d938:	7c 41                	jl     c000d97b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d93a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d93e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d942:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d946:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d94a:	39 f9                	cmp    ecx,edi
c000d94c:	7e 22                	jle    c000d970 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d94e:	83 c5 04             	add    ebp,0x4
c000d951:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d957:	7c 14                	jl     c000d96d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d959:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d95b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d95e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d962:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d966:	56                   	push   esi
c000d967:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d96a:	83 c4 10             	add    esp,0x10
c000d96d:	47                   	inc    edi
c000d96e:	eb d2                	jmp    c000d942 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d974:	43                   	inc    ebx
c000d975:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d979:	eb ab                	jmp    c000d926 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d97b:	83 c4 1c             	add    esp,0x1c
c000d97e:	5b                   	pop    ebx
c000d97f:	5e                   	pop    esi
c000d980:	5f                   	pop    edi
c000d981:	5d                   	pop    ebp
c000d982:	c3                   	ret    
c000d983:	90                   	nop

c000d984 <Video::clearScreen(unsigned int)>:
c000d984:	57                   	push   edi
c000d985:	56                   	push   esi
c000d986:	53                   	push   ebx
c000d987:	31 db                	xor    ebx,ebx
c000d989:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d98d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d993:	7e 1f                	jle    c000d9b4 <Video::clearScreen(unsigned int)+0x30>
c000d995:	31 ff                	xor    edi,edi
c000d997:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d99d:	7e 12                	jle    c000d9b1 <Video::clearScreen(unsigned int)+0x2d>
c000d99f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a5:	53                   	push   ebx
c000d9a6:	57                   	push   edi
c000d9a7:	47                   	inc    edi
c000d9a8:	56                   	push   esi
c000d9a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	eb e6                	jmp    c000d997 <Video::clearScreen(unsigned int)+0x13>
c000d9b1:	43                   	inc    ebx
c000d9b2:	eb d9                	jmp    c000d98d <Video::clearScreen(unsigned int)+0x9>
c000d9b4:	5b                   	pop    ebx
c000d9b5:	5e                   	pop    esi
c000d9b6:	5f                   	pop    edi
c000d9b7:	c3                   	ret    

c000d9b8 <Video::putpixel(int, int, unsigned int)>:
c000d9b8:	c7 44 24 04 04 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e304
c000d9c0:	e9 be 28 00 00       	jmp    c0010283 <KePanic(char const*)>
c000d9c5:	90                   	nop

c000d9c6 <Video::Video(char const*)>:
c000d9c6:	83 ec 0c             	sub    esp,0xc
c000d9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9cd:	83 ec 08             	sub    esp,0x8
c000d9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d4:	50                   	push   eax
c000d9d5:	e8 fe e1 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000d9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e6:	89 10                	mov    DWORD PTR [eax],edx
c000d9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d9f6:	90                   	nop
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	c3                   	ret    
c000d9fb:	90                   	nop

c000d9fc <Video::~Video()>:
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000da04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da08:	89 10                	mov    DWORD PTR [eax],edx
c000da0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0e:	83 ec 0c             	sub    esp,0xc
c000da11:	50                   	push   eax
c000da12:	e8 2b df ff ff       	call   c000b942 <Device::~Device()>
c000da17:	83 c4 10             	add    esp,0x10
c000da1a:	90                   	nop
c000da1b:	83 c4 0c             	add    esp,0xc
c000da1e:	c3                   	ret    
c000da1f:	90                   	nop

c000da20 <Video::~Video()>:
c000da20:	83 ec 0c             	sub    esp,0xc
c000da23:	83 ec 0c             	sub    esp,0xc
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	e8 cd ff ff ff       	call   c000d9fc <Video::~Video()>
c000da2f:	83 c4 10             	add    esp,0x10
c000da32:	83 ec 08             	sub    esp,0x8
c000da35:	68 64 01 00 00       	push   0x164
c000da3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3e:	e8 ca ca ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	83 c4 0c             	add    esp,0xc
c000da49:	c3                   	ret    

c000da4a <Video::isMonochrome()>:
c000da4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da4e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da54:	c3                   	ret    
c000da55:	90                   	nop

c000da56 <Video::getWidth()>:
c000da56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da60:	c3                   	ret    
c000da61:	90                   	nop

c000da62 <Video::getHeight()>:
c000da62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da66:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da6c:	c3                   	ret    
c000da6d:	90                   	nop

c000da6e <Video::drawCursor(int, int, unsigned char*, int)>:
c000da6e:	55                   	push   ebp
c000da6f:	57                   	push   edi
c000da70:	56                   	push   esi
c000da71:	53                   	push   ebx
c000da72:	83 ec 2c             	sub    esp,0x2c
c000da75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da79:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da7d:	83 f8 01             	cmp    eax,0x1
c000da80:	19 c9                	sbb    ecx,ecx
c000da82:	31 db                	xor    ebx,ebx
c000da84:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da88:	89 cd                	mov    ebp,ecx
c000da8a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da92:	f7 d5                	not    ebp
c000da94:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da9a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da9e:	01 d8                	add    eax,ebx
c000daa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000daa4:	56                   	push   esi
c000daa5:	e8 b8 ff ff ff       	call   c000da62 <Video::getHeight()>
c000daaa:	59                   	pop    ecx
c000daab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000daaf:	7e 70                	jle    c000db21 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dab5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dab9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dabc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dac0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dac4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dacb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dacf:	89 f8                	mov    eax,edi
c000dad1:	83 c0 20             	add    eax,0x20
c000dad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dad8:	56                   	push   esi
c000dad9:	e8 78 ff ff ff       	call   c000da56 <Video::getWidth()>
c000dade:	5a                   	pop    edx
c000dadf:	39 c7                	cmp    edi,eax
c000dae1:	7d 34                	jge    c000db17 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dae3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dae8:	74 05                	je     c000daef <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000daea:	8b 06                	mov    eax,DWORD PTR [esi]
c000daec:	55                   	push   ebp
c000daed:	eb 0d                	jmp    c000dafc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000daef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000daf4:	74 12                	je     c000db08 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000daf6:	8b 06                	mov    eax,DWORD PTR [esi]
c000daf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dafc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db00:	57                   	push   edi
c000db01:	56                   	push   esi
c000db02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db05:	83 c4 10             	add    esp,0x10
c000db08:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db0c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db10:	47                   	inc    edi
c000db11:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db15:	75 c1                	jne    c000dad8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db17:	43                   	inc    ebx
c000db18:	83 fb 20             	cmp    ebx,0x20
c000db1b:	0f 85 79 ff ff ff    	jne    c000da9a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db21:	83 c4 2c             	add    esp,0x2c
c000db24:	5b                   	pop    ebx
c000db25:	5e                   	pop    esi
c000db26:	5f                   	pop    edi
c000db27:	5d                   	pop    ebp
c000db28:	c3                   	ret    
c000db29:	90                   	nop

c000db2a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db2a:	55                   	push   ebp
c000db2b:	57                   	push   edi
c000db2c:	56                   	push   esi
c000db2d:	53                   	push   ebx
c000db2e:	83 ec 28             	sub    esp,0x28
c000db31:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db35:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db39:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db3d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db41:	c1 e6 08             	shl    esi,0x8
c000db44:	01 c6                	add    esi,eax
c000db46:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db4a:	c1 e0 08             	shl    eax,0x8
c000db4d:	01 d0                	add    eax,edx
c000db4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db57:	0f af c6             	imul   eax,esi
c000db5a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000db61:	50                   	push   eax
c000db62:	e8 52 9c ff ff       	call   c00077b9 <malloc>
c000db67:	83 c4 10             	add    esp,0x10
c000db6a:	89 c7                	mov    edi,eax
c000db6c:	85 c0                	test   eax,eax
c000db6e:	75 10                	jne    c000db80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	68 25 e3 01 c0       	push   0xc001e325
c000db78:	e8 06 27 00 00       	call   c0010283 <KePanic(char const*)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db83:	ba 12 00 00 00       	mov    edx,0x12
c000db88:	84 c0                	test   al,al
c000db8a:	74 11                	je     c000db9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db8c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db90:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db94:	c1 fa 03             	sar    edx,0x3
c000db97:	0f af d1             	imul   edx,ecx
c000db9a:	83 c2 12             	add    edx,0x12
c000db9d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dba1:	74 04                	je     c000dba7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dba3:	85 f6                	test   esi,esi
c000dba5:	75 12                	jne    c000dbb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dba7:	83 ec 0c             	sub    esp,0xc
c000dbaa:	68 35 e3 01 c0       	push   0xc001e335
c000dbaf:	e8 4f ca ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000dbb4:	e9 b8 00 00 00       	jmp    c000dc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dbb9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbbd:	80 f9 02             	cmp    cl,0x2
c000dbc0:	0f 85 96 00 00 00    	jne    c000dc5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dbc6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dbcb:	75 0e                	jne    c000dbdb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbcd:	84 c0                	test   al,al
c000dbcf:	75 0a                	jne    c000dbdb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbd1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dbd4:	83 e8 18             	sub    eax,0x18
c000dbd7:	a8 f7                	test   al,0xf7
c000dbd9:	74 0a                	je     c000dbe5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dbdb:	83 ec 0c             	sub    esp,0xc
c000dbde:	68 4a e3 01 c0       	push   0xc001e34a
c000dbe3:	eb 7f                	jmp    c000dc64 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dbe5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dbed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dbf5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dbf9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc01:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc05:	75 0c                	jne    c000dc13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc07:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc0c:	c1 e0 18             	shl    eax,0x18
c000dc0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc13:	45                   	inc    ebp
c000dc14:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc19:	c1 e1 10             	shl    ecx,0x10
c000dc1c:	89 c8                	mov    eax,ecx
c000dc1e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc23:	c1 e1 08             	shl    ecx,0x8
c000dc26:	09 c1                	or     ecx,eax
c000dc28:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc2c:	09 c1                	or     ecx,eax
c000dc2e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc32:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc36:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc3a:	c1 f8 03             	sar    eax,0x3
c000dc3d:	01 c2                	add    edx,eax
c000dc3f:	89 e8                	mov    eax,ebp
c000dc41:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc45:	39 c6                	cmp    esi,eax
c000dc47:	7f b0                	jg     c000dbf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc49:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc51:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc54:	7e 22                	jle    c000dc78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc56:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc5a:	eb 99                	jmp    c000dbf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc5c:	50                   	push   eax
c000dc5d:	50                   	push   eax
c000dc5e:	51                   	push   ecx
c000dc5f:	68 58 e3 01 c0       	push   0xc001e358
c000dc64:	e8 9a c9 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000dc69:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc6c:	e8 58 9b ff ff       	call   c00077c9 <free>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	31 ff                	xor    edi,edi
c000dc76:	eb 0f                	jmp    c000dc87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dc78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc7c:	89 30                	mov    DWORD PTR [eax],esi
c000dc7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc82:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc85:	89 30                	mov    DWORD PTR [eax],esi
c000dc87:	83 c4 1c             	add    esp,0x1c
c000dc8a:	89 f8                	mov    eax,edi
c000dc8c:	5b                   	pop    ebx
c000dc8d:	5e                   	pop    esi
c000dc8e:	5f                   	pop    edi
c000dc8f:	5d                   	pop    ebp
c000dc90:	c3                   	ret    
c000dc91:	90                   	nop

c000dc92 <Video::putTGA(int, int, unsigned char*, int)>:
c000dc92:	55                   	push   ebp
c000dc93:	57                   	push   edi
c000dc94:	56                   	push   esi
c000dc95:	53                   	push   ebx
c000dc96:	83 ec 28             	sub    esp,0x28
c000dc99:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca1:	50                   	push   eax
c000dca2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca6:	50                   	push   eax
c000dca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcaf:	56                   	push   esi
c000dcb0:	e8 75 fe ff ff       	call   c000db2a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dcb5:	83 c4 20             	add    esp,0x20
c000dcb8:	85 c0                	test   eax,eax
c000dcba:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dcbe:	74 35                	je     c000dcf5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcc0:	89 c7                	mov    edi,eax
c000dcc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dcc6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcca:	39 d8                	cmp    eax,ebx
c000dccc:	7e 27                	jle    c000dcf5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dcd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcd6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dcda:	39 e8                	cmp    eax,ebp
c000dcdc:	7e 14                	jle    c000dcf2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dcde:	8b 06                	mov    eax,DWORD PTR [esi]
c000dce0:	83 c7 04             	add    edi,0x4
c000dce3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dce6:	53                   	push   ebx
c000dce7:	55                   	push   ebp
c000dce8:	45                   	inc    ebp
c000dce9:	56                   	push   esi
c000dcea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dced:	83 c4 10             	add    esp,0x10
c000dcf0:	eb e0                	jmp    c000dcd2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dcf2:	43                   	inc    ebx
c000dcf3:	eb cd                	jmp    c000dcc2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dcf5:	83 c4 1c             	add    esp,0x1c
c000dcf8:	5b                   	pop    ebx
c000dcf9:	5e                   	pop    esi
c000dcfa:	5f                   	pop    edi
c000dcfb:	5d                   	pop    ebp
c000dcfc:	c3                   	ret    
c000dcfd:	66 90                	xchg   ax,ax
c000dcff:	90                   	nop

c000dd00 <ACPI::close(int, int, void*)>:
c000dd00:	83 ec 1c             	sub    esp,0x1c
c000dd03:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd0b:	74 0b                	je     c000dd18 <ACPI::close(int, int, void*)+0x18>
c000dd0d:	b8 00 00 00 00       	mov    eax,0x0
c000dd12:	e9 9d 00 00 00       	jmp    c000ddb4 <ACPI::close(int, int, void*)+0xb4>
c000dd17:	90                   	nop
c000dd18:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd1d:	75 29                	jne    c000dd48 <ACPI::close(int, int, void*)+0x48>
c000dd1f:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd24:	85 c0                	test   eax,eax
c000dd26:	74 08                	je     c000dd30 <ACPI::close(int, int, void*)+0x30>
c000dd28:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd2d:	ff d0                	call   eax
c000dd2f:	90                   	nop
c000dd30:	83 ec 0c             	sub    esp,0xc
c000dd33:	68 b4 e3 01 c0       	push   0xc001e3b4
c000dd38:	e8 46 25 00 00       	call   c0010283 <KePanic(char const*)>
c000dd3d:	83 c4 10             	add    esp,0x10
c000dd40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd45:	eb 6d                	jmp    c000ddb4 <ACPI::close(int, int, void*)+0xb4>
c000dd47:	90                   	nop
c000dd48:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd4d:	75 5d                	jne    c000ddac <ACPI::close(int, int, void*)+0xac>
c000dd4f:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd54:	85 c0                	test   eax,eax
c000dd56:	74 08                	je     c000dd60 <ACPI::close(int, int, void*)+0x60>
c000dd58:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd5d:	ff d0                	call   eax
c000dd5f:	90                   	nop
c000dd60:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dd65:	8d 76 00             	lea    esi,[esi+0x0]
c000dd68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd6c:	25 ff 00 00 00       	and    eax,0xff
c000dd71:	83 e0 02             	and    eax,0x2
c000dd74:	74 1e                	je     c000dd94 <ACPI::close(int, int, void*)+0x94>
c000dd76:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dd7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd81:	89 c2                	mov    edx,eax
c000dd83:	ec                   	in     al,dx
c000dd84:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd88:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd8c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd90:	eb d6                	jmp    c000dd68 <ACPI::close(int, int, void*)+0x68>
c000dd92:	66 90                	xchg   ax,ax
c000dd94:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd9b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dda0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dda4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dda8:	ee                   	out    dx,al
c000dda9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb4:	83 c4 1c             	add    esp,0x1c
c000ddb7:	c3                   	ret    

c000ddb8 <findRSDP()>:
c000ddb8:	83 ec 1c             	sub    esp,0x1c
c000ddbb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddc0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddc6:	83 e0 04             	and    eax,0x4
c000ddc9:	84 c0                	test   al,al
c000ddcb:	75 07                	jne    c000ddd4 <findRSDP()+0x1c>
c000ddcd:	b8 00 00 00 00       	mov    eax,0x0
c000ddd2:	eb 70                	jmp    c000de44 <findRSDP()+0x8c>
c000ddd4:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000ddd9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ddde:	7f 1c                	jg     c000ddfc <findRSDP()+0x44>
c000dde0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dde5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ddeb:	83 e2 fb             	and    edx,0xfffffffb
c000ddee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ddf4:	b8 00 00 00 00       	mov    eax,0x0
c000ddf9:	eb 49                	jmp    c000de44 <findRSDP()+0x8c>
c000ddfb:	90                   	nop
c000ddfc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de04:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de0c:	77 2e                	ja     c000de3c <findRSDP()+0x84>
c000de0e:	83 ec 04             	sub    esp,0x4
c000de11:	6a 08                	push   0x8
c000de13:	68 4f e4 01 c0       	push   0xc001e44f
c000de18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de1c:	e8 6f 25 ff ff       	call   c0000390 <memcmp>
c000de21:	83 c4 10             	add    esp,0x10
c000de24:	85 c0                	test   eax,eax
c000de26:	0f 94 c0             	sete   al
c000de29:	84 c0                	test   al,al
c000de2b:	74 07                	je     c000de34 <findRSDP()+0x7c>
c000de2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de31:	eb 11                	jmp    c000de44 <findRSDP()+0x8c>
c000de33:	90                   	nop
c000de34:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de39:	eb c9                	jmp    c000de04 <findRSDP()+0x4c>
c000de3b:	90                   	nop
c000de3c:	b8 00 00 00 00       	mov    eax,0x0
c000de41:	8d 76 00             	lea    esi,[esi+0x0]
c000de44:	83 c4 1c             	add    esp,0x1c
c000de47:	c3                   	ret    

c000de48 <loadACPITables(unsigned char*)>:
c000de48:	57                   	push   edi
c000de49:	56                   	push   esi
c000de4a:	53                   	push   ebx
c000de4b:	83 ec 60             	sub    esp,0x60
c000de4e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000de53:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de59:	83 e0 04             	and    eax,0x4
c000de5c:	84 c0                	test   al,al
c000de5e:	0f 84 3c 02 00 00    	je     c000e0a0 <loadACPITables(unsigned char*)+0x258>
c000de64:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000de69:	84 c0                	test   al,al
c000de6b:	74 77                	je     c000dee4 <loadACPITables(unsigned char*)+0x9c>
c000de6d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de71:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de7c:	83 e8 24             	sub    eax,0x24
c000de7f:	c1 e8 03             	shr    eax,0x3
c000de82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de86:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de8e:	66 90                	xchg   ax,ax
c000de90:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de94:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de98:	0f 8d b6 00 00 00    	jge    c000df54 <loadACPITables(unsigned char*)+0x10c>
c000de9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dea2:	83 c0 24             	add    eax,0x24
c000dea5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dea9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dead:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000deb1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000deb5:	c1 e0 03             	shl    eax,0x3
c000deb8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000debc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dec0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dec3:	8b 00                	mov    eax,DWORD PTR [eax]
c000dec5:	89 c1                	mov    ecx,eax
c000dec7:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000decc:	8d 50 01             	lea    edx,[eax+0x1]
c000decf:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000ded5:	89 ca                	mov    edx,ecx
c000ded7:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dede:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dee2:	eb ac                	jmp    c000de90 <loadACPITables(unsigned char*)+0x48>
c000dee4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dee8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000deec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000def0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000def3:	83 e8 24             	sub    eax,0x24
c000def6:	c1 e8 02             	shr    eax,0x2
c000def9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000defd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df05:	8d 76 00             	lea    esi,[esi+0x0]
c000df08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df0c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df10:	7d 42                	jge    c000df54 <loadACPITables(unsigned char*)+0x10c>
c000df12:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df16:	83 c0 24             	add    eax,0x24
c000df19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df21:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df25:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df29:	c1 e0 02             	shl    eax,0x2
c000df2c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df34:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df36:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df3b:	8d 50 01             	lea    edx,[eax+0x1]
c000df3e:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000df44:	89 ca                	mov    edx,ecx
c000df46:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000df4d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df51:	eb b5                	jmp    c000df08 <loadACPITables(unsigned char*)+0xc0>
c000df53:	90                   	nop
c000df54:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df5c:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df61:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000df65:	0f 8d 39 01 00 00    	jge    c000e0a4 <loadACPITables(unsigned char*)+0x25c>
c000df6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df6f:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000df76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df86:	25 ff 0f 00 00       	and    eax,0xfff
c000df8b:	89 c6                	mov    esi,eax
c000df8d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	6a 01                	push   0x1
c000df98:	e8 e8 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfa4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	6a 01                	push   0x1
c000dfaf:	6a 01                	push   0x1
c000dfb1:	50                   	push   eax
c000dfb2:	52                   	push   edx
c000dfb3:	53                   	push   ebx
c000dfb4:	e8 39 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfb9:	83 c4 20             	add    esp,0x20
c000dfbc:	09 f0                	or     eax,esi
c000dfbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfc2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfc6:	c1 e0 03             	shl    eax,0x3
c000dfc9:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfda:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dfe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfe6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dff2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dff6:	89 c6                	mov    esi,eax
c000dff8:	89 d7                	mov    edi,edx
c000dffa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dffc:	89 c8                	mov    eax,ecx
c000dffe:	89 fa                	mov    edx,edi
c000e000:	89 f3                	mov    ebx,esi
c000e002:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e00a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e00e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e015:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e01d:	05 00 10 00 00       	add    eax,0x1000
c000e022:	c1 e8 0c             	shr    eax,0xc
c000e025:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e02d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e035:	25 ff 0f 00 00       	and    eax,0xfff
c000e03a:	89 c6                	mov    esi,eax
c000e03c:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e042:	83 ec 0c             	sub    esp,0xc
c000e045:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e049:	e8 37 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e04e:	83 c4 10             	add    esp,0x10
c000e051:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e055:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e05b:	83 ec 0c             	sub    esp,0xc
c000e05e:	6a 01                	push   0x1
c000e060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e064:	50                   	push   eax
c000e065:	52                   	push   edx
c000e066:	53                   	push   ebx
c000e067:	e8 86 bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e06c:	83 c4 20             	add    esp,0x20
c000e06f:	09 f0                	or     eax,esi
c000e071:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e079:	83 ec 0c             	sub    esp,0xc
c000e07c:	50                   	push   eax
c000e07d:	e8 f7 b4 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e082:	83 c4 10             	add    esp,0x10
c000e085:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e089:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e08d:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e094:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e098:	e9 bf fe ff ff       	jmp    c000df5c <loadACPITables(unsigned char*)+0x114>
c000e09d:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a0:	90                   	nop
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a4:	83 c4 60             	add    esp,0x60
c000e0a7:	5b                   	pop    ebx
c000e0a8:	5e                   	pop    esi
c000e0a9:	5f                   	pop    edi
c000e0aa:	c3                   	ret    
c000e0ab:	90                   	nop

c000e0ac <findRSDT(unsigned char*)>:
c000e0ac:	57                   	push   edi
c000e0ad:	56                   	push   esi
c000e0ae:	53                   	push   ebx
c000e0af:	83 ec 50             	sub    esp,0x50
c000e0b2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e0b7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0bd:	83 e0 04             	and    eax,0x4
c000e0c0:	84 c0                	test   al,al
c000e0c2:	75 0c                	jne    c000e0d0 <findRSDT(unsigned char*)+0x24>
c000e0c4:	b8 00 00 00 00       	mov    eax,0x0
c000e0c9:	e9 26 01 00 00       	jmp    c000e1f4 <findRSDT(unsigned char*)+0x148>
c000e0ce:	66 90                	xchg   ax,ax
c000e0d0:	89 e0                	mov    eax,esp
c000e0d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0d6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e0da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0de:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e0e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e0f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e0fa:	89 c6                	mov    esi,eax
c000e0fc:	89 d7                	mov    edi,edx
c000e0fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e100:	89 c8                	mov    eax,ecx
c000e102:	89 fa                	mov    edx,edi
c000e104:	89 f3                	mov    ebx,esi
c000e106:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e10a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e10e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e112:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e116:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e11a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e126:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e12a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e132:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e136:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e13a:	25 ff 0f 00 00       	and    eax,0xfff
c000e13f:	89 c6                	mov    esi,eax
c000e141:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e147:	83 ec 0c             	sub    esp,0xc
c000e14a:	6a 02                	push   0x2
c000e14c:	e8 34 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e151:	83 c4 10             	add    esp,0x10
c000e154:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e158:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e15e:	83 ec 0c             	sub    esp,0xc
c000e161:	6a 01                	push   0x1
c000e163:	6a 02                	push   0x2
c000e165:	50                   	push   eax
c000e166:	52                   	push   edx
c000e167:	53                   	push   ebx
c000e168:	e8 85 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e16d:	83 c4 20             	add    esp,0x20
c000e170:	09 f0                	or     eax,esi
c000e172:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e176:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e17a:	25 ff 0f 00 00       	and    eax,0xfff
c000e17f:	89 c6                	mov    esi,eax
c000e181:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e187:	83 ec 0c             	sub    esp,0xc
c000e18a:	6a 02                	push   0x2
c000e18c:	e8 f4 b0 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e191:	83 c4 10             	add    esp,0x10
c000e194:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e198:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	6a 01                	push   0x1
c000e1a3:	6a 02                	push   0x2
c000e1a5:	50                   	push   eax
c000e1a6:	52                   	push   edx
c000e1a7:	53                   	push   ebx
c000e1a8:	e8 45 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1ad:	83 c4 20             	add    esp,0x20
c000e1b0:	09 f0                	or     eax,esi
c000e1b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1b6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1bb:	75 13                	jne    c000e1d0 <findRSDT(unsigned char*)+0x124>
c000e1bd:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e1c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1cc:	eb 22                	jmp    c000e1f0 <findRSDT(unsigned char*)+0x144>
c000e1ce:	66 90                	xchg   ax,ax
c000e1d0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e1d5:	75 11                	jne    c000e1e8 <findRSDT(unsigned char*)+0x13c>
c000e1d7:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e1de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1e6:	eb 08                	jmp    c000e1f0 <findRSDT(unsigned char*)+0x144>
c000e1e8:	b8 00 00 00 00       	mov    eax,0x0
c000e1ed:	eb 05                	jmp    c000e1f4 <findRSDT(unsigned char*)+0x148>
c000e1ef:	90                   	nop
c000e1f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e1f4:	83 c4 50             	add    esp,0x50
c000e1f7:	5b                   	pop    ebx
c000e1f8:	5e                   	pop    esi
c000e1f9:	5f                   	pop    edi
c000e1fa:	c3                   	ret    
c000e1fb:	90                   	nop

c000e1fc <findDataTable(unsigned char*, char*)>:
c000e1fc:	83 ec 1c             	sub    esp,0x1c
c000e1ff:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e204:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e20a:	83 e0 04             	and    eax,0x4
c000e20d:	84 c0                	test   al,al
c000e20f:	75 07                	jne    c000e218 <findDataTable(unsigned char*, char*)+0x1c>
c000e211:	b8 00 00 00 00       	mov    eax,0x0
c000e216:	eb 58                	jmp    c000e270 <findDataTable(unsigned char*, char*)+0x74>
c000e218:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e220:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e225:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e229:	7d 3d                	jge    c000e268 <findDataTable(unsigned char*, char*)+0x6c>
c000e22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22f:	c1 e0 03             	shl    eax,0x3
c000e232:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e237:	83 ec 04             	sub    esp,0x4
c000e23a:	6a 04                	push   0x4
c000e23c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e240:	50                   	push   eax
c000e241:	e8 4a 21 ff ff       	call   c0000390 <memcmp>
c000e246:	83 c4 10             	add    esp,0x10
c000e249:	85 c0                	test   eax,eax
c000e24b:	0f 94 c0             	sete   al
c000e24e:	84 c0                	test   al,al
c000e250:	74 0e                	je     c000e260 <findDataTable(unsigned char*, char*)+0x64>
c000e252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e256:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e25d:	eb 11                	jmp    c000e270 <findDataTable(unsigned char*, char*)+0x74>
c000e25f:	90                   	nop
c000e260:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e264:	eb ba                	jmp    c000e220 <findDataTable(unsigned char*, char*)+0x24>
c000e266:	66 90                	xchg   ax,ax
c000e268:	b8 00 00 00 00       	mov    eax,0x0
c000e26d:	8d 76 00             	lea    esi,[esi+0x0]
c000e270:	83 c4 1c             	add    esp,0x1c
c000e273:	c3                   	ret    

c000e274 <scanMADT()>:
c000e274:	53                   	push   ebx
c000e275:	83 ec 38             	sub    esp,0x38
c000e278:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e27d:	25 00 04 00 00       	and    eax,0x400
c000e282:	74 14                	je     c000e298 <scanMADT()+0x24>
c000e284:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e289:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e28f:	83 e2 fb             	and    edx,0xfffffffb
c000e292:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e298:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e29d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2a3:	83 e0 04             	and    eax,0x4
c000e2a6:	84 c0                	test   al,al
c000e2a8:	0f 84 8a 04 00 00    	je     c000e738 <scanMADT()+0x4c4>
c000e2ae:	e8 05 fb ff ff       	call   c000ddb8 <findRSDP()>
c000e2b3:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e2b8:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2bd:	85 c0                	test   eax,eax
c000e2bf:	75 1b                	jne    c000e2dc <scanMADT()+0x68>
c000e2c1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2c6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2cc:	83 e2 fb             	and    edx,0xfffffffb
c000e2cf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2d5:	e9 66 04 00 00       	jmp    c000e740 <scanMADT()+0x4cc>
c000e2da:	66 90                	xchg   ax,ax
c000e2dc:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2e1:	83 ec 0c             	sub    esp,0xc
c000e2e4:	50                   	push   eax
c000e2e5:	e8 c2 fd ff ff       	call   c000e0ac <findRSDT(unsigned char*)>
c000e2ea:	83 c4 10             	add    esp,0x10
c000e2ed:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e2f2:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e2f7:	85 c0                	test   eax,eax
c000e2f9:	75 19                	jne    c000e314 <scanMADT()+0xa0>
c000e2fb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e300:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e306:	83 e2 fb             	and    edx,0xfffffffb
c000e309:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e30f:	e9 2c 04 00 00       	jmp    c000e740 <scanMADT()+0x4cc>
c000e314:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e319:	83 ec 0c             	sub    esp,0xc
c000e31c:	50                   	push   eax
c000e31d:	e8 26 fb ff ff       	call   c000de48 <loadACPITables(unsigned char*)>
c000e322:	83 c4 10             	add    esp,0x10
c000e325:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e32a:	83 ec 08             	sub    esp,0x8
c000e32d:	68 58 e4 01 c0       	push   0xc001e458
c000e332:	50                   	push   eax
c000e333:	e8 c4 fe ff ff       	call   c000e1fc <findDataTable(unsigned char*, char*)>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e344:	75 1a                	jne    c000e360 <scanMADT()+0xec>
c000e346:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e34b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e351:	83 e2 fe             	and    edx,0xfffffffe
c000e354:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e35a:	e9 e1 03 00 00       	jmp    c000e740 <scanMADT()+0x4cc>
c000e35f:	90                   	nop
c000e360:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e368:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e36c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e36f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e373:	0f 87 c7 03 00 00    	ja     c000e740 <scanMADT()+0x4cc>
c000e379:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e381:	0f 87 b9 03 00 00    	ja     c000e740 <scanMADT()+0x4cc>
c000e387:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e38b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e38f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e393:	8d 50 01             	lea    edx,[eax+0x1]
c000e396:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e39a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e39e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3a2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e3a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3aa:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3b9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3bd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e3c2:	0f 86 74 03 00 00    	jbe    c000e73c <scanMADT()+0x4c8>
c000e3c8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e3cd:	75 5d                	jne    c000e42c <scanMADT()+0x1b8>
c000e3cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e3d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3da:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e3e0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3ea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3ee:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e3f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e3f8:	8d 42 01             	lea    eax,[edx+0x1]
c000e3fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3ff:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e404:	8d 48 01             	lea    ecx,[eax+0x1]
c000e407:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e40d:	25 ff 00 00 00       	and    eax,0xff
c000e412:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e416:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e41a:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e420:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e425:	e9 f6 02 00 00       	jmp    c000e720 <scanMADT()+0x4ac>
c000e42a:	66 90                	xchg   ax,ax
c000e42c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e431:	0f 85 29 01 00 00    	jne    c000e560 <scanMADT()+0x2ec>
c000e437:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43b:	8d 50 01             	lea    edx,[eax+0x1]
c000e43e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e442:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e448:	81 e2 ff 00 00 00    	and    edx,0xff
c000e44e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e452:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e456:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e45c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e460:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e468:	01 d0                	add    eax,edx
c000e46a:	83 c0 2c             	add    eax,0x2c
c000e46d:	8a 00                	mov    al,BYTE PTR [eax]
c000e46f:	31 d2                	xor    edx,edx
c000e471:	88 c2                	mov    dl,al
c000e473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e477:	8d 48 01             	lea    ecx,[eax+0x1]
c000e47a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e47e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e482:	25 ff 00 00 00       	and    eax,0xff
c000e487:	c1 e0 08             	shl    eax,0x8
c000e48a:	89 d1                	mov    ecx,edx
c000e48c:	09 c1                	or     ecx,eax
c000e48e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e492:	8d 50 02             	lea    edx,[eax+0x2]
c000e495:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e499:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e49d:	25 ff 00 00 00       	and    eax,0xff
c000e4a2:	c1 e0 10             	shl    eax,0x10
c000e4a5:	09 c1                	or     ecx,eax
c000e4a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ab:	8d 50 03             	lea    edx,[eax+0x3]
c000e4ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4b6:	25 ff 00 00 00       	and    eax,0xff
c000e4bb:	c1 e0 18             	shl    eax,0x18
c000e4be:	09 c1                	or     ecx,eax
c000e4c0:	89 ca                	mov    edx,ecx
c000e4c2:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4c7:	25 ff 00 00 00       	and    eax,0xff
c000e4cc:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e4d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e0:	01 d0                	add    eax,edx
c000e4e2:	83 c0 2c             	add    eax,0x2c
c000e4e5:	8a 00                	mov    al,BYTE PTR [eax]
c000e4e7:	31 d2                	xor    edx,edx
c000e4e9:	88 c2                	mov    dl,al
c000e4eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ef:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4fa:	25 ff 00 00 00       	and    eax,0xff
c000e4ff:	c1 e0 08             	shl    eax,0x8
c000e502:	89 d1                	mov    ecx,edx
c000e504:	09 c1                	or     ecx,eax
c000e506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50a:	8d 50 02             	lea    edx,[eax+0x2]
c000e50d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e511:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e515:	25 ff 00 00 00       	and    eax,0xff
c000e51a:	c1 e0 10             	shl    eax,0x10
c000e51d:	09 c1                	or     ecx,eax
c000e51f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e523:	8d 50 03             	lea    edx,[eax+0x3]
c000e526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e52a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e52e:	25 ff 00 00 00       	and    eax,0xff
c000e533:	c1 e0 18             	shl    eax,0x18
c000e536:	09 c1                	or     ecx,eax
c000e538:	89 ca                	mov    edx,ecx
c000e53a:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e53f:	25 ff 00 00 00       	and    eax,0xff
c000e544:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e54b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e550:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e555:	40                   	inc    eax
c000e556:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e55b:	e9 c0 01 00 00       	jmp    c000e720 <scanMADT()+0x4ac>
c000e560:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e565:	0f 85 fd 00 00 00    	jne    c000e668 <scanMADT()+0x3f4>
c000e56b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e56f:	8d 50 01             	lea    edx,[eax+0x1]
c000e572:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e576:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e57a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e57e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e586:	8d 50 01             	lea    edx,[eax+0x1]
c000e589:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e58d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e591:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e595:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e59d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a1:	01 d0                	add    eax,edx
c000e5a3:	83 c0 2c             	add    eax,0x2c
c000e5a6:	8a 00                	mov    al,BYTE PTR [eax]
c000e5a8:	31 d2                	xor    edx,edx
c000e5aa:	88 c2                	mov    dl,al
c000e5ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5bb:	25 ff 00 00 00       	and    eax,0xff
c000e5c0:	c1 e0 08             	shl    eax,0x8
c000e5c3:	89 d1                	mov    ecx,edx
c000e5c5:	09 c1                	or     ecx,eax
c000e5c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5cb:	8d 50 02             	lea    edx,[eax+0x2]
c000e5ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5d6:	25 ff 00 00 00       	and    eax,0xff
c000e5db:	c1 e0 10             	shl    eax,0x10
c000e5de:	09 c1                	or     ecx,eax
c000e5e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5e4:	8d 50 03             	lea    edx,[eax+0x3]
c000e5e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ef:	25 ff 00 00 00       	and    eax,0xff
c000e5f4:	c1 e0 18             	shl    eax,0x18
c000e5f7:	09 c8                	or     eax,ecx
c000e5f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5fd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e602:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60a:	01 d0                	add    eax,edx
c000e60c:	83 c0 2c             	add    eax,0x2c
c000e60f:	8a 00                	mov    al,BYTE PTR [eax]
c000e611:	25 ff 00 00 00       	and    eax,0xff
c000e616:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e61a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e61d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e621:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e625:	81 e2 ff 00 00 00    	and    edx,0xff
c000e62b:	c1 e2 08             	shl    edx,0x8
c000e62e:	09 d0                	or     eax,edx
c000e630:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e635:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e63a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e63e:	25 ff 00 00 00       	and    eax,0xff
c000e643:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e647:	88 90 e0 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0720],dl
c000e64d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e651:	31 d2                	xor    edx,edx
c000e653:	88 c2                	mov    dl,al
c000e655:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e65a:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e662:	e9 b9 00 00 00       	jmp    c000e720 <scanMADT()+0x4ac>
c000e667:	90                   	nop
c000e668:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e66d:	0f 85 a1 00 00 00    	jne    c000e714 <scanMADT()+0x4a0>
c000e673:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e677:	8d 50 01             	lea    edx,[eax+0x1]
c000e67a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e67e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e682:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e686:	25 ff 00 00 00       	and    eax,0xff
c000e68b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e68f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e693:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e697:	01 d0                	add    eax,edx
c000e699:	83 c0 2c             	add    eax,0x2c
c000e69c:	8a 00                	mov    al,BYTE PTR [eax]
c000e69e:	31 d2                	xor    edx,edx
c000e6a0:	88 c2                	mov    dl,al
c000e6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6a6:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6b1:	25 ff 00 00 00       	and    eax,0xff
c000e6b6:	c1 e0 08             	shl    eax,0x8
c000e6b9:	09 d0                	or     eax,edx
c000e6bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6bf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6c8:	8d 50 01             	lea    edx,[eax+0x1]
c000e6cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6d7:	25 ff 00 00 00       	and    eax,0xff
c000e6dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e4:	c1 e0 08             	shl    eax,0x8
c000e6e7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e6eb:	89 c1                	mov    ecx,eax
c000e6ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6f1:	c1 e0 18             	shl    eax,0x18
c000e6f4:	89 c3                	mov    ebx,eax
c000e6f6:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e6fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e6fe:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e704:	09 d9                	or     ecx,ebx
c000e706:	89 ca                	mov    edx,ecx
c000e708:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e70f:	eb 0f                	jmp    c000e720 <scanMADT()+0x4ac>
c000e711:	8d 76 00             	lea    esi,[esi+0x0]
c000e714:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e719:	75 05                	jne    c000e720 <scanMADT()+0x4ac>
c000e71b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e720:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e724:	31 d2                	xor    edx,edx
c000e726:	88 c2                	mov    dl,al
c000e728:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e72c:	01 d0                	add    eax,edx
c000e72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e732:	e9 31 fc ff ff       	jmp    c000e368 <scanMADT()+0xf4>
c000e737:	90                   	nop
c000e738:	90                   	nop
c000e739:	eb 05                	jmp    c000e740 <scanMADT()+0x4cc>
c000e73b:	90                   	nop
c000e73c:	90                   	nop
c000e73d:	8d 76 00             	lea    esi,[esi+0x0]
c000e740:	83 c4 38             	add    esp,0x38
c000e743:	5b                   	pop    ebx
c000e744:	c3                   	ret    
c000e745:	90                   	nop
c000e746:	66 90                	xchg   ax,ax

c000e748 <ACPI::ACPI()>:
c000e748:	83 ec 0c             	sub    esp,0xc
c000e74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74f:	83 ec 08             	sub    esp,0x8
c000e752:	68 5d e4 01 c0       	push   0xc001e45d
c000e757:	50                   	push   eax
c000e758:	e8 7b d4 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000e75d:	83 c4 10             	add    esp,0x10
c000e760:	ba 94 e5 01 c0       	mov    edx,0xc001e594
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	89 10                	mov    DWORD PTR [eax],edx
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e788:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e792:	e8 dd fa ff ff       	call   c000e274 <scanMADT()>
c000e797:	90                   	nop
c000e798:	83 c4 0c             	add    esp,0xc
c000e79b:	c3                   	ret    

c000e79c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e79c:	83 ec 2c             	sub    esp,0x2c
c000e79f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7ab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e7af:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7b4:	88 d0                	mov    al,dl
c000e7b6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7c7:	90                   	nop
c000e7c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7cc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e7d6:	0f 8d 9c 00 00 00    	jge    c000e878 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e7dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7e4:	83 c2 2a             	add    edx,0x2a
c000e7e7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e7eb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e7f0:	75 7a                	jne    c000e86c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e7f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7fa:	83 c2 2a             	add    edx,0x2a
c000e7fd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e801:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e805:	75 65                	jne    c000e86c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e807:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e80c:	74 3a                	je     c000e848 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e80e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e812:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e816:	83 c2 2a             	add    edx,0x2a
c000e819:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e81d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e821:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e824:	39 c2                	cmp    edx,eax
c000e826:	74 10                	je     c000e838 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	68 d8 e3 01 c0       	push   0xc001e3d8
c000e830:	e8 4e 1a 00 00       	call   c0010283 <KePanic(char const*)>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	83 ec 0c             	sub    esp,0xc
c000e83b:	68 62 e4 01 c0       	push   0xc001e462
c000e840:	e8 3e 1a 00 00       	call   c0010283 <KePanic(char const*)>
c000e845:	83 c4 10             	add    esp,0x10
c000e848:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e84c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e850:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e854:	83 c2 2a             	add    edx,0x2a
c000e857:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e85b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e85d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e860:	89 01                	mov    DWORD PTR [ecx],eax
c000e862:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e865:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e86a:	66 90                	xchg   ax,ax
c000e86c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e870:	e9 53 ff ff ff       	jmp    c000e7c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e875:	8d 76 00             	lea    esi,[esi+0x0]
c000e878:	90                   	nop
c000e879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e87d:	83 c4 2c             	add    esp,0x2c
c000e880:	c2 04 00             	ret    0x4
c000e883:	90                   	nop

c000e884 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e884:	83 ec 1c             	sub    esp,0x1c
c000e887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e88b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e88f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e893:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e898:	88 c8                	mov    al,cl
c000e89a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e89e:	88 d0                	mov    al,dl
c000e8a0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8b2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8b5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8b9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8cb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e8ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8d2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e8e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ec:	83 c2 2a             	add    edx,0x2a
c000e8ef:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e901:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e904:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e908:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e910:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e916:	8d 50 01             	lea    edx,[eax+0x1]
c000e919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e927:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e92d:	3d 00 02 00 00       	cmp    eax,0x200
c000e932:	75 10                	jne    c000e944 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e934:	83 ec 0c             	sub    esp,0xc
c000e937:	68 71 e4 01 c0       	push   0xc001e471
c000e93c:	e8 42 19 00 00       	call   c0010283 <KePanic(char const*)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	90                   	nop
c000e945:	83 c4 1c             	add    esp,0x1c
c000e948:	c3                   	ret    
c000e949:	90                   	nop
c000e94a:	66 90                	xchg   ax,ax

c000e94c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e94c:	b8 00 00 00 00       	mov    eax,0x0
c000e951:	c3                   	ret    
c000e952:	66 90                	xchg   ax,ax

c000e954 <ACPI::detectPCI()>:
c000e954:	53                   	push   ebx
c000e955:	83 ec 28             	sub    esp,0x28
c000e958:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e95d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e962:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e967:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e96d:	83 e0 04             	and    eax,0x4
c000e970:	84 c0                	test   al,al
c000e972:	74 2c                	je     c000e9a0 <ACPI::detectPCI()+0x4c>
c000e974:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e979:	83 ec 08             	sub    esp,0x8
c000e97c:	68 8e e4 01 c0       	push   0xc001e48e
c000e981:	50                   	push   eax
c000e982:	e8 75 f8 ff ff       	call   c000e1fc <findDataTable(unsigned char*, char*)>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e98e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e993:	74 0b                	je     c000e9a0 <ACPI::detectPCI()+0x4c>
c000e995:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e99a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e99f:	90                   	nop
c000e9a0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e9a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9ac:	8a 00                	mov    al,BYTE PTR [eax]
c000e9ae:	3c 01                	cmp    al,0x1
c000e9b0:	75 0e                	jne    c000e9c0 <ACPI::detectPCI()+0x6c>
c000e9b2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9b7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9bc:	eb 2a                	jmp    c000e9e8 <ACPI::detectPCI()+0x94>
c000e9be:	66 90                	xchg   ax,ax
c000e9c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c4:	8a 00                	mov    al,BYTE PTR [eax]
c000e9c6:	3c 02                	cmp    al,0x2
c000e9c8:	75 1e                	jne    c000e9e8 <ACPI::detectPCI()+0x94>
c000e9ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9cf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9d4:	74 12                	je     c000e9e8 <ACPI::detectPCI()+0x94>
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	68 08 e4 01 c0       	push   0xc001e408
c000e9de:	e8 a0 18 00 00       	call   c0010283 <KePanic(char const*)>
c000e9e3:	83 c4 10             	add    esp,0x10
c000e9e6:	66 90                	xchg   ax,ax
c000e9e8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e9ec:	83 f0 01             	xor    eax,0x1
c000e9ef:	84 c0                	test   al,al
c000e9f1:	74 41                	je     c000ea34 <ACPI::detectPCI()+0xe0>
c000e9f3:	e8 38 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e9f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9fc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea01:	75 0d                	jne    c000ea10 <ACPI::detectPCI()+0xbc>
c000ea03:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea08:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea0d:	eb 25                	jmp    c000ea34 <ACPI::detectPCI()+0xe0>
c000ea0f:	90                   	nop
c000ea10:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea15:	75 1d                	jne    c000ea34 <ACPI::detectPCI()+0xe0>
c000ea17:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea1c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea21:	74 11                	je     c000ea34 <ACPI::detectPCI()+0xe0>
c000ea23:	83 ec 0c             	sub    esp,0xc
c000ea26:	68 08 e4 01 c0       	push   0xc001e408
c000ea2b:	e8 53 18 00 00       	call   c0010283 <KePanic(char const*)>
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	90                   	nop
c000ea34:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea39:	0f 84 85 00 00 00    	je     c000eac4 <ACPI::detectPCI()+0x170>
c000ea3f:	83 ec 0c             	sub    esp,0xc
c000ea42:	68 93 e4 01 c0       	push   0xc001e493
c000ea47:	e8 bf 11 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea57:	83 ec 0c             	sub    esp,0xc
c000ea5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea5e:	e8 56 8d ff ff       	call   c00077b9 <malloc>
c000ea63:	83 c4 10             	add    esp,0x10
c000ea66:	89 c3                	mov    ebx,eax
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	53                   	push   ebx
c000ea6c:	e8 ad 9a 00 00       	call   c001851e <PCI::PCI()>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ea78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7c:	83 ec 08             	sub    esp,0x8
c000ea7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea83:	50                   	push   eax
c000ea84:	e8 b7 cf ff ff       	call   c000ba40 <Device::addChild(Device*)>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea92:	83 c0 08             	add    eax,0x8
c000ea95:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea97:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea9c:	74 0a                	je     c000eaa8 <ACPI::detectPCI()+0x154>
c000ea9e:	ba 01 00 00 00       	mov    edx,0x1
c000eaa3:	eb 0b                	jmp    c000eab0 <ACPI::detectPCI()+0x15c>
c000eaa5:	8d 76 00             	lea    esi,[esi+0x0]
c000eaa8:	ba 02 00 00 00       	mov    edx,0x2
c000eaad:	8d 76 00             	lea    esi,[esi+0x0]
c000eab0:	6a 00                	push   0x0
c000eab2:	6a 00                	push   0x0
c000eab4:	52                   	push   edx
c000eab5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eab9:	ff d0                	call   eax
c000eabb:	83 c4 10             	add    esp,0x10
c000eabe:	e9 91 00 00 00       	jmp    c000eb54 <ACPI::detectPCI()+0x200>
c000eac3:	90                   	nop
c000eac4:	83 ec 0c             	sub    esp,0xc
c000eac7:	68 ab e4 01 c0       	push   0xc001e4ab
c000eacc:	e8 3a 11 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eadb:	83 ec 0c             	sub    esp,0xc
c000eade:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eae2:	e8 d2 8c ff ff       	call   c00077b9 <malloc>
c000eae7:	83 c4 10             	add    esp,0x10
c000eaea:	89 c3                	mov    ebx,eax
c000eaec:	83 ec 0c             	sub    esp,0xc
c000eaef:	53                   	push   ebx
c000eaf0:	e8 55 a5 00 00       	call   c001904a <IDE::IDE()>
c000eaf5:	83 c4 10             	add    esp,0x10
c000eaf8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eafc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb00:	83 ec 08             	sub    esp,0x8
c000eb03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb07:	50                   	push   eax
c000eb08:	e8 33 cf ff ff       	call   c000ba40 <Device::addChild(Device*)>
c000eb0d:	83 c4 10             	add    esp,0x10
c000eb10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb14:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb22:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb2f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb3e:	83 c0 08             	add    eax,0x8
c000eb41:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb43:	6a 00                	push   0x0
c000eb45:	6a 00                	push   0x0
c000eb47:	6a 00                	push   0x0
c000eb49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb4d:	ff d0                	call   eax
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	66 90                	xchg   ax,ax
c000eb54:	90                   	nop
c000eb55:	83 c4 28             	add    esp,0x28
c000eb58:	5b                   	pop    ebx
c000eb59:	c3                   	ret    
c000eb5a:	66 90                	xchg   ax,ax

c000eb5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb5c:	83 ec 1c             	sub    esp,0x1c
c000eb5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eb63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eb66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb6a:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb74:	25 ff 00 00 00       	and    eax,0xff
c000eb79:	83 ec 08             	sub    esp,0x8
c000eb7c:	50                   	push   eax
c000eb7d:	52                   	push   edx
c000eb7e:	e8 23 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb8a:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb94:	25 ff 00 00 00       	and    eax,0xff
c000eb99:	83 ec 04             	sub    esp,0x4
c000eb9c:	6a 01                	push   0x1
c000eb9e:	50                   	push   eax
c000eb9f:	52                   	push   edx
c000eba0:	e8 17 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eba5:	83 c4 10             	add    esp,0x10
c000eba8:	90                   	nop
c000eba9:	83 c4 1c             	add    esp,0x1c
c000ebac:	c3                   	ret    
c000ebad:	90                   	nop
c000ebae:	66 90                	xchg   ax,ax

c000ebb0 <ACPI::sleep()>:
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebb8:	85 c0                	test   eax,eax
c000ebba:	74 08                	je     c000ebc4 <ACPI::sleep()+0x14>
c000ebbc:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebc1:	ff d0                	call   eax
c000ebc3:	90                   	nop
c000ebc4:	90                   	nop
c000ebc5:	83 c4 0c             	add    esp,0xc
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop
c000ebca:	66 90                	xchg   ax,ax

c000ebcc <ACPI::open(int, int, void*)>:
c000ebcc:	57                   	push   edi
c000ebcd:	56                   	push   esi
c000ebce:	53                   	push   ebx
c000ebcf:	81 ec 70 01 00 00    	sub    esp,0x170
c000ebd5:	83 ec 0c             	sub    esp,0xc
c000ebd8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ebdf:	e8 70 fd ff ff       	call   c000e954 <ACPI::detectPCI()>
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	83 ec 0c             	sub    esp,0xc
c000ebea:	68 30 e4 01 c0       	push   0xc001e430
c000ebef:	e8 17 10 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	83 ec 0c             	sub    esp,0xc
c000ebfa:	68 c0 e4 01 c0       	push   0xc001e4c0
c000ebff:	e8 d2 37 00 00       	call   c00123d6 <Thr::loadKernelSymbolTable(char const*)>
c000ec04:	83 c4 10             	add    esp,0x10
c000ec07:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec0f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec1a:	83 ec 0c             	sub    esp,0xc
c000ec1d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec24:	e8 90 8b ff ff       	call   c00077b9 <malloc>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	89 c3                	mov    ebx,eax
c000ec2e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ec33:	83 ec 04             	sub    esp,0x4
c000ec36:	50                   	push   eax
c000ec37:	68 de e4 01 c0       	push   0xc001e4de
c000ec3c:	53                   	push   ebx
c000ec3d:	e8 36 bf ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000ec42:	83 c4 10             	add    esp,0x10
c000ec45:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec4c:	83 ec 08             	sub    esp,0x8
c000ec4f:	6a 01                	push   0x1
c000ec51:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec58:	e8 db bf ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c000ec5d:	83 c4 10             	add    esp,0x10
c000ec60:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ec67:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ec6f:	75 17                	jne    c000ec88 <ACPI::open(int, int, void*)+0xbc>
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec7b:	e8 16 c0 ff ff       	call   c000ac96 <File::close()>
c000ec80:	83 c4 10             	add    esp,0x10
c000ec83:	eb 0b                	jmp    c000ec90 <ACPI::open(int, int, void*)+0xc4>
c000ec85:	8d 76 00             	lea    esi,[esi+0x0]
c000ec88:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec90:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec98:	74 1e                	je     c000ecb8 <ACPI::open(int, int, void*)+0xec>
c000ec9a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eca1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eca3:	83 c0 08             	add    eax,0x8
c000eca6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecb2:	ff d0                	call   eax
c000ecb4:	83 c4 10             	add    esp,0x10
c000ecb7:	90                   	nop
c000ecb8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ecbf:	83 f0 01             	xor    eax,0x1
c000ecc2:	84 c0                	test   al,al
c000ecc4:	74 42                	je     c000ed08 <ACPI::open(int, int, void*)+0x13c>
c000ecc6:	83 ec 0c             	sub    esp,0xc
c000ecc9:	68 fc e4 01 c0       	push   0xc001e4fc
c000ecce:	e8 38 0f 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000ecd3:	83 c4 10             	add    esp,0x10
c000ecd6:	83 ec 04             	sub    esp,0x4
c000ecd9:	6a 0c                	push   0xc
c000ecdb:	68 17 e5 01 c0       	push   0xc001e517
c000ece0:	68 28 e5 01 c0       	push   0xc001e528
c000ece5:	e8 dc 2c 00 00       	call   c00119c6 <Reg::readIntWithDefault(char*, char*, int)>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ecf4:	83 ec 0c             	sub    esp,0xc
c000ecf7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ecfe:	e8 8c a7 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	83 ec 0c             	sub    esp,0xc
c000ed0b:	68 57 d5 01 c0       	push   0xc001d557
c000ed10:	e8 f6 0e 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000ed15:	83 c4 10             	add    esp,0x10
c000ed18:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed1f:	83 ec 08             	sub    esp,0x8
c000ed22:	6a 12                	push   0x12
c000ed24:	50                   	push   eax
c000ed25:	e8 2e d0 ff ff       	call   c000bd58 <getDevicesOfType(DeviceType)>
c000ed2a:	83 c4 0c             	add    esp,0xc
c000ed2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed3a:	50                   	push   eax
c000ed3b:	e8 6c dc 00 00       	call   c001c9ac <LinkedList<Device>::isEmpty()>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	83 f0 01             	xor    eax,0x1
c000ed46:	84 c0                	test   al,al
c000ed48:	0f 84 46 01 00 00    	je     c000ee94 <ACPI::open(int, int, void*)+0x2c8>
c000ed4e:	83 ec 0c             	sub    esp,0xc
c000ed51:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed58:	50                   	push   eax
c000ed59:	e8 6a dc 00 00       	call   c001c9c8 <LinkedList<Device>::getFirstElement()>
c000ed5e:	83 c4 10             	add    esp,0x10
c000ed61:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ed68:	83 ec 0c             	sub    esp,0xc
c000ed6b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed72:	50                   	push   eax
c000ed73:	e8 58 dc 00 00       	call   c001c9d0 <LinkedList<Device>::removeFirst()>
c000ed78:	83 c4 10             	add    esp,0x10
c000ed7b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed82:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed89:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed94:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed9a:	ba 09 00 00 00       	mov    edx,0x9
c000ed9f:	fc                   	cld    
c000eda0:	89 c7                	mov    edi,eax
c000eda2:	89 de                	mov    esi,ebx
c000eda4:	89 d1                	mov    ecx,edx
c000eda6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eda8:	83 ec 08             	sub    esp,0x8
c000edab:	8d 44 24 38          	lea    eax,[esp+0x38]
c000edaf:	50                   	push   eax
c000edb0:	83 ec 24             	sub    esp,0x24
c000edb3:	89 e0                	mov    eax,esp
c000edb5:	89 c3                	mov    ebx,eax
c000edb7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000edbb:	ba 09 00 00 00       	mov    edx,0x9
c000edc0:	89 df                	mov    edi,ebx
c000edc2:	89 c6                	mov    esi,eax
c000edc4:	89 d1                	mov    ecx,edx
c000edc6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edc8:	e8 33 9c 00 00       	call   c0018a00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000edcd:	83 c4 30             	add    esp,0x30
c000edd0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000edd7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000eddf:	0f 84 4b ff ff ff    	je     c000ed30 <ACPI::open(int, int, void*)+0x164>
c000ede5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000edfa:	e8 ba 89 ff ff       	call   c00077b9 <malloc>
c000edff:	83 c4 10             	add    esp,0x10
c000ee02:	89 c3                	mov    ebx,eax
c000ee04:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee09:	83 ec 04             	sub    esp,0x4
c000ee0c:	50                   	push   eax
c000ee0d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee14:	53                   	push   ebx
c000ee15:	e8 5e bd ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000ee1a:	83 c4 10             	add    esp,0x10
c000ee1d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee24:	83 ec 0c             	sub    esp,0xc
c000ee27:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee2e:	e8 73 c0 ff ff       	call   c000aea6 <File::exists()>
c000ee33:	83 c4 10             	add    esp,0x10
c000ee36:	84 c0                	test   al,al
c000ee38:	74 2a                	je     c000ee64 <ACPI::open(int, int, void*)+0x298>
c000ee3a:	83 ec 08             	sub    esp,0x8
c000ee3d:	6a 01                	push   0x1
c000ee3f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee46:	e8 02 40 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	83 ec 08             	sub    esp,0x8
c000ee51:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee58:	50                   	push   eax
c000ee59:	e8 20 42 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000ee5e:	83 c4 10             	add    esp,0x10
c000ee61:	8d 76 00             	lea    esi,[esi+0x0]
c000ee64:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ee6c:	0f 84 be fe ff ff    	je     c000ed30 <ACPI::open(int, int, void*)+0x164>
c000ee72:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ee79:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee7b:	83 c0 08             	add    eax,0x8
c000ee7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee8a:	ff d0                	call   eax
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	e9 9c fe ff ff       	jmp    c000ed30 <ACPI::open(int, int, void*)+0x164>
c000ee94:	83 ec 0c             	sub    esp,0xc
c000ee97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee9e:	50                   	push   eax
c000ee9f:	e8 04 db 00 00       	call   c001c9a8 <LinkedList<Device>::~LinkedList()>
c000eea4:	83 c4 10             	add    esp,0x10
c000eea7:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000eead:	83 ec 08             	sub    esp,0x8
c000eeb0:	6a 01                	push   0x1
c000eeb2:	68 2f e5 01 c0       	push   0xc001e52f
c000eeb7:	e8 91 3f 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	83 ec 08             	sub    esp,0x8
c000eec2:	53                   	push   ebx
c000eec3:	50                   	push   eax
c000eec4:	e8 b5 41 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000eec9:	83 c4 10             	add    esp,0x10
c000eecc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000eed1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eed7:	83 e0 04             	and    eax,0x4
c000eeda:	84 c0                	test   al,al
c000eedc:	0f 84 16 01 00 00    	je     c000eff8 <ACPI::open(int, int, void*)+0x42c>
c000eee2:	83 ec 0c             	sub    esp,0xc
c000eee5:	68 4c e5 01 c0       	push   0xc001e54c
c000eeea:	e8 1c 0d 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000eeef:	83 c4 10             	add    esp,0x10
c000eef2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000eefd:	83 ec 0c             	sub    esp,0xc
c000ef00:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef07:	e8 ad 88 ff ff       	call   c00077b9 <malloc>
c000ef0c:	83 c4 10             	add    esp,0x10
c000ef0f:	89 c3                	mov    ebx,eax
c000ef11:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ef16:	83 ec 04             	sub    esp,0x4
c000ef19:	50                   	push   eax
c000ef1a:	68 69 e5 01 c0       	push   0xc001e569
c000ef1f:	53                   	push   ebx
c000ef20:	e8 53 bc ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000ef25:	83 c4 10             	add    esp,0x10
c000ef28:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef2f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef37:	74 1b                	je     c000ef54 <ACPI::open(int, int, void*)+0x388>
c000ef39:	83 ec 0c             	sub    esp,0xc
c000ef3c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef43:	e8 5e bf ff ff       	call   c000aea6 <File::exists()>
c000ef48:	83 c4 10             	add    esp,0x10
c000ef4b:	84 c0                	test   al,al
c000ef4d:	74 05                	je     c000ef54 <ACPI::open(int, int, void*)+0x388>
c000ef4f:	b0 01                	mov    al,0x1
c000ef51:	eb 05                	jmp    c000ef58 <ACPI::open(int, int, void*)+0x38c>
c000ef53:	90                   	nop
c000ef54:	b0 00                	mov    al,0x0
c000ef56:	66 90                	xchg   ax,ax
c000ef58:	84 c0                	test   al,al
c000ef5a:	74 28                	je     c000ef84 <ACPI::open(int, int, void*)+0x3b8>
c000ef5c:	83 ec 08             	sub    esp,0x8
c000ef5f:	6a 01                	push   0x1
c000ef61:	68 69 e5 01 c0       	push   0xc001e569
c000ef66:	e8 e2 3e 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c000ef6b:	83 c4 10             	add    esp,0x10
c000ef6e:	83 ec 08             	sub    esp,0x8
c000ef71:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ef78:	50                   	push   eax
c000ef79:	e8 00 41 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c000ef7e:	83 c4 10             	add    esp,0x10
c000ef81:	8d 76 00             	lea    esi,[esi+0x0]
c000ef84:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef8c:	74 2a                	je     c000efb8 <ACPI::open(int, int, void*)+0x3ec>
c000ef8e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef96:	74 20                	je     c000efb8 <ACPI::open(int, int, void*)+0x3ec>
c000ef98:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa1:	83 c0 08             	add    eax,0x8
c000efa4:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efb0:	ff d0                	call   eax
c000efb2:	83 c4 10             	add    esp,0x10
c000efb5:	8d 76 00             	lea    esi,[esi+0x0]
c000efb8:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000efbd:	83 ec 08             	sub    esp,0x8
c000efc0:	68 86 e5 01 c0       	push   0xc001e586
c000efc5:	50                   	push   eax
c000efc6:	e8 31 f2 ff ff       	call   c000e1fc <findDataTable(unsigned char*, char*)>
c000efcb:	83 c4 10             	add    esp,0x10
c000efce:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000efd5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000efdd:	74 19                	je     c000eff8 <ACPI::open(int, int, void*)+0x42c>
c000efdf:	83 ec 08             	sub    esp,0x8
c000efe2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000efe9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eff0:	e8 67 fb ff ff       	call   c000eb5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eff5:	83 c4 10             	add    esp,0x10
c000eff8:	b8 00 00 00 00       	mov    eax,0x0
c000effd:	81 c4 70 01 00 00    	add    esp,0x170
c000f003:	5b                   	pop    ebx
c000f004:	5e                   	pop    esi
c000f005:	5f                   	pop    edi
c000f006:	c3                   	ret    
c000f007:	90                   	nop

c000f008 <CPU::close(int, int, void*)>:
c000f008:	31 c0                	xor    eax,eax
c000f00a:	c3                   	ret    
c000f00b:	90                   	nop

c000f00c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f00c:	60                   	pusha  
c000f00d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f019:	9c                   	pushf  
c000f01a:	fa                   	cli    
c000f01b:	0f 09                	wbinvd 
c000f01d:	0f 30                	wrmsr  
c000f01f:	9d                   	popf   
c000f020:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f024:	89 02                	mov    DWORD PTR [edx],eax
c000f026:	61                   	popa   
c000f027:	c3                   	ret    

c000f028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f028:	60                   	pusha  
c000f029:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f02d:	9c                   	pushf  
c000f02e:	fa                   	cli    
c000f02f:	0f 09                	wbinvd 
c000f031:	31 c0                	xor    eax,eax
c000f033:	31 d2                	xor    edx,edx
c000f035:	0f 32                	rdmsr  
c000f037:	9d                   	popf   
c000f038:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f03c:	89 02                	mov    DWORD PTR [edx],eax
c000f03e:	61                   	popa   
c000f03f:	c3                   	ret    

c000f040 <CPU::AMD_K6_writeback(int, int, int)>:
c000f040:	56                   	push   esi
c000f041:	53                   	push   ebx
c000f042:	83 ec 10             	sub    esp,0x10
c000f045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f049:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f04e:	75 5d                	jne    c000f0ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f050:	83 f8 08             	cmp    eax,0x8
c000f053:	75 09                	jne    c000f05e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f055:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f05a:	7e 13                	jle    c000f06f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f05c:	eb 30                	jmp    c000f08e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f05e:	83 f8 06             	cmp    eax,0x6
c000f061:	7c 4a                	jl     c000f0ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f063:	83 f8 07             	cmp    eax,0x7
c000f066:	7e 07                	jle    c000f06f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f068:	83 f8 09             	cmp    eax,0x9
c000f06b:	74 21                	je     c000f08e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f06d:	eb 3e                	jmp    c000f0ad <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f06f:	89 e6                	mov    esi,esp
c000f071:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000f077:	56                   	push   esi
c000f078:	c1 eb 15             	shr    ebx,0x15
c000f07b:	68 82 00 00 c0       	push   0xc0000082
c000f080:	83 e3 7e             	and    ebx,0x7e
c000f083:	e8 a0 ff ff ff       	call   c000f028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f088:	56                   	push   esi
c000f089:	6a 00                	push   0x0
c000f08b:	53                   	push   ebx
c000f08c:	eb 12                	jmp    c000f0a0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f08e:	89 e3                	mov    ebx,esp
c000f090:	53                   	push   ebx
c000f091:	68 82 00 00 c0       	push   0xc0000082
c000f096:	e8 8d ff ff ff       	call   c000f028 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f09b:	53                   	push   ebx
c000f09c:	6a 00                	push   0x0
c000f09e:	6a 00                	push   0x0
c000f0a0:	68 82 00 00 c0       	push   0xc0000082
c000f0a5:	e8 62 ff ff ff       	call   c000f00c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f0aa:	83 c4 18             	add    esp,0x18
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	5b                   	pop    ebx
c000f0b1:	5e                   	pop    esi
c000f0b2:	c3                   	ret    
c000f0b3:	90                   	nop

c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0b4:	55                   	push   ebp
c000f0b5:	57                   	push   edi
c000f0b6:	56                   	push   esi
c000f0b7:	53                   	push   ebx
c000f0b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f0c0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0c4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f0c8:	39 05 f0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8f0,eax
c000f0ce:	75 23                	jne    c000f0f3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f0d0:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f0d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0d9:	89 06                	mov    DWORD PTR [esi],eax
c000f0db:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f0e0:	89 07                	mov    DWORD PTR [edi],eax
c000f0e2:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0ea:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f0ef:	89 02                	mov    DWORD PTR [edx],eax
c000f0f1:	eb 3f                	jmp    c000f132 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f0f3:	31 c9                	xor    ecx,ecx
c000f0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0f9:	0f a2                	cpuid  
c000f0fb:	89 06                	mov    DWORD PTR [esi],eax
c000f0fd:	89 1f                	mov    DWORD PTR [edi],ebx
c000f0ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f103:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f106:	89 10                	mov    DWORD PTR [eax],edx
c000f108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f10c:	a3 f0 f8 01 c0       	mov    ds:0xc001f8f0,eax
c000f111:	8b 06                	mov    eax,DWORD PTR [esi]
c000f113:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f118:	8b 07                	mov    eax,DWORD PTR [edi]
c000f11a:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f11f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f122:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f12b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12d:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f132:	5b                   	pop    ebx
c000f133:	5e                   	pop    esi
c000f134:	5f                   	pop    edi
c000f135:	5d                   	pop    ebp
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <CPU::cpuidCheckEDX(unsigned int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f13f:	50                   	push   eax
c000f140:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f144:	50                   	push   eax
c000f145:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f149:	50                   	push   eax
c000f14a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f14e:	50                   	push   eax
c000f14f:	6a 01                	push   0x1
c000f151:	e8 5e ff ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f156:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f15a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f15e:	0f 95 c0             	setne  al
c000f161:	83 c4 24             	add    esp,0x24
c000f164:	c3                   	ret    
c000f165:	90                   	nop

c000f166 <CPU::cpuidCheckECX(unsigned int)>:
c000f166:	83 ec 10             	sub    esp,0x10
c000f169:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f16d:	50                   	push   eax
c000f16e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f172:	50                   	push   eax
c000f173:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f177:	50                   	push   eax
c000f178:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f17c:	50                   	push   eax
c000f17d:	6a 01                	push   0x1
c000f17f:	e8 30 ff ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f188:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f18c:	0f 95 c0             	setne  al
c000f18f:	83 c4 24             	add    esp,0x24
c000f192:	c3                   	ret    
c000f193:	90                   	nop

c000f194 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f194:	83 ec 10             	sub    esp,0x10
c000f197:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f19b:	50                   	push   eax
c000f19c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1a0:	50                   	push   eax
c000f1a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1a5:	50                   	push   eax
c000f1a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1aa:	50                   	push   eax
c000f1ab:	6a 07                	push   0x7
c000f1ad:	e8 02 ff ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1b6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1ba:	0f 95 c0             	setne  al
c000f1bd:	83 c4 24             	add    esp,0x24
c000f1c0:	c3                   	ret    
c000f1c1:	90                   	nop

c000f1c2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f1c2:	83 ec 10             	sub    esp,0x10
c000f1c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c9:	50                   	push   eax
c000f1ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ce:	50                   	push   eax
c000f1cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d3:	50                   	push   eax
c000f1d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d8:	50                   	push   eax
c000f1d9:	6a 07                	push   0x7
c000f1db:	e8 d4 fe ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1e4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1e8:	0f 95 c0             	setne  al
c000f1eb:	83 c4 24             	add    esp,0x24
c000f1ee:	c3                   	ret    
c000f1ef:	90                   	nop

c000f1f0 <CPU::CPU()>:
c000f1f0:	83 ec 0c             	sub    esp,0xc
c000f1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f7:	83 ec 08             	sub    esp,0x8
c000f1fa:	68 a9 e6 01 c0       	push   0xc001e6a9
c000f1ff:	50                   	push   eax
c000f200:	e8 d3 c9 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c000f205:	83 c4 10             	add    esp,0x10
c000f208:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c000f20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f211:	89 10                	mov    DWORD PTR [eax],edx
c000f213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f217:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f225:	05 78 01 00 00       	add    eax,0x178
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	50                   	push   eax
c000f22e:	e8 47 7e ff ff       	call   c000707a <GDT::GDT()>
c000f233:	83 c4 10             	add    esp,0x10
c000f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f23a:	05 7c 09 00 00       	add    eax,0x97c
c000f23f:	83 ec 0c             	sub    esp,0xc
c000f242:	50                   	push   eax
c000f243:	e8 6c 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f248:	83 c4 10             	add    esp,0x10
c000f24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f24f:	05 7c 11 00 00       	add    eax,0x117c
c000f254:	83 ec 0c             	sub    esp,0xc
c000f257:	50                   	push   eax
c000f258:	e8 6b 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f25d:	83 c4 10             	add    esp,0x10
c000f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f264:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f26f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f279:	90                   	nop
c000f27a:	83 c4 0c             	add    esp,0xc
c000f27d:	c3                   	ret    

c000f27e <CPU::displayFeatures()>:
c000f27e:	c3                   	ret    
c000f27f:	90                   	nop

c000f280 <CPU::detectFeatures()>:
c000f280:	55                   	push   ebp
c000f281:	57                   	push   edi
c000f282:	56                   	push   esi
c000f283:	53                   	push   ebx
c000f284:	83 ec 30             	sub    esp,0x30
c000f287:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f28b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f295:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f29c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f2a2:	6a 0d                	push   0xd
c000f2a4:	6a 00                	push   0x0
c000f2a6:	55                   	push   ebp
c000f2a7:	e8 24 12 ff ff       	call   c00004d0 <memset>
c000f2ac:	83 c4 10             	add    esp,0x10
c000f2af:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f2b4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2bb:	0f 84 d5 05 00 00    	je     c000f896 <CPU::detectFeatures()+0x616>
c000f2c1:	83 ec 0c             	sub    esp,0xc
c000f2c4:	89 ef                	mov    edi,ebp
c000f2c6:	6a 10                	push   0x10
c000f2c8:	e8 6b fe ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f2cd:	83 e0 01             	and    eax,0x1
c000f2d0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2d3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2d9:	83 e0 fd             	and    eax,0xfffffffd
c000f2dc:	09 d0                	or     eax,edx
c000f2de:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2e4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f2eb:	e8 48 fe ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f2f0:	83 e0 01             	and    eax,0x1
c000f2f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f2fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f300:	83 e0 fb             	and    eax,0xfffffffb
c000f303:	09 d0                	or     eax,edx
c000f305:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f30b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f312:	e8 21 fe ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f317:	83 e0 01             	and    eax,0x1
c000f31a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f321:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f327:	83 e0 f7             	and    eax,0xfffffff7
c000f32a:	09 d0                	or     eax,edx
c000f32c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f332:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f339:	e8 fa fd ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f33e:	83 e0 01             	and    eax,0x1
c000f341:	c1 e0 04             	shl    eax,0x4
c000f344:	88 c2                	mov    dl,al
c000f346:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f34c:	83 e0 ef             	and    eax,0xffffffef
c000f34f:	09 d0                	or     eax,edx
c000f351:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f357:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f35e:	e8 d5 fd ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f363:	83 e0 01             	and    eax,0x1
c000f366:	c1 e0 05             	shl    eax,0x5
c000f369:	88 c2                	mov    dl,al
c000f36b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f371:	83 e0 df             	and    eax,0xffffffdf
c000f374:	09 d0                	or     eax,edx
c000f376:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f37c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f383:	e8 b0 fd ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f388:	83 e0 01             	and    eax,0x1
c000f38b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f38e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f394:	83 e0 fd             	and    eax,0xfffffffd
c000f397:	09 d0                	or     eax,edx
c000f399:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f39f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f3a6:	e8 8d fd ff ff       	call   c000f138 <CPU::cpuidCheckEDX(unsigned int)>
c000f3ab:	83 e0 01             	and    eax,0x1
c000f3ae:	c1 e0 06             	shl    eax,0x6
c000f3b1:	88 c2                	mov    dl,al
c000f3b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3b9:	83 e0 bf             	and    eax,0xffffffbf
c000f3bc:	09 d0                	or     eax,edx
c000f3be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f3c4:	58                   	pop    eax
c000f3c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3c9:	50                   	push   eax
c000f3ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3ce:	50                   	push   eax
c000f3cf:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f3d3:	56                   	push   esi
c000f3d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3d8:	50                   	push   eax
c000f3d9:	6a 00                	push   0x0
c000f3db:	e8 d4 fc ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3e0:	b8 04 00 00 00       	mov    eax,0x4
c000f3e5:	89 c1                	mov    ecx,eax
c000f3e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3e9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f3ef:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f3f3:	89 c1                	mov    ecx,eax
c000f3f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f3fd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f401:	89 c1                	mov    ecx,eax
c000f403:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f405:	83 c4 18             	add    esp,0x18
c000f408:	68 b8 e5 01 c0       	push   0xc001e5b8
c000f40d:	55                   	push   ebp
c000f40e:	e8 cd 12 ff ff       	call   c00006e0 <strcmp>
c000f413:	83 c4 10             	add    esp,0x10
c000f416:	85 c0                	test   eax,eax
c000f418:	75 0f                	jne    c000f429 <CPU::detectFeatures()+0x1a9>
c000f41a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f424:	e9 22 02 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f429:	50                   	push   eax
c000f42a:	50                   	push   eax
c000f42b:	68 c5 e5 01 c0       	push   0xc001e5c5
c000f430:	55                   	push   ebp
c000f431:	e8 aa 12 ff ff       	call   c00006e0 <strcmp>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	85 c0                	test   eax,eax
c000f43b:	74 dd                	je     c000f41a <CPU::detectFeatures()+0x19a>
c000f43d:	50                   	push   eax
c000f43e:	50                   	push   eax
c000f43f:	68 d2 e5 01 c0       	push   0xc001e5d2
c000f444:	55                   	push   ebp
c000f445:	e8 96 12 ff ff       	call   c00006e0 <strcmp>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	85 c0                	test   eax,eax
c000f44f:	74 2a                	je     c000f47b <CPU::detectFeatures()+0x1fb>
c000f451:	50                   	push   eax
c000f452:	50                   	push   eax
c000f453:	68 df e5 01 c0       	push   0xc001e5df
c000f458:	55                   	push   ebp
c000f459:	e8 82 12 ff ff       	call   c00006e0 <strcmp>
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	85 c0                	test   eax,eax
c000f463:	74 16                	je     c000f47b <CPU::detectFeatures()+0x1fb>
c000f465:	50                   	push   eax
c000f466:	50                   	push   eax
c000f467:	68 ec e5 01 c0       	push   0xc001e5ec
c000f46c:	55                   	push   ebp
c000f46d:	e8 6e 12 ff ff       	call   c00006e0 <strcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	74 48                	je     c000f4c1 <CPU::detectFeatures()+0x241>
c000f479:	eb 0f                	jmp    c000f48a <CPU::detectFeatures()+0x20a>
c000f47b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f485:	e9 c1 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f48a:	50                   	push   eax
c000f48b:	50                   	push   eax
c000f48c:	68 f9 e5 01 c0       	push   0xc001e5f9
c000f491:	55                   	push   ebp
c000f492:	e8 49 12 ff ff       	call   c00006e0 <strcmp>
c000f497:	83 c4 10             	add    esp,0x10
c000f49a:	85 c0                	test   eax,eax
c000f49c:	74 23                	je     c000f4c1 <CPU::detectFeatures()+0x241>
c000f49e:	57                   	push   edi
c000f49f:	57                   	push   edi
c000f4a0:	68 06 e6 01 c0       	push   0xc001e606
c000f4a5:	55                   	push   ebp
c000f4a6:	e8 35 12 ff ff       	call   c00006e0 <strcmp>
c000f4ab:	83 c4 10             	add    esp,0x10
c000f4ae:	85 c0                	test   eax,eax
c000f4b0:	75 1e                	jne    c000f4d0 <CPU::detectFeatures()+0x250>
c000f4b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4bc:	e9 8a 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f4c1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f4cb:	e9 7b 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f4d0:	56                   	push   esi
c000f4d1:	56                   	push   esi
c000f4d2:	68 13 e6 01 c0       	push   0xc001e613
c000f4d7:	55                   	push   ebp
c000f4d8:	e8 03 12 ff ff       	call   c00006e0 <strcmp>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	85 c0                	test   eax,eax
c000f4e2:	75 0f                	jne    c000f4f3 <CPU::detectFeatures()+0x273>
c000f4e4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f4ee:	e9 58 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f4f3:	51                   	push   ecx
c000f4f4:	51                   	push   ecx
c000f4f5:	68 d2 e5 01 c0       	push   0xc001e5d2
c000f4fa:	55                   	push   ebp
c000f4fb:	e8 e0 11 ff ff       	call   c00006e0 <strcmp>
c000f500:	83 c4 10             	add    esp,0x10
c000f503:	85 c0                	test   eax,eax
c000f505:	75 0f                	jne    c000f516 <CPU::detectFeatures()+0x296>
c000f507:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f511:	e9 35 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f516:	52                   	push   edx
c000f517:	52                   	push   edx
c000f518:	68 20 e6 01 c0       	push   0xc001e620
c000f51d:	55                   	push   ebp
c000f51e:	e8 bd 11 ff ff       	call   c00006e0 <strcmp>
c000f523:	83 c4 10             	add    esp,0x10
c000f526:	85 c0                	test   eax,eax
c000f528:	75 0f                	jne    c000f539 <CPU::detectFeatures()+0x2b9>
c000f52a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f534:	e9 12 01 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f539:	50                   	push   eax
c000f53a:	50                   	push   eax
c000f53b:	68 2d e6 01 c0       	push   0xc001e62d
c000f540:	55                   	push   ebp
c000f541:	e8 9a 11 ff ff       	call   c00006e0 <strcmp>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	85 c0                	test   eax,eax
c000f54b:	75 0f                	jne    c000f55c <CPU::detectFeatures()+0x2dc>
c000f54d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f557:	e9 ef 00 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f55c:	50                   	push   eax
c000f55d:	50                   	push   eax
c000f55e:	68 3a e6 01 c0       	push   0xc001e63a
c000f563:	55                   	push   ebp
c000f564:	e8 77 11 ff ff       	call   c00006e0 <strcmp>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	85 c0                	test   eax,eax
c000f56e:	75 0f                	jne    c000f57f <CPU::detectFeatures()+0x2ff>
c000f570:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f57a:	e9 cc 00 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f57f:	50                   	push   eax
c000f580:	50                   	push   eax
c000f581:	68 47 e6 01 c0       	push   0xc001e647
c000f586:	55                   	push   ebp
c000f587:	e8 54 11 ff ff       	call   c00006e0 <strcmp>
c000f58c:	83 c4 10             	add    esp,0x10
c000f58f:	85 c0                	test   eax,eax
c000f591:	75 0f                	jne    c000f5a2 <CPU::detectFeatures()+0x322>
c000f593:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f59d:	e9 a9 00 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f5a2:	50                   	push   eax
c000f5a3:	50                   	push   eax
c000f5a4:	68 54 e6 01 c0       	push   0xc001e654
c000f5a9:	55                   	push   ebp
c000f5aa:	e8 31 11 ff ff       	call   c00006e0 <strcmp>
c000f5af:	83 c4 10             	add    esp,0x10
c000f5b2:	85 c0                	test   eax,eax
c000f5b4:	75 0f                	jne    c000f5c5 <CPU::detectFeatures()+0x345>
c000f5b6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f5c0:	e9 86 00 00 00       	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f5c5:	50                   	push   eax
c000f5c6:	50                   	push   eax
c000f5c7:	68 61 e6 01 c0       	push   0xc001e661
c000f5cc:	55                   	push   ebp
c000f5cd:	e8 0e 11 ff ff       	call   c00006e0 <strcmp>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	85 c0                	test   eax,eax
c000f5d7:	75 0c                	jne    c000f5e5 <CPU::detectFeatures()+0x365>
c000f5d9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f5e3:	eb 66                	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f5e5:	50                   	push   eax
c000f5e6:	50                   	push   eax
c000f5e7:	68 6e e6 01 c0       	push   0xc001e66e
c000f5ec:	55                   	push   ebp
c000f5ed:	e8 ee 10 ff ff       	call   c00006e0 <strcmp>
c000f5f2:	83 c4 10             	add    esp,0x10
c000f5f5:	85 c0                	test   eax,eax
c000f5f7:	75 0c                	jne    c000f605 <CPU::detectFeatures()+0x385>
c000f5f9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f603:	eb 46                	jmp    c000f64b <CPU::detectFeatures()+0x3cb>
c000f605:	57                   	push   edi
c000f606:	57                   	push   edi
c000f607:	68 7b e6 01 c0       	push   0xc001e67b
c000f60c:	55                   	push   ebp
c000f60d:	e8 ce 10 ff ff       	call   c00006e0 <strcmp>
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	85 c0                	test   eax,eax
c000f617:	74 e0                	je     c000f5f9 <CPU::detectFeatures()+0x379>
c000f619:	56                   	push   esi
c000f61a:	56                   	push   esi
c000f61b:	68 88 e6 01 c0       	push   0xc001e688
c000f620:	55                   	push   ebp
c000f621:	e8 ba 10 ff ff       	call   c00006e0 <strcmp>
c000f626:	83 c4 10             	add    esp,0x10
c000f629:	85 c0                	test   eax,eax
c000f62b:	74 cc                	je     c000f5f9 <CPU::detectFeatures()+0x379>
c000f62d:	51                   	push   ecx
c000f62e:	51                   	push   ecx
c000f62f:	68 95 e6 01 c0       	push   0xc001e695
c000f634:	55                   	push   ebp
c000f635:	e8 a6 10 ff ff       	call   c00006e0 <strcmp>
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	85 c0                	test   eax,eax
c000f63f:	74 b8                	je     c000f5f9 <CPU::detectFeatures()+0x379>
c000f641:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f64b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f650:	0f 86 be 00 00 00    	jbe    c000f714 <CPU::detectFeatures()+0x494>
c000f656:	83 ec 0c             	sub    esp,0xc
c000f659:	68 80 00 00 00       	push   0x80
c000f65e:	e8 31 fb ff ff       	call   c000f194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f663:	83 e0 01             	and    eax,0x1
c000f666:	c1 e0 06             	shl    eax,0x6
c000f669:	88 c2                	mov    dl,al
c000f66b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f671:	83 e0 bf             	and    eax,0xffffffbf
c000f674:	09 d0                	or     eax,edx
c000f676:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f67c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f683:	e8 0c fb ff ff       	call   c000f194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f688:	83 e0 01             	and    eax,0x1
c000f68b:	c1 e0 04             	shl    eax,0x4
c000f68e:	88 c2                	mov    dl,al
c000f690:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f696:	83 e0 ef             	and    eax,0xffffffef
c000f699:	09 d0                	or     eax,edx
c000f69b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6a1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f6a8:	e8 e7 fa ff ff       	call   c000f194 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6ad:	c1 e0 07             	shl    eax,0x7
c000f6b0:	88 c2                	mov    dl,al
c000f6b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6b8:	83 e0 7f             	and    eax,0x7f
c000f6bb:	09 d0                	or     eax,edx
c000f6bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f6ca:	e8 f3 fa ff ff       	call   c000f1c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6cf:	83 e0 01             	and    eax,0x1
c000f6d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f6d9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6df:	83 e0 f7             	and    eax,0xfffffff7
c000f6e2:	09 d0                	or     eax,edx
c000f6e4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6ea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f6f1:	e8 cc fa ff ff       	call   c000f1c2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6f6:	83 c4 10             	add    esp,0x10
c000f6f9:	83 e0 01             	and    eax,0x1
c000f6fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f703:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f709:	83 e0 fb             	and    eax,0xfffffffb
c000f70c:	09 d0                	or     eax,edx
c000f70e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f714:	83 ec 0c             	sub    esp,0xc
c000f717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f71b:	50                   	push   eax
c000f71c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f720:	50                   	push   eax
c000f721:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f725:	56                   	push   esi
c000f726:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f72a:	50                   	push   eax
c000f72b:	6a 01                	push   0x1
c000f72d:	e8 82 f9 ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f732:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f736:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f73c:	88 ca                	mov    dl,cl
c000f73e:	83 e0 f0             	and    eax,0xfffffff0
c000f741:	83 e2 0f             	and    edx,0xf
c000f744:	09 d0                	or     eax,edx
c000f746:	88 ca                	mov    dl,cl
c000f748:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f74e:	c0 ea 04             	shr    dl,0x4
c000f751:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f755:	0f b6 c2             	movzx  eax,dl
c000f758:	83 c4 20             	add    esp,0x20
c000f75b:	c1 e0 06             	shl    eax,0x6
c000f75e:	89 c7                	mov    edi,eax
c000f760:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f766:	66 25 3f c0          	and    ax,0xc03f
c000f76a:	09 f8                	or     eax,edi
c000f76c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f773:	89 c8                	mov    eax,ecx
c000f775:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f77c:	c1 e8 08             	shr    eax,0x8
c000f77f:	83 e5 3f             	and    ebp,0x3f
c000f782:	83 e0 0f             	and    eax,0xf
c000f785:	89 c7                	mov    edi,eax
c000f787:	c1 e7 06             	shl    edi,0x6
c000f78a:	09 ef                	or     edi,ebp
c000f78c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f793:	89 fa                	mov    edx,edi
c000f795:	83 e5 c0             	and    ebp,0xffffffc0
c000f798:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f79e:	88 c2                	mov    dl,al
c000f7a0:	c0 ea 02             	shr    dl,0x2
c000f7a3:	89 d7                	mov    edi,edx
c000f7a5:	09 ef                	or     edi,ebp
c000f7a7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f7ad:	89 fa                	mov    edx,edi
c000f7af:	83 e5 cf             	and    ebp,0xffffffcf
c000f7b2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7b8:	89 cf                	mov    edi,ecx
c000f7ba:	c1 ef 0c             	shr    edi,0xc
c000f7bd:	83 e7 03             	and    edi,0x3
c000f7c0:	c1 e7 04             	shl    edi,0x4
c000f7c3:	09 ef                	or     edi,ebp
c000f7c5:	3c 06                	cmp    al,0x6
c000f7c7:	89 fa                	mov    edx,edi
c000f7c9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f7cf:	74 04                	je     c000f7d5 <CPU::detectFeatures()+0x555>
c000f7d1:	3c 0f                	cmp    al,0xf
c000f7d3:	75 5c                	jne    c000f831 <CPU::detectFeatures()+0x5b1>
c000f7d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f7d9:	89 cf                	mov    edi,ecx
c000f7db:	c1 ef 10             	shr    edi,0x10
c000f7de:	c1 e7 04             	shl    edi,0x4
c000f7e1:	09 fa                	or     edx,edi
c000f7e3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f7e9:	0f b6 d2             	movzx  edx,dl
c000f7ec:	66 81 e7 3f c0       	and    di,0xc03f
c000f7f1:	c1 e2 06             	shl    edx,0x6
c000f7f4:	09 fa                	or     edx,edi
c000f7f6:	3c 0f                	cmp    al,0xf
c000f7f8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f7ff:	75 30                	jne    c000f831 <CPU::detectFeatures()+0x5b1>
c000f801:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f807:	c1 e9 14             	shr    ecx,0x14
c000f80a:	83 e0 3f             	and    eax,0x3f
c000f80d:	83 c1 0f             	add    ecx,0xf
c000f810:	88 ca                	mov    dl,cl
c000f812:	c0 e9 02             	shr    cl,0x2
c000f815:	c1 e2 06             	shl    edx,0x6
c000f818:	09 d0                	or     eax,edx
c000f81a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f820:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f826:	83 e0 c0             	and    eax,0xffffffc0
c000f829:	09 c1                	or     ecx,eax
c000f82b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f831:	83 ec 0c             	sub    esp,0xc
c000f834:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f83b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f83f:	50                   	push   eax
c000f840:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f844:	55                   	push   ebp
c000f845:	56                   	push   esi
c000f846:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f84a:	57                   	push   edi
c000f84b:	68 00 00 00 80       	push   0x80000000
c000f850:	e8 5f f8 ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f855:	83 c4 20             	add    esp,0x20
c000f858:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f860:	76 22                	jbe    c000f884 <CPU::detectFeatures()+0x604>
c000f862:	83 ec 0c             	sub    esp,0xc
c000f865:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f869:	50                   	push   eax
c000f86a:	55                   	push   ebp
c000f86b:	56                   	push   esi
c000f86c:	57                   	push   edi
c000f86d:	68 01 00 00 80       	push   0x80000001
c000f872:	e8 3d f8 ff ff       	call   c000f0b4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f877:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f881:	83 c4 20             	add    esp,0x20
c000f884:	52                   	push   edx
c000f885:	52                   	push   edx
c000f886:	68 a1 e6 01 c0       	push   0xc001e6a1
c000f88b:	53                   	push   ebx
c000f88c:	e8 39 c3 ff ff       	call   c000bbca <Device::setName(char const*)>
c000f891:	83 c4 10             	add    esp,0x10
c000f894:	eb 67                	jmp    c000f8fd <CPU::detectFeatures()+0x67d>
c000f896:	50                   	push   eax
c000f897:	50                   	push   eax
c000f898:	68 06 e6 01 c0       	push   0xc001e606
c000f89d:	55                   	push   ebp
c000f89e:	e8 5d 0d ff ff       	call   c0000600 <strcpy>
c000f8a3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f8ad:	e8 11 09 ff ff       	call   c00001c3 <is486>
c000f8b2:	83 c4 10             	add    esp,0x10
c000f8b5:	85 c0                	test   eax,eax
c000f8b7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8bd:	74 1d                	je     c000f8dc <CPU::detectFeatures()+0x65c>
c000f8bf:	83 c8 07             	or     eax,0x7
c000f8c2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8c8:	0f 20 c0             	mov    eax,cr0
c000f8cb:	83 e0 14             	and    eax,0x14
c000f8ce:	83 f8 04             	cmp    eax,0x4
c000f8d1:	75 0e                	jne    c000f8e1 <CPU::detectFeatures()+0x661>
c000f8d3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f8da:	eb 21                	jmp    c000f8fd <CPU::detectFeatures()+0x67d>
c000f8dc:	83 e0 f8             	and    eax,0xfffffff8
c000f8df:	eb e1                	jmp    c000f8c2 <CPU::detectFeatures()+0x642>
c000f8e1:	e8 b8 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f8e6:	83 e0 01             	and    eax,0x1
c000f8e9:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8ec:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8f2:	83 e0 fd             	and    eax,0xfffffffd
c000f8f5:	09 d0                	or     eax,edx
c000f8f7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8fd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f904:	74 0e                	je     c000f914 <CPU::detectFeatures()+0x694>
c000f906:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f90b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f912:	eb 20                	jmp    c000f934 <CPU::detectFeatures()+0x6b4>
c000f914:	e8 85 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f919:	83 e0 01             	and    eax,0x1
c000f91c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f91f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f925:	83 e0 fd             	and    eax,0xfffffffd
c000f928:	09 d0                	or     eax,edx
c000f92a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f930:	a8 02                	test   al,0x2
c000f932:	75 d2                	jne    c000f906 <CPU::detectFeatures()+0x686>
c000f934:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f93b:	83 c4 2c             	add    esp,0x2c
c000f93e:	5b                   	pop    ebx
c000f93f:	5e                   	pop    esi
c000f940:	5f                   	pop    edi
c000f941:	5d                   	pop    ebp
c000f942:	c3                   	ret    
c000f943:	90                   	nop

c000f944 <CPU::setupSMEP()>:
c000f944:	0f 20 e0             	mov    eax,cr4
c000f947:	0d 00 00 10 00       	or     eax,0x100000
c000f94c:	0f 22 e0             	mov    cr4,eax
c000f94f:	c3                   	ret    

c000f950 <CPU::setupUMIP()>:
c000f950:	0f 20 e0             	mov    eax,cr4
c000f953:	80 cc 08             	or     ah,0x8
c000f956:	0f 22 e0             	mov    cr4,eax
c000f959:	c3                   	ret    

c000f95a <CPU::setupTSC()>:
c000f95a:	0f 20 e0             	mov    eax,cr4
c000f95d:	83 c8 04             	or     eax,0x4
c000f960:	0f 22 e0             	mov    cr4,eax
c000f963:	c3                   	ret    

c000f964 <CPU::setupLargePages()>:
c000f964:	0f 20 e0             	mov    eax,cr4
c000f967:	83 c8 10             	or     eax,0x10
c000f96a:	0f 22 e0             	mov    cr4,eax
c000f96d:	c3                   	ret    

c000f96e <CPU::setupPAT()>:
c000f96e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f973:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f97a:	74 2c                	je     c000f9a8 <CPU::setupPAT()+0x3a>
c000f97c:	53                   	push   ebx
c000f97d:	83 ec 10             	sub    esp,0x10
c000f980:	68 77 02 00 00       	push   0x277
c000f985:	50                   	push   eax
c000f986:	e8 67 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f98b:	83 e2 f8             	and    edx,0xfffffff8
c000f98e:	83 ca 01             	or     edx,0x1
c000f991:	52                   	push   edx
c000f992:	50                   	push   eax
c000f993:	68 77 02 00 00       	push   0x277
c000f998:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f99e:	e8 7b 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f9a3:	83 c4 28             	add    esp,0x28
c000f9a6:	5b                   	pop    ebx
c000f9a7:	c3                   	ret    
c000f9a8:	c3                   	ret    
c000f9a9:	90                   	nop

c000f9aa <CPU::setupMTRR()>:
c000f9aa:	c3                   	ret    
c000f9ab:	90                   	nop

c000f9ac <CPU::setupGlobalPages()>:
c000f9ac:	0f 20 e0             	mov    eax,cr4
c000f9af:	0c 80                	or     al,0x80
c000f9b1:	0f 22 e0             	mov    cr4,eax
c000f9b4:	c3                   	ret    
c000f9b5:	90                   	nop

c000f9b6 <CPU::allowUsermodeDataAccess()>:
c000f9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9ba:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9c1:	74 03                	je     c000f9c6 <CPU::allowUsermodeDataAccess()+0x10>
c000f9c3:	0f 01 cb             	stac   
c000f9c6:	c3                   	ret    
c000f9c7:	90                   	nop

c000f9c8 <CPU::prohibitUsermodeDataAccess()>:
c000f9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9cc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9d3:	74 03                	je     c000f9d8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f9d5:	0f 01 ca             	clac   
c000f9d8:	c3                   	ret    
c000f9d9:	90                   	nop

c000f9da <CPU::setupSMAP()>:
c000f9da:	0f 20 e0             	mov    eax,cr4
c000f9dd:	0d 00 00 20 00       	or     eax,0x200000
c000f9e2:	0f 22 e0             	mov    cr4,eax
c000f9e5:	eb e1                	jmp    c000f9c8 <CPU::prohibitUsermodeDataAccess()>
c000f9e7:	90                   	nop

c000f9e8 <CPU::setupFeatures()>:
c000f9e8:	53                   	push   ebx
c000f9e9:	83 ec 08             	sub    esp,0x8
c000f9ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9f0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f9f7:	74 18                	je     c000fa11 <CPU::setupFeatures()+0x29>
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	68 ad e6 01 c0       	push   0xc001e6ad
c000fa01:	e8 fd ab ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000fa06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa09:	e8 42 ff ff ff       	call   c000f950 <CPU::setupUMIP()>
c000fa0e:	83 c4 10             	add    esp,0x10
c000fa11:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa18:	74 18                	je     c000fa32 <CPU::setupFeatures()+0x4a>
c000fa1a:	83 ec 0c             	sub    esp,0xc
c000fa1d:	68 b7 e6 01 c0       	push   0xc001e6b7
c000fa22:	e8 dc ab ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000fa27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa2a:	e8 2b ff ff ff       	call   c000f95a <CPU::setupTSC()>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa39:	74 18                	je     c000fa53 <CPU::setupFeatures()+0x6b>
c000fa3b:	83 ec 0c             	sub    esp,0xc
c000fa3e:	68 c0 e6 01 c0       	push   0xc001e6c0
c000fa43:	e8 bb ab ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000fa48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa4b:	e8 14 ff ff ff       	call   c000f964 <CPU::setupLargePages()>
c000fa50:	83 c4 10             	add    esp,0x10
c000fa53:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa5a:	74 18                	je     c000fa74 <CPU::setupFeatures()+0x8c>
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 c9 e6 01 c0       	push   0xc001e6c9
c000fa64:	e8 9a ab ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000fa69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa6c:	e8 3b ff ff ff       	call   c000f9ac <CPU::setupGlobalPages()>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fa7b:	74 18                	je     c000fa95 <CPU::setupFeatures()+0xad>
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	68 db e6 01 c0       	push   0xc001e6db
c000fa85:	e8 79 ab ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c000fa8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa8d:	e8 dc fe ff ff       	call   c000f96e <CPU::setupPAT()>
c000fa92:	83 c4 10             	add    esp,0x10
c000fa95:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa9c:	74 11                	je     c000faaf <CPU::setupFeatures()+0xc7>
c000fa9e:	c7 44 24 10 e4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6e4
c000faa6:	83 c4 08             	add    esp,0x8
c000faa9:	5b                   	pop    ebx
c000faaa:	e9 54 ab ff ff       	jmp    c000a603 <Dbg::kprintf(char const*, ...)>
c000faaf:	83 c4 08             	add    esp,0x8
c000fab2:	5b                   	pop    ebx
c000fab3:	c3                   	ret    

c000fab4 <CPU::open(int, int, void*)>:
c000fab4:	57                   	push   edi
c000fab5:	56                   	push   esi
c000fab6:	53                   	push   ebx
c000fab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fabb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fabf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fac5:	83 ec 0c             	sub    esp,0xc
c000fac8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000face:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fad4:	50                   	push   eax
c000fad5:	e8 02 76 ff ff       	call   c00070dc <GDT::setup()>
c000fada:	83 c4 0c             	add    esp,0xc
c000fadd:	6a 00                	push   0x0
c000fadf:	68 ef be ad de       	push   0xdeadbeef
c000fae4:	57                   	push   edi
c000fae5:	e8 22 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000faea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000faed:	e8 fa 90 ff ff       	call   c0008bec <TSS::flush()>
c000faf2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000faf8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fafb:	e8 2a 78 ff ff       	call   c000732a <IDT::setup()>
c000fb00:	b8 00 04 00 00       	mov    eax,0x400
c000fb05:	0f 23 f8             	mov    db7,eax
c000fb08:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb12:	e8 7e 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb17:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb1d:	89 30                	mov    DWORD PTR [eax],esi
c000fb1f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb25:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb28:	58                   	pop    eax
c000fb29:	5a                   	pop    edx
c000fb2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb34:	e8 9b a0 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fb39:	c7 04 24 ee e6 01 c0 	mov    DWORD PTR [esp],0xc001e6ee
c000fb40:	e8 c6 00 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000fb45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb48:	e8 33 f7 ff ff       	call   c000f280 <CPU::detectFeatures()>
c000fb4d:	c7 04 24 11 e7 01 c0 	mov    DWORD PTR [esp],0xc001e711
c000fb54:	e8 b2 00 00 00       	call   c000fc0b <KeSetBootMessage(char const*)>
c000fb59:	e8 26 5c 00 00       	call   c0015784 <HalInitialise()>
c000fb5e:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fb63:	83 e0 10             	and    eax,0x10
c000fb66:	83 f8 01             	cmp    eax,0x1
c000fb69:	19 c0                	sbb    eax,eax
c000fb6b:	83 e0 46             	and    eax,0x46
c000fb6e:	83 c0 1e             	add    eax,0x1e
c000fb71:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb74:	e8 60 d7 ff ff       	call   c000d2d9 <setupTimer(int)>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb82:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fb89:	74 0c                	je     c000fb97 <CPU::open(int, int, void*)+0xe3>
c000fb8b:	83 ec 0c             	sub    esp,0xc
c000fb8e:	53                   	push   ebx
c000fb8f:	e8 54 fe ff ff       	call   c000f9e8 <CPU::setupFeatures()>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	5b                   	pop    ebx
c000fb98:	31 c0                	xor    eax,eax
c000fb9a:	5e                   	pop    esi
c000fb9b:	5f                   	pop    edi
c000fb9c:	c3                   	ret    

c000fb9d <KeDisplaySplashScreen()>:
c000fb9d:	55                   	push   ebp
c000fb9e:	bd 05 00 00 00       	mov    ebp,0x5
c000fba3:	57                   	push   edi
c000fba4:	bf 00 f9 01 c0       	mov    edi,0xc001f900
c000fba9:	56                   	push   esi
c000fbaa:	be 0a 00 00 00       	mov    esi,0xa
c000fbaf:	53                   	push   ebx
c000fbb0:	31 db                	xor    ebx,ebx
c000fbb2:	83 ec 0c             	sub    esp,0xc
c000fbb5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fbb8:	84 c0                	test   al,al
c000fbba:	74 47                	je     c000fc03 <KeDisplaySplashScreen()+0x66>
c000fbbc:	80 bb 36 f9 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe06ca],0xdb
c000fbc3:	75 13                	jne    c000fbd8 <KeDisplaySplashScreen()+0x3b>
c000fbc5:	0f b6 93 35 f9 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe06cb]
c000fbcc:	83 e2 fe             	and    edx,0xfffffffe
c000fbcf:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fbd5:	75 01                	jne    c000fbd8 <KeDisplaySplashScreen()+0x3b>
c000fbd7:	46                   	inc    esi
c000fbd8:	3c 0d                	cmp    al,0xd
c000fbda:	74 24                	je     c000fc00 <KeDisplaySplashScreen()+0x63>
c000fbdc:	3c 0a                	cmp    al,0xa
c000fbde:	75 0a                	jne    c000fbea <KeDisplaySplashScreen()+0x4d>
c000fbe0:	45                   	inc    ebp
c000fbe1:	be 0a 00 00 00       	mov    esi,0xa
c000fbe6:	31 db                	xor    ebx,ebx
c000fbe8:	eb 16                	jmp    c000fc00 <KeDisplaySplashScreen()+0x63>
c000fbea:	83 ec 0c             	sub    esp,0xc
c000fbed:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fbf0:	55                   	push   ebp
c000fbf1:	43                   	inc    ebx
c000fbf2:	52                   	push   edx
c000fbf3:	6a 00                	push   0x0
c000fbf5:	6a 0e                	push   0xe
c000fbf7:	50                   	push   eax
c000fbf8:	e8 eb 67 00 00       	call   c00163e8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fbfd:	83 c4 20             	add    esp,0x20
c000fc00:	47                   	inc    edi
c000fc01:	eb b2                	jmp    c000fbb5 <KeDisplaySplashScreen()+0x18>
c000fc03:	83 c4 0c             	add    esp,0xc
c000fc06:	5b                   	pop    ebx
c000fc07:	5e                   	pop    esi
c000fc08:	5f                   	pop    edi
c000fc09:	5d                   	pop    ebp
c000fc0a:	c3                   	ret    

c000fc0b <KeSetBootMessage(char const*)>:
c000fc0b:	57                   	push   edi
c000fc0c:	56                   	push   esi
c000fc0d:	53                   	push   ebx
c000fc0e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc14:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc1b:	68 9e 00 00 00       	push   0x9e
c000fc20:	6a 00                	push   0x0
c000fc22:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc26:	56                   	push   esi
c000fc27:	e8 a4 08 ff ff       	call   c00004d0 <memset>
c000fc2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc2f:	e8 0c 09 ff ff       	call   c0000540 <strlen>
c000fc34:	ba 50 00 00 00       	mov    edx,0x50
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	29 c2                	sub    edx,eax
c000fc3e:	31 c9                	xor    ecx,ecx
c000fc40:	83 e2 fe             	and    edx,0xfffffffe
c000fc43:	01 f2                	add    edx,esi
c000fc45:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc4a:	84 c0                	test   al,al
c000fc4c:	74 0a                	je     c000fc58 <KeSetBootMessage(char const*)+0x4d>
c000fc4e:	80 cc 0f             	or     ah,0xf
c000fc51:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc55:	41                   	inc    ecx
c000fc56:	eb ed                	jmp    c000fc45 <KeSetBootMessage(char const*)+0x3a>
c000fc58:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc5d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fc62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc64:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fc6a:	5b                   	pop    ebx
c000fc6b:	5e                   	pop    esi
c000fc6c:	5f                   	pop    edi
c000fc6d:	c3                   	ret    

c000fc6e <EnvVarContainer::getEnv(char const*)>:
c000fc6e:	57                   	push   edi
c000fc6f:	56                   	push   esi
c000fc70:	53                   	push   ebx
c000fc71:	31 db                	xor    ebx,ebx
c000fc73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc77:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fc79:	7e 2b                	jle    c000fca6 <EnvVarContainer::getEnv(char const*)+0x38>
c000fc7b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc82:	50                   	push   eax
c000fc83:	50                   	push   eax
c000fc84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc87:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc8e:	e8 4d 0a ff ff       	call   c00006e0 <strcmp>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	85 c0                	test   eax,eax
c000fc98:	75 09                	jne    c000fca3 <EnvVarContainer::getEnv(char const*)+0x35>
c000fc9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc9d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fca1:	eb 05                	jmp    c000fca8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fca3:	43                   	inc    ebx
c000fca4:	eb d1                	jmp    c000fc77 <EnvVarContainer::getEnv(char const*)+0x9>
c000fca6:	31 c0                	xor    eax,eax
c000fca8:	5b                   	pop    ebx
c000fca9:	5e                   	pop    esi
c000fcaa:	5f                   	pop    edi
c000fcab:	c3                   	ret    

c000fcac <EnvVarContainer::setEnv(char const*, char const*)>:
c000fcac:	55                   	push   ebp
c000fcad:	57                   	push   edi
c000fcae:	56                   	push   esi
c000fcaf:	53                   	push   ebx
c000fcb0:	83 ec 28             	sub    esp,0x28
c000fcb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fcb7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fcbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fcbf:	56                   	push   esi
c000fcc0:	e8 7b 08 ff ff       	call   c0000540 <strlen>
c000fcc5:	40                   	inc    eax
c000fcc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcc9:	e8 eb 7a ff ff       	call   c00077b9 <malloc>
c000fcce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcd5:	e8 66 08 ff ff       	call   c0000540 <strlen>
c000fcda:	40                   	inc    eax
c000fcdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcde:	e8 d6 7a ff ff       	call   c00077b9 <malloc>
c000fce3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fce6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcea:	e8 51 08 ff ff       	call   c0000540 <strlen>
c000fcef:	83 c4 0c             	add    esp,0xc
c000fcf2:	40                   	inc    eax
c000fcf3:	50                   	push   eax
c000fcf4:	6a 00                	push   0x0
c000fcf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcfa:	e8 d1 07 ff ff       	call   c00004d0 <memset>
c000fcff:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd02:	e8 39 08 ff ff       	call   c0000540 <strlen>
c000fd07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd0b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd13:	89 de                	mov    esi,ebx
c000fd15:	e8 26 08 ff ff       	call   c0000540 <strlen>
c000fd1a:	83 c4 0c             	add    esp,0xc
c000fd1d:	40                   	inc    eax
c000fd1e:	50                   	push   eax
c000fd1f:	6a 00                	push   0x0
c000fd21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd25:	e8 a6 07 ff ff       	call   c00004d0 <memset>
c000fd2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd2d:	e8 0e 08 ff ff       	call   c0000540 <strlen>
c000fd32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd36:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd3e:	40                   	inc    eax
c000fd3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd42:	c1 e0 03             	shl    eax,0x3
c000fd45:	5a                   	pop    edx
c000fd46:	59                   	pop    ecx
c000fd47:	50                   	push   eax
c000fd48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd4b:	e8 55 7a ff ff       	call   c00077a5 <realloc>
c000fd50:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd5a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd5e:	b9 08 00 00 00       	mov    ecx,0x8
c000fd63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd65:	83 c4 2c             	add    esp,0x2c
c000fd68:	5b                   	pop    ebx
c000fd69:	5e                   	pop    esi
c000fd6a:	5f                   	pop    edi
c000fd6b:	5d                   	pop    ebp
c000fd6c:	c3                   	ret    
c000fd6d:	90                   	nop

c000fd6e <EnvVarContainer::deleteEnv(char const*)>:
c000fd6e:	c3                   	ret    
c000fd6f:	90                   	nop

c000fd70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fd70:	55                   	push   ebp
c000fd71:	57                   	push   edi
c000fd72:	56                   	push   esi
c000fd73:	53                   	push   ebx
c000fd74:	81 ec 38 01 00 00    	sub    esp,0x138
c000fd7a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd81:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd88:	68 14 01 00 00       	push   0x114
c000fd8d:	e8 27 7a ff ff       	call   c00077b9 <malloc>
c000fd92:	83 c4 0c             	add    esp,0xc
c000fd95:	89 c3                	mov    ebx,eax
c000fd97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fda1:	50                   	push   eax
c000fda2:	e8 d1 ad ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c000fda7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdaa:	e8 f7 b0 ff ff       	call   c000aea6 <File::exists()>
c000fdaf:	83 c4 10             	add    esp,0x10
c000fdb2:	84 c0                	test   al,al
c000fdb4:	75 31                	jne    c000fde7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fdb6:	50                   	push   eax
c000fdb7:	50                   	push   eax
c000fdb8:	6a 12                	push   0x12
c000fdba:	53                   	push   ebx
c000fdbb:	e8 78 ae ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c000fdc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdc2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fdc5:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdc8:	e8 73 07 ff ff       	call   c0000540 <strlen>
c000fdcd:	5a                   	pop    edx
c000fdce:	31 d2                	xor    edx,edx
c000fdd0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fdd4:	51                   	push   ecx
c000fdd5:	56                   	push   esi
c000fdd6:	52                   	push   edx
c000fdd7:	50                   	push   eax
c000fdd8:	53                   	push   ebx
c000fdd9:	ff d7                	call   edi
c000fddb:	83 c4 14             	add    esp,0x14
c000fdde:	53                   	push   ebx
c000fddf:	e8 b2 ae ff ff       	call   c000ac96 <File::close()>
c000fde4:	83 c4 10             	add    esp,0x10
c000fde7:	56                   	push   esi
c000fde8:	31 f6                	xor    esi,esi
c000fdea:	68 00 01 00 00       	push   0x100
c000fdef:	6a 00                	push   0x0
c000fdf1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdf5:	50                   	push   eax
c000fdf6:	e8 d5 06 ff ff       	call   c00004d0 <memset>
c000fdfb:	5f                   	pop    edi
c000fdfc:	58                   	pop    eax
c000fdfd:	6a 01                	push   0x1
c000fdff:	53                   	push   ebx
c000fe00:	e8 33 ae ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe15:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe19:	51                   	push   ecx
c000fe1a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe1e:	52                   	push   edx
c000fe1f:	6a 00                	push   0x0
c000fe21:	6a 01                	push   0x1
c000fe23:	53                   	push   ebx
c000fe24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe2b:	83 c4 20             	add    esp,0x20
c000fe2e:	3c 0d                	cmp    al,0xd
c000fe30:	0f 84 09 01 00 00    	je     c000ff3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe3b:	0f 84 ef 00 00 00    	je     c000ff30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe41:	3c 0a                	cmp    al,0xa
c000fe43:	74 13                	je     c000fe58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe4a:	74 0c                	je     c000fe58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe52:	0f 8e d8 00 00 00    	jle    c000ff30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe5c:	83 ec 0c             	sub    esp,0xc
c000fe5f:	8d 78 01             	lea    edi,[eax+0x1]
c000fe62:	57                   	push   edi
c000fe63:	e8 51 79 ff ff       	call   c00077b9 <malloc>
c000fe68:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fe6c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe70:	8d 56 04             	lea    edx,[esi+0x4]
c000fe73:	89 14 24             	mov    DWORD PTR [esp],edx
c000fe76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe7a:	e8 3a 79 ff ff       	call   c00077b9 <malloc>
c000fe7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe83:	83 c4 0c             	add    esp,0xc
c000fe86:	57                   	push   edi
c000fe87:	6a 00                	push   0x0
c000fe89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe8d:	e8 3e 06 ff ff       	call   c00004d0 <memset>
c000fe92:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe96:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fea0:	83 c4 0c             	add    esp,0xc
c000fea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fea7:	52                   	push   edx
c000fea8:	6a 00                	push   0x0
c000feaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000feae:	e8 1d 06 ff ff       	call   c00004d0 <memset>
c000feb3:	8d 74 24 30          	lea    esi,[esp+0x30]
c000feb7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000febb:	89 34 24             	mov    DWORD PTR [esp],esi
c000febe:	e8 7d 06 ff ff       	call   c0000540 <strlen>
c000fec3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fec7:	89 c1                	mov    ecx,eax
c000fec9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fecb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fece:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fed1:	40                   	inc    eax
c000fed2:	83 c4 10             	add    esp,0x10
c000fed5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fed8:	85 d2                	test   edx,edx
c000feda:	75 0c                	jne    c000fee8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	6a 08                	push   0x8
c000fee1:	e8 d3 78 ff ff       	call   c00077b9 <malloc>
c000fee6:	eb 0c                	jmp    c000fef4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fee8:	c1 e0 03             	shl    eax,0x3
c000feeb:	51                   	push   ecx
c000feec:	51                   	push   ecx
c000feed:	50                   	push   eax
c000feee:	52                   	push   edx
c000feef:	e8 b1 78 ff ff       	call   c00077a5 <realloc>
c000fef4:	83 c4 10             	add    esp,0x10
c000fef7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fefa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fefd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff00:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff04:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff08:	b9 08 00 00 00       	mov    ecx,0x8
c000ff0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff0f:	31 f6                	xor    esi,esi
c000ff11:	50                   	push   eax
c000ff12:	68 00 01 00 00       	push   0x100
c000ff17:	6a 00                	push   0x0
c000ff19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff1d:	50                   	push   eax
c000ff1e:	e8 ad 05 ff ff       	call   c00004d0 <memset>
c000ff23:	83 c4 10             	add    esp,0x10
c000ff26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff2e:	eb 0f                	jmp    c000ff3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff30:	3c 3d                	cmp    al,0x3d
c000ff32:	74 07                	je     c000ff3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff34:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff38:	46                   	inc    esi
c000ff39:	eb 04                	jmp    c000ff3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff3b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff44:	0f 85 c6 fe ff ff    	jne    c000fe10 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff50:	5b                   	pop    ebx
c000ff51:	5e                   	pop    esi
c000ff52:	5f                   	pop    edi
c000ff53:	5d                   	pop    ebp
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <EnvVarContainer::__loadSystem()>:
c000ff56:	83 ec 10             	sub    esp,0x10
c000ff59:	68 60 fa 01 c0       	push   0xc001fa60
c000ff5e:	68 54 e7 01 c0       	push   0xc001e754
c000ff63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff67:	e8 04 fe ff ff       	call   c000fd70 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ff6c:	83 c4 1c             	add    esp,0x1c
c000ff6f:	c3                   	ret    

c000ff70 <EnvVarContainer::__loadUser()>:
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ff7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff92:	90                   	nop
c000ff93:	c3                   	ret    

c000ff94 <EnvVarContainer::~EnvVarContainer()>:
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff9e:	85 c0                	test   eax,eax
c000ffa0:	74 1d                	je     c000ffbf <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffa8:	85 c0                	test   eax,eax
c000ffaa:	74 13                	je     c000ffbf <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	50                   	push   eax
c000ffb7:	e8 0d 78 ff ff       	call   c00077c9 <free>
c000ffbc:	83 c4 10             	add    esp,0x10
c000ffbf:	90                   	nop
c000ffc0:	83 c4 0c             	add    esp,0xc
c000ffc3:	c3                   	ret    

c000ffc4 <Krnl::getEnv(Process*, char const*)>:
c000ffc4:	53                   	push   ebx
c000ffc5:	83 ec 08             	sub    esp,0x8
c000ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffd0:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ffd6:	74 04                	je     c000ffdc <Krnl::getEnv(Process*, char const*)+0x18>
c000ffd8:	85 c0                	test   eax,eax
c000ffda:	75 0b                	jne    c000ffe7 <Krnl::getEnv(Process*, char const*)+0x23>
c000ffdc:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ffe1:	85 c0                	test   eax,eax
c000ffe3:	75 19                	jne    c000fffe <Krnl::getEnv(Process*, char const*)+0x3a>
c000ffe5:	eb 27                	jmp    c001000e <Krnl::getEnv(Process*, char const*)+0x4a>
c000ffe7:	52                   	push   edx
c000ffe8:	52                   	push   edx
c000ffe9:	53                   	push   ebx
c000ffea:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fff0:	e8 79 fc ff ff       	call   c000fc6e <EnvVarContainer::getEnv(char const*)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	85 c0                	test   eax,eax
c000fffa:	75 28                	jne    c0010024 <Krnl::getEnv(Process*, char const*)+0x60>
c000fffc:	eb de                	jmp    c000ffdc <Krnl::getEnv(Process*, char const*)+0x18>
c000fffe:	52                   	push   edx
c000ffff:	52                   	push   edx
c0010000:	53                   	push   ebx
c0010001:	50                   	push   eax
c0010002:	e8 67 fc ff ff       	call   c000fc6e <EnvVarContainer::getEnv(char const*)>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	85 c0                	test   eax,eax
c001000c:	75 16                	jne    c0010024 <Krnl::getEnv(Process*, char const*)+0x60>
c001000e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010012:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010017:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001001b:	83 c4 08             	add    esp,0x8
c001001e:	5b                   	pop    ebx
c001001f:	e9 4a fc ff ff       	jmp    c000fc6e <EnvVarContainer::getEnv(char const*)>
c0010024:	83 c4 08             	add    esp,0x8
c0010027:	5b                   	pop    ebx
c0010028:	c3                   	ret    

c0010029 <Krnl::setEnvSystem(char const*, char const*)>:
c0010029:	83 ec 10             	sub    esp,0x10
c001002c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010030:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010034:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c001003a:	e8 6d fc ff ff       	call   c000fcac <EnvVarContainer::setEnv(char const*, char const*)>
c001003f:	83 c4 1c             	add    esp,0x1c
c0010042:	c3                   	ret    

c0010043 <Krnl::setEnvUser(char const*, char const*)>:
c0010043:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c0010048:	85 c0                	test   eax,eax
c001004a:	74 15                	je     c0010061 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001004c:	83 ec 10             	sub    esp,0x10
c001004f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010053:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010057:	50                   	push   eax
c0010058:	e8 4f fc ff ff       	call   c000fcac <EnvVarContainer::setEnv(char const*, char const*)>
c001005d:	83 c4 1c             	add    esp,0x1c
c0010060:	c3                   	ret    
c0010061:	c3                   	ret    

c0010062 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010066:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001006c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010070:	e9 37 fc ff ff       	jmp    c000fcac <EnvVarContainer::setEnv(char const*, char const*)>

c0010075 <Krnl::deleteEnvSystem(char const*)>:
c0010075:	c3                   	ret    

c0010076 <Krnl::deleteEnvUser(char const*)>:
c0010076:	c3                   	ret    

c0010077 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010077:	c3                   	ret    

c0010078 <Krnl::newProcessEnv(Process*)>:
c0010078:	83 ec 28             	sub    esp,0x28
c001007b:	6a 0c                	push   0xc
c001007d:	e8 37 77 ff ff       	call   c00077b9 <malloc>
c0010082:	5a                   	pop    edx
c0010083:	59                   	pop    ecx
c0010084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010088:	50                   	push   eax
c0010089:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001008d:	e8 e0 fe ff ff       	call   c000ff72 <EnvVarContainer::EnvVarContainer(Process*)>
c0010092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010096:	83 c4 2c             	add    esp,0x2c
c0010099:	c3                   	ret    

c001009a <Krnl::copyProcessEnv(Process*, Process*)>:
c001009a:	57                   	push   edi
c001009b:	56                   	push   esi
c001009c:	53                   	push   ebx
c001009d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a1:	83 ec 0c             	sub    esp,0xc
c00100a4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00100aa:	6a 0c                	push   0xc
c00100ac:	e8 08 77 ff ff       	call   c00077b9 <malloc>
c00100b1:	89 c3                	mov    ebx,eax
c00100b3:	58                   	pop    eax
c00100b4:	5a                   	pop    edx
c00100b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b9:	53                   	push   ebx
c00100ba:	e8 b3 fe ff ff       	call   c000ff72 <EnvVarContainer::EnvVarContainer(Process*)>
c00100bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00100c1:	89 03                	mov    DWORD PTR [ebx],eax
c00100c3:	c1 e0 03             	shl    eax,0x3
c00100c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c9:	e8 eb 76 ff ff       	call   c00077b9 <malloc>
c00100ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100d1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00100d3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00100d6:	c1 e1 03             	shl    ecx,0x3
c00100d9:	89 c7                	mov    edi,eax
c00100db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	89 d8                	mov    eax,ebx
c00100e2:	5b                   	pop    ebx
c00100e3:	5e                   	pop    esi
c00100e4:	5f                   	pop    edi
c00100e5:	c3                   	ret    

c00100e6 <Krnl::loadSystemEnv()>:
c00100e6:	53                   	push   ebx
c00100e7:	83 ec 14             	sub    esp,0x14
c00100ea:	6a 0c                	push   0xc
c00100ec:	e8 c8 76 ff ff       	call   c00077b9 <malloc>
c00100f1:	89 c3                	mov    ebx,eax
c00100f3:	58                   	pop    eax
c00100f4:	5a                   	pop    edx
c00100f5:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00100fb:	53                   	push   ebx
c00100fc:	e8 71 fe ff ff       	call   c000ff72 <EnvVarContainer::EnvVarContainer(Process*)>
c0010101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010104:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c001010a:	e8 47 fe ff ff       	call   c000ff56 <EnvVarContainer::__loadSystem()>
c001010f:	83 c4 18             	add    esp,0x18
c0010112:	5b                   	pop    ebx
c0010113:	c3                   	ret    

c0010114 <Krnl::loadUserEnv()>:
c0010114:	53                   	push   ebx
c0010115:	83 ec 14             	sub    esp,0x14
c0010118:	6a 0c                	push   0xc
c001011a:	e8 9a 76 ff ff       	call   c00077b9 <malloc>
c001011f:	89 c3                	mov    ebx,eax
c0010121:	58                   	pop    eax
c0010122:	5a                   	pop    edx
c0010123:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010129:	53                   	push   ebx
c001012a:	e8 43 fe ff ff       	call   c000ff72 <EnvVarContainer::EnvVarContainer(Process*)>
c001012f:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c0010135:	83 c4 18             	add    esp,0x18
c0010138:	5b                   	pop    ebx
c0010139:	c3                   	ret    

c001013a <Krnl::flushEnv()>:
c001013a:	c3                   	ret    

c001013b <Krnl::getProcessTotalEnvCount(Process*)>:
c001013b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013f:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c0010145:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001014b:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010150:	8b 00                	mov    eax,DWORD PTR [eax]
c0010152:	03 01                	add    eax,DWORD PTR [ecx]
c0010154:	85 d2                	test   edx,edx
c0010156:	74 02                	je     c001015a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010158:	03 02                	add    eax,DWORD PTR [edx]
c001015a:	c3                   	ret    

c001015b <Krnl::getProcessEnvPair(Process*, int)>:
c001015b:	57                   	push   edi
c001015c:	56                   	push   esi
c001015d:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c0010163:	53                   	push   ebx
c0010164:	85 f6                	test   esi,esi
c0010166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001016a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001016e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010178:	8b 01                	mov    eax,DWORD PTR [ecx]
c001017a:	75 16                	jne    c0010192 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001017c:	39 c2                	cmp    edx,eax
c001017e:	7c 16                	jl     c0010196 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010180:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c0010186:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010188:	01 c6                	add    esi,eax
c001018a:	39 d6                	cmp    esi,edx
c001018c:	7e 3c                	jle    c00101ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001018e:	29 c2                	sub    edx,eax
c0010190:	eb 04                	jmp    c0010196 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010192:	39 c2                	cmp    edx,eax
c0010194:	7d 05                	jge    c001019b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010199:	eb 20                	jmp    c00101bb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001019b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001019d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00101a0:	39 d1                	cmp    ecx,edx
c00101a2:	7e 04                	jle    c00101a8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00101a4:	29 c2                	sub    edx,eax
c00101a6:	eb 10                	jmp    c00101b8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00101a8:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00101ae:	03 0e                	add    ecx,DWORD PTR [esi]
c00101b0:	39 d1                	cmp    ecx,edx
c00101b2:	7e 16                	jle    c00101ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101b4:	29 c2                	sub    edx,eax
c00101b6:	29 fa                	sub    edx,edi
c00101b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101bb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101be:	8b 02                	mov    eax,DWORD PTR [edx]
c00101c0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00101c3:	89 03                	mov    DWORD PTR [ebx],eax
c00101c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00101c8:	eb 1d                	jmp    c00101e7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00101ca:	83 ec 0c             	sub    esp,0xc
c00101cd:	68 76 e7 01 c0       	push   0xc001e776
c00101d2:	e8 ac 00 00 00       	call   c0010283 <KePanic(char const*)>
c00101d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00101dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	89 d8                	mov    eax,ebx
c00101e9:	5b                   	pop    ebx
c00101ea:	5e                   	pop    esi
c00101eb:	5f                   	pop    edi
c00101ec:	c2 04 00             	ret    0x4

c00101ef <CPU::current()>:
c00101ef:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00101f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00101fa:	c3                   	ret    

c00101fb <operator new(unsigned long)>:
c00101fb:	e9 b9 75 ff ff       	jmp    c00077b9 <malloc>

c0010200 <operator delete(void*)>:
c0010200:	e9 d4 75 ff ff       	jmp    c00077d9 <rfree>

c0010205 <disableIRQs()>:
c0010205:	fa                   	cli    
c0010206:	c3                   	ret    

c0010207 <enableIRQs()>:
c0010207:	fb                   	sti    
c0010208:	c3                   	ret    

c0010209 <lockScheduler()>:
c0010209:	fa                   	cli    
c001020a:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010210:	c3                   	ret    

c0010211 <unlockScheduler()>:
c0010211:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010216:	48                   	dec    eax
c0010217:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001021c:	75 01                	jne    c001021f <unlockScheduler()+0xe>
c001021e:	fb                   	sti    
c001021f:	c3                   	ret    

c0010220 <lockStuff()>:
c0010220:	fa                   	cli    
c0010221:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010227:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001022d:	c3                   	ret    

c001022e <unlockStuff()>:
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0010236:	48                   	dec    eax
c0010237:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001023c:	75 18                	jne    c0010256 <unlockStuff()+0x28>
c001023e:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0010245:	74 0f                	je     c0010256 <unlockStuff()+0x28>
c0010247:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010251:	e8 22 36 00 00       	call   c0013878 <schedule()>
c0010256:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001025b:	48                   	dec    eax
c001025c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010261:	75 01                	jne    c0010264 <unlockStuff()+0x36>
c0010263:	fb                   	sti    
c0010264:	83 c4 0c             	add    esp,0xc
c0010267:	c3                   	ret    

c0010268 <Virt::getAKernelVAS()>:
c0010268:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c001026d:	c3                   	ret    

c001026e <__not_memcpy>:
c001026e:	57                   	push   edi
c001026f:	56                   	push   esi
c0010270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010274:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010278:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001027c:	89 c7                	mov    edi,eax
c001027e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010280:	5e                   	pop    esi
c0010281:	5f                   	pop    edi
c0010282:	c3                   	ret    

c0010283 <KePanic(char const*)>:
c0010283:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c001028a:	e9 e1 53 00 00       	jmp    c0015670 <HalPanic(char const*)>

c001028f <Krnl::powerThread(void*)>:
c001028f:	83 ec 0c             	sub    esp,0xc
c0010292:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010297:	48                   	dec    eax
c0010298:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001029d:	75 01                	jne    c00102a0 <Krnl::powerThread(void*)+0x11>
c001029f:	fb                   	sti    
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102aa:	6a 0a                	push   0xa
c00102ac:	e8 d7 38 00 00       	call   c0013b88 <sleep(unsigned int)>
c00102b1:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	eb e3                	jmp    c00102a0 <Krnl::powerThread(void*)+0x11>

c00102bd <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102bd:	57                   	push   edi
c00102be:	b9 09 00 00 00       	mov    ecx,0x9
c00102c3:	56                   	push   esi
c00102c4:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00102c9:	fc                   	cld    
c00102ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00102ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102d0:	5e                   	pop    esi
c00102d1:	5f                   	pop    edi
c00102d2:	c3                   	ret    

c00102d3 <Krnl::userIOReceived()>:
c00102d3:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102dd:	c3                   	ret    

c00102de <Krnl::handlePowerButton()>:
c00102de:	83 ec 0c             	sub    esp,0xc
c00102e1:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00102e6:	83 f8 02             	cmp    eax,0x2
c00102e9:	75 10                	jne    c00102fb <Krnl::handlePowerButton()+0x1d>
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102f4:	e8 5d 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102f9:	eb 11                	jmp    c001030c <Krnl::handlePowerButton()+0x2e>
c00102fb:	48                   	dec    eax
c00102fc:	75 11                	jne    c001030f <Krnl::handlePowerButton()+0x31>
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010307:	e8 7a 6b ff ff       	call   c0006e86 <Computer::sleep()>
c001030c:	83 c4 10             	add    esp,0x10
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    

c0010313 <Krnl::handleSleepButton()>:
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001031b:	83 f8 02             	cmp    eax,0x2
c001031e:	75 10                	jne    c0010330 <Krnl::handleSleepButton()+0x1d>
c0010320:	83 ec 0c             	sub    esp,0xc
c0010323:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010329:	e8 28 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001032e:	eb 11                	jmp    c0010341 <Krnl::handleSleepButton()+0x2e>
c0010330:	48                   	dec    eax
c0010331:	75 11                	jne    c0010344 <Krnl::handleSleepButton()+0x31>
c0010333:	83 ec 0c             	sub    esp,0xc
c0010336:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001033c:	e8 45 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	83 c4 0c             	add    esp,0xc
c0010347:	c3                   	ret    

c0010348 <Krnl::setupPowerManager()>:
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010355:	68 f0 00 00 00       	push   0xf0
c001035a:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010361:	6a 00                	push   0x0
c0010363:	68 8f 02 01 c0       	push   0xc001028f
c0010368:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001036e:	e8 e5 32 00 00       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c0010373:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c001037d:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c0010387:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c0010391:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c001039b:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00103a5:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00103af:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00103b9:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00103c3:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00103cd:	83 c4 1c             	add    esp,0x1c
c00103d0:	c3                   	ret    
c00103d1:	66 90                	xchg   ax,ax
c00103d3:	90                   	nop

c00103d4 <KeResolveCompatibilitySymbol(char*)>:
c00103d4:	83 ec 0c             	sub    esp,0xc
c00103d7:	83 ec 08             	sub    esp,0x8
c00103da:	68 90 e7 01 c0       	push   0xc001e790
c00103df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e3:	e8 f8 02 ff ff       	call   c00006e0 <strcmp>
c00103e8:	83 c4 10             	add    esp,0x10
c00103eb:	85 c0                	test   eax,eax
c00103ed:	0f 94 c0             	sete   al
c00103f0:	84 c0                	test   al,al
c00103f2:	74 0c                	je     c0010400 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00103f4:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c00103f9:	e9 62 01 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103fe:	66 90                	xchg   ax,ax
c0010400:	83 ec 08             	sub    esp,0x8
c0010403:	68 99 e7 01 c0       	push   0xc001e799
c0010408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001040c:	e8 cf 02 ff ff       	call   c00006e0 <strcmp>
c0010411:	83 c4 10             	add    esp,0x10
c0010414:	85 c0                	test   eax,eax
c0010416:	0f 94 c0             	sete   al
c0010419:	84 c0                	test   al,al
c001041b:	74 0b                	je     c0010428 <KeResolveCompatibilitySymbol(char*)+0x54>
c001041d:	b8 d0 c1 01 c0       	mov    eax,0xc001c1d0
c0010422:	e9 39 01 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010427:	90                   	nop
c0010428:	83 ec 08             	sub    esp,0x8
c001042b:	68 a3 e7 01 c0       	push   0xc001e7a3
c0010430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010434:	e8 a7 02 ff ff       	call   c00006e0 <strcmp>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	85 c0                	test   eax,eax
c001043e:	0f 94 c0             	sete   al
c0010441:	84 c0                	test   al,al
c0010443:	74 0b                	je     c0010450 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010445:	b8 04 bf 01 c0       	mov    eax,0xc001bf04
c001044a:	e9 11 01 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001044f:	90                   	nop
c0010450:	83 ec 08             	sub    esp,0x8
c0010453:	68 ac e7 01 c0       	push   0xc001e7ac
c0010458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045c:	e8 7f 02 ff ff       	call   c00006e0 <strcmp>
c0010461:	83 c4 10             	add    esp,0x10
c0010464:	85 c0                	test   eax,eax
c0010466:	0f 94 c0             	sete   al
c0010469:	84 c0                	test   al,al
c001046b:	74 0b                	je     c0010478 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001046d:	b8 83 02 01 c0       	mov    eax,0xc0010283
c0010472:	e9 e9 00 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010477:	90                   	nop
c0010478:	83 ec 08             	sub    esp,0x8
c001047b:	68 bf e7 01 c0       	push   0xc001e7bf
c0010480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010484:	e8 57 02 ff ff       	call   c00006e0 <strcmp>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	85 c0                	test   eax,eax
c001048e:	0f 94 c0             	sete   al
c0010491:	84 c0                	test   al,al
c0010493:	74 0b                	je     c00104a0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010495:	b8 0b fc 00 c0       	mov    eax,0xc000fc0b
c001049a:	e9 c1 00 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001049f:	90                   	nop
c00104a0:	83 ec 08             	sub    esp,0x8
c00104a3:	68 dc e7 01 c0       	push   0xc001e7dc
c00104a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ac:	e8 2f 02 ff ff       	call   c00006e0 <strcmp>
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	85 c0                	test   eax,eax
c00104b6:	0f 94 c0             	sete   al
c00104b9:	84 c0                	test   al,al
c00104bb:	74 0b                	je     c00104c8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104bd:	b8 d0 c2 01 c0       	mov    eax,0xc001c2d0
c00104c2:	e9 99 00 00 00       	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104c7:	90                   	nop
c00104c8:	83 ec 08             	sub    esp,0x8
c00104cb:	68 e6 e7 01 c0       	push   0xc001e7e6
c00104d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104d4:	e8 07 02 ff ff       	call   c00006e0 <strcmp>
c00104d9:	83 c4 10             	add    esp,0x10
c00104dc:	85 c0                	test   eax,eax
c00104de:	0f 94 c0             	sete   al
c00104e1:	84 c0                	test   al,al
c00104e3:	74 07                	je     c00104ec <KeResolveCompatibilitySymbol(char*)+0x118>
c00104e5:	b8 50 c0 01 c0       	mov    eax,0xc001c050
c00104ea:	eb 74                	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104ec:	83 ec 08             	sub    esp,0x8
c00104ef:	68 ef e7 01 c0       	push   0xc001e7ef
c00104f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f8:	e8 e3 01 ff ff       	call   c00006e0 <strcmp>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	85 c0                	test   eax,eax
c0010502:	0f 94 c0             	sete   al
c0010505:	84 c0                	test   al,al
c0010507:	74 07                	je     c0010510 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010509:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001050e:	eb 50                	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010510:	83 ec 08             	sub    esp,0x8
c0010513:	68 07 e8 01 c0       	push   0xc001e807
c0010518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051c:	e8 bf 01 ff ff       	call   c00006e0 <strcmp>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	85 c0                	test   eax,eax
c0010526:	0f 94 c0             	sete   al
c0010529:	84 c0                	test   al,al
c001052b:	74 07                	je     c0010534 <KeResolveCompatibilitySymbol(char*)+0x160>
c001052d:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010532:	eb 2c                	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	68 14 e8 01 c0       	push   0xc001e814
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	e8 9b 01 ff ff       	call   c00006e0 <strcmp>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	0f 94 c0             	sete   al
c001054d:	84 c0                	test   al,al
c001054f:	74 07                	je     c0010558 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010551:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c0010556:	eb 08                	jmp    c0010560 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010558:	b8 00 00 00 00       	mov    eax,0x0
c001055d:	8d 76 00             	lea    esi,[esi+0x0]
c0010560:	83 c4 0c             	add    esp,0xc
c0010563:	c3                   	ret    

c0010564 <KiSigKill(int)>:
c0010564:	57                   	push   edi
c0010565:	b9 0a 00 00 00       	mov    ecx,0xa
c001056a:	56                   	push   esi
c001056b:	be 5d e8 01 c0       	mov    esi,0xc001e85d
c0010570:	83 ec 14             	sub    esp,0x14
c0010573:	8d 7c 24 06          	lea    edi,[esp+0x6]
c0010577:	fc                   	cld    
c0010578:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001057a:	8d 44 24 06          	lea    eax,[esp+0x6]
c001057e:	50                   	push   eax
c001057f:	6a 00                	push   0x0
c0010581:	6a 00                	push   0x0
c0010583:	6a 27                	push   0x27
c0010585:	e8 c8 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001058a:	83 c4 24             	add    esp,0x24
c001058d:	5e                   	pop    esi
c001058e:	5f                   	pop    edi
c001058f:	c3                   	ret    

c0010590 <KiDefaultSignalHandlerIgnore(int)>:
c0010590:	c3                   	ret    

c0010591 <KiDefaultSignalHandlerPause(int)>:
c0010591:	57                   	push   edi
c0010592:	b9 07 00 00 00       	mov    ecx,0x7
c0010597:	56                   	push   esi
c0010598:	be 67 e8 01 c0       	mov    esi,0xc001e867
c001059d:	83 ec 24             	sub    esp,0x24
c00105a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00105a4:	fc                   	cld    
c00105a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00105a7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00105ab:	50                   	push   eax
c00105ac:	6a 00                	push   0x0
c00105ae:	6a 00                	push   0x0
c00105b0:	6a 27                	push   0x27
c00105b2:	e8 9b fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105b7:	83 c4 34             	add    esp,0x34
c00105ba:	5e                   	pop    esi
c00105bb:	5f                   	pop    edi
c00105bc:	c3                   	ret    

c00105bd <KiDefaultSignalHandlerResume(int)>:
c00105bd:	57                   	push   edi
c00105be:	b9 1d 00 00 00       	mov    ecx,0x1d
c00105c3:	56                   	push   esi
c00105c4:	be 83 e8 01 c0       	mov    esi,0xc001e883
c00105c9:	83 ec 24             	sub    esp,0x24
c00105cc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00105d0:	fc                   	cld    
c00105d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d3:	8d 44 24 03          	lea    eax,[esp+0x3]
c00105d7:	50                   	push   eax
c00105d8:	6a 00                	push   0x0
c00105da:	6a 00                	push   0x0
c00105dc:	6a 27                	push   0x27
c00105de:	e8 6f fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105e3:	83 c4 34             	add    esp,0x34
c00105e6:	5e                   	pop    esi
c00105e7:	5f                   	pop    edi
c00105e8:	c3                   	ret    

c00105e9 <KeDeinitSignals(SigHandlerBlock*)>:
c00105e9:	e9 db 71 ff ff       	jmp    c00077c9 <free>

c00105ee <KeInitSignals()>:
c00105ee:	53                   	push   ebx
c00105ef:	83 ec 14             	sub    esp,0x14
c00105f2:	68 c8 00 00 00       	push   0xc8
c00105f7:	e8 bd 71 ff ff       	call   c00077b9 <malloc>
c00105fc:	83 c4 0c             	add    esp,0xc
c00105ff:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010609:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010613:	89 c3                	mov    ebx,eax
c0010615:	6a 20                	push   0x20
c0010617:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001061d:	6a 00                	push   0x0
c001061f:	50                   	push   eax
c0010620:	e8 ab fe fe ff       	call   c00004d0 <memset>
c0010625:	83 c4 0c             	add    esp,0xc
c0010628:	6a 44                	push   0x44
c001062a:	6a 00                	push   0x0
c001062c:	53                   	push   ebx
c001062d:	e8 9e fe fe ff       	call   c00004d0 <memset>
c0010632:	89 d8                	mov    eax,ebx
c0010634:	83 c4 18             	add    esp,0x18
c0010637:	5b                   	pop    ebx
c0010638:	c3                   	ret    

c0010639 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010639:	53                   	push   ebx
c001063a:	b8 01 00 00 00       	mov    eax,0x1
c001063f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010647:	83 f9 10             	cmp    ecx,0x10
c001064a:	7f 21                	jg     c001066d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001064c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001064f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010653:	89 03                	mov    DWORD PTR [ebx],eax
c0010655:	b8 01 00 00 00       	mov    eax,0x1
c001065a:	d3 e0                	shl    eax,cl
c001065c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010660:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010663:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001066b:	31 c0                	xor    eax,eax
c001066d:	5b                   	pop    ebx
c001066e:	c3                   	ret    

c001066f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001066f:	55                   	push   ebp
c0010670:	57                   	push   edi
c0010671:	bf 08 00 00 00       	mov    edi,0x8
c0010676:	56                   	push   esi
c0010677:	53                   	push   ebx
c0010678:	83 ec 18             	sub    esp,0x18
c001067b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001067f:	68 a0 e8 01 c0       	push   0xc001e8a0
c0010684:	e8 7a 9f ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010689:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010690:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010696:	83 c4 10             	add    esp,0x10
c0010699:	31 c9                	xor    ecx,ecx
c001069b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001069f:	99                   	cdq    
c00106a0:	f7 ff                	idiv   edi
c00106a2:	8d 42 24             	lea    eax,[edx+0x24]
c00106a5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00106a9:	85 f6                	test   esi,esi
c00106ab:	75 1a                	jne    c00106c7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00106ad:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00106b1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106b5:	50                   	push   eax
c00106b6:	50                   	push   eax
c00106b7:	52                   	push   edx
c00106b8:	68 b1 e8 01 c0       	push   0xc001e8b1
c00106bd:	e8 41 9f ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	eb 1b                	jmp    c00106e2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00106c7:	41                   	inc    ecx
c00106c8:	83 f9 08             	cmp    ecx,0x8
c00106cb:	75 ce                	jne    c001069b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00106cd:	83 ec 0c             	sub    esp,0xc
c00106d0:	be 01 00 00 00       	mov    esi,0x1
c00106d5:	68 d2 e8 01 c0       	push   0xc001e8d2
c00106da:	e8 24 9f ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	83 c4 0c             	add    esp,0xc
c00106e5:	89 f0                	mov    eax,esi
c00106e7:	5b                   	pop    ebx
c00106e8:	5e                   	pop    esi
c00106e9:	5f                   	pop    edi
c00106ea:	5d                   	pop    ebp
c00106eb:	c3                   	ret    

c00106ec <KeCheckSignal(SigHandlerBlock*)>:
c00106ec:	55                   	push   ebp
c00106ed:	57                   	push   edi
c00106ee:	56                   	push   esi
c00106ef:	53                   	push   ebx
c00106f0:	51                   	push   ecx
c00106f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106f5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00106fc:	75 07                	jne    c0010705 <KeCheckSignal(SigHandlerBlock*)+0x19>
c00106fe:	31 c0                	xor    eax,eax
c0010700:	e9 cc 00 00 00       	jmp    c00107d1 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010705:	31 c9                	xor    ecx,ecx
c0010707:	bf 08 00 00 00       	mov    edi,0x8
c001070c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010712:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010715:	99                   	cdq    
c0010716:	f7 ff                	idiv   edi
c0010718:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001071f:	85 d2                	test   edx,edx
c0010721:	0f 84 94 00 00 00    	je     c00107bb <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010727:	88 d1                	mov    cl,dl
c0010729:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001072f:	bf 01 00 00 00       	mov    edi,0x1
c0010734:	89 04 24             	mov    DWORD PTR [esp],eax
c0010737:	d3 e7                	shl    edi,cl
c0010739:	bd 01 00 00 00       	mov    ebp,0x1
c001073e:	31 c9                	xor    ecx,ecx
c0010740:	89 e8                	mov    eax,ebp
c0010742:	d3 e0                	shl    eax,cl
c0010744:	85 04 24             	test   DWORD PTR [esp],eax
c0010747:	74 06                	je     c001074f <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010749:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001074d:	75 af                	jne    c00106fe <KeCheckSignal(SigHandlerBlock*)+0x12>
c001074f:	41                   	inc    ecx
c0010750:	83 f9 11             	cmp    ecx,0x11
c0010753:	75 eb                	jne    c0010740 <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010755:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010758:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001075b:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010761:	09 f8                	or     eax,edi
c0010763:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001076e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010774:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001077b:	31 c0                	xor    eax,eax
c001077d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010785:	74 09                	je     c0010790 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010787:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001078e:	eb 06                	jmp    c0010796 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010790:	40                   	inc    eax
c0010791:	83 f8 08             	cmp    eax,0x8
c0010794:	75 e7                	jne    c001077d <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010796:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010799:	83 fa 09             	cmp    edx,0x9
c001079c:	75 07                	jne    c00107a5 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001079e:	b8 64 05 01 c0       	mov    eax,0xc0010564
c00107a3:	eb 2c                	jmp    c00107d1 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107a5:	83 f8 01             	cmp    eax,0x1
c00107a8:	0f 84 50 ff ff ff    	je     c00106fe <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107ae:	85 c0                	test   eax,eax
c00107b0:	75 1f                	jne    c00107d1 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107b2:	8b 04 95 c0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0540]
c00107b9:	eb 16                	jmp    c00107d1 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107bb:	46                   	inc    esi
c00107bc:	41                   	inc    ecx
c00107bd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00107c3:	83 f9 08             	cmp    ecx,0x8
c00107c6:	0f 85 40 ff ff ff    	jne    c001070c <KeCheckSignal(SigHandlerBlock*)+0x20>
c00107cc:	e9 2d ff ff ff       	jmp    c00106fe <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107d1:	5a                   	pop    edx
c00107d2:	5b                   	pop    ebx
c00107d3:	5e                   	pop    esi
c00107d4:	5f                   	pop    edi
c00107d5:	5d                   	pop    ebp
c00107d6:	c3                   	ret    

c00107d7 <KiCheckSignalZ>:
c00107d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107df:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00107e5:	e8 02 ff ff ff       	call   c00106ec <KeCheckSignal(SigHandlerBlock*)>
c00107ea:	5a                   	pop    edx
c00107eb:	c3                   	ret    

c00107ec <KeCompleteSignal(SigHandlerBlock*, int)>:
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	bb 01 00 00 00       	mov    ebx,0x1
c00107f3:	52                   	push   edx
c00107f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107fc:	d3 e3                	shl    ebx,cl
c00107fe:	83 f9 10             	cmp    ecx,0x10
c0010801:	7f 08                	jg     c001080b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010803:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010809:	75 10                	jne    c001081b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	68 e3 e8 01 c0       	push   0xc001e8e3
c0010813:	e8 6b fa ff ff       	call   c0010283 <KePanic(char const*)>
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	f7 d3                	not    ebx
c001081d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010823:	58                   	pop    eax
c0010824:	5b                   	pop    ebx
c0010825:	5e                   	pop    esi
c0010826:	c3                   	ret    

c0010827 <SysSeekDir(regs*)>:
c0010827:	31 c0                	xor    eax,eax
c0010829:	31 d2                	xor    edx,edx
c001082b:	c3                   	ret    

c001082c <SysTellDir(regs*)>:
c001082c:	31 c0                	xor    eax,eax
c001082e:	31 d2                	xor    edx,edx
c0010830:	c3                   	ret    

c0010831 <SysVerify(regs*)>:
c0010831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010835:	31 d2                	xor    edx,edx
c0010837:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001083a:	c3                   	ret    

c001083b <SysGetArgc(regs*)>:
c001083b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010840:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010843:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010849:	99                   	cdq    
c001084a:	c3                   	ret    

c001084b <SysTTYName(regs*)>:
c001084b:	b8 01 00 00 00       	mov    eax,0x1
c0010850:	31 d2                	xor    edx,edx
c0010852:	c3                   	ret    

c0010853 <SysFormatDisk(regs*)>:
c0010853:	56                   	push   esi
c0010854:	53                   	push   ebx
c0010855:	50                   	push   eax
c0010856:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001085a:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c0010860:	eb 28                	jmp    c001088a <SysFormatDisk(regs*)+0x37>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010868:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001086b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001086d:	51                   	push   ecx
c001086e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001087a:	50                   	push   eax
c001087b:	53                   	push   ebx
c001087c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001087f:	83 c4 20             	add    esp,0x20
c0010882:	83 f8 08             	cmp    eax,0x8
c0010885:	75 12                	jne    c0010899 <SysFormatDisk(regs*)+0x46>
c0010887:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001088a:	85 db                	test   ebx,ebx
c001088c:	75 d4                	jne    c0010862 <SysFormatDisk(regs*)+0xf>
c001088e:	59                   	pop    ecx
c001088f:	b8 03 00 00 00       	mov    eax,0x3
c0010894:	31 d2                	xor    edx,edx
c0010896:	5b                   	pop    ebx
c0010897:	5e                   	pop    esi
c0010898:	c3                   	ret    
c0010899:	85 c0                	test   eax,eax
c001089b:	74 1b                	je     c00108b8 <SysFormatDisk(regs*)+0x65>
c001089d:	83 f8 09             	cmp    eax,0x9
c00108a0:	74 0b                	je     c00108ad <SysFormatDisk(regs*)+0x5a>
c00108a2:	59                   	pop    ecx
c00108a3:	b8 02 00 00 00       	mov    eax,0x2
c00108a8:	31 d2                	xor    edx,edx
c00108aa:	5b                   	pop    ebx
c00108ab:	5e                   	pop    esi
c00108ac:	c3                   	ret    
c00108ad:	59                   	pop    ecx
c00108ae:	b8 01 00 00 00       	mov    eax,0x1
c00108b3:	31 d2                	xor    edx,edx
c00108b5:	5b                   	pop    ebx
c00108b6:	5e                   	pop    esi
c00108b7:	c3                   	ret    
c00108b8:	59                   	pop    ecx
c00108b9:	31 c0                	xor    eax,eax
c00108bb:	31 d2                	xor    edx,edx
c00108bd:	5b                   	pop    ebx
c00108be:	5e                   	pop    esi
c00108bf:	c3                   	ret    

c00108c0 <SysSetDiskVolumeLabel(regs*)>:
c00108c0:	56                   	push   esi
c00108c1:	53                   	push   ebx
c00108c2:	53                   	push   ebx
c00108c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108c7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108ca:	83 f8 19             	cmp    eax,0x19
c00108cd:	77 2d                	ja     c00108fc <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108cf:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00108d6:	85 c9                	test   ecx,ecx
c00108d8:	74 22                	je     c00108fc <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108da:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108dd:	85 db                	test   ebx,ebx
c00108df:	74 1b                	je     c00108fc <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108e1:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108e7:	85 d2                	test   edx,edx
c00108e9:	74 11                	je     c00108fc <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108eb:	8b 32                	mov    esi,DWORD PTR [edx]
c00108ed:	53                   	push   ebx
c00108ee:	50                   	push   eax
c00108ef:	51                   	push   ecx
c00108f0:	52                   	push   edx
c00108f1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	99                   	cdq    
c00108f8:	59                   	pop    ecx
c00108f9:	5b                   	pop    ebx
c00108fa:	5e                   	pop    esi
c00108fb:	c3                   	ret    
c00108fc:	59                   	pop    ecx
c00108fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010902:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010907:	5b                   	pop    ebx
c0010908:	5e                   	pop    esi
c0010909:	c3                   	ret    

c001090a <SysGetDiskVolumeLabel(regs*)>:
c001090a:	57                   	push   edi
c001090b:	56                   	push   esi
c001090c:	53                   	push   ebx
c001090d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010911:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010914:	83 fa 19             	cmp    edx,0x19
c0010917:	77 38                	ja     c0010951 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010919:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c0010920:	85 c9                	test   ecx,ecx
c0010922:	74 2d                	je     c0010951 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010924:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010927:	85 db                	test   ebx,ebx
c0010929:	74 26                	je     c0010951 <SysGetDiskVolumeLabel(regs*)+0x47>
c001092b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001092e:	85 f6                	test   esi,esi
c0010930:	74 1f                	je     c0010951 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010932:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010938:	85 c0                	test   eax,eax
c001093a:	74 15                	je     c0010951 <SysGetDiskVolumeLabel(regs*)+0x47>
c001093c:	83 ec 0c             	sub    esp,0xc
c001093f:	8b 38                	mov    edi,DWORD PTR [eax]
c0010941:	56                   	push   esi
c0010942:	53                   	push   ebx
c0010943:	52                   	push   edx
c0010944:	51                   	push   ecx
c0010945:	50                   	push   eax
c0010946:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010949:	83 c4 20             	add    esp,0x20
c001094c:	99                   	cdq    
c001094d:	5b                   	pop    ebx
c001094e:	5e                   	pop    esi
c001094f:	5f                   	pop    edi
c0010950:	c3                   	ret    
c0010951:	5b                   	pop    ebx
c0010952:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010957:	ba ff ff ff ff       	mov    edx,0xffffffff
c001095c:	5e                   	pop    esi
c001095d:	5f                   	pop    edi
c001095e:	c3                   	ret    

c001095f <SysShutdown(regs*)>:
c001095f:	83 ec 0c             	sub    esp,0xc
c0010962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010966:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010969:	85 c0                	test   eax,eax
c001096b:	74 18                	je     c0010985 <SysShutdown(regs*)+0x26>
c001096d:	83 f8 01             	cmp    eax,0x1
c0010970:	74 38                	je     c00109aa <SysShutdown(regs*)+0x4b>
c0010972:	83 f8 02             	cmp    eax,0x2
c0010975:	74 24                	je     c001099b <SysShutdown(regs*)+0x3c>
c0010977:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001097c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010981:	83 c4 0c             	add    esp,0xc
c0010984:	c3                   	ret    
c0010985:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001098a:	8b 10                	mov    edx,DWORD PTR [eax]
c001098c:	6a 00                	push   0x0
c001098e:	6a 00                	push   0x0
c0010990:	6a 00                	push   0x0
c0010992:	50                   	push   eax
c0010993:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	eb dc                	jmp    c0010977 <SysShutdown(regs*)+0x18>
c001099b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00109a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00109a2:	6a 00                	push   0x0
c00109a4:	6a 00                	push   0x0
c00109a6:	6a 01                	push   0x1
c00109a8:	eb e8                	jmp    c0010992 <SysShutdown(regs*)+0x33>
c00109aa:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00109af:	85 c0                	test   eax,eax
c00109b1:	74 02                	je     c00109b5 <SysShutdown(regs*)+0x56>
c00109b3:	ff d0                	call   eax
c00109b5:	31 c0                	xor    eax,eax
c00109b7:	31 d2                	xor    edx,edx
c00109b9:	83 c4 0c             	add    esp,0xc
c00109bc:	c3                   	ret    

c00109bd <SysRealpath(regs*)>:
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109c7:	85 d2                	test   edx,edx
c00109c9:	74 07                	je     c00109d2 <SysRealpath(regs*)+0x15>
c00109cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109ce:	85 c0                	test   eax,eax
c00109d0:	75 0b                	jne    c00109dd <SysRealpath(regs*)+0x20>
c00109d2:	b8 01 00 00 00       	mov    eax,0x1
c00109d7:	31 d2                	xor    edx,edx
c00109d9:	83 c4 0c             	add    esp,0xc
c00109dc:	c3                   	ret    
c00109dd:	51                   	push   ecx
c00109de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109e4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109e7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109ed:	51                   	push   ecx
c00109ee:	52                   	push   edx
c00109ef:	50                   	push   eax
c00109f0:	e8 d9 9f ff ff       	call   c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	31 c0                	xor    eax,eax
c00109fa:	31 d2                	xor    edx,edx
c00109fc:	83 c4 0c             	add    esp,0xc
c00109ff:	c3                   	ret    

c0010a00 <SysReadDir(regs*)>:
c0010a00:	53                   	push   ebx
c0010a01:	83 ec 18             	sub    esp,0x18
c0010a04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a08:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a0b:	83 f8 02             	cmp    eax,0x2
c0010a0e:	76 61                	jbe    c0010a71 <SysReadDir(regs*)+0x71>
c0010a10:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a17:	77 49                	ja     c0010a62 <SysReadDir(regs*)+0x62>
c0010a19:	83 ec 0c             	sub    esp,0xc
c0010a1c:	50                   	push   eax
c0010a1d:	e8 0d 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	85 c0                	test   eax,eax
c0010a27:	74 39                	je     c0010a62 <SysReadDir(regs*)+0x62>
c0010a29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a36:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a3a:	51                   	push   ecx
c0010a3b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a3e:	51                   	push   ecx
c0010a3f:	6a 00                	push   0x0
c0010a41:	68 10 01 00 00       	push   0x110
c0010a46:	50                   	push   eax
c0010a47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a4a:	83 c4 20             	add    esp,0x20
c0010a4d:	85 c0                	test   eax,eax
c0010a4f:	74 29                	je     c0010a7a <SysReadDir(regs*)+0x7a>
c0010a51:	83 f8 07             	cmp    eax,0x7
c0010a54:	74 1b                	je     c0010a71 <SysReadDir(regs*)+0x71>
c0010a56:	b8 02 00 00 00       	mov    eax,0x2
c0010a5b:	31 d2                	xor    edx,edx
c0010a5d:	83 c4 18             	add    esp,0x18
c0010a60:	5b                   	pop    ebx
c0010a61:	c3                   	ret    
c0010a62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a6c:	83 c4 18             	add    esp,0x18
c0010a6f:	5b                   	pop    ebx
c0010a70:	c3                   	ret    
c0010a71:	b8 01 00 00 00       	mov    eax,0x1
c0010a76:	31 d2                	xor    edx,edx
c0010a78:	eb e3                	jmp    c0010a5d <SysReadDir(regs*)+0x5d>
c0010a7a:	31 c0                	xor    eax,eax
c0010a7c:	31 d2                	xor    edx,edx
c0010a7e:	eb dd                	jmp    c0010a5d <SysReadDir(regs*)+0x5d>

c0010a80 <SysIsATTY(regs*)>:
c0010a80:	83 ec 0c             	sub    esp,0xc
c0010a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a8a:	83 f8 02             	cmp    eax,0x2
c0010a8d:	76 07                	jbe    c0010a96 <SysIsATTY(regs*)+0x16>
c0010a8f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a94:	75 28                	jne    c0010abe <SysIsATTY(regs*)+0x3e>
c0010a96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	74 26                	je     c0010ace <SysIsATTY(regs*)+0x4e>
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aad:	50                   	push   eax
c0010aae:	ff 12                	call   DWORD PTR [edx]
c0010ab0:	31 d2                	xor    edx,edx
c0010ab2:	25 ff 00 00 00       	and    eax,0xff
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	83 c4 0c             	add    esp,0xc
c0010abd:	c3                   	ret    
c0010abe:	83 ec 0c             	sub    esp,0xc
c0010ac1:	50                   	push   eax
c0010ac2:	e8 68 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010ac7:	83 c4 10             	add    esp,0x10
c0010aca:	85 c0                	test   eax,eax
c0010acc:	75 da                	jne    c0010aa8 <SysIsATTY(regs*)+0x28>
c0010ace:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ad3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ad8:	83 c4 0c             	add    esp,0xc
c0010adb:	c3                   	ret    

c0010adc <SysSeek(regs*)>:
c0010adc:	53                   	push   ebx
c0010add:	83 ec 08             	sub    esp,0x8
c0010ae0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ae4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ae7:	8d 50 fd             	lea    edx,[eax-0x3]
c0010aea:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010af0:	77 34                	ja     c0010b26 <SysSeek(regs*)+0x4a>
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	50                   	push   eax
c0010af6:	e8 34 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010afb:	83 c4 0c             	add    esp,0xc
c0010afe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b01:	31 db                	xor    ebx,ebx
c0010b03:	53                   	push   ebx
c0010b04:	51                   	push   ecx
c0010b05:	50                   	push   eax
c0010b06:	e8 eb a1 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	85 c0                	test   eax,eax
c0010b10:	0f 95 c0             	setne  al
c0010b13:	31 d2                	xor    edx,edx
c0010b15:	25 ff 00 00 00       	and    eax,0xff
c0010b1a:	f7 d8                	neg    eax
c0010b1c:	83 d2 00             	adc    edx,0x0
c0010b1f:	83 c4 08             	add    esp,0x8
c0010b22:	f7 da                	neg    edx
c0010b24:	5b                   	pop    ebx
c0010b25:	c3                   	ret    
c0010b26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b30:	83 c4 08             	add    esp,0x8
c0010b33:	5b                   	pop    ebx
c0010b34:	c3                   	ret    

c0010b35 <SysTell(regs*)>:
c0010b35:	53                   	push   ebx
c0010b36:	83 ec 08             	sub    esp,0x8
c0010b39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b40:	83 f8 02             	cmp    eax,0x2
c0010b43:	76 50                	jbe    c0010b95 <SysTell(regs*)+0x60>
c0010b45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b4a:	76 19                	jbe    c0010b65 <SysTell(regs*)+0x30>
c0010b4c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b4f:	31 d2                	xor    edx,edx
c0010b51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b5e:	31 c0                	xor    eax,eax
c0010b60:	83 c4 08             	add    esp,0x8
c0010b63:	5b                   	pop    ebx
c0010b64:	c3                   	ret    
c0010b65:	83 ec 0c             	sub    esp,0xc
c0010b68:	50                   	push   eax
c0010b69:	e8 c1 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b6e:	5a                   	pop    edx
c0010b6f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b72:	59                   	pop    ecx
c0010b73:	53                   	push   ebx
c0010b74:	50                   	push   eax
c0010b75:	e8 d2 a1 ff ff       	call   c000ad4c <File::tell(unsigned long long*)>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	85 c0                	test   eax,eax
c0010b7f:	0f 95 c0             	setne  al
c0010b82:	31 d2                	xor    edx,edx
c0010b84:	25 ff 00 00 00       	and    eax,0xff
c0010b89:	f7 d8                	neg    eax
c0010b8b:	83 d2 00             	adc    edx,0x0
c0010b8e:	83 c4 08             	add    esp,0x8
c0010b91:	f7 da                	neg    edx
c0010b93:	5b                   	pop    ebx
c0010b94:	c3                   	ret    
c0010b95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b9f:	83 c4 08             	add    esp,0x8
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <SysSize(regs*)>:
c0010ba4:	53                   	push   ebx
c0010ba5:	83 ec 18             	sub    esp,0x18
c0010ba8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010baf:	83 f8 02             	cmp    eax,0x2
c0010bb2:	76 56                	jbe    c0010c0a <SysSize(regs*)+0x66>
c0010bb4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bb9:	76 19                	jbe    c0010bd4 <SysSize(regs*)+0x30>
c0010bbb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bbe:	31 d2                	xor    edx,edx
c0010bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	83 c4 18             	add    esp,0x18
c0010bd2:	5b                   	pop    ebx
c0010bd3:	c3                   	ret    
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	50                   	push   eax
c0010bd8:	e8 52 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010bdd:	83 c4 0c             	add    esp,0xc
c0010be0:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010be4:	52                   	push   edx
c0010be5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010be8:	52                   	push   edx
c0010be9:	50                   	push   eax
c0010bea:	e8 f5 a2 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	85 c0                	test   eax,eax
c0010bf4:	0f 95 c0             	setne  al
c0010bf7:	31 d2                	xor    edx,edx
c0010bf9:	25 ff 00 00 00       	and    eax,0xff
c0010bfe:	f7 d8                	neg    eax
c0010c00:	83 d2 00             	adc    edx,0x0
c0010c03:	83 c4 18             	add    esp,0x18
c0010c06:	f7 da                	neg    edx
c0010c08:	5b                   	pop    ebx
c0010c09:	c3                   	ret    
c0010c0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c14:	83 c4 18             	add    esp,0x18
c0010c17:	5b                   	pop    ebx
c0010c18:	c3                   	ret    

c0010c19 <SysSizeFromFilename(regs*)>:
c0010c19:	57                   	push   edi
c0010c1a:	56                   	push   esi
c0010c1b:	53                   	push   ebx
c0010c1c:	83 ec 20             	sub    esp,0x20
c0010c1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c23:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c26:	83 fb 02             	cmp    ebx,0x2
c0010c29:	0f 86 8c 00 00 00    	jbe    c0010cbb <SysSizeFromFilename(regs*)+0xa2>
c0010c2f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c35:	76 1b                	jbe    c0010c52 <SysSizeFromFilename(regs*)+0x39>
c0010c37:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c3a:	31 d2                	xor    edx,edx
c0010c3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c49:	83 c4 20             	add    esp,0x20
c0010c4c:	31 c0                	xor    eax,eax
c0010c4e:	5b                   	pop    ebx
c0010c4f:	5e                   	pop    esi
c0010c50:	5f                   	pop    edi
c0010c51:	c3                   	ret    
c0010c52:	83 ec 0c             	sub    esp,0xc
c0010c55:	68 14 01 00 00       	push   0x114
c0010c5a:	e8 5a 6b ff ff       	call   c00077b9 <malloc>
c0010c5f:	83 c4 0c             	add    esp,0xc
c0010c62:	89 c7                	mov    edi,eax
c0010c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c6c:	50                   	push   eax
c0010c6d:	53                   	push   ebx
c0010c6e:	57                   	push   edi
c0010c6f:	e8 04 9f ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0010c74:	83 c4 0c             	add    esp,0xc
c0010c77:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c7b:	50                   	push   eax
c0010c7c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c7f:	52                   	push   edx
c0010c80:	57                   	push   edi
c0010c81:	e8 5e a2 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	85 ff                	test   edi,edi
c0010c8b:	74 14                	je     c0010ca1 <SysSizeFromFilename(regs*)+0x88>
c0010c8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c91:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c93:	83 ec 0c             	sub    esp,0xc
c0010c96:	57                   	push   edi
c0010c97:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ca1:	85 c0                	test   eax,eax
c0010ca3:	0f 95 c0             	setne  al
c0010ca6:	31 d2                	xor    edx,edx
c0010ca8:	25 ff 00 00 00       	and    eax,0xff
c0010cad:	f7 d8                	neg    eax
c0010caf:	83 d2 00             	adc    edx,0x0
c0010cb2:	83 c4 20             	add    esp,0x20
c0010cb5:	f7 da                	neg    edx
c0010cb7:	5b                   	pop    ebx
c0010cb8:	5e                   	pop    esi
c0010cb9:	5f                   	pop    edi
c0010cba:	c3                   	ret    
c0010cbb:	83 c4 20             	add    esp,0x20
c0010cbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cc3:	5b                   	pop    ebx
c0010cc4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cc9:	5e                   	pop    esi
c0010cca:	5f                   	pop    edi
c0010ccb:	c3                   	ret    

c0010ccc <SysClose(regs*)>:
c0010ccc:	53                   	push   ebx
c0010ccd:	83 ec 08             	sub    esp,0x8
c0010cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cd7:	83 f8 02             	cmp    eax,0x2
c0010cda:	76 41                	jbe    c0010d1d <SysClose(regs*)+0x51>
c0010cdc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010ce2:	83 fa 01             	cmp    edx,0x1
c0010ce5:	76 2d                	jbe    c0010d14 <SysClose(regs*)+0x48>
c0010ce7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cec:	77 2f                	ja     c0010d1d <SysClose(regs*)+0x51>
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	50                   	push   eax
c0010cf2:	e8 38 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010cf7:	89 c3                	mov    ebx,eax
c0010cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cfc:	e8 95 9f ff ff       	call   c000ac96 <File::close()>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	85 db                	test   ebx,ebx
c0010d06:	74 0c                	je     c0010d14 <SysClose(regs*)+0x48>
c0010d08:	83 ec 0c             	sub    esp,0xc
c0010d0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d0d:	53                   	push   ebx
c0010d0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d11:	83 c4 10             	add    esp,0x10
c0010d14:	31 c0                	xor    eax,eax
c0010d16:	31 d2                	xor    edx,edx
c0010d18:	83 c4 08             	add    esp,0x8
c0010d1b:	5b                   	pop    ebx
c0010d1c:	c3                   	ret    
c0010d1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d27:	83 c4 08             	add    esp,0x8
c0010d2a:	5b                   	pop    ebx
c0010d2b:	c3                   	ret    

c0010d2c <SysOpenDir(regs*)>:
c0010d2c:	57                   	push   edi
c0010d2d:	56                   	push   esi
c0010d2e:	53                   	push   ebx
c0010d2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d33:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d36:	85 c0                	test   eax,eax
c0010d38:	0f 84 e7 00 00 00    	je     c0010e25 <SysOpenDir(regs*)+0xf9>
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d44:	56                   	push   esi
c0010d45:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d48:	57                   	push   edi
c0010d49:	50                   	push   eax
c0010d4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010d4d:	50                   	push   eax
c0010d4e:	68 f4 e8 01 c0       	push   0xc001e8f4
c0010d53:	e8 ab 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010d58:	83 c4 18             	add    esp,0x18
c0010d5b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d5e:	50                   	push   eax
c0010d5f:	68 1a e9 01 c0       	push   0xc001e91a
c0010d64:	e8 9a 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010d69:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010d70:	e8 44 6a ff ff       	call   c00077b9 <malloc>
c0010d75:	83 c4 0c             	add    esp,0xc
c0010d78:	89 c6                	mov    esi,eax
c0010d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d82:	50                   	push   eax
c0010d83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d86:	50                   	push   eax
c0010d87:	56                   	push   esi
c0010d88:	e8 15 a3 ff ff       	call   c000b0a2 <Directory::Directory(char const*, Process*)>
c0010d8d:	c7 04 24 0e f7 01 c0 	mov    DWORD PTR [esp],0xc001f70e
c0010d94:	e8 6a 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010d99:	83 c4 10             	add    esp,0x10
c0010d9c:	85 f6                	test   esi,esi
c0010d9e:	0f 84 8f 00 00 00    	je     c0010e33 <SysOpenDir(regs*)+0x107>
c0010da4:	83 ec 0c             	sub    esp,0xc
c0010da7:	68 2f e9 01 c0       	push   0xc001e92f
c0010dac:	e8 52 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010db1:	58                   	pop    eax
c0010db2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010db5:	5a                   	pop    edx
c0010db6:	51                   	push   ecx
c0010db7:	68 33 e9 01 c0       	push   0xc001e933
c0010dbc:	e8 42 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010dc1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dc4:	e8 99 a3 ff ff       	call   c000b162 <Directory::open()>
c0010dc9:	c7 04 24 2b d7 01 c0 	mov    DWORD PTR [esp],0xc001d72b
c0010dd0:	89 c7                	mov    edi,eax
c0010dd2:	e8 2c 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	85 ff                	test   edi,edi
c0010ddc:	75 37                	jne    c0010e15 <SysOpenDir(regs*)+0xe9>
c0010dde:	83 ec 0c             	sub    esp,0xc
c0010de1:	68 44 e9 01 c0       	push   0xc001e944
c0010de6:	e8 18 98 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010deb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dee:	e8 47 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010df3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010df6:	89 02                	mov    DWORD PTR [edx],eax
c0010df8:	c1 f8 1f             	sar    eax,0x1f
c0010dfb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dfe:	c7 04 24 48 e9 01 c0 	mov    DWORD PTR [esp],0xc001e948
c0010e05:	e8 f9 97 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	31 c0                	xor    eax,eax
c0010e0f:	5b                   	pop    ebx
c0010e10:	31 d2                	xor    edx,edx
c0010e12:	5e                   	pop    esi
c0010e13:	5f                   	pop    edi
c0010e14:	c3                   	ret    
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	68 40 e9 01 c0       	push   0xc001e940
c0010e1d:	e8 e1 97 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	5b                   	pop    ebx
c0010e26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e30:	5e                   	pop    esi
c0010e31:	5f                   	pop    edi
c0010e32:	c3                   	ret    
c0010e33:	83 ec 0c             	sub    esp,0xc
c0010e36:	68 2b e9 01 c0       	push   0xc001e92b
c0010e3b:	eb e0                	jmp    c0010e1d <SysOpenDir(regs*)+0xf1>

c0010e3d <SysCloseDir(regs*)>:
c0010e3d:	53                   	push   ebx
c0010e3e:	83 ec 08             	sub    esp,0x8
c0010e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e48:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e4b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e51:	77 2f                	ja     c0010e82 <SysCloseDir(regs*)+0x45>
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	50                   	push   eax
c0010e57:	e8 d3 82 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010e5c:	89 c3                	mov    ebx,eax
c0010e5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e61:	e8 58 a3 ff ff       	call   c000b1be <Directory::close()>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	85 db                	test   ebx,ebx
c0010e6b:	74 0c                	je     c0010e79 <SysCloseDir(regs*)+0x3c>
c0010e6d:	83 ec 0c             	sub    esp,0xc
c0010e70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e72:	53                   	push   ebx
c0010e73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	31 c0                	xor    eax,eax
c0010e7b:	31 d2                	xor    edx,edx
c0010e7d:	83 c4 08             	add    esp,0x8
c0010e80:	5b                   	pop    ebx
c0010e81:	c3                   	ret    
c0010e82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e8c:	83 c4 08             	add    esp,0x8
c0010e8f:	5b                   	pop    ebx
c0010e90:	c3                   	ret    

c0010e91 <SysMakeDir(regs*)>:
c0010e91:	56                   	push   esi
c0010e92:	53                   	push   ebx
c0010e93:	83 ec 10             	sub    esp,0x10
c0010e96:	68 14 01 00 00       	push   0x114
c0010e9b:	e8 19 69 ff ff       	call   c00077b9 <malloc>
c0010ea0:	83 c4 0c             	add    esp,0xc
c0010ea3:	89 c3                	mov    ebx,eax
c0010ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eaa:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ead:	56                   	push   esi
c0010eae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010eb2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010eb5:	50                   	push   eax
c0010eb6:	53                   	push   ebx
c0010eb7:	e8 e6 a1 ff ff       	call   c000b0a2 <Directory::Directory(char const*, Process*)>
c0010ebc:	83 c4 10             	add    esp,0x10
c0010ebf:	85 db                	test   ebx,ebx
c0010ec1:	74 32                	je     c0010ef5 <SysMakeDir(regs*)+0x64>
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	53                   	push   ebx
c0010ec7:	e8 76 a4 ff ff       	call   c000b342 <Directory::create()>
c0010ecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ecf:	89 c6                	mov    esi,eax
c0010ed1:	e8 e8 a2 ff ff       	call   c000b1be <Directory::close()>
c0010ed6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010edb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	31 c0                	xor    eax,eax
c0010ee3:	59                   	pop    ecx
c0010ee4:	85 f6                	test   esi,esi
c0010ee6:	5b                   	pop    ebx
c0010ee7:	0f 95 c0             	setne  al
c0010eea:	5e                   	pop    esi
c0010eeb:	31 d2                	xor    edx,edx
c0010eed:	f7 d8                	neg    eax
c0010eef:	83 d2 00             	adc    edx,0x0
c0010ef2:	f7 da                	neg    edx
c0010ef4:	c3                   	ret    
c0010ef5:	59                   	pop    ecx
c0010ef6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010efb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f00:	5b                   	pop    ebx
c0010f01:	5e                   	pop    esi
c0010f02:	c3                   	ret    

c0010f03 <SysWait(regs*)>:
c0010f03:	83 ec 10             	sub    esp,0x10
c0010f06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f0a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f0d:	52                   	push   edx
c0010f0e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f11:	51                   	push   ecx
c0010f12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f15:	50                   	push   eax
c0010f16:	e8 89 2b 00 00       	call   c0013aa4 <waitTask(int, int*, int)>
c0010f1b:	83 c4 1c             	add    esp,0x1c
c0010f1e:	99                   	cdq    
c0010f1f:	c3                   	ret    

c0010f20 <SysNotImpl(regs*)>:
c0010f20:	83 ec 18             	sub    esp,0x18
c0010f23:	68 4c e9 01 c0       	push   0xc001e94c
c0010f28:	e8 56 f3 ff ff       	call   c0010283 <KePanic(char const*)>
c0010f2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f37:	83 c4 1c             	add    esp,0x1c
c0010f3a:	c3                   	ret    

c0010f3b <SysPanic(regs*)>:
c0010f3b:	83 ec 18             	sub    esp,0x18
c0010f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f42:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f45:	50                   	push   eax
c0010f46:	e8 38 f3 ff ff       	call   c0010283 <KePanic(char const*)>
c0010f4b:	b8 01 00 00 00       	mov    eax,0x1
c0010f50:	31 d2                	xor    edx,edx
c0010f52:	83 c4 1c             	add    esp,0x1c
c0010f55:	c3                   	ret    

c0010f56 <SysRmdir(regs*)>:
c0010f56:	56                   	push   esi
c0010f57:	53                   	push   ebx
c0010f58:	83 ec 20             	sub    esp,0x20
c0010f5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f5f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f62:	68 14 01 00 00       	push   0x114
c0010f67:	e8 4d 68 ff ff       	call   c00077b9 <malloc>
c0010f6c:	83 c4 0c             	add    esp,0xc
c0010f6f:	89 c3                	mov    ebx,eax
c0010f71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f79:	50                   	push   eax
c0010f7a:	56                   	push   esi
c0010f7b:	53                   	push   ebx
c0010f7c:	e8 f7 9b ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0010f81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f84:	e8 27 9e ff ff       	call   c000adb0 <File::unlink()>
c0010f89:	83 c4 10             	add    esp,0x10
c0010f8c:	85 db                	test   ebx,ebx
c0010f8e:	74 14                	je     c0010fa4 <SysRmdir(regs*)+0x4e>
c0010f90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f94:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f96:	83 ec 0c             	sub    esp,0xc
c0010f99:	53                   	push   ebx
c0010f9a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f9d:	83 c4 10             	add    esp,0x10
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	85 c0                	test   eax,eax
c0010fa6:	0f 95 c0             	setne  al
c0010fa9:	31 d2                	xor    edx,edx
c0010fab:	25 ff 00 00 00       	and    eax,0xff
c0010fb0:	f7 d8                	neg    eax
c0010fb2:	83 d2 00             	adc    edx,0x0
c0010fb5:	83 c4 14             	add    esp,0x14
c0010fb8:	f7 da                	neg    edx
c0010fba:	5b                   	pop    ebx
c0010fbb:	5e                   	pop    esi
c0010fbc:	c3                   	ret    

c0010fbd <SysUnlink(regs*)>:
c0010fbd:	56                   	push   esi
c0010fbe:	53                   	push   ebx
c0010fbf:	83 ec 20             	sub    esp,0x20
c0010fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fc6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fc9:	68 14 01 00 00       	push   0x114
c0010fce:	e8 e6 67 ff ff       	call   c00077b9 <malloc>
c0010fd3:	83 c4 0c             	add    esp,0xc
c0010fd6:	89 c3                	mov    ebx,eax
c0010fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fdd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fe0:	50                   	push   eax
c0010fe1:	56                   	push   esi
c0010fe2:	53                   	push   ebx
c0010fe3:	e8 90 9b ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0010fe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010feb:	e8 c0 9d ff ff       	call   c000adb0 <File::unlink()>
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	85 db                	test   ebx,ebx
c0010ff5:	74 14                	je     c001100b <SysUnlink(regs*)+0x4e>
c0010ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ffb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ffd:	83 ec 0c             	sub    esp,0xc
c0011000:	53                   	push   ebx
c0011001:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011004:	83 c4 10             	add    esp,0x10
c0011007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001100b:	85 c0                	test   eax,eax
c001100d:	0f 95 c0             	setne  al
c0011010:	31 d2                	xor    edx,edx
c0011012:	25 ff 00 00 00       	and    eax,0xff
c0011017:	f7 d8                	neg    eax
c0011019:	83 d2 00             	adc    edx,0x0
c001101c:	83 c4 14             	add    esp,0x14
c001101f:	f7 da                	neg    edx
c0011021:	5b                   	pop    ebx
c0011022:	5e                   	pop    esi
c0011023:	c3                   	ret    

c0011024 <SysGetArgv(regs*)>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001102b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001102e:	85 c0                	test   eax,eax
c0011030:	78 2c                	js     c001105e <SysGetArgv(regs*)+0x3a>
c0011032:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011038:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001103b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011041:	7d 1b                	jge    c001105e <SysGetArgv(regs*)+0x3a>
c0011043:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001104a:	85 c0                	test   eax,eax
c001104c:	74 18                	je     c0011066 <SysGetArgv(regs*)+0x42>
c001104e:	83 ec 08             	sub    esp,0x8
c0011051:	50                   	push   eax
c0011052:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011055:	50                   	push   eax
c0011056:	e8 a5 f5 fe ff       	call   c0000600 <strcpy>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	31 c0                	xor    eax,eax
c0011060:	31 d2                	xor    edx,edx
c0011062:	83 c4 0c             	add    esp,0xc
c0011065:	c3                   	ret    
c0011066:	b8 01 00 00 00       	mov    eax,0x1
c001106b:	31 d2                	xor    edx,edx
c001106d:	83 c4 0c             	add    esp,0xc
c0011070:	c3                   	ret    

c0011071 <SysUSleep(regs*)>:
c0011071:	83 ec 1c             	sub    esp,0x1c
c0011074:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011078:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001107b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001107e:	6a 00                	push   0x0
c0011080:	6a 64                	push   0x64
c0011082:	52                   	push   edx
c0011083:	50                   	push   eax
c0011084:	e8 47 b1 00 00       	call   c001c1d0 <__udivdi3>
c0011089:	83 c4 14             	add    esp,0x14
c001108c:	50                   	push   eax
c001108d:	e8 e6 2a 00 00       	call   c0013b78 <milliTenthSleep(unsigned int)>
c0011092:	31 c0                	xor    eax,eax
c0011094:	31 d2                	xor    edx,edx
c0011096:	83 c4 1c             	add    esp,0x1c
c0011099:	c3                   	ret    

c001109a <SysSpawn(regs*)>:
c001109a:	56                   	push   esi
c001109b:	53                   	push   ebx
c001109c:	50                   	push   eax
c001109d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00110a4:	85 c0                	test   eax,eax
c00110a6:	75 08                	jne    c00110b0 <SysSpawn(regs*)+0x16>
c00110a8:	59                   	pop    ecx
c00110a9:	31 c0                	xor    eax,eax
c00110ab:	31 d2                	xor    edx,edx
c00110ad:	5b                   	pop    ebx
c00110ae:	5e                   	pop    esi
c00110af:	c3                   	ret    
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	68 24 07 00 00       	push   0x724
c00110b8:	e8 fc 66 ff ff       	call   c00077b9 <malloc>
c00110bd:	83 c4 10             	add    esp,0x10
c00110c0:	89 c6                	mov    esi,eax
c00110c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110c8:	85 c0                	test   eax,eax
c00110ca:	75 33                	jne    c00110ff <SysSpawn(regs*)+0x65>
c00110cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d4:	52                   	push   edx
c00110d5:	50                   	push   eax
c00110d6:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110d9:	53                   	push   ebx
c00110da:	56                   	push   esi
c00110db:	e8 44 21 00 00       	call   c0013224 <Process::Process(char const*, Process*, char**)>
c00110e0:	83 c4 10             	add    esp,0x10
c00110e3:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00110ea:	75 bc                	jne    c00110a8 <SysSpawn(regs*)+0xe>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	56                   	push   esi
c00110f0:	e8 5b 26 00 00       	call   c0013750 <Process::createUserThread()>
c00110f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	99                   	cdq    
c00110fb:	59                   	pop    ecx
c00110fc:	5b                   	pop    ebx
c00110fd:	5e                   	pop    esi
c00110fe:	c3                   	ret    
c00110ff:	31 c0                	xor    eax,eax
c0011101:	eb d1                	jmp    c00110d4 <SysSpawn(regs*)+0x3a>

c0011103 <SysGetEnv(regs*)>:
c0011103:	57                   	push   edi
c0011104:	56                   	push   esi
c0011105:	53                   	push   ebx
c0011106:	83 ec 1c             	sub    esp,0x1c
c0011109:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001110d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011112:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011115:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011118:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001111b:	50                   	push   eax
c001111c:	e8 1a f0 ff ff       	call   c001013b <Krnl::getProcessTotalEnvCount(Process*)>
c0011121:	83 c4 10             	add    esp,0x10
c0011124:	39 c7                	cmp    edi,eax
c0011126:	7c 14                	jl     c001113c <SysGetEnv(regs*)+0x39>
c0011128:	85 f6                	test   esi,esi
c001112a:	75 0b                	jne    c0011137 <SysGetEnv(regs*)+0x34>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	31 c0                	xor    eax,eax
c0011131:	5b                   	pop    ebx
c0011132:	31 d2                	xor    edx,edx
c0011134:	5e                   	pop    esi
c0011135:	5f                   	pop    edi
c0011136:	c3                   	ret    
c0011137:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001113a:	eb f0                	jmp    c001112c <SysGetEnv(regs*)+0x29>
c001113c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011140:	52                   	push   edx
c0011141:	57                   	push   edi
c0011142:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011148:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001114b:	51                   	push   ecx
c001114c:	50                   	push   eax
c001114d:	e8 09 f0 ff ff       	call   c001015b <Krnl::getProcessEnvPair(Process*, int)>
c0011152:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011159:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001115d:	83 c4 0c             	add    esp,0xc
c0011160:	85 db                	test   ebx,ebx
c0011162:	75 23                	jne    c0011187 <SysGetEnv(regs*)+0x84>
c0011164:	83 ec 0c             	sub    esp,0xc
c0011167:	50                   	push   eax
c0011168:	e8 d3 f3 fe ff       	call   c0000540 <strlen>
c001116d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011170:	89 c3                	mov    ebx,eax
c0011172:	e8 c9 f3 fe ff       	call   c0000540 <strlen>
c0011177:	31 d2                	xor    edx,edx
c0011179:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001117d:	83 c4 10             	add    esp,0x10
c0011180:	83 c4 10             	add    esp,0x10
c0011183:	5b                   	pop    ebx
c0011184:	5e                   	pop    esi
c0011185:	5f                   	pop    edi
c0011186:	c3                   	ret    
c0011187:	83 ec 08             	sub    esp,0x8
c001118a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001118d:	50                   	push   eax
c001118e:	56                   	push   esi
c001118f:	e8 6c f4 fe ff       	call   c0000600 <strcpy>
c0011194:	58                   	pop    eax
c0011195:	5a                   	pop    edx
c0011196:	68 66 e9 01 c0       	push   0xc001e966
c001119b:	56                   	push   esi
c001119c:	e8 1f f6 fe ff       	call   c00007c0 <strcat>
c00111a1:	59                   	pop    ecx
c00111a2:	5b                   	pop    ebx
c00111a3:	57                   	push   edi
c00111a4:	56                   	push   esi
c00111a5:	e8 16 f6 fe ff       	call   c00007c0 <strcat>
c00111aa:	83 c4 10             	add    esp,0x10
c00111ad:	e9 7a ff ff ff       	jmp    c001112c <SysGetEnv(regs*)+0x29>

c00111b2 <SysSetFatAttrib(regs*)>:
c00111b2:	57                   	push   edi
c00111b3:	56                   	push   esi
c00111b4:	53                   	push   ebx
c00111b5:	83 ec 1c             	sub    esp,0x1c
c00111b8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111bc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111bf:	68 14 01 00 00       	push   0x114
c00111c4:	e8 f0 65 ff ff       	call   c00077b9 <malloc>
c00111c9:	83 c4 0c             	add    esp,0xc
c00111cc:	89 c3                	mov    ebx,eax
c00111ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111d6:	50                   	push   eax
c00111d7:	57                   	push   edi
c00111d8:	53                   	push   ebx
c00111d9:	e8 9a 99 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c00111de:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111e1:	83 c4 0c             	add    esp,0xc
c00111e4:	0f b6 d4             	movzx  edx,ah
c00111e7:	25 ff 00 00 00       	and    eax,0xff
c00111ec:	52                   	push   edx
c00111ed:	50                   	push   eax
c00111ee:	53                   	push   ebx
c00111ef:	e8 56 9c ff ff       	call   c000ae4a <File::chfatattr(unsigned char, unsigned char)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	85 db                	test   ebx,ebx
c00111f9:	74 14                	je     c001120f <SysSetFatAttrib(regs*)+0x5d>
c00111fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011201:	83 ec 0c             	sub    esp,0xc
c0011204:	53                   	push   ebx
c0011205:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001120f:	85 c0                	test   eax,eax
c0011211:	0f 95 c0             	setne  al
c0011214:	31 d2                	xor    edx,edx
c0011216:	25 ff 00 00 00       	and    eax,0xff
c001121b:	f7 d8                	neg    eax
c001121d:	83 d2 00             	adc    edx,0x0
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	f7 da                	neg    edx
c0011225:	5b                   	pop    ebx
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    

c0011229 <SysPipe(regs*)>:
c0011229:	57                   	push   edi
c001122a:	56                   	push   esi
c001122b:	53                   	push   ebx
c001122c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011230:	83 ec 0c             	sub    esp,0xc
c0011233:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011236:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011239:	6a 20                	push   0x20
c001123b:	e8 79 65 ff ff       	call   c00077b9 <malloc>
c0011240:	89 c3                	mov    ebx,eax
c0011242:	58                   	pop    eax
c0011243:	5a                   	pop    edx
c0011244:	68 00 50 00 00       	push   0x5000
c0011249:	53                   	push   ebx
c001124a:	e8 6f 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c001124f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011252:	e8 e3 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011257:	89 07                	mov    DWORD PTR [edi],eax
c0011259:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001125c:	e8 d9 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	89 06                	mov    DWORD PTR [esi],eax
c0011266:	31 d2                	xor    edx,edx
c0011268:	5b                   	pop    ebx
c0011269:	31 c0                	xor    eax,eax
c001126b:	5e                   	pop    esi
c001126c:	5f                   	pop    edi
c001126d:	c3                   	ret    

c001126e <SysGetUnixTime(regs*)>:
c001126e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011273:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011279:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001127d:	e9 04 a3 ff ff       	jmp    c000b586 <Clock::timeInSecondsLocal()>

c0011282 <string_ends_with(char const*, char const*)>:
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011289:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001128d:	83 ec 0c             	sub    esp,0xc
c0011290:	53                   	push   ebx
c0011291:	e8 aa f2 fe ff       	call   c0000540 <strlen>
c0011296:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011299:	89 c6                	mov    esi,eax
c001129b:	e8 a0 f2 fe ff       	call   c0000540 <strlen>
c00112a0:	83 c4 10             	add    esp,0x10
c00112a3:	39 c6                	cmp    esi,eax
c00112a5:	7d 06                	jge    c00112ad <string_ends_with(char const*, char const*)+0x2b>
c00112a7:	5b                   	pop    ebx
c00112a8:	31 c0                	xor    eax,eax
c00112aa:	5e                   	pop    esi
c00112ab:	5f                   	pop    edi
c00112ac:	c3                   	ret    
c00112ad:	83 ec 08             	sub    esp,0x8
c00112b0:	29 c6                	sub    esi,eax
c00112b2:	57                   	push   edi
c00112b3:	01 f3                	add    ebx,esi
c00112b5:	53                   	push   ebx
c00112b6:	e8 25 f4 fe ff       	call   c00006e0 <strcmp>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	85 c0                	test   eax,eax
c00112c0:	5b                   	pop    ebx
c00112c1:	0f 94 c0             	sete   al
c00112c4:	5e                   	pop    esi
c00112c5:	25 ff 00 00 00       	and    eax,0xff
c00112ca:	5f                   	pop    edi
c00112cb:	c3                   	ret    

c00112cc <SysOpen(regs*)>:
c00112cc:	56                   	push   esi
c00112cd:	53                   	push   ebx
c00112ce:	81 ec 04 01 00 00    	sub    esp,0x104
c00112d4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112db:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00112de:	85 d2                	test   edx,edx
c00112e0:	0f 84 cc 01 00 00    	je     c00114b2 <SysOpen(regs*)+0x1e6>
c00112e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e9:	85 c0                	test   eax,eax
c00112eb:	0f 84 c1 01 00 00    	je     c00114b2 <SysOpen(regs*)+0x1e6>
c00112f1:	83 ec 08             	sub    esp,0x8
c00112f4:	50                   	push   eax
c00112f5:	68 68 e9 01 c0       	push   0xc001e968
c00112fa:	e8 04 93 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00112ff:	83 c4 0c             	add    esp,0xc
c0011302:	68 75 e9 01 c0       	push   0xc001e975
c0011307:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001130a:	50                   	push   eax
c001130b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001130f:	56                   	push   esi
c0011310:	e8 b9 96 ff ff       	call   c000a9ce <Fs::standardiseFiles(char*, char const*, char const*)>
c0011315:	89 34 24             	mov    DWORD PTR [esp],esi
c0011318:	e8 23 f2 fe ff       	call   c0000540 <strlen>
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	48                   	dec    eax
c0011321:	74 1d                	je     c0011340 <SysOpen(regs*)+0x74>
c0011323:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011326:	eb 0f                	jmp    c0011337 <SysOpen(regs*)+0x6b>
c0011328:	80 fa 3a             	cmp    dl,0x3a
c001132b:	74 0f                	je     c001133c <SysOpen(regs*)+0x70>
c001132d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011331:	48                   	dec    eax
c0011332:	74 0c                	je     c0011340 <SysOpen(regs*)+0x74>
c0011334:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011337:	80 fa 2e             	cmp    dl,0x2e
c001133a:	75 ec                	jne    c0011328 <SysOpen(regs*)+0x5c>
c001133c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	68 79 e9 01 c0       	push   0xc001e979
c0011348:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001134b:	50                   	push   eax
c001134c:	e8 31 ff ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	85 c0                	test   eax,eax
c0011356:	74 1d                	je     c0011375 <SysOpen(regs*)+0xa9>
c0011358:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001135b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011361:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011368:	81 c4 04 01 00 00    	add    esp,0x104
c001136e:	31 c0                	xor    eax,eax
c0011370:	31 d2                	xor    edx,edx
c0011372:	5b                   	pop    ebx
c0011373:	5e                   	pop    esi
c0011374:	c3                   	ret    
c0011375:	83 ec 08             	sub    esp,0x8
c0011378:	68 7e e9 01 c0       	push   0xc001e97e
c001137d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011380:	50                   	push   eax
c0011381:	e8 fc fe ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	85 c0                	test   eax,eax
c001138b:	75 cb                	jne    c0011358 <SysOpen(regs*)+0x8c>
c001138d:	83 ec 08             	sub    esp,0x8
c0011390:	68 7a e9 01 c0       	push   0xc001e97a
c0011395:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011398:	50                   	push   eax
c0011399:	e8 42 f3 fe ff       	call   c00006e0 <strcmp>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	85 c0                	test   eax,eax
c00113a3:	74 b3                	je     c0011358 <SysOpen(regs*)+0x8c>
c00113a5:	83 ec 08             	sub    esp,0x8
c00113a8:	68 79 e9 01 c0       	push   0xc001e979
c00113ad:	56                   	push   esi
c00113ae:	e8 cf fe ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c00113b3:	83 c4 10             	add    esp,0x10
c00113b6:	85 c0                	test   eax,eax
c00113b8:	75 9e                	jne    c0011358 <SysOpen(regs*)+0x8c>
c00113ba:	83 ec 08             	sub    esp,0x8
c00113bd:	68 83 e9 01 c0       	push   0xc001e983
c00113c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113c5:	50                   	push   eax
c00113c6:	e8 b7 fe ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	85 c0                	test   eax,eax
c00113d0:	0f 85 ef 00 00 00    	jne    c00114c5 <SysOpen(regs*)+0x1f9>
c00113d6:	83 ec 08             	sub    esp,0x8
c00113d9:	68 88 e9 01 c0       	push   0xc001e988
c00113de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113e1:	50                   	push   eax
c00113e2:	e8 9b fe ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	85 c0                	test   eax,eax
c00113ec:	0f 85 d3 00 00 00    	jne    c00114c5 <SysOpen(regs*)+0x1f9>
c00113f2:	83 ec 08             	sub    esp,0x8
c00113f5:	68 84 e9 01 c0       	push   0xc001e984
c00113fa:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113fd:	51                   	push   ecx
c00113fe:	e8 dd f2 fe ff       	call   c00006e0 <strcmp>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	85 c0                	test   eax,eax
c0011408:	0f 84 b7 00 00 00    	je     c00114c5 <SysOpen(regs*)+0x1f9>
c001140e:	83 ec 08             	sub    esp,0x8
c0011411:	68 83 e9 01 c0       	push   0xc001e983
c0011416:	56                   	push   esi
c0011417:	e8 66 fe ff ff       	call   c0011282 <string_ends_with(char const*, char const*)>
c001141c:	83 c4 10             	add    esp,0x10
c001141f:	85 c0                	test   eax,eax
c0011421:	0f 85 9e 00 00 00    	jne    c00114c5 <SysOpen(regs*)+0x1f9>
c0011427:	83 ec 0c             	sub    esp,0xc
c001142a:	68 14 01 00 00       	push   0x114
c001142f:	e8 85 63 ff ff       	call   c00077b9 <malloc>
c0011434:	83 c4 0c             	add    esp,0xc
c0011437:	89 c6                	mov    esi,eax
c0011439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001143e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011441:	50                   	push   eax
c0011442:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011445:	52                   	push   edx
c0011446:	56                   	push   esi
c0011447:	e8 2c 97 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	85 f6                	test   esi,esi
c0011451:	74 5f                	je     c00114b2 <SysOpen(regs*)+0x1e6>
c0011453:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011456:	89 d0                	mov    eax,edx
c0011458:	25 ff 00 00 00       	and    eax,0xff
c001145d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011460:	89 d0                	mov    eax,edx
c0011462:	83 e0 01             	and    eax,0x1
c0011465:	f6 c2 02             	test   dl,0x2
c0011468:	74 03                	je     c001146d <SysOpen(regs*)+0x1a1>
c001146a:	83 c8 02             	or     eax,0x2
c001146d:	f6 c2 04             	test   dl,0x4
c0011470:	74 03                	je     c0011475 <SysOpen(regs*)+0x1a9>
c0011472:	83 c8 04             	or     eax,0x4
c0011475:	f6 c2 08             	test   dl,0x8
c0011478:	74 03                	je     c001147d <SysOpen(regs*)+0x1b1>
c001147a:	83 c8 0a             	or     eax,0xa
c001147d:	83 e2 10             	and    edx,0x10
c0011480:	74 03                	je     c0011485 <SysOpen(regs*)+0x1b9>
c0011482:	83 c8 12             	or     eax,0x12
c0011485:	83 ec 08             	sub    esp,0x8
c0011488:	50                   	push   eax
c0011489:	56                   	push   esi
c001148a:	e8 a9 97 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	85 c0                	test   eax,eax
c0011494:	75 1c                	jne    c00114b2 <SysOpen(regs*)+0x1e6>
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	56                   	push   esi
c001149a:	e8 9b 79 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001149f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	89 02                	mov    DWORD PTR [edx],eax
c00114a7:	c1 f8 1f             	sar    eax,0x1f
c00114aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114ad:	e9 b6 fe ff ff       	jmp    c0011368 <SysOpen(regs*)+0x9c>
c00114b2:	81 c4 04 01 00 00    	add    esp,0x104
c00114b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c2:	5b                   	pop    ebx
c00114c3:	5e                   	pop    esi
c00114c4:	c3                   	ret    
c00114c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114c8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114ce:	e9 8e fe ff ff       	jmp    c0011361 <SysOpen(regs*)+0x95>

c00114d3 <KeSystemCall(regs*, void*)>:
c00114d3:	53                   	push   ebx
c00114d4:	83 ec 10             	sub    esp,0x10
c00114d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00114db:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00114de:	68 8d e9 01 c0       	push   0xc001e98d
c00114e3:	e8 1b 91 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00114e8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00114eb:	83 c4 10             	add    esp,0x10
c00114ee:	83 f8 32             	cmp    eax,0x32
c00114f1:	77 16                	ja     c0011509 <KeSystemCall(regs*, void*)+0x36>
c00114f3:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c00114fa:	85 d2                	test   edx,edx
c00114fc:	74 0b                	je     c0011509 <KeSystemCall(regs*, void*)+0x36>
c00114fe:	83 ec 0c             	sub    esp,0xc
c0011501:	53                   	push   ebx
c0011502:	ff d2                	call   edx
c0011504:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011507:	eb 0d                	jmp    c0011516 <KeSystemCall(regs*, void*)+0x43>
c0011509:	52                   	push   edx
c001150a:	52                   	push   edx
c001150b:	50                   	push   eax
c001150c:	68 9d e9 01 c0       	push   0xc001e99d
c0011511:	e8 ed 90 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001151e:	31 d2                	xor    edx,edx
c0011520:	83 c4 08             	add    esp,0x8
c0011523:	5b                   	pop    ebx
c0011524:	c3                   	ret    

c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011525:	55                   	push   ebp
c0011526:	57                   	push   edi
c0011527:	56                   	push   esi
c0011528:	53                   	push   ebx
c0011529:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001152f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011536:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011538:	8d 6e 01             	lea    ebp,[esi+0x1]
c001153b:	80 fb 40             	cmp    bl,0x40
c001153e:	75 1b                	jne    c001155b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011540:	8a 16                	mov    dl,BYTE PTR [esi]
c0011542:	84 d2                	test   dl,dl
c0011544:	0f 84 f1 00 00 00    	je     c001163b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001154a:	8d 46 01             	lea    eax,[esi+0x1]
c001154d:	80 fa 3a             	cmp    dl,0x3a
c0011550:	74 04                	je     c0011556 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011552:	89 c6                	mov    esi,eax
c0011554:	eb ea                	jmp    c0011540 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011556:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011559:	89 c6                	mov    esi,eax
c001155b:	50                   	push   eax
c001155c:	6a 40                	push   0x40
c001155e:	6a 00                	push   0x0
c0011560:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011564:	50                   	push   eax
c0011565:	e8 66 ef fe ff       	call   c00004d0 <memset>
c001156a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011571:	31 c0                	xor    eax,eax
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011578:	84 c9                	test   cl,cl
c001157a:	0f 84 bb 00 00 00    	je     c001163b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011580:	3d c7 00 00 00       	cmp    eax,0xc7
c0011585:	0f 8f b0 00 00 00    	jg     c001163b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001158b:	80 f9 0a             	cmp    cl,0xa
c001158e:	0f 85 98 00 00 00    	jne    c001162c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011594:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011599:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001159d:	a8 df                	test   al,0xdf
c001159f:	0f 94 c1             	sete   cl
c00115a2:	3c 23                	cmp    al,0x23
c00115a4:	0f 94 c2             	sete   dl
c00115a7:	08 d1                	or     cl,dl
c00115a9:	75 4a                	jne    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115ab:	8d 50 f7             	lea    edx,[eax-0x9]
c00115ae:	80 fa 01             	cmp    dl,0x1
c00115b1:	76 42                	jbe    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115b3:	3c 5b                	cmp    al,0x5b
c00115b5:	75 42                	jne    c00115f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00115b7:	80 fb 40             	cmp    bl,0x40
c00115ba:	75 39                	jne    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115bc:	83 ec 0c             	sub    esp,0xc
c00115bf:	8d 54 24 65          	lea    edx,[esp+0x65]
c00115c3:	52                   	push   edx
c00115c4:	e8 77 ef fe ff       	call   c0000540 <strlen>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	83 f8 3f             	cmp    eax,0x3f
c00115cf:	77 6a                	ja     c001163b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115d1:	50                   	push   eax
c00115d2:	50                   	push   eax
c00115d3:	8d 54 24 61          	lea    edx,[esp+0x61]
c00115d7:	52                   	push   edx
c00115d8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115dc:	52                   	push   edx
c00115dd:	e8 1e f0 fe ff       	call   c0000600 <strcpy>
c00115e2:	58                   	pop    eax
c00115e3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115e7:	52                   	push   edx
c00115e8:	e8 53 ef fe ff       	call   c0000540 <strlen>
c00115ed:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	31 d2                	xor    edx,edx
c00115f7:	eb 3a                	jmp    c0011633 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00115f9:	80 fb 40             	cmp    bl,0x40
c00115fc:	74 06                	je     c0011604 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00115fe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011602:	eb 20                	jmp    c0011624 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011604:	50                   	push   eax
c0011605:	50                   	push   eax
c0011606:	55                   	push   ebp
c0011607:	8d 44 24 24          	lea    eax,[esp+0x24]
c001160b:	50                   	push   eax
c001160c:	e8 cf f0 fe ff       	call   c00006e0 <strcmp>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	85 c0                	test   eax,eax
c0011616:	75 dd                	jne    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011618:	eb e4                	jmp    c00115fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001161a:	8d 50 01             	lea    edx,[eax+0x1]
c001161d:	80 f9 3d             	cmp    cl,0x3d
c0011620:	74 1d                	je     c001163f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011622:	89 d0                	mov    eax,edx
c0011624:	8a 08                	mov    cl,BYTE PTR [eax]
c0011626:	84 c9                	test   cl,cl
c0011628:	75 f0                	jne    c001161a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001162a:	eb 0f                	jmp    c001163b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001162c:	8d 50 01             	lea    edx,[eax+0x1]
c001162f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011633:	47                   	inc    edi
c0011634:	89 d0                	mov    eax,edx
c0011636:	e9 3b ff ff ff       	jmp    c0011576 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001163b:	31 c0                	xor    eax,eax
c001163d:	eb 33                	jmp    c0011672 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001163f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011643:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011646:	50                   	push   eax
c0011647:	50                   	push   eax
c0011648:	8d 44 24 60          	lea    eax,[esp+0x60]
c001164c:	50                   	push   eax
c001164d:	56                   	push   esi
c001164e:	e8 8d f0 fe ff       	call   c00006e0 <strcmp>
c0011653:	83 c4 10             	add    esp,0x10
c0011656:	85 c0                	test   eax,eax
c0011658:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001165c:	75 97                	jne    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001165e:	51                   	push   ecx
c001165f:	51                   	push   ecx
c0011660:	52                   	push   edx
c0011661:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011668:	e8 93 ef fe ff       	call   c0000600 <strcpy>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	b0 01                	mov    al,0x1
c0011672:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011678:	5b                   	pop    ebx
c0011679:	5e                   	pop    esi
c001167a:	5f                   	pop    edi
c001167b:	5d                   	pop    ebp
c001167c:	c3                   	ret    

c001167d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001167d:	57                   	push   edi
c001167e:	56                   	push   esi
c001167f:	53                   	push   ebx
c0011680:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011686:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001168d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011694:	53                   	push   ebx
c0011695:	e8 a6 ee fe ff       	call   c0000540 <strlen>
c001169a:	89 34 24             	mov    DWORD PTR [esp],esi
c001169d:	89 c7                	mov    edi,eax
c001169f:	e8 9c ee fe ff       	call   c0000540 <strlen>
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00116ab:	3d ff 00 00 00       	cmp    eax,0xff
c00116b0:	0f 87 d3 00 00 00    	ja     c0011789 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116b6:	57                   	push   edi
c00116b7:	57                   	push   edi
c00116b8:	56                   	push   esi
c00116b9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00116bd:	56                   	push   esi
c00116be:	e8 3d ef fe ff       	call   c0000600 <strcpy>
c00116c3:	58                   	pop    eax
c00116c4:	5a                   	pop    edx
c00116c5:	68 5a ec 01 c0       	push   0xc001ec5a
c00116ca:	56                   	push   esi
c00116cb:	e8 f0 f0 fe ff       	call   c00007c0 <strcat>
c00116d0:	59                   	pop    ecx
c00116d1:	5f                   	pop    edi
c00116d2:	53                   	push   ebx
c00116d3:	56                   	push   esi
c00116d4:	e8 e7 f0 fe ff       	call   c00007c0 <strcat>
c00116d9:	58                   	pop    eax
c00116da:	5a                   	pop    edx
c00116db:	68 b1 e9 01 c0       	push   0xc001e9b1
c00116e0:	56                   	push   esi
c00116e1:	e8 da f0 fe ff       	call   c00007c0 <strcat>
c00116e6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116ed:	e8 c7 60 ff ff       	call   c00077b9 <malloc>
c00116f2:	83 c4 0c             	add    esp,0xc
c00116f5:	89 c3                	mov    ebx,eax
c00116f7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00116fd:	56                   	push   esi
c00116fe:	50                   	push   eax
c00116ff:	e8 74 94 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	85 db                	test   ebx,ebx
c0011709:	74 7e                	je     c0011789 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001170b:	51                   	push   ecx
c001170c:	51                   	push   ecx
c001170d:	6a 01                	push   0x1
c001170f:	53                   	push   ebx
c0011710:	e8 23 95 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	85 c0                	test   eax,eax
c001171a:	74 08                	je     c0011724 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011721:	53                   	push   ebx
c0011722:	eb 5f                	jmp    c0011783 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011724:	52                   	push   edx
c0011725:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011729:	50                   	push   eax
c001172a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001172e:	50                   	push   eax
c001172f:	53                   	push   ebx
c0011730:	e8 af 97 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0011735:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011739:	83 c4 10             	add    esp,0x10
c001173c:	89 c1                	mov    ecx,eax
c001173e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011742:	74 31                	je     c0011775 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	50                   	push   eax
c0011748:	e8 6c 60 ff ff       	call   c00077b9 <malloc>
c001174d:	89 c6                	mov    esi,eax
c001174f:	58                   	pop    eax
c0011750:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011752:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011756:	52                   	push   edx
c0011757:	56                   	push   esi
c0011758:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001175c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011760:	53                   	push   ebx
c0011761:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011764:	83 c4 20             	add    esp,0x20
c0011767:	85 c0                	test   eax,eax
c0011769:	75 0a                	jne    c0011775 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001176b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001176f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011773:	74 18                	je     c001178d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011775:	83 ec 0c             	sub    esp,0xc
c0011778:	53                   	push   ebx
c0011779:	e8 18 95 ff ff       	call   c000ac96 <File::close()>
c001177e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011783:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	31 c0                	xor    eax,eax
c001178b:	eb 3b                	jmp    c00117c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	53                   	push   ebx
c0011791:	e8 00 95 ff ff       	call   c000ac96 <File::close()>
c0011796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011798:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001179b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001179e:	83 c4 0c             	add    esp,0xc
c00117a1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00117a8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00117af:	56                   	push   esi
c00117b0:	e8 70 fd ff ff       	call   c0011525 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00117b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00117b8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00117bc:	e8 08 60 ff ff       	call   c00077c9 <free>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117c8:	81 c4 20 01 00 00    	add    esp,0x120
c00117ce:	5b                   	pop    ebx
c00117cf:	5e                   	pop    esi
c00117d0:	5f                   	pop    edi
c00117d1:	c3                   	ret    

c00117d2 <Reg::getLine(char*, char*, char*)>:
c00117d2:	57                   	push   edi
c00117d3:	56                   	push   esi
c00117d4:	53                   	push   ebx
c00117d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00117dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117e1:	57                   	push   edi
c00117e2:	56                   	push   esi
c00117e3:	53                   	push   ebx
c00117e4:	68 b6 e9 01 c0       	push   0xc001e9b6
c00117e9:	e8 8f fe ff ff       	call   c001167d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117ee:	83 c4 10             	add    esp,0x10
c00117f1:	84 c0                	test   al,al
c00117f3:	75 10                	jne    c0011805 <Reg::getLine(char*, char*, char*)+0x33>
c00117f5:	57                   	push   edi
c00117f6:	56                   	push   esi
c00117f7:	53                   	push   ebx
c00117f8:	68 db e9 01 c0       	push   0xc001e9db
c00117fd:	e8 7b fe ff ff       	call   c001167d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	5b                   	pop    ebx
c0011806:	5e                   	pop    esi
c0011807:	5f                   	pop    edi
c0011808:	c3                   	ret    

c0011809 <Reg::readInt(char*, char*, int*)>:
c0011809:	55                   	push   ebp
c001180a:	57                   	push   edi
c001180b:	56                   	push   esi
c001180c:	53                   	push   ebx
c001180d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011813:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011817:	57                   	push   edi
c0011818:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001181f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011826:	e8 a7 ff ff ff       	call   c00117d2 <Reg::getLine(char*, char*, char*)>
c001182b:	83 c4 10             	add    esp,0x10
c001182e:	84 c0                	test   al,al
c0011830:	0f 84 b3 00 00 00    	je     c00118e9 <Reg::readInt(char*, char*, int*)+0xe0>
c0011836:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001183a:	80 fa 2b             	cmp    dl,0x2b
c001183d:	74 0c                	je     c001184b <Reg::readInt(char*, char*, int*)+0x42>
c001183f:	80 fa 2d             	cmp    dl,0x2d
c0011842:	75 0e                	jne    c0011852 <Reg::readInt(char*, char*, int*)+0x49>
c0011844:	ba 01 00 00 00       	mov    edx,0x1
c0011849:	eb 0b                	jmp    c0011856 <Reg::readInt(char*, char*, int*)+0x4d>
c001184b:	ba 01 00 00 00       	mov    edx,0x1
c0011850:	eb 02                	jmp    c0011854 <Reg::readInt(char*, char*, int*)+0x4b>
c0011852:	31 d2                	xor    edx,edx
c0011854:	31 c0                	xor    eax,eax
c0011856:	be 0a 00 00 00       	mov    esi,0xa
c001185b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011860:	75 20                	jne    c0011882 <Reg::readInt(char*, char*, int*)+0x79>
c0011862:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011866:	80 f9 78             	cmp    cl,0x78
c0011869:	75 0a                	jne    c0011875 <Reg::readInt(char*, char*, int*)+0x6c>
c001186b:	83 c2 02             	add    edx,0x2
c001186e:	be 10 00 00 00       	mov    esi,0x10
c0011873:	eb 0d                	jmp    c0011882 <Reg::readInt(char*, char*, int*)+0x79>
c0011875:	80 f9 62             	cmp    cl,0x62
c0011878:	75 08                	jne    c0011882 <Reg::readInt(char*, char*, int*)+0x79>
c001187a:	83 c2 02             	add    edx,0x2
c001187d:	be 02 00 00 00       	mov    esi,0x2
c0011882:	01 d7                	add    edi,edx
c0011884:	31 d2                	xor    edx,edx
c0011886:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011888:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001188c:	80 fb 0d             	cmp    bl,0xd
c001188f:	0f 94 c3             	sete   bl
c0011892:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011897:	0f 94 c1             	sete   cl
c001189a:	08 cb                	or     bl,cl
c001189c:	75 3a                	jne    c00118d8 <Reg::readInt(char*, char*, int*)+0xcf>
c001189e:	0f af d6             	imul   edx,esi
c00118a1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00118a6:	83 fe 10             	cmp    esi,0x10
c00118a9:	75 26                	jne    c00118d1 <Reg::readInt(char*, char*, int*)+0xc8>
c00118ab:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118af:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00118b2:	89 e9                	mov    ecx,ebp
c00118b4:	80 f9 05             	cmp    cl,0x5
c00118b7:	77 06                	ja     c00118bf <Reg::readInt(char*, char*, int*)+0xb6>
c00118b9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00118bd:	eb 16                	jmp    c00118d5 <Reg::readInt(char*, char*, int*)+0xcc>
c00118bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118c3:	83 e9 61             	sub    ecx,0x61
c00118c6:	80 f9 05             	cmp    cl,0x5
c00118c9:	77 06                	ja     c00118d1 <Reg::readInt(char*, char*, int*)+0xc8>
c00118cb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00118cf:	eb 04                	jmp    c00118d5 <Reg::readInt(char*, char*, int*)+0xcc>
c00118d1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00118d5:	47                   	inc    edi
c00118d6:	eb ae                	jmp    c0011886 <Reg::readInt(char*, char*, int*)+0x7d>
c00118d8:	84 c0                	test   al,al
c00118da:	74 02                	je     c00118de <Reg::readInt(char*, char*, int*)+0xd5>
c00118dc:	f7 da                	neg    edx
c00118de:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00118e5:	89 10                	mov    DWORD PTR [eax],edx
c00118e7:	88 d8                	mov    al,bl
c00118e9:	81 c4 ec 00 00 00    	add    esp,0xec
c00118ef:	5b                   	pop    ebx
c00118f0:	5e                   	pop    esi
c00118f1:	5f                   	pop    edi
c00118f2:	5d                   	pop    ebp
c00118f3:	c3                   	ret    

c00118f4 <Reg::readString(char*, char*, char*, int)>:
c00118f4:	57                   	push   edi
c00118f5:	56                   	push   esi
c00118f6:	53                   	push   ebx
c00118f7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00118fd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011904:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011908:	57                   	push   edi
c0011909:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011910:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011917:	e8 b6 fe ff ff       	call   c00117d2 <Reg::getLine(char*, char*, char*)>
c001191c:	83 c4 10             	add    esp,0x10
c001191f:	89 c6                	mov    esi,eax
c0011921:	84 c0                	test   al,al
c0011923:	74 44                	je     c0011969 <Reg::readString(char*, char*, char*, int)+0x75>
c0011925:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001192c:	31 c0                	xor    eax,eax
c001192e:	4a                   	dec    edx
c001192f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011932:	84 c9                	test   cl,cl
c0011934:	74 0f                	je     c0011945 <Reg::readString(char*, char*, char*, int)+0x51>
c0011936:	39 c2                	cmp    edx,eax
c0011938:	7e 0b                	jle    c0011945 <Reg::readString(char*, char*, char*, int)+0x51>
c001193a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001193d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011942:	40                   	inc    eax
c0011943:	eb ea                	jmp    c001192f <Reg::readString(char*, char*, char*, int)+0x3b>
c0011945:	83 ec 0c             	sub    esp,0xc
c0011948:	53                   	push   ebx
c0011949:	e8 f2 eb fe ff       	call   c0000540 <strlen>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011956:	75 11                	jne    c0011969 <Reg::readString(char*, char*, char*, int)+0x75>
c0011958:	83 ec 0c             	sub    esp,0xc
c001195b:	53                   	push   ebx
c001195c:	e8 df eb fe ff       	call   c0000540 <strlen>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011969:	81 c4 d0 00 00 00    	add    esp,0xd0
c001196f:	89 f0                	mov    eax,esi
c0011971:	5b                   	pop    ebx
c0011972:	5e                   	pop    esi
c0011973:	5f                   	pop    edi
c0011974:	c3                   	ret    

c0011975 <Reg::readBool(char*, char*, bool*)>:
c0011975:	83 ec 20             	sub    esp,0x20
c0011978:	8d 44 24 10          	lea    eax,[esp+0x10]
c001197c:	50                   	push   eax
c001197d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011985:	e8 7f fe ff ff       	call   c0011809 <Reg::readInt(char*, char*, int*)>
c001198a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001198f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011993:	0f 95 02             	setne  BYTE PTR [edx]
c0011996:	83 c4 2c             	add    esp,0x2c
c0011999:	c3                   	ret    

c001199a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001199a:	53                   	push   ebx
c001199b:	83 ec 1c             	sub    esp,0x1c
c001199e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00119a2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119a6:	50                   	push   eax
c00119a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119af:	e8 c1 ff ff ff       	call   c0011975 <Reg::readBool(char*, char*, bool*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	84 c0                	test   al,al
c00119b9:	74 04                	je     c00119bf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00119bb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00119bf:	88 d8                	mov    al,bl
c00119c1:	83 c4 18             	add    esp,0x18
c00119c4:	5b                   	pop    ebx
c00119c5:	c3                   	ret    

c00119c6 <Reg::readIntWithDefault(char*, char*, int)>:
c00119c6:	53                   	push   ebx
c00119c7:	83 ec 1c             	sub    esp,0x1c
c00119ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119d2:	50                   	push   eax
c00119d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119db:	e8 29 fe ff ff       	call   c0011809 <Reg::readInt(char*, char*, int*)>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	84 c0                	test   al,al
c00119e5:	74 04                	je     c00119eb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00119e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119eb:	89 d8                	mov    eax,ebx
c00119ed:	83 c4 18             	add    esp,0x18
c00119f0:	5b                   	pop    ebx
c00119f1:	c3                   	ret    

c00119f2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00119f2:	57                   	push   edi
c00119f3:	56                   	push   esi
c00119f4:	56                   	push   esi
c00119f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119f9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00119fd:	56                   	push   esi
c00119fe:	57                   	push   edi
c00119ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a07:	e8 e8 fe ff ff       	call   c00118f4 <Reg::readString(char*, char*, char*, int)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	84 c0                	test   al,al
c0011a11:	75 1a                	jne    c0011a2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011a13:	51                   	push   ecx
c0011a14:	56                   	push   esi
c0011a15:	6a 00                	push   0x0
c0011a17:	57                   	push   edi
c0011a18:	e8 b3 ea fe ff       	call   c00004d0 <memset>
c0011a1d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011a20:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a2d:	89 f8                	mov    eax,edi
c0011a2f:	5a                   	pop    edx
c0011a30:	5e                   	pop    esi
c0011a31:	5f                   	pop    edi
c0011a32:	c3                   	ret    

c0011a33 <SysEject(regs*)>:
c0011a33:	83 ec 0c             	sub    esp,0xc
c0011a36:	83 ca ff             	or     edx,0xffffffff
c0011a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a40:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a45:	83 e9 41             	sub    ecx,0x41
c0011a48:	83 f9 19             	cmp    ecx,0x19
c0011a4b:	77 18                	ja     c0011a65 <SysEject(regs*)+0x32>
c0011a4d:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011a54:	85 c9                	test   ecx,ecx
c0011a56:	74 0d                	je     c0011a65 <SysEject(regs*)+0x32>
c0011a58:	83 ec 0c             	sub    esp,0xc
c0011a5b:	51                   	push   ecx
c0011a5c:	e8 5d b2 ff ff       	call   c000ccbe <LogicalDisk::eject()>
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	99                   	cdq    
c0011a65:	83 c4 0c             	add    esp,0xc
c0011a68:	c3                   	ret    

c0011a69 <SysExit(regs*)>:
c0011a69:	83 ec 18             	sub    esp,0x18
c0011a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a70:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a73:	e8 24 27 00 00       	call   c001419c <terminateTask(int)>
c0011a78:	83 c8 ff             	or     eax,0xffffffff
c0011a7b:	83 c4 1c             	add    esp,0x1c
c0011a7e:	89 c2                	mov    edx,eax
c0011a80:	c3                   	ret    

c0011a81 <SysGetCwd(regs*)>:
c0011a81:	83 ec 10             	sub    esp,0x10
c0011a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a88:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a96:	e8 df 8e ff ff       	call   c000a97a <Fs::getcwd(Process*, char*, int)>
c0011a9b:	83 c4 1c             	add    esp,0x1c
c0011a9e:	99                   	cdq    
c0011a9f:	c3                   	ret    

c0011aa0 <SysGetPID(regs*)>:
c0011aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aaa:	99                   	cdq    
c0011aab:	c3                   	ret    

c0011aac <SysGetRAMData(regs*)>:
c0011aac:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011ab2:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011abc:	99                   	cdq    
c0011abd:	f7 f9                	idiv   ecx
c0011abf:	c1 e0 18             	shl    eax,0x18
c0011ac2:	09 c8                	or     eax,ecx
c0011ac4:	99                   	cdq    
c0011ac5:	c3                   	ret    

c0011ac6 <SysGetVGAPtr(regs*)>:
c0011ac6:	55                   	push   ebp
c0011ac7:	57                   	push   edi
c0011ac8:	56                   	push   esi
c0011ac9:	53                   	push   ebx
c0011aca:	83 ec 18             	sub    esp,0x18
c0011acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ad1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011ad4:	e8 c3 21 00 00       	call   c0013c9c <Thr::processFromPID(int)>
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	89 c1                	mov    ecx,eax
c0011ade:	b8 01 00 00 00       	mov    eax,0x1
c0011ae3:	85 c9                	test   ecx,ecx
c0011ae5:	74 57                	je     c0011b3e <SysGetVGAPtr(regs*)+0x78>
c0011ae7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011aed:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011af1:	74 0c                	je     c0011aff <SysGetVGAPtr(regs*)+0x39>
c0011af3:	83 ec 0c             	sub    esp,0xc
c0011af6:	55                   	push   ebp
c0011af7:	e8 fb 68 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011b02:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b05:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011b0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b0c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011b0f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b12:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011b18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b1b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011b1e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011b24:	50                   	push   eax
c0011b25:	50                   	push   eax
c0011b26:	68 f6 e9 01 c0       	push   0xc001e9f6
c0011b2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b2e:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b33:	50                   	push   eax
c0011b34:	e8 c7 ea fe ff       	call   c0000600 <strcpy>
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	31 c0                	xor    eax,eax
c0011b3e:	83 c4 0c             	add    esp,0xc
c0011b41:	31 d2                	xor    edx,edx
c0011b43:	5b                   	pop    ebx
c0011b44:	5e                   	pop    esi
c0011b45:	5f                   	pop    edi
c0011b46:	5d                   	pop    ebp
c0011b47:	c3                   	ret    

c0011b48 <SysLoadDLL(regs*)>:
c0011b48:	56                   	push   esi
c0011b49:	53                   	push   ebx
c0011b4a:	31 d2                	xor    edx,edx
c0011b4c:	51                   	push   ecx
c0011b4d:	b8 01 00 00 00       	mov    eax,0x1
c0011b52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b56:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011b5a:	0f 84 8c 00 00 00    	je     c0011bec <SysLoadDLL(regs*)+0xa4>
c0011b60:	83 ec 0c             	sub    esp,0xc
c0011b63:	68 14 01 00 00       	push   0x114
c0011b68:	e8 4c 5c ff ff       	call   c00077b9 <malloc>
c0011b6d:	83 c4 0c             	add    esp,0xc
c0011b70:	89 c3                	mov    ebx,eax
c0011b72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b7a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b7d:	53                   	push   ebx
c0011b7e:	e8 f5 8f ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	31 d2                	xor    edx,edx
c0011b88:	b8 02 00 00 00       	mov    eax,0x2
c0011b8d:	85 db                	test   ebx,ebx
c0011b8f:	74 5b                	je     c0011bec <SysLoadDLL(regs*)+0xa4>
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	53                   	push   ebx
c0011b95:	e8 0c 93 ff ff       	call   c000aea6 <File::exists()>
c0011b9a:	83 c4 10             	add    esp,0x10
c0011b9d:	84 c0                	test   al,al
c0011b9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ba1:	75 11                	jne    c0011bb4 <SysLoadDLL(regs*)+0x6c>
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	53                   	push   ebx
c0011ba7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	b8 03 00 00 00       	mov    eax,0x3
c0011bb2:	eb 36                	jmp    c0011bea <SysLoadDLL(regs*)+0xa2>
c0011bb4:	83 ec 0c             	sub    esp,0xc
c0011bb7:	53                   	push   ebx
c0011bb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bbb:	58                   	pop    eax
c0011bbc:	5a                   	pop    edx
c0011bbd:	6a 00                	push   0x0
c0011bbf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011bc2:	e8 86 12 00 00       	call   c0012e4d <Thr::loadDLL(char const*, bool)>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	89 c1                	mov    ecx,eax
c0011bcc:	31 d2                	xor    edx,edx
c0011bce:	b8 04 00 00 00       	mov    eax,0x4
c0011bd3:	85 c9                	test   ecx,ecx
c0011bd5:	74 15                	je     c0011bec <SysLoadDLL(regs*)+0xa4>
c0011bd7:	53                   	push   ebx
c0011bd8:	53                   	push   ebx
c0011bd9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011bdf:	51                   	push   ecx
c0011be0:	e8 99 14 00 00       	call   c001307e <Thr::executeDLL(unsigned long, void*)>
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	31 c0                	xor    eax,eax
c0011bea:	31 d2                	xor    edx,edx
c0011bec:	59                   	pop    ecx
c0011bed:	5b                   	pop    ebx
c0011bee:	5e                   	pop    esi
c0011bef:	c3                   	ret    

c0011bf0 <SysRead(regs*)>:
c0011bf0:	57                   	push   edi
c0011bf1:	56                   	push   esi
c0011bf2:	53                   	push   ebx
c0011bf3:	83 ec 10             	sub    esp,0x10
c0011bf6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bfa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bfd:	83 f8 02             	cmp    eax,0x2
c0011c00:	77 10                	ja     c0011c12 <SysRead(regs*)+0x22>
c0011c02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011c10:	eb 0e                	jmp    c0011c20 <SysRead(regs*)+0x30>
c0011c12:	83 ec 0c             	sub    esp,0xc
c0011c15:	50                   	push   eax
c0011c16:	e8 14 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011c1b:	83 c4 10             	add    esp,0x10
c0011c1e:	89 c1                	mov    ecx,eax
c0011c20:	83 c8 ff             	or     eax,0xffffffff
c0011c23:	85 c9                	test   ecx,ecx
c0011c25:	89 c2                	mov    edx,eax
c0011c27:	74 28                	je     c0011c51 <SysRead(regs*)+0x61>
c0011c29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c31:	31 ff                	xor    edi,edi
c0011c33:	83 ec 0c             	sub    esp,0xc
c0011c36:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011c38:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011c3c:	52                   	push   edx
c0011c3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011c40:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011c43:	57                   	push   edi
c0011c44:	56                   	push   esi
c0011c45:	51                   	push   ecx
c0011c46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c4d:	83 c4 20             	add    esp,0x20
c0011c50:	99                   	cdq    
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	5b                   	pop    ebx
c0011c55:	5e                   	pop    esi
c0011c56:	5f                   	pop    edi
c0011c57:	c3                   	ret    

c0011c58 <SysRegisterSignal(regs*)>:
c0011c58:	83 ec 18             	sub    esp,0x18
c0011c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c5f:	6a 00                	push   0x0
c0011c61:	6a 00                	push   0x0
c0011c63:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011c66:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c71:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c77:	e8 bd e9 ff ff       	call   c0010639 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c7c:	83 c4 2c             	add    esp,0x2c
c0011c7f:	99                   	cdq    
c0011c80:	c3                   	ret    

c0011c81 <SysSbrk(regs*)>:
c0011c81:	56                   	push   esi
c0011c82:	53                   	push   ebx
c0011c83:	83 ec 0c             	sub    esp,0xc
c0011c86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c8a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011c8d:	68 00 ea 01 c0       	push   0xc001ea00
c0011c92:	e8 6c 89 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0011c97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c9c:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011c9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ca2:	83 c4 10             	add    esp,0x10
c0011ca5:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011cab:	85 db                	test   ebx,ebx
c0011cad:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011cb0:	74 02                	je     c0011cb4 <SysSbrk(regs*)+0x33>
c0011cb2:	79 06                	jns    c0011cba <SysSbrk(regs*)+0x39>
c0011cb4:	89 f0                	mov    eax,esi
c0011cb6:	31 d2                	xor    edx,edx
c0011cb8:	eb 2a                	jmp    c0011ce4 <SysSbrk(regs*)+0x63>
c0011cba:	83 c8 ff             	or     eax,0xffffffff
c0011cbd:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011cc3:	89 c2                	mov    edx,eax
c0011cc5:	77 1d                	ja     c0011ce4 <SysSbrk(regs*)+0x63>
c0011cc7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011ccd:	50                   	push   eax
c0011cce:	c1 ea 0c             	shr    edx,0xc
c0011cd1:	68 07 0c 00 00       	push   0xc07
c0011cd6:	52                   	push   edx
c0011cd7:	51                   	push   ecx
c0011cd8:	e8 1f 7d ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011cdd:	89 f0                	mov    eax,esi
c0011cdf:	31 d2                	xor    edx,edx
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	59                   	pop    ecx
c0011ce5:	5b                   	pop    ebx
c0011ce6:	5e                   	pop    esi
c0011ce7:	c3                   	ret    

c0011ce8 <SysSetCwd(regs*)>:
c0011ce8:	83 ec 14             	sub    esp,0x14
c0011ceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cfa:	e8 46 92 ff ff       	call   c000af45 <Fs::setcwd(Process*, char*)>
c0011cff:	83 c4 1c             	add    esp,0x1c
c0011d02:	99                   	cdq    
c0011d03:	c3                   	ret    

c0011d04 <SysSetTime(regs*)>:
c0011d04:	55                   	push   ebp
c0011d05:	31 c9                	xor    ecx,ecx
c0011d07:	57                   	push   edi
c0011d08:	bd 0c 00 00 00       	mov    ebp,0xc
c0011d0d:	56                   	push   esi
c0011d0e:	53                   	push   ebx
c0011d0f:	31 db                	xor    ebx,ebx
c0011d11:	83 ec 10             	sub    esp,0x10
c0011d14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011d18:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011d1b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011d1e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011d21:	89 c2                	mov    edx,eax
c0011d23:	66 81 ef 6c 07       	sub    di,0x76c
c0011d28:	83 e2 1f             	and    edx,0x1f
c0011d2b:	c1 e7 10             	shl    edi,0x10
c0011d2e:	42                   	inc    edx
c0011d2f:	c1 e8 05             	shr    eax,0x5
c0011d32:	88 d1                	mov    cl,dl
c0011d34:	31 d2                	xor    edx,edx
c0011d36:	f7 f5                	div    ebp
c0011d38:	89 dd                	mov    ebp,ebx
c0011d3a:	88 d5                	mov    ch,dl
c0011d3c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011d42:	0f b7 c1             	movzx  eax,cx
c0011d45:	31 d2                	xor    edx,edx
c0011d47:	09 f8                	or     eax,edi
c0011d49:	bf 3c 00 00 00       	mov    edi,0x3c
c0011d4e:	89 c1                	mov    ecx,eax
c0011d50:	89 f0                	mov    eax,esi
c0011d52:	f7 f7                	div    edi
c0011d54:	c1 e2 10             	shl    edx,0x10
c0011d57:	09 d5                	or     ebp,edx
c0011d59:	31 d2                	xor    edx,edx
c0011d5b:	89 eb                	mov    ebx,ebp
c0011d5d:	f7 f7                	div    edi
c0011d5f:	bf 10 0e 00 00       	mov    edi,0xe10
c0011d64:	88 d7                	mov    bh,dl
c0011d66:	89 f0                	mov    eax,esi
c0011d68:	31 d2                	xor    edx,edx
c0011d6a:	f7 f7                	div    edi
c0011d6c:	bf 18 00 00 00       	mov    edi,0x18
c0011d71:	31 d2                	xor    edx,edx
c0011d73:	f7 f7                	div    edi
c0011d75:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011d7a:	88 d3                	mov    bl,dl
c0011d7c:	53                   	push   ebx
c0011d7d:	51                   	push   ecx
c0011d7e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d84:	e8 cb 99 ff ff       	call   c000b754 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d89:	83 c4 1c             	add    esp,0x1c
c0011d8c:	83 f0 01             	xor    eax,0x1
c0011d8f:	5b                   	pop    ebx
c0011d90:	0f b6 c0             	movzx  eax,al
c0011d93:	5e                   	pop    esi
c0011d94:	31 d2                	xor    edx,edx
c0011d96:	5f                   	pop    edi
c0011d97:	5d                   	pop    ebp
c0011d98:	c3                   	ret    

c0011d99 <SysTimezone(regs*)>:
c0011d99:	53                   	push   ebx
c0011d9a:	83 ec 08             	sub    esp,0x8
c0011d9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011da1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011da5:	75 17                	jne    c0011dbe <SysTimezone(regs*)+0x25>
c0011da7:	83 ec 0c             	sub    esp,0xc
c0011daa:	68 0c ea 01 c0       	push   0xc001ea0c
c0011daf:	e8 4f 88 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0011db4:	83 c8 ff             	or     eax,0xffffffff
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	89 c2                	mov    edx,eax
c0011dbc:	eb 20                	jmp    c0011dde <SysTimezone(regs*)+0x45>
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	68 21 ea 01 c0       	push   0xc001ea21
c0011dc6:	e8 38 88 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0011dcb:	58                   	pop    eax
c0011dcc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011dcf:	e8 dc 96 ff ff       	call   c000b4b0 <User::loadClockSettings(int)>
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	b8 01 00 00 00       	mov    eax,0x1
c0011ddc:	31 d2                	xor    edx,edx
c0011dde:	83 c4 08             	add    esp,0x8
c0011de1:	5b                   	pop    ebx
c0011de2:	c3                   	ret    

c0011de3 <SysWrite(regs*)>:
c0011de3:	57                   	push   edi
c0011de4:	56                   	push   esi
c0011de5:	53                   	push   ebx
c0011de6:	83 ec 10             	sub    esp,0x10
c0011de9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011df0:	83 f8 02             	cmp    eax,0x2
c0011df3:	77 10                	ja     c0011e05 <SysWrite(regs*)+0x22>
c0011df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dfa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dfd:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011e03:	eb 0e                	jmp    c0011e13 <SysWrite(regs*)+0x30>
c0011e05:	83 ec 0c             	sub    esp,0xc
c0011e08:	50                   	push   eax
c0011e09:	e8 21 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011e0e:	83 c4 10             	add    esp,0x10
c0011e11:	89 c1                	mov    ecx,eax
c0011e13:	83 c8 ff             	or     eax,0xffffffff
c0011e16:	85 c9                	test   ecx,ecx
c0011e18:	89 c2                	mov    edx,eax
c0011e1a:	74 28                	je     c0011e44 <SysWrite(regs*)+0x61>
c0011e1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e24:	31 ff                	xor    edi,edi
c0011e26:	83 ec 0c             	sub    esp,0xc
c0011e29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011e2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e2f:	52                   	push   edx
c0011e30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011e33:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011e36:	57                   	push   edi
c0011e37:	56                   	push   esi
c0011e38:	51                   	push   ecx
c0011e39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e40:	83 c4 20             	add    esp,0x20
c0011e43:	99                   	cdq    
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	5b                   	pop    ebx
c0011e48:	5e                   	pop    esi
c0011e49:	5f                   	pop    edi
c0011e4a:	c3                   	ret    

c0011e4b <SysWsbe(regs*)>:
c0011e4b:	57                   	push   edi
c0011e4c:	b9 0b 00 00 00       	mov    ecx,0xb
c0011e51:	56                   	push   esi
c0011e52:	be 60 ea 01 c0       	mov    esi,0xc001ea60
c0011e57:	53                   	push   ebx
c0011e58:	83 ec 30             	sub    esp,0x30
c0011e5b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e5f:	fc                   	cld    
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e65:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e71:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011e77:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e79:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e7c:	57                   	push   edi
c0011e7d:	e8 be e6 fe ff       	call   c0000540 <strlen>
c0011e82:	5a                   	pop    edx
c0011e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e87:	52                   	push   edx
c0011e88:	31 d2                	xor    edx,edx
c0011e8a:	57                   	push   edi
c0011e8b:	52                   	push   edx
c0011e8c:	50                   	push   eax
c0011e8d:	56                   	push   esi
c0011e8e:	ff d3                	call   ebx
c0011e90:	83 c4 14             	add    esp,0x14
c0011e93:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e97:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e9a:	e8 fd 22 00 00       	call   c001419c <terminateTask(int)>
c0011e9f:	83 c4 40             	add    esp,0x40
c0011ea2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011ea7:	5b                   	pop    ebx
c0011ea8:	31 d2                	xor    edx,edx
c0011eaa:	5e                   	pop    esi
c0011eab:	5f                   	pop    edi
c0011eac:	c3                   	ret    

c0011ead <SysYield(regs*)>:
c0011ead:	83 ec 0c             	sub    esp,0xc
c0011eb0:	fa                   	cli    
c0011eb1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011eb7:	e8 bc 19 00 00       	call   c0013878 <schedule()>
c0011ebc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011ec1:	48                   	dec    eax
c0011ec2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011ec7:	75 01                	jne    c0011eca <SysYield(regs*)+0x1d>
c0011ec9:	fb                   	sti    
c0011eca:	31 c0                	xor    eax,eax
c0011ecc:	31 d2                	xor    edx,edx
c0011ece:	83 c4 0c             	add    esp,0xc
c0011ed1:	c3                   	ret    

c0011ed2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011ed2:	55                   	push   ebp
c0011ed3:	57                   	push   edi
c0011ed4:	56                   	push   esi
c0011ed5:	53                   	push   ebx
c0011ed6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011edc:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011ee4:	0f 95 c2             	setne  dl
c0011ee7:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011eef:	0f 94 c0             	sete   al
c0011ef2:	84 c2                	test   dl,al
c0011ef4:	74 34                	je     c0011f2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ef6:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011f01:	74 27                	je     c0011f2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011f03:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011f0a:	05 00 10 00 00       	add    eax,0x1000
c0011f0f:	89 c1                	mov    ecx,eax
c0011f11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f16:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011f1c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011f23:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011f2a:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011f31:	83 ec 0c             	sub    esp,0xc
c0011f34:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011f3a:	6a 01                	push   0x1
c0011f3c:	e8 44 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	89 c3                	mov    ebx,eax
c0011f46:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f4c:	0f 86 25 01 00 00    	jbe    c0012077 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011f52:	c1 ee 0c             	shr    esi,0xc
c0011f55:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f5c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011f60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f68:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011f6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f73:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011f7a:	29 ef                	sub    edi,ebp
c0011f7c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f80:	0f 83 f8 00 00 00    	jae    c001207e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f86:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f8c:	76 05                	jbe    c0011f93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f8e:	bf 00 10 00 00       	mov    edi,0x1000
c0011f93:	83 ec 0c             	sub    esp,0xc
c0011f96:	31 d2                	xor    edx,edx
c0011f98:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011fa1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011fa5:	50                   	push   eax
c0011fa6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011faa:	56                   	push   esi
c0011fab:	52                   	push   edx
c0011fac:	57                   	push   edi
c0011fad:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011fb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fb7:	83 c4 20             	add    esp,0x20
c0011fba:	85 c0                	test   eax,eax
c0011fbc:	75 06                	jne    c0011fc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011fbe:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011fc2:	74 13                	je     c0011fd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011fc4:	83 ec 0c             	sub    esp,0xc
c0011fc7:	53                   	push   ebx
c0011fc8:	e8 ac 75 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	31 c0                	xor    eax,eax
c0011fd2:	e9 7c 01 00 00       	jmp    c0012153 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011fd7:	fa                   	cli    
c0011fd8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fde:	e8 b2 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011fe3:	6a 07                	push   0x7
c0011fe5:	89 c7                	mov    edi,eax
c0011fe7:	53                   	push   ebx
c0011fe8:	50                   	push   eax
c0011fe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ff1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ff7:	e8 fc 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ffc:	83 c4 0c             	add    esp,0xc
c0011fff:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012006:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001200c:	6a 00                	push   0x0
c001200e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012013:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012016:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001201c:	e8 49 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0012021:	58                   	pop    eax
c0012022:	5a                   	pop    edx
c0012023:	68 07 0c 00 00       	push   0xc07
c0012028:	55                   	push   ebp
c0012029:	57                   	push   edi
c001202a:	89 df                	mov    edi,ebx
c001202c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012033:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012039:	6a 00                	push   0x0
c001203b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012043:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012049:	e8 e2 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001204e:	b9 00 10 00 00       	mov    ecx,0x1000
c0012053:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012055:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001205a:	83 c4 20             	add    esp,0x20
c001205d:	48                   	dec    eax
c001205e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012063:	85 c0                	test   eax,eax
c0012065:	75 01                	jne    c0012068 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012067:	fb                   	sti    
c0012068:	81 c5 00 10 00 00    	add    ebp,0x1000
c001206e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012072:	e9 f1 fe ff ff       	jmp    c0011f68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012077:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001207e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012085:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001208b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012091:	0f 86 ae 00 00 00    	jbe    c0012145 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012097:	fa                   	cli    
c0012098:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001209e:	c1 ee 0c             	shr    esi,0xc
c00120a1:	51                   	push   ecx
c00120a2:	31 ff                	xor    edi,edi
c00120a4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00120ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120b1:	6a 00                	push   0x0
c00120b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120c1:	e8 a4 76 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	e8 c7 59 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00120ce:	47                   	inc    edi
c00120cf:	6a 07                	push   0x7
c00120d1:	53                   	push   ebx
c00120d2:	50                   	push   eax
c00120d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120dd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00120e0:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00120e6:	e8 0d 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120eb:	58                   	pop    eax
c00120ec:	5a                   	pop    edx
c00120ed:	68 07 0c 00 00       	push   0xc07
c00120f2:	55                   	push   ebp
c00120f3:	81 c5 00 10 00 00    	add    ebp,0x1000
c00120f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120fd:	50                   	push   eax
c00120fe:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012105:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001210b:	6a 00                	push   0x0
c001210d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012112:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012115:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001211b:	e8 10 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012120:	83 c4 1c             	add    esp,0x1c
c0012123:	68 00 10 00 00       	push   0x1000
c0012128:	6a 00                	push   0x0
c001212a:	53                   	push   ebx
c001212b:	e8 a0 e3 fe ff       	call   c00004d0 <memset>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	39 fe                	cmp    esi,edi
c0012135:	77 92                	ja     c00120c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012137:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001213c:	48                   	dec    eax
c001213d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012142:	75 01                	jne    c0012145 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012144:	fb                   	sti    
c0012145:	83 ec 0c             	sub    esp,0xc
c0012148:	53                   	push   ebx
c0012149:	e8 2b 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	b0 01                	mov    al,0x1
c0012153:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012159:	5b                   	pop    ebx
c001215a:	5e                   	pop    esi
c001215b:	5f                   	pop    edi
c001215c:	5d                   	pop    ebp
c001215d:	c3                   	ret    

c001215e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001215e:	55                   	push   ebp
c001215f:	57                   	push   edi
c0012160:	56                   	push   esi
c0012161:	53                   	push   ebx
c0012162:	83 ec 48             	sub    esp,0x48
c0012165:	68 14 01 00 00       	push   0x114
c001216a:	e8 4a 56 ff ff       	call   c00077b9 <malloc>
c001216f:	83 c4 0c             	add    esp,0xc
c0012172:	89 c6                	mov    esi,eax
c0012174:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012178:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001217c:	50                   	push   eax
c001217d:	e8 f6 89 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0012182:	58                   	pop    eax
c0012183:	5a                   	pop    edx
c0012184:	6a 01                	push   0x1
c0012186:	56                   	push   esi
c0012187:	e8 ac 8a ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	85 c0                	test   eax,eax
c0012191:	0f 85 47 01 00 00    	jne    c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012197:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001219f:	83 ec 0c             	sub    esp,0xc
c00121a2:	6a 34                	push   0x34
c00121a4:	e8 10 56 ff ff       	call   c00077b9 <malloc>
c00121a9:	89 c3                	mov    ebx,eax
c00121ab:	58                   	pop    eax
c00121ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00121ae:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00121b2:	57                   	push   edi
c00121b3:	53                   	push   ebx
c00121b4:	6a 00                	push   0x0
c00121b6:	6a 34                	push   0x34
c00121b8:	56                   	push   esi
c00121b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121bc:	83 c4 20             	add    esp,0x20
c00121bf:	85 c0                	test   eax,eax
c00121c1:	0f 85 17 01 00 00    	jne    c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121c7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00121cd:	0f 85 0b 01 00 00    	jne    c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121d6:	85 c0                	test   eax,eax
c00121d8:	0f 84 00 01 00 00    	je     c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121de:	31 d2                	xor    edx,edx
c00121e0:	55                   	push   ebp
c00121e1:	52                   	push   edx
c00121e2:	50                   	push   eax
c00121e3:	56                   	push   esi
c00121e4:	e8 0d 8b ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	85 c0                	test   eax,eax
c00121ee:	0f 85 ea 00 00 00    	jne    c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121fa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012202:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012206:	0f af c2             	imul   eax,edx
c0012209:	50                   	push   eax
c001220a:	e8 aa 55 ff ff       	call   c00077b9 <malloc>
c001220f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012211:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012215:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012218:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001221c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012220:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012224:	0f af c2             	imul   eax,edx
c0012227:	99                   	cdq    
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	56                   	push   esi
c001222b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001222e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012231:	83 c4 20             	add    esp,0x20
c0012234:	85 c0                	test   eax,eax
c0012236:	0f 84 a2 00 00 00    	je     c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001223c:	31 d2                	xor    edx,edx
c001223e:	51                   	push   ecx
c001223f:	52                   	push   edx
c0012240:	50                   	push   eax
c0012241:	56                   	push   esi
c0012242:	e8 af 8a ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012247:	83 c4 10             	add    esp,0x10
c001224a:	85 c0                	test   eax,eax
c001224c:	0f 85 8c 00 00 00    	jne    c00122de <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012259:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001225d:	31 ed                	xor    ebp,ebp
c001225f:	0f af c2             	imul   eax,edx
c0012262:	50                   	push   eax
c0012263:	e8 51 55 ff ff       	call   c00077b9 <malloc>
c0012268:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001226a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001226e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012275:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012279:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001227d:	0f af c2             	imul   eax,edx
c0012280:	99                   	cdq    
c0012281:	52                   	push   edx
c0012282:	50                   	push   eax
c0012283:	56                   	push   esi
c0012284:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012287:	83 c4 20             	add    esp,0x20
c001228a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012292:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012296:	0f 86 80 00 00 00    	jbe    c001231c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001229c:	0f b7 fd             	movzx  edi,bp
c001229f:	c1 e7 05             	shl    edi,0x5
c00122a2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00122a6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00122a9:	75 6b                	jne    c0012316 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00122ab:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122b2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00122b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b9:	52                   	push   edx
c00122ba:	31 d2                	xor    edx,edx
c00122bc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00122bf:	52                   	push   edx
c00122c0:	50                   	push   eax
c00122c1:	56                   	push   esi
c00122c2:	e8 2f 8a ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	85 c0                	test   eax,eax
c00122cc:	74 17                	je     c00122e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	68 8c ea 01 c0       	push   0xc001ea8c
c00122d6:	e8 28 83 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	31 c0                	xor    eax,eax
c00122e0:	e9 87 00 00 00       	jmp    c001236c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00122eb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00122ee:	50                   	push   eax
c00122ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122f7:	56                   	push   esi
c00122f8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00122fc:	e8 d1 fb ff ff       	call   c0011ed2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012301:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012305:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012309:	83 c4 20             	add    esp,0x20
c001230c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012310:	73 04                	jae    c0012316 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012312:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012316:	45                   	inc    ebp
c0012317:	e9 76 ff ff ff       	jmp    c0012292 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001231c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012328:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012337:	25 00 f0 ff ff       	and    eax,0xfffff000
c001233c:	05 00 10 00 00       	add    eax,0x1000
c0012341:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012348:	e8 7c 54 ff ff       	call   c00077c9 <free>
c001234d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012350:	e8 74 54 ff ff       	call   c00077c9 <free>
c0012355:	58                   	pop    eax
c0012356:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001235a:	e8 6a 54 ff ff       	call   c00077c9 <free>
c001235f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012362:	e8 2f 89 ff ff       	call   c000ac96 <File::close()>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	b0 01                	mov    al,0x1
c001236c:	83 c4 3c             	add    esp,0x3c
c001236f:	5b                   	pop    ebx
c0012370:	5e                   	pop    esi
c0012371:	5f                   	pop    edi
c0012372:	5d                   	pop    ebp
c0012373:	c3                   	ret    

c0012374 <Thr::runtimeReferenceHelper()>:
c0012374:	83 ec 18             	sub    esp,0x18
c0012377:	68 94 ea 01 c0       	push   0xc001ea94
c001237c:	e8 82 82 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0012381:	fa                   	cli    
c0012382:	83 c4 10             	add    esp,0x10
c0012385:	eb fe                	jmp    c0012385 <Thr::runtimeReferenceHelper()+0x11>

c0012387 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012387:	57                   	push   edi
c0012388:	56                   	push   esi
c0012389:	53                   	push   ebx
c001238a:	31 db                	xor    ebx,ebx
c001238c:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c0012392:	7e 3c                	jle    c00123d0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012394:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c001239b:	31 ff                	xor    edi,edi
c001239d:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00123a4:	7e 27                	jle    c00123cd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00123a6:	50                   	push   eax
c00123a7:	50                   	push   eax
c00123a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00123ae:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00123b5:	50                   	push   eax
c00123b6:	e8 25 e3 fe ff       	call   c00006e0 <strcmp>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	85 c0                	test   eax,eax
c00123c0:	75 05                	jne    c00123c7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00123c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00123c5:	eb 0b                	jmp    c00123d2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00123c7:	83 c6 10             	add    esi,0x10
c00123ca:	47                   	inc    edi
c00123cb:	eb d0                	jmp    c001239d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00123cd:	43                   	inc    ebx
c00123ce:	eb bc                	jmp    c001238c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00123d0:	31 c0                	xor    eax,eax
c00123d2:	5b                   	pop    ebx
c00123d3:	5e                   	pop    esi
c00123d4:	5f                   	pop    edi
c00123d5:	c3                   	ret    

c00123d6 <Thr::loadKernelSymbolTable(char const*)>:
c00123d6:	55                   	push   ebp
c00123d7:	57                   	push   edi
c00123d8:	56                   	push   esi
c00123d9:	53                   	push   ebx
c00123da:	83 ec 68             	sub    esp,0x68
c00123dd:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c00123e3:	68 14 01 00 00       	push   0x114
c00123e8:	e8 cc 53 ff ff       	call   c00077b9 <malloc>
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	89 c3                	mov    ebx,eax
c00123f2:	56                   	push   esi
c00123f3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00123f7:	50                   	push   eax
c00123f8:	e8 7b 87 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c00123fd:	5e                   	pop    esi
c00123fe:	5f                   	pop    edi
c00123ff:	6a 01                	push   0x1
c0012401:	53                   	push   ebx
c0012402:	e8 31 88 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	85 c0                	test   eax,eax
c001240c:	74 0a                	je     c0012418 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	68 b6 ea 01 c0       	push   0xc001eab6
c0012416:	eb 34                	jmp    c001244c <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012418:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	6a 34                	push   0x34
c0012425:	e8 8f 53 ff ff       	call   c00077b9 <malloc>
c001242a:	59                   	pop    ecx
c001242b:	89 c7                	mov    edi,eax
c001242d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012431:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012433:	56                   	push   esi
c0012434:	57                   	push   edi
c0012435:	6a 00                	push   0x0
c0012437:	6a 34                	push   0x34
c0012439:	53                   	push   ebx
c001243a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001243d:	83 c4 20             	add    esp,0x20
c0012440:	85 c0                	test   eax,eax
c0012442:	74 17                	je     c001245b <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012444:	83 ec 0c             	sub    esp,0xc
c0012447:	68 cd ea 01 c0       	push   0xc001eacd
c001244c:	e8 32 de ff ff       	call   c0010283 <KePanic(char const*)>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	31 c0                	xor    eax,eax
c0012456:	e9 31 02 00 00       	jmp    c001268c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001245b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012461:	75 e1                	jne    c0012444 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012463:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012466:	85 c0                	test   eax,eax
c0012468:	74 da                	je     c0012444 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001246a:	52                   	push   edx
c001246b:	31 d2                	xor    edx,edx
c001246d:	52                   	push   edx
c001246e:	50                   	push   eax
c001246f:	53                   	push   ebx
c0012470:	e8 81 88 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012475:	83 c4 10             	add    esp,0x10
c0012478:	85 c0                	test   eax,eax
c001247a:	75 c8                	jne    c0012444 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001247c:	83 ec 0c             	sub    esp,0xc
c001247f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012483:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012487:	31 ed                	xor    ebp,ebp
c0012489:	0f af c2             	imul   eax,edx
c001248c:	50                   	push   eax
c001248d:	e8 27 53 ff ff       	call   c00077b9 <malloc>
c0012492:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012494:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012498:	89 34 24             	mov    DWORD PTR [esp],esi
c001249b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001249f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00124a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00124a7:	0f af c2             	imul   eax,edx
c00124aa:	99                   	cdq    
c00124ab:	52                   	push   edx
c00124ac:	50                   	push   eax
c00124ad:	53                   	push   ebx
c00124ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124b1:	83 c4 20             	add    esp,0x20
c00124b4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00124c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00124cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00124d4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00124d8:	0f 86 aa 00 00 00    	jbe    c0012588 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00124de:	0f b7 f5             	movzx  esi,bp
c00124e1:	6b f6 28             	imul   esi,esi,0x28
c00124e4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00124e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00124eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124ef:	50                   	push   eax
c00124f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00124f4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00124f8:	8b 16                	mov    edx,DWORD PTR [esi]
c00124fa:	6b c0 28             	imul   eax,eax,0x28
c00124fd:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012501:	89 d0                	mov    eax,edx
c0012503:	31 d2                	xor    edx,edx
c0012505:	52                   	push   edx
c0012506:	50                   	push   eax
c0012507:	53                   	push   ebx
c0012508:	e8 e9 87 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c001250d:	83 c4 0c             	add    esp,0xc
c0012510:	6a 20                	push   0x20
c0012512:	6a 00                	push   0x0
c0012514:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012518:	52                   	push   edx
c0012519:	e8 b2 df fe ff       	call   c00004d0 <memset>
c001251e:	58                   	pop    eax
c001251f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012521:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012525:	51                   	push   ecx
c0012526:	8d 54 24 40          	lea    edx,[esp+0x40]
c001252a:	52                   	push   edx
c001252b:	6a 00                	push   0x0
c001252d:	6a 1f                	push   0x1f
c001252f:	53                   	push   ebx
c0012530:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012533:	83 c4 18             	add    esp,0x18
c0012536:	68 e4 ea 01 c0       	push   0xc001eae4
c001253b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001253f:	52                   	push   edx
c0012540:	e8 9b e1 fe ff       	call   c00006e0 <strcmp>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	85 c0                	test   eax,eax
c001254a:	75 0f                	jne    c001255b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001254c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001254f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001255b:	50                   	push   eax
c001255c:	50                   	push   eax
c001255d:	68 ec ea 01 c0       	push   0xc001eaec
c0012562:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012566:	50                   	push   eax
c0012567:	e8 74 e1 fe ff       	call   c00006e0 <strcmp>
c001256c:	83 c4 10             	add    esp,0x10
c001256f:	85 c0                	test   eax,eax
c0012571:	75 0f                	jne    c0012582 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012573:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012576:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001257a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001257e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012582:	45                   	inc    ebp
c0012583:	e9 4c ff ff ff       	jmp    c00124d4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001258d:	75 10                	jne    c001259f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001258f:	83 ec 0c             	sub    esp,0xc
c0012592:	68 f4 ea 01 c0       	push   0xc001eaf4
c0012597:	e8 e7 dc ff ff       	call   c0010283 <KePanic(char const*)>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00125a4:	75 10                	jne    c00125b6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00125a6:	83 ec 0c             	sub    esp,0xc
c00125a9:	68 f4 ea 01 c0       	push   0xc001eaf4
c00125ae:	e8 d0 dc ff ff       	call   c0010283 <KePanic(char const*)>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	31 d2                	xor    edx,edx
c00125b8:	50                   	push   eax
c00125b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125bd:	52                   	push   edx
c00125be:	50                   	push   eax
c00125bf:	53                   	push   ebx
c00125c0:	e8 31 87 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c00125c5:	5a                   	pop    edx
c00125c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125ca:	e8 ea 51 ff ff       	call   c00077b9 <malloc>
c00125cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125d7:	31 c9                	xor    ecx,ecx
c00125d9:	5e                   	pop    esi
c00125da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125dc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00125e0:	55                   	push   ebp
c00125e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e5:	51                   	push   ecx
c00125e6:	52                   	push   edx
c00125e7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00125eb:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00125ef:	53                   	push   ebx
c00125f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125f3:	83 c4 14             	add    esp,0x14
c00125f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00125fa:	e8 ba 51 ff ff       	call   c00077b9 <malloc>
c00125ff:	89 c6                	mov    esi,eax
c0012601:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012603:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012606:	56                   	push   esi
c0012607:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001260b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001260f:	51                   	push   ecx
c0012610:	52                   	push   edx
c0012611:	53                   	push   ebx
c0012612:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012615:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012619:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001261f:	83 c4 1c             	add    esp,0x1c
c0012622:	c1 e8 04             	shr    eax,0x4
c0012625:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c001262c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012630:	31 d2                	xor    edx,edx
c0012632:	52                   	push   edx
c0012633:	50                   	push   eax
c0012634:	53                   	push   ebx
c0012635:	e8 bc 86 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c001263a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001263c:	31 d2                	xor    edx,edx
c001263e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012641:	56                   	push   esi
c0012642:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012646:	52                   	push   edx
c0012647:	50                   	push   eax
c0012648:	53                   	push   ebx
c0012649:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001264c:	83 c4 14             	add    esp,0x14
c001264f:	53                   	push   ebx
c0012650:	e8 41 86 ff ff       	call   c000ac96 <File::close()>
c0012655:	5d                   	pop    ebp
c0012656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001265a:	e8 6a 51 ff ff       	call   c00077c9 <free>
c001265f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012662:	e8 62 51 ff ff       	call   c00077c9 <free>
c0012667:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c001266c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012670:	8d 50 01             	lea    edx,[eax+0x1]
c0012673:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c001267a:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c0012681:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c0012687:	83 c4 10             	add    esp,0x10
c001268a:	b0 01                	mov    al,0x1
c001268c:	83 c4 5c             	add    esp,0x5c
c001268f:	5b                   	pop    ebx
c0012690:	5e                   	pop    esi
c0012691:	5f                   	pop    edi
c0012692:	5d                   	pop    ebp
c0012693:	c3                   	ret    

c0012694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012694:	55                   	push   ebp
c0012695:	57                   	push   edi
c0012696:	56                   	push   esi
c0012697:	53                   	push   ebx
c0012698:	81 ec 68 03 00 00    	sub    esp,0x368
c001269e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00126a5:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00126ab:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00126af:	68 14 01 00 00       	push   0x114
c00126b4:	e8 00 51 ff ff       	call   c00077b9 <malloc>
c00126b9:	83 c4 0c             	add    esp,0xc
c00126bc:	89 c5                	mov    ebp,eax
c00126be:	53                   	push   ebx
c00126bf:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00126c6:	50                   	push   eax
c00126c7:	e8 ac 84 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c00126cc:	5e                   	pop    esi
c00126cd:	5f                   	pop    edi
c00126ce:	6a 01                	push   0x1
c00126d0:	55                   	push   ebp
c00126d1:	e8 62 85 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	85 c0                	test   eax,eax
c00126db:	0f 85 a7 06 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126e1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00126e9:	83 ec 0c             	sub    esp,0xc
c00126ec:	6a 34                	push   0x34
c00126ee:	e8 c6 50 ff ff       	call   c00077b9 <malloc>
c00126f3:	5b                   	pop    ebx
c00126f4:	89 c7                	mov    edi,eax
c00126f6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00126fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126fd:	53                   	push   ebx
c00126fe:	57                   	push   edi
c00126ff:	6a 00                	push   0x0
c0012701:	6a 34                	push   0x34
c0012703:	55                   	push   ebp
c0012704:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012707:	83 c4 20             	add    esp,0x20
c001270a:	85 c0                	test   eax,eax
c001270c:	0f 85 76 06 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012712:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012718:	0f 85 6a 06 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001271e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012721:	85 c0                	test   eax,eax
c0012723:	0f 84 5f 06 00 00    	je     c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012729:	31 d2                	xor    edx,edx
c001272b:	51                   	push   ecx
c001272c:	52                   	push   edx
c001272d:	50                   	push   eax
c001272e:	55                   	push   ebp
c001272f:	e8 c2 85 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	85 c0                	test   eax,eax
c0012739:	0f 85 49 06 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001273f:	83 ec 0c             	sub    esp,0xc
c0012742:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012745:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012749:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001274d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012751:	0f af c2             	imul   eax,edx
c0012754:	50                   	push   eax
c0012755:	e8 5f 50 ff ff       	call   c00077b9 <malloc>
c001275a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001275d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012768:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001276c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012770:	0f af c2             	imul   eax,edx
c0012773:	99                   	cdq    
c0012774:	52                   	push   edx
c0012775:	50                   	push   eax
c0012776:	55                   	push   ebp
c0012777:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001277a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001277d:	83 c4 20             	add    esp,0x20
c0012780:	85 c0                	test   eax,eax
c0012782:	0f 84 00 06 00 00    	je     c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012788:	52                   	push   edx
c0012789:	31 d2                	xor    edx,edx
c001278b:	52                   	push   edx
c001278c:	50                   	push   eax
c001278d:	55                   	push   ebp
c001278e:	e8 63 85 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012793:	83 c4 10             	add    esp,0x10
c0012796:	85 c0                	test   eax,eax
c0012798:	0f 85 ea 05 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001279e:	83 ec 0c             	sub    esp,0xc
c00127a1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00127a5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00127a9:	31 f6                	xor    esi,esi
c00127ab:	0f af c2             	imul   eax,edx
c00127ae:	50                   	push   eax
c00127af:	e8 05 50 ff ff       	call   c00077b9 <malloc>
c00127b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00127bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127c2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00127c6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00127ca:	0f af c2             	imul   eax,edx
c00127cd:	99                   	cdq    
c00127ce:	52                   	push   edx
c00127cf:	50                   	push   eax
c00127d0:	55                   	push   ebp
c00127d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127d4:	83 c4 20             	add    esp,0x20
c00127d7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00127db:	0f 86 8a 00 00 00    	jbe    c001286b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00127e1:	0f b7 de             	movzx  ebx,si
c00127e4:	c1 e3 05             	shl    ebx,0x5
c00127e7:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00127eb:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00127ee:	75 75                	jne    c0012865 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00127f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127f3:	31 d2                	xor    edx,edx
c00127f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00127fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012800:	50                   	push   eax
c0012801:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012804:	52                   	push   edx
c0012805:	50                   	push   eax
c0012806:	55                   	push   ebp
c0012807:	e8 ea 84 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c001280c:	83 c4 10             	add    esp,0x10
c001280f:	85 c0                	test   eax,eax
c0012811:	0f 85 71 05 00 00    	jne    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012817:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001281e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012821:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012825:	31 d2                	xor    edx,edx
c0012827:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001282b:	83 ec 0c             	sub    esp,0xc
c001282e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012832:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012839:	50                   	push   eax
c001283a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001283e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012842:	52                   	push   edx
c0012843:	50                   	push   eax
c0012844:	55                   	push   ebp
c0012845:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012848:	83 c4 1c             	add    esp,0x1c
c001284b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001284e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012851:	50                   	push   eax
c0012852:	6a 00                	push   0x0
c0012854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012858:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001285c:	50                   	push   eax
c001285d:	e8 6e dc fe ff       	call   c00004d0 <memset>
c0012862:	83 c4 10             	add    esp,0x10
c0012865:	46                   	inc    esi
c0012866:	e9 6c ff ff ff       	jmp    c00127d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001286b:	53                   	push   ebx
c001286c:	31 db                	xor    ebx,ebx
c001286e:	68 00 01 00 00       	push   0x100
c0012873:	6a 00                	push   0x0
c0012875:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012879:	50                   	push   eax
c001287a:	e8 51 dc fe ff       	call   c00004d0 <memset>
c001287f:	83 c4 0c             	add    esp,0xc
c0012882:	68 00 01 00 00       	push   0x100
c0012887:	6a 00                	push   0x0
c0012889:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012890:	50                   	push   eax
c0012891:	e8 3a dc fe ff       	call   c00004d0 <memset>
c0012896:	83 c4 10             	add    esp,0x10
c0012899:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00128a1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00128a9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00128b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00128b9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128c1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00128c5:	0f 86 30 01 00 00    	jbe    c00129fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00128cb:	0f b7 f3             	movzx  esi,bx
c00128ce:	6b f6 28             	imul   esi,esi,0x28
c00128d1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00128d5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00128d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128dc:	52                   	push   edx
c00128dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128e1:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00128e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00128e7:	6b d2 28             	imul   edx,edx,0x28
c00128ea:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00128ee:	31 d2                	xor    edx,edx
c00128f0:	52                   	push   edx
c00128f1:	50                   	push   eax
c00128f2:	55                   	push   ebp
c00128f3:	e8 fe 83 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c00128f8:	83 c4 0c             	add    esp,0xc
c00128fb:	6a 20                	push   0x20
c00128fd:	6a 00                	push   0x0
c00128ff:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012906:	51                   	push   ecx
c0012907:	e8 c4 db fe ff       	call   c00004d0 <memset>
c001290c:	59                   	pop    ecx
c001290d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012910:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012914:	52                   	push   edx
c0012915:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001291c:	51                   	push   ecx
c001291d:	6a 00                	push   0x0
c001291f:	6a 1f                	push   0x1f
c0012921:	55                   	push   ebp
c0012922:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012925:	83 c4 1c             	add    esp,0x1c
c0012928:	6a 09                	push   0x9
c001292a:	68 0e eb 01 c0       	push   0xc001eb0e
c001292f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012936:	51                   	push   ecx
c0012937:	e8 54 da fe ff       	call   c0000390 <memcmp>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	85 c0                	test   eax,eax
c0012941:	75 21                	jne    c0012964 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012947:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001294b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001294f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012953:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012956:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001295d:	89 d0                	mov    eax,edx
c001295f:	40                   	inc    eax
c0012960:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012964:	50                   	push   eax
c0012965:	6a 09                	push   0x9
c0012967:	68 18 eb 01 c0       	push   0xc001eb18
c001296c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012973:	50                   	push   eax
c0012974:	e8 17 da fe ff       	call   c0000390 <memcmp>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	85 c0                	test   eax,eax
c001297e:	75 21                	jne    c00129a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012984:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012988:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001298c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012990:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012993:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001299a:	89 d0                	mov    eax,edx
c001299c:	40                   	inc    eax
c001299d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129a1:	50                   	push   eax
c00129a2:	50                   	push   eax
c00129a3:	68 e4 ea 01 c0       	push   0xc001eae4
c00129a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129af:	50                   	push   eax
c00129b0:	e8 2b dd fe ff       	call   c00006e0 <strcmp>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	85 c0                	test   eax,eax
c00129ba:	75 0f                	jne    c00129cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00129bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129cb:	50                   	push   eax
c00129cc:	50                   	push   eax
c00129cd:	68 ec ea 01 c0       	push   0xc001eaec
c00129d2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129d9:	50                   	push   eax
c00129da:	e8 01 dd fe ff       	call   c00006e0 <strcmp>
c00129df:	83 c4 10             	add    esp,0x10
c00129e2:	85 c0                	test   eax,eax
c00129e4:	75 0f                	jne    c00129f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00129e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129f1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00129f5:	43                   	inc    ebx
c00129f6:	e9 c6 fe ff ff       	jmp    c00128c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00129fb:	31 d2                	xor    edx,edx
c00129fd:	50                   	push   eax
c00129fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a02:	52                   	push   edx
c0012a03:	50                   	push   eax
c0012a04:	55                   	push   ebp
c0012a05:	e8 ec 82 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012a0a:	58                   	pop    eax
c0012a0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a0f:	e8 a5 4d ff ff       	call   c00077b9 <malloc>
c0012a14:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a17:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a1b:	31 d2                	xor    edx,edx
c0012a1d:	58                   	pop    eax
c0012a1e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012a22:	53                   	push   ebx
c0012a23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a2b:	52                   	push   edx
c0012a2c:	50                   	push   eax
c0012a2d:	55                   	push   ebp
c0012a2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a31:	83 c4 14             	add    esp,0x14
c0012a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a38:	e8 7c 4d ff ff       	call   c00077b9 <malloc>
c0012a3d:	31 d2                	xor    edx,edx
c0012a3f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a43:	83 c4 0c             	add    esp,0xc
c0012a46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a4a:	52                   	push   edx
c0012a4b:	50                   	push   eax
c0012a4c:	55                   	push   ebp
c0012a4d:	e8 a4 82 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012a52:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a55:	31 d2                	xor    edx,edx
c0012a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a62:	52                   	push   edx
c0012a63:	50                   	push   eax
c0012a64:	55                   	push   ebp
c0012a65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a68:	83 c4 20             	add    esp,0x20
c0012a6b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012a73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a77:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012a7b:	0f 84 0b 03 00 00    	je     c0012d8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a81:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a88:	31 d2                	xor    edx,edx
c0012a8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8e:	c1 e8 03             	shr    eax,0x3
c0012a91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a95:	51                   	push   ecx
c0012a96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a9a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a9e:	52                   	push   edx
c0012a9f:	50                   	push   eax
c0012aa0:	55                   	push   ebp
c0012aa1:	e8 50 82 ff ff       	call   c000acf6 <File::seek(unsigned long long)>
c0012aa6:	5b                   	pop    ebx
c0012aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aab:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012ab2:	e8 02 4d ff ff       	call   c00077b9 <malloc>
c0012ab7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012aba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012abe:	31 d2                	xor    edx,edx
c0012ac0:	5e                   	pop    esi
c0012ac1:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012ac5:	50                   	push   eax
c0012ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ace:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012ad5:	52                   	push   edx
c0012ad6:	50                   	push   eax
c0012ad7:	55                   	push   ebp
c0012ad8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012adb:	83 c4 20             	add    esp,0x20
c0012ade:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ae6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012aea:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012aee:	0f 8d 7c 02 00 00    	jge    c0012d70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012af4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012af8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012afc:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012b01:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012b04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012b08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b0c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012b10:	89 d8                	mov    eax,ebx
c0012b12:	c1 e8 08             	shr    eax,0x8
c0012b15:	89 c6                	mov    esi,eax
c0012b17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b1b:	c1 e6 04             	shl    esi,0x4
c0012b1e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012b22:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012b25:	85 d2                	test   edx,edx
c0012b27:	0f 85 bf 00 00 00    	jne    c0012bec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b34:	03 06                	add    eax,DWORD PTR [esi]
c0012b36:	50                   	push   eax
c0012b37:	e8 4b f8 ff ff       	call   c0012387 <Thr::getAddressOfKernelSymbol(char const*)>
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	89 c2                	mov    edx,eax
c0012b41:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012b46:	85 c0                	test   eax,eax
c0012b48:	0f 85 9e 00 00 00    	jne    c0012bec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b55:	03 06                	add    eax,DWORD PTR [esi]
c0012b57:	50                   	push   eax
c0012b58:	e8 77 d8 ff ff       	call   c00103d4 <KeResolveCompatibilitySymbol(char*)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	89 c2                	mov    edx,eax
c0012b62:	85 c0                	test   eax,eax
c0012b64:	0f 85 82 00 00 00    	jne    c0012bec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b6a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012b6e:	50                   	push   eax
c0012b6f:	50                   	push   eax
c0012b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b74:	03 06                	add    eax,DWORD PTR [esi]
c0012b76:	50                   	push   eax
c0012b77:	68 22 eb 01 c0       	push   0xc001eb22
c0012b7c:	e8 82 7a ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0012b81:	58                   	pop    eax
c0012b82:	5a                   	pop    edx
c0012b83:	68 3c eb 01 c0       	push   0xc001eb3c
c0012b88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b8f:	50                   	push   eax
c0012b90:	e8 6b da fe ff       	call   c0000600 <strcpy>
c0012b95:	59                   	pop    ecx
c0012b96:	58                   	pop    eax
c0012b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b9b:	03 06                	add    eax,DWORD PTR [esi]
c0012b9d:	50                   	push   eax
c0012b9e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ba5:	50                   	push   eax
c0012ba6:	e8 15 dc fe ff       	call   c00007c0 <strcat>
c0012bab:	58                   	pop    eax
c0012bac:	5a                   	pop    edx
c0012bad:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012bb2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bb9:	50                   	push   eax
c0012bba:	e8 01 dc fe ff       	call   c00007c0 <strcat>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bc7:	0f 84 5d 01 00 00    	je     c0012d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bcd:	83 ec 0c             	sub    esp,0xc
c0012bd0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bd7:	50                   	push   eax
c0012bd8:	e8 a6 d6 ff ff       	call   c0010283 <KePanic(char const*)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012be4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012be8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012bec:	80 fb 01             	cmp    bl,0x1
c0012bef:	0f 85 88 00 00 00    	jne    c0012c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012bf5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012bfc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012c00:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012c04:	01 ce                	add    esi,ecx
c0012c06:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c0c:	0f 94 c0             	sete   al
c0012c0f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c15:	0f 94 c3             	sete   bl
c0012c18:	09 c3                	or     ebx,eax
c0012c1a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c1c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c21:	74 41                	je     c0012c64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012c23:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c26:	84 db                	test   bl,bl
c0012c28:	75 15                	jne    c0012c3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012c2a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c2e:	66 83 f8 0c          	cmp    ax,0xc
c0012c32:	76 05                	jbe    c0012c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012c34:	b8 0c 00 00 00       	mov    eax,0xc
c0012c39:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c3d:	76 37                	jbe    c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c3f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012c43:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c48:	0f 84 dc 00 00 00    	je     c0012d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c4e:	83 ec 0c             	sub    esp,0xc
c0012c51:	68 53 eb 01 c0       	push   0xc001eb53
c0012c56:	e8 28 d6 ff ff       	call   c0010283 <KePanic(char const*)>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c62:	eb 12                	jmp    c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c64:	01 c1                	add    ecx,eax
c0012c66:	84 db                	test   bl,bl
c0012c68:	75 0c                	jne    c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c6e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c72:	77 02                	ja     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c74:	01 d1                	add    ecx,edx
c0012c76:	89 0e                	mov    DWORD PTR [esi],ecx
c0012c78:	e9 ea 00 00 00       	jmp    c0012d67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c7d:	80 fb 02             	cmp    bl,0x2
c0012c80:	75 7c                	jne    c0012cfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c82:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c89:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c8d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c91:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c97:	74 20                	je     c0012cb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c99:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c9f:	74 18                	je     c0012cb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ca1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ca5:	b9 0a 00 00 00       	mov    ecx,0xa
c0012caa:	66 83 f8 0e          	cmp    ax,0xe
c0012cae:	77 03                	ja     c0012cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012cb0:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012cb3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012cb7:	76 1f                	jbe    c0012cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012cb9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012cbd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cc2:	74 66                	je     c0012d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cc4:	83 ec 0c             	sub    esp,0xc
c0012cc7:	68 6f eb 01 c0       	push   0xc001eb6f
c0012ccc:	e8 b2 d5 ff ff       	call   c0010283 <KePanic(char const*)>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012cd8:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cda:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012cdf:	74 13                	je     c0012cf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012ce1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ce5:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012cec:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012cf0:	01 c8                	add    eax,ecx
c0012cf2:	eb 04                	jmp    c0012cf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012cf4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012cf8:	01 c2                	add    edx,eax
c0012cfa:	89 16                	mov    DWORD PTR [esi],edx
c0012cfc:	eb 69                	jmp    c0012d67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cfe:	0f b6 db             	movzx  ebx,bl
c0012d01:	50                   	push   eax
c0012d02:	50                   	push   eax
c0012d03:	53                   	push   ebx
c0012d04:	68 8b eb 01 c0       	push   0xc001eb8b
c0012d09:	e8 f5 78 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0012d0e:	83 c4 10             	add    esp,0x10
c0012d11:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d16:	74 12                	je     c0012d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d18:	83 ec 0c             	sub    esp,0xc
c0012d1b:	68 96 eb 01 c0       	push   0xc001eb96
c0012d20:	e8 5e d5 ff ff       	call   c0010283 <KePanic(char const*)>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	eb 3d                	jmp    c0012d67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d2a:	83 ec 0c             	sub    esp,0xc
c0012d2d:	55                   	push   ebp
c0012d2e:	e8 63 7f ff ff       	call   c000ac96 <File::close()>
c0012d33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d3c:	59                   	pop    ecx
c0012d3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d41:	e8 83 4a ff ff       	call   c00077c9 <free>
c0012d46:	5b                   	pop    ebx
c0012d47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d4b:	e8 79 4a ff ff       	call   c00077c9 <free>
c0012d50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d53:	e8 71 4a ff ff       	call   c00077c9 <free>
c0012d58:	5e                   	pop    esi
c0012d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d5d:	e8 67 4a ff ff       	call   c00077c9 <free>
c0012d62:	83 c4 10             	add    esp,0x10
c0012d65:	eb 21                	jmp    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012d67:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012d6b:	e9 76 fd ff ff       	jmp    c0012ae6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d77:	e8 4d 4a ff ff       	call   c00077c9 <free>
c0012d7c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d80:	83 c4 10             	add    esp,0x10
c0012d83:	e9 eb fc ff ff       	jmp    c0012a73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d88:	31 c0                	xor    eax,eax
c0012d8a:	eb 33                	jmp    c0012dbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d8c:	83 ec 0c             	sub    esp,0xc
c0012d8f:	55                   	push   ebp
c0012d90:	e8 01 7f ff ff       	call   c000ac96 <File::close()>
c0012d95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d98:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d9e:	58                   	pop    eax
c0012d9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012da3:	e8 21 4a ff ff       	call   c00077c9 <free>
c0012da8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012dab:	e8 19 4a ff ff       	call   c00077c9 <free>
c0012db0:	5a                   	pop    edx
c0012db1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db5:	e8 0f 4a ff ff       	call   c00077c9 <free>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	b0 01                	mov    al,0x1
c0012dbf:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012dc5:	5b                   	pop    ebx
c0012dc6:	5e                   	pop    esi
c0012dc7:	5f                   	pop    edi
c0012dc8:	5d                   	pop    ebp
c0012dc9:	c3                   	ret    

c0012dca <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012dca:	56                   	push   esi
c0012dcb:	31 d2                	xor    edx,edx
c0012dcd:	53                   	push   ebx
c0012dce:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012dd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012dd8:	39 d3                	cmp    ebx,edx
c0012dda:	7e 1b                	jle    c0012df7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012ddc:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012de3:	39 c8                	cmp    eax,ecx
c0012de5:	77 0d                	ja     c0012df4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012de7:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012dee:	01 c6                	add    esi,eax
c0012df0:	39 ce                	cmp    esi,ecx
c0012df2:	77 05                	ja     c0012df9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012df4:	42                   	inc    edx
c0012df5:	eb e1                	jmp    c0012dd8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012df7:	31 c0                	xor    eax,eax
c0012df9:	5b                   	pop    ebx
c0012dfa:	5e                   	pop    esi
c0012dfb:	c3                   	ret    

c0012dfc <Thr::getDriverNameFromAddress(unsigned long)>:
c0012dfc:	53                   	push   ebx
c0012dfd:	31 c0                	xor    eax,eax
c0012dff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e03:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012e09:	39 c3                	cmp    ebx,eax
c0012e0b:	7e 22                	jle    c0012e2f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012e0d:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012e14:	39 ca                	cmp    edx,ecx
c0012e16:	77 14                	ja     c0012e2c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e18:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012e1f:	39 ca                	cmp    edx,ecx
c0012e21:	76 09                	jbe    c0012e2c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e23:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012e2a:	eb 05                	jmp    c0012e31 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012e2c:	40                   	inc    eax
c0012e2d:	eb da                	jmp    c0012e09 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012e2f:	31 c0                	xor    eax,eax
c0012e31:	5b                   	pop    ebx
c0012e32:	c3                   	ret    

c0012e33 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012e33:	53                   	push   ebx
c0012e34:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e38:	53                   	push   ebx
c0012e39:	e8 8c ff ff ff       	call   c0012dca <Thr::getDriverBaseFromAddress(unsigned long)>
c0012e3e:	5a                   	pop    edx
c0012e3f:	31 d2                	xor    edx,edx
c0012e41:	85 c0                	test   eax,eax
c0012e43:	74 04                	je     c0012e49 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012e45:	89 da                	mov    edx,ebx
c0012e47:	29 c2                	sub    edx,eax
c0012e49:	89 d0                	mov    eax,edx
c0012e4b:	5b                   	pop    ebx
c0012e4c:	c3                   	ret    

c0012e4d <Thr::loadDLL(char const*, bool)>:
c0012e4d:	55                   	push   ebp
c0012e4e:	57                   	push   edi
c0012e4f:	56                   	push   esi
c0012e50:	53                   	push   ebx
c0012e51:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e57:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012e5e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012e65:	56                   	push   esi
c0012e66:	68 ae eb 01 c0       	push   0xc001ebae
c0012e6b:	e8 93 77 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0012e70:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012e77:	e8 3d 49 ff ff       	call   c00077b9 <malloc>
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	89 c3                	mov    ebx,eax
c0012e81:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e87:	56                   	push   esi
c0012e88:	50                   	push   eax
c0012e89:	e8 ea 7c ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0012e8e:	83 c4 10             	add    esp,0x10
c0012e91:	85 db                	test   ebx,ebx
c0012e93:	75 3c                	jne    c0012ed1 <Thr::loadDLL(char const*, bool)+0x84>
c0012e95:	89 f8                	mov    eax,edi
c0012e97:	84 c0                	test   al,al
c0012e99:	0f 84 d2 01 00 00    	je     c0013071 <Thr::loadDLL(char const*, bool)+0x224>
c0012e9f:	55                   	push   ebp
c0012ea0:	55                   	push   ebp
c0012ea1:	68 bf eb 01 c0       	push   0xc001ebbf
c0012ea6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012eaa:	55                   	push   ebp
c0012eab:	e8 50 d7 fe ff       	call   c0000600 <strcpy>
c0012eb0:	58                   	pop    eax
c0012eb1:	5a                   	pop    edx
c0012eb2:	56                   	push   esi
c0012eb3:	55                   	push   ebp
c0012eb4:	e8 07 d9 fe ff       	call   c00007c0 <strcat>
c0012eb9:	59                   	pop    ecx
c0012eba:	58                   	pop    eax
c0012ebb:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012ec0:	55                   	push   ebp
c0012ec1:	e8 fa d8 fe ff       	call   c00007c0 <strcat>
c0012ec6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ec9:	e8 b5 d3 ff ff       	call   c0010283 <KePanic(char const*)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	51                   	push   ecx
c0012ed2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012ed6:	50                   	push   eax
c0012ed7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012edb:	50                   	push   eax
c0012edc:	53                   	push   ebx
c0012edd:	e8 02 80 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0012ee2:	83 c4 10             	add    esp,0x10
c0012ee5:	85 db                	test   ebx,ebx
c0012ee7:	74 0c                	je     c0012ef5 <Thr::loadDLL(char const*, bool)+0xa8>
c0012ee9:	83 ec 0c             	sub    esp,0xc
c0012eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eee:	53                   	push   ebx
c0012eef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012efa:	75 0a                	jne    c0012f06 <Thr::loadDLL(char const*, bool)+0xb9>
c0012efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f00:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012f04:	75 3c                	jne    c0012f42 <Thr::loadDLL(char const*, bool)+0xf5>
c0012f06:	89 f8                	mov    eax,edi
c0012f08:	84 c0                	test   al,al
c0012f0a:	0f 84 49 01 00 00    	je     c0013059 <Thr::loadDLL(char const*, bool)+0x20c>
c0012f10:	51                   	push   ecx
c0012f11:	51                   	push   ecx
c0012f12:	68 bf eb 01 c0       	push   0xc001ebbf
c0012f17:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012f1b:	53                   	push   ebx
c0012f1c:	e8 df d6 fe ff       	call   c0000600 <strcpy>
c0012f21:	5d                   	pop    ebp
c0012f22:	58                   	pop    eax
c0012f23:	56                   	push   esi
c0012f24:	53                   	push   ebx
c0012f25:	e8 96 d8 fe ff       	call   c00007c0 <strcat>
c0012f2a:	58                   	pop    eax
c0012f2b:	5a                   	pop    edx
c0012f2c:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012f31:	53                   	push   ebx
c0012f32:	e8 89 d8 fe ff       	call   c00007c0 <strcat>
c0012f37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f3a:	e8 44 d3 ff ff       	call   c0010283 <KePanic(char const*)>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	52                   	push   edx
c0012f43:	6a 03                	push   0x3
c0012f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f4d:	05 ff 0f 00 00       	add    eax,0xfff
c0012f52:	83 d2 00             	adc    edx,0x0
c0012f55:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f59:	50                   	push   eax
c0012f5a:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f60:	e8 97 6a ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012f65:	59                   	pop    ecx
c0012f66:	89 c3                	mov    ebx,eax
c0012f68:	5d                   	pop    ebp
c0012f69:	50                   	push   eax
c0012f6a:	68 f6 d7 01 c0       	push   0xc001d7f6
c0012f6f:	e8 8f 76 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0012f74:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f77:	e8 c4 d5 fe ff       	call   c0000540 <strlen>
c0012f7c:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012f82:	40                   	inc    eax
c0012f83:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f86:	e8 2e 48 ff ff       	call   c00077b9 <malloc>
c0012f8b:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012f92:	58                   	pop    eax
c0012f93:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f98:	5a                   	pop    edx
c0012f99:	56                   	push   esi
c0012f9a:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012fa1:	e8 5a d6 fe ff       	call   c0000600 <strcpy>
c0012fa6:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012fab:	8d 50 01             	lea    edx,[eax+0x1]
c0012fae:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012fb5:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012fbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012fbf:	83 c4 0c             	add    esp,0xc
c0012fc2:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012fc9:	6a 01                	push   0x1
c0012fcb:	53                   	push   ebx
c0012fcc:	56                   	push   esi
c0012fcd:	e8 c2 f6 ff ff       	call   c0012694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012fd2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fde:	0f 85 89 00 00 00    	jne    c001306d <Thr::loadDLL(char const*, bool)+0x220>
c0012fe4:	89 f8                	mov    eax,edi
c0012fe6:	84 c0                	test   al,al
c0012fe8:	74 73                	je     c001305d <Thr::loadDLL(char const*, bool)+0x210>
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	68 d4 eb 01 c0       	push   0xc001ebd4
c0012ff2:	e8 8c d2 ff ff       	call   c0010283 <KePanic(char const*)>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	eb 61                	jmp    c001305d <Thr::loadDLL(char const*, bool)+0x210>
c0012ffc:	50                   	push   eax
c0012ffd:	50                   	push   eax
c0012ffe:	89 e8                	mov    eax,ebp
c0013000:	c1 e0 0c             	shl    eax,0xc
c0013003:	01 d8                	add    eax,ebx
c0013005:	50                   	push   eax
c0013006:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001300c:	e8 49 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0013011:	83 c4 10             	add    esp,0x10
c0013014:	8b 00                	mov    eax,DWORD PTR [eax]
c0013016:	a8 60                	test   al,0x60
c0013018:	75 11                	jne    c001302b <Thr::loadDLL(char const*, bool)+0x1de>
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013022:	50                   	push   eax
c0013023:	e8 0b 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	45                   	inc    ebp
c001302c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013030:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013034:	05 ff 0f 00 00       	add    eax,0xfff
c0013039:	bf 00 00 00 00       	mov    edi,0x0
c001303e:	83 d2 00             	adc    edx,0x0
c0013041:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013045:	c1 ea 0c             	shr    edx,0xc
c0013048:	39 c5                	cmp    ebp,eax
c001304a:	89 d1                	mov    ecx,edx
c001304c:	89 f8                	mov    eax,edi
c001304e:	19 c8                	sbb    eax,ecx
c0013050:	72 aa                	jb     c0012ffc <Thr::loadDLL(char const*, bool)+0x1af>
c0013052:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013057:	75 18                	jne    c0013071 <Thr::loadDLL(char const*, bool)+0x224>
c0013059:	31 db                	xor    ebx,ebx
c001305b:	eb 14                	jmp    c0013071 <Thr::loadDLL(char const*, bool)+0x224>
c001305d:	83 ec 0c             	sub    esp,0xc
c0013060:	68 f3 eb 01 c0       	push   0xc001ebf3
c0013065:	e8 19 d2 ff ff       	call   c0010283 <KePanic(char const*)>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	31 ed                	xor    ebp,ebp
c001306f:	eb bb                	jmp    c001302c <Thr::loadDLL(char const*, bool)+0x1df>
c0013071:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013077:	89 d8                	mov    eax,ebx
c0013079:	5b                   	pop    ebx
c001307a:	5e                   	pop    esi
c001307b:	5f                   	pop    edi
c001307c:	5d                   	pop    ebp
c001307d:	c3                   	ret    

c001307e <Thr::executeDLL(unsigned long, void*)>:
c001307e:	56                   	push   esi
c001307f:	53                   	push   ebx
c0013080:	52                   	push   edx
c0013081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013085:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013089:	85 db                	test   ebx,ebx
c001308b:	75 10                	jne    c001309d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001308d:	83 ec 0c             	sub    esp,0xc
c0013090:	68 0f ec 01 c0       	push   0xc001ec0f
c0013095:	e8 e9 d1 ff ff       	call   c0010283 <KePanic(char const*)>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	50                   	push   eax
c001309e:	50                   	push   eax
c001309f:	53                   	push   ebx
c00130a0:	68 39 ec 01 c0       	push   0xc001ec39
c00130a5:	e8 59 75 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00130aa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00130ae:	89 d8                	mov    eax,ebx
c00130b0:	83 c4 14             	add    esp,0x14
c00130b3:	5b                   	pop    ebx
c00130b4:	5e                   	pop    esi
c00130b5:	ff e0                	jmp    eax
c00130b7:	90                   	nop

c00130b8 <userModeEntryPoint(void*)>:
c00130b8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00130bd:	48                   	dec    eax
c00130be:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00130c3:	75 03                	jne    c00130c8 <userModeEntryPoint(void*)+0x10>
c00130c5:	fb                   	sti    
c00130c6:	66 90                	xchg   ax,ax
c00130c8:	fb                   	sti    
c00130c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00130d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130db:	e9 5f d1 fe ff       	jmp    c000023f <goToUsermode>

c00130e0 <changeTSS>:
c00130e0:	83 ec 14             	sub    esp,0x14
c00130e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00130eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00130f0:	c1 e2 15             	shl    edx,0x15
c00130f3:	29 d0                	sub    eax,edx
c00130f5:	50                   	push   eax
c00130f6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00130fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013101:	05 7c 11 00 00       	add    eax,0x117c
c0013106:	50                   	push   eax
c0013107:	e8 cc 5a ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c001310c:	83 c4 1c             	add    esp,0x1c
c001310f:	c3                   	ret    

c0013110 <switchToThread(ThreadControlBlock*)>:
c0013110:	57                   	push   edi
c0013111:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013116:	56                   	push   esi
c0013117:	85 c0                	test   eax,eax
c0013119:	53                   	push   ebx
c001311a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001311e:	0f 85 90 00 00 00    	jne    c00131b4 <switchToThread(ThreadControlBlock*)+0xa4>
c0013124:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013127:	80 fa ff             	cmp    dl,0xff
c001312a:	0f 84 80 00 00 00    	je     c00131b0 <switchToThread(ThreadControlBlock*)+0xa0>
c0013130:	81 e2 ff 00 00 00    	and    edx,0xff
c0013136:	b8 00 04 00 00       	mov    eax,0x400
c001313b:	29 d0                	sub    eax,edx
c001313d:	d1 f8                	sar    eax,1
c001313f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013142:	66 90                	xchg   ax,ax
c0013144:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013147:	e8 1d 26 00 00       	call   c0015769 <HalQueryPerformanceCounter()>
c001314c:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013151:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c0013157:	89 c6                	mov    esi,eax
c0013159:	89 d7                	mov    edi,edx
c001315b:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013161:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c0013166:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c001316c:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c0013172:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c0013178:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001317e:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013184:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013187:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001318a:	01 c6                	add    esi,eax
c001318c:	11 d7                	adc    edi,edx
c001318e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013191:	83 ec 0c             	sub    esp,0xc
c0013194:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013197:	53                   	push   ebx
c0013198:	e8 da d0 fe ff       	call   c0000277 <switchToThreadASM>
c001319d:	0f 20 c0             	mov    eax,cr0
c00131a0:	83 c8 08             	or     eax,0x8
c00131a3:	0f 22 c0             	mov    cr0,eax
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	5b                   	pop    ebx
c00131aa:	5e                   	pop    esi
c00131ab:	5f                   	pop    edi
c00131ac:	c3                   	ret    
c00131ad:	8d 76 00             	lea    esi,[esi+0x0]
c00131b0:	31 c0                	xor    eax,eax
c00131b2:	eb 90                	jmp    c0013144 <switchToThread(ThreadControlBlock*)+0x34>
c00131b4:	5b                   	pop    ebx
c00131b5:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00131bf:	5e                   	pop    esi
c00131c0:	5f                   	pop    edi
c00131c1:	c3                   	ret    
c00131c2:	66 90                	xchg   ax,ax

c00131c4 <Process::addArgs(char**)>:
c00131c4:	57                   	push   edi
c00131c5:	56                   	push   esi
c00131c6:	53                   	push   ebx
c00131c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131cf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00131d9:	85 ff                	test   edi,edi
c00131db:	74 43                	je     c0013220 <Process::addArgs(char**)+0x5c>
c00131dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00131df:	85 c0                	test   eax,eax
c00131e1:	74 3d                	je     c0013220 <Process::addArgs(char**)+0x5c>
c00131e3:	31 db                	xor    ebx,ebx
c00131e5:	8d 76 00             	lea    esi,[esi+0x0]
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	50                   	push   eax
c00131ec:	e8 4f d3 fe ff       	call   c0000540 <strlen>
c00131f1:	40                   	inc    eax
c00131f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00131f5:	e8 bf 45 ff ff       	call   c00077b9 <malloc>
c00131fa:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013201:	5a                   	pop    edx
c0013202:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013205:	59                   	pop    ecx
c0013206:	43                   	inc    ebx
c0013207:	52                   	push   edx
c0013208:	50                   	push   eax
c0013209:	e8 f2 d3 fe ff       	call   c0000600 <strcpy>
c001320e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013214:	83 c4 10             	add    esp,0x10
c0013217:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001321a:	85 c0                	test   eax,eax
c001321c:	75 ca                	jne    c00131e8 <Process::addArgs(char**)+0x24>
c001321e:	66 90                	xchg   ax,ax
c0013220:	5b                   	pop    ebx
c0013221:	5e                   	pop    esi
c0013222:	5f                   	pop    edi
c0013223:	c3                   	ret    

c0013224 <Process::Process(char const*, Process*, char**)>:
c0013224:	56                   	push   esi
c0013225:	53                   	push   ebx
c0013226:	83 ec 14             	sub    esp,0x14
c0013229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001322d:	05 0c 02 00 00       	add    eax,0x20c
c0013232:	bb 07 00 00 00       	mov    ebx,0x7
c0013237:	89 c6                	mov    esi,eax
c0013239:	8d 76 00             	lea    esi,[esi+0x0]
c001323c:	85 db                	test   ebx,ebx
c001323e:	78 14                	js     c0013254 <Process::Process(char const*, Process*, char**)+0x30>
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	56                   	push   esi
c0013244:	e8 93 98 00 00       	call   c001cadc <ThreadControlBlock::ThreadControlBlock()>
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	83 c6 5f             	add    esi,0x5f
c001324f:	4b                   	dec    ebx
c0013250:	eb ea                	jmp    c001323c <Process::Process(char const*, Process*, char**)+0x18>
c0013252:	66 90                	xchg   ax,ax
c0013254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013258:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001325f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013263:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013271:	e8 02 ce ff ff       	call   c0010078 <Krnl::newProcessEnv(Process*)>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	89 c2                	mov    edx,eax
c001327b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013289:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013292:	a1 ec fb 01 c0       	mov    eax,ds:0xc001fbec
c0013297:	8d 50 01             	lea    edx,[eax+0x1]
c001329a:	89 15 ec fb 01 c0    	mov    DWORD PTR ds:0xc001fbec,edx
c00132a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132a4:	89 02                	mov    DWORD PTR [edx],eax
c00132a6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00132ae:	83 ec 0c             	sub    esp,0xc
c00132b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132b5:	e8 ff 44 ff ff       	call   c00077b9 <malloc>
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	89 c3                	mov    ebx,eax
c00132bf:	83 ec 08             	sub    esp,0x8
c00132c2:	6a 00                	push   0x0
c00132c4:	53                   	push   ebx
c00132c5:	e8 54 6b ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00132d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132db:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00132e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132ed:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00132f3:	e8 f6 d2 ff ff       	call   c00105ee <KeInitSignals()>
c00132f8:	89 c2                	mov    edx,eax
c00132fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132fe:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013308:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001330e:	85 c0                	test   eax,eax
c0013310:	74 42                	je     c0013354 <Process::Process(char const*, Process*, char**)+0x130>
c0013312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013316:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001331c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013326:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001332c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013330:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013336:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001333c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013340:	05 0c 01 00 00       	add    eax,0x10c
c0013345:	83 ec 08             	sub    esp,0x8
c0013348:	52                   	push   edx
c0013349:	50                   	push   eax
c001334a:	e8 b1 d2 fe ff       	call   c0000600 <strcpy>
c001334f:	83 c4 10             	add    esp,0x10
c0013352:	eb 64                	jmp    c00133b8 <Process::Process(char const*, Process*, char**)+0x194>
c0013354:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001335c:	83 ec 0c             	sub    esp,0xc
c001335f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013363:	e8 51 44 ff ff       	call   c00077b9 <malloc>
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	89 c3                	mov    ebx,eax
c001336d:	83 ec 08             	sub    esp,0x8
c0013370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013374:	53                   	push   ebx
c0013375:	e8 80 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013381:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001338b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	50                   	push   eax
c0013395:	e8 00 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001339a:	83 c4 10             	add    esp,0x10
c001339d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133a1:	05 0c 01 00 00       	add    eax,0x10c
c00133a6:	83 ec 08             	sub    esp,0x8
c00133a9:	68 58 ec 01 c0       	push   0xc001ec58
c00133ae:	50                   	push   eax
c00133af:	e8 4c d2 fe ff       	call   c0000600 <strcpy>
c00133b4:	83 c4 10             	add    esp,0x10
c00133b7:	90                   	nop
c00133b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133bc:	83 c0 0c             	add    eax,0xc
c00133bf:	83 ec 08             	sub    esp,0x8
c00133c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133c6:	50                   	push   eax
c00133c7:	e8 34 d2 fe ff       	call   c0000600 <strcpy>
c00133cc:	83 c4 10             	add    esp,0x10
c00133cf:	83 ec 08             	sub    esp,0x8
c00133d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133da:	e8 e5 fd ff ff       	call   c00131c4 <Process::addArgs(char**)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	83 ec 08             	sub    esp,0x8
c00133e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133ed:	e8 6c ed ff ff       	call   c001215e <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00133f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133fd:	83 f0 01             	xor    eax,0x1
c0013400:	88 c2                	mov    dl,al
c0013402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013406:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001340c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013410:	25 ff 00 00 00       	and    eax,0xff
c0013415:	83 ec 08             	sub    esp,0x8
c0013418:	50                   	push   eax
c0013419:	68 b0 ec 01 c0       	push   0xc001ecb0
c001341e:	e8 e0 71 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	90                   	nop
c0013427:	83 c4 14             	add    esp,0x14
c001342a:	5b                   	pop    ebx
c001342b:	5e                   	pop    esi
c001342c:	c3                   	ret    
c001342d:	90                   	nop
c001342e:	66 90                	xchg   ax,ax

c0013430 <Process::Process(bool, char const*, Process*, char**)>:
c0013430:	56                   	push   esi
c0013431:	53                   	push   ebx
c0013432:	83 ec 24             	sub    esp,0x24
c0013435:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013439:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001343d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013441:	05 0c 02 00 00       	add    eax,0x20c
c0013446:	bb 07 00 00 00       	mov    ebx,0x7
c001344b:	89 c6                	mov    esi,eax
c001344d:	8d 76 00             	lea    esi,[esi+0x0]
c0013450:	85 db                	test   ebx,ebx
c0013452:	78 14                	js     c0013468 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013454:	83 ec 0c             	sub    esp,0xc
c0013457:	56                   	push   esi
c0013458:	e8 7f 96 00 00       	call   c001cadc <ThreadControlBlock::ThreadControlBlock()>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	83 c6 5f             	add    esi,0x5f
c0013463:	4b                   	dec    ebx
c0013464:	eb ea                	jmp    c0013450 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013466:	66 90                	xchg   ax,ax
c0013468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013477:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013485:	e8 ee cb ff ff       	call   c0010078 <Krnl::newProcessEnv(Process*)>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	89 c2                	mov    edx,eax
c001348f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013493:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013499:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001349d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134a6:	a1 ec fb 01 c0       	mov    eax,ds:0xc001fbec
c00134ab:	8d 50 01             	lea    edx,[eax+0x1]
c00134ae:	89 15 ec fb 01 c0    	mov    DWORD PTR ds:0xc001fbec,edx
c00134b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00134b8:	89 02                	mov    DWORD PTR [edx],eax
c00134ba:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00134c2:	83 ec 0c             	sub    esp,0xc
c00134c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00134c9:	e8 eb 42 ff ff       	call   c00077b9 <malloc>
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	89 c3                	mov    ebx,eax
c00134d3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00134d7:	25 ff 00 00 00       	and    eax,0xff
c00134dc:	83 ec 08             	sub    esp,0x8
c00134df:	50                   	push   eax
c00134e0:	53                   	push   ebx
c00134e1:	e8 38 69 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ed:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013505:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013509:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001350f:	e8 da d0 ff ff       	call   c00105ee <KeInitSignals()>
c0013514:	89 c2                	mov    edx,eax
c0013516:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001351a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013524:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001352a:	85 c0                	test   eax,eax
c001352c:	74 42                	je     c0013570 <Process::Process(bool, char const*, Process*, char**)+0x140>
c001352e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013532:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013538:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001353e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013542:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001354c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013552:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013558:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001355c:	05 0c 01 00 00       	add    eax,0x10c
c0013561:	83 ec 08             	sub    esp,0x8
c0013564:	52                   	push   edx
c0013565:	50                   	push   eax
c0013566:	e8 95 d0 fe ff       	call   c0000600 <strcpy>
c001356b:	83 c4 10             	add    esp,0x10
c001356e:	eb 64                	jmp    c00135d4 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013570:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013578:	83 ec 0c             	sub    esp,0xc
c001357b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001357f:	e8 35 42 ff ff       	call   c00077b9 <malloc>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	89 c3                	mov    ebx,eax
c0013589:	83 ec 08             	sub    esp,0x8
c001358c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013590:	53                   	push   ebx
c0013591:	e8 64 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013596:	83 c4 10             	add    esp,0x10
c0013599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001359d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135ad:	83 ec 0c             	sub    esp,0xc
c00135b0:	50                   	push   eax
c00135b1:	e8 e4 4b ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135bd:	05 0c 01 00 00       	add    eax,0x10c
c00135c2:	83 ec 08             	sub    esp,0x8
c00135c5:	68 58 ec 01 c0       	push   0xc001ec58
c00135ca:	50                   	push   eax
c00135cb:	e8 30 d0 fe ff       	call   c0000600 <strcpy>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	90                   	nop
c00135d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d8:	83 c0 0c             	add    eax,0xc
c00135db:	83 ec 08             	sub    esp,0x8
c00135de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135e2:	50                   	push   eax
c00135e3:	e8 18 d0 fe ff       	call   c0000600 <strcpy>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	83 ec 08             	sub    esp,0x8
c00135ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00135f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135f6:	e8 c9 fb ff ff       	call   c00131c4 <Process::addArgs(char**)>
c00135fb:	83 c4 10             	add    esp,0x10
c00135fe:	90                   	nop
c00135ff:	83 c4 24             	add    esp,0x24
c0013602:	5b                   	pop    ebx
c0013603:	5e                   	pop    esi
c0013604:	c3                   	ret    
c0013605:	8d 76 00             	lea    esi,[esi+0x0]

c0013608 <taskStartupFunction>:
c0013608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001360d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013610:	c3                   	ret    
c0013611:	90                   	nop
c0013612:	66 90                	xchg   ax,ax

c0013614 <Semaphore::Semaphore(int)>:
c0013614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001361c:	89 10                	mov    DWORD PTR [eax],edx
c001361e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013622:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001362d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013638:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001363f:	90                   	nop
c0013640:	c3                   	ret    
c0013641:	90                   	nop
c0013642:	66 90                	xchg   ax,ax

c0013644 <Mutex::Mutex()>:
c0013644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013648:	6a 01                	push   0x1
c001364a:	50                   	push   eax
c001364b:	e8 c4 ff ff ff       	call   c0013614 <Semaphore::Semaphore(int)>
c0013650:	83 c4 08             	add    esp,0x8
c0013653:	90                   	nop
c0013654:	c3                   	ret    
c0013655:	90                   	nop
c0013656:	66 90                	xchg   ax,ax

c0013658 <Process::createThread(void (*)(void*), void*, int)>:
c0013658:	57                   	push   edi
c0013659:	31 c9                	xor    ecx,ecx
c001365b:	56                   	push   esi
c001365c:	53                   	push   ebx
c001365d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013661:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013668:	89 f2                	mov    edx,esi
c001366a:	66 90                	xchg   ax,ax
c001366c:	31 c0                	xor    eax,eax
c001366e:	66 89 d0             	mov    ax,dx
c0013671:	83 e2 01             	and    edx,0x1
c0013674:	74 12                	je     c0013688 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013676:	d1 f8                	sar    eax,1
c0013678:	41                   	inc    ecx
c0013679:	89 c2                	mov    edx,eax
c001367b:	83 f9 10             	cmp    ecx,0x10
c001367e:	75 ec                	jne    c001366c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013680:	31 db                	xor    ebx,ebx
c0013682:	89 d8                	mov    eax,ebx
c0013684:	5b                   	pop    ebx
c0013685:	5e                   	pop    esi
c0013686:	5f                   	pop    edi
c0013687:	c3                   	ret    
c0013688:	b8 01 00 00 00       	mov    eax,0x1
c001368d:	d3 e0                	shl    eax,cl
c001368f:	09 c6                	or     esi,eax
c0013691:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013694:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001369b:	01 c0                	add    eax,eax
c001369d:	01 c8                	add    eax,ecx
c001369f:	8d 04 80             	lea    eax,[eax+eax*4]
c00136a2:	01 d8                	add    eax,ebx
c00136a4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00136ab:	75 0b                	jne    c00136b8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00136ad:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00136b7:	90                   	nop
c00136b8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00136be:	83 ec 08             	sub    esp,0x8
c00136c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00136c4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00136c7:	01 c0                	add    eax,eax
c00136c9:	01 c8                	add    eax,ecx
c00136cb:	8d 3c 80             	lea    edi,[eax+eax*4]
c00136ce:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00136d1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00136d7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00136dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136e1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00136e7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00136ed:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00136f4:	89 ca                	mov    edx,ecx
c00136f6:	f7 da                	neg    edx
c00136f8:	c1 e2 15             	shl    edx,0x15
c00136fb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013701:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013707:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001370b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013715:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001371b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001371f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013725:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001372f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013739:	53                   	push   ebx
c001373a:	68 84 51 02 c0       	push   0xc0025184
c001373f:	e8 38 91 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	89 d8                	mov    eax,ebx
c0013749:	5b                   	pop    ebx
c001374a:	5e                   	pop    esi
c001374b:	5f                   	pop    edi
c001374c:	c3                   	ret    
c001374d:	90                   	nop
c001374e:	66 90                	xchg   ax,ax

c0013750 <Process::createUserThread()>:
c0013750:	83 ec 0c             	sub    esp,0xc
c0013753:	68 80 00 00 00       	push   0x80
c0013758:	6a 00                	push   0x0
c001375a:	68 b8 30 01 c0       	push   0xc00130b8
c001375f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013763:	50                   	push   eax
c0013764:	e8 ef fe ff ff       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c0013769:	83 c4 1c             	add    esp,0x1c
c001376c:	c3                   	ret    
c001376d:	8d 76 00             	lea    esi,[esi+0x0]

c0013770 <setupMultitasking(void (*)())>:
c0013770:	56                   	push   esi
c0013771:	53                   	push   ebx
c0013772:	53                   	push   ebx
c0013773:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013777:	eb 13                	jmp    c001378c <setupMultitasking(void (*)())+0x1c>
c0013779:	8d 76 00             	lea    esi,[esi+0x0]
c001377c:	83 ec 0c             	sub    esp,0xc
c001377f:	68 84 51 02 c0       	push   0xc0025184
c0013784:	e8 3b 90 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	83 ec 0c             	sub    esp,0xc
c001378f:	68 84 51 02 c0       	push   0xc0025184
c0013794:	e8 07 90 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	84 c0                	test   al,al
c001379e:	74 dc                	je     c001377c <setupMultitasking(void (*)())+0xc>
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	68 24 07 00 00       	push   0x724
c00137a8:	e8 0c 40 ff ff       	call   c00077b9 <malloc>
c00137ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00137b4:	89 c3                	mov    ebx,eax
c00137b6:	6a 00                	push   0x0
c00137b8:	68 5c ec 01 c0       	push   0xc001ec5c
c00137bd:	6a 01                	push   0x1
c00137bf:	50                   	push   eax
c00137c0:	e8 6b fc ff ff       	call   c0013430 <Process::Process(bool, char const*, Process*, char**)>
c00137c5:	83 c4 14             	add    esp,0x14
c00137c8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00137ce:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00137d4:	50                   	push   eax
c00137d5:	e8 1d 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00137da:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00137e2:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00137ec:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00137f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137f5:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00137ff:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013805:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001380b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013815:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001381f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013829:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001382f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013835:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001383f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013845:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001384f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013855:	5a                   	pop    edx
c0013856:	59                   	pop    ecx
c0013857:	68 58 ec 01 c0       	push   0xc001ec58
c001385c:	50                   	push   eax
c001385d:	e8 9e cd fe ff       	call   c0000600 <strcpy>
c0013862:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013869:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001386d:	83 c4 14             	add    esp,0x14
c0013870:	5b                   	pop    ebx
c0013871:	5e                   	pop    esi
c0013872:	e9 f2 c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013877:	90                   	nop

c0013878 <schedule()>:
c0013878:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c001387e:	85 d2                	test   edx,edx
c0013880:	74 0e                	je     c0013890 <schedule()+0x18>
c0013882:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c001388c:	c3                   	ret    
c001388d:	8d 76 00             	lea    esi,[esi+0x0]
c0013890:	53                   	push   ebx
c0013891:	83 ec 14             	sub    esp,0x14
c0013894:	68 84 51 02 c0       	push   0xc0025184
c0013899:	e8 02 8f 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001389e:	83 c4 10             	add    esp,0x10
c00138a1:	84 c0                	test   al,al
c00138a3:	75 3b                	jne    c00138e0 <schedule()+0x68>
c00138a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00138ad:	4a                   	dec    edx
c00138ae:	74 38                	je     c00138e8 <schedule()+0x70>
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	68 84 51 02 c0       	push   0xc0025184
c00138b8:	e8 ff 8e 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00138bd:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00138c4:	89 c3                	mov    ebx,eax
c00138c6:	e8 f9 8e 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00138cb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00138d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138d5:	e8 36 f8 ff ff       	call   c0013110 <switchToThread(ThreadControlBlock*)>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	8d 76 00             	lea    esi,[esi+0x0]
c00138e0:	83 c4 08             	add    esp,0x8
c00138e3:	5b                   	pop    ebx
c00138e4:	c3                   	ret    
c00138e5:	8d 76 00             	lea    esi,[esi+0x0]
c00138e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00138ef:	83 ec 08             	sub    esp,0x8
c00138f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138f7:	50                   	push   eax
c00138f8:	68 84 51 02 c0       	push   0xc0025184
c00138fd:	e8 7a 8f 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	eb a9                	jmp    c00138b0 <schedule()+0x38>
c0013907:	90                   	nop

c0013908 <Semaphore::tryAcquire()>:
c0013908:	53                   	push   ebx
c0013909:	83 ec 08             	sub    esp,0x8
c001390c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013910:	fa                   	cli    
c0013911:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013916:	8d 50 01             	lea    edx,[eax+0x1]
c0013919:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001391f:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013925:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013928:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c001392e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013931:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013933:	7c 33                	jl     c0013968 <Semaphore::tryAcquire()+0x60>
c0013935:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001393b:	85 d2                	test   edx,edx
c001393d:	75 0d                	jne    c001394c <Semaphore::tryAcquire()+0x44>
c001393f:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013945:	85 d2                	test   edx,edx
c0013947:	75 6b                	jne    c00139b4 <Semaphore::tryAcquire()+0xac>
c0013949:	8d 76 00             	lea    esi,[esi+0x0]
c001394c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013951:	85 c0                	test   eax,eax
c0013953:	74 0b                	je     c0013960 <Semaphore::tryAcquire()+0x58>
c0013955:	8d 76 00             	lea    esi,[esi+0x0]
c0013958:	31 c0                	xor    eax,eax
c001395a:	83 c4 08             	add    esp,0x8
c001395d:	5b                   	pop    ebx
c001395e:	c3                   	ret    
c001395f:	90                   	nop
c0013960:	fb                   	sti    
c0013961:	83 c4 08             	add    esp,0x8
c0013964:	5b                   	pop    ebx
c0013965:	c3                   	ret    
c0013966:	66 90                	xchg   ax,ax
c0013968:	43                   	inc    ebx
c0013969:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001396f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013972:	85 d2                	test   edx,edx
c0013974:	75 22                	jne    c0013998 <Semaphore::tryAcquire()+0x90>
c0013976:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c001397c:	85 c9                	test   ecx,ecx
c001397e:	74 18                	je     c0013998 <Semaphore::tryAcquire()+0x90>
c0013980:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001398a:	e8 e9 fe ff ff       	call   c0013878 <schedule()>
c001398f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013994:	48                   	dec    eax
c0013995:	8d 76 00             	lea    esi,[esi+0x0]
c0013998:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001399d:	85 c0                	test   eax,eax
c001399f:	75 0b                	jne    c00139ac <Semaphore::tryAcquire()+0xa4>
c00139a1:	fb                   	sti    
c00139a2:	b0 01                	mov    al,0x1
c00139a4:	83 c4 08             	add    esp,0x8
c00139a7:	5b                   	pop    ebx
c00139a8:	c3                   	ret    
c00139a9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ac:	b0 01                	mov    al,0x1
c00139ae:	83 c4 08             	add    esp,0x8
c00139b1:	5b                   	pop    ebx
c00139b2:	c3                   	ret    
c00139b3:	90                   	nop
c00139b4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139be:	e8 b5 fe ff ff       	call   c0013878 <schedule()>
c00139c3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139c8:	48                   	dec    eax
c00139c9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139ce:	85 c0                	test   eax,eax
c00139d0:	75 86                	jne    c0013958 <Semaphore::tryAcquire()+0x50>
c00139d2:	eb 8c                	jmp    c0013960 <Semaphore::tryAcquire()+0x58>

c00139d4 <Semaphore::assertLocked(char const*)>:
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139db:	fa                   	cli    
c00139dc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139e2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00139ea:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00139f0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139f2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00139f5:	7c 29                	jl     c0013a20 <Semaphore::assertLocked(char const*)+0x4c>
c00139f7:	90                   	nop
c00139f8:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00139fd:	85 c0                	test   eax,eax
c00139ff:	75 0b                	jne    c0013a0c <Semaphore::assertLocked(char const*)+0x38>
c0013a01:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a06:	85 c0                	test   eax,eax
c0013a08:	75 2e                	jne    c0013a38 <Semaphore::assertLocked(char const*)+0x64>
c0013a0a:	66 90                	xchg   ax,ax
c0013a0c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a11:	48                   	dec    eax
c0013a12:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a17:	75 03                	jne    c0013a1c <Semaphore::assertLocked(char const*)+0x48>
c0013a19:	fb                   	sti    
c0013a1a:	66 90                	xchg   ax,ax
c0013a1c:	83 c4 0c             	add    esp,0xc
c0013a1f:	c3                   	ret    
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a27:	52                   	push   edx
c0013a28:	e8 56 c8 ff ff       	call   c0010283 <KePanic(char const*)>
c0013a2d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a32:	83 c4 10             	add    esp,0x10
c0013a35:	48                   	dec    eax
c0013a36:	eb c0                	jmp    c00139f8 <Semaphore::assertLocked(char const*)+0x24>
c0013a38:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a42:	e8 31 fe ff ff       	call   c0013878 <schedule()>
c0013a47:	eb c3                	jmp    c0013a0c <Semaphore::assertLocked(char const*)+0x38>
c0013a49:	8d 76 00             	lea    esi,[esi+0x0]

c0013a4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a5b:	e8 18 fe ff ff       	call   c0013878 <schedule()>
c0013a60:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a65:	48                   	dec    eax
c0013a66:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a6b:	75 03                	jne    c0013a70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a6d:	fb                   	sti    
c0013a6e:	66 90                	xchg   ax,ax
c0013a70:	83 c4 0c             	add    esp,0xc
c0013a73:	c3                   	ret    

c0013a74 <blockTask(TaskState)>:
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	fa                   	cli    
c0013a78:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a8a:	e8 e9 fd ff ff       	call   c0013878 <schedule()>
c0013a8f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a94:	48                   	dec    eax
c0013a95:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a9a:	75 04                	jne    c0013aa0 <blockTask(TaskState)+0x2c>
c0013a9c:	fb                   	sti    
c0013a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa0:	83 c4 0c             	add    esp,0xc
c0013aa3:	c3                   	ret    

c0013aa4 <waitTask(int, int*, int)>:
c0013aa4:	83 ec 18             	sub    esp,0x18
c0013aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ab0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013ab3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013abf:	6a 07                	push   0x7
c0013ac1:	e8 ae ff ff ff       	call   c0013a74 <blockTask(TaskState)>
c0013ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013acb:	83 c4 10             	add    esp,0x10
c0013ace:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ad1:	85 d2                	test   edx,edx
c0013ad3:	74 0b                	je     c0013ae0 <waitTask(int, int*, int)+0x3c>
c0013ad5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013ad8:	89 02                	mov    DWORD PTR [edx],eax
c0013ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013adf:	90                   	nop
c0013ae0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013ae3:	83 c4 0c             	add    esp,0xc
c0013ae6:	c3                   	ret    
c0013ae7:	90                   	nop

c0013ae8 <milliTenthSleepUntil(unsigned int)>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aef:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013af5:	76 05                	jbe    c0013afc <milliTenthSleepUntil(unsigned int)+0x14>
c0013af7:	90                   	nop
c0013af8:	83 c4 0c             	add    esp,0xc
c0013afb:	c3                   	ret    
c0013afc:	fa                   	cli    
c0013afd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b03:	83 ec 08             	sub    esp,0x8
c0013b06:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013b0c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b12:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013b15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b1b:	52                   	push   edx
c0013b1c:	68 78 51 02 c0       	push   0xc0025178
c0013b21:	e8 56 8d 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b2d:	e8 42 ff ff ff       	call   c0013a74 <blockTask(TaskState)>
c0013b32:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	48                   	dec    eax
c0013b3b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b40:	85 c0                	test   eax,eax
c0013b42:	75 0c                	jne    c0013b50 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b44:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b49:	85 c0                	test   eax,eax
c0013b4b:	75 17                	jne    c0013b64 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b50:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b55:	48                   	dec    eax
c0013b56:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b5b:	75 9b                	jne    c0013af8 <milliTenthSleepUntil(unsigned int)+0x10>
c0013b5d:	fb                   	sti    
c0013b5e:	83 c4 0c             	add    esp,0xc
c0013b61:	c3                   	ret    
c0013b62:	66 90                	xchg   ax,ax
c0013b64:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b6e:	e8 05 fd ff ff       	call   c0013878 <schedule()>
c0013b73:	eb db                	jmp    c0013b50 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b75:	8d 76 00             	lea    esi,[esi+0x0]

c0013b78 <milliTenthSleep(unsigned int)>:
c0013b78:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013b7d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b81:	e9 62 ff ff ff       	jmp    c0013ae8 <milliTenthSleepUntil(unsigned int)>
c0013b86:	66 90                	xchg   ax,ax

c0013b88 <sleep(unsigned int)>:
c0013b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b8c:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b8f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b92:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b95:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b98:	c1 e0 04             	shl    eax,0x4
c0013b9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b9f:	eb d7                	jmp    c0013b78 <milliTenthSleep(unsigned int)>
c0013ba1:	90                   	nop
c0013ba2:	66 90                	xchg   ax,ax

c0013ba4 <Semaphore::acquire()>:
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bab:	fa                   	cli    
c0013bac:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013bb1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bba:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013bc0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013bc3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013bc5:	7d 2d                	jge    c0013bf4 <Semaphore::acquire()+0x50>
c0013bc7:	41                   	inc    ecx
c0013bc8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013bcb:	90                   	nop
c0013bcc:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	75 0b                	jne    c0013be0 <Semaphore::acquire()+0x3c>
c0013bd5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013bda:	85 c0                	test   eax,eax
c0013bdc:	75 62                	jne    c0013c40 <Semaphore::acquire()+0x9c>
c0013bde:	66 90                	xchg   ax,ax
c0013be0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013be5:	48                   	dec    eax
c0013be6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013beb:	75 03                	jne    c0013bf0 <Semaphore::acquire()+0x4c>
c0013bed:	fb                   	sti    
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	83 c4 0c             	add    esp,0xc
c0013bf3:	c3                   	ret    
c0013bf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013c00:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013c03:	85 c9                	test   ecx,ecx
c0013c05:	74 4d                	je     c0013c54 <Semaphore::acquire()+0xb0>
c0013c07:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013c0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c10:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013c13:	90                   	nop
c0013c14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013c1f:	68 d8 ec 01 c0       	push   0xc001ecd8
c0013c24:	e8 da 69 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0013c29:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013c30:	e8 3f fe ff ff       	call   c0013a74 <blockTask(TaskState)>
c0013c35:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013c3a:	83 c4 10             	add    esp,0x10
c0013c3d:	48                   	dec    eax
c0013c3e:	eb 8c                	jmp    c0013bcc <Semaphore::acquire()+0x28>
c0013c40:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013c4a:	e8 29 fc ff ff       	call   c0013878 <schedule()>
c0013c4f:	eb 8f                	jmp    c0013be0 <Semaphore::acquire()+0x3c>
c0013c51:	8d 76 00             	lea    esi,[esi+0x0]
c0013c54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c59:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c5c:	eb b6                	jmp    c0013c14 <Semaphore::acquire()+0x70>
c0013c5e:	66 90                	xchg   ax,ax

c0013c60 <taskReturned>:
c0013c60:	83 ec 18             	sub    esp,0x18
c0013c63:	68 f8 ec 01 c0       	push   0xc001ecf8
c0013c68:	e8 16 c6 ff ff       	call   c0010283 <KePanic(char const*)>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	83 ec 0c             	sub    esp,0xc
c0013c73:	6a 02                	push   0x2
c0013c75:	e8 fa fd ff ff       	call   c0013a74 <blockTask(TaskState)>
c0013c7a:	fa                   	cli    
c0013c7b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c81:	e8 f2 fb ff ff       	call   c0013878 <schedule()>
c0013c86:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c8b:	83 c4 10             	add    esp,0x10
c0013c8e:	48                   	dec    eax
c0013c8f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c94:	85 c0                	test   eax,eax
c0013c96:	75 d8                	jne    c0013c70 <taskReturned+0x10>
c0013c98:	fb                   	sti    
c0013c99:	eb d5                	jmp    c0013c70 <taskReturned+0x10>
c0013c9b:	90                   	nop

c0013c9c <Thr::processFromPID(int)>:
c0013c9c:	57                   	push   edi
c0013c9d:	56                   	push   esi
c0013c9e:	53                   	push   ebx
c0013c9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ca3:	fa                   	cli    
c0013ca4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013caa:	83 ec 0c             	sub    esp,0xc
c0013cad:	68 84 51 02 c0       	push   0xc0025184
c0013cb2:	e8 05 8b 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cb7:	83 c4 10             	add    esp,0x10
c0013cba:	89 c7                	mov    edi,eax
c0013cbc:	eb 16                	jmp    c0013cd4 <Thr::processFromPID(int)+0x38>
c0013cbe:	66 90                	xchg   ax,ax
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	68 84 51 02 c0       	push   0xc0025184
c0013cc8:	e8 ef 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	39 f8                	cmp    eax,edi
c0013cd2:	74 4c                	je     c0013d20 <Thr::processFromPID(int)+0x84>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 84 51 02 c0       	push   0xc0025184
c0013cdc:	e8 db 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce1:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013ce8:	89 c3                	mov    ebx,eax
c0013cea:	e8 d5 8a 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013cef:	58                   	pop    eax
c0013cf0:	5a                   	pop    edx
c0013cf1:	53                   	push   ebx
c0013cf2:	68 84 51 02 c0       	push   0xc0025184
c0013cf7:	e8 80 8b 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cfc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cff:	83 c4 10             	add    esp,0x10
c0013d02:	39 30                	cmp    DWORD PTR [eax],esi
c0013d04:	75 ba                	jne    c0013cc0 <Thr::processFromPID(int)+0x24>
c0013d06:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d0b:	48                   	dec    eax
c0013d0c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d11:	74 09                	je     c0013d1c <Thr::processFromPID(int)+0x80>
c0013d13:	90                   	nop
c0013d14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d17:	5b                   	pop    ebx
c0013d18:	5e                   	pop    esi
c0013d19:	5f                   	pop    edi
c0013d1a:	c3                   	ret    
c0013d1b:	90                   	nop
c0013d1c:	fb                   	sti    
c0013d1d:	eb f5                	jmp    c0013d14 <Thr::processFromPID(int)+0x78>
c0013d1f:	90                   	nop
c0013d20:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d25:	48                   	dec    eax
c0013d26:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d2b:	75 07                	jne    c0013d34 <Thr::processFromPID(int)+0x98>
c0013d2d:	fb                   	sti    
c0013d2e:	5b                   	pop    ebx
c0013d2f:	5e                   	pop    esi
c0013d30:	5f                   	pop    edi
c0013d31:	c3                   	ret    
c0013d32:	66 90                	xchg   ax,ax
c0013d34:	5b                   	pop    ebx
c0013d35:	31 c0                	xor    eax,eax
c0013d37:	5e                   	pop    esi
c0013d38:	5f                   	pop    edi
c0013d39:	c3                   	ret    
c0013d3a:	66 90                	xchg   ax,ax

c0013d3c <unblockTask(ThreadControlBlock*)>:
c0013d3c:	53                   	push   ebx
c0013d3d:	83 ec 08             	sub    esp,0x8
c0013d40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d44:	fa                   	cli    
c0013d45:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013d4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d4e:	85 c0                	test   eax,eax
c0013d50:	74 66                	je     c0013db8 <unblockTask(ThreadControlBlock*)+0x7c>
c0013d52:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d55:	48                   	dec    eax
c0013d56:	74 38                	je     c0013d90 <unblockTask(ThreadControlBlock*)+0x54>
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	68 84 51 02 c0       	push   0xc0025184
c0013d60:	e8 57 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	85 c0                	test   eax,eax
c0013d6a:	75 1c                	jne    c0013d88 <unblockTask(ThreadControlBlock*)+0x4c>
c0013d6c:	eb 5e                	jmp    c0013dcc <unblockTask(ThreadControlBlock*)+0x90>
c0013d6e:	66 90                	xchg   ax,ax
c0013d70:	83 ec 08             	sub    esp,0x8
c0013d73:	50                   	push   eax
c0013d74:	68 84 51 02 c0       	push   0xc0025184
c0013d79:	e8 ee 8d 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	85 c0                	test   eax,eax
c0013d83:	74 47                	je     c0013dcc <unblockTask(ThreadControlBlock*)+0x90>
c0013d85:	8d 76 00             	lea    esi,[esi+0x0]
c0013d88:	39 c3                	cmp    ebx,eax
c0013d8a:	75 e4                	jne    c0013d70 <unblockTask(ThreadControlBlock*)+0x34>
c0013d8c:	eb 12                	jmp    c0013da0 <unblockTask(ThreadControlBlock*)+0x64>
c0013d8e:	66 90                	xchg   ax,ax
c0013d90:	83 ec 0c             	sub    esp,0xc
c0013d93:	68 7a ec 01 c0       	push   0xc001ec7a
c0013d98:	e8 66 68 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013da5:	48                   	dec    eax
c0013da6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013dab:	75 03                	jne    c0013db0 <unblockTask(ThreadControlBlock*)+0x74>
c0013dad:	fb                   	sti    
c0013dae:	66 90                	xchg   ax,ax
c0013db0:	83 c4 08             	add    esp,0x8
c0013db3:	5b                   	pop    ebx
c0013db4:	c3                   	ret    
c0013db5:	8d 76 00             	lea    esi,[esi+0x0]
c0013db8:	83 ec 0c             	sub    esp,0xc
c0013dbb:	68 63 ec 01 c0       	push   0xc001ec63
c0013dc0:	e8 3e 68 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	eb d6                	jmp    c0013da0 <unblockTask(ThreadControlBlock*)+0x64>
c0013dca:	66 90                	xchg   ax,ax
c0013dcc:	83 ec 08             	sub    esp,0x8
c0013dcf:	53                   	push   ebx
c0013dd0:	68 84 51 02 c0       	push   0xc0025184
c0013dd5:	e8 a2 8a 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013dda:	83 c4 10             	add    esp,0x10
c0013ddd:	eb c1                	jmp    c0013da0 <unblockTask(ThreadControlBlock*)+0x64>
c0013ddf:	90                   	nop

c0013de0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013de0:	55                   	push   ebp
c0013de1:	57                   	push   edi
c0013de2:	56                   	push   esi
c0013de3:	53                   	push   ebx
c0013de4:	83 ec 1c             	sub    esp,0x1c
c0013de7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013deb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dee:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013df4:	85 ed                	test   ebp,ebp
c0013df6:	7e 24                	jle    c0013e1c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013df8:	31 f6                	xor    esi,esi
c0013dfa:	66 90                	xchg   ax,ax
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013e06:	46                   	inc    esi
c0013e07:	57                   	push   edi
c0013e08:	e8 bc 39 ff ff       	call   c00077c9 <free>
c0013e0d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013e19:	7f e1                	jg     c0013dfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013e1b:	90                   	nop
c0013e1c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013e26:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e2b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013e2e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013e31:	d3 c0                	rol    eax,cl
c0013e33:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013e3a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e3d:	89 f7                	mov    edi,esi
c0013e3f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013e47:	0f 85 77 01 00 00    	jne    c0013fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013e4d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013e53:	85 ed                	test   ebp,ebp
c0013e55:	74 1d                	je     c0013e74 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	55                   	push   ebp
c0013e5b:	e8 34 c1 ff ff       	call   c000ff94 <EnvVarContainer::~EnvVarContainer()>
c0013e60:	59                   	pop    ecx
c0013e61:	5e                   	pop    esi
c0013e62:	6a 0c                	push   0xc
c0013e64:	55                   	push   ebp
c0013e65:	e8 a3 66 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c0013e6a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	89 f7                	mov    edi,esi
c0013e72:	66 90                	xchg   ax,ax
c0013e74:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e7a:	85 c0                	test   eax,eax
c0013e7c:	0f 84 b6 00 00 00    	je     c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e82:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e89:	31 c9                	xor    ecx,ecx
c0013e8b:	eb 17                	jmp    c0013ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e90:	41                   	inc    ecx
c0013e91:	83 f9 10             	cmp    ecx,0x10
c0013e94:	0f 84 9e 00 00 00    	je     c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e9a:	66 90                	xchg   ax,ax
c0013e9c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ea2:	66 90                	xchg   ax,ax
c0013ea4:	31 d2                	xor    edx,edx
c0013ea6:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013ead:	d3 fa                	sar    edx,cl
c0013eaf:	83 e2 01             	and    edx,0x1
c0013eb2:	74 dc                	je     c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013eb4:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013eb7:	01 d2                	add    edx,edx
c0013eb9:	01 ca                	add    edx,ecx
c0013ebb:	8d 14 92             	lea    edx,[edx+edx*4]
c0013ebe:	01 d0                	add    eax,edx
c0013ec0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013ec6:	83 fd 07             	cmp    ebp,0x7
c0013ec9:	75 c5                	jne    c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ecb:	05 40 02 00 00       	add    eax,0x240
c0013ed0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013ed3:	83 fd ff             	cmp    ebp,0xffffffff
c0013ed6:	0f 8c f0 00 00 00    	jl     c0013fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013edc:	0f 84 ae 01 00 00    	je     c0014090 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013ee2:	85 ed                	test   ebp,ebp
c0013ee4:	0f 84 92 01 00 00    	je     c001407c <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013eea:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013eec:	75 a2                	jne    c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013eee:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ef4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ef8:	01 d0                	add    eax,edx
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013f09:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013f12:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013f19:	50                   	push   eax
c0013f1a:	e8 1d fe ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f29:	89 f7                	mov    edi,esi
c0013f2b:	41                   	inc    ecx
c0013f2c:	83 f9 10             	cmp    ecx,0x10
c0013f2f:	0f 85 67 ff ff ff    	jne    c0013e9c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013f35:	8d 76 00             	lea    esi,[esi+0x0]
c0013f38:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013f3e:	85 c0                	test   eax,eax
c0013f40:	74 62                	je     c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f42:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013f48:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013f4e:	74 54                	je     c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	68 84 51 02 c0       	push   0xc0025184
c0013f58:	e8 5f 88 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f5d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f64:	89 c7                	mov    edi,eax
c0013f66:	e8 35 88 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f6b:	83 c4 10             	add    esp,0x10
c0013f6e:	84 c0                	test   al,al
c0013f70:	0f 84 ce 00 00 00    	je     c0014044 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f76:	66 90                	xchg   ax,ax
c0013f78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f7b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f81:	85 d2                	test   edx,edx
c0013f83:	74 0f                	je     c0013f94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f85:	83 ec 0c             	sub    esp,0xc
c0013f88:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f8a:	52                   	push   edx
c0013f8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f8e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f91:	83 c4 10             	add    esp,0x10
c0013f94:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f9e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013faa:	85 db                	test   ebx,ebx
c0013fac:	74 16                	je     c0013fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	53                   	push   ebx
c0013fb2:	e8 dd 57 ff ff       	call   c0009794 <VAS::~VAS()>
c0013fb7:	58                   	pop    eax
c0013fb8:	5a                   	pop    edx
c0013fb9:	6a 14                	push   0x14
c0013fbb:	53                   	push   ebx
c0013fbc:	e8 4c 65 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c0013fc1:	83 c4 10             	add    esp,0x10
c0013fc4:	83 c4 1c             	add    esp,0x1c
c0013fc7:	5b                   	pop    ebx
c0013fc8:	5e                   	pop    esi
c0013fc9:	5f                   	pop    edi
c0013fca:	5d                   	pop    ebp
c0013fcb:	c3                   	ret    
c0013fcc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	68 2c ed 01 c0       	push   0xc001ed2c
c0013fd8:	e8 a6 c2 ff ff       	call   c0010283 <KePanic(char const*)>
c0013fdd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fe0:	83 c4 10             	add    esp,0x10
c0013fe3:	89 f7                	mov    edi,esi
c0013fe5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fe9:	e9 a2 fe ff ff       	jmp    c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013ff6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013ffc:	75 1e                	jne    c001401c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ffe:	83 ec 0c             	sub    esp,0xc
c0014001:	68 94 ed 01 c0       	push   0xc001ed94
c0014006:	e8 f8 65 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001400b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014012:	e8 5d fa ff ff       	call   c0013a74 <blockTask(TaskState)>
c0014017:	83 c4 10             	add    esp,0x10
c001401a:	66 90                	xchg   ax,ax
c001401c:	83 ec 08             	sub    esp,0x8
c001401f:	56                   	push   esi
c0014020:	68 84 51 02 c0       	push   0xc0025184
c0014025:	e8 52 88 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001402a:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0014031:	e8 86 87 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	39 f8                	cmp    eax,edi
c001403b:	0f 84 37 ff ff ff    	je     c0013f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014041:	8d 76 00             	lea    esi,[esi+0x0]
c0014044:	83 ec 0c             	sub    esp,0xc
c0014047:	68 84 51 02 c0       	push   0xc0025184
c001404c:	e8 6b 87 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014051:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0014058:	89 c6                	mov    esi,eax
c001405a:	e8 65 87 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	39 f3                	cmp    ebx,esi
c0014064:	74 b6                	je     c001401c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014066:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014069:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001406c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014072:	75 a8                	jne    c001401c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014074:	e9 77 ff ff ff       	jmp    c0013ff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014079:	8d 76 00             	lea    esi,[esi+0x0]
c001407c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	68 60 ed 01 c0       	push   0xc001ed60
c0014088:	e9 4b ff ff ff       	jmp    c0013fd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001408d:	8d 76 00             	lea    esi,[esi+0x0]
c0014090:	8b 36                	mov    esi,DWORD PTR [esi]
c0014092:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014096:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014099:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001409c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00140a2:	01 d7                	add    edi,edx
c00140a4:	89 f8                	mov    eax,edi
c00140a6:	e9 51 fe ff ff       	jmp    c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00140ab:	90                   	nop

c00140ac <cleanerTaskFunction(void*)>:
c00140ac:	53                   	push   ebx
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140b5:	48                   	dec    eax
c00140b6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140bb:	75 03                	jne    c00140c0 <cleanerTaskFunction(void*)+0x14>
c00140bd:	fb                   	sti    
c00140be:	66 90                	xchg   ax,ax
c00140c0:	fa                   	cli    
c00140c1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140c6:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c00140cd:	8d 50 01             	lea    edx,[eax+0x1]
c00140d0:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00140d6:	0f 84 ac 00 00 00    	je     c0014188 <cleanerTaskFunction(void*)+0xdc>
c00140dc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140e1:	85 c0                	test   eax,eax
c00140e3:	75 03                	jne    c00140e8 <cleanerTaskFunction(void*)+0x3c>
c00140e5:	fb                   	sti    
c00140e6:	66 90                	xchg   ax,ax
c00140e8:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c00140ef:	fa                   	cli    
c00140f0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140f6:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140fc:	fa                   	cli    
c00140fd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014103:	eb 2b                	jmp    c0014130 <cleanerTaskFunction(void*)+0x84>
c0014105:	8d 76 00             	lea    esi,[esi+0x0]
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	68 6c 51 02 c0       	push   0xc002516c
c0014110:	e8 a7 86 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014115:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c001411c:	89 c3                	mov    ebx,eax
c001411e:	e8 a1 86 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014123:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014126:	e8 b5 fc ff ff       	call   c0013de0 <cleanupTerminatedTask(ThreadControlBlock*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	66 90                	xchg   ax,ax
c0014130:	83 ec 0c             	sub    esp,0xc
c0014133:	68 6c 51 02 c0       	push   0xc002516c
c0014138:	e8 63 86 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	84 c0                	test   al,al
c0014142:	74 c4                	je     c0014108 <cleanerTaskFunction(void*)+0x5c>
c0014144:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014149:	48                   	dec    eax
c001414a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001414f:	75 03                	jne    c0014154 <cleanerTaskFunction(void*)+0xa8>
c0014151:	fb                   	sti    
c0014152:	66 90                	xchg   ax,ax
c0014154:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014159:	48                   	dec    eax
c001415a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001415f:	0f 85 4b ff ff ff    	jne    c00140b0 <cleanerTaskFunction(void*)+0x4>
c0014165:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001416a:	85 c0                	test   eax,eax
c001416c:	0f 84 3e ff ff ff    	je     c00140b0 <cleanerTaskFunction(void*)+0x4>
c0014172:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001417c:	e8 f7 f6 ff ff       	call   c0013878 <schedule()>
c0014181:	e9 2a ff ff ff       	jmp    c00140b0 <cleanerTaskFunction(void*)+0x4>
c0014186:	66 90                	xchg   ax,ax
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	6a 02                	push   0x2
c001418d:	e8 ba f8 ff ff       	call   c0013a4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	e9 4e ff ff ff       	jmp    c00140e8 <cleanerTaskFunction(void*)+0x3c>
c001419a:	66 90                	xchg   ax,ax

c001419c <terminateTask(int)>:
c001419c:	83 ec 14             	sub    esp,0x14
c001419f:	fa                   	cli    
c00141a0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141a6:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00141ac:	fa                   	cli    
c00141ad:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141bc:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00141bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00141c7:	50                   	push   eax
c00141c8:	68 6c 51 02 c0       	push   0xc002516c
c00141cd:	e8 aa 86 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00141e1:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c00141e6:	85 c0                	test   eax,eax
c00141e8:	74 5e                	je     c0014248 <terminateTask(int)+0xac>
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c00141f4:	50                   	push   eax
c00141f5:	e8 42 fb ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c00141fa:	83 c4 10             	add    esp,0x10
c00141fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014200:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014205:	48                   	dec    eax
c0014206:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001420b:	75 03                	jne    c0014210 <terminateTask(int)+0x74>
c001420d:	fb                   	sti    
c001420e:	66 90                	xchg   ax,ax
c0014210:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014215:	48                   	dec    eax
c0014216:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001421b:	75 0b                	jne    c0014228 <terminateTask(int)+0x8c>
c001421d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014224:	75 36                	jne    c001425c <terminateTask(int)+0xc0>
c0014226:	66 90                	xchg   ax,ax
c0014228:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001422d:	48                   	dec    eax
c001422e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014233:	75 03                	jne    c0014238 <terminateTask(int)+0x9c>
c0014235:	fb                   	sti    
c0014236:	66 90                	xchg   ax,ax
c0014238:	fa                   	cli    
c0014239:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001423f:	90                   	nop
c0014240:	e8 33 f6 ff ff       	call   c0013878 <schedule()>
c0014245:	eb e1                	jmp    c0014228 <terminateTask(int)+0x8c>
c0014247:	90                   	nop
c0014248:	83 ec 0c             	sub    esp,0xc
c001424b:	68 91 ec 01 c0       	push   0xc001ec91
c0014250:	e8 ae 63 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	eb a6                	jmp    c0014200 <terminateTask(int)+0x64>
c001425a:	66 90                	xchg   ax,ax
c001425c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014266:	eb d8                	jmp    c0014240 <terminateTask(int)+0xa4>

c0014268 <Thr::terminateFromIRQ(int)>:
c0014268:	83 ec 18             	sub    esp,0x18
c001426b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001426f:	50                   	push   eax
c0014270:	e8 27 ff ff ff       	call   c001419c <terminateTask(int)>
c0014275:	90                   	nop
c0014276:	66 90                	xchg   ax,ax

c0014278 <Semaphore::release()>:
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001427f:	fa                   	cli    
c0014280:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014285:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001428b:	8d 48 01             	lea    ecx,[eax+0x1]
c001428e:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014294:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014297:	85 c9                	test   ecx,ecx
c0014299:	74 41                	je     c00142dc <Semaphore::release()+0x64>
c001429b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00142a4:	51                   	push   ecx
c00142a5:	e8 92 fa ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c00142aa:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	48                   	dec    eax
c00142b3:	90                   	nop
c00142b4:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00142b9:	85 c0                	test   eax,eax
c00142bb:	75 0b                	jne    c00142c8 <Semaphore::release()+0x50>
c00142bd:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00142c2:	85 c0                	test   eax,eax
c00142c4:	75 1e                	jne    c00142e4 <Semaphore::release()+0x6c>
c00142c6:	66 90                	xchg   ax,ax
c00142c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00142cd:	48                   	dec    eax
c00142ce:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00142d3:	75 03                	jne    c00142d8 <Semaphore::release()+0x60>
c00142d5:	fb                   	sti    
c00142d6:	66 90                	xchg   ax,ax
c00142d8:	83 c4 0c             	add    esp,0xc
c00142db:	c3                   	ret    
c00142dc:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00142df:	eb d3                	jmp    c00142b4 <Semaphore::release()+0x3c>
c00142e1:	8d 76 00             	lea    esi,[esi+0x0]
c00142e4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00142ee:	e8 85 f5 ff ff       	call   c0013878 <schedule()>
c00142f3:	eb d3                	jmp    c00142c8 <Semaphore::release()+0x50>
c00142f5:	8d 76 00             	lea    esi,[esi+0x0]

c00142f8 <__static_initialization_and_destruction_0(int, int)>:
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014300:	0f 85 8e 00 00 00    	jne    c0014394 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014306:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001430e:	0f 85 80 00 00 00    	jne    c0014394 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	68 84 51 02 c0       	push   0xc0025184
c001431c:	e8 07 88 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	83 ec 04             	sub    esp,0x4
c0014327:	68 44 f8 01 c0       	push   0xc001f844
c001432c:	68 84 51 02 c0       	push   0xc0025184
c0014331:	68 d8 ca 01 c0       	push   0xc001cad8
c0014336:	e8 82 61 ff ff       	call   c000a4bd <__cxa_atexit>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	83 ec 0c             	sub    esp,0xc
c0014341:	68 78 51 02 c0       	push   0xc0025178
c0014346:	e8 dd 87 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	83 ec 04             	sub    esp,0x4
c0014351:	68 44 f8 01 c0       	push   0xc001f844
c0014356:	68 78 51 02 c0       	push   0xc0025178
c001435b:	68 d8 ca 01 c0       	push   0xc001cad8
c0014360:	e8 58 61 ff ff       	call   c000a4bd <__cxa_atexit>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	68 6c 51 02 c0       	push   0xc002516c
c0014370:	e8 b3 87 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	83 ec 04             	sub    esp,0x4
c001437b:	68 44 f8 01 c0       	push   0xc001f844
c0014380:	68 6c 51 02 c0       	push   0xc002516c
c0014385:	68 d8 ca 01 c0       	push   0xc001cad8
c001438a:	e8 2e 61 ff ff       	call   c000a4bd <__cxa_atexit>
c001438f:	83 c4 10             	add    esp,0x10
c0014392:	66 90                	xchg   ax,ax
c0014394:	90                   	nop
c0014395:	83 c4 0c             	add    esp,0xc
c0014398:	c3                   	ret    
c0014399:	8d 76 00             	lea    esi,[esi+0x0]

c001439c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001439c:	83 ec 0c             	sub    esp,0xc
c001439f:	83 ec 08             	sub    esp,0x8
c00143a2:	68 ff ff 00 00       	push   0xffff
c00143a7:	6a 01                	push   0x1
c00143a9:	e8 4a ff ff ff       	call   c00142f8 <__static_initialization_and_destruction_0(int, int)>
c00143ae:	83 c4 10             	add    esp,0x10
c00143b1:	83 c4 0c             	add    esp,0xc
c00143b4:	c3                   	ret    

c00143b5 <Vm::inbv(unsigned short)>:
c00143b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143b9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143be:	75 06                	jne    c00143c6 <Vm::inbv(unsigned short)+0x11>
c00143c0:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00143c5:	c3                   	ret    
c00143c6:	ec                   	in     al,dx
c00143c7:	c3                   	ret    

c00143c8 <Vm::outbv(unsigned short, unsigned char)>:
c00143c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143d0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143d5:	75 25                	jne    c00143fc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00143d7:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00143dd:	8d 51 01             	lea    edx,[ecx+0x1]
c00143e0:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c00143e6:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c00143ec:	83 fa 20             	cmp    edx,0x20
c00143ef:	75 0c                	jne    c00143fd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00143f1:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c00143fb:	c3                   	ret    
c00143fc:	ee                   	out    dx,al
c00143fd:	c3                   	ret    

c00143fe <Vm::realToLinear(unsigned short, unsigned short)>:
c00143fe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014403:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014408:	c1 e0 04             	shl    eax,0x4
c001440b:	01 d0                	add    eax,edx
c001440d:	c3                   	ret    

c001440e <Vm::getSegment(unsigned int)>:
c001440e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014412:	c1 e8 10             	shr    eax,0x10
c0014415:	c3                   	ret    

c0014416 <Vm::getOffset(unsigned int)>:
c0014416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001441a:	c3                   	ret    

c001441b <Vm::mainloop2()>:
c001441b:	83 ec 18             	sub    esp,0x18
c001441e:	fa                   	cli    
c001441f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014425:	6a 02                	push   0x2
c0014427:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c001442e:	e8 19 f6 ff ff       	call   c0013a4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014433:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014438:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001443c:	52                   	push   edx
c001443d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014441:	52                   	push   edx
c0014442:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014446:	52                   	push   edx
c0014447:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001444b:	50                   	push   eax
c001444c:	e8 be bd fe ff       	call   c000020f <goToVM86>
c0014451:	83 c4 2c             	add    esp,0x2c
c0014454:	c3                   	ret    

c0014455 <Vm::mainVm8086Loop(void*)>:
c0014455:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001445a:	48                   	dec    eax
c001445b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014460:	75 01                	jne    c0014463 <Vm::mainVm8086Loop(void*)+0xe>
c0014462:	fb                   	sti    
c0014463:	eb b6                	jmp    c001441b <Vm::mainloop2()>

c0014465 <Vm::mainloop3(unsigned long)>:
c0014465:	83 ec 18             	sub    esp,0x18
c0014468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001446c:	fa                   	cli    
c001446d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014473:	6a 02                	push   0x2
c0014475:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c001447c:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014481:	e8 c6 f5 ff ff       	call   c0013a4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014486:	83 c4 1c             	add    esp,0x1c
c0014489:	eb 90                	jmp    c001441b <Vm::mainloop2()>

c001448b <Vm::initialise8086()>:
c001448b:	83 ec 0c             	sub    esp,0xc
c001448e:	68 80 00 00 00       	push   0x80
c0014493:	6a 00                	push   0x0
c0014495:	68 55 44 01 c0       	push   0xc0014455
c001449a:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00144a0:	e8 b3 f1 ff ff       	call   c0013658 <Process::createThread(void (*)(void*), void*, int)>
c00144a5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00144ac:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00144b1:	68 00 01 00 00       	push   0x100
c00144b6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00144bb:	6a 00                	push   0x0
c00144bd:	6a 00                	push   0x0
c00144bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144c5:	e8 28 57 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00144ca:	83 c4 2c             	add    esp,0x2c
c00144cd:	c3                   	ret    

c00144ce <Vm::finish8086()>:
c00144ce:	53                   	push   ebx
c00144cf:	83 ec 08             	sub    esp,0x8
c00144d2:	fa                   	cli    
c00144d3:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144d9:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c00144e0:	75 15                	jne    c00144f7 <Vm::finish8086()+0x29>
c00144e2:	e8 91 f3 ff ff       	call   c0013878 <schedule()>
c00144e7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144ec:	48                   	dec    eax
c00144ed:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144f2:	75 de                	jne    c00144d2 <Vm::finish8086()+0x4>
c00144f4:	fb                   	sti    
c00144f5:	eb db                	jmp    c00144d2 <Vm::finish8086()+0x4>
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014500:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014506:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c001450d:	e8 2a f8 ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c0014512:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	8d 50 ff             	lea    edx,[eax-0x1]
c001451d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014523:	85 d2                	test   edx,edx
c0014525:	75 01                	jne    c0014528 <Vm::finish8086()+0x5a>
c0014527:	fb                   	sti    
c0014528:	89 d8                	mov    eax,ebx
c001452a:	83 c4 08             	add    esp,0x8
c001452d:	5b                   	pop    ebx
c001452e:	c3                   	ret    

c001452f <Vm::getOutput8086(unsigned char*)>:
c001452f:	57                   	push   edi
c0014530:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014536:	56                   	push   esi
c0014537:	be e0 51 02 c0       	mov    esi,0xc00251e0
c001453c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014540:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014542:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c0014547:	5e                   	pop    esi
c0014548:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014552:	5f                   	pop    edi
c0014553:	c3                   	ret    

c0014554 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014554:	55                   	push   ebp
c0014555:	57                   	push   edi
c0014556:	56                   	push   esi
c0014557:	53                   	push   ebx
c0014558:	83 ec 0c             	sub    esp,0xc
c001455b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001455f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014563:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014567:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001456b:	fa                   	cli    
c001456c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014572:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c0014579:	75 15                	jne    c0014590 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001457b:	e8 f8 f2 ff ff       	call   c0013878 <schedule()>
c0014580:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014585:	48                   	dec    eax
c0014586:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001458b:	75 de                	jne    c001456b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001458d:	fb                   	sti    
c001458e:	eb db                	jmp    c001456b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014590:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014595:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001459f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00145a3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00145a7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00145ab:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145af:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145b3:	0f b7 ff             	movzx  edi,di
c00145b6:	0f b7 f6             	movzx  esi,si
c00145b9:	50                   	push   eax
c00145ba:	6a 20                	push   0x20
c00145bc:	6a 00                	push   0x0
c00145be:	68 e0 51 02 c0       	push   0xc00251e0
c00145c3:	e8 08 bf fe ff       	call   c00004d0 <memset>
c00145c8:	5a                   	pop    edx
c00145c9:	59                   	pop    ecx
c00145ca:	57                   	push   edi
c00145cb:	56                   	push   esi
c00145cc:	e8 2d fe ff ff       	call   c00143fe <Vm::realToLinear(unsigned short, unsigned short)>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	89 c7                	mov    edi,eax
c00145d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145da:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145e5:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00145ec:	48                   	dec    eax
c00145ed:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145f2:	75 01                	jne    c00145f5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00145f4:	fb                   	sti    
c00145f5:	83 ec 0c             	sub    esp,0xc
c00145f8:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00145fe:	e8 39 f7 ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c0014603:	83 c4 1c             	add    esp,0x1c
c0014606:	b0 01                	mov    al,0x1
c0014608:	5b                   	pop    ebx
c0014609:	5e                   	pop    esi
c001460a:	5f                   	pop    edi
c001460b:	5d                   	pop    ebp
c001460c:	c3                   	ret    

c001460d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001460d:	55                   	push   ebp
c001460e:	57                   	push   edi
c001460f:	56                   	push   esi
c0014610:	53                   	push   ebx
c0014611:	83 ec 2c             	sub    esp,0x2c
c0014614:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014618:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001461c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014620:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014624:	fa                   	cli    
c0014625:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001462b:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c0014632:	89 f0                	mov    eax,esi
c0014634:	84 c0                	test   al,al
c0014636:	75 1d                	jne    c0014655 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001463c:	e8 37 f2 ff ff       	call   c0013878 <schedule()>
c0014641:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014646:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001464a:	48                   	dec    eax
c001464b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014650:	75 d2                	jne    c0014624 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014652:	fb                   	sti    
c0014653:	eb cf                	jmp    c0014624 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014655:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c001465a:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014664:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014668:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001466c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014670:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014674:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014678:	50                   	push   eax
c0014679:	6a 20                	push   0x20
c001467b:	6a 00                	push   0x0
c001467d:	68 e0 51 02 c0       	push   0xc00251e0
c0014682:	e8 49 be fe ff       	call   c00004d0 <memset>
c0014687:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001468e:	e8 26 31 ff ff       	call   c00077b9 <malloc>
c0014693:	83 c4 0c             	add    esp,0xc
c0014696:	89 c3                	mov    ebx,eax
c0014698:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001469e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00146a2:	50                   	push   eax
c00146a3:	e8 d0 64 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	85 db                	test   ebx,ebx
c00146ad:	75 0a                	jne    c00146b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00146af:	83 ec 0c             	sub    esp,0xc
c00146b2:	68 bc ed 01 c0       	push   0xc001edbc
c00146b7:	eb 3e                	jmp    c00146f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146b9:	50                   	push   eax
c00146ba:	8d 44 24 17          	lea    eax,[esp+0x17]
c00146be:	50                   	push   eax
c00146bf:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146c3:	50                   	push   eax
c00146c4:	53                   	push   ebx
c00146c5:	e8 1a 68 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c00146ca:	83 c4 10             	add    esp,0x10
c00146cd:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00146d2:	74 0a                	je     c00146de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00146d4:	83 ec 0c             	sub    esp,0xc
c00146d7:	68 d0 ed 01 c0       	push   0xc001edd0
c00146dc:	eb 19                	jmp    c00146f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146de:	51                   	push   ecx
c00146df:	51                   	push   ecx
c00146e0:	6a 01                	push   0x1
c00146e2:	53                   	push   ebx
c00146e3:	e8 50 65 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	85 c0                	test   eax,eax
c00146ed:	74 24                	je     c0014713 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00146ef:	83 ec 0c             	sub    esp,0xc
c00146f2:	68 e9 ed 01 c0       	push   0xc001ede9
c00146f7:	e8 87 bb ff ff       	call   c0010283 <KePanic(char const*)>
c00146fc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	48                   	dec    eax
c0014705:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001470a:	85 c0                	test   eax,eax
c001470c:	75 01                	jne    c001470f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001470e:	fb                   	sti    
c001470f:	31 f6                	xor    esi,esi
c0014711:	eb 58                	jmp    c001476b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014713:	0f b7 ed             	movzx  ebp,bp
c0014716:	50                   	push   eax
c0014717:	0f b7 ff             	movzx  edi,di
c001471a:	50                   	push   eax
c001471b:	55                   	push   ebp
c001471c:	57                   	push   edi
c001471d:	e8 dc fc ff ff       	call   c00143fe <Vm::realToLinear(unsigned short, unsigned short)>
c0014722:	5a                   	pop    edx
c0014723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014725:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014729:	51                   	push   ecx
c001472a:	50                   	push   eax
c001472b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001472f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014733:	53                   	push   ebx
c0014734:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014737:	83 c4 14             	add    esp,0x14
c001473a:	53                   	push   ebx
c001473b:	e8 56 65 ff ff       	call   c000ac96 <File::close()>
c0014740:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014745:	83 c4 10             	add    esp,0x10
c0014748:	48                   	dec    eax
c0014749:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014750:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014755:	85 c0                	test   eax,eax
c0014757:	75 01                	jne    c001475a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014759:	fb                   	sti    
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014763:	e8 d4 f5 ff ff       	call   c0013d3c <unblockTask(ThreadControlBlock*)>
c0014768:	83 c4 10             	add    esp,0x10
c001476b:	83 c4 2c             	add    esp,0x2c
c001476e:	89 f0                	mov    eax,esi
c0014770:	5b                   	pop    ebx
c0014771:	5e                   	pop    esi
c0014772:	5f                   	pop    edi
c0014773:	5d                   	pop    ebp
c0014774:	c3                   	ret    

c0014775 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014775:	57                   	push   edi
c0014776:	56                   	push   esi
c0014777:	53                   	push   ebx
c0014778:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001477c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014780:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014784:	83 e8 06             	sub    eax,0x6
c0014787:	0f b7 c0             	movzx  eax,ax
c001478a:	50                   	push   eax
c001478b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014790:	50                   	push   eax
c0014791:	e8 68 fc ff ff       	call   c00143fe <Vm::realToLinear(unsigned short, unsigned short)>
c0014796:	5a                   	pop    edx
c0014797:	5e                   	pop    esi
c0014798:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001479b:	8d 56 fa             	lea    edx,[esi-0x6]
c001479e:	81 e2 ff ff 00 00    	and    edx,0xffff
c00147a4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00147a7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00147aa:	83 c2 02             	add    edx,0x2
c00147ad:	66 89 10             	mov    WORD PTR [eax],dx
c00147b0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00147b3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00147b7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00147ba:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00147be:	89 d6                	mov    esi,edx
c00147c0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00147c6:	66 81 e6 ff fd       	and    si,0xfdff
c00147cb:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00147cf:	74 07                	je     c00147d8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00147d1:	89 d6                	mov    esi,edx
c00147d3:	66 81 ce 00 02       	or     si,0x200
c00147d8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00147dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147e1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00147e5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00147ed:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00147f0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00147f8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00147fb:	5b                   	pop    ebx
c00147fc:	5e                   	pop    esi
c00147fd:	5f                   	pop    edi
c00147fe:	c3                   	ret    

c00147ff <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00147ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014804:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014809:	c1 e0 04             	shl    eax,0x4
c001480c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001480f:	c3                   	ret    

c0014810 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014810:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014815:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001481a:	c1 e0 04             	shl    eax,0x4
c001481d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014821:	c3                   	ret    

c0014822 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014822:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014827:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001482c:	c1 e0 04             	shl    eax,0x4
c001482f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014832:	c3                   	ret    

c0014833 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014833:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014838:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001483d:	c1 e0 04             	shl    eax,0x4
c0014840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014844:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014847:	c3                   	ret    

c0014848 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014848:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001484d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014852:	c1 e0 04             	shl    eax,0x4
c0014855:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014859:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001485d:	c3                   	ret    

c001485e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001485e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014863:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014868:	c1 e0 04             	shl    eax,0x4
c001486b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001486f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014872:	c3                   	ret    

c0014873 <Vm::faultHandler(regs*)>:
c0014873:	55                   	push   ebp
c0014874:	57                   	push   edi
c0014875:	56                   	push   esi
c0014876:	53                   	push   ebx
c0014877:	83 ec 1c             	sub    esp,0x1c
c001487a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001487e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014881:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014885:	0f b7 f8             	movzx  edi,ax
c0014888:	52                   	push   edx
c0014889:	0f b7 c0             	movzx  eax,ax
c001488c:	50                   	push   eax
c001488d:	e8 6c fb ff ff       	call   c00143fe <Vm::realToLinear(unsigned short, unsigned short)>
c0014892:	5a                   	pop    edx
c0014893:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014896:	59                   	pop    ecx
c0014897:	89 c1                	mov    ecx,eax
c0014899:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001489c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00148a9:	0f b7 c5             	movzx  eax,bp
c00148ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00148b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148b8:	e8 41 fb ff ff       	call   c00143fe <Vm::realToLinear(unsigned short, unsigned short)>
c00148bd:	5e                   	pop    esi
c00148be:	be 06 00 00 00       	mov    esi,0x6
c00148c3:	5a                   	pop    edx
c00148c4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00148c9:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00148ce:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00148d1:	80 fa 9d             	cmp    dl,0x9d
c00148d4:	0f 84 2c 02 00 00    	je     c0014b06 <Vm::faultHandler(regs*)+0x293>
c00148da:	0f 87 91 00 00 00    	ja     c0014971 <Vm::faultHandler(regs*)+0xfe>
c00148e0:	80 fa 66             	cmp    dl,0x66
c00148e3:	0f 84 98 01 00 00    	je     c0014a81 <Vm::faultHandler(regs*)+0x20e>
c00148e9:	77 47                	ja     c0014932 <Vm::faultHandler(regs*)+0xbf>
c00148eb:	80 fa 36             	cmp    dl,0x36
c00148ee:	0f 84 80 01 00 00    	je     c0014a74 <Vm::faultHandler(regs*)+0x201>
c00148f4:	77 1a                	ja     c0014910 <Vm::faultHandler(regs*)+0x9d>
c00148f6:	80 fa 26             	cmp    dl,0x26
c00148f9:	0f 84 4e 01 00 00    	je     c0014a4d <Vm::faultHandler(regs*)+0x1da>
c00148ff:	80 fa 2e             	cmp    dl,0x2e
c0014902:	0f 85 e2 05 00 00    	jne    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014908:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001490b:	31 f6                	xor    esi,esi
c001490d:	41                   	inc    ecx
c001490e:	eb be                	jmp    c00148ce <Vm::faultHandler(regs*)+0x5b>
c0014910:	80 fa 64             	cmp    dl,0x64
c0014913:	0f 84 41 01 00 00    	je     c0014a5a <Vm::faultHandler(regs*)+0x1e7>
c0014919:	0f 87 48 01 00 00    	ja     c0014a67 <Vm::faultHandler(regs*)+0x1f4>
c001491f:	80 fa 3e             	cmp    dl,0x3e
c0014922:	0f 85 c2 05 00 00    	jne    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014928:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001492b:	be 01 00 00 00       	mov    esi,0x1
c0014930:	eb db                	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014932:	80 fa 6d             	cmp    dl,0x6d
c0014935:	0f 84 ec 02 00 00    	je     c0014c27 <Vm::faultHandler(regs*)+0x3b4>
c001493b:	77 17                	ja     c0014954 <Vm::faultHandler(regs*)+0xe1>
c001493d:	80 fa 67             	cmp    dl,0x67
c0014940:	0f 84 48 01 00 00    	je     c0014a8e <Vm::faultHandler(regs*)+0x21b>
c0014946:	80 fa 6c             	cmp    dl,0x6c
c0014949:	0f 84 69 02 00 00    	je     c0014bb8 <Vm::faultHandler(regs*)+0x345>
c001494f:	e9 96 05 00 00       	jmp    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014954:	80 fa 6f             	cmp    dl,0x6f
c0014957:	0f 84 f4 03 00 00    	je     c0014d51 <Vm::faultHandler(regs*)+0x4de>
c001495d:	0f 82 59 03 00 00    	jb     c0014cbc <Vm::faultHandler(regs*)+0x449>
c0014963:	80 fa 9c             	cmp    dl,0x9c
c0014966:	0f 84 2f 01 00 00    	je     c0014a9b <Vm::faultHandler(regs*)+0x228>
c001496c:	e9 79 05 00 00       	jmp    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014971:	80 fa ec             	cmp    dl,0xec
c0014974:	0f 84 14 05 00 00    	je     c0014e8e <Vm::faultHandler(regs*)+0x61b>
c001497a:	77 7b                	ja     c00149f7 <Vm::faultHandler(regs*)+0x184>
c001497c:	80 fa e4             	cmp    dl,0xe4
c001497f:	0f 84 93 04 00 00    	je     c0014e18 <Vm::faultHandler(regs*)+0x5a5>
c0014985:	77 53                	ja     c00149da <Vm::faultHandler(regs*)+0x167>
c0014987:	80 fa cd             	cmp    dl,0xcd
c001498a:	0f 84 d9 01 00 00    	je     c0014b69 <Vm::faultHandler(regs*)+0x2f6>
c0014990:	80 fa cf             	cmp    dl,0xcf
c0014993:	0f 85 51 05 00 00    	jne    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014999:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001499c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001499f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00149a3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00149a6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00149aa:	81 ca 00 02 02 00    	or     edx,0x20200
c00149b0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00149b3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149bd:	66 c1 e8 09          	shr    ax,0x9
c00149c1:	83 e0 01             	and    eax,0x1
c00149c4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00149c7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00149ca:	83 c0 06             	add    eax,0x6
c00149cd:	25 ff ff 00 00       	and    eax,0xffff
c00149d2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00149d5:	e9 0c 05 00 00       	jmp    c0014ee6 <Vm::faultHandler(regs*)+0x673>
c00149da:	80 fa e6             	cmp    dl,0xe6
c00149dd:	0f 84 7f 04 00 00    	je     c0014e62 <Vm::faultHandler(regs*)+0x5ef>
c00149e3:	0f 82 4b 04 00 00    	jb     c0014e34 <Vm::faultHandler(regs*)+0x5c1>
c00149e9:	80 fa e7             	cmp    dl,0xe7
c00149ec:	0f 84 87 04 00 00    	je     c0014e79 <Vm::faultHandler(regs*)+0x606>
c00149f2:	e9 f3 04 00 00       	jmp    c0014eea <Vm::faultHandler(regs*)+0x677>
c00149f7:	80 fa ef             	cmp    dl,0xef
c00149fa:	0f 84 d1 04 00 00    	je     c0014ed1 <Vm::faultHandler(regs*)+0x65e>
c0014a00:	77 28                	ja     c0014a2a <Vm::faultHandler(regs*)+0x1b7>
c0014a02:	80 fa ed             	cmp    dl,0xed
c0014a05:	0f 84 9f 04 00 00    	je     c0014eaa <Vm::faultHandler(regs*)+0x637>
c0014a0b:	80 fa ee             	cmp    dl,0xee
c0014a0e:	0f 85 d6 04 00 00    	jne    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014a14:	50                   	push   eax
c0014a15:	50                   	push   eax
c0014a16:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014a1a:	50                   	push   eax
c0014a1b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014a1f:	50                   	push   eax
c0014a20:	e8 a3 f9 ff ff       	call   c00143c8 <Vm::outbv(unsigned short, unsigned char)>
c0014a25:	e9 9f 04 00 00       	jmp    c0014ec9 <Vm::faultHandler(regs*)+0x656>
c0014a2a:	80 fa fa             	cmp    dl,0xfa
c0014a2d:	0f 84 69 01 00 00    	je     c0014b9c <Vm::faultHandler(regs*)+0x329>
c0014a33:	80 fa fb             	cmp    dl,0xfb
c0014a36:	0f 84 6e 01 00 00    	je     c0014baa <Vm::faultHandler(regs*)+0x337>
c0014a3c:	80 fa f3             	cmp    dl,0xf3
c0014a3f:	0f 85 a5 04 00 00    	jne    c0014eea <Vm::faultHandler(regs*)+0x677>
c0014a45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a48:	e9 c0 fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a50:	be 02 00 00 00       	mov    esi,0x2
c0014a55:	e9 b3 fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a5d:	be 03 00 00 00       	mov    esi,0x3
c0014a62:	e9 a6 fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a6a:	be 04 00 00 00       	mov    esi,0x4
c0014a6f:	e9 99 fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a77:	be 05 00 00 00       	mov    esi,0x5
c0014a7c:	e9 8c fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a81:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a84:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a89:	e9 7f fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a91:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a96:	e9 72 fe ff ff       	jmp    c001490d <Vm::faultHandler(regs*)+0x9a>
c0014a9b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014aa2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014aa7:	74 30                	je     c0014ad9 <Vm::faultHandler(regs*)+0x266>
c0014aa9:	83 e9 04             	sub    ecx,0x4
c0014aac:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014ab2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ab8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014abb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014abe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ac4:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ac8:	0f 84 15 04 00 00    	je     c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014ace:	80 ce 02             	or     dh,0x2
c0014ad1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ad4:	e9 0a 04 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014ad9:	83 e9 02             	sub    ecx,0x2
c0014adc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ae2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014ae5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014ae9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014aef:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014af3:	74 05                	je     c0014afa <Vm::faultHandler(regs*)+0x287>
c0014af5:	80 ce 02             	or     dh,0x2
c0014af8:	eb 03                	jmp    c0014afd <Vm::faultHandler(regs*)+0x28a>
c0014afa:	80 e6 fd             	and    dh,0xfd
c0014afd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b01:	e9 dd 03 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014b06:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b0b:	74 2a                	je     c0014b37 <Vm::faultHandler(regs*)+0x2c4>
c0014b0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b0f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b15:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b1b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b26:	c1 e8 09             	shr    eax,0x9
c0014b29:	83 e0 01             	and    eax,0x1
c0014b2c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b2f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b32:	83 c0 04             	add    eax,0x4
c0014b35:	eb 25                	jmp    c0014b5c <Vm::faultHandler(regs*)+0x2e9>
c0014b37:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b3a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b40:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b43:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b4c:	66 c1 e8 09          	shr    ax,0x9
c0014b50:	83 e0 01             	and    eax,0x1
c0014b53:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b56:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b59:	83 c0 02             	add    eax,0x2
c0014b5c:	25 ff ff 00 00       	and    eax,0xffff
c0014b61:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b64:	e9 7a 03 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014b69:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b6d:	3c ee                	cmp    al,0xee
c0014b6f:	75 10                	jne    c0014b81 <Vm::faultHandler(regs*)+0x30e>
c0014b71:	83 ec 0c             	sub    esp,0xc
c0014b74:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b77:	e8 e9 f8 ff ff       	call   c0014465 <Vm::mainloop3(unsigned long)>
c0014b7c:	e9 4b 03 00 00       	jmp    c0014ecc <Vm::faultHandler(regs*)+0x659>
c0014b81:	83 ec 0c             	sub    esp,0xc
c0014b84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b8c:	51                   	push   ecx
c0014b8d:	50                   	push   eax
c0014b8e:	53                   	push   ebx
c0014b8f:	e8 e1 fb ff ff       	call   c0014775 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b94:	83 c4 20             	add    esp,0x20
c0014b97:	e9 4a 03 00 00       	jmp    c0014ee6 <Vm::faultHandler(regs*)+0x673>
c0014b9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ba1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ba5:	e9 39 03 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014baa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014baf:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014bb3:	e9 2b 03 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014bb8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014bbb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bc0:	74 2b                	je     c0014bed <Vm::faultHandler(regs*)+0x37a>
c0014bc2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014bc9:	76 22                	jbe    c0014bed <Vm::faultHandler(regs*)+0x37a>
c0014bcb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bcf:	50                   	push   eax
c0014bd0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bd4:	50                   	push   eax
c0014bd5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bd9:	50                   	push   eax
c0014bda:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bde:	50                   	push   eax
c0014bdf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014be3:	50                   	push   eax
c0014be4:	6a 6c                	push   0x6c
c0014be6:	6a 6c                	push   0x6c
c0014be8:	e9 b9 01 00 00       	jmp    c0014da6 <Vm::faultHandler(regs*)+0x533>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bf4:	0f b7 f6             	movzx  esi,si
c0014bf7:	50                   	push   eax
c0014bf8:	e8 b8 f7 ff ff       	call   c00143b5 <Vm::inbv(unsigned short)>
c0014bfd:	83 c4 0c             	add    esp,0xc
c0014c00:	0f b6 c0             	movzx  eax,al
c0014c03:	50                   	push   eax
c0014c04:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014c08:	50                   	push   eax
c0014c09:	56                   	push   esi
c0014c0a:	e8 24 fc ff ff       	call   c0014833 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c15:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c19:	74 03                	je     c0014c1e <Vm::faultHandler(regs*)+0x3ab>
c0014c1b:	48                   	dec    eax
c0014c1c:	eb 01                	jmp    c0014c1f <Vm::faultHandler(regs*)+0x3ac>
c0014c1e:	40                   	inc    eax
c0014c1f:	0f b7 c0             	movzx  eax,ax
c0014c22:	e9 8d 00 00 00       	jmp    c0014cb4 <Vm::faultHandler(regs*)+0x441>
c0014c27:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c2d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c32:	74 29                	je     c0014c5d <Vm::faultHandler(regs*)+0x3ea>
c0014c34:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c39:	76 22                	jbe    c0014c5d <Vm::faultHandler(regs*)+0x3ea>
c0014c3b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c3f:	50                   	push   eax
c0014c40:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c44:	50                   	push   eax
c0014c45:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c49:	50                   	push   eax
c0014c4a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c4e:	50                   	push   eax
c0014c4f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c53:	50                   	push   eax
c0014c54:	6a 6d                	push   0x6d
c0014c56:	6a 6d                	push   0x6d
c0014c58:	e9 49 01 00 00       	jmp    c0014da6 <Vm::faultHandler(regs*)+0x533>
c0014c5d:	0f b7 c8             	movzx  ecx,ax
c0014c60:	0f b7 f6             	movzx  esi,si
c0014c63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c6b:	74 20                	je     c0014c8d <Vm::faultHandler(regs*)+0x41a>
c0014c6d:	ed                   	in     eax,dx
c0014c6e:	55                   	push   ebp
c0014c6f:	50                   	push   eax
c0014c70:	51                   	push   ecx
c0014c71:	56                   	push   esi
c0014c72:	e8 e7 fb ff ff       	call   c001485e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c81:	74 05                	je     c0014c88 <Vm::faultHandler(regs*)+0x415>
c0014c83:	83 e8 04             	sub    eax,0x4
c0014c86:	eb 27                	jmp    c0014caf <Vm::faultHandler(regs*)+0x43c>
c0014c88:	83 c0 04             	add    eax,0x4
c0014c8b:	eb 22                	jmp    c0014caf <Vm::faultHandler(regs*)+0x43c>
c0014c8d:	66 ed                	in     ax,dx
c0014c8f:	0f b7 c0             	movzx  eax,ax
c0014c92:	57                   	push   edi
c0014c93:	50                   	push   eax
c0014c94:	51                   	push   ecx
c0014c95:	56                   	push   esi
c0014c96:	e8 ad fb ff ff       	call   c0014848 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c9b:	83 c4 10             	add    esp,0x10
c0014c9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ca1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ca5:	74 05                	je     c0014cac <Vm::faultHandler(regs*)+0x439>
c0014ca7:	83 e8 02             	sub    eax,0x2
c0014caa:	eb 03                	jmp    c0014caf <Vm::faultHandler(regs*)+0x43c>
c0014cac:	83 c0 02             	add    eax,0x2
c0014caf:	25 ff ff 00 00       	and    eax,0xffff
c0014cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014cb7:	e9 27 02 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014cbc:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cbf:	3c 05                	cmp    al,0x5
c0014cc1:	77 24                	ja     c0014ce7 <Vm::faultHandler(regs*)+0x474>
c0014cc3:	0f b6 c0             	movzx  eax,al
c0014cc6:	ff 24 85 5c ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe11a4]
c0014ccd:	0f b7 fd             	movzx  edi,bp
c0014cd0:	eb 15                	jmp    c0014ce7 <Vm::faultHandler(regs*)+0x474>
c0014cd2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014cd6:	eb 0f                	jmp    c0014ce7 <Vm::faultHandler(regs*)+0x474>
c0014cd8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014cdc:	eb 09                	jmp    c0014ce7 <Vm::faultHandler(regs*)+0x474>
c0014cde:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014ce2:	eb 03                	jmp    c0014ce7 <Vm::faultHandler(regs*)+0x474>
c0014ce4:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014ce7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cef:	74 29                	je     c0014d1a <Vm::faultHandler(regs*)+0x4a7>
c0014cf1:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cf6:	76 22                	jbe    c0014d1a <Vm::faultHandler(regs*)+0x4a7>
c0014cf8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cfc:	50                   	push   eax
c0014cfd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d01:	50                   	push   eax
c0014d02:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d06:	50                   	push   eax
c0014d07:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d0b:	50                   	push   eax
c0014d0c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d10:	50                   	push   eax
c0014d11:	6a 6e                	push   0x6e
c0014d13:	6a 6e                	push   0x6e
c0014d15:	e9 8c 00 00 00       	jmp    c0014da6 <Vm::faultHandler(regs*)+0x533>
c0014d1a:	0f b7 c0             	movzx  eax,ax
c0014d1d:	52                   	push   edx
c0014d1e:	52                   	push   edx
c0014d1f:	50                   	push   eax
c0014d20:	57                   	push   edi
c0014d21:	e8 d9 fa ff ff       	call   c00147ff <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014d26:	59                   	pop    ecx
c0014d27:	0f b6 c0             	movzx  eax,al
c0014d2a:	5e                   	pop    esi
c0014d2b:	50                   	push   eax
c0014d2c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014d30:	50                   	push   eax
c0014d31:	e8 92 f6 ff ff       	call   c00143c8 <Vm::outbv(unsigned short, unsigned char)>
c0014d36:	83 c4 10             	add    esp,0x10
c0014d39:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d3c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d40:	74 03                	je     c0014d45 <Vm::faultHandler(regs*)+0x4d2>
c0014d42:	48                   	dec    eax
c0014d43:	eb 01                	jmp    c0014d46 <Vm::faultHandler(regs*)+0x4d3>
c0014d45:	40                   	inc    eax
c0014d46:	0f b7 c0             	movzx  eax,ax
c0014d49:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014d4c:	e9 92 01 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014d51:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d54:	3c 05                	cmp    al,0x5
c0014d56:	77 1f                	ja     c0014d77 <Vm::faultHandler(regs*)+0x504>
c0014d58:	0f b6 c0             	movzx  eax,al
c0014d5b:	ff 24 85 74 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe118c]
c0014d62:	89 ef                	mov    edi,ebp
c0014d64:	eb 11                	jmp    c0014d77 <Vm::faultHandler(regs*)+0x504>
c0014d66:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d69:	eb 0c                	jmp    c0014d77 <Vm::faultHandler(regs*)+0x504>
c0014d6b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d6e:	eb 07                	jmp    c0014d77 <Vm::faultHandler(regs*)+0x504>
c0014d70:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d73:	eb 02                	jmp    c0014d77 <Vm::faultHandler(regs*)+0x504>
c0014d75:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d77:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d7a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d7f:	74 37                	je     c0014db8 <Vm::faultHandler(regs*)+0x545>
c0014d81:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d87:	76 2f                	jbe    c0014db8 <Vm::faultHandler(regs*)+0x545>
c0014d89:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d8d:	50                   	push   eax
c0014d8e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d92:	50                   	push   eax
c0014d93:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d97:	50                   	push   eax
c0014d98:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d9c:	50                   	push   eax
c0014d9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014da1:	50                   	push   eax
c0014da2:	6a 6f                	push   0x6f
c0014da4:	6a 6f                	push   0x6f
c0014da6:	68 02 ee 01 c0       	push   0xc001ee02
c0014dab:	e8 53 58 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014db0:	83 c4 20             	add    esp,0x20
c0014db3:	e9 86 01 00 00       	jmp    c0014f3e <Vm::faultHandler(regs*)+0x6cb>
c0014db8:	0f b7 d7             	movzx  edx,di
c0014dbb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014dbe:	0f b7 c6             	movzx  eax,si
c0014dc1:	81 e1 00 04 00 00    	and    ecx,0x400
c0014dc7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014dca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dcf:	74 1d                	je     c0014dee <Vm::faultHandler(regs*)+0x57b>
c0014dd1:	55                   	push   ebp
c0014dd2:	55                   	push   ebp
c0014dd3:	50                   	push   eax
c0014dd4:	52                   	push   edx
c0014dd5:	e8 48 fa ff ff       	call   c0014822 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	89 fa                	mov    edx,edi
c0014ddf:	ef                   	out    dx,eax
c0014de0:	85 c9                	test   ecx,ecx
c0014de2:	74 05                	je     c0014de9 <Vm::faultHandler(regs*)+0x576>
c0014de4:	83 ee 04             	sub    esi,0x4
c0014de7:	eb 21                	jmp    c0014e0a <Vm::faultHandler(regs*)+0x597>
c0014de9:	83 c6 04             	add    esi,0x4
c0014dec:	eb 1c                	jmp    c0014e0a <Vm::faultHandler(regs*)+0x597>
c0014dee:	55                   	push   ebp
c0014def:	55                   	push   ebp
c0014df0:	50                   	push   eax
c0014df1:	52                   	push   edx
c0014df2:	e8 19 fa ff ff       	call   c0014810 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014df7:	83 c4 10             	add    esp,0x10
c0014dfa:	89 fa                	mov    edx,edi
c0014dfc:	66 ef                	out    dx,ax
c0014dfe:	85 c9                	test   ecx,ecx
c0014e00:	74 05                	je     c0014e07 <Vm::faultHandler(regs*)+0x594>
c0014e02:	83 ee 02             	sub    esi,0x2
c0014e05:	eb 03                	jmp    c0014e0a <Vm::faultHandler(regs*)+0x597>
c0014e07:	83 c6 02             	add    esi,0x2
c0014e0a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014e10:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014e13:	e9 cb 00 00 00       	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014e18:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e1f:	83 ec 0c             	sub    esp,0xc
c0014e22:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e26:	50                   	push   eax
c0014e27:	e8 89 f5 ff ff       	call   c00143b5 <Vm::inbv(unsigned short)>
c0014e2c:	0f b6 c0             	movzx  eax,al
c0014e2f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e32:	eb 3f                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x600>
c0014e34:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e39:	74 07                	je     c0014e42 <Vm::faultHandler(regs*)+0x5cf>
c0014e3b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e3f:	ed                   	in     eax,dx
c0014e40:	eb 14                	jmp    c0014e56 <Vm::faultHandler(regs*)+0x5e3>
c0014e42:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014e45:	66 31 f6             	xor    si,si
c0014e48:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014e4b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e4f:	66 ed                	in     ax,dx
c0014e51:	0f b7 c0             	movzx  eax,ax
c0014e54:	09 f0                	or     eax,esi
c0014e56:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e59:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e5d:	e9 84 00 00 00       	jmp    c0014ee6 <Vm::faultHandler(regs*)+0x673>
c0014e62:	52                   	push   edx
c0014e63:	52                   	push   edx
c0014e64:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e68:	50                   	push   eax
c0014e69:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e6d:	50                   	push   eax
c0014e6e:	e8 55 f5 ff ff       	call   c00143c8 <Vm::outbv(unsigned short, unsigned char)>
c0014e73:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e77:	eb 53                	jmp    c0014ecc <Vm::faultHandler(regs*)+0x659>
c0014e79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e7c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e80:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e85:	74 03                	je     c0014e8a <Vm::faultHandler(regs*)+0x617>
c0014e87:	ef                   	out    dx,eax
c0014e88:	eb cf                	jmp    c0014e59 <Vm::faultHandler(regs*)+0x5e6>
c0014e8a:	66 ef                	out    dx,ax
c0014e8c:	eb cb                	jmp    c0014e59 <Vm::faultHandler(regs*)+0x5e6>
c0014e8e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e9c:	50                   	push   eax
c0014e9d:	e8 13 f5 ff ff       	call   c00143b5 <Vm::inbv(unsigned short)>
c0014ea2:	0f b6 c0             	movzx  eax,al
c0014ea5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ea8:	eb 1f                	jmp    c0014ec9 <Vm::faultHandler(regs*)+0x656>
c0014eaa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ead:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014eb2:	74 03                	je     c0014eb7 <Vm::faultHandler(regs*)+0x644>
c0014eb4:	ed                   	in     eax,dx
c0014eb5:	eb 0d                	jmp    c0014ec4 <Vm::faultHandler(regs*)+0x651>
c0014eb7:	66 ed                	in     ax,dx
c0014eb9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014ebc:	0f b7 c0             	movzx  eax,ax
c0014ebf:	66 31 d2             	xor    dx,dx
c0014ec2:	09 d0                	or     eax,edx
c0014ec4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014ec7:	eb 1a                	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014ec9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ecc:	83 c4 10             	add    esp,0x10
c0014ecf:	eb 15                	jmp    c0014ee6 <Vm::faultHandler(regs*)+0x673>
c0014ed1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014ed4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ed7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014edc:	74 03                	je     c0014ee1 <Vm::faultHandler(regs*)+0x66e>
c0014ede:	ef                   	out    dx,eax
c0014edf:	eb 02                	jmp    c0014ee3 <Vm::faultHandler(regs*)+0x670>
c0014ee1:	66 ef                	out    dx,ax
c0014ee3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ee6:	b0 01                	mov    al,0x1
c0014ee8:	eb 56                	jmp    c0014f40 <Vm::faultHandler(regs*)+0x6cd>
c0014eea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014eee:	50                   	push   eax
c0014eef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ef3:	50                   	push   eax
c0014ef4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ef8:	50                   	push   eax
c0014ef9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014efd:	50                   	push   eax
c0014efe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f02:	50                   	push   eax
c0014f03:	52                   	push   edx
c0014f04:	52                   	push   edx
c0014f05:	68 2f ee 01 c0       	push   0xc001ee2f
c0014f0a:	e8 f4 56 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014f0f:	83 c4 20             	add    esp,0x20
c0014f12:	83 ec 0c             	sub    esp,0xc
c0014f15:	6a 60                	push   0x60
c0014f17:	e8 99 f4 ff ff       	call   c00143b5 <Vm::inbv(unsigned short)>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	3c 1c                	cmp    al,0x1c
c0014f21:	74 04                	je     c0014f27 <Vm::faultHandler(regs*)+0x6b4>
c0014f23:	3c 5a                	cmp    al,0x5a
c0014f25:	75 eb                	jne    c0014f12 <Vm::faultHandler(regs*)+0x69f>
c0014f27:	3c 5a                	cmp    al,0x5a
c0014f29:	74 04                	je     c0014f2f <Vm::faultHandler(regs*)+0x6bc>
c0014f2b:	3c 1c                	cmp    al,0x1c
c0014f2d:	75 0f                	jne    c0014f3e <Vm::faultHandler(regs*)+0x6cb>
c0014f2f:	83 ec 0c             	sub    esp,0xc
c0014f32:	6a 60                	push   0x60
c0014f34:	e8 7c f4 ff ff       	call   c00143b5 <Vm::inbv(unsigned short)>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	eb e9                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x6b4>
c0014f3e:	31 c0                	xor    eax,eax
c0014f40:	83 c4 1c             	add    esp,0x1c
c0014f43:	5b                   	pop    ebx
c0014f44:	5e                   	pop    esi
c0014f45:	5f                   	pop    edi
c0014f46:	5d                   	pop    ebp
c0014f47:	c3                   	ret    

c0014f48 <noCopro(unsigned long)>:
c0014f48:	c3                   	ret    

c0014f49 <nmiHandler(regs*, void*)>:
c0014f49:	83 ec 0c             	sub    esp,0xc
c0014f4c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014f51:	83 ec 0c             	sub    esp,0xc
c0014f54:	50                   	push   eax
c0014f55:	e8 80 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	90                   	nop
c0014f5e:	83 c4 0c             	add    esp,0xc
c0014f61:	c3                   	ret    

c0014f62 <doubleFault(regs*, void*)>:
c0014f62:	55                   	push   ebp
c0014f63:	89 e5                	mov    ebp,esp
c0014f65:	83 ec 08             	sub    esp,0x8
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	68 8c ee 01 c0       	push   0xc001ee8c
c0014f70:	e8 0e b3 ff ff       	call   c0010283 <KePanic(char const*)>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	90                   	nop
c0014f79:	c9                   	leave  
c0014f7a:	c3                   	ret    

c0014f7b <displayDebugInfo(regs*)>:
c0014f7b:	83 ec 1c             	sub    esp,0x1c
c0014f7e:	0f 20 c0             	mov    eax,cr0
c0014f81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f85:	0f 20 d0             	mov    eax,cr2
c0014f88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f8c:	0f 20 d8             	mov    eax,cr3
c0014f8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f93:	0f 20 e0             	mov    eax,cr4
c0014f96:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f9d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fa0:	83 ec 08             	sub    esp,0x8
c0014fa3:	50                   	push   eax
c0014fa4:	68 a8 ee 01 c0       	push   0xc001eea8
c0014fa9:	e8 55 56 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014fae:	83 c4 10             	add    esp,0x10
c0014fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fb8:	83 ec 08             	sub    esp,0x8
c0014fbb:	50                   	push   eax
c0014fbc:	68 99 ee 01 c0       	push   0xc001ee99
c0014fc1:	e8 3d 56 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fcd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014fd0:	83 ec 08             	sub    esp,0x8
c0014fd3:	50                   	push   eax
c0014fd4:	68 a4 ee 01 c0       	push   0xc001eea4
c0014fd9:	e8 25 56 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe8:	83 ec 08             	sub    esp,0x8
c0014feb:	50                   	push   eax
c0014fec:	68 b3 ee 01 c0       	push   0xc001eeb3
c0014ff1:	e8 0d 56 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015000:	83 ec 08             	sub    esp,0x8
c0015003:	50                   	push   eax
c0015004:	68 be ee 01 c0       	push   0xc001eebe
c0015009:	e8 f5 55 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	83 ec 08             	sub    esp,0x8
c0015014:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015018:	68 c9 ee 01 c0       	push   0xc001eec9
c001501d:	e8 e1 55 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0015022:	83 c4 10             	add    esp,0x10
c0015025:	83 ec 08             	sub    esp,0x8
c0015028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001502c:	68 d4 ee 01 c0       	push   0xc001eed4
c0015031:	e8 cd 55 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001503e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015044:	83 ec 0c             	sub    esp,0xc
c0015047:	50                   	push   eax
c0015048:	e8 aa 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015055:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505b:	83 ec 08             	sub    esp,0x8
c001505e:	68 df ee 01 c0       	push   0xc001eedf
c0015063:	50                   	push   eax
c0015064:	e8 cd 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015071:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015077:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001507c:	8b 12                	mov    edx,DWORD PTR [edx]
c001507e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015081:	83 c2 0c             	add    edx,0xc
c0015084:	83 ec 08             	sub    esp,0x8
c0015087:	52                   	push   edx
c0015088:	50                   	push   eax
c0015089:	e8 a8 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015096:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001509c:	83 ec 08             	sub    esp,0x8
c001509f:	68 e8 ee 01 c0       	push   0xc001eee8
c00150a4:	50                   	push   eax
c00150a5:	e8 8c 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150bc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00150bf:	83 ec 08             	sub    esp,0x8
c00150c2:	52                   	push   edx
c00150c3:	50                   	push   eax
c00150c4:	e8 27 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d7:	83 ec 08             	sub    esp,0x8
c00150da:	68 f0 ee 01 c0       	push   0xc001eef0
c00150df:	50                   	push   eax
c00150e0:	e8 51 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150f7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00150fa:	83 ec 08             	sub    esp,0x8
c00150fd:	52                   	push   edx
c00150fe:	50                   	push   eax
c00150ff:	e8 ec 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001510c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015112:	83 ec 08             	sub    esp,0x8
c0015115:	68 f8 ee 01 c0       	push   0xc001eef8
c001511a:	50                   	push   eax
c001511b:	e8 16 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015128:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015132:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015135:	83 ec 08             	sub    esp,0x8
c0015138:	52                   	push   edx
c0015139:	50                   	push   eax
c001513a:	e8 b1 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001513f:	83 c4 10             	add    esp,0x10
c0015142:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015147:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001514d:	83 ec 08             	sub    esp,0x8
c0015150:	68 00 ef 01 c0       	push   0xc001ef00
c0015155:	50                   	push   eax
c0015156:	e8 db 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015163:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015169:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001516d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015170:	83 ec 08             	sub    esp,0x8
c0015173:	52                   	push   edx
c0015174:	50                   	push   eax
c0015175:	e8 76 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015182:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015188:	83 ec 08             	sub    esp,0x8
c001518b:	68 08 ef 01 c0       	push   0xc001ef08
c0015190:	50                   	push   eax
c0015191:	e8 a0 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001519e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151a8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00151ab:	83 ec 08             	sub    esp,0x8
c00151ae:	52                   	push   edx
c00151af:	50                   	push   eax
c00151b0:	e8 3b 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151b5:	83 c4 10             	add    esp,0x10
c00151b8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151c3:	83 ec 08             	sub    esp,0x8
c00151c6:	68 10 ef 01 c0       	push   0xc001ef10
c00151cb:	50                   	push   eax
c00151cc:	e8 65 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151d1:	83 c4 10             	add    esp,0x10
c00151d4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151e3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151e6:	83 ec 08             	sub    esp,0x8
c00151e9:	52                   	push   edx
c00151ea:	50                   	push   eax
c00151eb:	e8 00 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fe:	83 ec 08             	sub    esp,0x8
c0015201:	68 18 ef 01 c0       	push   0xc001ef18
c0015206:	50                   	push   eax
c0015207:	e8 2a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015214:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001521a:	83 ec 08             	sub    esp,0x8
c001521d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015221:	50                   	push   eax
c0015222:	e8 c9 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001522f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015235:	83 ec 08             	sub    esp,0x8
c0015238:	68 21 ef 01 c0       	push   0xc001ef21
c001523d:	50                   	push   eax
c001523e:	e8 f3 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001524b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015251:	83 ec 08             	sub    esp,0x8
c0015254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015258:	50                   	push   eax
c0015259:	e8 92 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015266:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001526c:	83 ec 08             	sub    esp,0x8
c001526f:	68 29 ef 01 c0       	push   0xc001ef29
c0015274:	50                   	push   eax
c0015275:	e8 bc 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015282:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015288:	83 ec 08             	sub    esp,0x8
c001528b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001528f:	50                   	push   eax
c0015290:	e8 5b 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	fa                   	cli    
c0015299:	f4                   	hlt    
c001529a:	eb fe                	jmp    c001529a <displayDebugInfo(regs*)+0x31f>

c001529c <HalSystemIdle()>:
c001529c:	56                   	push   esi
c001529d:	53                   	push   ebx
c001529e:	83 ec 14             	sub    esp,0x14
c00152a1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152ac:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00152b2:	83 e0 04             	and    eax,0x4
c00152b5:	84 c0                	test   al,al
c00152b7:	0f 95 c0             	setne  al
c00152ba:	84 c0                	test   al,al
c00152bc:	74 4c                	je     c001530a <HalSystemIdle()+0x6e>
c00152be:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152c3:	83 ec 08             	sub    esp,0x8
c00152c6:	68 e1 00 00 00       	push   0xe1
c00152cb:	50                   	push   eax
c00152cc:	e8 21 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152dc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152e5:	83 e2 02             	and    edx,0x2
c00152e8:	89 d3                	mov    ebx,edx
c00152ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152ee:	83 e2 00             	and    edx,0x0
c00152f1:	89 d6                	mov    esi,edx
c00152f3:	56                   	push   esi
c00152f4:	53                   	push   ebx
c00152f5:	68 e1 00 00 00       	push   0xe1
c00152fa:	50                   	push   eax
c00152fb:	e8 1e 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015300:	83 c4 10             	add    esp,0x10
c0015303:	e8 8c ae fe ff       	call   c0000194 <doTPAUSE>
c0015308:	eb 01                	jmp    c001530b <HalSystemIdle()+0x6f>
c001530a:	f4                   	hlt    
c001530b:	90                   	nop
c001530c:	83 c4 14             	add    esp,0x14
c001530f:	5b                   	pop    ebx
c0015310:	5e                   	pop    esi
c0015311:	c3                   	ret    

c0015312 <displayProgramFault(char const*)>:
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	83 ec 0c             	sub    esp,0xc
c0015318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001531c:	e8 e2 52 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001532e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015334:	85 c0                	test   eax,eax
c0015336:	74 21                	je     c0015359 <displayProgramFault(char const*)+0x47>
c0015338:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001533d:	8b 00                	mov    eax,DWORD PTR [eax]
c001533f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015342:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015348:	6a 04                	push   0x4
c001534a:	6a 0f                	push   0xf
c001534c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015350:	50                   	push   eax
c0015351:	e8 52 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	90                   	nop
c001535a:	83 c4 0c             	add    esp,0xc
c001535d:	c3                   	ret    

c001535e <gpFault(regs*, void*)>:
c001535e:	83 ec 1c             	sub    esp,0x1c
c0015361:	c7 05 10 52 02 c0 73 48 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0014873
c001536b:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015370:	85 c0                	test   eax,eax
c0015372:	74 1c                	je     c0015390 <gpFault(regs*, void*)+0x32>
c0015374:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015380:	ff d0                	call   eax
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015389:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001538e:	75 2e                	jne    c00153be <gpFault(regs*, void*)+0x60>
c0015390:	83 ec 0c             	sub    esp,0xc
c0015393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015397:	e8 df fb ff ff       	call   c0014f7b <displayDebugInfo(regs*)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	68 31 ef 01 c0       	push   0xc001ef31
c00153a7:	e8 66 ff ff ff       	call   c0015312 <displayProgramFault(char const*)>
c00153ac:	83 c4 10             	add    esp,0x10
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	6a 00                	push   0x0
c00153b4:	e8 af ee ff ff       	call   c0014268 <Thr::terminateFromIRQ(int)>
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	eb 01                	jmp    c00153bf <gpFault(regs*, void*)+0x61>
c00153be:	90                   	nop
c00153bf:	83 c4 1c             	add    esp,0x1c
c00153c2:	c3                   	ret    

c00153c3 <pgFault(regs*, void*)>:
c00153c3:	83 ec 1c             	sub    esp,0x1c
c00153c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153cd:	0f 20 d0             	mov    eax,cr2
c00153d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153d8:	83 ec 04             	sub    esp,0x4
c00153db:	52                   	push   edx
c00153dc:	50                   	push   eax
c00153dd:	68 10 f0 01 c0       	push   0xc001f010
c00153e2:	e8 1c 52 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153fa:	0f 20 d2             	mov    edx,cr2
c00153fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015405:	83 ec 08             	sub    esp,0x8
c0015408:	52                   	push   edx
c0015409:	50                   	push   eax
c001540a:	e8 01 4e ff ff       	call   c000a210 <VAS::tryLoadBackOffDisk(unsigned long)>
c001540f:	83 c4 10             	add    esp,0x10
c0015412:	84 c0                	test   al,al
c0015414:	75 2e                	jne    c0015444 <pgFault(regs*, void*)+0x81>
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001541d:	e8 59 fb ff ff       	call   c0014f7b <displayDebugInfo(regs*)>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	83 ec 0c             	sub    esp,0xc
c0015428:	68 4a ef 01 c0       	push   0xc001ef4a
c001542d:	e8 e0 fe ff ff       	call   c0015312 <displayProgramFault(char const*)>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	6a 00                	push   0x0
c001543a:	e8 29 ee ff ff       	call   c0014268 <Thr::terminateFromIRQ(int)>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	eb 01                	jmp    c0015445 <pgFault(regs*, void*)+0x82>
c0015444:	90                   	nop
c0015445:	83 c4 1c             	add    esp,0x1c
c0015448:	c3                   	ret    

c0015449 <otherISRHandler(regs*, void*)>:
c0015449:	83 ec 0c             	sub    esp,0xc
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015453:	e8 23 fb ff ff       	call   c0014f7b <displayDebugInfo(regs*)>
c0015458:	83 c4 10             	add    esp,0x10
c001545b:	83 ec 0c             	sub    esp,0xc
c001545e:	68 38 f0 01 c0       	push   0xc001f038
c0015463:	e8 aa fe ff ff       	call   c0015312 <displayProgramFault(char const*)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	83 ec 0c             	sub    esp,0xc
c001546e:	6a 00                	push   0x0
c0015470:	e8 f3 ed ff ff       	call   c0014268 <Thr::terminateFromIRQ(int)>
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	90                   	nop
c0015479:	83 c4 0c             	add    esp,0xc
c001547c:	c3                   	ret    

c001547d <opcodeFault(regs*, void*)>:
c001547d:	55                   	push   ebp
c001547e:	89 e5                	mov    ebp,esp
c0015480:	83 ec 08             	sub    esp,0x8
c0015483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015486:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015489:	83 ec 08             	sub    esp,0x8
c001548c:	50                   	push   eax
c001548d:	68 55 ef 01 c0       	push   0xc001ef55
c0015492:	e8 6c 51 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001549f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154a5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00154ab:	84 c0                	test   al,al
c00154ad:	74 21                	je     c00154d0 <opcodeFault(regs*, void*)+0x53>
c00154af:	83 ec 0c             	sub    esp,0xc
c00154b2:	68 60 f0 01 c0       	push   0xc001f060
c00154b7:	e8 47 51 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c5:	8d 50 19             	lea    edx,[eax+0x19]
c00154c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ce:	eb 2b                	jmp    c00154fb <opcodeFault(regs*, void*)+0x7e>
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154d6:	e8 a0 fa ff ff       	call   c0014f7b <displayDebugInfo(regs*)>
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	68 63 ef 01 c0       	push   0xc001ef63
c00154e6:	e8 27 fe ff ff       	call   c0015312 <displayProgramFault(char const*)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	6a 00                	push   0x0
c00154f3:	e8 70 ed ff ff       	call   c0014268 <Thr::terminateFromIRQ(int)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	c9                   	leave  
c00154fc:	c3                   	ret    

c00154fd <i386SaveCoprocessor(void*)>:
c00154fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015501:	83 c0 3f             	add    eax,0x3f
c0015504:	83 e0 c0             	and    eax,0xffffffc0
c0015507:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001550b:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015511 <i386LoadCoprocessor(void*)>:
c0015511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015515:	83 c0 3f             	add    eax,0x3f
c0015518:	83 e0 c0             	and    eax,0xffffffc0
c001551b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001551f:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015525 <x87EmulHandler(regs*, void*)>:
c0015525:	53                   	push   ebx
c0015526:	83 ec 08             	sub    esp,0x8
c0015529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001552e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015532:	74 10                	je     c0015544 <x87EmulHandler(regs*, void*)+0x1f>
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	68 70 ef 01 c0       	push   0xc001ef70
c001553c:	e8 42 ad ff ff       	call   c0010283 <KePanic(char const*)>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	0f 20 c0             	mov    eax,cr0
c0015547:	a8 08                	test   al,0x8
c0015549:	74 59                	je     c00155a4 <x87EmulHandler(regs*, void*)+0x7f>
c001554b:	0f 06                	clts   
c001554d:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015552:	85 c0                	test   eax,eax
c0015554:	74 0e                	je     c0015564 <x87EmulHandler(regs*, void*)+0x3f>
c0015556:	83 ec 0c             	sub    esp,0xc
c0015559:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001555c:	e8 9c ff ff ff       	call   c00154fd <i386SaveCoprocessor(void*)>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001556a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001556e:	75 12                	jne    c0015582 <x87EmulHandler(regs*, void*)+0x5d>
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	68 40 02 00 00       	push   0x240
c0015578:	e8 3c 22 ff ff       	call   c00077b9 <malloc>
c001557d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015580:	eb 10                	jmp    c0015592 <x87EmulHandler(regs*, void*)+0x6d>
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001558a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001558d:	e8 7f ff ff ff       	call   c0015511 <i386LoadCoprocessor(void*)>
c0015592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c001559f:	83 c4 08             	add    esp,0x8
c00155a2:	5b                   	pop    ebx
c00155a3:	c3                   	ret    
c00155a4:	83 ec 0c             	sub    esp,0xc
c00155a7:	68 84 ef 01 c0       	push   0xc001ef84
c00155ac:	e8 52 50 ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c00155b1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00155b9:	83 c4 18             	add    esp,0x18
c00155bc:	5b                   	pop    ebx
c00155bd:	e9 a6 ec ff ff       	jmp    c0014268 <Thr::terminateFromIRQ(int)>

c00155c2 <HalInitialiseCoprocessor()>:
c00155c2:	83 ec 10             	sub    esp,0x10
c00155c5:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00155cf:	6a 00                	push   0x0
c00155d1:	68 25 55 01 c0       	push   0xc0015525
c00155d6:	6a 07                	push   0x7
c00155d8:	e8 97 69 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155dd:	e8 8e 65 00 00       	call   c001bb70 <avxDetect>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	85 c0                	test   eax,eax
c00155e7:	74 1c                	je     c0015605 <HalInitialiseCoprocessor()+0x43>
c00155e9:	c7 05 0c 52 02 c0 9a bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bb9a
c00155f3:	c7 05 08 52 02 c0 ab bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bbab
c00155fd:	83 c4 0c             	add    esp,0xc
c0015600:	e9 b7 65 00 00       	jmp    c001bbbc <avxInit>
c0015605:	e8 46 68 00 00       	call   c001be50 <absolutelyNoChanceInHell>
c001560a:	85 c0                	test   eax,eax
c001560c:	74 1c                	je     c001562a <HalInitialiseCoprocessor()+0x68>
c001560e:	c7 05 0c 52 02 c0 68 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be68
c0015618:	c7 05 08 52 02 c0 70 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be70
c0015622:	83 c4 0c             	add    esp,0xc
c0015625:	e9 4e 68 00 00       	jmp    c001be78 <sseInit>
c001562a:	e8 67 68 00 00       	call   c001be96 <x87Detect>
c001562f:	85 c0                	test   eax,eax
c0015631:	74 1c                	je     c001564f <HalInitialiseCoprocessor()+0x8d>
c0015633:	c7 05 0c 52 02 c0 b1 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001beb1
c001563d:	c7 05 08 52 02 c0 b8 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001beb8
c0015647:	83 c4 0c             	add    esp,0xc
c001564a:	e9 70 68 00 00       	jmp    c001bebf <x87Init>
c001564f:	c7 05 0c 52 02 c0 48 4f 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014f48
c0015659:	c7 05 08 52 02 c0 48 4f 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014f48
c0015663:	0f 20 c0             	mov    eax,cr0
c0015666:	83 c8 04             	or     eax,0x4
c0015669:	0f 22 c0             	mov    cr0,eax
c001566c:	83 c4 0c             	add    esp,0xc
c001566f:	c3                   	ret    

c0015670 <HalPanic(char const*)>:
c0015670:	53                   	push   ebx
c0015671:	83 ec 10             	sub    esp,0x10
c0015674:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015678:	fa                   	cli    
c0015679:	53                   	push   ebx
c001567a:	68 9a ef 01 c0       	push   0xc001ef9a
c001567f:	e8 7f 4f ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0015684:	83 c4 0c             	add    esp,0xc
c0015687:	6a 01                	push   0x1
c0015689:	6a 0f                	push   0xf
c001568b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015691:	e8 b4 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015696:	58                   	pop    eax
c0015697:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001569d:	e8 a0 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c00156a2:	5a                   	pop    edx
c00156a3:	59                   	pop    ecx
c00156a4:	68 a8 d8 01 c0       	push   0xc001d8a8
c00156a9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156af:	e8 ce 2b ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00156b4:	83 c4 0c             	add    esp,0xc
c00156b7:	6a 01                	push   0x1
c00156b9:	6a 0f                	push   0xf
c00156bb:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156c1:	e8 84 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156c6:	58                   	pop    eax
c00156c7:	5a                   	pop    edx
c00156c8:	68 b3 ef 01 c0       	push   0xc001efb3
c00156cd:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156d3:	e8 5e 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156d8:	83 c4 0c             	add    esp,0xc
c00156db:	6a 0f                	push   0xf
c00156dd:	6a 01                	push   0x1
c00156df:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156e5:	e8 60 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156ea:	59                   	pop    ecx
c00156eb:	58                   	pop    eax
c00156ec:	68 bc ef 01 c0       	push   0xc001efbc
c00156f1:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156f7:	e8 3a 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156fc:	83 c4 0c             	add    esp,0xc
c00156ff:	6a 01                	push   0x1
c0015701:	6a 0f                	push   0xf
c0015703:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015709:	e8 3c 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001570e:	58                   	pop    eax
c001570f:	5a                   	pop    edx
c0015710:	68 00 f0 01 c0       	push   0xc001f000
c0015715:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001571b:	e8 16 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015720:	59                   	pop    ecx
c0015721:	58                   	pop    eax
c0015722:	68 c9 ef 01 c0       	push   0xc001efc9
c0015727:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001572d:	e8 04 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015732:	58                   	pop    eax
c0015733:	5a                   	pop    edx
c0015734:	68 03 f0 01 c0       	push   0xc001f003
c0015739:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001573f:	e8 f2 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015744:	59                   	pop    ecx
c0015745:	58                   	pop    eax
c0015746:	53                   	push   ebx
c0015747:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001574d:	e8 e4 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015752:	58                   	pop    eax
c0015753:	5a                   	pop    edx
c0015754:	68 00 f0 01 c0       	push   0xc001f000
c0015759:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001575f:	e8 d2 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	eb fe                	jmp    c0015767 <HalPanic(char const*)+0xf7>

c0015769 <HalQueryPerformanceCounter()>:
c0015769:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001576e:	31 d2                	xor    edx,edx
c0015770:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015776:	31 c0                	xor    eax,eax
c0015778:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001577f:	74 02                	je     c0015783 <HalQueryPerformanceCounter()+0x1a>
c0015781:	0f 31                	rdtsc  
c0015783:	c3                   	ret    

c0015784 <HalInitialise()>:
c0015784:	53                   	push   ebx
c0015785:	83 ec 08             	sub    esp,0x8
c0015788:	e8 1a 6a ff ff       	call   c000c1a7 <setupINTS()>
c001578d:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015794:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015799:	75 07                	jne    c00157a2 <HalInitialise()+0x1e>
c001579b:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00157a2:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00157a8:	83 e0 01             	and    eax,0x1
c00157ab:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00157b0:	e8 a7 02 00 00       	call   c0015a5c <picOpen()>
c00157b5:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00157bc:	74 0a                	je     c00157c8 <HalInitialise()+0x44>
c00157be:	e8 e1 01 00 00       	call   c00159a4 <picDisable()>
c00157c3:	e8 26 5d 00 00       	call   c001b4ee <apicOpen()>
c00157c8:	bb 0f 00 00 00       	mov    ebx,0xf
c00157cd:	50                   	push   eax
c00157ce:	6a 00                	push   0x0
c00157d0:	68 49 54 01 c0       	push   0xc0015449
c00157d5:	6a 00                	push   0x0
c00157d7:	e8 98 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157dc:	83 c4 0c             	add    esp,0xc
c00157df:	6a 00                	push   0x0
c00157e1:	68 49 54 01 c0       	push   0xc0015449
c00157e6:	6a 01                	push   0x1
c00157e8:	e8 87 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ed:	83 c4 0c             	add    esp,0xc
c00157f0:	6a 00                	push   0x0
c00157f2:	68 49 4f 01 c0       	push   0xc0014f49
c00157f7:	6a 02                	push   0x2
c00157f9:	e8 76 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157fe:	83 c4 0c             	add    esp,0xc
c0015801:	6a 00                	push   0x0
c0015803:	68 49 54 01 c0       	push   0xc0015449
c0015808:	6a 03                	push   0x3
c001580a:	e8 65 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001580f:	83 c4 0c             	add    esp,0xc
c0015812:	6a 00                	push   0x0
c0015814:	68 49 54 01 c0       	push   0xc0015449
c0015819:	6a 04                	push   0x4
c001581b:	e8 54 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015820:	83 c4 0c             	add    esp,0xc
c0015823:	6a 00                	push   0x0
c0015825:	68 49 54 01 c0       	push   0xc0015449
c001582a:	6a 05                	push   0x5
c001582c:	e8 43 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015831:	83 c4 0c             	add    esp,0xc
c0015834:	6a 00                	push   0x0
c0015836:	68 7d 54 01 c0       	push   0xc001547d
c001583b:	6a 06                	push   0x6
c001583d:	e8 32 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015842:	83 c4 0c             	add    esp,0xc
c0015845:	6a 00                	push   0x0
c0015847:	68 62 4f 01 c0       	push   0xc0014f62
c001584c:	6a 08                	push   0x8
c001584e:	e8 21 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015853:	83 c4 0c             	add    esp,0xc
c0015856:	6a 00                	push   0x0
c0015858:	68 49 54 01 c0       	push   0xc0015449
c001585d:	6a 09                	push   0x9
c001585f:	e8 10 67 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015864:	83 c4 0c             	add    esp,0xc
c0015867:	6a 00                	push   0x0
c0015869:	68 49 54 01 c0       	push   0xc0015449
c001586e:	6a 0a                	push   0xa
c0015870:	e8 ff 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015875:	83 c4 0c             	add    esp,0xc
c0015878:	6a 00                	push   0x0
c001587a:	68 49 54 01 c0       	push   0xc0015449
c001587f:	6a 0b                	push   0xb
c0015881:	e8 ee 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015886:	83 c4 0c             	add    esp,0xc
c0015889:	6a 00                	push   0x0
c001588b:	68 5e 53 01 c0       	push   0xc001535e
c0015890:	6a 0d                	push   0xd
c0015892:	e8 dd 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015897:	83 c4 0c             	add    esp,0xc
c001589a:	6a 00                	push   0x0
c001589c:	68 c3 53 01 c0       	push   0xc00153c3
c00158a1:	6a 0e                	push   0xe
c00158a3:	e8 cc 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	50                   	push   eax
c00158ac:	6a 00                	push   0x0
c00158ae:	68 49 54 01 c0       	push   0xc0015449
c00158b3:	53                   	push   ebx
c00158b4:	43                   	inc    ebx
c00158b5:	e8 ba 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	83 fb 1e             	cmp    ebx,0x1e
c00158c0:	75 e9                	jne    c00158ab <HalInitialise()+0x127>
c00158c2:	50                   	push   eax
c00158c3:	6a 00                	push   0x0
c00158c5:	68 d3 14 01 c0       	push   0xc00114d3
c00158ca:	6a 60                	push   0x60
c00158cc:	e8 a3 66 ff ff       	call   c000bf74 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00158d6:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00158e0:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00158e7:	e8 cd 1e ff ff       	call   c00077b9 <malloc>
c00158ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00158ef:	89 c3                	mov    ebx,eax
c00158f1:	e8 2e 09 00 00       	call   c0016224 <RTC::RTC()>
c00158f6:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015900:	5a                   	pop    edx
c0015901:	59                   	pop    ecx
c0015902:	53                   	push   ebx
c0015903:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015909:	e8 32 61 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c001590e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015910:	6a 00                	push   0x0
c0015912:	6a 00                	push   0x0
c0015914:	6a 00                	push   0x0
c0015916:	53                   	push   ebx
c0015917:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001591a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001591f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015925:	83 c4 28             	add    esp,0x28
c0015928:	5b                   	pop    ebx
c0015929:	c3                   	ret    

c001592a <HalMakeBeep(int)>:
c001592a:	53                   	push   ebx
c001592b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001592f:	85 db                	test   ebx,ebx
c0015931:	75 07                	jne    c001593a <HalMakeBeep(int)+0x10>
c0015933:	e4 61                	in     al,0x61
c0015935:	83 e0 fc             	and    eax,0xfffffffc
c0015938:	eb 26                	jmp    c0015960 <HalMakeBeep(int)+0x36>
c001593a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001593f:	99                   	cdq    
c0015940:	f7 fb                	idiv   ebx
c0015942:	89 c1                	mov    ecx,eax
c0015944:	b0 b6                	mov    al,0xb6
c0015946:	e6 43                	out    0x43,al
c0015948:	88 c8                	mov    al,cl
c001594a:	e6 42                	out    0x42,al
c001594c:	89 c8                	mov    eax,ecx
c001594e:	c1 e8 08             	shr    eax,0x8
c0015951:	e6 42                	out    0x42,al
c0015953:	e4 61                	in     al,0x61
c0015955:	88 c2                	mov    dl,al
c0015957:	83 ca 03             	or     edx,0x3
c001595a:	38 c2                	cmp    dl,al
c001595c:	74 04                	je     c0015962 <HalMakeBeep(int)+0x38>
c001595e:	88 d0                	mov    al,dl
c0015960:	e6 61                	out    0x61,al
c0015962:	5b                   	pop    ebx
c0015963:	c3                   	ret    

c0015964 <HalGetRand()>:
c0015964:	31 c0                	xor    eax,eax
c0015966:	c3                   	ret    

c0015967 <HalEndOfInterrupt(int)>:
c0015967:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001596e:	74 23                	je     c0015993 <HalEndOfInterrupt(int)+0x2c>
c0015970:	83 ec 14             	sub    esp,0x14
c0015973:	6a 1b                	push   0x1b
c0015975:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001597b:	e8 72 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015980:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015985:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001598f:	83 c4 1c             	add    esp,0x1c
c0015992:	c3                   	ret    
c0015993:	e9 54 02 00 00       	jmp    c0015bec <picEOI(int)>

c0015998 <HalRestart()>:
c0015998:	c3                   	ret    

c0015999 <HalShutdown()>:
c0015999:	c3                   	ret    

c001599a <HalSleep()>:
c001599a:	c3                   	ret    
c001599b:	90                   	nop

c001599c <picIoWait()>:
c001599c:	eb 00                	jmp    c001599e <picIoWait()+0x2>
c001599e:	eb 00                	jmp    c00159a0 <picIoWait()+0x4>
c00159a0:	90                   	nop
c00159a1:	c3                   	ret    
c00159a2:	66 90                	xchg   ax,ax

c00159a4 <picDisable()>:
c00159a4:	83 ec 10             	sub    esp,0x10
c00159a7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00159ae:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00159b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00159bc:	ee                   	out    dx,al
c00159bd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00159c4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00159c9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159cd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00159d2:	ee                   	out    dx,al
c00159d3:	90                   	nop
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	c3                   	ret    

c00159d8 <picGetIRQReg(int)>:
c00159d8:	83 ec 10             	sub    esp,0x10
c00159db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159df:	25 ff 00 00 00       	and    eax,0xff
c00159e4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00159eb:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00159ef:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00159f3:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00159f8:	ee                   	out    dx,al
c00159f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159fd:	25 ff 00 00 00       	and    eax,0xff
c0015a02:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a09:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a0d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a11:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a16:	ee                   	out    dx,al
c0015a17:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a1e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a23:	89 c2                	mov    edx,eax
c0015a25:	ec                   	in     al,dx
c0015a26:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a2a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a2e:	25 ff 00 00 00       	and    eax,0xff
c0015a33:	c1 e0 08             	shl    eax,0x8
c0015a36:	89 c1                	mov    ecx,eax
c0015a38:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a3f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a44:	89 c2                	mov    edx,eax
c0015a46:	ec                   	in     al,dx
c0015a47:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a4b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a4f:	25 ff 00 00 00       	and    eax,0xff
c0015a54:	09 c8                	or     eax,ecx
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	c3                   	ret    
c0015a5a:	66 90                	xchg   ax,ax

c0015a5c <picOpen()>:
c0015a5c:	83 ec 50             	sub    esp,0x50
c0015a5f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a66:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a6b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a73:	ee                   	out    dx,al
c0015a74:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a7b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a80:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a88:	ee                   	out    dx,al
c0015a89:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a91:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a99:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015aa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aa4:	89 c2                	mov    edx,eax
c0015aa6:	ec                   	in     al,dx
c0015aa7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015aab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015aaf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015ab3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015aba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abe:	89 c2                	mov    edx,eax
c0015ac0:	ec                   	in     al,dx
c0015ac1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ac5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015ac9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015acd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015ad4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015ad9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015add:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ae1:	ee                   	out    dx,al
c0015ae2:	e8 b5 fe ff ff       	call   c001599c <picIoWait()>
c0015ae7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015aee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015af3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015af7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015afb:	ee                   	out    dx,al
c0015afc:	e8 9b fe ff ff       	call   c001599c <picIoWait()>
c0015b01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b05:	25 ff 00 00 00       	and    eax,0xff
c0015b0a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b11:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b15:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b1d:	ee                   	out    dx,al
c0015b1e:	e8 79 fe ff ff       	call   c001599c <picIoWait()>
c0015b23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b27:	25 ff 00 00 00       	and    eax,0xff
c0015b2c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b33:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015b37:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b3f:	ee                   	out    dx,al
c0015b40:	e8 57 fe ff ff       	call   c001599c <picIoWait()>
c0015b45:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b4c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b51:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b59:	ee                   	out    dx,al
c0015b5a:	e8 3d fe ff ff       	call   c001599c <picIoWait()>
c0015b5f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b66:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b73:	ee                   	out    dx,al
c0015b74:	e8 23 fe ff ff       	call   c001599c <picIoWait()>
c0015b79:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b80:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b85:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b8d:	ee                   	out    dx,al
c0015b8e:	e8 09 fe ff ff       	call   c001599c <picIoWait()>
c0015b93:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b9a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b9f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015ba3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ba7:	ee                   	out    dx,al
c0015ba8:	e8 ef fd ff ff       	call   c001599c <picIoWait()>
c0015bad:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015bb1:	25 ff 00 00 00       	and    eax,0xff
c0015bb6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015bbd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015bc1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015bc5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015bc9:	ee                   	out    dx,al
c0015bca:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015bce:	25 ff 00 00 00       	and    eax,0xff
c0015bd3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015bda:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015bde:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015be2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015be6:	ee                   	out    dx,al
c0015be7:	90                   	nop
c0015be8:	83 c4 50             	add    esp,0x50
c0015beb:	c3                   	ret    

c0015bec <picEOI(int)>:
c0015bec:	83 ec 10             	sub    esp,0x10
c0015bef:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bf4:	75 22                	jne    c0015c18 <picEOI(int)+0x2c>
c0015bf6:	6a 0b                	push   0xb
c0015bf8:	e8 db fd ff ff       	call   c00159d8 <picGetIRQReg(int)>
c0015bfd:	83 c4 04             	add    esp,0x4
c0015c00:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c05:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c0a:	25 ff ff 00 00       	and    eax,0xffff
c0015c0f:	25 80 00 00 00       	and    eax,0x80
c0015c14:	74 72                	je     c0015c88 <picEOI(int)+0x9c>
c0015c16:	66 90                	xchg   ax,ax
c0015c18:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c1d:	75 31                	jne    c0015c50 <picEOI(int)+0x64>
c0015c1f:	6a 0b                	push   0xb
c0015c21:	e8 b2 fd ff ff       	call   c00159d8 <picGetIRQReg(int)>
c0015c26:	83 c4 04             	add    esp,0x4
c0015c29:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c32:	66 85 c0             	test   ax,ax
c0015c35:	78 19                	js     c0015c50 <picEOI(int)+0x64>
c0015c37:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c3e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c4c:	ee                   	out    dx,al
c0015c4d:	eb 3d                	jmp    c0015c8c <picEOI(int)+0xa0>
c0015c4f:	90                   	nop
c0015c50:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c55:	7e 19                	jle    c0015c70 <picEOI(int)+0x84>
c0015c57:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c5e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c63:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c67:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c6c:	ee                   	out    dx,al
c0015c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c70:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c77:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c7c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c80:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c85:	ee                   	out    dx,al
c0015c86:	eb 04                	jmp    c0015c8c <picEOI(int)+0xa0>
c0015c88:	90                   	nop
c0015c89:	8d 76 00             	lea    esi,[esi+0x0]
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	c3                   	ret    

c0015c90 <RTC::open(int, int, void*)>:
c0015c90:	31 c0                	xor    eax,eax
c0015c92:	c3                   	ret    
c0015c93:	90                   	nop

c0015c94 <RTC::close(int, int, void*)>:
c0015c94:	31 c0                	xor    eax,eax
c0015c96:	c3                   	ret    
c0015c97:	90                   	nop

c0015c98 <RTC::timeInSecondsUTC()>:
c0015c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c9c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015ca2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ca8:	c3                   	ret    
c0015ca9:	90                   	nop

c0015caa <RTC::timeInDatetimeUTC()>:
c0015caa:	53                   	push   ebx
c0015cab:	83 ec 14             	sub    esp,0x14
c0015cae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cb8:	50                   	push   eax
c0015cb9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cbc:	83 c4 0c             	add    esp,0xc
c0015cbf:	52                   	push   edx
c0015cc0:	50                   	push   eax
c0015cc1:	53                   	push   ebx
c0015cc2:	e8 ed 5a ff ff       	call   c000b7b4 <secondsToDatetime(unsigned long long)>
c0015cc7:	89 d8                	mov    eax,ebx
c0015cc9:	83 c4 14             	add    esp,0x14
c0015ccc:	5b                   	pop    ebx
c0015ccd:	c2 04 00             	ret    0x4

c0015cd0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015cd0:	56                   	push   esi
c0015cd1:	53                   	push   ebx
c0015cd2:	83 ec 14             	sub    esp,0x14
c0015cd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cdb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015cde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ce2:	52                   	push   edx
c0015ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ceb:	50                   	push   eax
c0015cec:	e8 c3 5a ff ff       	call   c000b7b4 <secondsToDatetime(unsigned long long)>
c0015cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cf5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015cf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cfd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d05:	89 f0                	mov    eax,esi
c0015d07:	83 c4 20             	add    esp,0x20
c0015d0a:	5b                   	pop    ebx
c0015d0b:	5e                   	pop    esi
c0015d0c:	ff e0                	jmp    eax

c0015d0e <RTC::~RTC()>:
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0015d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1a:	89 10                	mov    DWORD PTR [eax],edx
c0015d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	50                   	push   eax
c0015d24:	e8 0f 58 ff ff       	call   c000b538 <Clock::~Clock()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	90                   	nop
c0015d2d:	83 c4 0c             	add    esp,0xc
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <RTC::~RTC()>:
c0015d32:	83 ec 0c             	sub    esp,0xc
c0015d35:	83 ec 0c             	sub    esp,0xc
c0015d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3c:	e8 cd ff ff ff       	call   c0015d0e <RTC::~RTC()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	83 ec 08             	sub    esp,0x8
c0015d47:	68 60 01 00 00       	push   0x160
c0015d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d50:	e8 b8 47 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	83 c4 0c             	add    esp,0xc
c0015d5b:	c3                   	ret    

c0015d5c <RTC::get_update_in_progress_flag()>:
c0015d5c:	83 ec 14             	sub    esp,0x14
c0015d5f:	6a 0a                	push   0xa
c0015d61:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d67:	e8 3a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d6c:	83 c4 1c             	add    esp,0x1c
c0015d6f:	c0 e8 07             	shr    al,0x7
c0015d72:	c3                   	ret    
c0015d73:	90                   	nop

c0015d74 <RTC::completeRTCRefresh()>:
c0015d74:	55                   	push   ebp
c0015d75:	57                   	push   edi
c0015d76:	56                   	push   esi
c0015d77:	53                   	push   ebx
c0015d78:	83 ec 2c             	sub    esp,0x2c
c0015d7b:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d81:	83 ec 0c             	sub    esp,0xc
c0015d84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d88:	e8 cf ff ff ff       	call   c0015d5c <RTC::get_update_in_progress_flag()>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	84 c0                	test   al,al
c0015d92:	74 0e                	je     c0015da2 <RTC::completeRTCRefresh()+0x2e>
c0015d94:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d9a:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015da0:	73 df                	jae    c0015d81 <RTC::completeRTCRefresh()+0xd>
c0015da2:	55                   	push   ebp
c0015da3:	55                   	push   ebp
c0015da4:	6a 00                	push   0x0
c0015da6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dac:	e8 f5 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015db5:	58                   	pop    eax
c0015db6:	5a                   	pop    edx
c0015db7:	6a 02                	push   0x2
c0015db9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dbf:	e8 e2 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015dc8:	59                   	pop    ecx
c0015dc9:	5b                   	pop    ebx
c0015dca:	6a 04                	push   0x4
c0015dcc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd2:	e8 cf 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dd7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015ddb:	5e                   	pop    esi
c0015ddc:	5f                   	pop    edi
c0015ddd:	6a 07                	push   0x7
c0015ddf:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015de5:	e8 bc 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dea:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015dee:	5d                   	pop    ebp
c0015def:	58                   	pop    eax
c0015df0:	6a 08                	push   0x8
c0015df2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015df8:	e8 a9 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dfd:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e01:	58                   	pop    eax
c0015e02:	5a                   	pop    edx
c0015e03:	6a 09                	push   0x9
c0015e05:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e0b:	e8 96 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e10:	83 c4 10             	add    esp,0x10
c0015e13:	0f b6 e8             	movzx  ebp,al
c0015e16:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e23:	e8 34 ff ff ff       	call   c0015d5c <RTC::get_update_in_progress_flag()>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	84 c0                	test   al,al
c0015e2d:	74 0e                	je     c0015e3d <RTC::completeRTCRefresh()+0xc9>
c0015e2f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e35:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015e3b:	73 df                	jae    c0015e1c <RTC::completeRTCRefresh()+0xa8>
c0015e3d:	50                   	push   eax
c0015e3e:	50                   	push   eax
c0015e3f:	6a 00                	push   0x0
c0015e41:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e47:	e8 5a 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e4c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e50:	58                   	pop    eax
c0015e51:	5a                   	pop    edx
c0015e52:	6a 02                	push   0x2
c0015e54:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e5a:	e8 47 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e5f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e63:	59                   	pop    ecx
c0015e64:	5b                   	pop    ebx
c0015e65:	6a 04                	push   0x4
c0015e67:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e6d:	e8 34 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e72:	5e                   	pop    esi
c0015e73:	88 c3                	mov    bl,al
c0015e75:	5f                   	pop    edi
c0015e76:	6a 07                	push   0x7
c0015e78:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e7e:	e8 23 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e83:	89 c6                	mov    esi,eax
c0015e85:	58                   	pop    eax
c0015e86:	5a                   	pop    edx
c0015e87:	6a 08                	push   0x8
c0015e89:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e8f:	e8 12 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e94:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e98:	59                   	pop    ecx
c0015e99:	5f                   	pop    edi
c0015e9a:	6a 09                	push   0x9
c0015e9c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ea2:	e8 ff 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ea7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015eab:	0f b6 f8             	movzx  edi,al
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015eb5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015eb9:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015ebd:	89 f1                	mov    ecx,esi
c0015ebf:	0f 94 c0             	sete   al
c0015ec2:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015ec6:	0f 94 c2             	sete   dl
c0015ec9:	21 d0                	and    eax,edx
c0015ecb:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015ecf:	0f 94 c2             	sete   dl
c0015ed2:	21 c2                	and    edx,eax
c0015ed4:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015ed8:	0f 94 c0             	sete   al
c0015edb:	21 d0                	and    eax,edx
c0015edd:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ee1:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015ee5:	0f 94 c1             	sete   cl
c0015ee8:	84 c8                	test   al,cl
c0015eea:	75 29                	jne    c0015f15 <RTC::completeRTCRefresh()+0x1a1>
c0015eec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ef0:	89 fd                	mov    ebp,edi
c0015ef2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015ef6:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015efa:	89 f0                	mov    eax,esi
c0015efc:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f04:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f08:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f0c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f10:	e9 01 ff ff ff       	jmp    c0015e16 <RTC::completeRTCRefresh()+0xa2>
c0015f15:	39 fd                	cmp    ebp,edi
c0015f17:	75 d3                	jne    c0015eec <RTC::completeRTCRefresh()+0x178>
c0015f19:	55                   	push   ebp
c0015f1a:	55                   	push   ebp
c0015f1b:	6a 0b                	push   0xb
c0015f1d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f23:	e8 7e 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f28:	83 c4 10             	add    esp,0x10
c0015f2b:	89 c5                	mov    ebp,eax
c0015f2d:	a8 04                	test   al,0x4
c0015f2f:	75 78                	jne    c0015fa9 <RTC::completeRTCRefresh()+0x235>
c0015f31:	b1 0a                	mov    cl,0xa
c0015f33:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015f37:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f3b:	83 e2 0f             	and    edx,0xf
c0015f3e:	c0 e8 04             	shr    al,0x4
c0015f41:	c1 ef 04             	shr    edi,0x4
c0015f44:	f6 e1                	mul    cl
c0015f46:	6b ff 0a             	imul   edi,edi,0xa
c0015f49:	01 d0                	add    eax,edx
c0015f4b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f4f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f53:	83 e2 0f             	and    edx,0xf
c0015f56:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f5a:	c0 e8 04             	shr    al,0x4
c0015f5d:	f6 e1                	mul    cl
c0015f5f:	01 d0                	add    eax,edx
c0015f61:	88 da                	mov    dl,bl
c0015f63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f67:	83 e2 0f             	and    edx,0xf
c0015f6a:	88 d8                	mov    al,bl
c0015f6c:	83 e3 80             	and    ebx,0xffffff80
c0015f6f:	c0 e8 04             	shr    al,0x4
c0015f72:	83 e0 07             	and    eax,0x7
c0015f75:	f6 e1                	mul    cl
c0015f77:	01 d0                	add    eax,edx
c0015f79:	89 f2                	mov    edx,esi
c0015f7b:	09 c3                	or     ebx,eax
c0015f7d:	83 e2 0f             	and    edx,0xf
c0015f80:	89 f0                	mov    eax,esi
c0015f82:	c0 e8 04             	shr    al,0x4
c0015f85:	f6 e1                	mul    cl
c0015f87:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f8a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f8e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f92:	83 e2 0f             	and    edx,0xf
c0015f95:	c0 e8 04             	shr    al,0x4
c0015f98:	f6 e1                	mul    cl
c0015f9a:	01 d0                	add    eax,edx
c0015f9c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015fa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fa4:	83 e0 0f             	and    eax,0xf
c0015fa7:	01 c7                	add    edi,eax
c0015fa9:	83 e5 02             	and    ebp,0x2
c0015fac:	75 14                	jne    c0015fc2 <RTC::completeRTCRefresh()+0x24e>
c0015fae:	84 db                	test   bl,bl
c0015fb0:	79 10                	jns    c0015fc2 <RTC::completeRTCRefresh()+0x24e>
c0015fb2:	83 e3 7f             	and    ebx,0x7f
c0015fb5:	b9 18 00 00 00       	mov    ecx,0x18
c0015fba:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015fbd:	99                   	cdq    
c0015fbe:	f7 f9                	idiv   ecx
c0015fc0:	88 d3                	mov    bl,dl
c0015fc2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015fc8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015fce:	77 06                	ja     c0015fd6 <RTC::completeRTCRefresh()+0x262>
c0015fd0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015fd6:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015fdb:	31 d2                	xor    edx,edx
c0015fdd:	c1 e1 10             	shl    ecx,0x10
c0015fe0:	89 d7                	mov    edi,edx
c0015fe2:	c1 e5 10             	shl    ebp,0x10
c0015fe5:	31 c0                	xor    eax,eax
c0015fe7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015fed:	09 cf                	or     edi,ecx
c0015fef:	89 fa                	mov    edx,edi
c0015ff1:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015ff5:	88 da                	mov    dl,bl
c0015ff7:	89 f3                	mov    ebx,esi
c0015ff9:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015ffd:	88 d8                	mov    al,bl
c0015fff:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016003:	0f b7 c8             	movzx  ecx,ax
c0016006:	09 e9                	or     ecx,ebp
c0016008:	89 c8                	mov    eax,ecx
c001600a:	51                   	push   ecx
c001600b:	51                   	push   ecx
c001600c:	52                   	push   edx
c001600d:	50                   	push   eax
c001600e:	e8 14 56 ff ff       	call   c000b627 <datetimeToSeconds(datetime_t)>
c0016013:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016017:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001601d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016023:	83 c4 3c             	add    esp,0x3c
c0016026:	5b                   	pop    ebx
c0016027:	5e                   	pop    esi
c0016028:	5f                   	pop    edi
c0016029:	5d                   	pop    ebp
c001602a:	c3                   	ret    
c001602b:	90                   	nop

c001602c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001602c:	55                   	push   ebp
c001602d:	57                   	push   edi
c001602e:	56                   	push   esi
c001602f:	53                   	push   ebx
c0016030:	83 ec 30             	sub    esp,0x30
c0016033:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016037:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001603b:	6a 00                	push   0x0
c001603d:	6a 00                	push   0x0
c001603f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016045:	e8 72 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001604a:	83 c4 0c             	add    esp,0xc
c001604d:	6a 00                	push   0x0
c001604f:	6a 02                	push   0x2
c0016051:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016057:	e8 60 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001605c:	31 d2                	xor    edx,edx
c001605e:	89 f9                	mov    ecx,edi
c0016060:	89 f8                	mov    eax,edi
c0016062:	c1 e9 10             	shr    ecx,0x10
c0016065:	0f b6 c4             	movzx  eax,ah
c0016068:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c001606c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016070:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016074:	b9 64 00 00 00       	mov    ecx,0x64
c0016079:	89 f0                	mov    eax,esi
c001607b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001607f:	89 f0                	mov    eax,esi
c0016081:	0f b6 c4             	movzx  eax,ah
c0016084:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016088:	89 f0                	mov    eax,esi
c001608a:	c1 e8 10             	shr    eax,0x10
c001608d:	66 f7 f1             	div    cx
c0016090:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016095:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001609a:	59                   	pop    ecx
c001609b:	5b                   	pop    ebx
c001609c:	89 fb                	mov    ebx,edi
c001609e:	6a 0b                	push   0xb
c00160a0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160a6:	e8 fb 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00160ab:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00160af:	83 c4 10             	add    esp,0x10
c00160b2:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00160b7:	75 74                	jne    c001612d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00160b9:	b2 0a                	mov    dl,0xa
c00160bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00160bf:	0f b6 c1             	movzx  eax,cl
c00160c2:	f6 f2                	div    dl
c00160c4:	88 c3                	mov    bl,al
c00160c6:	88 e0                	mov    al,ah
c00160c8:	c1 e3 04             	shl    ebx,0x4
c00160cb:	09 c3                	or     ebx,eax
c00160cd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00160d2:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00160d6:	f6 f2                	div    dl
c00160d8:	88 c1                	mov    cl,al
c00160da:	88 e0                	mov    al,ah
c00160dc:	c1 e1 04             	shl    ecx,0x4
c00160df:	09 c1                	or     ecx,eax
c00160e1:	89 f8                	mov    eax,edi
c00160e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00160e7:	0f b6 c0             	movzx  eax,al
c00160ea:	f6 f2                	div    dl
c00160ec:	88 c3                	mov    bl,al
c00160ee:	88 e0                	mov    al,ah
c00160f0:	c1 e3 04             	shl    ebx,0x4
c00160f3:	09 c3                	or     ebx,eax
c00160f5:	89 f0                	mov    eax,esi
c00160f7:	0f b6 c0             	movzx  eax,al
c00160fa:	f6 f2                	div    dl
c00160fc:	88 c1                	mov    cl,al
c00160fe:	88 e0                	mov    al,ah
c0016100:	c1 e1 04             	shl    ecx,0x4
c0016103:	09 c1                	or     ecx,eax
c0016105:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001610a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001610e:	f6 f2                	div    dl
c0016110:	88 c1                	mov    cl,al
c0016112:	88 e0                	mov    al,ah
c0016114:	c1 e1 04             	shl    ecx,0x4
c0016117:	09 c1                	or     ecx,eax
c0016119:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001611e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016122:	f6 f2                	div    dl
c0016124:	89 c5                	mov    ebp,eax
c0016126:	88 e0                	mov    al,ah
c0016128:	c1 e5 04             	shl    ebp,0x4
c001612b:	09 c5                	or     ebp,eax
c001612d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016132:	75 17                	jne    c001614b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016134:	80 fb 0b             	cmp    bl,0xb
c0016137:	76 0c                	jbe    c0016145 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016139:	80 eb 0c             	sub    bl,0xc
c001613c:	75 02                	jne    c0016140 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001613e:	b3 0c                	mov    bl,0xc
c0016140:	83 cb 80             	or     ebx,0xffffff80
c0016143:	eb 06                	jmp    c001614b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016145:	84 db                	test   bl,bl
c0016147:	75 02                	jne    c001614b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016149:	b3 0c                	mov    bl,0xc
c001614b:	0f b6 db             	movzx  ebx,bl
c001614e:	50                   	push   eax
c001614f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016154:	50                   	push   eax
c0016155:	6a 00                	push   0x0
c0016157:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001615d:	e8 5a 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016162:	83 c4 0c             	add    esp,0xc
c0016165:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001616a:	50                   	push   eax
c001616b:	6a 02                	push   0x2
c001616d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016173:	e8 44 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016178:	83 c4 0c             	add    esp,0xc
c001617b:	53                   	push   ebx
c001617c:	6a 04                	push   0x4
c001617e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016184:	e8 33 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016189:	83 c4 0c             	add    esp,0xc
c001618c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016191:	50                   	push   eax
c0016192:	6a 07                	push   0x7
c0016194:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001619a:	e8 1d 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001619f:	83 c4 0c             	add    esp,0xc
c00161a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00161a7:	50                   	push   eax
c00161a8:	6a 08                	push   0x8
c00161aa:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161b0:	e8 07 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161b5:	83 c4 0c             	add    esp,0xc
c00161b8:	89 e8                	mov    eax,ebp
c00161ba:	0f b6 e8             	movzx  ebp,al
c00161bd:	55                   	push   ebp
c00161be:	6a 09                	push   0x9
c00161c0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161c6:	e8 f1 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161cb:	5a                   	pop    edx
c00161cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161d0:	e8 9f fb ff ff       	call   c0015d74 <RTC::completeRTCRefresh()>
c00161d5:	83 c4 3c             	add    esp,0x3c
c00161d8:	b0 01                	mov    al,0x1
c00161da:	5b                   	pop    ebx
c00161db:	5e                   	pop    esi
c00161dc:	5f                   	pop    edi
c00161dd:	5d                   	pop    ebp
c00161de:	c3                   	ret    

c00161df <rtcIRQHandler(regs*, void*)>:
c00161df:	53                   	push   ebx
c00161e0:	83 ec 10             	sub    esp,0x10
c00161e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00161e7:	6a 0c                	push   0xc
c00161e9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161ef:	e8 b2 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161f4:	83 c4 10             	add    esp,0x10
c00161f7:	84 c0                	test   al,al
c00161f9:	79 24                	jns    c001621f <rtcIRQHandler(regs*, void*)+0x40>
c00161fb:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016202:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016209:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016210:	75 0d                	jne    c001621f <rtcIRQHandler(regs*, void*)+0x40>
c0016212:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016216:	83 c4 08             	add    esp,0x8
c0016219:	5b                   	pop    ebx
c001621a:	e9 55 fb ff ff       	jmp    c0015d74 <RTC::completeRTCRefresh()>
c001621f:	83 c4 08             	add    esp,0x8
c0016222:	5b                   	pop    ebx
c0016223:	c3                   	ret    

c0016224 <RTC::RTC()>:
c0016224:	83 ec 1c             	sub    esp,0x1c
c0016227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001622b:	83 ec 08             	sub    esp,0x8
c001622e:	68 83 f0 01 c0       	push   0xc001f083
c0016233:	50                   	push   eax
c0016234:	e8 c9 52 ff ff       	call   c000b502 <Clock::Clock(char const*)>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0016241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016245:	89 10                	mov    DWORD PTR [eax],edx
c0016247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001624b:	83 ec 0c             	sub    esp,0xc
c001624e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016252:	6a 01                	push   0x1
c0016254:	68 df 61 01 c0       	push   0xc00161df
c0016259:	6a 08                	push   0x8
c001625b:	50                   	push   eax
c001625c:	e8 8b 57 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016261:	83 c4 20             	add    esp,0x20
c0016264:	89 c2                	mov    edx,eax
c0016266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001626a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016270:	fa                   	cli    
c0016271:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016276:	40                   	inc    eax
c0016277:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001627c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016281:	83 ec 08             	sub    esp,0x8
c0016284:	6a 0b                	push   0xb
c0016286:	50                   	push   eax
c0016287:	e8 1a 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016293:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016298:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001629c:	83 ca 10             	or     edx,0x10
c001629f:	81 e2 ff 00 00 00    	and    edx,0xff
c00162a5:	83 ec 04             	sub    esp,0x4
c00162a8:	52                   	push   edx
c00162a9:	6a 0b                	push   0xb
c00162ab:	50                   	push   eax
c00162ac:	e8 0b 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00162b1:	83 c4 10             	add    esp,0x10
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162bb:	e8 b4 fa ff ff       	call   c0015d74 <RTC::completeRTCRefresh()>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162c8:	48                   	dec    eax
c00162c9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00162ce:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162d3:	85 c0                	test   eax,eax
c00162d5:	75 01                	jne    c00162d8 <RTC::RTC()+0xb4>
c00162d7:	fb                   	sti    
c00162d8:	90                   	nop
c00162d9:	83 c4 1c             	add    esp,0x1c
c00162dc:	c3                   	ret    
c00162dd:	66 90                	xchg   ax,ax
c00162df:	90                   	nop

c00162e0 <HalConsoleScroll(int, int)>:
c00162e0:	83 ec 10             	sub    esp,0x10
c00162e3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00162eb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00162f3:	90                   	nop
c00162f4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162f9:	0f 8f e1 00 00 00    	jg     c00163e0 <HalConsoleScroll(int, int)+0x100>
c00162ff:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016307:	90                   	nop
c0016308:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016310:	0f 8f be 00 00 00    	jg     c00163d4 <HalConsoleScroll(int, int)+0xf4>
c0016316:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001631a:	89 d0                	mov    eax,edx
c001631c:	c1 e0 02             	shl    eax,0x2
c001631f:	01 d0                	add    eax,edx
c0016321:	c1 e0 05             	shl    eax,0x5
c0016324:	89 c2                	mov    edx,eax
c0016326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001632a:	01 d0                	add    eax,edx
c001632c:	89 c2                	mov    edx,eax
c001632e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016332:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016339:	89 d0                	mov    eax,edx
c001633b:	c1 e0 02             	shl    eax,0x2
c001633e:	01 d0                	add    eax,edx
c0016340:	c1 e0 05             	shl    eax,0x5
c0016343:	89 c2                	mov    edx,eax
c0016345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016349:	01 d0                	add    eax,edx
c001634b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016355:	01 c2                	add    edx,eax
c0016357:	8a 01                	mov    al,BYTE PTR [ecx]
c0016359:	88 02                	mov    BYTE PTR [edx],al
c001635b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016360:	75 66                	jne    c00163c8 <HalConsoleScroll(int, int)+0xe8>
c0016362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016366:	83 e0 01             	and    eax,0x1
c0016369:	74 39                	je     c00163a4 <HalConsoleScroll(int, int)+0xc4>
c001636b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001636f:	83 e0 0f             	and    eax,0xf
c0016372:	88 c2                	mov    dl,al
c0016374:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016378:	c1 e0 04             	shl    eax,0x4
c001637b:	88 d1                	mov    cl,dl
c001637d:	09 c1                	or     ecx,eax
c001637f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016383:	89 d0                	mov    eax,edx
c0016385:	c1 e0 02             	shl    eax,0x2
c0016388:	01 d0                	add    eax,edx
c001638a:	c1 e0 05             	shl    eax,0x5
c001638d:	89 c2                	mov    edx,eax
c001638f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016393:	01 d0                	add    eax,edx
c0016395:	89 c2                	mov    edx,eax
c0016397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001639b:	01 d0                	add    eax,edx
c001639d:	88 ca                	mov    dl,cl
c001639f:	88 10                	mov    BYTE PTR [eax],dl
c00163a1:	eb 25                	jmp    c00163c8 <HalConsoleScroll(int, int)+0xe8>
c00163a3:	90                   	nop
c00163a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163a8:	89 d0                	mov    eax,edx
c00163aa:	c1 e0 02             	shl    eax,0x2
c00163ad:	01 d0                	add    eax,edx
c00163af:	c1 e0 05             	shl    eax,0x5
c00163b2:	89 c2                	mov    edx,eax
c00163b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163b8:	01 d0                	add    eax,edx
c00163ba:	89 c2                	mov    edx,eax
c00163bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c0:	01 d0                	add    eax,edx
c00163c2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00163c5:	8d 76 00             	lea    esi,[esi+0x0]
c00163c8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00163cc:	e9 37 ff ff ff       	jmp    c0016308 <HalConsoleScroll(int, int)+0x28>
c00163d1:	8d 76 00             	lea    esi,[esi+0x0]
c00163d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163d8:	e9 17 ff ff ff       	jmp    c00162f4 <HalConsoleScroll(int, int)+0x14>
c00163dd:	8d 76 00             	lea    esi,[esi+0x0]
c00163e0:	90                   	nop
c00163e1:	83 c4 10             	add    esp,0x10
c00163e4:	c3                   	ret    
c00163e5:	8d 76 00             	lea    esi,[esi+0x0]

c00163e8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00163e8:	83 ec 14             	sub    esp,0x14
c00163eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ef:	88 04 24             	mov    BYTE PTR [esp],al
c00163f2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00163f5:	25 ff 00 00 00       	and    eax,0xff
c00163fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163fe:	89 d1                	mov    ecx,edx
c0016400:	83 e1 0f             	and    ecx,0xf
c0016403:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016407:	c1 e2 04             	shl    edx,0x4
c001640a:	81 e2 ff 00 00 00    	and    edx,0xff
c0016410:	09 ca                	or     edx,ecx
c0016412:	c1 e2 08             	shl    edx,0x8
c0016415:	09 d0                	or     eax,edx
c0016417:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001641c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016424:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016428:	89 d0                	mov    eax,edx
c001642a:	c1 e0 02             	shl    eax,0x2
c001642d:	01 d0                	add    eax,edx
c001642f:	c1 e0 04             	shl    eax,0x4
c0016432:	89 c2                	mov    edx,eax
c0016434:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016438:	01 d0                	add    eax,edx
c001643a:	01 c0                	add    eax,eax
c001643c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016444:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016449:	66 89 02             	mov    WORD PTR [edx],ax
c001644c:	90                   	nop
c001644d:	83 c4 14             	add    esp,0x14
c0016450:	c3                   	ret    
c0016451:	8d 76 00             	lea    esi,[esi+0x0]

c0016454 <HalConsoleCursorUpdate(int, int)>:
c0016454:	83 ec 20             	sub    esp,0x20
c0016457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001645b:	89 c2                	mov    edx,eax
c001645d:	89 d0                	mov    eax,edx
c001645f:	c1 e0 02             	shl    eax,0x2
c0016462:	01 d0                	add    eax,edx
c0016464:	c1 e0 04             	shl    eax,0x4
c0016467:	89 c2                	mov    edx,eax
c0016469:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001646d:	01 d0                	add    eax,edx
c001646f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016474:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001647b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016480:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016484:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016488:	ee                   	out    dx,al
c0016489:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001648e:	25 ff 00 00 00       	and    eax,0xff
c0016493:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001649a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001649e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00164a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164a6:	ee                   	out    dx,al
c00164a7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00164ae:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00164b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00164b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164bb:	ee                   	out    dx,al
c00164bc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164c1:	66 c1 e8 08          	shr    ax,0x8
c00164c5:	25 ff 00 00 00       	and    eax,0xff
c00164ca:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00164d1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00164d5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00164d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164dd:	ee                   	out    dx,al
c00164de:	90                   	nop
c00164df:	83 c4 20             	add    esp,0x20
c00164e2:	c3                   	ret    
c00164e3:	90                   	nop

c00164e4 <FAT::getName()>:
c00164e4:	b8 d4 f0 01 c0       	mov    eax,0xc001f0d4
c00164e9:	c3                   	ret    
c00164ea:	66 90                	xchg   ax,ax

c00164ec <FAT::tell(void*, unsigned long long*)>:
c00164ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164f1:	75 09                	jne    c00164fc <FAT::tell(void*, unsigned long long*)+0x10>
c00164f3:	b8 04 00 00 00       	mov    eax,0x4
c00164f8:	c3                   	ret    
c00164f9:	8d 76 00             	lea    esi,[esi+0x0]
c00164fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016501:	75 09                	jne    c001650c <FAT::tell(void*, unsigned long long*)+0x20>
c0016503:	b8 04 00 00 00       	mov    eax,0x4
c0016508:	c3                   	ret    
c0016509:	8d 76 00             	lea    esi,[esi+0x0]
c001650c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016510:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016513:	ba 00 00 00 00       	mov    edx,0x0
c0016518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001651c:	89 01                	mov    DWORD PTR [ecx],eax
c001651e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016521:	b8 00 00 00 00       	mov    eax,0x0
c0016526:	c3                   	ret    
c0016527:	90                   	nop

c0016528 <FAT::stat(void*, unsigned long long*)>:
c0016528:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001652d:	75 09                	jne    c0016538 <FAT::stat(void*, unsigned long long*)+0x10>
c001652f:	b8 04 00 00 00       	mov    eax,0x4
c0016534:	c3                   	ret    
c0016535:	8d 76 00             	lea    esi,[esi+0x0]
c0016538:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001653d:	75 09                	jne    c0016548 <FAT::stat(void*, unsigned long long*)+0x20>
c001653f:	b8 04 00 00 00       	mov    eax,0x4
c0016544:	c3                   	ret    
c0016545:	8d 76 00             	lea    esi,[esi+0x0]
c0016548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001654c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001654f:	ba 00 00 00 00       	mov    edx,0x0
c0016554:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016558:	89 01                	mov    DWORD PTR [ecx],eax
c001655a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001655d:	b8 00 00 00 00       	mov    eax,0x0
c0016562:	c3                   	ret    
c0016563:	90                   	nop

c0016564 <FAT::~FAT()>:
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	ba 20 f1 01 c0       	mov    edx,0xc001f120
c001656c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016570:	89 10                	mov    DWORD PTR [eax],edx
c0016572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016576:	83 ec 0c             	sub    esp,0xc
c0016579:	50                   	push   eax
c001657a:	e8 c9 43 ff ff       	call   c000a948 <Filesystem::~Filesystem()>
c001657f:	83 c4 10             	add    esp,0x10
c0016582:	90                   	nop
c0016583:	83 c4 0c             	add    esp,0xc
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <FAT::~FAT()>:
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	83 ec 0c             	sub    esp,0xc
c001658e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016592:	e8 cd ff ff ff       	call   c0016564 <FAT::~FAT()>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 ec 08             	sub    esp,0x8
c001659d:	6a 08                	push   0x8
c001659f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a3:	e8 65 3f ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c00165a8:	83 c4 10             	add    esp,0x10
c00165ab:	83 c4 0c             	add    esp,0xc
c00165ae:	c3                   	ret    
c00165af:	90                   	nop

c00165b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00165b0:	83 ec 1c             	sub    esp,0x1c
c00165b3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00165ba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00165bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165c3:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165ca:	83 f8 ff             	cmp    eax,0xffffffff
c00165cd:	75 35                	jne    c0016604 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00165cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165d3:	88 c2                	mov    dl,al
c00165d5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165da:	01 d0                	add    eax,edx
c00165dc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165e0:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165ea:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165f1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165fa:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016601:	eb 19                	jmp    c001661c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016603:	90                   	nop
c0016604:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016608:	88 c2                	mov    dl,al
c001660a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001660e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016615:	01 d0                	add    eax,edx
c0016617:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001661b:	90                   	nop
c001661c:	83 ec 04             	sub    esp,0x4
c001661f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016623:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016627:	8d 44 24 15          	lea    eax,[esp+0x15]
c001662b:	50                   	push   eax
c001662c:	e8 23 e8 fe ff       	call   c0004e54 <f_getlabel>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016638:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001663d:	75 09                	jne    c0016648 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001663f:	b8 00 00 00 00       	mov    eax,0x0
c0016644:	eb 0a                	jmp    c0016650 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016646:	66 90                	xchg   ax,ax
c0016648:	b8 01 00 00 00       	mov    eax,0x1
c001664d:	8d 76 00             	lea    esi,[esi+0x0]
c0016650:	83 c4 1c             	add    esp,0x1c
c0016653:	c3                   	ret    

c0016654 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016654:	57                   	push   edi
c0016655:	83 ec 58             	sub    esp,0x58
c0016658:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016660:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016664:	b8 00 00 00 00       	mov    eax,0x0
c0016669:	b9 0f 00 00 00       	mov    ecx,0xf
c001666e:	fc                   	cld    
c001666f:	89 d7                	mov    edi,edx
c0016671:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016673:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016677:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001667e:	83 f8 ff             	cmp    eax,0xffffffff
c0016681:	75 35                	jne    c00166b8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016683:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016687:	88 c2                	mov    dl,al
c0016689:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001668e:	01 d0                	add    eax,edx
c0016690:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016694:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001669a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001669e:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00166a5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00166aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00166ae:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00166b5:	eb 19                	jmp    c00166d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00166b7:	90                   	nop
c00166b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166bc:	88 c2                	mov    dl,al
c00166be:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166c2:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00166c9:	01 d0                	add    eax,edx
c00166cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166cf:	90                   	nop
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00166d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166db:	50                   	push   eax
c00166dc:	e8 df a0 fe ff       	call   c00007c0 <strcat>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166eb:	50                   	push   eax
c00166ec:	e8 b4 e8 fe ff       	call   c0004fa5 <f_setlabel>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00166f8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00166fd:	75 09                	jne    c0016708 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00166ff:	b8 00 00 00 00       	mov    eax,0x0
c0016704:	eb 0a                	jmp    c0016710 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016706:	66 90                	xchg   ax,ax
c0016708:	b8 01 00 00 00       	mov    eax,0x1
c001670d:	8d 76 00             	lea    esi,[esi+0x0]
c0016710:	83 c4 58             	add    esp,0x58
c0016713:	5f                   	pop    edi
c0016714:	c3                   	ret    
c0016715:	90                   	nop
c0016716:	66 90                	xchg   ax,ax

c0016718 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016718:	83 ec 2c             	sub    esp,0x2c
c001671b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016723:	83 ec 08             	sub    esp,0x8
c0016726:	68 f8 f0 01 c0       	push   0xc001f0f8
c001672b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001672f:	e8 ac 9f fe ff       	call   c00006e0 <strcmp>
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	85 c0                	test   eax,eax
c0016739:	0f 94 c0             	sete   al
c001673c:	84 c0                	test   al,al
c001673e:	74 10                	je     c0016750 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016740:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016748:	e9 b3 00 00 00       	jmp    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001674d:	8d 76 00             	lea    esi,[esi+0x0]
c0016750:	83 ec 08             	sub    esp,0x8
c0016753:	68 ea f0 01 c0       	push   0xc001f0ea
c0016758:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001675c:	e8 7f 9f fe ff       	call   c00006e0 <strcmp>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	85 c0                	test   eax,eax
c0016766:	0f 94 c0             	sete   al
c0016769:	84 c0                	test   al,al
c001676b:	74 0f                	je     c001677c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001676d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016775:	e9 86 00 00 00       	jmp    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001677a:	66 90                	xchg   ax,ax
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	68 f0 f0 01 c0       	push   0xc001f0f0
c0016784:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016788:	e8 53 9f fe ff       	call   c00006e0 <strcmp>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	85 c0                	test   eax,eax
c0016792:	0f 94 c0             	sete   al
c0016795:	84 c0                	test   al,al
c0016797:	74 0b                	je     c00167a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016799:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167a1:	eb 5d                	jmp    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167a3:	90                   	nop
c00167a4:	83 ec 08             	sub    esp,0x8
c00167a7:	68 bc cf 01 c0       	push   0xc001cfbc
c00167ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167b0:	e8 2b 9f fe ff       	call   c00006e0 <strcmp>
c00167b5:	83 c4 10             	add    esp,0x10
c00167b8:	85 c0                	test   eax,eax
c00167ba:	0f 94 c0             	sete   al
c00167bd:	84 c0                	test   al,al
c00167bf:	74 0b                	je     c00167cc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00167c1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00167c9:	eb 35                	jmp    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167cb:	90                   	nop
c00167cc:	83 ec 08             	sub    esp,0x8
c00167cf:	68 f6 f0 01 c0       	push   0xc001f0f6
c00167d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d8:	e8 03 9f fe ff       	call   c00006e0 <strcmp>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	85 c0                	test   eax,eax
c00167e2:	0f 94 c0             	sete   al
c00167e5:	84 c0                	test   al,al
c00167e7:	74 0b                	je     c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00167e9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00167f1:	eb 0d                	jmp    c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167f3:	90                   	nop
c00167f4:	b8 08 00 00 00       	mov    eax,0x8
c00167f9:	e9 ea 00 00 00       	jmp    c00168e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167fe:	66 90                	xchg   ax,ax
c0016800:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016807:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001680c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016810:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016817:	83 f8 ff             	cmp    eax,0xffffffff
c001681a:	75 34                	jne    c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001681c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016820:	88 c2                	mov    dl,al
c0016822:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016827:	01 d0                	add    eax,edx
c0016829:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001682d:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016833:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016837:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001683e:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016843:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016847:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001684e:	eb 18                	jmp    c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016850:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016854:	88 c2                	mov    dl,al
c0016856:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001685a:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016861:	01 d0                	add    eax,edx
c0016863:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016867:	90                   	nop
c0016868:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001686c:	88 04 24             	mov    BYTE PTR [esp],al
c001686f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016877:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001687f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016884:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	68 00 20 00 00       	push   0x2000
c0016894:	e8 20 0f ff ff       	call   c00077b9 <malloc>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168a0:	68 00 20 00 00       	push   0x2000
c00168a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168ad:	50                   	push   eax
c00168ae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00168b2:	50                   	push   eax
c00168b3:	e8 dd e9 fe ff       	call   c0005295 <f_mkfs>
c00168b8:	83 c4 10             	add    esp,0x10
c00168bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00168c4:	75 0a                	jne    c00168d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00168c6:	b8 00 00 00 00       	mov    eax,0x0
c00168cb:	eb 1b                	jmp    c00168e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168cd:	8d 76 00             	lea    esi,[esi+0x0]
c00168d0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00168d5:	75 09                	jne    c00168e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00168d7:	b8 09 00 00 00       	mov    eax,0x9
c00168dc:	eb 0a                	jmp    c00168e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168de:	66 90                	xchg   ax,ax
c00168e0:	b8 01 00 00 00       	mov    eax,0x1
c00168e5:	8d 76 00             	lea    esi,[esi+0x0]
c00168e8:	83 c4 2c             	add    esp,0x2c
c00168eb:	c3                   	ret    

c00168ec <FAT::tryMount(LogicalDisk*, int)>:
c00168ec:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00168f2:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168f7:	83 f8 14             	cmp    eax,0x14
c00168fa:	75 18                	jne    c0016914 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	68 fc f0 01 c0       	push   0xc001f0fc
c0016904:	e8 7a 99 ff ff       	call   c0010283 <KePanic(char const*)>
c0016909:	83 c4 10             	add    esp,0x10
c001690c:	b0 00                	mov    al,0x0
c001690e:	e9 e9 01 00 00       	jmp    c0016afc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016913:	90                   	nop
c0016914:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001691b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016921:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016927:	3d 00 02 00 00       	cmp    eax,0x200
c001692c:	74 0a                	je     c0016938 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001692e:	b0 00                	mov    al,0x0
c0016930:	e9 c7 01 00 00       	jmp    c0016afc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016935:	8d 76 00             	lea    esi,[esi+0x0]
c0016938:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016940:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016947:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001694e:	83 f8 ff             	cmp    eax,0xffffffff
c0016951:	74 09                	je     c001695c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016953:	b0 01                	mov    al,0x1
c0016955:	e9 a2 01 00 00       	jmp    c0016afc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001695a:	66 90                	xchg   ax,ax
c001695c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016966:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001696e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016975:	88 c2                	mov    dl,al
c0016977:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001697c:	01 d0                	add    eax,edx
c001697e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016985:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001698b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016992:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016999:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001699e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00169a5:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	68 34 02 00 00       	push   0x234
c00169b4:	e8 00 0e ff ff       	call   c00077b9 <malloc>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00169c3:	83 ec 04             	sub    esp,0x4
c00169c6:	6a 00                	push   0x0
c00169c8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169cf:	50                   	push   eax
c00169d0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169d7:	e8 df d0 fe ff       	call   c0003abb <f_mount>
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169e6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00169ee:	74 1c                	je     c0016a0c <FAT::tryMount(LogicalDisk*, int)+0x120>
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169fa:	e8 da 0d ff ff       	call   c00077d9 <rfree>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	b0 00                	mov    al,0x0
c0016a04:	e9 f3 00 00 00       	jmp    c0016afc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a09:	8d 76 00             	lea    esi,[esi+0x0]
c0016a0c:	83 ec 04             	sub    esp,0x4
c0016a0f:	68 00 01 00 00       	push   0x100
c0016a14:	6a 00                	push   0x0
c0016a16:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a1d:	50                   	push   eax
c0016a1e:	e8 ad 9a fe ff       	call   c00004d0 <memset>
c0016a23:	83 c4 10             	add    esp,0x10
c0016a26:	83 ec 08             	sub    esp,0x8
c0016a29:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a30:	50                   	push   eax
c0016a31:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a38:	50                   	push   eax
c0016a39:	e8 82 9d fe ff       	call   c00007c0 <strcat>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	83 ec 08             	sub    esp,0x8
c0016a44:	68 0a f1 01 c0       	push   0xc001f10a
c0016a49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a50:	50                   	push   eax
c0016a51:	e8 6a 9d fe ff       	call   c00007c0 <strcat>
c0016a56:	83 c4 10             	add    esp,0x10
c0016a59:	83 ec 04             	sub    esp,0x4
c0016a5c:	6a 01                	push   0x1
c0016a5e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a65:	50                   	push   eax
c0016a66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a6a:	50                   	push   eax
c0016a6b:	e8 ad d0 fe ff       	call   c0003b1d <f_open>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a7a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a81:	85 c0                	test   eax,eax
c0016a83:	74 0b                	je     c0016a90 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a85:	78 31                	js     c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a87:	83 e8 04             	sub    eax,0x4
c0016a8a:	83 f8 01             	cmp    eax,0x1
c0016a8d:	77 29                	ja     c0016ab8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a8f:	90                   	nop
c0016a90:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a9f:	50                   	push   eax
c0016aa0:	e8 2b d8 fe ff       	call   c00042d0 <f_close>
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	90                   	nop
c0016aa9:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016ab1:	74 41                	je     c0016af4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016ab3:	eb 33                	jmp    c0016ae8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ac2:	e8 12 0d ff ff       	call   c00077d9 <rfree>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	83 ec 04             	sub    esp,0x4
c0016acd:	6a 00                	push   0x0
c0016acf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ad6:	50                   	push   eax
c0016ad7:	6a 00                	push   0x0
c0016ad9:	e8 dd cf fe ff       	call   c0003abb <f_mount>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	b0 00                	mov    al,0x0
c0016ae3:	eb 17                	jmp    c0016afc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ae8:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016aed:	40                   	inc    eax
c0016aee:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016af3:	90                   	nop
c0016af4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016afb:	90                   	nop
c0016afc:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b02:	c3                   	ret    
c0016b03:	90                   	nop

c0016b04 <FAT::allocateSwapfile(char const*, int)>:
c0016b04:	55                   	push   ebp
c0016b05:	57                   	push   edi
c0016b06:	56                   	push   esi
c0016b07:	53                   	push   ebx
c0016b08:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b0e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b19:	83 ec 0c             	sub    esp,0xc
c0016b1c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b23:	e8 91 0c ff ff       	call   c00077b9 <malloc>
c0016b28:	83 c4 10             	add    esp,0x10
c0016b2b:	89 c7                	mov    edi,eax
c0016b2d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016b32:	83 ec 04             	sub    esp,0x4
c0016b35:	50                   	push   eax
c0016b36:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b3d:	57                   	push   edi
c0016b3e:	e8 35 40 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b4d:	83 ec 04             	sub    esp,0x4
c0016b50:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b54:	50                   	push   eax
c0016b55:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b59:	50                   	push   eax
c0016b5a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b61:	e8 7e 43 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b70:	c1 e0 14             	shl    eax,0x14
c0016b73:	89 c7                	mov    edi,eax
c0016b75:	89 c5                	mov    ebp,eax
c0016b77:	c1 fd 1f             	sar    ebp,0x1f
c0016b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b82:	89 f9                	mov    ecx,edi
c0016b84:	31 c1                	xor    ecx,eax
c0016b86:	89 cb                	mov    ebx,ecx
c0016b88:	89 e9                	mov    ecx,ebp
c0016b8a:	31 d1                	xor    ecx,edx
c0016b8c:	89 ce                	mov    esi,ecx
c0016b8e:	89 f0                	mov    eax,esi
c0016b90:	09 d8                	or     eax,ebx
c0016b92:	0f 84 9c 00 00 00    	je     c0016c34 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ba2:	e8 09 42 ff ff       	call   c000adb0 <File::unlink()>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	83 ec 08             	sub    esp,0x8
c0016bad:	6a 12                	push   0x12
c0016baf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bb6:	e8 7d 40 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bc5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bcb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bd2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bd9:	c1 e0 14             	shl    eax,0x14
c0016bdc:	83 ec 04             	sub    esp,0x4
c0016bdf:	6a 01                	push   0x1
c0016be1:	50                   	push   eax
c0016be2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016be9:	e8 47 e5 fe ff       	call   c0005135 <f_expand>
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bfa:	83 c0 10             	add    eax,0x10
c0016bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bff:	83 ec 0c             	sub    esp,0xc
c0016c02:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c06:	52                   	push   edx
c0016c07:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c0b:	52                   	push   edx
c0016c0c:	6a 00                	push   0x0
c0016c0e:	68 00 04 00 00       	push   0x400
c0016c13:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c1a:	ff d0                	call   eax
c0016c1c:	83 c4 20             	add    esp,0x20
c0016c1f:	83 ec 0c             	sub    esp,0xc
c0016c22:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c29:	e8 68 40 ff ff       	call   c000ac96 <File::close()>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	8d 76 00             	lea    esi,[esi+0x0]
c0016c34:	83 ec 08             	sub    esp,0x8
c0016c37:	6a 01                	push   0x1
c0016c39:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c40:	e8 f3 3f ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c51:	83 c0 0c             	add    eax,0xc
c0016c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c5d:	52                   	push   edx
c0016c5e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c62:	52                   	push   edx
c0016c63:	6a 00                	push   0x0
c0016c65:	6a 04                	push   0x4
c0016c67:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c6e:	ff d0                	call   eax
c0016c70:	83 c4 20             	add    esp,0x20
c0016c73:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c7a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c80:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c87:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c8e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c91:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ca2:	e8 ef 3f ff ff       	call   c000ac96 <File::close()>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016cb1:	ba 00 00 00 00       	mov    edx,0x0
c0016cb6:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016cbc:	5b                   	pop    ebx
c0016cbd:	5e                   	pop    esi
c0016cbe:	5f                   	pop    edi
c0016cbf:	5d                   	pop    ebp
c0016cc0:	c3                   	ret    
c0016cc1:	90                   	nop
c0016cc2:	66 90                	xchg   ax,ax

c0016cc4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016cc4:	57                   	push   edi
c0016cc5:	56                   	push   esi
c0016cc6:	53                   	push   ebx
c0016cc7:	81 ec 50 02 00 00    	sub    esp,0x250
c0016ccd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016cd5:	74 0d                	je     c0016ce4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016cd7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016cdf:	75 0f                	jne    c0016cf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce4:	b8 04 00 00 00       	mov    eax,0x4
c0016ce9:	e9 36 01 00 00       	jmp    c0016e24 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016cee:	66 90                	xchg   ax,ax
c0016cf0:	83 ec 08             	sub    esp,0x8
c0016cf3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cfa:	50                   	push   eax
c0016cfb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d02:	e8 8c d8 fe ff       	call   c0004593 <f_readdir>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d11:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d22:	83 c0 16             	add    eax,0x16
c0016d25:	50                   	push   eax
c0016d26:	e8 15 98 fe ff       	call   c0000540 <strlen>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	ba 00 00 00 00       	mov    edx,0x0
c0016d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d37:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d3b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d42:	25 ff 00 00 00       	and    eax,0xff
c0016d47:	83 e0 10             	and    eax,0x10
c0016d4a:	74 08                	je     c0016d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d4c:	b8 02 00 00 00       	mov    eax,0x2
c0016d51:	eb 09                	jmp    c0016d5c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d53:	90                   	nop
c0016d54:	b8 01 00 00 00       	mov    eax,0x1
c0016d59:	8d 76 00             	lea    esi,[esi+0x0]
c0016d5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d60:	83 ec 08             	sub    esp,0x8
c0016d63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d6a:	83 c0 16             	add    eax,0x16
c0016d6d:	50                   	push   eax
c0016d6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d72:	83 c0 10             	add    eax,0x10
c0016d75:	50                   	push   eax
c0016d76:	e8 85 98 fe ff       	call   c0000600 <strcpy>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d85:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d90:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d97:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d9e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016da5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016dac:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016db3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016dba:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016dc1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016dc8:	89 c6                	mov    esi,eax
c0016dca:	89 d7                	mov    edi,edx
c0016dcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dce:	89 c8                	mov    eax,ecx
c0016dd0:	89 fa                	mov    edx,edi
c0016dd2:	89 f3                	mov    ebx,esi
c0016dd4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016ddb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016de2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016de9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016df0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016df6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016dfd:	84 c0                	test   al,al
c0016dff:	75 07                	jne    c0016e08 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e01:	b8 07 00 00 00       	mov    eax,0x7
c0016e06:	eb 1c                	jmp    c0016e24 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e08:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e0f:	85 c0                	test   eax,eax
c0016e11:	75 09                	jne    c0016e1c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e13:	b8 00 00 00 00       	mov    eax,0x0
c0016e18:	eb 0a                	jmp    c0016e24 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e1a:	66 90                	xchg   ax,ax
c0016e1c:	b8 01 00 00 00       	mov    eax,0x1
c0016e21:	8d 76 00             	lea    esi,[esi+0x0]
c0016e24:	81 c4 50 02 00 00    	add    esp,0x250
c0016e2a:	5b                   	pop    ebx
c0016e2b:	5e                   	pop    esi
c0016e2c:	5f                   	pop    edi
c0016e2d:	c3                   	ret    
c0016e2e:	66 90                	xchg   ax,ax

c0016e30 <FAT::read(void*, unsigned long, void*, int*)>:
c0016e30:	83 ec 1c             	sub    esp,0x1c
c0016e33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e38:	74 0a                	je     c0016e44 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e3a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e3f:	75 0b                	jne    c0016e4c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e41:	8d 76 00             	lea    esi,[esi+0x0]
c0016e44:	b8 04 00 00 00       	mov    eax,0x4
c0016e49:	eb 41                	jmp    c0016e8c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e4b:	90                   	nop
c0016e4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e50:	50                   	push   eax
c0016e51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e5d:	e8 86 cf fe ff       	call   c0003de8 <f_read>
c0016e62:	83 c4 10             	add    esp,0x10
c0016e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e6d:	89 c2                	mov    edx,eax
c0016e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e73:	89 10                	mov    DWORD PTR [eax],edx
c0016e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e79:	85 c0                	test   eax,eax
c0016e7b:	75 07                	jne    c0016e84 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e7d:	b8 00 00 00 00       	mov    eax,0x0
c0016e82:	eb 08                	jmp    c0016e8c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e84:	b8 01 00 00 00       	mov    eax,0x1
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]
c0016e8c:	83 c4 1c             	add    esp,0x1c
c0016e8f:	c3                   	ret    

c0016e90 <FAT::write(void*, unsigned long, void*, int*)>:
c0016e90:	83 ec 1c             	sub    esp,0x1c
c0016e93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e98:	74 0a                	je     c0016ea4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e9a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e9f:	75 0b                	jne    c0016eac <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea4:	b8 04 00 00 00       	mov    eax,0x4
c0016ea9:	eb 41                	jmp    c0016eec <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016eab:	90                   	nop
c0016eac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016eb0:	50                   	push   eax
c0016eb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016eb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016eb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ebd:	e8 25 d1 fe ff       	call   c0003fe7 <f_write>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ecd:	89 c2                	mov    edx,eax
c0016ecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed3:	89 10                	mov    DWORD PTR [eax],edx
c0016ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ed9:	85 c0                	test   eax,eax
c0016edb:	75 07                	jne    c0016ee4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016edd:	b8 00 00 00 00       	mov    eax,0x0
c0016ee2:	eb 08                	jmp    c0016eec <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ee4:	b8 01 00 00 00       	mov    eax,0x1
c0016ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eec:	83 c4 1c             	add    esp,0x1c
c0016eef:	c3                   	ret    

c0016ef0 <FAT::close(void*)>:
c0016ef0:	83 ec 1c             	sub    esp,0x1c
c0016ef3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ef8:	75 0a                	jne    c0016f04 <FAT::close(void*)+0x14>
c0016efa:	b8 04 00 00 00       	mov    eax,0x4
c0016eff:	eb 3f                	jmp    c0016f40 <FAT::close(void*)+0x50>
c0016f01:	8d 76 00             	lea    esi,[esi+0x0]
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f0b:	e8 c0 d3 fe ff       	call   c00042d0 <f_close>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f1e:	e8 a6 08 ff ff       	call   c00077c9 <free>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f2a:	85 c0                	test   eax,eax
c0016f2c:	75 0a                	jne    c0016f38 <FAT::close(void*)+0x48>
c0016f2e:	b8 00 00 00 00       	mov    eax,0x0
c0016f33:	eb 0b                	jmp    c0016f40 <FAT::close(void*)+0x50>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	b8 01 00 00 00       	mov    eax,0x1
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	83 c4 1c             	add    esp,0x1c
c0016f43:	c3                   	ret    

c0016f44 <FAT::closeDir(void*)>:
c0016f44:	83 ec 1c             	sub    esp,0x1c
c0016f47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f4c:	75 0a                	jne    c0016f58 <FAT::closeDir(void*)+0x14>
c0016f4e:	b8 04 00 00 00       	mov    eax,0x4
c0016f53:	eb 3f                	jmp    c0016f94 <FAT::closeDir(void*)+0x50>
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	83 ec 0c             	sub    esp,0xc
c0016f5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f5f:	e8 0d d6 fe ff       	call   c0004571 <f_closedir>
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6b:	83 ec 0c             	sub    esp,0xc
c0016f6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f72:	e8 52 08 ff ff       	call   c00077c9 <free>
c0016f77:	83 c4 10             	add    esp,0x10
c0016f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f7e:	85 c0                	test   eax,eax
c0016f80:	75 0a                	jne    c0016f8c <FAT::closeDir(void*)+0x48>
c0016f82:	b8 00 00 00 00       	mov    eax,0x0
c0016f87:	eb 0b                	jmp    c0016f94 <FAT::closeDir(void*)+0x50>
c0016f89:	8d 76 00             	lea    esi,[esi+0x0]
c0016f8c:	b8 01 00 00 00       	mov    eax,0x1
c0016f91:	8d 76 00             	lea    esi,[esi+0x0]
c0016f94:	83 c4 1c             	add    esp,0x1c
c0016f97:	c3                   	ret    

c0016f98 <FAT::seek(void*, unsigned long long)>:
c0016f98:	83 ec 2c             	sub    esp,0x2c
c0016f9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fa3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fab:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016fb0:	75 0a                	jne    c0016fbc <FAT::seek(void*, unsigned long long)+0x24>
c0016fb2:	b8 04 00 00 00       	mov    eax,0x4
c0016fb7:	eb 33                	jmp    c0016fec <FAT::seek(void*, unsigned long long)+0x54>
c0016fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fc0:	83 ec 08             	sub    esp,0x8
c0016fc3:	50                   	push   eax
c0016fc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fc8:	e8 32 d3 fe ff       	call   c00042ff <f_lseek>
c0016fcd:	83 c4 10             	add    esp,0x10
c0016fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd8:	85 c0                	test   eax,eax
c0016fda:	75 08                	jne    c0016fe4 <FAT::seek(void*, unsigned long long)+0x4c>
c0016fdc:	b8 00 00 00 00       	mov    eax,0x0
c0016fe1:	eb 09                	jmp    c0016fec <FAT::seek(void*, unsigned long long)+0x54>
c0016fe3:	90                   	nop
c0016fe4:	b8 01 00 00 00       	mov    eax,0x1
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	83 c4 2c             	add    esp,0x2c
c0016fef:	c3                   	ret    

c0016ff0 <fatWrapperReadDisk>:
c0016ff0:	53                   	push   ebx
c0016ff1:	83 ec 18             	sub    esp,0x18
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ffc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017000:	25 ff 00 00 00       	and    eax,0xff
c0017005:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c001700c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017010:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017014:	ba 00 00 00 00       	mov    edx,0x0
c0017019:	83 ec 0c             	sub    esp,0xc
c001701c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017020:	53                   	push   ebx
c0017021:	52                   	push   edx
c0017022:	50                   	push   eax
c0017023:	51                   	push   ecx
c0017024:	e8 ff 5c ff ff       	call   c000cd28 <LogicalDisk::read(unsigned long long, int, void*)>
c0017029:	83 c4 20             	add    esp,0x20
c001702c:	83 c4 18             	add    esp,0x18
c001702f:	5b                   	pop    ebx
c0017030:	c3                   	ret    
c0017031:	8d 76 00             	lea    esi,[esi+0x0]

c0017034 <fatWrapperWriteDisk>:
c0017034:	53                   	push   ebx
c0017035:	83 ec 18             	sub    esp,0x18
c0017038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017040:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017044:	25 ff 00 00 00       	and    eax,0xff
c0017049:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017050:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017054:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017058:	ba 00 00 00 00       	mov    edx,0x0
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017064:	53                   	push   ebx
c0017065:	52                   	push   edx
c0017066:	50                   	push   eax
c0017067:	51                   	push   ecx
c0017068:	e8 27 5d ff ff       	call   c000cd94 <LogicalDisk::write(unsigned long long, int, void*)>
c001706d:	83 c4 20             	add    esp,0x20
c0017070:	83 c4 18             	add    esp,0x18
c0017073:	5b                   	pop    ebx
c0017074:	c3                   	ret    
c0017075:	8d 76 00             	lea    esi,[esi+0x0]

c0017078 <fatWrapperIoctl>:
c0017078:	53                   	push   ebx
c0017079:	83 ec 28             	sub    esp,0x28
c001707c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017080:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017084:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017088:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001708c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017091:	75 35                	jne    c00170c8 <fatWrapperIoctl+0x50>
c0017093:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017097:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001709b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001709f:	25 ff 00 00 00       	and    eax,0xff
c00170a4:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00170ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170bb:	66 89 02             	mov    WORD PTR [edx],ax
c00170be:	b8 00 00 00 00       	mov    eax,0x0
c00170c3:	e9 c4 00 00 00       	jmp    c001718c <fatWrapperIoctl+0x114>
c00170c8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00170cd:	75 75                	jne    c0017144 <fatWrapperIoctl+0xcc>
c00170cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170db:	25 ff 00 00 00       	and    eax,0xff
c00170e0:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00170e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170ed:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170f3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00170f9:	89 c8                	mov    eax,ecx
c00170fb:	89 da                	mov    edx,ebx
c00170fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017101:	c1 e0 0a             	shl    eax,0xa
c0017104:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017108:	81 e1 ff 00 00 00    	and    ecx,0xff
c001710e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017115:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001711b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017121:	89 cb                	mov    ebx,ecx
c0017123:	c1 fb 1f             	sar    ebx,0x1f
c0017126:	53                   	push   ebx
c0017127:	51                   	push   ecx
c0017128:	52                   	push   edx
c0017129:	50                   	push   eax
c001712a:	e8 a1 50 00 00       	call   c001c1d0 <__udivdi3>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	89 c2                	mov    edx,eax
c0017134:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017138:	89 10                	mov    DWORD PTR [eax],edx
c001713a:	b8 00 00 00 00       	mov    eax,0x0
c001713f:	eb 4b                	jmp    c001718c <fatWrapperIoctl+0x114>
c0017141:	8d 76 00             	lea    esi,[esi+0x0]
c0017144:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017149:	75 09                	jne    c0017154 <fatWrapperIoctl+0xdc>
c001714b:	b8 00 00 00 00       	mov    eax,0x0
c0017150:	eb 3a                	jmp    c001718c <fatWrapperIoctl+0x114>
c0017152:	66 90                	xchg   ax,ax
c0017154:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017159:	75 19                	jne    c0017174 <fatWrapperIoctl+0xfc>
c001715b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001715f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017167:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001716d:	b8 00 00 00 00       	mov    eax,0x0
c0017172:	eb 18                	jmp    c001718c <fatWrapperIoctl+0x114>
c0017174:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017179:	75 09                	jne    c0017184 <fatWrapperIoctl+0x10c>
c001717b:	b8 00 00 00 00       	mov    eax,0x0
c0017180:	eb 0a                	jmp    c001718c <fatWrapperIoctl+0x114>
c0017182:	66 90                	xchg   ax,ax
c0017184:	b8 04 00 00 00       	mov    eax,0x4
c0017189:	8d 76 00             	lea    esi,[esi+0x0]
c001718c:	83 c4 28             	add    esp,0x28
c001718f:	5b                   	pop    ebx
c0017190:	c3                   	ret    
c0017191:	90                   	nop
c0017192:	66 90                	xchg   ax,ax

c0017194 <FAT::FAT()>:
c0017194:	83 ec 1c             	sub    esp,0x1c
c0017197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719b:	83 ec 0c             	sub    esp,0xc
c001719e:	50                   	push   eax
c001719f:	e8 80 37 ff ff       	call   c000a924 <Filesystem::Filesystem()>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	ba 20 f1 01 c0       	mov    edx,0xc001f120
c00171ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b0:	89 10                	mov    DWORD PTR [eax],edx
c00171b2:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00171bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00171c4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00171c9:	7f 15                	jg     c00171e0 <FAT::FAT()+0x4c>
c00171cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171cf:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c00171da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171de:	eb e4                	jmp    c00171c4 <FAT::FAT()+0x30>
c00171e0:	90                   	nop
c00171e1:	83 c4 1c             	add    esp,0x1c
c00171e4:	c3                   	ret    
c00171e5:	90                   	nop
c00171e6:	66 90                	xchg   ax,ax

c00171e8 <FAT::fixFilepath(char*)>:
c00171e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171ec:	8a 00                	mov    al,BYTE PTR [eax]
c00171ee:	3c 40                	cmp    al,0x40
c00171f0:	7e 2e                	jle    c0017220 <FAT::fixFilepath(char*)+0x38>
c00171f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f6:	8a 00                	mov    al,BYTE PTR [eax]
c00171f8:	83 e8 41             	sub    eax,0x41
c00171fb:	88 c2                	mov    dl,al
c00171fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017201:	88 10                	mov    BYTE PTR [eax],dl
c0017203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017207:	8a 00                	mov    al,BYTE PTR [eax]
c0017209:	0f be c0             	movsx  eax,al
c001720c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017213:	83 c0 30             	add    eax,0x30
c0017216:	88 c2                	mov    dl,al
c0017218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001721c:	88 10                	mov    BYTE PTR [eax],dl
c001721e:	66 90                	xchg   ax,ax
c0017220:	90                   	nop
c0017221:	c3                   	ret    
c0017222:	66 90                	xchg   ax,ax

c0017224 <FAT::open(char const*, void**, FileOpenMode)>:
c0017224:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001722a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017232:	74 0c                	je     c0017240 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017234:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001723c:	75 0e                	jne    c001724c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001723e:	66 90                	xchg   ax,ax
c0017240:	b8 04 00 00 00       	mov    eax,0x4
c0017245:	e9 0a 01 00 00       	jmp    c0017354 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001724a:	66 90                	xchg   ax,ax
c001724c:	83 ec 08             	sub    esp,0x8
c001724f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017256:	8d 44 24 14          	lea    eax,[esp+0x14]
c001725a:	50                   	push   eax
c001725b:	e8 a0 93 fe ff       	call   c0000600 <strcpy>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	83 ec 08             	sub    esp,0x8
c0017266:	8d 44 24 10          	lea    eax,[esp+0x10]
c001726a:	50                   	push   eax
c001726b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017272:	e8 71 ff ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c0017277:	83 c4 10             	add    esp,0x10
c001727a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017282:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017289:	83 e0 01             	and    eax,0x1
c001728c:	74 0a                	je     c0017298 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001728e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017296:	66 90                	xchg   ax,ax
c0017298:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001729f:	83 e0 04             	and    eax,0x4
c00172a2:	74 10                	je     c00172b4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00172a4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00172ac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172bb:	83 e0 02             	and    eax,0x2
c00172be:	74 08                	je     c00172c8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00172c0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172cf:	83 e0 08             	and    eax,0x8
c00172d2:	74 08                	je     c00172dc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00172d4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00172dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172e3:	83 e0 10             	and    eax,0x10
c00172e6:	74 08                	je     c00172f0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00172e8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00172f0:	83 ec 0c             	sub    esp,0xc
c00172f3:	68 28 02 00 00       	push   0x228
c00172f8:	e8 bc 04 ff ff       	call   c00077b9 <malloc>
c00172fd:	83 c4 10             	add    esp,0x10
c0017300:	89 c2                	mov    edx,eax
c0017302:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017309:	89 10                	mov    DWORD PTR [eax],edx
c001730b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017312:	31 d2                	xor    edx,edx
c0017314:	88 c2                	mov    dl,al
c0017316:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001731d:	8b 00                	mov    eax,DWORD PTR [eax]
c001731f:	83 ec 04             	sub    esp,0x4
c0017322:	52                   	push   edx
c0017323:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017327:	52                   	push   edx
c0017328:	50                   	push   eax
c0017329:	e8 ef c7 fe ff       	call   c0003b1d <f_open>
c001732e:	83 c4 10             	add    esp,0x10
c0017331:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017338:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017340:	74 0a                	je     c001734c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017342:	b8 01 00 00 00       	mov    eax,0x1
c0017347:	eb 0b                	jmp    c0017354 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017349:	8d 76 00             	lea    esi,[esi+0x0]
c001734c:	b8 00 00 00 00       	mov    eax,0x0
c0017351:	8d 76 00             	lea    esi,[esi+0x0]
c0017354:	81 c4 1c 01 00 00    	add    esp,0x11c
c001735a:	c3                   	ret    
c001735b:	90                   	nop

c001735c <FAT::openDir(char const*, void**)>:
c001735c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017362:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001736a:	74 0c                	je     c0017378 <FAT::openDir(char const*, void**)+0x1c>
c001736c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017374:	75 0e                	jne    c0017384 <FAT::openDir(char const*, void**)+0x28>
c0017376:	66 90                	xchg   ax,ax
c0017378:	b8 04 00 00 00       	mov    eax,0x4
c001737d:	e9 82 00 00 00       	jmp    c0017404 <FAT::openDir(char const*, void**)+0xa8>
c0017382:	66 90                	xchg   ax,ax
c0017384:	83 ec 08             	sub    esp,0x8
c0017387:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001738e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017392:	50                   	push   eax
c0017393:	e8 68 92 fe ff       	call   c0000600 <strcpy>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	83 ec 08             	sub    esp,0x8
c001739e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173a2:	50                   	push   eax
c00173a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173aa:	e8 39 fe ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	83 ec 0c             	sub    esp,0xc
c00173b5:	6a 30                	push   0x30
c00173b7:	e8 fd 03 ff ff       	call   c00077b9 <malloc>
c00173bc:	83 c4 10             	add    esp,0x10
c00173bf:	89 c2                	mov    edx,eax
c00173c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c8:	89 10                	mov    DWORD PTR [eax],edx
c00173ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d3:	83 ec 08             	sub    esp,0x8
c00173d6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00173da:	52                   	push   edx
c00173db:	50                   	push   eax
c00173dc:	e8 c5 d0 fe ff       	call   c00044a6 <f_opendir>
c00173e1:	83 c4 10             	add    esp,0x10
c00173e4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00173eb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00173f3:	74 07                	je     c00173fc <FAT::openDir(char const*, void**)+0xa0>
c00173f5:	b8 01 00 00 00       	mov    eax,0x1
c00173fa:	eb 08                	jmp    c0017404 <FAT::openDir(char const*, void**)+0xa8>
c00173fc:	b8 00 00 00 00       	mov    eax,0x0
c0017401:	8d 76 00             	lea    esi,[esi+0x0]
c0017404:	81 c4 1c 01 00 00    	add    esp,0x11c
c001740a:	c3                   	ret    
c001740b:	90                   	nop

c001740c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001740c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017412:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001741a:	75 0c                	jne    c0017428 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001741c:	b8 04 00 00 00       	mov    eax,0x4
c0017421:	e9 d6 00 00 00       	jmp    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017426:	66 90                	xchg   ax,ax
c0017428:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017430:	75 0a                	jne    c001743c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017432:	b8 04 00 00 00       	mov    eax,0x4
c0017437:	e9 c0 00 00 00       	jmp    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001743c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017444:	75 0a                	jne    c0017450 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017446:	b8 04 00 00 00       	mov    eax,0x4
c001744b:	e9 ac 00 00 00       	jmp    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017450:	83 ec 08             	sub    esp,0x8
c0017453:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001745a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017461:	50                   	push   eax
c0017462:	e8 99 91 fe ff       	call   c0000600 <strcpy>
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	83 ec 08             	sub    esp,0x8
c001746d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017474:	50                   	push   eax
c0017475:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001747c:	e8 67 fd ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001748b:	50                   	push   eax
c001748c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017493:	50                   	push   eax
c0017494:	e8 8c d1 fe ff       	call   c0004625 <f_stat>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00174a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00174aa:	85 c0                	test   eax,eax
c00174ac:	74 0a                	je     c00174b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00174ae:	83 f8 04             	cmp    eax,0x4
c00174b1:	74 39                	je     c00174ec <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00174b3:	eb 3f                	jmp    c00174f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00174bc:	25 ff 00 00 00       	and    eax,0xff
c00174c1:	83 e0 10             	and    eax,0x10
c00174c4:	0f 95 c2             	setne  dl
c00174c7:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00174ce:	88 10                	mov    BYTE PTR [eax],dl
c00174d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174d4:	ba 00 00 00 00       	mov    edx,0x0
c00174d9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00174e0:	89 01                	mov    DWORD PTR [ecx],eax
c00174e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174e5:	b8 00 00 00 00       	mov    eax,0x0
c00174ea:	eb 10                	jmp    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ec:	b8 02 00 00 00       	mov    eax,0x2
c00174f1:	eb 09                	jmp    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f3:	90                   	nop
c00174f4:	b8 01 00 00 00       	mov    eax,0x1
c00174f9:	8d 76 00             	lea    esi,[esi+0x0]
c00174fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017502:	c3                   	ret    
c0017503:	90                   	nop

c0017504 <FAT::unlink(char const*)>:
c0017504:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001750a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017512:	75 08                	jne    c001751c <FAT::unlink(char const*)+0x18>
c0017514:	b8 04 00 00 00       	mov    eax,0x4
c0017519:	eb 61                	jmp    c001757c <FAT::unlink(char const*)+0x78>
c001751b:	90                   	nop
c001751c:	83 ec 08             	sub    esp,0x8
c001751f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017526:	8d 44 24 18          	lea    eax,[esp+0x18]
c001752a:	50                   	push   eax
c001752b:	e8 d0 90 fe ff       	call   c0000600 <strcpy>
c0017530:	83 c4 10             	add    esp,0x10
c0017533:	83 ec 08             	sub    esp,0x8
c0017536:	8d 44 24 14          	lea    eax,[esp+0x14]
c001753a:	50                   	push   eax
c001753b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017542:	e8 a1 fc ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	83 ec 0c             	sub    esp,0xc
c001754d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017551:	50                   	push   eax
c0017552:	e8 33 d3 fe ff       	call   c000488a <f_unlink>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017561:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017568:	85 c0                	test   eax,eax
c001756a:	75 08                	jne    c0017574 <FAT::unlink(char const*)+0x70>
c001756c:	b8 00 00 00 00       	mov    eax,0x0
c0017571:	eb 09                	jmp    c001757c <FAT::unlink(char const*)+0x78>
c0017573:	90                   	nop
c0017574:	b8 01 00 00 00       	mov    eax,0x1
c0017579:	8d 76 00             	lea    esi,[esi+0x0]
c001757c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017582:	c3                   	ret    
c0017583:	90                   	nop

c0017584 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017584:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001758a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017591:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017598:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001759c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00175a0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00175a8:	75 0a                	jne    c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00175aa:	b8 04 00 00 00       	mov    eax,0x4
c00175af:	e9 54 01 00 00       	jmp    c0017708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00175b4:	83 ec 08             	sub    esp,0x8
c00175b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175be:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175c2:	50                   	push   eax
c00175c3:	e8 38 90 fe ff       	call   c0000600 <strcpy>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	83 ec 08             	sub    esp,0x8
c00175ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175d2:	50                   	push   eax
c00175d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175da:	e8 09 fc ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00175ea:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00175f2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175f6:	25 ff 00 00 00       	and    eax,0xff
c00175fb:	83 e0 01             	and    eax,0x1
c00175fe:	74 08                	je     c0017608 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017600:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017608:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001760c:	25 ff 00 00 00       	and    eax,0xff
c0017611:	83 e0 02             	and    eax,0x2
c0017614:	74 0a                	je     c0017620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017616:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001761e:	66 90                	xchg   ax,ax
c0017620:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017624:	25 ff 00 00 00       	and    eax,0xff
c0017629:	83 e0 04             	and    eax,0x4
c001762c:	74 0a                	je     c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001762e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017636:	66 90                	xchg   ax,ax
c0017638:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001763c:	25 ff 00 00 00       	and    eax,0xff
c0017641:	83 e0 08             	and    eax,0x8
c0017644:	74 0a                	je     c0017650 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017646:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001764e:	66 90                	xchg   ax,ax
c0017650:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017654:	25 ff 00 00 00       	and    eax,0xff
c0017659:	83 e0 01             	and    eax,0x1
c001765c:	74 0a                	je     c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001765e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017666:	66 90                	xchg   ax,ax
c0017668:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001766c:	25 ff 00 00 00       	and    eax,0xff
c0017671:	83 e0 02             	and    eax,0x2
c0017674:	74 0a                	je     c0017680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017676:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001767e:	66 90                	xchg   ax,ax
c0017680:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017684:	25 ff 00 00 00       	and    eax,0xff
c0017689:	83 e0 04             	and    eax,0x4
c001768c:	74 0a                	je     c0017698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001768e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017696:	66 90                	xchg   ax,ax
c0017698:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001769c:	25 ff 00 00 00       	and    eax,0xff
c00176a1:	83 e0 08             	and    eax,0x8
c00176a4:	74 0a                	je     c00176b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00176a6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00176ae:	66 90                	xchg   ax,ax
c00176b0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176b7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00176be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00176c5:	31 d2                	xor    edx,edx
c00176c7:	88 c2                	mov    dl,al
c00176c9:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176d0:	25 ff 00 00 00       	and    eax,0xff
c00176d5:	83 ec 04             	sub    esp,0x4
c00176d8:	52                   	push   edx
c00176d9:	50                   	push   eax
c00176da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176de:	50                   	push   eax
c00176df:	e8 19 d6 fe ff       	call   c0004cfd <f_chmod>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00176ee:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00176f5:	85 c0                	test   eax,eax
c00176f7:	75 07                	jne    c0017700 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00176f9:	b8 00 00 00 00       	mov    eax,0x0
c00176fe:	eb 08                	jmp    c0017708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017700:	b8 01 00 00 00       	mov    eax,0x1
c0017705:	8d 76 00             	lea    esi,[esi+0x0]
c0017708:	81 c4 2c 01 00 00    	add    esp,0x12c
c001770e:	c3                   	ret    
c001770f:	90                   	nop

c0017710 <FAT::rename(char const*, char const*)>:
c0017710:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017716:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001771e:	74 0c                	je     c001772c <FAT::rename(char const*, char const*)+0x1c>
c0017720:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017728:	75 0e                	jne    c0017738 <FAT::rename(char const*, char const*)+0x28>
c001772a:	66 90                	xchg   ax,ax
c001772c:	b8 04 00 00 00       	mov    eax,0x4
c0017731:	e9 9e 00 00 00       	jmp    c00177d4 <FAT::rename(char const*, char const*)+0xc4>
c0017736:	66 90                	xchg   ax,ax
c0017738:	83 ec 08             	sub    esp,0x8
c001773b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017742:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017749:	50                   	push   eax
c001774a:	e8 b1 8e fe ff       	call   c0000600 <strcpy>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	83 ec 08             	sub    esp,0x8
c0017755:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001775c:	50                   	push   eax
c001775d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017764:	e8 7f fa ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c0017769:	83 c4 10             	add    esp,0x10
c001776c:	83 ec 08             	sub    esp,0x8
c001776f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017776:	8d 44 24 18          	lea    eax,[esp+0x18]
c001777a:	50                   	push   eax
c001777b:	e8 80 8e fe ff       	call   c0000600 <strcpy>
c0017780:	83 c4 10             	add    esp,0x10
c0017783:	83 ec 08             	sub    esp,0x8
c0017786:	8d 44 24 14          	lea    eax,[esp+0x14]
c001778a:	50                   	push   eax
c001778b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017792:	e8 51 fa ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c0017797:	83 c4 10             	add    esp,0x10
c001779a:	83 ec 08             	sub    esp,0x8
c001779d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177a1:	50                   	push   eax
c00177a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177a9:	50                   	push   eax
c00177aa:	e8 98 d3 fe ff       	call   c0004b47 <f_rename>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00177b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00177c0:	85 c0                	test   eax,eax
c00177c2:	75 08                	jne    c00177cc <FAT::rename(char const*, char const*)+0xbc>
c00177c4:	b8 00 00 00 00       	mov    eax,0x0
c00177c9:	eb 09                	jmp    c00177d4 <FAT::rename(char const*, char const*)+0xc4>
c00177cb:	90                   	nop
c00177cc:	b8 01 00 00 00       	mov    eax,0x1
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00177da:	c3                   	ret    
c00177db:	90                   	nop

c00177dc <FAT::mkdir(char const*)>:
c00177dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00177ea:	75 08                	jne    c00177f4 <FAT::mkdir(char const*)+0x18>
c00177ec:	b8 04 00 00 00       	mov    eax,0x4
c00177f1:	eb 61                	jmp    c0017854 <FAT::mkdir(char const*)+0x78>
c00177f3:	90                   	nop
c00177f4:	83 ec 08             	sub    esp,0x8
c00177f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017802:	50                   	push   eax
c0017803:	e8 f8 8d fe ff       	call   c0000600 <strcpy>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	83 ec 08             	sub    esp,0x8
c001780e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017812:	50                   	push   eax
c0017813:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001781a:	e8 c9 f9 ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	83 ec 0c             	sub    esp,0xc
c0017825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017829:	50                   	push   eax
c001782a:	e8 7d d1 fe ff       	call   c00049ac <f_mkdir>
c001782f:	83 c4 10             	add    esp,0x10
c0017832:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017839:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017840:	85 c0                	test   eax,eax
c0017842:	75 08                	jne    c001784c <FAT::mkdir(char const*)+0x70>
c0017844:	b8 00 00 00 00       	mov    eax,0x0
c0017849:	eb 09                	jmp    c0017854 <FAT::mkdir(char const*)+0x78>
c001784b:	90                   	nop
c001784c:	b8 01 00 00 00       	mov    eax,0x1
c0017851:	8d 76 00             	lea    esi,[esi+0x0]
c0017854:	81 c4 1c 01 00 00    	add    esp,0x11c
c001785a:	c3                   	ret    
c001785b:	90                   	nop

c001785c <FAT::exists(char const*)>:
c001785c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017862:	83 ec 08             	sub    esp,0x8
c0017865:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001786c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017870:	50                   	push   eax
c0017871:	e8 8a 8d fe ff       	call   c0000600 <strcpy>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	83 ec 08             	sub    esp,0x8
c001787c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017880:	50                   	push   eax
c0017881:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017888:	e8 5b f9 ff ff       	call   c00171e8 <FAT::fixFilepath(char*)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	83 ec 08             	sub    esp,0x8
c0017893:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001789a:	50                   	push   eax
c001789b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001789f:	50                   	push   eax
c00178a0:	e8 80 cd fe ff       	call   c0004625 <f_stat>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00178af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00178b6:	85 c0                	test   eax,eax
c00178b8:	75 06                	jne    c00178c0 <FAT::exists(char const*)+0x64>
c00178ba:	b0 01                	mov    al,0x1
c00178bc:	eb 06                	jmp    c00178c4 <FAT::exists(char const*)+0x68>
c00178be:	66 90                	xchg   ax,ax
c00178c0:	b0 00                	mov    al,0x0
c00178c2:	66 90                	xchg   ax,ax
c00178c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00178ca:	c3                   	ret    
c00178cb:	90                   	nop

c00178cc <isoReadDiscSectorHelper>:
c00178cc:	83 ec 2c             	sub    esp,0x2c
c00178cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178d7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00178dc:	83 e8 41             	sub    eax,0x41
c00178df:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00178e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ea:	ba 00 00 00 00       	mov    edx,0x0
c00178ef:	83 ec 0c             	sub    esp,0xc
c00178f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178fa:	52                   	push   edx
c00178fb:	50                   	push   eax
c00178fc:	51                   	push   ecx
c00178fd:	e8 26 54 ff ff       	call   c000cd28 <LogicalDisk::read(unsigned long long, int, void*)>
c0017902:	83 c4 20             	add    esp,0x20
c0017905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017909:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001790e:	74 0c                	je     c001791c <isoReadDiscSectorHelper+0x50>
c0017910:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017914:	c1 e0 0b             	shl    eax,0xb
c0017917:	eb 0b                	jmp    c0017924 <isoReadDiscSectorHelper+0x58>
c0017919:	8d 76 00             	lea    esi,[esi+0x0]
c001791c:	b8 00 00 00 00       	mov    eax,0x0
c0017921:	8d 76 00             	lea    esi,[esi+0x0]
c0017924:	83 c4 2c             	add    esp,0x2c
c0017927:	c3                   	ret    

c0017928 <iso_kprintf>:
c0017928:	83 ec 0c             	sub    esp,0xc
c001792b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017930:	83 ec 08             	sub    esp,0x8
c0017933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017937:	50                   	push   eax
c0017938:	e8 f9 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	90                   	nop
c0017941:	83 c4 0c             	add    esp,0xc
c0017944:	c3                   	ret    
c0017945:	8d 76 00             	lea    esi,[esi+0x0]

c0017948 <iso_kprintfd>:
c0017948:	83 ec 0c             	sub    esp,0xc
c001794b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017950:	83 ec 08             	sub    esp,0x8
c0017953:	68 80 f1 01 c0       	push   0xc001f180
c0017958:	50                   	push   eax
c0017959:	e8 d8 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001796a:	83 ec 08             	sub    esp,0x8
c001796d:	52                   	push   edx
c001796e:	50                   	push   eax
c001796f:	e8 7c 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017974:	83 c4 10             	add    esp,0x10
c0017977:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	68 01 f0 01 c0       	push   0xc001f001
c0017984:	50                   	push   eax
c0017985:	e8 ac 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	90                   	nop
c001798e:	83 c4 0c             	add    esp,0xc
c0017991:	c3                   	ret    

c0017992 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017992:	b8 08 00 00 00       	mov    eax,0x8
c0017997:	c3                   	ret    

c0017998 <ISO9660::getName()>:
c0017998:	b8 83 f1 01 c0       	mov    eax,0xc001f183
c001799d:	c3                   	ret    

c001799e <ISO9660::closeDir(void*)>:
c001799e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179a7:	90                   	nop

c00179a8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179a8:	b8 01 00 00 00       	mov    eax,0x1
c00179ad:	c3                   	ret    

c00179ae <ISO9660::unlink(char const*)>:
c00179ae:	b8 01 00 00 00       	mov    eax,0x1
c00179b3:	c3                   	ret    

c00179b4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179b4:	b8 03 00 00 00       	mov    eax,0x3
c00179b9:	c3                   	ret    

c00179ba <ISO9660::rename(char const*, char const*)>:
c00179ba:	b8 01 00 00 00       	mov    eax,0x1
c00179bf:	c3                   	ret    

c00179c0 <ISO9660::mkdir(char const*)>:
c00179c0:	b8 01 00 00 00       	mov    eax,0x1
c00179c5:	c3                   	ret    

c00179c6 <ISO9660::~ISO9660()>:
c00179c6:	83 ec 0c             	sub    esp,0xc
c00179c9:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c00179ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d2:	89 10                	mov    DWORD PTR [eax],edx
c00179d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	50                   	push   eax
c00179dc:	e8 67 2f ff ff       	call   c000a948 <Filesystem::~Filesystem()>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	90                   	nop
c00179e5:	83 c4 0c             	add    esp,0xc
c00179e8:	c3                   	ret    
c00179e9:	90                   	nop

c00179ea <ISO9660::~ISO9660()>:
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	83 ec 0c             	sub    esp,0xc
c00179f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f4:	e8 cd ff ff ff       	call   c00179c6 <ISO9660::~ISO9660()>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	83 ec 08             	sub    esp,0x8
c00179ff:	6a 08                	push   0x8
c0017a01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a05:	e8 03 2b ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	83 c4 0c             	add    esp,0xc
c0017a10:	c3                   	ret    
c0017a11:	90                   	nop

c0017a12 <ISO9660::exists(char const*)>:
c0017a12:	83 ec 18             	sub    esp,0x18
c0017a15:	68 9e f1 01 c0       	push   0xc001f19e
c0017a1a:	e8 64 88 ff ff       	call   c0010283 <KePanic(char const*)>
c0017a1f:	31 c0                	xor    eax,eax
c0017a21:	83 c4 1c             	add    esp,0x1c
c0017a24:	c3                   	ret    
c0017a25:	90                   	nop

c0017a26 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a26:	56                   	push   esi
c0017a27:	53                   	push   ebx
c0017a28:	50                   	push   eax
c0017a29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a31:	85 db                	test   ebx,ebx
c0017a33:	0f 84 82 00 00 00    	je     c0017abb <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a39:	85 f6                	test   esi,esi
c0017a3b:	74 7e                	je     c0017abb <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a3d:	ba 03 00 00 00       	mov    edx,0x3
c0017a42:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a47:	75 77                	jne    c0017ac0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a4c:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a52:	74 34                	je     c0017a88 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	50                   	push   eax
c0017a58:	e8 62 ed fe ff       	call   c00067bf <init_percd>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	ba 0b 00 00 00       	mov    edx,0xb
c0017a65:	40                   	inc    eax
c0017a66:	74 58                	je     c0017ac0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a68:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a6f:	74 10                	je     c0017a81 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017a71:	83 ec 0c             	sub    esp,0xc
c0017a74:	68 bc f1 01 c0       	push   0xc001f1bc
c0017a79:	e8 05 88 ff ff       	call   c0010283 <KePanic(char const*)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a83:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a88:	83 ec 0c             	sub    esp,0xc
c0017a8b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a92:	83 c3 03             	add    ebx,0x3
c0017a95:	50                   	push   eax
c0017a96:	e8 24 ed fe ff       	call   c00067bf <init_percd>
c0017a9b:	59                   	pop    ecx
c0017a9c:	58                   	pop    eax
c0017a9d:	6a 00                	push   0x0
c0017a9f:	53                   	push   ebx
c0017aa0:	e8 58 e8 fe ff       	call   c00062fd <iso_open>
c0017aa5:	83 c4 10             	add    esp,0x10
c0017aa8:	ba 01 00 00 00       	mov    edx,0x1
c0017aad:	83 f8 ff             	cmp    eax,0xffffffff
c0017ab0:	74 0e                	je     c0017ac0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017ab2:	83 c0 64             	add    eax,0x64
c0017ab5:	31 d2                	xor    edx,edx
c0017ab7:	89 06                	mov    DWORD PTR [esi],eax
c0017ab9:	eb 05                	jmp    c0017ac0 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017abb:	ba 04 00 00 00       	mov    edx,0x4
c0017ac0:	89 d0                	mov    eax,edx
c0017ac2:	5a                   	pop    edx
c0017ac3:	5b                   	pop    ebx
c0017ac4:	5e                   	pop    esi
c0017ac5:	c3                   	ret    

c0017ac6 <ISO9660::openDir(char const*, void**)>:
c0017ac6:	56                   	push   esi
c0017ac7:	53                   	push   ebx
c0017ac8:	50                   	push   eax
c0017ac9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017acd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ad1:	85 db                	test   ebx,ebx
c0017ad3:	74 76                	je     c0017b4b <ISO9660::openDir(char const*, void**)+0x85>
c0017ad5:	85 f6                	test   esi,esi
c0017ad7:	74 72                	je     c0017b4b <ISO9660::openDir(char const*, void**)+0x85>
c0017ad9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017adc:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017ae2:	74 34                	je     c0017b18 <ISO9660::openDir(char const*, void**)+0x52>
c0017ae4:	83 ec 0c             	sub    esp,0xc
c0017ae7:	50                   	push   eax
c0017ae8:	e8 d2 ec fe ff       	call   c00067bf <init_percd>
c0017aed:	83 c4 10             	add    esp,0x10
c0017af0:	ba 0b 00 00 00       	mov    edx,0xb
c0017af5:	40                   	inc    eax
c0017af6:	74 58                	je     c0017b50 <ISO9660::openDir(char const*, void**)+0x8a>
c0017af8:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017aff:	74 10                	je     c0017b11 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b01:	83 ec 0c             	sub    esp,0xc
c0017b04:	68 bc f1 01 c0       	push   0xc001f1bc
c0017b09:	e8 75 87 ff ff       	call   c0010283 <KePanic(char const*)>
c0017b0e:	83 c4 10             	add    esp,0x10
c0017b11:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b13:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017b18:	83 ec 0c             	sub    esp,0xc
c0017b1b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017b22:	83 c3 03             	add    ebx,0x3
c0017b25:	50                   	push   eax
c0017b26:	e8 94 ec fe ff       	call   c00067bf <init_percd>
c0017b2b:	59                   	pop    ecx
c0017b2c:	58                   	pop    eax
c0017b2d:	6a 01                	push   0x1
c0017b2f:	53                   	push   ebx
c0017b30:	e8 c8 e7 fe ff       	call   c00062fd <iso_open>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	ba 01 00 00 00       	mov    edx,0x1
c0017b3d:	83 f8 ff             	cmp    eax,0xffffffff
c0017b40:	74 0e                	je     c0017b50 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b42:	83 c0 64             	add    eax,0x64
c0017b45:	31 d2                	xor    edx,edx
c0017b47:	89 06                	mov    DWORD PTR [esi],eax
c0017b49:	eb 05                	jmp    c0017b50 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b4b:	ba 04 00 00 00       	mov    edx,0x4
c0017b50:	89 d0                	mov    eax,edx
c0017b52:	5a                   	pop    edx
c0017b53:	5b                   	pop    ebx
c0017b54:	5e                   	pop    esi
c0017b55:	c3                   	ret    

c0017b56 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b56:	53                   	push   ebx
c0017b57:	83 ec 08             	sub    esp,0x8
c0017b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b62:	85 c0                	test   eax,eax
c0017b64:	74 25                	je     c0017b8b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b66:	85 db                	test   ebx,ebx
c0017b68:	74 21                	je     c0017b8b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b6a:	83 e8 64             	sub    eax,0x64
c0017b6d:	52                   	push   edx
c0017b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b76:	50                   	push   eax
c0017b77:	e8 29 e8 fe ff       	call   c00063a5 <iso_read>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	89 03                	mov    DWORD PTR [ebx],eax
c0017b81:	09 d0                	or     eax,edx
c0017b83:	0f 94 c0             	sete   al
c0017b86:	0f b6 c0             	movzx  eax,al
c0017b89:	eb 05                	jmp    c0017b90 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b8b:	b8 04 00 00 00       	mov    eax,0x4
c0017b90:	83 c4 08             	add    esp,0x8
c0017b93:	5b                   	pop    ebx
c0017b94:	c3                   	ret    
c0017b95:	90                   	nop

c0017b96 <ISO9660::seek(void*, unsigned long long)>:
c0017b96:	57                   	push   edi
c0017b97:	56                   	push   esi
c0017b98:	b8 04 00 00 00       	mov    eax,0x4
c0017b9d:	51                   	push   ecx
c0017b9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ba6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017baa:	85 d2                	test   edx,edx
c0017bac:	74 1c                	je     c0017bca <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bae:	6a 00                	push   0x0
c0017bb0:	83 ea 64             	sub    edx,0x64
c0017bb3:	57                   	push   edi
c0017bb4:	56                   	push   esi
c0017bb5:	52                   	push   edx
c0017bb6:	e8 00 e9 fe ff       	call   c00064bb <iso_seek>
c0017bbb:	83 c4 10             	add    esp,0x10
c0017bbe:	31 f0                	xor    eax,esi
c0017bc0:	31 fa                	xor    edx,edi
c0017bc2:	09 d0                	or     eax,edx
c0017bc4:	0f 95 c0             	setne  al
c0017bc7:	0f b6 c0             	movzx  eax,al
c0017bca:	5a                   	pop    edx
c0017bcb:	5e                   	pop    esi
c0017bcc:	5f                   	pop    edi
c0017bcd:	c3                   	ret    

c0017bce <ISO9660::tell(void*, unsigned long long*)>:
c0017bce:	53                   	push   ebx
c0017bcf:	83 ec 08             	sub    esp,0x8
c0017bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bd6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bda:	85 c0                	test   eax,eax
c0017bdc:	74 1c                	je     c0017bfa <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bde:	85 db                	test   ebx,ebx
c0017be0:	74 18                	je     c0017bfa <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	83 e8 64             	sub    eax,0x64
c0017be8:	50                   	push   eax
c0017be9:	e8 51 e9 fe ff       	call   c000653f <iso_tell>
c0017bee:	83 c4 10             	add    esp,0x10
c0017bf1:	89 03                	mov    DWORD PTR [ebx],eax
c0017bf3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017bf6:	31 c0                	xor    eax,eax
c0017bf8:	eb 05                	jmp    c0017bff <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017bfa:	b8 04 00 00 00       	mov    eax,0x4
c0017bff:	83 c4 08             	add    esp,0x8
c0017c02:	5b                   	pop    ebx
c0017c03:	c3                   	ret    

c0017c04 <ISO9660::stat(void*, unsigned long long*)>:
c0017c04:	53                   	push   ebx
c0017c05:	83 ec 08             	sub    esp,0x8
c0017c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c10:	85 c0                	test   eax,eax
c0017c12:	74 20                	je     c0017c34 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c14:	85 db                	test   ebx,ebx
c0017c16:	74 1c                	je     c0017c34 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c18:	83 ec 0c             	sub    esp,0xc
c0017c1b:	83 e8 64             	sub    eax,0x64
c0017c1e:	50                   	push   eax
c0017c1f:	e8 4c e9 fe ff       	call   c0006570 <iso_total>
c0017c24:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c2b:	89 03                	mov    DWORD PTR [ebx],eax
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	31 c0                	xor    eax,eax
c0017c32:	eb 05                	jmp    c0017c39 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c34:	b8 04 00 00 00       	mov    eax,0x4
c0017c39:	83 c4 08             	add    esp,0x8
c0017c3c:	5b                   	pop    ebx
c0017c3d:	c3                   	ret    

c0017c3e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c3e:	55                   	push   ebp
c0017c3f:	57                   	push   edi
c0017c40:	56                   	push   esi
c0017c41:	53                   	push   ebx
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c49:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c4d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c51:	85 ff                	test   edi,edi
c0017c53:	0f 94 c2             	sete   dl
c0017c56:	85 f6                	test   esi,esi
c0017c58:	0f 94 c0             	sete   al
c0017c5b:	08 c2                	or     dl,al
c0017c5d:	0f 85 9e 00 00 00    	jne    c0017d01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c63:	85 db                	test   ebx,ebx
c0017c65:	0f 84 96 00 00 00    	je     c0017d01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c6b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c6e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c74:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c7b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c7e:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c84:	74 34                	je     c0017cba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	50                   	push   eax
c0017c8a:	e8 30 eb fe ff       	call   c00067bf <init_percd>
c0017c8f:	83 c4 10             	add    esp,0x10
c0017c92:	ba 0b 00 00 00       	mov    edx,0xb
c0017c97:	40                   	inc    eax
c0017c98:	74 6c                	je     c0017d06 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c9a:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017ca1:	74 10                	je     c0017cb3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017ca3:	83 ec 0c             	sub    esp,0xc
c0017ca6:	68 bc f1 01 c0       	push   0xc001f1bc
c0017cab:	e8 d3 85 ff ff       	call   c0010283 <KePanic(char const*)>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	8a 03                	mov    al,BYTE PTR [ebx]
c0017cb5:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017cba:	83 c3 03             	add    ebx,0x3
c0017cbd:	52                   	push   edx
c0017cbe:	52                   	push   edx
c0017cbf:	6a 00                	push   0x0
c0017cc1:	53                   	push   ebx
c0017cc2:	e8 36 e6 fe ff       	call   c00062fd <iso_open>
c0017cc7:	83 c4 10             	add    esp,0x10
c0017cca:	89 c5                	mov    ebp,eax
c0017ccc:	83 f8 ff             	cmp    eax,0xffffffff
c0017ccf:	75 0f                	jne    c0017ce0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017cd1:	50                   	push   eax
c0017cd2:	50                   	push   eax
c0017cd3:	6a 01                	push   0x1
c0017cd5:	53                   	push   ebx
c0017cd6:	e8 22 e6 fe ff       	call   c00062fd <iso_open>
c0017cdb:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cde:	eb 1a                	jmp    c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	50                   	push   eax
c0017ce4:	e8 87 e8 fe ff       	call   c0006570 <iso_total>
c0017ce9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cf0:	89 06                	mov    DWORD PTR [esi],eax
c0017cf2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cf5:	e8 8d e6 fe ff       	call   c0006387 <iso_close>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	31 d2                	xor    edx,edx
c0017cff:	eb 05                	jmp    c0017d06 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d01:	ba 04 00 00 00       	mov    edx,0x4
c0017d06:	83 c4 0c             	add    esp,0xc
c0017d09:	89 d0                	mov    eax,edx
c0017d0b:	5b                   	pop    ebx
c0017d0c:	5e                   	pop    esi
c0017d0d:	5f                   	pop    edi
c0017d0e:	5d                   	pop    ebp
c0017d0f:	c3                   	ret    

c0017d10 <ISO9660::close(void*)>:
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	b8 04 00 00 00       	mov    eax,0x4
c0017d18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d1c:	85 d2                	test   edx,edx
c0017d1e:	74 11                	je     c0017d31 <ISO9660::close(void*)+0x21>
c0017d20:	83 ec 0c             	sub    esp,0xc
c0017d23:	83 ea 64             	sub    edx,0x64
c0017d26:	52                   	push   edx
c0017d27:	e8 5b e6 fe ff       	call   c0006387 <iso_close>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	31 c0                	xor    eax,eax
c0017d31:	83 c4 0c             	add    esp,0xc
c0017d34:	c3                   	ret    
c0017d35:	90                   	nop

c0017d36 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d36:	55                   	push   ebp
c0017d37:	57                   	push   edi
c0017d38:	56                   	push   esi
c0017d39:	53                   	push   ebx
c0017d3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d40:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d47:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d4e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d55:	85 c0                	test   eax,eax
c0017d57:	0f 84 96 00 00 00    	je     c0017df3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d5d:	85 db                	test   ebx,ebx
c0017d5f:	0f 84 8e 00 00 00    	je     c0017df3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	83 e8 64             	sub    eax,0x64
c0017d6b:	50                   	push   eax
c0017d6c:	e8 50 e8 fe ff       	call   c00065c1 <iso_readdir>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	89 c6                	mov    esi,eax
c0017d76:	85 c0                	test   eax,eax
c0017d78:	75 18                	jne    c0017d92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d7a:	52                   	push   edx
c0017d7b:	68 10 01 00 00       	push   0x110
c0017d80:	6a 00                	push   0x0
c0017d82:	57                   	push   edi
c0017d83:	e8 48 87 fe ff       	call   c00004d0 <memset>
c0017d88:	83 c4 10             	add    esp,0x10
c0017d8b:	b8 01 00 00 00       	mov    eax,0x1
c0017d90:	eb 66                	jmp    c0017df8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d92:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d98:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d9b:	83 ec 0c             	sub    esp,0xc
c0017d9e:	55                   	push   ebp
c0017d9f:	e8 9c 87 fe ff       	call   c0000540 <strlen>
c0017da4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017db7:	75 0a                	jne    c0017dc3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017db9:	b8 02 00 00 00       	mov    eax,0x2
c0017dbe:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017dc1:	74 05                	je     c0017dc8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017dc3:	b8 01 00 00 00       	mov    eax,0x1
c0017dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dcc:	50                   	push   eax
c0017dcd:	50                   	push   eax
c0017dce:	55                   	push   ebp
c0017dcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dd3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dd7:	50                   	push   eax
c0017dd8:	e8 23 88 fe ff       	call   c0000600 <strcpy>
c0017ddd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017de4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017de6:	31 c0                	xor    eax,eax
c0017de8:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	eb 05                	jmp    c0017df8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017df3:	b8 04 00 00 00       	mov    eax,0x4
c0017df8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017dfe:	5b                   	pop    ebx
c0017dff:	5e                   	pop    esi
c0017e00:	5f                   	pop    edi
c0017e01:	5d                   	pop    ebp
c0017e02:	c3                   	ret    

c0017e03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e03:	57                   	push   edi
c0017e04:	56                   	push   esi
c0017e05:	53                   	push   ebx
c0017e06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e0a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e12:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017e18:	75 08                	jne    c0017e22 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e1a:	38 1d f0 fb 01 c0    	cmp    BYTE PTR ds:0xc001fbf0,bl
c0017e20:	74 4a                	je     c0017e6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e22:	83 ec 0c             	sub    esp,0xc
c0017e25:	31 d2                	xor    edx,edx
c0017e27:	68 40 53 02 c0       	push   0xc0025340
c0017e2c:	0f be c3             	movsx  eax,bl
c0017e2f:	6a 01                	push   0x1
c0017e31:	52                   	push   edx
c0017e32:	56                   	push   esi
c0017e33:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017e3a:	e8 e9 4e ff ff       	call   c000cd28 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e3f:	83 c4 20             	add    esp,0x20
c0017e42:	85 c0                	test   eax,eax
c0017e44:	75 0e                	jne    c0017e54 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e46:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017e4c:	88 1d f0 fb 01 c0    	mov    BYTE PTR ds:0xc001fbf0,bl
c0017e52:	eb 18                	jmp    c0017e6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e54:	50                   	push   eax
c0017e55:	68 00 08 00 00       	push   0x800
c0017e5a:	6a 00                	push   0x0
c0017e5c:	57                   	push   edi
c0017e5d:	e8 6e 86 fe ff       	call   c00004d0 <memset>
c0017e62:	83 c4 10             	add    esp,0x10
c0017e65:	b8 01 00 00 00       	mov    eax,0x1
c0017e6a:	eb 0e                	jmp    c0017e7a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e6c:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017e71:	b9 00 08 00 00       	mov    ecx,0x800
c0017e76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e78:	31 c0                	xor    eax,eax
c0017e7a:	5b                   	pop    ebx
c0017e7b:	5e                   	pop    esi
c0017e7c:	5f                   	pop    edi
c0017e7d:	c3                   	ret    

c0017e7e <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e7e:	53                   	push   ebx
c0017e7f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e85:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017e8f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e96:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e99:	0f be db             	movsx  ebx,bl
c0017e9c:	53                   	push   ebx
c0017e9d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ea1:	50                   	push   eax
c0017ea2:	6a 10                	push   0x10
c0017ea4:	e8 5a ff ff ff       	call   c0017e03 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ea9:	83 c4 10             	add    esp,0x10
c0017eac:	31 d2                	xor    edx,edx
c0017eae:	85 c0                	test   eax,eax
c0017eb0:	75 33                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017eb7:	75 2c                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ebe:	75 25                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017ec5:	75 1e                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ecc:	75 17                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ece:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ed3:	75 10                	jne    c0017ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ed5:	83 ec 0c             	sub    esp,0xc
c0017ed8:	53                   	push   ebx
c0017ed9:	e8 e1 e8 fe ff       	call   c00067bf <init_percd>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	40                   	inc    eax
c0017ee2:	0f 95 c2             	setne  dl
c0017ee5:	88 d0                	mov    al,dl
c0017ee7:	81 c4 08 08 00 00    	add    esp,0x808
c0017eed:	5b                   	pop    ebx
c0017eee:	c3                   	ret    
c0017eef:	90                   	nop

c0017ef0 <ISO9660::ISO9660()>:
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ef7:	83 ec 0c             	sub    esp,0xc
c0017efa:	50                   	push   eax
c0017efb:	e8 24 2a ff ff       	call   c000a924 <Filesystem::Filesystem()>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c0017f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0c:	89 10                	mov    DWORD PTR [eax],edx
c0017f0e:	e8 ae e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017f13:	90                   	nop
c0017f14:	83 c4 0c             	add    esp,0xc
c0017f17:	c3                   	ret    

c0017f18 <SoundCard::beginPlayback()>:
c0017f18:	c7 44 24 04 34 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f234
c0017f20:	e9 5e 83 ff ff       	jmp    c0010283 <KePanic(char const*)>
c0017f25:	90                   	nop

c0017f26 <SoundCard::stopPlayback()>:
c0017f26:	c7 44 24 04 34 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f234
c0017f2e:	e9 50 83 ff ff       	jmp    c0010283 <KePanic(char const*)>
c0017f33:	90                   	nop

c0017f34 <SoundCard::SoundCard(char const*)>:
c0017f34:	83 ec 1c             	sub    esp,0x1c
c0017f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3b:	83 ec 08             	sub    esp,0x8
c0017f3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f42:	50                   	push   eax
c0017f43:	e8 90 3c ff ff       	call   c000bbd8 <Device::Device(char const*)>
c0017f48:	83 c4 10             	add    esp,0x10
c0017f4b:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c0017f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f54:	89 10                	mov    DWORD PTR [eax],edx
c0017f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f73:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f81:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fa1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fa6:	7f 19                	jg     c0017fc1 <SoundCard::SoundCard(char const*)+0x8d>
c0017fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fb0:	83 c2 54             	add    edx,0x54
c0017fb3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fbb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fbf:	eb e0                	jmp    c0017fa1 <SoundCard::SoundCard(char const*)+0x6d>
c0017fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fcc:	90                   	nop
c0017fcd:	83 c4 1c             	add    esp,0x1c
c0017fd0:	c3                   	ret    
c0017fd1:	90                   	nop

c0017fd2 <SoundCard::~SoundCard()>:
c0017fd2:	83 ec 0c             	sub    esp,0xc
c0017fd5:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c0017fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fde:	89 10                	mov    DWORD PTR [eax],edx
c0017fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe4:	83 ec 0c             	sub    esp,0xc
c0017fe7:	50                   	push   eax
c0017fe8:	e8 55 39 ff ff       	call   c000b942 <Device::~Device()>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	90                   	nop
c0017ff1:	83 c4 0c             	add    esp,0xc
c0017ff4:	c3                   	ret    
c0017ff5:	90                   	nop

c0017ff6 <SoundCard::~SoundCard()>:
c0017ff6:	83 ec 0c             	sub    esp,0xc
c0017ff9:	83 ec 0c             	sub    esp,0xc
c0017ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018000:	e8 cd ff ff ff       	call   c0017fd2 <SoundCard::~SoundCard()>
c0018005:	83 c4 10             	add    esp,0x10
c0018008:	83 ec 08             	sub    esp,0x8
c001800b:	68 e8 01 00 00       	push   0x1e8
c0018010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018014:	e8 f4 24 ff ff       	call   c000a50d <operator delete(void*, unsigned long)>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	83 c4 0c             	add    esp,0xc
c001801f:	c3                   	ret    

c0018020 <SoundCard::configureRates(int, int, int)>:
c0018020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018024:	31 c0                	xor    eax,eax
c0018026:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001802d:	75 20                	jne    c001804f <SoundCard::configureRates(int, int, int)+0x2f>
c001802f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018033:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001803d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018047:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001804d:	b0 01                	mov    al,0x1
c001804f:	c3                   	ret    

c0018050 <SoundCard::getSamples16(int, short*)>:
c0018050:	55                   	push   ebp
c0018051:	57                   	push   edi
c0018052:	31 ff                	xor    edi,edi
c0018054:	56                   	push   esi
c0018055:	53                   	push   ebx
c0018056:	31 db                	xor    ebx,ebx
c0018058:	83 ec 10             	sub    esp,0x10
c001805b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001805f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018063:	8d 04 36             	lea    eax,[esi+esi*1]
c0018066:	50                   	push   eax
c0018067:	6a 00                	push   0x0
c0018069:	55                   	push   ebp
c001806a:	e8 61 84 fe ff       	call   c00004d0 <memset>
c001806f:	83 c4 10             	add    esp,0x10
c0018072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018076:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001807d:	85 c0                	test   eax,eax
c001807f:	74 1b                	je     c001809c <SoundCard::getSamples16(int, short*)+0x4c>
c0018081:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018085:	75 15                	jne    c001809c <SoundCard::getSamples16(int, short*)+0x4c>
c0018087:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001808b:	55                   	push   ebp
c001808c:	56                   	push   esi
c001808d:	50                   	push   eax
c001808e:	e8 ed 02 00 00       	call   c0018380 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018093:	83 c4 10             	add    esp,0x10
c0018096:	39 c7                	cmp    edi,eax
c0018098:	7d 02                	jge    c001809c <SoundCard::getSamples16(int, short*)+0x4c>
c001809a:	89 c7                	mov    edi,eax
c001809c:	43                   	inc    ebx
c001809d:	83 fb 20             	cmp    ebx,0x20
c00180a0:	75 d0                	jne    c0018072 <SoundCard::getSamples16(int, short*)+0x22>
c00180a2:	83 c4 0c             	add    esp,0xc
c00180a5:	89 f8                	mov    eax,edi
c00180a7:	5b                   	pop    ebx
c00180a8:	5e                   	pop    esi
c00180a9:	5f                   	pop    edi
c00180aa:	5d                   	pop    ebp
c00180ab:	c3                   	ret    

c00180ac <SoundCard::getSamples32(int, int*)>:
c00180ac:	55                   	push   ebp
c00180ad:	57                   	push   edi
c00180ae:	31 ff                	xor    edi,edi
c00180b0:	56                   	push   esi
c00180b1:	31 f6                	xor    esi,esi
c00180b3:	53                   	push   ebx
c00180b4:	83 ec 10             	sub    esp,0x10
c00180b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180bb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180c3:	c1 e0 02             	shl    eax,0x2
c00180c6:	50                   	push   eax
c00180c7:	6a 00                	push   0x0
c00180c9:	55                   	push   ebp
c00180ca:	e8 01 84 fe ff       	call   c00004d0 <memset>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180d9:	85 c0                	test   eax,eax
c00180db:	74 1b                	je     c00180f8 <SoundCard::getSamples32(int, int*)+0x4c>
c00180dd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180e1:	75 15                	jne    c00180f8 <SoundCard::getSamples32(int, int*)+0x4c>
c00180e3:	53                   	push   ebx
c00180e4:	55                   	push   ebp
c00180e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180e9:	50                   	push   eax
c00180ea:	e8 55 03 00 00       	call   c0018444 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	39 c6                	cmp    esi,eax
c00180f4:	7d 02                	jge    c00180f8 <SoundCard::getSamples32(int, int*)+0x4c>
c00180f6:	89 c6                	mov    esi,eax
c00180f8:	47                   	inc    edi
c00180f9:	83 ff 20             	cmp    edi,0x20
c00180fc:	75 d4                	jne    c00180d2 <SoundCard::getSamples32(int, int*)+0x26>
c00180fe:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018104:	85 f6                	test   esi,esi
c0018106:	75 0f                	jne    c0018117 <SoundCard::getSamples32(int, int*)+0x6b>
c0018108:	84 c0                	test   al,al
c001810a:	74 1b                	je     c0018127 <SoundCard::getSamples32(int, int*)+0x7b>
c001810c:	83 ec 0c             	sub    esp,0xc
c001810f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018111:	53                   	push   ebx
c0018112:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018115:	eb 0d                	jmp    c0018124 <SoundCard::getSamples32(int, int*)+0x78>
c0018117:	84 c0                	test   al,al
c0018119:	75 0c                	jne    c0018127 <SoundCard::getSamples32(int, int*)+0x7b>
c001811b:	83 ec 0c             	sub    esp,0xc
c001811e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018120:	53                   	push   ebx
c0018121:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 c4 0c             	add    esp,0xc
c001812a:	89 f0                	mov    eax,esi
c001812c:	5b                   	pop    ebx
c001812d:	5e                   	pop    esi
c001812e:	5f                   	pop    edi
c001812f:	5d                   	pop    ebp
c0018130:	c3                   	ret    
c0018131:	90                   	nop

c0018132 <SoundCard::addChannel(SoundPort*)>:
c0018132:	83 ec 0c             	sub    esp,0xc
c0018135:	31 c0                	xor    eax,eax
c0018137:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001813b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018143:	74 1b                	je     c0018160 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018145:	40                   	inc    eax
c0018146:	83 f8 20             	cmp    eax,0x20
c0018149:	75 f0                	jne    c001813b <SoundCard::addChannel(SoundPort*)+0x9>
c001814b:	83 ec 0c             	sub    esp,0xc
c001814e:	68 59 f2 01 c0       	push   0xc001f259
c0018153:	e8 2b 81 ff ff       	call   c0010283 <KePanic(char const*)>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	83 c8 ff             	or     eax,0xffffffff
c001815e:	eb 0b                	jmp    c001816b <SoundCard::addChannel(SoundPort*)+0x39>
c0018160:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018164:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001816b:	83 c4 0c             	add    esp,0xc
c001816e:	c3                   	ret    
c001816f:	90                   	nop

c0018170 <SoundCard::removeChannel(int)>:
c0018170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018178:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018183:	c3                   	ret    

c0018184 <SoundPort::SoundPort(int, int, int, int)>:
c0018184:	83 ec 0c             	sub    esp,0xc
c0018187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018196:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181a2:	89 10                	mov    DWORD PTR [eax],edx
c00181a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181ba:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181bf:	75 13                	jne    c00181d4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00181c7:	05 a0 0f 00 00       	add    eax,0xfa0
c00181cc:	01 c0                	add    eax,eax
c00181ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181d2:	66 90                	xchg   ax,ax
c00181d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181f1:	c1 e0 02             	shl    eax,0x2
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	50                   	push   eax
c00181f8:	e8 bc f5 fe ff       	call   c00077b9 <malloc>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	89 c2                	mov    edx,eax
c0018202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018206:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018209:	90                   	nop
c001820a:	83 c4 0c             	add    esp,0xc
c001820d:	c3                   	ret    
c001820e:	66 90                	xchg   ax,ax

c0018210 <SoundPort::~SoundPort()>:
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018217:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001821a:	85 c0                	test   eax,eax
c001821c:	74 1e                	je     c001823c <SoundPort::~SoundPort()+0x2c>
c001821e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018222:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	50                   	push   eax
c0018229:	e8 9b f5 fe ff       	call   c00077c9 <free>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018235:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001823c:	90                   	nop
c001823d:	83 c4 0c             	add    esp,0xc
c0018240:	c3                   	ret    
c0018241:	90                   	nop
c0018242:	66 90                	xchg   ax,ax

c0018244 <SoundPort::unpause()>:
c0018244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018248:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001824c:	c3                   	ret    
c001824d:	90                   	nop
c001824e:	66 90                	xchg   ax,ax

c0018250 <SoundPort::pause()>:
c0018250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018254:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018258:	c3                   	ret    
c0018259:	90                   	nop
c001825a:	66 90                	xchg   ax,ax

c001825c <SoundPort::getBufferUsed()>:
c001825c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018260:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018263:	c3                   	ret    

c0018264 <SoundPort::getBufferSize()>:
c0018264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018268:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001826b:	c3                   	ret    

c001826c <SoundPort::buffer16(short*, int)>:
c001826c:	55                   	push   ebp
c001826d:	57                   	push   edi
c001826e:	56                   	push   esi
c001826f:	53                   	push   ebx
c0018270:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018274:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018278:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001827b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001827e:	74 68                	je     c00182e8 <SoundPort::buffer16(short*, int)+0x7c>
c0018280:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018284:	85 c9                	test   ecx,ecx
c0018286:	7e 60                	jle    c00182e8 <SoundPort::buffer16(short*, int)+0x7c>
c0018288:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001828c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001828f:	c1 e1 0f             	shl    ecx,0xf
c0018292:	8d 70 01             	lea    esi,[eax+0x1]
c0018295:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018298:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001829b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001829e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182a1:	74 4d                	je     c00182f0 <SoundPort::buffer16(short*, int)+0x84>
c00182a3:	31 f6                	xor    esi,esi
c00182a5:	eb 21                	jmp    c00182c8 <SoundPort::buffer16(short*, int)+0x5c>
c00182a7:	90                   	nop
c00182a8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182ad:	8d 79 01             	lea    edi,[ecx+0x1]
c00182b0:	c1 e3 0f             	shl    ebx,0xf
c00182b3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182b6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182b9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182c2:	74 1c                	je     c00182e0 <SoundPort::buffer16(short*, int)+0x74>
c00182c4:	89 c6                	mov    esi,eax
c00182c6:	66 90                	xchg   ax,ax
c00182c8:	8d 46 01             	lea    eax,[esi+0x1]
c00182cb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182cf:	75 d7                	jne    c00182a8 <SoundPort::buffer16(short*, int)+0x3c>
c00182d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182d5:	8d 76 00             	lea    esi,[esi+0x0]
c00182d8:	5b                   	pop    ebx
c00182d9:	5e                   	pop    esi
c00182da:	5f                   	pop    edi
c00182db:	5d                   	pop    ebp
c00182dc:	c3                   	ret    
c00182dd:	8d 76 00             	lea    esi,[esi+0x0]
c00182e0:	5b                   	pop    ebx
c00182e1:	8d 46 02             	lea    eax,[esi+0x2]
c00182e4:	5e                   	pop    esi
c00182e5:	5f                   	pop    edi
c00182e6:	5d                   	pop    ebp
c00182e7:	c3                   	ret    
c00182e8:	5b                   	pop    ebx
c00182e9:	31 c0                	xor    eax,eax
c00182eb:	5e                   	pop    esi
c00182ec:	5f                   	pop    edi
c00182ed:	5d                   	pop    ebp
c00182ee:	c3                   	ret    
c00182ef:	90                   	nop
c00182f0:	b8 01 00 00 00       	mov    eax,0x1
c00182f5:	eb e1                	jmp    c00182d8 <SoundPort::buffer16(short*, int)+0x6c>
c00182f7:	90                   	nop

c00182f8 <SoundPort::buffer32(int*, int)>:
c00182f8:	55                   	push   ebp
c00182f9:	57                   	push   edi
c00182fa:	56                   	push   esi
c00182fb:	53                   	push   ebx
c00182fc:	51                   	push   ecx
c00182fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018305:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018308:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001830c:	89 04 24             	mov    DWORD PTR [esp],eax
c001830f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018312:	74 5c                	je     c0018370 <SoundPort::buffer32(int*, int)+0x78>
c0018314:	85 c0                	test   eax,eax
c0018316:	7e 58                	jle    c0018370 <SoundPort::buffer32(int*, int)+0x78>
c0018318:	8d 71 01             	lea    esi,[ecx+0x1]
c001831b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001831e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018321:	8b 37                	mov    esi,DWORD PTR [edi]
c0018323:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018326:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018329:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832c:	74 4a                	je     c0018378 <SoundPort::buffer32(int*, int)+0x80>
c001832e:	31 f6                	xor    esi,esi
c0018330:	eb 1e                	jmp    c0018350 <SoundPort::buffer32(int*, int)+0x58>
c0018332:	66 90                	xchg   ax,ax
c0018334:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018337:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001833a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001833d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018340:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018344:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018347:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001834a:	74 18                	je     c0018364 <SoundPort::buffer32(int*, int)+0x6c>
c001834c:	89 de                	mov    esi,ebx
c001834e:	66 90                	xchg   ax,ax
c0018350:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018353:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018356:	75 dc                	jne    c0018334 <SoundPort::buffer32(int*, int)+0x3c>
c0018358:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001835b:	90                   	nop
c001835c:	5a                   	pop    edx
c001835d:	5b                   	pop    ebx
c001835e:	5e                   	pop    esi
c001835f:	5f                   	pop    edi
c0018360:	5d                   	pop    ebp
c0018361:	c3                   	ret    
c0018362:	66 90                	xchg   ax,ax
c0018364:	5a                   	pop    edx
c0018365:	8d 46 02             	lea    eax,[esi+0x2]
c0018368:	5b                   	pop    ebx
c0018369:	5e                   	pop    esi
c001836a:	5f                   	pop    edi
c001836b:	5d                   	pop    ebp
c001836c:	c3                   	ret    
c001836d:	8d 76 00             	lea    esi,[esi+0x0]
c0018370:	5a                   	pop    edx
c0018371:	31 c0                	xor    eax,eax
c0018373:	5b                   	pop    ebx
c0018374:	5e                   	pop    esi
c0018375:	5f                   	pop    edi
c0018376:	5d                   	pop    ebp
c0018377:	c3                   	ret    
c0018378:	b8 01 00 00 00       	mov    eax,0x1
c001837d:	eb dd                	jmp    c001835c <SoundPort::buffer32(int*, int)+0x64>
c001837f:	90                   	nop

c0018380 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018380:	57                   	push   edi
c0018381:	56                   	push   esi
c0018382:	53                   	push   ebx
c0018383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018387:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001838b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018391:	39 03                	cmp    DWORD PTR [ebx],eax
c0018393:	74 13                	je     c00183a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018395:	83 ec 0c             	sub    esp,0xc
c0018398:	68 ac f2 01 c0       	push   0xc001f2ac
c001839d:	e8 e1 7e ff ff       	call   c0010283 <KePanic(char const*)>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	8d 76 00             	lea    esi,[esi+0x0]
c00183a8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183ae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183b1:	74 11                	je     c00183c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183b3:	83 ec 0c             	sub    esp,0xc
c00183b6:	68 eb f2 01 c0       	push   0xc001f2eb
c00183bb:	e8 c3 7e ff ff       	call   c0010283 <KePanic(char const*)>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	90                   	nop
c00183c4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183ca:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183cd:	74 11                	je     c00183e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183cf:	83 ec 0c             	sub    esp,0xc
c00183d2:	68 eb f2 01 c0       	push   0xc001f2eb
c00183d7:	e8 a7 7e ff ff       	call   c0010283 <KePanic(char const*)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	90                   	nop
c00183e0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183e3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183e7:	7e 07                	jle    c00183f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183ed:	8d 76 00             	lea    esi,[esi+0x0]
c00183f0:	85 f6                	test   esi,esi
c00183f2:	7e 2c                	jle    c0018420 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183fb:	31 c9                	xor    ecx,ecx
c00183fd:	01 d7                	add    edi,edx
c00183ff:	90                   	nop
c0018400:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018403:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018406:	85 c0                	test   eax,eax
c0018408:	79 06                	jns    c0018410 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001840a:	05 ff 7f 00 00       	add    eax,0x7fff
c001840f:	90                   	nop
c0018410:	c1 f8 0f             	sar    eax,0xf
c0018413:	83 c1 04             	add    ecx,0x4
c0018416:	66 01 02             	add    WORD PTR [edx],ax
c0018419:	83 c2 02             	add    edx,0x2
c001841c:	39 d7                	cmp    edi,edx
c001841e:	75 e0                	jne    c0018400 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018420:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018423:	50                   	push   eax
c0018424:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018427:	29 f0                	sub    eax,esi
c0018429:	c1 e0 02             	shl    eax,0x2
c001842c:	50                   	push   eax
c001842d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018430:	50                   	push   eax
c0018431:	52                   	push   edx
c0018432:	e8 a9 7f fe ff       	call   c00003e0 <memmove>
c0018437:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	89 f0                	mov    eax,esi
c001843f:	5b                   	pop    ebx
c0018440:	5e                   	pop    esi
c0018441:	5f                   	pop    edi
c0018442:	c3                   	ret    
c0018443:	90                   	nop

c0018444 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018444:	57                   	push   edi
c0018445:	56                   	push   esi
c0018446:	53                   	push   ebx
c0018447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001844b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001844f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018453:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018459:	39 06                	cmp    DWORD PTR [esi],eax
c001845b:	74 13                	je     c0018470 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	68 cc f2 01 c0       	push   0xc001f2cc
c0018465:	e8 19 7e ff ff       	call   c0010283 <KePanic(char const*)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	8d 76 00             	lea    esi,[esi+0x0]
c0018470:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018476:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018479:	74 11                	je     c001848c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	68 07 f3 01 c0       	push   0xc001f307
c0018483:	e8 fb 7d ff ff       	call   c0010283 <KePanic(char const*)>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	90                   	nop
c001848c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018492:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018495:	74 11                	je     c00184a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	68 07 f3 01 c0       	push   0xc001f307
c001849f:	e8 df 7d ff ff       	call   c0010283 <KePanic(char const*)>
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	90                   	nop
c00184a8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184ab:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184af:	7e 07                	jle    c00184b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184b1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184b5:	8d 76 00             	lea    esi,[esi+0x0]
c00184b8:	85 ff                	test   edi,edi
c00184ba:	7e 1c                	jle    c00184d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184bc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184c3:	31 c0                	xor    eax,eax
c00184c5:	8d 76 00             	lea    esi,[esi+0x0]
c00184c8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184cb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184ce:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184d1:	83 c0 04             	add    eax,0x4
c00184d4:	39 c1                	cmp    ecx,eax
c00184d6:	75 f0                	jne    c00184c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184d8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184db:	50                   	push   eax
c00184dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184df:	29 f8                	sub    eax,edi
c00184e1:	c1 e0 02             	shl    eax,0x2
c00184e4:	50                   	push   eax
c00184e5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184e8:	50                   	push   eax
c00184e9:	52                   	push   edx
c00184ea:	e8 f1 7e fe ff       	call   c00003e0 <memmove>
c00184ef:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	89 f8                	mov    eax,edi
c00184f7:	5b                   	pop    ebx
c00184f8:	5e                   	pop    esi
c00184f9:	5f                   	pop    edi
c00184fa:	c3                   	ret    
c00184fb:	90                   	nop

c00184fc <PCI::open(int, int, void*)>:
c00184fc:	83 ec 18             	sub    esp,0x18
c00184ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018503:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018507:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001850d:	8b 10                	mov    edx,DWORD PTR [eax]
c001850f:	50                   	push   eax
c0018510:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018513:	31 c0                	xor    eax,eax
c0018515:	83 c4 1c             	add    esp,0x1c
c0018518:	c3                   	ret    
c0018519:	90                   	nop

c001851a <PCI::close(int, int, void*)>:
c001851a:	31 c0                	xor    eax,eax
c001851c:	c3                   	ret    
c001851d:	90                   	nop

c001851e <PCI::PCI()>:
c001851e:	83 ec 0c             	sub    esp,0xc
c0018521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018525:	83 ec 08             	sub    esp,0x8
c0018528:	68 23 f3 01 c0       	push   0xc001f323
c001852d:	50                   	push   eax
c001852e:	e8 61 2e ff ff       	call   c000b394 <Bus::Bus(char const*)>
c0018533:	83 c4 10             	add    esp,0x10
c0018536:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c001853b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001853f:	89 10                	mov    DWORD PTR [eax],edx
c0018541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018545:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001854f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018553:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018562:	31 d2                	xor    edx,edx
c0018564:	88 c2                	mov    dl,al
c0018566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018575:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001857b:	31 d2                	xor    edx,edx
c001857d:	88 c2                	mov    dl,al
c001857f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018583:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018592:	8d 50 01             	lea    edx,[eax+0x1]
c0018595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018599:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001859f:	31 d2                	xor    edx,edx
c00185a1:	88 c2                	mov    dl,al
c00185a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185ab:	83 c9 c0             	or     ecx,0xffffffc0
c00185ae:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185b2:	90                   	nop
c00185b3:	83 c4 0c             	add    esp,0xc
c00185b6:	c3                   	ret    
c00185b7:	90                   	nop

c00185b8 <PCI::readBAR8(unsigned int, int)>:
c00185b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185c0:	f6 c2 01             	test   dl,0x1
c00185c3:	74 07                	je     c00185cc <PCI::readBAR8(unsigned int, int)+0x14>
c00185c5:	83 e2 fc             	and    edx,0xfffffffc
c00185c8:	01 c2                	add    edx,eax
c00185ca:	ec                   	in     al,dx
c00185cb:	c3                   	ret    
c00185cc:	83 e2 f0             	and    edx,0xfffffff0
c00185cf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185d2:	c3                   	ret    
c00185d3:	90                   	nop

c00185d4 <PCI::readBAR16(unsigned int, int)>:
c00185d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185dc:	f6 c2 01             	test   dl,0x1
c00185df:	74 08                	je     c00185e9 <PCI::readBAR16(unsigned int, int)+0x15>
c00185e1:	83 e2 fc             	and    edx,0xfffffffc
c00185e4:	01 c2                	add    edx,eax
c00185e6:	66 ed                	in     ax,dx
c00185e8:	c3                   	ret    
c00185e9:	83 e2 f0             	and    edx,0xfffffff0
c00185ec:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185f0:	c3                   	ret    
c00185f1:	90                   	nop

c00185f2 <PCI::readBAR32(unsigned int, int)>:
c00185f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185fa:	f6 c2 01             	test   dl,0x1
c00185fd:	74 07                	je     c0018606 <PCI::readBAR32(unsigned int, int)+0x14>
c00185ff:	83 e2 fc             	and    edx,0xfffffffc
c0018602:	01 c2                	add    edx,eax
c0018604:	ed                   	in     eax,dx
c0018605:	c3                   	ret    
c0018606:	83 e2 f0             	and    edx,0xfffffff0
c0018609:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001860c:	c3                   	ret    
c001860d:	90                   	nop

c001860e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001860e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018616:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001861a:	f6 c2 01             	test   dl,0x1
c001861d:	74 07                	je     c0018626 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001861f:	83 e2 fc             	and    edx,0xfffffffc
c0018622:	01 ca                	add    edx,ecx
c0018624:	ee                   	out    dx,al
c0018625:	c3                   	ret    
c0018626:	83 e2 f0             	and    edx,0xfffffff0
c0018629:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001862c:	c3                   	ret    
c001862d:	90                   	nop

c001862e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001862e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018636:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001863a:	f6 c2 01             	test   dl,0x1
c001863d:	74 08                	je     c0018647 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001863f:	83 e2 fc             	and    edx,0xfffffffc
c0018642:	01 ca                	add    edx,ecx
c0018644:	66 ef                	out    dx,ax
c0018646:	c3                   	ret    
c0018647:	83 e2 f0             	and    edx,0xfffffff0
c001864a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001864e:	c3                   	ret    
c001864f:	90                   	nop

c0018650 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018658:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001865c:	f6 c2 01             	test   dl,0x1
c001865f:	74 07                	je     c0018668 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018661:	83 e2 fc             	and    edx,0xfffffffc
c0018664:	01 ca                	add    edx,ecx
c0018666:	ef                   	out    dx,eax
c0018667:	c3                   	ret    
c0018668:	83 e2 f0             	and    edx,0xfffffff0
c001866b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001866e:	c3                   	ret    
c001866f:	90                   	nop

c0018670 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018670:	55                   	push   ebp
c0018671:	57                   	push   edi
c0018672:	56                   	push   esi
c0018673:	53                   	push   ebx
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001867b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001867f:	89 f0                	mov    eax,esi
c0018681:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018685:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018689:	3c 07                	cmp    al,0x7
c001868b:	76 10                	jbe    c001869d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001868d:	83 ec 0c             	sub    esp,0xc
c0018690:	68 2b f3 01 c0       	push   0xc001f32b
c0018695:	e8 e9 7b ff ff       	call   c0010283 <KePanic(char const*)>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	80 fb 0f             	cmp    bl,0xf
c00186a0:	76 10                	jbe    c00186b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186a2:	83 ec 0c             	sub    esp,0xc
c00186a5:	68 5b f3 01 c0       	push   0xc001f35b
c00186aa:	e8 d4 7b ff ff       	call   c0010283 <KePanic(char const*)>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	8d 04 36             	lea    eax,[esi+esi*1]
c00186b5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186ba:	83 c8 f0             	or     eax,0xfffffff0
c00186bd:	ee                   	out    dx,al
c00186be:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186c3:	89 e8                	mov    eax,ebp
c00186c5:	ee                   	out    dx,al
c00186c6:	83 c4 0c             	add    esp,0xc
c00186c9:	89 d8                	mov    eax,ebx
c00186cb:	66 81 e7 fc 00       	and    di,0xfc
c00186d0:	5b                   	pop    ebx
c00186d1:	c1 e0 08             	shl    eax,0x8
c00186d4:	5e                   	pop    esi
c00186d5:	09 f8                	or     eax,edi
c00186d7:	5f                   	pop    edi
c00186d8:	66 0d 00 c0          	or     ax,0xc000
c00186dc:	5d                   	pop    ebp
c00186dd:	c3                   	ret    

c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186de:	57                   	push   edi
c00186df:	56                   	push   esi
c00186e0:	53                   	push   ebx
c00186e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186fb:	83 ff 01             	cmp    edi,0x1
c00186fe:	75 3e                	jne    c001873e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018700:	89 de                	mov    esi,ebx
c0018702:	0f b6 c0             	movzx  eax,al
c0018705:	81 e6 fc 00 00 00    	and    esi,0xfc
c001870b:	c1 e0 10             	shl    eax,0x10
c001870e:	0f b6 c9             	movzx  ecx,cl
c0018711:	09 f0                	or     eax,esi
c0018713:	c1 e1 08             	shl    ecx,0x8
c0018716:	0f b6 d2             	movzx  edx,dl
c0018719:	09 c8                	or     eax,ecx
c001871b:	c1 e2 0b             	shl    edx,0xb
c001871e:	09 d0                	or     eax,edx
c0018720:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018725:	0d 00 00 00 80       	or     eax,0x80000000
c001872a:	ef                   	out    dx,eax
c001872b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018730:	ed                   	in     eax,dx
c0018731:	83 e3 02             	and    ebx,0x2
c0018734:	0f b6 cb             	movzx  ecx,bl
c0018737:	c1 e1 03             	shl    ecx,0x3
c001873a:	d3 e8                	shr    eax,cl
c001873c:	eb 43                	jmp    c0018781 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001873e:	83 ff 02             	cmp    edi,0x2
c0018741:	75 2c                	jne    c001876f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018743:	83 ec 0c             	sub    esp,0xc
c0018746:	0f b6 c9             	movzx  ecx,cl
c0018749:	0f b6 d2             	movzx  edx,dl
c001874c:	0f b6 fb             	movzx  edi,bl
c001874f:	0f b6 c0             	movzx  eax,al
c0018752:	57                   	push   edi
c0018753:	51                   	push   ecx
c0018754:	52                   	push   edx
c0018755:	50                   	push   eax
c0018756:	56                   	push   esi
c0018757:	e8 14 ff ff ff       	call   c0018670 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001875c:	89 c2                	mov    edx,eax
c001875e:	ed                   	in     eax,dx
c001875f:	83 e3 02             	and    ebx,0x2
c0018762:	83 c4 20             	add    esp,0x20
c0018765:	0f b6 cb             	movzx  ecx,bl
c0018768:	c1 e1 03             	shl    ecx,0x3
c001876b:	d3 e8                	shr    eax,cl
c001876d:	eb 12                	jmp    c0018781 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001876f:	83 ec 0c             	sub    esp,0xc
c0018772:	68 8b f3 01 c0       	push   0xc001f38b
c0018777:	e8 07 7b ff ff       	call   c0010283 <KePanic(char const*)>
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	31 c0                	xor    eax,eax
c0018781:	5b                   	pop    ebx
c0018782:	5e                   	pop    esi
c0018783:	5f                   	pop    edi
c0018784:	c3                   	ret    
c0018785:	90                   	nop

c0018786 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018786:	83 ec 18             	sub    esp,0x18
c0018789:	6a 00                	push   0x0
c001878b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018790:	50                   	push   eax
c0018791:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018796:	50                   	push   eax
c0018797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879c:	50                   	push   eax
c001879d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187a1:	e8 38 ff ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187a6:	83 c4 2c             	add    esp,0x2c
c00187a9:	c3                   	ret    

c00187aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187aa:	83 ec 18             	sub    esp,0x18
c00187ad:	6a 0e                	push   0xe
c00187af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b4:	50                   	push   eax
c00187b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ba:	50                   	push   eax
c00187bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c0:	50                   	push   eax
c00187c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c5:	e8 14 ff ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ca:	83 c4 2c             	add    esp,0x2c
c00187cd:	0f b6 c0             	movzx  eax,al
c00187d0:	c3                   	ret    
c00187d1:	90                   	nop

c00187d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187d2:	55                   	push   ebp
c00187d3:	57                   	push   edi
c00187d4:	56                   	push   esi
c00187d5:	53                   	push   ebx
c00187d6:	83 ec 18             	sub    esp,0x18
c00187d9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187de:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187e3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187e8:	6a 0a                	push   0xa
c00187ea:	56                   	push   esi
c00187eb:	55                   	push   ebp
c00187ec:	57                   	push   edi
c00187ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187f1:	e8 e8 fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f6:	83 c4 14             	add    esp,0x14
c00187f9:	89 c3                	mov    ebx,eax
c00187fb:	6a 0a                	push   0xa
c00187fd:	0f b6 db             	movzx  ebx,bl
c0018800:	56                   	push   esi
c0018801:	55                   	push   ebp
c0018802:	57                   	push   edi
c0018803:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018807:	e8 d2 fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880c:	83 c4 2c             	add    esp,0x2c
c001880f:	25 00 ff 00 00       	and    eax,0xff00
c0018814:	09 d8                	or     eax,ebx
c0018816:	5b                   	pop    ebx
c0018817:	5e                   	pop    esi
c0018818:	5f                   	pop    edi
c0018819:	5d                   	pop    ebp
c001881a:	c3                   	ret    
c001881b:	90                   	nop

c001881c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001881c:	83 ec 18             	sub    esp,0x18
c001881f:	6a 08                	push   0x8
c0018821:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018826:	50                   	push   eax
c0018827:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882c:	50                   	push   eax
c001882d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018832:	50                   	push   eax
c0018833:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018837:	e8 a2 fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001883c:	83 c4 2c             	add    esp,0x2c
c001883f:	0f b6 c4             	movzx  eax,ah
c0018842:	c3                   	ret    
c0018843:	90                   	nop

c0018844 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018844:	83 ec 18             	sub    esp,0x18
c0018847:	6a 08                	push   0x8
c0018849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884e:	50                   	push   eax
c001884f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018854:	50                   	push   eax
c0018855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885a:	50                   	push   eax
c001885b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885f:	e8 7a fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018864:	83 c4 2c             	add    esp,0x2c
c0018867:	c3                   	ret    

c0018868 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018868:	83 ec 18             	sub    esp,0x18
c001886b:	6a 3c                	push   0x3c
c001886d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018872:	50                   	push   eax
c0018873:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018878:	50                   	push   eax
c0018879:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887e:	50                   	push   eax
c001887f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018883:	e8 56 fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018888:	83 c4 2c             	add    esp,0x2c
c001888b:	c3                   	ret    

c001888c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001888c:	83 ec 18             	sub    esp,0x18
c001888f:	6a 18                	push   0x18
c0018891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018896:	50                   	push   eax
c0018897:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889c:	50                   	push   eax
c001889d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a2:	50                   	push   eax
c00188a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188a7:	e8 32 fe ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ac:	83 c4 2c             	add    esp,0x2c
c00188af:	0f b6 c4             	movzx  eax,ah
c00188b2:	c3                   	ret    
c00188b3:	90                   	nop

c00188b4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188b4:	55                   	push   ebp
c00188b5:	57                   	push   edi
c00188b6:	56                   	push   esi
c00188b7:	53                   	push   ebx
c00188b8:	83 ec 28             	sub    esp,0x28
c00188bb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188bf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188c4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188c9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188ce:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188d5:	8d 43 12             	lea    eax,[ebx+0x12]
c00188d8:	83 c3 10             	add    ebx,0x10
c00188db:	0f b6 c0             	movzx  eax,al
c00188de:	0f b6 db             	movzx  ebx,bl
c00188e1:	50                   	push   eax
c00188e2:	51                   	push   ecx
c00188e3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188e7:	57                   	push   edi
c00188e8:	55                   	push   ebp
c00188e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188ed:	e8 ec fd ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f2:	83 c4 14             	add    esp,0x14
c00188f5:	89 c6                	mov    esi,eax
c00188f7:	53                   	push   ebx
c00188f8:	c1 e6 10             	shl    esi,0x10
c00188fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188ff:	51                   	push   ecx
c0018900:	57                   	push   edi
c0018901:	55                   	push   ebp
c0018902:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018906:	e8 d3 fd ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001890b:	83 c4 3c             	add    esp,0x3c
c001890e:	0f b7 c0             	movzx  eax,ax
c0018911:	5b                   	pop    ebx
c0018912:	09 f0                	or     eax,esi
c0018914:	5e                   	pop    esi
c0018915:	5f                   	pop    edi
c0018916:	5d                   	pop    ebp
c0018917:	c3                   	ret    

c0018918 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018918:	55                   	push   ebp
c0018919:	57                   	push   edi
c001891a:	56                   	push   esi
c001891b:	53                   	push   ebx
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018923:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018927:	89 f5                	mov    ebp,esi
c0018929:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001892f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018933:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001893b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001893f:	83 f9 01             	cmp    ecx,0x1
c0018942:	75 5d                	jne    c00189a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018944:	0f b6 c8             	movzx  ecx,al
c0018947:	0f b6 d2             	movzx  edx,dl
c001894a:	c1 e1 10             	shl    ecx,0x10
c001894d:	c1 e2 0b             	shl    edx,0xb
c0018950:	89 f0                	mov    eax,esi
c0018952:	25 fc 00 00 00       	and    eax,0xfc
c0018957:	09 c1                	or     ecx,eax
c0018959:	89 e8                	mov    eax,ebp
c001895b:	0f b6 c0             	movzx  eax,al
c001895e:	c1 e0 08             	shl    eax,0x8
c0018961:	09 c1                	or     ecx,eax
c0018963:	09 d1                	or     ecx,edx
c0018965:	ba f8 0c 00 00       	mov    edx,0xcf8
c001896a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018970:	89 c8                	mov    eax,ecx
c0018972:	ef                   	out    dx,eax
c0018973:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018978:	ed                   	in     eax,dx
c0018979:	0f b7 db             	movzx  ebx,bx
c001897c:	83 e6 02             	and    esi,0x2
c001897f:	74 0a                	je     c001898b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018981:	0f b7 d0             	movzx  edx,ax
c0018984:	c1 e3 10             	shl    ebx,0x10
c0018987:	09 d3                	or     ebx,edx
c0018989:	eb 05                	jmp    c0018990 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001898b:	66 31 c0             	xor    ax,ax
c001898e:	09 c3                	or     ebx,eax
c0018990:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018995:	89 c8                	mov    eax,ecx
c0018997:	ef                   	out    dx,eax
c0018998:	ba fc 0c 00 00       	mov    edx,0xcfc
c001899d:	89 d8                	mov    eax,ebx
c001899f:	eb 41                	jmp    c00189e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189a1:	83 f9 02             	cmp    ecx,0x2
c00189a4:	75 45                	jne    c00189eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189a6:	83 ec 0c             	sub    esp,0xc
c00189a9:	0f b6 d2             	movzx  edx,dl
c00189ac:	89 f1                	mov    ecx,esi
c00189ae:	0f b6 c0             	movzx  eax,al
c00189b1:	0f b6 f1             	movzx  esi,cl
c00189b4:	89 e9                	mov    ecx,ebp
c00189b6:	56                   	push   esi
c00189b7:	0f b6 c9             	movzx  ecx,cl
c00189ba:	51                   	push   ecx
c00189bb:	52                   	push   edx
c00189bc:	50                   	push   eax
c00189bd:	57                   	push   edi
c00189be:	e8 ad fc ff ff       	call   c0018670 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189c3:	89 c2                	mov    edx,eax
c00189c5:	ed                   	in     eax,dx
c00189c6:	83 c4 20             	add    esp,0x20
c00189c9:	0f b7 db             	movzx  ebx,bx
c00189cc:	f6 c2 02             	test   dl,0x2
c00189cf:	74 0c                	je     c00189dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189d1:	0f b7 c8             	movzx  ecx,ax
c00189d4:	89 d8                	mov    eax,ebx
c00189d6:	c1 e0 10             	shl    eax,0x10
c00189d9:	09 c8                	or     eax,ecx
c00189db:	eb 05                	jmp    c00189e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189dd:	66 31 c0             	xor    ax,ax
c00189e0:	09 d8                	or     eax,ebx
c00189e2:	ef                   	out    dx,eax
c00189e3:	83 c4 0c             	add    esp,0xc
c00189e6:	5b                   	pop    ebx
c00189e7:	5e                   	pop    esi
c00189e8:	5f                   	pop    edi
c00189e9:	5d                   	pop    ebp
c00189ea:	c3                   	ret    
c00189eb:	c7 44 24 20 8b f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f38b
c00189f3:	83 c4 0c             	add    esp,0xc
c00189f6:	5b                   	pop    ebx
c00189f7:	5e                   	pop    esi
c00189f8:	5f                   	pop    edi
c00189f9:	5d                   	pop    ebp
c00189fa:	e9 84 78 ff ff       	jmp    c0010283 <KePanic(char const*)>
c00189ff:	90                   	nop

c0018a00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a00:	55                   	push   ebp
c0018a01:	57                   	push   edi
c0018a02:	56                   	push   esi
c0018a03:	53                   	push   ebx
c0018a04:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a0a:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018a11:	0f 85 84 00 00 00    	jne    c0018a9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a17:	83 ec 0c             	sub    esp,0xc
c0018a1a:	68 14 01 00 00       	push   0x114
c0018a1f:	e8 95 ed fe ff       	call   c00077b9 <malloc>
c0018a24:	83 c4 0c             	add    esp,0xc
c0018a27:	89 c3                	mov    ebx,eax
c0018a29:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0018a2f:	68 91 f3 01 c0       	push   0xc001f391
c0018a34:	50                   	push   eax
c0018a35:	e8 3e 21 ff ff       	call   c000ab78 <File::File(char const*, Process*)>
c0018a3a:	5a                   	pop    edx
c0018a3b:	59                   	pop    ecx
c0018a3c:	6a 01                	push   0x1
c0018a3e:	53                   	push   ebx
c0018a3f:	e8 f4 21 ff ff       	call   c000ac38 <File::open(FileOpenMode)>
c0018a44:	83 c4 0c             	add    esp,0xc
c0018a47:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a4b:	50                   	push   eax
c0018a4c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a50:	50                   	push   eax
c0018a51:	53                   	push   ebx
c0018a52:	e8 8d 24 ff ff       	call   c000aee4 <File::stat(unsigned long long*, bool*)>
c0018a57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a5b:	40                   	inc    eax
c0018a5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a5f:	e8 55 ed fe ff       	call   c00077b9 <malloc>
c0018a64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a68:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018a6d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a71:	5e                   	pop    esi
c0018a72:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a74:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a78:	51                   	push   ecx
c0018a79:	50                   	push   eax
c0018a7a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a7e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a82:	53                   	push   ebx
c0018a83:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a86:	83 c4 14             	add    esp,0x14
c0018a89:	53                   	push   ebx
c0018a8a:	e8 07 22 ff ff       	call   c000ac96 <File::close()>
c0018a8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018a9b:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018aa0:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018aa6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aa9:	31 ff                	xor    edi,edi
c0018aab:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018ab3:	31 f6                	xor    esi,esi
c0018ab5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018aba:	31 db                	xor    ebx,ebx
c0018abc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018ac4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ac9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ad0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ad4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018adb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018adf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ae2:	0f 8e 6b 01 00 00    	jle    c0018c53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018ae8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018aeb:	d4 40                	aam    0x40
c0018aed:	d5 39                	aad    0x39
c0018aef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018af3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018af7:	d4 40                	aam    0x40
c0018af9:	d5 39                	aad    0x39
c0018afb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018aff:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b03:	d4 40                	aam    0x40
c0018b05:	d5 39                	aad    0x39
c0018b07:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b0b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b0f:	d4 40                	aam    0x40
c0018b11:	d5 39                	aad    0x39
c0018b13:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b17:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b1b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b1f:	3c 56                	cmp    al,0x56
c0018b21:	74 45                	je     c0018b68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b23:	d4 40                	aam    0x40
c0018b25:	d5 39                	aad    0x39
c0018b27:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b2a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b2e:	0f b6 c9             	movzx  ecx,cl
c0018b31:	c1 e1 04             	shl    ecx,0x4
c0018b34:	d4 40                	aam    0x40
c0018b36:	d5 39                	aad    0x39
c0018b38:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b3b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b3f:	0f b6 db             	movzx  ebx,bl
c0018b42:	09 cb                	or     ebx,ecx
c0018b44:	c1 e3 04             	shl    ebx,0x4
c0018b47:	d4 40                	aam    0x40
c0018b49:	d5 39                	aad    0x39
c0018b4b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b4e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b52:	0f b6 c9             	movzx  ecx,cl
c0018b55:	09 cb                	or     ebx,ecx
c0018b57:	c1 e3 04             	shl    ebx,0x4
c0018b5a:	89 d9                	mov    ecx,ebx
c0018b5c:	d4 40                	aam    0x40
c0018b5e:	d5 39                	aad    0x39
c0018b60:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b63:	0f b6 db             	movzx  ebx,bl
c0018b66:	09 cb                	or     ebx,ecx
c0018b68:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b6c:	80 f9 44             	cmp    cl,0x44
c0018b6f:	74 47                	je     c0018bb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b71:	88 c8                	mov    al,cl
c0018b73:	d4 40                	aam    0x40
c0018b75:	d5 39                	aad    0x39
c0018b77:	83 e8 30             	sub    eax,0x30
c0018b7a:	0f b6 e8             	movzx  ebp,al
c0018b7d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b81:	c1 e5 04             	shl    ebp,0x4
c0018b84:	d4 40                	aam    0x40
c0018b86:	d5 39                	aad    0x39
c0018b88:	83 e8 30             	sub    eax,0x30
c0018b8b:	0f b6 f0             	movzx  esi,al
c0018b8e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b92:	09 ee                	or     esi,ebp
c0018b94:	c1 e6 04             	shl    esi,0x4
c0018b97:	d4 40                	aam    0x40
c0018b99:	d5 39                	aad    0x39
c0018b9b:	83 e8 30             	sub    eax,0x30
c0018b9e:	0f b6 e8             	movzx  ebp,al
c0018ba1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ba5:	09 ee                	or     esi,ebp
c0018ba7:	c1 e6 04             	shl    esi,0x4
c0018baa:	89 f5                	mov    ebp,esi
c0018bac:	d4 40                	aam    0x40
c0018bae:	d5 39                	aad    0x39
c0018bb0:	83 e8 30             	sub    eax,0x30
c0018bb3:	0f b6 f0             	movzx  esi,al
c0018bb6:	09 ee                	or     esi,ebp
c0018bb8:	83 c7 10             	add    edi,0x10
c0018bbb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bbf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bc2:	3c 0a                	cmp    al,0xa
c0018bc4:	74 09                	je     c0018bcf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bc6:	45                   	inc    ebp
c0018bc7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bca:	75 16                	jne    c0018be2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bcc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bcf:	3c 0a                	cmp    al,0xa
c0018bd1:	0f 94 c0             	sete   al
c0018bd4:	0f b6 c0             	movzx  eax,al
c0018bd7:	01 c7                	add    edi,eax
c0018bd9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bde:	75 0c                	jne    c0018bec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018be0:	eb 15                	jmp    c0018bf7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018be2:	47                   	inc    edi
c0018be3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018be6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bea:	eb d3                	jmp    c0018bbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bec:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018bf1:	0f 85 e8 fe ff ff    	jne    c0018adf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bf7:	80 f9 44             	cmp    cl,0x44
c0018bfa:	74 0b                	je     c0018c07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018bfc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c01:	0f 85 d8 fe ff ff    	jne    c0018adf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c07:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c0b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c0f:	c1 e1 04             	shl    ecx,0x4
c0018c12:	83 e8 30             	sub    eax,0x30
c0018c15:	09 c8                	or     eax,ecx
c0018c17:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c1b:	0f 85 be fe ff ff    	jne    c0018adf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c21:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c25:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c29:	c1 e1 04             	shl    ecx,0x4
c0018c2c:	83 e8 30             	sub    eax,0x30
c0018c2f:	09 c8                	or     eax,ecx
c0018c31:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c35:	0f 85 a4 fe ff ff    	jne    c0018adf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c3b:	50                   	push   eax
c0018c3c:	50                   	push   eax
c0018c3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c41:	50                   	push   eax
c0018c42:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c49:	e8 b2 79 fe ff       	call   c0000600 <strcpy>
c0018c4e:	83 c4 10             	add    esp,0x10
c0018c51:	eb 15                	jmp    c0018c68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c53:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c5a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c68:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c6f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c75:	5b                   	pop    ebx
c0018c76:	5e                   	pop    esi
c0018c77:	5f                   	pop    edi
c0018c78:	5d                   	pop    ebp
c0018c79:	c3                   	ret    

c0018c7a <PCI::checkBus(unsigned char)>:
c0018c7a:	56                   	push   esi
c0018c7b:	53                   	push   ebx
c0018c7c:	31 f6                	xor    esi,esi
c0018c7e:	51                   	push   ecx
c0018c7f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c83:	0f b6 c3             	movzx  eax,bl
c0018c86:	52                   	push   edx
c0018c87:	56                   	push   esi
c0018c88:	46                   	inc    esi
c0018c89:	50                   	push   eax
c0018c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c8e:	e8 f3 02 00 00       	call   c0018f86 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c93:	83 c4 10             	add    esp,0x10
c0018c96:	83 fe 20             	cmp    esi,0x20
c0018c99:	75 e8                	jne    c0018c83 <PCI::checkBus(unsigned char)+0x9>
c0018c9b:	58                   	pop    eax
c0018c9c:	5b                   	pop    ebx
c0018c9d:	5e                   	pop    esi
c0018c9e:	c3                   	ret    
c0018c9f:	90                   	nop

c0018ca0 <PCI::foundDevice(PCIDeviceInfo)>:
c0018ca0:	55                   	push   ebp
c0018ca1:	57                   	push   edi
c0018ca2:	56                   	push   esi
c0018ca3:	53                   	push   ebx
c0018ca4:	83 ec 1c             	sub    esp,0x1c
c0018ca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cab:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018cb1:	0f 84 52 01 00 00    	je     c0018e09 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cb7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cbb:	66 81 f9 06 04       	cmp    cx,0x406
c0018cc0:	75 2c                	jne    c0018cee <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cc2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cc7:	50                   	push   eax
c0018cc8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018ccd:	50                   	push   eax
c0018cce:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cd3:	50                   	push   eax
c0018cd4:	56                   	push   esi
c0018cd5:	e8 b2 fb ff ff       	call   c001888c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cda:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cde:	0f b6 c0             	movzx  eax,al
c0018ce1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018ce5:	83 c4 2c             	add    esp,0x2c
c0018ce8:	5b                   	pop    ebx
c0018ce9:	5e                   	pop    esi
c0018cea:	5f                   	pop    edi
c0018ceb:	5d                   	pop    ebp
c0018cec:	eb 8c                	jmp    c0018c7a <PCI::checkBus(unsigned char)>
c0018cee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cf2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018cf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018cfc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d00:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d04:	88 d3                	mov    bl,dl
c0018d06:	85 c0                	test   eax,eax
c0018d08:	74 33                	je     c0018d3d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d0a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d0d:	85 d2                	test   edx,edx
c0018d0f:	74 28                	je     c0018d39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d11:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d17:	31 ef                	xor    edi,ebp
c0018d19:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d1f:	75 18                	jne    c0018d39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d25:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d2b:	75 0c                	jne    c0018d39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d2d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d33:	0f 84 d0 00 00 00    	je     c0018e09 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d3b:	eb c9                	jmp    c0018d06 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d3d:	66 81 f9 01 06       	cmp    cx,0x601
c0018d42:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d46:	75 19                	jne    c0018d61 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 64 01 00 00       	push   0x164
c0018d50:	e8 64 ea fe ff       	call   c00077b9 <malloc>
c0018d55:	89 c5                	mov    ebp,eax
c0018d57:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d5a:	e8 47 0e 00 00       	call   c0019ba6 <SATABus::SATABus()>
c0018d5f:	eb 1e                	jmp    c0018d7f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d61:	66 81 f9 01 01       	cmp    cx,0x101
c0018d66:	75 60                	jne    c0018dc8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d68:	83 ec 0c             	sub    esp,0xc
c0018d6b:	68 70 02 00 00       	push   0x270
c0018d70:	e8 44 ea fe ff       	call   c00077b9 <malloc>
c0018d75:	89 c5                	mov    ebp,eax
c0018d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d7a:	e8 cb 02 00 00       	call   c001904a <IDE::IDE()>
c0018d7f:	58                   	pop    eax
c0018d80:	5a                   	pop    edx
c0018d81:	55                   	push   ebp
c0018d82:	56                   	push   esi
c0018d83:	e8 b8 2c ff ff       	call   c000ba40 <Device::addChild(Device*)>
c0018d88:	83 ec 1c             	sub    esp,0x1c
c0018d8b:	b9 09 00 00 00       	mov    ecx,0x9
c0018d90:	fc                   	cld    
c0018d91:	89 e7                	mov    edi,esp
c0018d93:	89 de                	mov    esi,ebx
c0018d95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d97:	55                   	push   ebp
c0018d98:	e8 e9 2b ff ff       	call   c000b986 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018da4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018dac:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018db4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018dbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018dbf:	83 c4 4c             	add    esp,0x4c
c0018dc2:	5b                   	pop    ebx
c0018dc3:	5e                   	pop    esi
c0018dc4:	5f                   	pop    edi
c0018dc5:	5d                   	pop    ebp
c0018dc6:	ff e0                	jmp    eax
c0018dc8:	83 ec 0c             	sub    esp,0xc
c0018dcb:	68 58 01 00 00       	push   0x158
c0018dd0:	e8 e4 e9 fe ff       	call   c00077b9 <malloc>
c0018dd5:	89 c5                	mov    ebp,eax
c0018dd7:	58                   	pop    eax
c0018dd8:	5a                   	pop    edx
c0018dd9:	68 aa f3 01 c0       	push   0xc001f3aa
c0018dde:	55                   	push   ebp
c0018ddf:	e8 fa 2e ff ff       	call   c000bcde <DriverlessDevice::DriverlessDevice(char const*)>
c0018de4:	59                   	pop    ecx
c0018de5:	5f                   	pop    edi
c0018de6:	55                   	push   ebp
c0018de7:	56                   	push   esi
c0018de8:	e8 53 2c ff ff       	call   c000ba40 <Device::addChild(Device*)>
c0018ded:	b9 09 00 00 00       	mov    ecx,0x9
c0018df2:	fc                   	cld    
c0018df3:	89 df                	mov    edi,ebx
c0018df5:	89 de                	mov    esi,ebx
c0018df7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018df9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018dfd:	83 c4 2c             	add    esp,0x2c
c0018e00:	5b                   	pop    ebx
c0018e01:	5e                   	pop    esi
c0018e02:	5f                   	pop    edi
c0018e03:	5d                   	pop    ebp
c0018e04:	e9 7d 2b ff ff       	jmp    c000b986 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e09:	83 c4 1c             	add    esp,0x1c
c0018e0c:	5b                   	pop    ebx
c0018e0d:	5e                   	pop    esi
c0018e0e:	5f                   	pop    edi
c0018e0f:	5d                   	pop    ebp
c0018e10:	c3                   	ret    
c0018e11:	90                   	nop

c0018e12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e12:	55                   	push   ebp
c0018e13:	57                   	push   edi
c0018e14:	56                   	push   esi
c0018e15:	53                   	push   ebx
c0018e16:	83 ec 68             	sub    esp,0x68
c0018e19:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e1d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e2f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e3f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e48:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e4d:	6a 0c                	push   0xc
c0018e4f:	57                   	push   edi
c0018e50:	53                   	push   ebx
c0018e51:	56                   	push   esi
c0018e52:	55                   	push   ebp
c0018e53:	e8 86 f8 ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e58:	83 c4 20             	add    esp,0x20
c0018e5b:	57                   	push   edi
c0018e5c:	53                   	push   ebx
c0018e5d:	56                   	push   esi
c0018e5e:	55                   	push   ebp
c0018e5f:	e8 6e f9 ff ff       	call   c00187d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e64:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e69:	57                   	push   edi
c0018e6a:	53                   	push   ebx
c0018e6b:	56                   	push   esi
c0018e6c:	55                   	push   ebp
c0018e6d:	e8 f6 f9 ff ff       	call   c0018868 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e72:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e76:	83 c4 14             	add    esp,0x14
c0018e79:	6a 3c                	push   0x3c
c0018e7b:	57                   	push   edi
c0018e7c:	53                   	push   ebx
c0018e7d:	56                   	push   esi
c0018e7e:	55                   	push   ebp
c0018e7f:	e8 5a f8 ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e84:	0f b6 c4             	movzx  eax,ah
c0018e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e8b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e8f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e93:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018e98:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e9e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018ea4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ea8:	83 c4 20             	add    esp,0x20
c0018eab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018eb0:	74 30                	je     c0018ee2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eb2:	31 c0                	xor    eax,eax
c0018eb4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018eb8:	7e 28                	jle    c0018ee2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eba:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018ec2:	39 cb                	cmp    ebx,ecx
c0018ec4:	75 19                	jne    c0018edf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ec6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018ece:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018ed2:	75 0b                	jne    c0018edf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ed4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018edb:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018edf:	40                   	inc    eax
c0018ee0:	eb d2                	jmp    c0018eb4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018ee2:	31 d2                	xor    edx,edx
c0018ee4:	83 ec 0c             	sub    esp,0xc
c0018ee7:	57                   	push   edi
c0018ee8:	53                   	push   ebx
c0018ee9:	56                   	push   esi
c0018eea:	52                   	push   edx
c0018eeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018eef:	55                   	push   ebp
c0018ef0:	e8 bf f9 ff ff       	call   c00188b4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ef5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ef9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018efd:	42                   	inc    edx
c0018efe:	83 c4 20             	add    esp,0x20
c0018f01:	83 fa 06             	cmp    edx,0x6
c0018f04:	75 de                	jne    c0018ee4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f06:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f0b:	83 ec 0c             	sub    esp,0xc
c0018f0e:	86 e0                	xchg   al,ah
c0018f10:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f15:	6a 02                	push   0x2
c0018f17:	57                   	push   edi
c0018f18:	53                   	push   ebx
c0018f19:	56                   	push   esi
c0018f1a:	55                   	push   ebp
c0018f1b:	e8 be f7 ff ff       	call   c00186de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f20:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f25:	83 c4 20             	add    esp,0x20
c0018f28:	57                   	push   edi
c0018f29:	53                   	push   ebx
c0018f2a:	56                   	push   esi
c0018f2b:	55                   	push   ebp
c0018f2c:	e8 eb f8 ff ff       	call   c001881c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f31:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f35:	57                   	push   edi
c0018f36:	53                   	push   ebx
c0018f37:	56                   	push   esi
c0018f38:	55                   	push   ebp
c0018f39:	e8 48 f8 ff ff       	call   c0018786 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f3e:	b9 09 00 00 00       	mov    ecx,0x9
c0018f43:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f48:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f4c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f50:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f54:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f58:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f5c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f60:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f64:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	fc                   	cld    
c0018f6c:	89 e7                	mov    edi,esp
c0018f6e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f74:	55                   	push   ebp
c0018f75:	e8 26 fd ff ff       	call   c0018ca0 <PCI::foundDevice(PCIDeviceInfo)>
c0018f7a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f80:	5b                   	pop    ebx
c0018f81:	5e                   	pop    esi
c0018f82:	5f                   	pop    edi
c0018f83:	5d                   	pop    ebp
c0018f84:	c3                   	ret    
c0018f85:	90                   	nop

c0018f86 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f86:	55                   	push   ebp
c0018f87:	57                   	push   edi
c0018f88:	56                   	push   esi
c0018f89:	53                   	push   ebx
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f91:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f96:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f9b:	6a 00                	push   0x0
c0018f9d:	56                   	push   esi
c0018f9e:	57                   	push   edi
c0018f9f:	55                   	push   ebp
c0018fa0:	e8 e1 f7 ff ff       	call   c0018786 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fa5:	6a 00                	push   0x0
c0018fa7:	56                   	push   esi
c0018fa8:	57                   	push   edi
c0018fa9:	55                   	push   ebp
c0018faa:	e8 63 fe ff ff       	call   c0018e12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018faf:	83 c4 20             	add    esp,0x20
c0018fb2:	6a 00                	push   0x0
c0018fb4:	56                   	push   esi
c0018fb5:	57                   	push   edi
c0018fb6:	55                   	push   ebp
c0018fb7:	e8 ee f7 ff ff       	call   c00187aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	84 c0                	test   al,al
c0018fc1:	79 27                	jns    c0018fea <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fc3:	bb 01 00 00 00       	mov    ebx,0x1
c0018fc8:	53                   	push   ebx
c0018fc9:	56                   	push   esi
c0018fca:	57                   	push   edi
c0018fcb:	55                   	push   ebp
c0018fcc:	e8 b5 f7 ff ff       	call   c0018786 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fd1:	83 c4 10             	add    esp,0x10
c0018fd4:	66 40                	inc    ax
c0018fd6:	74 0c                	je     c0018fe4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fd8:	53                   	push   ebx
c0018fd9:	56                   	push   esi
c0018fda:	57                   	push   edi
c0018fdb:	55                   	push   ebp
c0018fdc:	e8 31 fe ff ff       	call   c0018e12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	43                   	inc    ebx
c0018fe5:	83 fb 08             	cmp    ebx,0x8
c0018fe8:	75 de                	jne    c0018fc8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fea:	83 c4 0c             	add    esp,0xc
c0018fed:	5b                   	pop    ebx
c0018fee:	5e                   	pop    esi
c0018fef:	5f                   	pop    edi
c0018ff0:	5d                   	pop    ebp
c0018ff1:	c3                   	ret    

c0018ff2 <PCI::detect()>:
c0018ff2:	56                   	push   esi
c0018ff3:	53                   	push   ebx
c0018ff4:	53                   	push   ebx
c0018ff5:	31 db                	xor    ebx,ebx
c0018ff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018ffb:	6a 00                	push   0x0
c0018ffd:	6a 00                	push   0x0
c0018fff:	6a 00                	push   0x0
c0019001:	56                   	push   esi
c0019002:	e8 a3 f7 ff ff       	call   c00187aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	a8 80                	test   al,0x80
c001900c:	75 21                	jne    c001902f <PCI::detect()+0x3d>
c001900e:	51                   	push   ecx
c001900f:	51                   	push   ecx
c0019010:	6a 00                	push   0x0
c0019012:	56                   	push   esi
c0019013:	e8 62 fc ff ff       	call   c0018c7a <PCI::checkBus(unsigned char)>
c0019018:	83 c4 10             	add    esp,0x10
c001901b:	eb 24                	jmp    c0019041 <PCI::detect()+0x4f>
c001901d:	52                   	push   edx
c001901e:	52                   	push   edx
c001901f:	53                   	push   ebx
c0019020:	43                   	inc    ebx
c0019021:	56                   	push   esi
c0019022:	e8 53 fc ff ff       	call   c0018c7a <PCI::checkBus(unsigned char)>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	83 fb 08             	cmp    ebx,0x8
c001902d:	74 12                	je     c0019041 <PCI::detect()+0x4f>
c001902f:	53                   	push   ebx
c0019030:	6a 00                	push   0x0
c0019032:	6a 00                	push   0x0
c0019034:	56                   	push   esi
c0019035:	e8 4c f7 ff ff       	call   c0018786 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001903a:	83 c4 10             	add    esp,0x10
c001903d:	66 40                	inc    ax
c001903f:	74 dc                	je     c001901d <PCI::detect()+0x2b>
c0019041:	58                   	pop    eax
c0019042:	5b                   	pop    ebx
c0019043:	5e                   	pop    esi
c0019044:	c3                   	ret    
c0019045:	90                   	nop

c0019046 <IDE::close(int, int, void*)>:
c0019046:	83 c8 ff             	or     eax,0xffffffff
c0019049:	c3                   	ret    

c001904a <IDE::IDE()>:
c001904a:	83 ec 0c             	sub    esp,0xc
c001904d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019051:	83 ec 08             	sub    esp,0x8
c0019054:	68 f0 f3 01 c0       	push   0xc001f3f0
c0019059:	50                   	push   eax
c001905a:	e8 25 2d ff ff       	call   c000bd84 <HardDiskController::HardDiskController(char const*)>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c0019067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001906b:	89 10                	mov    DWORD PTR [eax],edx
c001906d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019071:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019078:	90                   	nop
c0019079:	83 c4 0c             	add    esp,0xc
c001907c:	c3                   	ret    
c001907d:	90                   	nop

c001907e <IDE::prepareInterrupt(unsigned char)>:
c001907e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019083:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019087:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001908f:	c3                   	ret    

c0019090 <selectDrive(unsigned char, unsigned char)>:
c0019090:	c3                   	ret    
c0019091:	90                   	nop

c0019092 <IDE::getBase(unsigned char)>:
c0019092:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001909b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190a3:	c3                   	ret    

c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190a4:	55                   	push   ebp
c00190a5:	57                   	push   edi
c00190a6:	56                   	push   esi
c00190a7:	53                   	push   ebx
c00190a8:	83 ec 1c             	sub    esp,0x1c
c00190ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190b3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190be:	80 f9 03             	cmp    cl,0x3
c00190c1:	77 51                	ja     c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190c7:	0f b6 f2             	movzx  esi,dl
c00190ca:	0f b6 db             	movzx  ebx,bl
c00190cd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190d0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190d4:	83 ca 80             	or     edx,0xffffff80
c00190d7:	0f b6 d2             	movzx  edx,dl
c00190da:	52                   	push   edx
c00190db:	6a 0c                	push   0xc
c00190dd:	56                   	push   esi
c00190de:	57                   	push   edi
c00190df:	e8 c0 ff ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190e4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190ed:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190f1:	ee                   	out    dx,al
c00190f2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190f7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190fb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190ff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019103:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001910b:	83 c4 2c             	add    esp,0x2c
c001910e:	5b                   	pop    ebx
c001910f:	5e                   	pop    esi
c0019110:	5f                   	pop    edi
c0019111:	5d                   	pop    ebp
c0019112:	eb 90                	jmp    c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019114:	80 fb 07             	cmp    bl,0x7
c0019117:	77 12                	ja     c001912b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019119:	0f b6 d2             	movzx  edx,dl
c001911c:	0f b6 db             	movzx  ebx,bl
c001911f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019127:	89 da                	mov    edx,ebx
c0019129:	eb 2f                	jmp    c001915a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001912b:	80 fb 0d             	cmp    bl,0xd
c001912e:	77 13                	ja     c0019143 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019130:	0f b6 d2             	movzx  edx,dl
c0019133:	0f b6 db             	movzx  ebx,bl
c0019136:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001913d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019141:	eb 17                	jmp    c001915a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019143:	80 fb 15             	cmp    bl,0x15
c0019146:	77 13                	ja     c001915b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019148:	0f b6 d2             	movzx  edx,dl
c001914b:	0f b6 db             	movzx  ebx,bl
c001914e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019156:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001915a:	ee                   	out    dx,al
c001915b:	83 c4 1c             	add    esp,0x1c
c001915e:	5b                   	pop    ebx
c001915f:	5e                   	pop    esi
c0019160:	5f                   	pop    edi
c0019161:	5d                   	pop    ebp
c0019162:	c3                   	ret    
c0019163:	90                   	nop

c0019164 <IDE::read(unsigned char, unsigned char)>:
c0019164:	55                   	push   ebp
c0019165:	57                   	push   edi
c0019166:	56                   	push   esi
c0019167:	53                   	push   ebx
c0019168:	83 ec 1c             	sub    esp,0x1c
c001916b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001916f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019173:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019176:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001917a:	3c 03                	cmp    al,0x3
c001917c:	77 43                	ja     c00191c1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001917e:	0f b6 f2             	movzx  esi,dl
c0019181:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019184:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019188:	83 c8 80             	or     eax,0xffffff80
c001918b:	0f b6 c0             	movzx  eax,al
c001918e:	50                   	push   eax
c001918f:	6a 0c                	push   0xc
c0019191:	56                   	push   esi
c0019192:	57                   	push   edi
c0019193:	e8 0c ff ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019198:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001919d:	0f b6 c3             	movzx  eax,bl
c00191a0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191a4:	ec                   	in     al,dx
c00191a5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191a9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191ae:	52                   	push   edx
c00191af:	6a 0c                	push   0xc
c00191b1:	56                   	push   esi
c00191b2:	57                   	push   edi
c00191b3:	e8 ec fe ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191b8:	83 c4 20             	add    esp,0x20
c00191bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191bf:	eb 49                	jmp    c001920a <IDE::read(unsigned char, unsigned char)+0xa6>
c00191c1:	80 fb 07             	cmp    bl,0x7
c00191c4:	77 12                	ja     c00191d8 <IDE::read(unsigned char, unsigned char)+0x74>
c00191c6:	0f b6 d2             	movzx  edx,dl
c00191c9:	0f b6 c3             	movzx  eax,bl
c00191cc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191d4:	89 c2                	mov    edx,eax
c00191d6:	eb 31                	jmp    c0019209 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191d8:	80 fb 0d             	cmp    bl,0xd
c00191db:	77 13                	ja     c00191f0 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191dd:	0f b6 d2             	movzx  edx,dl
c00191e0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191e7:	0f b6 d3             	movzx  edx,bl
c00191ea:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191ee:	eb 19                	jmp    c0019209 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191f0:	31 c0                	xor    eax,eax
c00191f2:	80 fb 15             	cmp    bl,0x15
c00191f5:	77 13                	ja     c001920a <IDE::read(unsigned char, unsigned char)+0xa6>
c00191f7:	0f b6 d2             	movzx  edx,dl
c00191fa:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019202:	0f b6 d3             	movzx  edx,bl
c0019205:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019209:	ec                   	in     al,dx
c001920a:	83 c4 1c             	add    esp,0x1c
c001920d:	5b                   	pop    ebx
c001920e:	5e                   	pop    esi
c001920f:	5f                   	pop    edi
c0019210:	5d                   	pop    ebp
c0019211:	c3                   	ret    

c0019212 <IDE::waitInterrupt(unsigned char)>:
c0019212:	57                   	push   edi
c0019213:	56                   	push   esi
c0019214:	31 f6                	xor    esi,esi
c0019216:	53                   	push   ebx
c0019217:	83 ec 10             	sub    esp,0x10
c001921a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001921e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019222:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019226:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001922b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019232:	84 db                	test   bl,bl
c0019234:	75 33                	jne    c0019269 <IDE::waitInterrupt(unsigned char)+0x57>
c0019236:	52                   	push   edx
c0019237:	6a 0c                	push   0xc
c0019239:	50                   	push   eax
c001923a:	57                   	push   edi
c001923b:	e8 24 ff ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	a8 01                	test   al,0x1
c0019245:	75 2a                	jne    c0019271 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019247:	f7 c6 04 00 00 00    	test   esi,0x4
c001924d:	75 12                	jne    c0019261 <IDE::waitInterrupt(unsigned char)+0x4f>
c001924f:	83 fe 32             	cmp    esi,0x32
c0019252:	7e 0d                	jle    c0019261 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019254:	83 ec 0c             	sub    esp,0xc
c0019257:	6a 64                	push   0x64
c0019259:	e8 1a a9 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c001925e:	83 c4 10             	add    esp,0x10
c0019261:	83 fe 3c             	cmp    esi,0x3c
c0019264:	74 0b                	je     c0019271 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019266:	46                   	inc    esi
c0019267:	eb bd                	jmp    c0019226 <IDE::waitInterrupt(unsigned char)+0x14>
c0019269:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	88 d8                	mov    al,bl
c0019276:	5b                   	pop    ebx
c0019277:	5e                   	pop    esi
c0019278:	5f                   	pop    edi
c0019279:	c3                   	ret    

c001927a <ideChannel0IRQHandler(regs*, void*)>:
c001927a:	83 ec 10             	sub    esp,0x10
c001927d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019281:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019288:	6a 07                	push   0x7
c001928a:	6a 00                	push   0x0
c001928c:	50                   	push   eax
c001928d:	e8 d2 fe ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019292:	83 c4 1c             	add    esp,0x1c
c0019295:	c3                   	ret    

c0019296 <ideChannel1IRQHandler(regs*, void*)>:
c0019296:	83 ec 10             	sub    esp,0x10
c0019299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001929d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192a4:	6a 07                	push   0x7
c00192a6:	6a 01                	push   0x1
c00192a8:	50                   	push   eax
c00192a9:	e8 b6 fe ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00192ae:	83 c4 1c             	add    esp,0x1c
c00192b1:	c3                   	ret    

c00192b2 <IDE::enableIRQs(unsigned char, bool)>:
c00192b2:	57                   	push   edi
c00192b3:	56                   	push   esi
c00192b4:	be 04 00 00 00       	mov    esi,0x4
c00192b9:	53                   	push   ebx
c00192ba:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192c3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192c8:	0f 94 c0             	sete   al
c00192cb:	01 c0                	add    eax,eax
c00192cd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192d4:	0f b6 c0             	movzx  eax,al
c00192d7:	50                   	push   eax
c00192d8:	6a 0c                	push   0xc
c00192da:	57                   	push   edi
c00192db:	53                   	push   ebx
c00192dc:	e8 c3 fd ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	50                   	push   eax
c00192e5:	6a 0c                	push   0xc
c00192e7:	57                   	push   edi
c00192e8:	53                   	push   ebx
c00192e9:	e8 76 fe ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	4e                   	dec    esi
c00192f2:	75 f0                	jne    c00192e4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192f4:	5b                   	pop    ebx
c00192f5:	5e                   	pop    esi
c00192f6:	5f                   	pop    edi
c00192f7:	c3                   	ret    

c00192f8 <IDE::open(int, int, void*)>:
c00192f8:	55                   	push   ebp
c00192f9:	57                   	push   edi
c00192fa:	56                   	push   esi
c00192fb:	53                   	push   ebx
c00192fc:	83 ec 1c             	sub    esp,0x1c
c00192ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019303:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001930c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019315:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001931c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019323:	0f 85 b0 02 00 00    	jne    c00195d9 <IDE::open(int, int, void*)+0x2e1>
c0019329:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001932f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019333:	83 e0 7f             	and    eax,0x7f
c0019336:	3c 05                	cmp    al,0x5
c0019338:	74 04                	je     c001933e <IDE::open(int, int, void*)+0x46>
c001933a:	3c 0f                	cmp    al,0xf
c001933c:	75 32                	jne    c0019370 <IDE::open(int, int, void*)+0x78>
c001933e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019344:	83 e0 fc             	and    eax,0xfffffffc
c0019347:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001934e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019354:	83 e0 fc             	and    eax,0xfffffffc
c0019357:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001935e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019364:	83 e0 fc             	and    eax,0xfffffffc
c0019367:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001936e:	eb 14                	jmp    c0019384 <IDE::open(int, int, void*)+0x8c>
c0019370:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001937a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019384:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001938b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019392:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019396:	89 c6                	mov    esi,eax
c0019398:	bf f8 0c 00 00       	mov    edi,0xcf8
c001939d:	c1 e6 10             	shl    esi,0x10
c00193a0:	89 e8                	mov    eax,ebp
c00193a2:	89 fa                	mov    edx,edi
c00193a4:	c1 e0 0b             	shl    eax,0xb
c00193a7:	09 f0                	or     eax,esi
c00193a9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193b0:	c1 e6 08             	shl    esi,0x8
c00193b3:	09 c6                	or     esi,eax
c00193b5:	89 f0                	mov    eax,esi
c00193b7:	0d 08 00 00 80       	or     eax,0x80000008
c00193bc:	ef                   	out    dx,eax
c00193bd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193c2:	89 ca                	mov    edx,ecx
c00193c4:	ed                   	in     eax,dx
c00193c5:	c1 e8 10             	shr    eax,0x10
c00193c8:	3d ff ff 00 00       	cmp    eax,0xffff
c00193cd:	0f 84 f5 00 00 00    	je     c00194c8 <IDE::open(int, int, void*)+0x1d0>
c00193d3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193d9:	89 fa                	mov    edx,edi
c00193db:	89 f0                	mov    eax,esi
c00193dd:	ef                   	out    dx,eax
c00193de:	b0 fe                	mov    al,0xfe
c00193e0:	89 ca                	mov    edx,ecx
c00193e2:	ee                   	out    dx,al
c00193e3:	89 f0                	mov    eax,esi
c00193e5:	89 fa                	mov    edx,edi
c00193e7:	ef                   	out    dx,eax
c00193e8:	89 ca                	mov    edx,ecx
c00193ea:	ed                   	in     eax,dx
c00193eb:	3c fe                	cmp    al,0xfe
c00193ed:	0f 85 a9 00 00 00    	jne    c001949c <IDE::open(int, int, void*)+0x1a4>
c00193f3:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c00193f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019400:	74 33                	je     c0019435 <IDE::open(int, int, void*)+0x13d>
c0019402:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019408:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001940c:	40                   	inc    eax
c001940d:	83 ec 0c             	sub    esp,0xc
c0019410:	0f b6 c0             	movzx  eax,al
c0019413:	50                   	push   eax
c0019414:	55                   	push   ebp
c0019415:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019419:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001941f:	51                   	push   ecx
c0019420:	e8 77 53 ff ff       	call   c000e79c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019425:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001942a:	83 c4 1c             	add    esp,0x1c
c001942d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019433:	eb 0a                	jmp    c001943f <IDE::open(int, int, void*)+0x147>
c0019435:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001943f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019446:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001944d:	c1 e1 10             	shl    ecx,0x10
c0019450:	c1 e0 08             	shl    eax,0x8
c0019453:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019458:	09 c1                	or     ecx,eax
c001945a:	89 fa                	mov    edx,edi
c001945c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019463:	c1 e0 0b             	shl    eax,0xb
c0019466:	09 c1                	or     ecx,eax
c0019468:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001946e:	89 c8                	mov    eax,ecx
c0019470:	ef                   	out    dx,eax
c0019471:	be fc 0c 00 00       	mov    esi,0xcfc
c0019476:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001947c:	89 f2                	mov    edx,esi
c001947e:	ee                   	out    dx,al
c001947f:	89 c8                	mov    eax,ecx
c0019481:	89 fa                	mov    edx,edi
c0019483:	ef                   	out    dx,eax
c0019484:	89 f2                	mov    edx,esi
c0019486:	ed                   	in     eax,dx
c0019487:	0f b6 c0             	movzx  eax,al
c001948a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019490:	74 46                	je     c00194d8 <IDE::open(int, int, void*)+0x1e0>
c0019492:	83 ec 0c             	sub    esp,0xc
c0019495:	68 08 f4 01 c0       	push   0xc001f408
c001949a:	eb 34                	jmp    c00194d0 <IDE::open(int, int, void*)+0x1d8>
c001949c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194a5:	75 17                	jne    c00194be <IDE::open(int, int, void*)+0x1c6>
c00194a7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194ac:	74 07                	je     c00194b5 <IDE::open(int, int, void*)+0x1bd>
c00194ae:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194b3:	75 09                	jne    c00194be <IDE::open(int, int, void*)+0x1c6>
c00194b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194bc:	eb 1a                	jmp    c00194d8 <IDE::open(int, int, void*)+0x1e0>
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 10 f4 01 c0       	push   0xc001f410
c00194c6:	eb 08                	jmp    c00194d0 <IDE::open(int, int, void*)+0x1d8>
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	68 41 f4 01 c0       	push   0xc001f441
c00194d0:	e8 ae 6d ff ff       	call   c0010283 <KePanic(char const*)>
c00194d5:	83 c4 10             	add    esp,0x10
c00194d8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194df:	79 1a                	jns    c00194fb <IDE::open(int, int, void*)+0x203>
c00194e1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194e7:	83 e0 fc             	and    eax,0xfffffffc
c00194ea:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194f1:	83 c0 08             	add    eax,0x8
c00194f4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019501:	89 c2                	mov    edx,eax
c0019503:	83 e2 0f             	and    edx,0xf
c0019506:	66 83 fa 08          	cmp    dx,0x8
c001950a:	75 0a                	jne    c0019516 <IDE::open(int, int, void*)+0x21e>
c001950c:	83 e8 02             	sub    eax,0x2
c001950f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019516:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001951c:	89 c2                	mov    edx,eax
c001951e:	83 e2 0f             	and    edx,0xf
c0019521:	66 83 fa 08          	cmp    dx,0x8
c0019525:	75 0a                	jne    c0019531 <IDE::open(int, int, void*)+0x239>
c0019527:	83 e8 02             	sub    eax,0x2
c001952a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019531:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019538:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001953f:	89 d0                	mov    eax,edx
c0019541:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019544:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019548:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001954c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001954f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019554:	0f b6 c9             	movzx  ecx,cl
c0019557:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001955e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019561:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019565:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019569:	8d 50 02             	lea    edx,[eax+0x2]
c001956c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019571:	0f b6 d2             	movzx  edx,dl
c0019574:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001957a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001957d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019581:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019585:	8d 48 03             	lea    ecx,[eax+0x3]
c0019588:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001958d:	0f b6 c9             	movzx  ecx,cl
c0019590:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019596:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019599:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001959d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195a1:	8d 50 04             	lea    edx,[eax+0x4]
c00195a4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195af:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195b6:	66 85 f6             	test   si,si
c00195b9:	74 5b                	je     c0019616 <IDE::open(int, int, void*)+0x31e>
c00195bb:	0f b6 d2             	movzx  edx,dl
c00195be:	83 c0 05             	add    eax,0x5
c00195c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195c8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195cc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195d2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195d7:	eb 3d                	jmp    c0019616 <IDE::open(int, int, void*)+0x31e>
c00195d9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195e6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195ed:	66 05 06 02          	add    ax,0x206
c00195f1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195f8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195ff:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019606:	66 05 06 02          	add    ax,0x206
c001960a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019611:	e9 e5 fe ff ff       	jmp    c00194fb <IDE::open(int, int, void*)+0x203>
c0019616:	50                   	push   eax
c0019617:	50                   	push   eax
c0019618:	6a 00                	push   0x0
c001961a:	53                   	push   ebx
c001961b:	e8 5e fa ff ff       	call   c001907e <IDE::prepareInterrupt(unsigned char)>
c0019620:	5a                   	pop    edx
c0019621:	59                   	pop    ecx
c0019622:	6a 01                	push   0x1
c0019624:	53                   	push   ebx
c0019625:	e8 54 fa ff ff       	call   c001907e <IDE::prepareInterrupt(unsigned char)>
c001962a:	83 c4 0c             	add    esp,0xc
c001962d:	6a 00                	push   0x0
c001962f:	6a 00                	push   0x0
c0019631:	53                   	push   ebx
c0019632:	e8 7b fc ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c0019637:	83 c4 0c             	add    esp,0xc
c001963a:	6a 00                	push   0x0
c001963c:	6a 01                	push   0x1
c001963e:	53                   	push   ebx
c001963f:	e8 6e fc ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001964e:	74 34                	je     c0019684 <IDE::open(int, int, void*)+0x38c>
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	53                   	push   ebx
c0019654:	6a 01                	push   0x1
c0019656:	68 7a 92 01 c0       	push   0xc001927a
c001965b:	6a 0e                	push   0xe
c001965d:	53                   	push   ebx
c001965e:	e8 89 23 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019663:	83 c4 14             	add    esp,0x14
c0019666:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001966c:	53                   	push   ebx
c001966d:	6a 01                	push   0x1
c001966f:	68 96 92 01 c0       	push   0xc0019296
c0019674:	6a 0f                	push   0xf
c0019676:	53                   	push   ebx
c0019677:	e8 70 23 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001967c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019682:	eb 38                	jmp    c00196bc <IDE::open(int, int, void*)+0x3c4>
c0019684:	83 ec 0c             	sub    esp,0xc
c0019687:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019691:	53                   	push   ebx
c0019692:	6a 00                	push   0x0
c0019694:	68 7a 92 01 c0       	push   0xc001927a
c0019699:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001969f:	53                   	push   ebx
c00196a0:	e8 47 23 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a5:	83 c4 14             	add    esp,0x14
c00196a8:	53                   	push   ebx
c00196a9:	6a 00                	push   0x0
c00196ab:	68 96 92 01 c0       	push   0xc0019296
c00196b0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196b6:	53                   	push   ebx
c00196b7:	e8 30 23 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196be:	83 c4 20             	add    esp,0x20
c00196c1:	83 ec 0c             	sub    esp,0xc
c00196c4:	53                   	push   ebx
c00196c5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196c8:	83 c4 0c             	add    esp,0xc
c00196cb:	6a 07                	push   0x7
c00196cd:	6a 00                	push   0x0
c00196cf:	53                   	push   ebx
c00196d0:	e8 8f fa ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00196d5:	83 c4 0c             	add    esp,0xc
c00196d8:	6a 07                	push   0x7
c00196da:	6a 01                	push   0x1
c00196dc:	53                   	push   ebx
c00196dd:	e8 82 fa ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00196e2:	83 c4 0c             	add    esp,0xc
c00196e5:	6a 01                	push   0x1
c00196e7:	6a 00                	push   0x0
c00196e9:	53                   	push   ebx
c00196ea:	e8 c3 fb ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c00196ef:	83 c4 0c             	add    esp,0xc
c00196f2:	6a 01                	push   0x1
c00196f4:	6a 01                	push   0x1
c00196f6:	53                   	push   ebx
c00196f7:	e8 b6 fb ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c00196fc:	83 c4 2c             	add    esp,0x2c
c00196ff:	31 c0                	xor    eax,eax
c0019701:	5b                   	pop    ebx
c0019702:	5e                   	pop    esi
c0019703:	5f                   	pop    edi
c0019704:	5d                   	pop    ebp
c0019705:	c3                   	ret    

c0019706 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019706:	55                   	push   ebp
c0019707:	57                   	push   edi
c0019708:	56                   	push   esi
c0019709:	53                   	push   ebx
c001970a:	83 ec 1c             	sub    esp,0x1c
c001970d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019711:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019715:	8d 50 f8             	lea    edx,[eax-0x8]
c0019718:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001971c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019720:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019724:	80 fa 03             	cmp    dl,0x3
c0019727:	77 5d                	ja     c0019786 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019729:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001972d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019731:	0f b6 db             	movzx  ebx,bl
c0019734:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019737:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001973b:	83 ca 80             	or     edx,0xffffff80
c001973e:	0f b6 d2             	movzx  edx,dl
c0019741:	52                   	push   edx
c0019742:	6a 0c                	push   0xc
c0019744:	53                   	push   ebx
c0019745:	56                   	push   esi
c0019746:	e8 59 f9 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001974b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019754:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019758:	0f b6 c0             	movzx  eax,al
c001975b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001975f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019761:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019766:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001976a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001976e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019772:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001977a:	83 c4 2c             	add    esp,0x2c
c001977d:	5b                   	pop    ebx
c001977e:	5e                   	pop    esi
c001977f:	5f                   	pop    edi
c0019780:	5d                   	pop    ebp
c0019781:	e9 1e f9 ff ff       	jmp    c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019786:	3c 07                	cmp    al,0x7
c0019788:	77 10                	ja     c001979a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001978a:	0f b6 db             	movzx  ebx,bl
c001978d:	0f b6 d0             	movzx  edx,al
c0019790:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019798:	eb 2d                	jmp    c00197c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001979a:	3c 0d                	cmp    al,0xd
c001979c:	77 13                	ja     c00197b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001979e:	0f b6 db             	movzx  ebx,bl
c00197a1:	0f b6 c0             	movzx  eax,al
c00197a4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197ab:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197af:	eb 16                	jmp    c00197c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197b1:	3c 15                	cmp    al,0x15
c00197b3:	77 14                	ja     c00197c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197b5:	0f b6 db             	movzx  ebx,bl
c00197b8:	0f b6 c0             	movzx  eax,al
c00197bb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197c3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197c7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197c9:	83 c4 1c             	add    esp,0x1c
c00197cc:	5b                   	pop    ebx
c00197cd:	5e                   	pop    esi
c00197ce:	5f                   	pop    edi
c00197cf:	5d                   	pop    ebp
c00197d0:	c3                   	ret    
c00197d1:	90                   	nop

c00197d2 <IDE::detect()>:
c00197d2:	55                   	push   ebp
c00197d3:	57                   	push   edi
c00197d4:	56                   	push   esi
c00197d5:	53                   	push   ebx
c00197d6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197dc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197e3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197ea:	0f 85 97 02 00 00    	jne    c0019a87 <IDE::detect()+0x2b5>
c00197f0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197f7:	31 f6                	xor    esi,esi
c00197f9:	31 ed                	xor    ebp,ebp
c00197fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019803:	89 e8                	mov    eax,ebp
c0019805:	c1 e0 06             	shl    eax,0x6
c0019808:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019810:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019814:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019818:	c1 e0 04             	shl    eax,0x4
c001981b:	83 c8 a0             	or     eax,0xffffffa0
c001981e:	0f b6 c0             	movzx  eax,al
c0019821:	50                   	push   eax
c0019822:	6a 06                	push   0x6
c0019824:	56                   	push   esi
c0019825:	53                   	push   ebx
c0019826:	e8 79 f8 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001982b:	83 c4 0c             	add    esp,0xc
c001982e:	6a 0c                	push   0xc
c0019830:	56                   	push   esi
c0019831:	53                   	push   ebx
c0019832:	e8 2d f9 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019837:	83 c4 0c             	add    esp,0xc
c001983a:	6a 0c                	push   0xc
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	e8 21 f9 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019843:	83 c4 0c             	add    esp,0xc
c0019846:	6a 0c                	push   0xc
c0019848:	56                   	push   esi
c0019849:	53                   	push   ebx
c001984a:	e8 15 f9 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001984f:	83 c4 0c             	add    esp,0xc
c0019852:	6a 0c                	push   0xc
c0019854:	56                   	push   esi
c0019855:	53                   	push   ebx
c0019856:	e8 09 f9 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001985b:	68 ec 00 00 00       	push   0xec
c0019860:	6a 07                	push   0x7
c0019862:	56                   	push   esi
c0019863:	53                   	push   ebx
c0019864:	e8 3b f8 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019869:	83 c4 1c             	add    esp,0x1c
c001986c:	6a 0c                	push   0xc
c001986e:	56                   	push   esi
c001986f:	53                   	push   ebx
c0019870:	e8 ef f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019875:	83 c4 0c             	add    esp,0xc
c0019878:	6a 0c                	push   0xc
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	e8 e3 f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019881:	83 c4 0c             	add    esp,0xc
c0019884:	6a 0c                	push   0xc
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	e8 d7 f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	6a 0c                	push   0xc
c0019892:	56                   	push   esi
c0019893:	53                   	push   ebx
c0019894:	e8 cb f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019899:	83 c4 0c             	add    esp,0xc
c001989c:	6a 0c                	push   0xc
c001989e:	56                   	push   esi
c001989f:	53                   	push   ebx
c00198a0:	e8 bf f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	84 c0                	test   al,al
c00198aa:	0f 84 5f 01 00 00    	je     c0019a0f <IDE::detect()+0x23d>
c00198b0:	31 ff                	xor    edi,edi
c00198b2:	50                   	push   eax
c00198b3:	6a 0c                	push   0xc
c00198b5:	56                   	push   esi
c00198b6:	53                   	push   ebx
c00198b7:	e8 a8 f8 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	a8 01                	test   al,0x1
c00198c1:	0f 85 69 01 00 00    	jne    c0019a30 <IDE::detect()+0x25e>
c00198c7:	84 c0                	test   al,al
c00198c9:	78 04                	js     c00198cf <IDE::detect()+0xfd>
c00198cb:	a8 08                	test   al,0x8
c00198cd:	75 23                	jne    c00198f2 <IDE::detect()+0x120>
c00198cf:	47                   	inc    edi
c00198d0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198d6:	7e da                	jle    c00198b2 <IDE::detect()+0xe0>
c00198d8:	83 ec 0c             	sub    esp,0xc
c00198db:	6a 32                	push   0x32
c00198dd:	e8 96 a2 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c00198e2:	83 c4 10             	add    esp,0x10
c00198e5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198eb:	75 c5                	jne    c00198b2 <IDE::detect()+0xe0>
c00198ed:	e9 3e 01 00 00       	jmp    c0019a30 <IDE::detect()+0x25e>
c00198f2:	31 c9                	xor    ecx,ecx
c00198f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198f8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198fc:	83 ec 0c             	sub    esp,0xc
c00198ff:	68 80 00 00 00       	push   0x80
c0019904:	57                   	push   edi
c0019905:	6a 00                	push   0x0
c0019907:	56                   	push   esi
c0019908:	53                   	push   ebx
c0019909:	e8 f8 fd ff ff       	call   c0019706 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001990e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019913:	89 e8                	mov    eax,ebp
c0019915:	89 d1                	mov    ecx,edx
c0019917:	c1 e0 06             	shl    eax,0x6
c001991a:	01 d8                	add    eax,ebx
c001991c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019923:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001992a:	89 f2                	mov    edx,esi
c001992c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019932:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019936:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001993c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019940:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019947:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001994f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019956:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001995e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019964:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001996b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019971:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019975:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019979:	83 c4 20             	add    esp,0x20
c001997c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001997f:	83 c0 02             	add    eax,0x2
c0019982:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019988:	83 c7 02             	add    edi,0x2
c001998b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001998e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019994:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019998:	75 e2                	jne    c001997c <IDE::detect()+0x1aa>
c001999a:	89 e8                	mov    eax,ebp
c001999c:	c1 e0 06             	shl    eax,0x6
c001999f:	01 d8                	add    eax,ebx
c00199a1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199a7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199ae:	66 c1 ea 09          	shr    dx,0x9
c00199b2:	83 e2 01             	and    edx,0x1
c00199b5:	84 c9                	test   cl,cl
c00199b7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199bd:	75 22                	jne    c00199e1 <IDE::detect()+0x20f>
c00199bf:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199c6:	74 46                	je     c0019a0e <IDE::detect()+0x23c>
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	68 7c 01 00 00       	push   0x17c
c00199d0:	e8 e4 dd fe ff       	call   c00077b9 <malloc>
c00199d5:	89 c7                	mov    edi,eax
c00199d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00199da:	e8 11 05 00 00       	call   c0019ef0 <ATA::ATA()>
c00199df:	eb 17                	jmp    c00199f8 <IDE::detect()+0x226>
c00199e1:	83 ec 0c             	sub    esp,0xc
c00199e4:	68 84 01 00 00       	push   0x184
c00199e9:	e8 cb dd fe ff       	call   c00077b9 <malloc>
c00199ee:	89 c7                	mov    edi,eax
c00199f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199f3:	e8 f0 0a 00 00       	call   c001a4e8 <ATAPI::ATAPI()>
c00199f8:	5a                   	pop    edx
c00199f9:	59                   	pop    ecx
c00199fa:	57                   	push   edi
c00199fb:	53                   	push   ebx
c00199fc:	e8 3f 20 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c0019a01:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a03:	53                   	push   ebx
c0019a04:	55                   	push   ebp
c0019a05:	6a 00                	push   0x0
c0019a07:	57                   	push   edi
c0019a08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a0b:	83 c4 20             	add    esp,0x20
c0019a0e:	45                   	inc    ebp
c0019a0f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a14:	74 0d                	je     c0019a23 <IDE::detect()+0x251>
c0019a16:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a1e:	e9 e0 fd ff ff       	jmp    c0019803 <IDE::detect()+0x31>
c0019a23:	4e                   	dec    esi
c0019a24:	74 61                	je     c0019a87 <IDE::detect()+0x2b5>
c0019a26:	be 01 00 00 00       	mov    esi,0x1
c0019a2b:	e9 cb fd ff ff       	jmp    c00197fb <IDE::detect()+0x29>
c0019a30:	50                   	push   eax
c0019a31:	6a 04                	push   0x4
c0019a33:	56                   	push   esi
c0019a34:	53                   	push   ebx
c0019a35:	e8 2a f7 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019a3a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a3e:	83 c4 0c             	add    esp,0xc
c0019a41:	6a 05                	push   0x5
c0019a43:	56                   	push   esi
c0019a44:	53                   	push   ebx
c0019a45:	e8 1a f7 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019a4a:	83 c4 10             	add    esp,0x10
c0019a4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a51:	80 fa 14             	cmp    dl,0x14
c0019a54:	75 04                	jne    c0019a5a <IDE::detect()+0x288>
c0019a56:	3c eb                	cmp    al,0xeb
c0019a58:	eb 07                	jmp    c0019a61 <IDE::detect()+0x28f>
c0019a5a:	3c 96                	cmp    al,0x96
c0019a5c:	75 b1                	jne    c0019a0f <IDE::detect()+0x23d>
c0019a5e:	80 fa 69             	cmp    dl,0x69
c0019a61:	75 ac                	jne    c0019a0f <IDE::detect()+0x23d>
c0019a63:	68 a1 00 00 00       	push   0xa1
c0019a68:	6a 07                	push   0x7
c0019a6a:	56                   	push   esi
c0019a6b:	53                   	push   ebx
c0019a6c:	e8 33 f6 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a71:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a78:	e8 fb a0 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c0019a7d:	83 c4 10             	add    esp,0x10
c0019a80:	b1 01                	mov    cl,0x1
c0019a82:	e9 6d fe ff ff       	jmp    c00198f4 <IDE::detect()+0x122>
c0019a87:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a8d:	5b                   	pop    ebx
c0019a8e:	5e                   	pop    esi
c0019a8f:	5f                   	pop    edi
c0019a90:	5d                   	pop    ebp
c0019a91:	c3                   	ret    

c0019a92 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a92:	55                   	push   ebp
c0019a93:	57                   	push   edi
c0019a94:	56                   	push   esi
c0019a95:	53                   	push   ebx
c0019a96:	83 ec 1c             	sub    esp,0x1c
c0019a99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a9d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019aa1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019aa5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019aa9:	88 c3                	mov    bl,al
c0019aab:	84 c0                	test   al,al
c0019aad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ab1:	0f 84 81 00 00 00    	je     c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab7:	83 ec 0c             	sub    esp,0xc
c0019aba:	68 6b f4 01 c0       	push   0xc001f46b
c0019abf:	e8 3f 0b ff ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019acb:	3c 01                	cmp    al,0x1
c0019acd:	74 63                	je     c0019b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019acf:	3c 02                	cmp    al,0x2
c0019ad1:	75 53                	jne    c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019ad3:	01 f6                	add    esi,esi
c0019ad5:	09 ee                	or     esi,ebp
c0019ad7:	50                   	push   eax
c0019ad8:	89 f0                	mov    eax,esi
c0019ada:	6a 01                	push   0x1
c0019adc:	0f b6 f0             	movzx  esi,al
c0019adf:	c1 e6 06             	shl    esi,0x6
c0019ae2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019aea:	50                   	push   eax
c0019aeb:	57                   	push   edi
c0019aec:	e8 73 f6 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019af1:	83 c4 10             	add    esp,0x10
c0019af4:	a8 01                	test   al,0x1
c0019af6:	74 02                	je     c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019af8:	b3 07                	mov    bl,0x7
c0019afa:	a8 02                	test   al,0x2
c0019afc:	74 02                	je     c0019b00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019afe:	b3 03                	mov    bl,0x3
c0019b00:	a8 04                	test   al,0x4
c0019b02:	74 02                	je     c0019b06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b04:	b3 14                	mov    bl,0x14
c0019b06:	a8 08                	test   al,0x8
c0019b08:	74 02                	je     c0019b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b0a:	b3 03                	mov    bl,0x3
c0019b0c:	a8 10                	test   al,0x10
c0019b0e:	74 02                	je     c0019b12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b10:	b3 15                	mov    bl,0x15
c0019b12:	a8 20                	test   al,0x20
c0019b14:	74 02                	je     c0019b18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b16:	b3 03                	mov    bl,0x3
c0019b18:	a8 40                	test   al,0x40
c0019b1a:	74 02                	je     c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b1c:	b3 16                	mov    bl,0x16
c0019b1e:	84 c0                	test   al,al
c0019b20:	79 16                	jns    c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b22:	b3 0d                	mov    bl,0xd
c0019b24:	eb 12                	jmp    c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b26:	3c 03                	cmp    al,0x3
c0019b28:	74 0c                	je     c0019b36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b2a:	3c 04                	cmp    al,0x4
c0019b2c:	75 0a                	jne    c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b2e:	b3 08                	mov    bl,0x8
c0019b30:	eb 06                	jmp    c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b32:	b3 13                	mov    bl,0x13
c0019b34:	eb 02                	jmp    c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b36:	b3 17                	mov    bl,0x17
c0019b38:	83 c4 1c             	add    esp,0x1c
c0019b3b:	88 d8                	mov    al,bl
c0019b3d:	5b                   	pop    ebx
c0019b3e:	5e                   	pop    esi
c0019b3f:	5f                   	pop    edi
c0019b40:	5d                   	pop    ebp
c0019b41:	c3                   	ret    

c0019b42 <IDE::polling(unsigned char, unsigned int)>:
c0019b42:	55                   	push   ebp
c0019b43:	bd 04 00 00 00       	mov    ebp,0x4
c0019b48:	57                   	push   edi
c0019b49:	56                   	push   esi
c0019b4a:	53                   	push   ebx
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b52:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b56:	0f b6 f3             	movzx  esi,bl
c0019b59:	52                   	push   edx
c0019b5a:	6a 0c                	push   0xc
c0019b5c:	56                   	push   esi
c0019b5d:	57                   	push   edi
c0019b5e:	e8 01 f6 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	4d                   	dec    ebp
c0019b67:	75 ed                	jne    c0019b56 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b69:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b6e:	50                   	push   eax
c0019b6f:	6a 0c                	push   0xc
c0019b71:	56                   	push   esi
c0019b72:	57                   	push   edi
c0019b73:	e8 ec f5 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	a8 01                	test   al,0x1
c0019b7d:	75 17                	jne    c0019b96 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b7f:	a8 20                	test   al,0x20
c0019b81:	75 0f                	jne    c0019b92 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b83:	4b                   	dec    ebx
c0019b84:	74 10                	je     c0019b96 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b86:	84 c0                	test   al,al
c0019b88:	78 e4                	js     c0019b6e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b8a:	a8 08                	test   al,0x8
c0019b8c:	74 e0                	je     c0019b6e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b8e:	31 c0                	xor    eax,eax
c0019b90:	eb 06                	jmp    c0019b98 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b92:	b0 01                	mov    al,0x1
c0019b94:	eb 02                	jmp    c0019b98 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b96:	b0 02                	mov    al,0x2
c0019b98:	83 c4 0c             	add    esp,0xc
c0019b9b:	5b                   	pop    ebx
c0019b9c:	5e                   	pop    esi
c0019b9d:	5f                   	pop    edi
c0019b9e:	5d                   	pop    ebp
c0019b9f:	c3                   	ret    

c0019ba0 <SATABus::close(int, int, void*)>:
c0019ba0:	31 c0                	xor    eax,eax
c0019ba2:	c3                   	ret    
c0019ba3:	90                   	nop

c0019ba4 <SATABus::detect()>:
c0019ba4:	c3                   	ret    
c0019ba5:	90                   	nop

c0019ba6 <SATABus::SATABus()>:
c0019ba6:	83 ec 0c             	sub    esp,0xc
c0019ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bad:	83 ec 08             	sub    esp,0x8
c0019bb0:	68 a4 f4 01 c0       	push   0xc001f4a4
c0019bb5:	50                   	push   eax
c0019bb6:	e8 c9 21 ff ff       	call   c000bd84 <HardDiskController::HardDiskController(char const*)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c0019bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc7:	89 10                	mov    DWORD PTR [eax],edx
c0019bc9:	83 ec 0c             	sub    esp,0xc
c0019bcc:	6a 50                	push   0x50
c0019bce:	e8 80 df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	89 c2                	mov    edx,eax
c0019bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bdc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	6a 50                	push   0x50
c0019be7:	e8 99 f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019bec:	83 c4 10             	add    esp,0x10
c0019bef:	89 c2                	mov    edx,eax
c0019bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019bfb:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019c00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c04:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c0e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	6a 03                	push   0x3
c0019c19:	6a 50                	push   0x50
c0019c1b:	51                   	push   ecx
c0019c1c:	52                   	push   edx
c0019c1d:	50                   	push   eax
c0019c1e:	e8 cf ff fe ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c23:	83 c4 20             	add    esp,0x20
c0019c26:	90                   	nop
c0019c27:	83 c4 0c             	add    esp,0xc
c0019c2a:	c3                   	ret    
c0019c2b:	90                   	nop

c0019c2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c30:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c36:	09 c2                	or     edx,eax
c0019c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c44:	31 c0                	xor    eax,eax
c0019c46:	c1 e9 08             	shr    ecx,0x8
c0019c49:	83 e1 0f             	and    ecx,0xf
c0019c4c:	39 c8                	cmp    eax,ecx
c0019c4e:	74 0a                	je     c0019c5a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c50:	f6 c2 01             	test   dl,0x1
c0019c53:	74 08                	je     c0019c5d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c55:	d1 ea                	shr    edx,1
c0019c57:	40                   	inc    eax
c0019c58:	eb f2                	jmp    c0019c4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c5a:	83 c8 ff             	or     eax,0xffffffff
c0019c5d:	c3                   	ret    

c0019c5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c62:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c65:	89 c2                	mov    edx,eax
c0019c67:	c1 ea 08             	shr    edx,0x8
c0019c6a:	83 e2 0f             	and    edx,0xf
c0019c6d:	fe ca                	dec    dl
c0019c6f:	75 31                	jne    c0019ca2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c71:	83 e0 0f             	and    eax,0xf
c0019c74:	3c 03                	cmp    al,0x3
c0019c76:	75 2a                	jne    c0019ca2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c78:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c7b:	b8 02 00 00 00       	mov    eax,0x2
c0019c80:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c86:	74 1c                	je     c0019ca4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c88:	b8 04 00 00 00       	mov    eax,0x4
c0019c8d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c93:	74 0f                	je     c0019ca4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c95:	31 c0                	xor    eax,eax
c0019c97:	83 fa 03             	cmp    edx,0x3
c0019c9a:	0f 94 c0             	sete   al
c0019c9d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019ca1:	c3                   	ret    
c0019ca2:	31 c0                	xor    eax,eax
c0019ca4:	c3                   	ret    
c0019ca5:	90                   	nop

c0019ca6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019ca6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019caa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cad:	0f ba e2 0f          	bt     edx,0xf
c0019cb1:	72 f7                	jb     c0019caa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019cb3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb6:	83 ca 10             	or     edx,0x10
c0019cb9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cbc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cbf:	83 ca 01             	or     edx,0x1
c0019cc2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc5:	c3                   	ret    

c0019cc6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ccd:	83 e2 fe             	and    edx,0xfffffffe
c0019cd0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd6:	83 e2 ef             	and    edx,0xffffffef
c0019cd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cdf:	0f ba e2 0e          	bt     edx,0xe
c0019ce3:	72 f7                	jb     c0019cdc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ce5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce8:	0f ba e2 0f          	bt     edx,0xf
c0019cec:	72 ee                	jb     c0019cdc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cee:	c3                   	ret    
c0019cef:	90                   	nop

c0019cf0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019cf0:	55                   	push   ebp
c0019cf1:	57                   	push   edi
c0019cf2:	56                   	push   esi
c0019cf3:	53                   	push   ebx
c0019cf4:	83 ec 1c             	sub    esp,0x1c
c0019cf7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019cfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cff:	53                   	push   ebx
c0019d00:	56                   	push   esi
c0019d01:	e8 c0 ff ff ff       	call   c0019cc6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d06:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d0a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	c1 e5 0a             	shl    ebp,0xa
c0019d16:	01 e8                	add    eax,ebp
c0019d18:	89 03                	mov    DWORD PTR [ebx],eax
c0019d1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d1c:	68 00 04 00 00       	push   0x400
c0019d21:	6a 00                	push   0x0
c0019d23:	50                   	push   eax
c0019d24:	e8 a7 67 fe ff       	call   c00004d0 <memset>
c0019d29:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d2f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d33:	01 e8                	add    eax,ebp
c0019d35:	83 c4 1c             	add    esp,0x1c
c0019d38:	89 03                	mov    DWORD PTR [ebx],eax
c0019d3a:	c1 e2 08             	shl    edx,0x8
c0019d3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d44:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d4a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d50:	01 f8                	add    eax,edi
c0019d52:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d58:	68 00 01 00 00       	push   0x100
c0019d5d:	6a 00                	push   0x0
c0019d5f:	50                   	push   eax
c0019d60:	e8 6b 67 fe ff       	call   c00004d0 <memset>
c0019d65:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d6b:	01 fa                	add    edx,edi
c0019d6d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d71:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d74:	c1 e7 0d             	shl    edi,0xd
c0019d77:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d7e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d84:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d8e:	31 ff                	xor    edi,edi
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d9d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019da3:	83 c5 20             	add    ebp,0x20
c0019da6:	01 f8                	add    eax,edi
c0019da8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dab:	52                   	push   edx
c0019dac:	68 00 01 00 00       	push   0x100
c0019db1:	6a 00                	push   0x0
c0019db3:	50                   	push   eax
c0019db4:	e8 17 67 fe ff       	call   c00004d0 <memset>
c0019db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dc6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019dcd:	01 f8                	add    eax,edi
c0019dcf:	81 c7 00 01 00 00    	add    edi,0x100
c0019dd5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dd8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dde:	75 b3                	jne    c0019d93 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019de0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019de7:	50                   	push   eax
c0019de8:	50                   	push   eax
c0019de9:	53                   	push   ebx
c0019dea:	56                   	push   esi
c0019deb:	e8 b6 fe ff ff       	call   c0019ca6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019df0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019df7:	83 c4 2c             	add    esp,0x2c
c0019dfa:	5b                   	pop    ebx
c0019dfb:	5e                   	pop    esi
c0019dfc:	5f                   	pop    edi
c0019dfd:	5d                   	pop    ebp
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop

c0019e00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e00:	55                   	push   ebp
c0019e01:	57                   	push   edi
c0019e02:	56                   	push   esi
c0019e03:	53                   	push   ebx
c0019e04:	31 db                	xor    ebx,ebx
c0019e06:	83 ec 0c             	sub    esp,0xc
c0019e09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e11:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e14:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e1a:	74 7a                	je     c0019e96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e20:	89 d8                	mov    eax,ebx
c0019e22:	c1 e0 07             	shl    eax,0x7
c0019e25:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e2c:	55                   	push   ebp
c0019e2d:	56                   	push   esi
c0019e2e:	e8 2b fe ff ff       	call   c0019c5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e33:	5a                   	pop    edx
c0019e34:	83 f8 01             	cmp    eax,0x1
c0019e37:	59                   	pop    ecx
c0019e38:	75 21                	jne    c0019e5b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e3a:	50                   	push   eax
c0019e3b:	53                   	push   ebx
c0019e3c:	55                   	push   ebp
c0019e3d:	56                   	push   esi
c0019e3e:	e8 ad fe ff ff       	call   c0019cf0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e43:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e4a:	e8 6a d9 fe ff       	call   c00077b9 <malloc>
c0019e4f:	89 c5                	mov    ebp,eax
c0019e51:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e54:	e8 43 0d 00 00       	call   c001ab9c <SATA::SATA()>
c0019e59:	eb 24                	jmp    c0019e7f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e5b:	83 f8 04             	cmp    eax,0x4
c0019e5e:	75 36                	jne    c0019e96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e60:	51                   	push   ecx
c0019e61:	53                   	push   ebx
c0019e62:	55                   	push   ebp
c0019e63:	56                   	push   esi
c0019e64:	e8 87 fe ff ff       	call   c0019cf0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e69:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e70:	e8 44 d9 fe ff       	call   c00077b9 <malloc>
c0019e75:	89 c5                	mov    ebp,eax
c0019e77:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e7a:	e8 79 10 00 00       	call   c001aef8 <SATAPI::SATAPI()>
c0019e7f:	58                   	pop    eax
c0019e80:	5a                   	pop    edx
c0019e81:	55                   	push   ebp
c0019e82:	56                   	push   esi
c0019e83:	e8 b8 1b ff ff       	call   c000ba40 <Device::addChild(Device*)>
c0019e88:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e8b:	56                   	push   esi
c0019e8c:	6a 00                	push   0x0
c0019e8e:	53                   	push   ebx
c0019e8f:	55                   	push   ebp
c0019e90:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e93:	83 c4 20             	add    esp,0x20
c0019e96:	d1 ef                	shr    edi,1
c0019e98:	43                   	inc    ebx
c0019e99:	83 fb 20             	cmp    ebx,0x20
c0019e9c:	0f 85 72 ff ff ff    	jne    c0019e14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019ea2:	83 c4 0c             	add    esp,0xc
c0019ea5:	5b                   	pop    ebx
c0019ea6:	5e                   	pop    esi
c0019ea7:	5f                   	pop    edi
c0019ea8:	5d                   	pop    ebp
c0019ea9:	c3                   	ret    

c0019eaa <SATABus::open(int, int, void*)>:
c0019eaa:	83 ec 14             	sub    esp,0x14
c0019ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019eb1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019eb7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ebd:	52                   	push   edx
c0019ebe:	50                   	push   eax
c0019ebf:	e8 3c ff ff ff       	call   c0019e00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019ec4:	31 c0                	xor    eax,eax
c0019ec6:	83 c4 1c             	add    esp,0x1c
c0019ec9:	c3                   	ret    

c0019eca <ATA::close(int, int, void*)>:
c0019eca:	83 ec 0c             	sub    esp,0xc
c0019ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ed1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ed7:	85 c0                	test   eax,eax
c0019ed9:	74 0c                	je     c0019ee7 <ATA::close(int, int, void*)+0x1d>
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ee0:	50                   	push   eax
c0019ee1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	31 c0                	xor    eax,eax
c0019ee9:	83 c4 0c             	add    esp,0xc
c0019eec:	c3                   	ret    
c0019eed:	90                   	nop

c0019eee <ATA::powerSaving(PowerSavingLevel)>:
c0019eee:	c3                   	ret    
c0019eef:	90                   	nop

c0019ef0 <ATA::ATA()>:
c0019ef0:	83 ec 0c             	sub    esp,0xc
c0019ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef7:	83 ec 04             	sub    esp,0x4
c0019efa:	68 00 02 00 00       	push   0x200
c0019eff:	68 9d f5 01 c0       	push   0xc001f59d
c0019f04:	50                   	push   eax
c0019f05:	e8 04 1f ff ff       	call   c000be0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	ba 10 f5 01 c0       	mov    edx,0xc001f510
c0019f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f16:	89 10                	mov    DWORD PTR [eax],edx
c0019f18:	90                   	nop
c0019f19:	83 c4 0c             	add    esp,0xc
c0019f1c:	c3                   	ret    
c0019f1d:	90                   	nop

c0019f1e <ATA::flush(bool)>:
c0019f1e:	53                   	push   ebx
c0019f1f:	83 ec 08             	sub    esp,0x8
c0019f22:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f2b:	19 c0                	sbb    eax,eax
c0019f2d:	83 e0 fd             	and    eax,0xfffffffd
c0019f30:	05 ea 00 00 00       	add    eax,0xea
c0019f35:	50                   	push   eax
c0019f36:	6a 07                	push   0x7
c0019f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f3f:	50                   	push   eax
c0019f40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f46:	e8 59 f1 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f4b:	83 c4 0c             	add    esp,0xc
c0019f4e:	6a 00                	push   0x0
c0019f50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f57:	50                   	push   eax
c0019f58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f5e:	e8 df fb ff ff       	call   c0019b42 <IDE::polling(unsigned char, unsigned int)>
c0019f63:	83 c4 18             	add    esp,0x18
c0019f66:	5b                   	pop    ebx
c0019f67:	c3                   	ret    

c0019f68 <ATA::readyForCommand()>:
c0019f68:	56                   	push   esi
c0019f69:	53                   	push   ebx
c0019f6a:	53                   	push   ebx
c0019f6b:	31 db                	xor    ebx,ebx
c0019f6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f71:	51                   	push   ecx
c0019f72:	6a 0c                	push   0xc
c0019f74:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f7b:	50                   	push   eax
c0019f7c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f82:	e8 dd f1 ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	a8 88                	test   al,0x88
c0019f8c:	74 1f                	je     c0019fad <ATA::readyForCommand()+0x45>
c0019f8e:	43                   	inc    ebx
c0019f8f:	83 fb 63             	cmp    ebx,0x63
c0019f92:	7e dd                	jle    c0019f71 <ATA::readyForCommand()+0x9>
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	6a 0a                	push   0xa
c0019f99:	e8 da 9b ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fa7:	75 c8                	jne    c0019f71 <ATA::readyForCommand()+0x9>
c0019fa9:	31 c0                	xor    eax,eax
c0019fab:	eb 02                	jmp    c0019faf <ATA::readyForCommand()+0x47>
c0019fad:	b0 01                	mov    al,0x1
c0019faf:	5a                   	pop    edx
c0019fb0:	5b                   	pop    ebx
c0019fb1:	5e                   	pop    esi
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <ATA::access(unsigned long long, int, void*, bool)>:
c0019fb4:	55                   	push   ebp
c0019fb5:	57                   	push   edi
c0019fb6:	56                   	push   esi
c0019fb7:	53                   	push   ebx
c0019fb8:	83 ec 2c             	sub    esp,0x2c
c0019fbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fbf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fc3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fcb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fcf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fd3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fd7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fe1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fe7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019feb:	c1 e0 06             	shl    eax,0x6
c0019fee:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019ff6:	74 5d                	je     c001a055 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019ff8:	89 fa                	mov    edx,edi
c0019ffa:	89 f0                	mov    eax,esi
c0019ffc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a000:	c1 ea 1c             	shr    edx,0x1c
c001a003:	89 d1                	mov    ecx,edx
c001a005:	09 c1                	or     ecx,eax
c001a007:	74 25                	je     c001a02e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a009:	31 ed                	xor    ebp,ebp
c001a00b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a012:	89 fa                	mov    edx,edi
c001a014:	89 f0                	mov    eax,esi
c001a016:	0f ad d0             	shrd   eax,edx,cl
c001a019:	d3 ea                	shr    edx,cl
c001a01b:	f6 c1 20             	test   cl,0x20
c001a01e:	74 02                	je     c001a022 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a020:	89 d0                	mov    eax,edx
c001a022:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a026:	45                   	inc    ebp
c001a027:	83 fd 06             	cmp    ebp,0x6
c001a02a:	75 df                	jne    c001a00b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a02c:	eb 76                	jmp    c001a0a4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a02e:	89 f0                	mov    eax,esi
c001a030:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a035:	89 fa                	mov    edx,edi
c001a037:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a03e:	0f ac d0 10          	shrd   eax,edx,0x10
c001a042:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a047:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a04b:	c1 ee 18             	shr    esi,0x18
c001a04e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a053:	eb 56                	jmp    c001a0ab <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a055:	6a 00                	push   0x0
c001a057:	6a 3f                	push   0x3f
c001a059:	57                   	push   edi
c001a05a:	56                   	push   esi
c001a05b:	e8 70 22 00 00       	call   c001c2d0 <__umoddi3>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	40                   	inc    eax
c001a064:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a068:	6a 00                	push   0x0
c001a06a:	68 f0 03 00 00       	push   0x3f0
c001a06f:	57                   	push   edi
c001a070:	56                   	push   esi
c001a071:	e8 5a 21 00 00       	call   c001c1d0 <__udivdi3>
c001a076:	83 c4 10             	add    esp,0x10
c001a079:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a07e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a085:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a08a:	6a 00                	push   0x0
c001a08c:	6a 3f                	push   0x3f
c001a08e:	57                   	push   edi
c001a08f:	56                   	push   esi
c001a090:	e8 3b 21 00 00       	call   c001c1d0 <__udivdi3>
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	89 c6                	mov    esi,eax
c001a09a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a09f:	83 e6 0f             	and    esi,0xf
c001a0a2:	eb 07                	jmp    c001a0ab <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0a4:	31 f6                	xor    esi,esi
c001a0a6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0ab:	bf 01 00 00 00       	mov    edi,0x1
c001a0b0:	50                   	push   eax
c001a0b1:	6a 00                	push   0x0
c001a0b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ba:	50                   	push   eax
c001a0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0bf:	e8 ee f1 ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c001a0c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0c7:	e8 9c fe ff ff       	call   c0019f68 <ATA::readyForCommand()>
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	84 c0                	test   al,al
c001a0d1:	0f 84 4e 02 00 00    	je     c001a325 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0d7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0e3:	c1 e0 04             	shl    eax,0x4
c001a0e6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0ed:	09 c6                	or     esi,eax
c001a0ef:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0f4:	75 05                	jne    c001a0fb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0f6:	83 ce a0             	or     esi,0xffffffa0
c001a0f9:	eb 03                	jmp    c001a0fe <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0fb:	83 ce e0             	or     esi,0xffffffe0
c001a0fe:	89 f0                	mov    eax,esi
c001a100:	0f b6 f0             	movzx  esi,al
c001a103:	56                   	push   esi
c001a104:	6a 06                	push   0x6
c001a106:	51                   	push   ecx
c001a107:	52                   	push   edx
c001a108:	e8 97 ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	6a 00                	push   0x0
c001a112:	6a 01                	push   0x1
c001a114:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a11b:	50                   	push   eax
c001a11c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a122:	e8 7d ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a127:	83 c4 10             	add    esp,0x10
c001a12a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a12f:	75 6e                	jne    c001a19f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a131:	6a 00                	push   0x0
c001a133:	6a 08                	push   0x8
c001a135:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a13c:	50                   	push   eax
c001a13d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a143:	e8 5c ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a148:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a14d:	50                   	push   eax
c001a14e:	6a 09                	push   0x9
c001a150:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a157:	50                   	push   eax
c001a158:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a15e:	e8 41 ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a163:	83 c4 20             	add    esp,0x20
c001a166:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a16b:	50                   	push   eax
c001a16c:	6a 0a                	push   0xa
c001a16e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a175:	50                   	push   eax
c001a176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17c:	e8 23 ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a181:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a186:	50                   	push   eax
c001a187:	6a 0b                	push   0xb
c001a189:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a190:	50                   	push   eax
c001a191:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a197:	e8 08 ef ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a19c:	83 c4 20             	add    esp,0x20
c001a19f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1a4:	50                   	push   eax
c001a1a5:	6a 02                	push   0x2
c001a1a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ae:	50                   	push   eax
c001a1af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b5:	e8 ea ee ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ba:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1bf:	50                   	push   eax
c001a1c0:	6a 03                	push   0x3
c001a1c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c9:	50                   	push   eax
c001a1ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d0:	e8 cf ee ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d5:	83 c4 20             	add    esp,0x20
c001a1d8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1dd:	50                   	push   eax
c001a1de:	6a 04                	push   0x4
c001a1e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e7:	50                   	push   eax
c001a1e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ee:	e8 b1 ee ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1f8:	50                   	push   eax
c001a1f9:	6a 05                	push   0x5
c001a1fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a202:	50                   	push   eax
c001a203:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a209:	e8 96 ee ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20e:	83 c4 20             	add    esp,0x20
c001a211:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a216:	0f 94 c0             	sete   al
c001a219:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a21e:	74 09                	je     c001a229 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a220:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a227:	eb 07                	jmp    c001a230 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a229:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a230:	0f b6 c0             	movzx  eax,al
c001a233:	50                   	push   eax
c001a234:	6a 07                	push   0x7
c001a236:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a23d:	50                   	push   eax
c001a23e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a244:	e8 5b ee ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a249:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a24d:	83 c4 10             	add    esp,0x10
c001a250:	85 f6                	test   esi,esi
c001a252:	0f 84 ae 00 00 00    	je     c001a306 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a258:	50                   	push   eax
c001a259:	6a 01                	push   0x1
c001a25b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a262:	50                   	push   eax
c001a263:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a269:	e8 d4 f8 ff ff       	call   c0019b42 <IDE::polling(unsigned char, unsigned int)>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a277:	84 c0                	test   al,al
c001a279:	74 20                	je     c001a29b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a27b:	0f b6 f8             	movzx  edi,al
c001a27e:	0f b6 d2             	movzx  edx,dl
c001a281:	57                   	push   edi
c001a282:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a289:	50                   	push   eax
c001a28a:	52                   	push   edx
c001a28b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a291:	e8 fc f7 ff ff       	call   c0019a92 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a296:	e9 87 00 00 00       	jmp    c001a322 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a29b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2a0:	74 33                	je     c001a2d5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2a2:	31 ed                	xor    ebp,ebp
c001a2a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2a8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2ac:	50                   	push   eax
c001a2ad:	50                   	push   eax
c001a2ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2b5:	50                   	push   eax
c001a2b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2bc:	e8 d1 ed ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a2c1:	89 c2                	mov    edx,eax
c001a2c3:	89 f8                	mov    eax,edi
c001a2c5:	66 ef                	out    dx,ax
c001a2c7:	45                   	inc    ebp
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2d1:	75 d1                	jne    c001a2a4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2d3:	eb 23                	jmp    c001a2f8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2d5:	0f b6 d2             	movzx  edx,dl
c001a2d8:	51                   	push   ecx
c001a2d9:	51                   	push   ecx
c001a2da:	52                   	push   edx
c001a2db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2e1:	e8 ac ed ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a2e6:	b9 00 01 00 00       	mov    ecx,0x100
c001a2eb:	89 c2                	mov    edx,eax
c001a2ed:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2f1:	fc                   	cld    
c001a2f2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a300:	4e                   	dec    esi
c001a301:	e9 4a ff ff ff       	jmp    c001a250 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a306:	31 ff                	xor    edi,edi
c001a308:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a30d:	74 16                	je     c001a325 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a30f:	50                   	push   eax
c001a310:	50                   	push   eax
c001a311:	31 c0                	xor    eax,eax
c001a313:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a318:	0f 94 c0             	sete   al
c001a31b:	50                   	push   eax
c001a31c:	53                   	push   ebx
c001a31d:	e8 fc fb ff ff       	call   c0019f1e <ATA::flush(bool)>
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	83 c4 2c             	add    esp,0x2c
c001a328:	89 f8                	mov    eax,edi
c001a32a:	5b                   	pop    ebx
c001a32b:	5e                   	pop    esi
c001a32c:	5f                   	pop    edi
c001a32d:	5d                   	pop    ebp
c001a32e:	c3                   	ret    
c001a32f:	90                   	nop

c001a330 <ATA::read(unsigned long long, int, void*)>:
c001a330:	57                   	push   edi
c001a331:	b8 04 00 00 00       	mov    eax,0x4
c001a336:	56                   	push   esi
c001a337:	53                   	push   ebx
c001a338:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a33c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a340:	8d 7a ff             	lea    edi,[edx-0x1]
c001a343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a347:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a34b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a351:	77 25                	ja     c001a378 <ATA::read(unsigned long long, int, void*)+0x48>
c001a353:	b8 06 00 00 00       	mov    eax,0x6
c001a358:	85 f6                	test   esi,esi
c001a35a:	74 1c                	je     c001a378 <ATA::read(unsigned long long, int, void*)+0x48>
c001a35c:	50                   	push   eax
c001a35d:	50                   	push   eax
c001a35e:	6a 00                	push   0x0
c001a360:	56                   	push   esi
c001a361:	52                   	push   edx
c001a362:	53                   	push   ebx
c001a363:	51                   	push   ecx
c001a364:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a368:	e8 47 fc ff ff       	call   c0019fb4 <ATA::access(unsigned long long, int, void*, bool)>
c001a36d:	83 c4 20             	add    esp,0x20
c001a370:	85 c0                	test   eax,eax
c001a372:	0f 95 c0             	setne  al
c001a375:	0f b6 c0             	movzx  eax,al
c001a378:	5b                   	pop    ebx
c001a379:	5e                   	pop    esi
c001a37a:	5f                   	pop    edi
c001a37b:	c3                   	ret    

c001a37c <ATA::write(unsigned long long, int, void*)>:
c001a37c:	57                   	push   edi
c001a37d:	b8 04 00 00 00       	mov    eax,0x4
c001a382:	56                   	push   esi
c001a383:	53                   	push   ebx
c001a384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a388:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a38c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a38f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a393:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a397:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a39d:	77 25                	ja     c001a3c4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a39f:	b8 06 00 00 00       	mov    eax,0x6
c001a3a4:	85 f6                	test   esi,esi
c001a3a6:	74 1c                	je     c001a3c4 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3a8:	50                   	push   eax
c001a3a9:	50                   	push   eax
c001a3aa:	6a 01                	push   0x1
c001a3ac:	56                   	push   esi
c001a3ad:	52                   	push   edx
c001a3ae:	53                   	push   ebx
c001a3af:	51                   	push   ecx
c001a3b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3b4:	e8 fb fb ff ff       	call   c0019fb4 <ATA::access(unsigned long long, int, void*, bool)>
c001a3b9:	83 c4 20             	add    esp,0x20
c001a3bc:	85 c0                	test   eax,eax
c001a3be:	0f 95 c0             	setne  al
c001a3c1:	0f b6 c0             	movzx  eax,al
c001a3c4:	5b                   	pop    ebx
c001a3c5:	5e                   	pop    esi
c001a3c6:	5f                   	pop    edi
c001a3c7:	c3                   	ret    

c001a3c8 <ATA::detectCHS()>:
c001a3c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3cc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3d2:	c1 e0 06             	shl    eax,0x6
c001a3d5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3db:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3e5:	c7 44 24 04 f4 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f4f4
c001a3ed:	e9 91 5e ff ff       	jmp    c0010283 <KePanic(char const*)>

c001a3f2 <ATA::open(int, int, void*)>:
c001a3f2:	53                   	push   ebx
c001a3f3:	83 ec 08             	sub    esp,0x8
c001a3f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a402:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a408:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a40e:	c1 e0 06             	shl    eax,0x6
c001a411:	01 d0                	add    eax,edx
c001a413:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a41a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a420:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a427:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a431:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a437:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a43e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a445:	75 0c                	jne    c001a453 <ATA::open(int, int, void*)+0x61>
c001a447:	83 ec 0c             	sub    esp,0xc
c001a44a:	53                   	push   ebx
c001a44b:	e8 78 ff ff ff       	call   c001a3c8 <ATA::detectCHS()>
c001a450:	83 c4 10             	add    esp,0x10
c001a453:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a459:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a45f:	c1 e0 06             	shl    eax,0x6
c001a462:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a469:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a473:	d1 e8                	shr    eax,1
c001a475:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a47b:	6a 04                	push   0x4
c001a47d:	6a 0c                	push   0xc
c001a47f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a486:	50                   	push   eax
c001a487:	52                   	push   edx
c001a488:	e8 17 ec ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a48d:	90                   	nop
c001a48e:	90                   	nop
c001a48f:	6a 00                	push   0x0
c001a491:	6a 0c                	push   0xc
c001a493:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a49a:	50                   	push   eax
c001a49b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4a1:	e8 fe eb ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4a6:	83 c4 14             	add    esp,0x14
c001a4a9:	53                   	push   ebx
c001a4aa:	e8 c7 19 ff ff       	call   c000be76 <PhysicalDisk::startCache()>
c001a4af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4b2:	e8 77 2a ff ff       	call   c000cf2e <createPartitionsForDisk(PhysicalDisk*)>
c001a4b7:	31 c0                	xor    eax,eax
c001a4b9:	83 c4 18             	add    esp,0x18
c001a4bc:	5b                   	pop    ebx
c001a4bd:	c3                   	ret    

c001a4be <ATAPI::write(unsigned long long, int, void*)>:
c001a4be:	b8 03 00 00 00       	mov    eax,0x3
c001a4c3:	c3                   	ret    

c001a4c4 <ATAPI::close(int, int, void*)>:
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4d1:	85 c0                	test   eax,eax
c001a4d3:	74 0c                	je     c001a4e1 <ATAPI::close(int, int, void*)+0x1d>
c001a4d5:	83 ec 0c             	sub    esp,0xc
c001a4d8:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4da:	50                   	push   eax
c001a4db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4de:	83 c4 10             	add    esp,0x10
c001a4e1:	31 c0                	xor    eax,eax
c001a4e3:	83 c4 0c             	add    esp,0xc
c001a4e6:	c3                   	ret    
c001a4e7:	90                   	nop

c001a4e8 <ATAPI::ATAPI()>:
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ef:	83 ec 04             	sub    esp,0x4
c001a4f2:	68 00 08 00 00       	push   0x800
c001a4f7:	68 3d f6 01 c0       	push   0xc001f63d
c001a4fc:	50                   	push   eax
c001a4fd:	e8 0c 19 ff ff       	call   c000be0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a502:	83 c4 10             	add    esp,0x10
c001a505:	ba 58 f5 01 c0       	mov    edx,0xc001f558
c001a50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a50e:	89 10                	mov    DWORD PTR [eax],edx
c001a510:	90                   	nop
c001a511:	83 c4 0c             	add    esp,0xc
c001a514:	c3                   	ret    
c001a515:	90                   	nop

c001a516 <ATAPI::readyForCommand()>:
c001a516:	56                   	push   esi
c001a517:	53                   	push   ebx
c001a518:	53                   	push   ebx
c001a519:	31 db                	xor    ebx,ebx
c001a51b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a51f:	51                   	push   ecx
c001a520:	6a 0c                	push   0xc
c001a522:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a529:	50                   	push   eax
c001a52a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a530:	e8 2f ec ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	a8 88                	test   al,0x88
c001a53a:	74 25                	je     c001a561 <ATAPI::readyForCommand()+0x4b>
c001a53c:	43                   	inc    ebx
c001a53d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a543:	7e da                	jle    c001a51f <ATAPI::readyForCommand()+0x9>
c001a545:	83 ec 0c             	sub    esp,0xc
c001a548:	68 5e 01 00 00       	push   0x15e
c001a54d:	e8 26 96 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a55b:	75 c2                	jne    c001a51f <ATAPI::readyForCommand()+0x9>
c001a55d:	31 c0                	xor    eax,eax
c001a55f:	eb 02                	jmp    c001a563 <ATAPI::readyForCommand()+0x4d>
c001a561:	b0 01                	mov    al,0x1
c001a563:	5a                   	pop    edx
c001a564:	5b                   	pop    ebx
c001a565:	5e                   	pop    esi
c001a566:	c3                   	ret    
c001a567:	90                   	nop

c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a568:	55                   	push   ebp
c001a569:	57                   	push   edi
c001a56a:	56                   	push   esi
c001a56b:	53                   	push   ebx
c001a56c:	83 ec 20             	sub    esp,0x20
c001a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a573:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a577:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a57b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a57f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a583:	6a 01                	push   0x1
c001a585:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a58c:	50                   	push   eax
c001a58d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a593:	e8 1a ed ff ff       	call   c00192b2 <IDE::enableIRQs(unsigned char, bool)>
c001a598:	5e                   	pop    esi
c001a599:	58                   	pop    eax
c001a59a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5a1:	50                   	push   eax
c001a5a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5a8:	e8 d1 ea ff ff       	call   c001907e <IDE::prepareInterrupt(unsigned char)>
c001a5ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5b0:	e8 61 ff ff ff       	call   c001a516 <ATAPI::readyForCommand()>
c001a5b5:	83 c4 10             	add    esp,0x10
c001a5b8:	84 c0                	test   al,al
c001a5ba:	75 0a                	jne    c001a5c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5bc:	bb 01 00 00 00       	mov    ebx,0x1
c001a5c1:	e9 57 02 00 00       	jmp    c001a81d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5c6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5cc:	c1 e0 04             	shl    eax,0x4
c001a5cf:	0f b6 c0             	movzx  eax,al
c001a5d2:	50                   	push   eax
c001a5d3:	6a 06                	push   0x6
c001a5d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5dc:	50                   	push   eax
c001a5dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e3:	e8 bc ea ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5e8:	6a 00                	push   0x0
c001a5ea:	6a 01                	push   0x1
c001a5ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f3:	50                   	push   eax
c001a5f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5fa:	e8 a5 ea ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5ff:	83 c4 20             	add    esp,0x20
c001a602:	0f b6 c3             	movzx  eax,bl
c001a605:	0f b6 df             	movzx  ebx,bh
c001a608:	50                   	push   eax
c001a609:	6a 04                	push   0x4
c001a60b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a612:	50                   	push   eax
c001a613:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a619:	e8 86 ea ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a61e:	53                   	push   ebx
c001a61f:	6a 05                	push   0x5
c001a621:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a628:	50                   	push   eax
c001a629:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a62f:	e8 70 ea ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a634:	83 c4 20             	add    esp,0x20
c001a637:	68 a0 00 00 00       	push   0xa0
c001a63c:	6a 07                	push   0x7
c001a63e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a645:	50                   	push   eax
c001a646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64c:	e8 53 ea ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a651:	83 c4 0c             	add    esp,0xc
c001a654:	6a 01                	push   0x1
c001a656:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a65d:	50                   	push   eax
c001a65e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a664:	e8 d9 f4 ff ff       	call   c0019b42 <IDE::polling(unsigned char, unsigned int)>
c001a669:	83 c4 10             	add    esp,0x10
c001a66c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a672:	84 c0                	test   al,al
c001a674:	74 23                	je     c001a699 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a676:	0f b6 d8             	movzx  ebx,al
c001a679:	0f b6 d2             	movzx  edx,dl
c001a67c:	53                   	push   ebx
c001a67d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a684:	50                   	push   eax
c001a685:	52                   	push   edx
c001a686:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a68c:	e8 01 f4 ff ff       	call   c0019a92 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	e9 84 01 00 00       	jmp    c001a81d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a699:	0f b6 d2             	movzx  edx,dl
c001a69c:	53                   	push   ebx
c001a69d:	53                   	push   ebx
c001a69e:	52                   	push   edx
c001a69f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a5:	e8 e8 e9 ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a6aa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6ae:	b9 06 00 00 00       	mov    ecx,0x6
c001a6b3:	89 c2                	mov    edx,eax
c001a6b5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6b8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6bc:	83 c4 10             	add    esp,0x10
c001a6bf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6c5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6cc:	85 db                	test   ebx,ebx
c001a6ce:	0f 84 ec 00 00 00    	je     c001a7c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6d4:	51                   	push   ecx
c001a6d5:	51                   	push   ecx
c001a6d6:	52                   	push   edx
c001a6d7:	50                   	push   eax
c001a6d8:	e8 35 eb ff ff       	call   c0019212 <IDE::waitInterrupt(unsigned char)>
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	84 c0                	test   al,al
c001a6e2:	0f 84 d4 fe ff ff    	je     c001a5bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6e8:	56                   	push   esi
c001a6e9:	56                   	push   esi
c001a6ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6f1:	50                   	push   eax
c001a6f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f8:	e8 81 e9 ff ff       	call   c001907e <IDE::prepareInterrupt(unsigned char)>
c001a6fd:	83 c4 0c             	add    esp,0xc
c001a700:	6a 04                	push   0x4
c001a702:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a709:	50                   	push   eax
c001a70a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a710:	e8 4f ea ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001a715:	83 c4 0c             	add    esp,0xc
c001a718:	89 c6                	mov    esi,eax
c001a71a:	6a 05                	push   0x5
c001a71c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a723:	50                   	push   eax
c001a724:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a72a:	e8 35 ea ff ff       	call   c0019164 <IDE::read(unsigned char, unsigned char)>
c001a72f:	89 f1                	mov    ecx,esi
c001a731:	0f b6 c0             	movzx  eax,al
c001a734:	0f b6 f1             	movzx  esi,cl
c001a737:	c1 e0 08             	shl    eax,0x8
c001a73a:	09 c6                	or     esi,eax
c001a73c:	d1 fe                	sar    esi,1
c001a73e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a742:	83 c4 10             	add    esp,0x10
c001a745:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a74a:	74 41                	je     c001a78d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a74c:	31 c9                	xor    ecx,ecx
c001a74e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a754:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a75b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a75f:	75 0a                	jne    c001a76b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a761:	01 c9                	add    ecx,ecx
c001a763:	01 cd                	add    ebp,ecx
c001a765:	4b                   	dec    ebx
c001a766:	e9 54 ff ff ff       	jmp    c001a6bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a76b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a770:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a774:	51                   	push   ecx
c001a775:	51                   	push   ecx
c001a776:	52                   	push   edx
c001a777:	50                   	push   eax
c001a778:	e8 15 e9 ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a77d:	89 c2                	mov    edx,eax
c001a77f:	89 f0                	mov    eax,esi
c001a781:	66 ef                	out    dx,ax
c001a783:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	41                   	inc    ecx
c001a78b:	eb c1                	jmp    c001a74e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a78d:	31 f6                	xor    esi,esi
c001a78f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a795:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a79c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a7a0:	75 06                	jne    c001a7a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a7a2:	01 f6                	add    esi,esi
c001a7a4:	01 f5                	add    ebp,esi
c001a7a6:	eb bd                	jmp    c001a765 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7a8:	51                   	push   ecx
c001a7a9:	51                   	push   ecx
c001a7aa:	52                   	push   edx
c001a7ab:	50                   	push   eax
c001a7ac:	e8 e1 e8 ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a7b1:	89 c2                	mov    edx,eax
c001a7b3:	66 ed                	in     ax,dx
c001a7b5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7ba:	83 c4 10             	add    esp,0x10
c001a7bd:	46                   	inc    esi
c001a7be:	eb cf                	jmp    c001a78f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7c0:	51                   	push   ecx
c001a7c1:	51                   	push   ecx
c001a7c2:	52                   	push   edx
c001a7c3:	50                   	push   eax
c001a7c4:	e8 49 ea ff ff       	call   c0019212 <IDE::waitInterrupt(unsigned char)>
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	84 c0                	test   al,al
c001a7ce:	0f 84 e8 fd ff ff    	je     c001a5bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7d4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7d9:	52                   	push   edx
c001a7da:	52                   	push   edx
c001a7db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7e2:	50                   	push   eax
c001a7e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7e9:	e8 90 e8 ff ff       	call   c001907e <IDE::prepareInterrupt(unsigned char)>
c001a7ee:	83 c4 10             	add    esp,0x10
c001a7f1:	50                   	push   eax
c001a7f2:	50                   	push   eax
c001a7f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7fa:	50                   	push   eax
c001a7fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a801:	e8 8c e8 ff ff       	call   c0019092 <IDE::getBase(unsigned char)>
c001a806:	8d 50 07             	lea    edx,[eax+0x7]
c001a809:	ec                   	in     al,dx
c001a80a:	83 c4 10             	add    esp,0x10
c001a80d:	a8 88                	test   al,0x88
c001a80f:	74 0a                	je     c001a81b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a811:	4b                   	dec    ebx
c001a812:	75 dd                	jne    c001a7f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a814:	bb 02 00 00 00       	mov    ebx,0x2
c001a819:	eb 02                	jmp    c001a81d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a81b:	31 db                	xor    ebx,ebx
c001a81d:	83 c4 1c             	add    esp,0x1c
c001a820:	89 d8                	mov    eax,ebx
c001a822:	5b                   	pop    ebx
c001a823:	5e                   	pop    esi
c001a824:	5f                   	pop    edi
c001a825:	5d                   	pop    ebp
c001a826:	c3                   	ret    
c001a827:	90                   	nop

c001a828 <ATAPI::diskRemoved()>:
c001a828:	53                   	push   ebx
c001a829:	83 ec 14             	sub    esp,0x14
c001a82c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a830:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a837:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a83d:	e8 6c 24 ff ff       	call   c000ccae <LogicalDisk::unmount()>
c001a842:	58                   	pop    eax
c001a843:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a849:	e8 a6 2d ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c001a84e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a854:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a858:	83 c4 18             	add    esp,0x18
c001a85b:	5b                   	pop    ebx
c001a85c:	e9 83 2d ff ff       	jmp    c000d5e4 <VCache::invalidateReadBuffer()>
c001a861:	90                   	nop

c001a862 <ATAPI::eject()>:
c001a862:	57                   	push   edi
c001a863:	b9 03 00 00 00       	mov    ecx,0x3
c001a868:	53                   	push   ebx
c001a869:	83 ec 14             	sub    esp,0x14
c001a86c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a870:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a874:	fc                   	cld    
c001a875:	31 c0                	xor    eax,eax
c001a877:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a879:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a87e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a883:	50                   	push   eax
c001a884:	50                   	push   eax
c001a885:	6a 00                	push   0x0
c001a887:	6a 00                	push   0x0
c001a889:	6a 00                	push   0x0
c001a88b:	6a 02                	push   0x2
c001a88d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a891:	50                   	push   eax
c001a892:	53                   	push   ebx
c001a893:	e8 d0 fc ff ff       	call   c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a898:	83 c4 14             	add    esp,0x14
c001a89b:	53                   	push   ebx
c001a89c:	e8 87 ff ff ff       	call   c001a828 <ATAPI::diskRemoved()>
c001a8a1:	83 c4 24             	add    esp,0x24
c001a8a4:	31 c0                	xor    eax,eax
c001a8a6:	5b                   	pop    ebx
c001a8a7:	5f                   	pop    edi
c001a8a8:	c3                   	ret    
c001a8a9:	90                   	nop

c001a8aa <ATAPI::diskInserted()>:
c001a8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ae:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8b5:	c3                   	ret    

c001a8b6 <ATAPI::detectMedia()>:
c001a8b6:	56                   	push   esi
c001a8b7:	53                   	push   ebx
c001a8b8:	83 ec 28             	sub    esp,0x28
c001a8bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8bf:	6a 0c                	push   0xc
c001a8c1:	6a 00                	push   0x0
c001a8c3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8c7:	56                   	push   esi
c001a8c8:	e8 03 5c fe ff       	call   c00004d0 <memset>
c001a8cd:	58                   	pop    eax
c001a8ce:	5a                   	pop    edx
c001a8cf:	6a 00                	push   0x0
c001a8d1:	6a 00                	push   0x0
c001a8d3:	6a 00                	push   0x0
c001a8d5:	6a 00                	push   0x0
c001a8d7:	56                   	push   esi
c001a8d8:	53                   	push   ebx
c001a8d9:	e8 8a fc ff ff       	call   c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8de:	83 c4 1c             	add    esp,0x1c
c001a8e1:	6a 0c                	push   0xc
c001a8e3:	6a 00                	push   0x0
c001a8e5:	56                   	push   esi
c001a8e6:	e8 e5 5b fe ff       	call   c00004d0 <memset>
c001a8eb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8f0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8f5:	59                   	pop    ecx
c001a8f6:	58                   	pop    eax
c001a8f7:	6a 01                	push   0x1
c001a8f9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8fd:	50                   	push   eax
c001a8fe:	6a 00                	push   0x0
c001a900:	6a 12                	push   0x12
c001a902:	56                   	push   esi
c001a903:	53                   	push   ebx
c001a904:	e8 5f fc ff ff       	call   c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a909:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a90d:	83 c4 20             	add    esp,0x20
c001a910:	83 e0 7f             	and    eax,0x7f
c001a913:	3c 70                	cmp    al,0x70
c001a915:	74 15                	je     c001a92c <ATAPI::detectMedia()+0x76>
c001a917:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a91e:	75 0c                	jne    c001a92c <ATAPI::detectMedia()+0x76>
c001a920:	83 ec 0c             	sub    esp,0xc
c001a923:	53                   	push   ebx
c001a924:	e8 81 ff ff ff       	call   c001a8aa <ATAPI::diskInserted()>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a930:	83 e0 0f             	and    eax,0xf
c001a933:	3c 02                	cmp    al,0x2
c001a935:	75 1b                	jne    c001a952 <ATAPI::detectMedia()+0x9c>
c001a937:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a93c:	75 2d                	jne    c001a96b <ATAPI::detectMedia()+0xb5>
c001a93e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a945:	74 24                	je     c001a96b <ATAPI::detectMedia()+0xb5>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	53                   	push   ebx
c001a94b:	e8 d8 fe ff ff       	call   c001a828 <ATAPI::diskRemoved()>
c001a950:	eb 16                	jmp    c001a968 <ATAPI::detectMedia()+0xb2>
c001a952:	84 c0                	test   al,al
c001a954:	75 15                	jne    c001a96b <ATAPI::detectMedia()+0xb5>
c001a956:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a95d:	75 0c                	jne    c001a96b <ATAPI::detectMedia()+0xb5>
c001a95f:	83 ec 0c             	sub    esp,0xc
c001a962:	53                   	push   ebx
c001a963:	e8 42 ff ff ff       	call   c001a8aa <ATAPI::diskInserted()>
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	83 c4 24             	add    esp,0x24
c001a96e:	5b                   	pop    ebx
c001a96f:	5e                   	pop    esi
c001a970:	c3                   	ret    
c001a971:	90                   	nop

c001a972 <ATAPI::open(int, int, void*)>:
c001a972:	56                   	push   esi
c001a973:	53                   	push   ebx
c001a974:	50                   	push   eax
c001a975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a979:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a97d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a981:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a987:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a98d:	c1 e0 06             	shl    eax,0x6
c001a990:	01 d0                	add    eax,edx
c001a992:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a999:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a99f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a9a6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9b0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9b6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9bd:	6a 04                	push   0x4
c001a9bf:	6a 0c                	push   0xc
c001a9c1:	51                   	push   ecx
c001a9c2:	52                   	push   edx
c001a9c3:	e8 dc e6 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9c8:	90                   	nop
c001a9c9:	90                   	nop
c001a9ca:	6a 00                	push   0x0
c001a9cc:	6a 0c                	push   0xc
c001a9ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9d5:	50                   	push   eax
c001a9d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9dc:	e8 c3 e6 ff ff       	call   c00190a4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9e1:	83 c4 14             	add    esp,0x14
c001a9e4:	68 74 01 00 00       	push   0x174
c001a9e9:	e8 cb cd fe ff       	call   c00077b9 <malloc>
c001a9ee:	83 c4 0c             	add    esp,0xc
c001a9f1:	89 c6                	mov    esi,eax
c001a9f3:	6a 00                	push   0x0
c001a9f5:	68 ff ff ff 7f       	push   0x7fffffff
c001a9fa:	6a 00                	push   0x0
c001a9fc:	6a 00                	push   0x0
c001a9fe:	53                   	push   ebx
c001a9ff:	68 f4 f6 01 c0       	push   0xc001f6f4
c001aa04:	50                   	push   eax
c001aa05:	e8 f0 20 ff ff       	call   c000cafa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa0a:	83 c4 14             	add    esp,0x14
c001aa0d:	56                   	push   esi
c001aa0e:	e8 9d 21 ff ff       	call   c000cbb0 <LogicalDisk::assignDriveLetter()>
c001aa13:	5a                   	pop    edx
c001aa14:	0f be c0             	movsx  eax,al
c001aa17:	59                   	pop    ecx
c001aa18:	50                   	push   eax
c001aa19:	68 40 f5 01 c0       	push   0xc001f540
c001aa1e:	e8 e0 fb fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001aa23:	58                   	pop    eax
c001aa24:	5a                   	pop    edx
c001aa25:	56                   	push   esi
c001aa26:	53                   	push   ebx
c001aa27:	e8 14 10 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c001aa2c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa35:	e8 3c 14 ff ff       	call   c000be76 <PhysicalDisk::startCache()>
c001aa3a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa44:	e8 6d fe ff ff       	call   c001a8b6 <ATAPI::detectMedia()>
c001aa49:	83 c4 14             	add    esp,0x14
c001aa4c:	31 c0                	xor    eax,eax
c001aa4e:	5b                   	pop    ebx
c001aa4f:	5e                   	pop    esi
c001aa50:	c3                   	ret    
c001aa51:	90                   	nop

c001aa52 <ATAPI::read(unsigned long long, int, void*)>:
c001aa52:	55                   	push   ebp
c001aa53:	57                   	push   edi
c001aa54:	56                   	push   esi
c001aa55:	53                   	push   ebx
c001aa56:	83 ec 1c             	sub    esp,0x1c
c001aa59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa5d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa61:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa65:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa6c:	74 3c                	je     c001aaaa <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa6e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa72:	b9 03 00 00 00       	mov    ecx,0x3
c001aa77:	fc                   	cld    
c001aa78:	31 c0                	xor    eax,eax
c001aa7a:	0f ce                	bswap  esi
c001aa7c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa7e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa83:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa87:	89 e8                	mov    eax,ebp
c001aa89:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa8d:	50                   	push   eax
c001aa8e:	50                   	push   eax
c001aa8f:	55                   	push   ebp
c001aa90:	c1 e5 0b             	shl    ebp,0xb
c001aa93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa97:	6a 00                	push   0x0
c001aa99:	55                   	push   ebp
c001aa9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa9e:	50                   	push   eax
c001aa9f:	53                   	push   ebx
c001aaa0:	e8 c3 fa ff ff       	call   c001a568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aaa5:	83 c4 20             	add    esp,0x20
c001aaa8:	eb 1a                	jmp    c001aac4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aaaa:	83 ec 0c             	sub    esp,0xc
c001aaad:	53                   	push   ebx
c001aaae:	e8 03 fe ff ff       	call   c001a8b6 <ATAPI::detectMedia()>
c001aab3:	83 c4 10             	add    esp,0x10
c001aab6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aabd:	75 af                	jne    c001aa6e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aabf:	b8 02 00 00 00       	mov    eax,0x2
c001aac4:	83 c4 1c             	add    esp,0x1c
c001aac7:	5b                   	pop    ebx
c001aac8:	5e                   	pop    esi
c001aac9:	5f                   	pop    edi
c001aaca:	5d                   	pop    ebp
c001aacb:	c3                   	ret    

c001aacc <SATA::close(int, int, void*)>:
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aad9:	85 c0                	test   eax,eax
c001aadb:	74 0c                	je     c001aae9 <SATA::close(int, int, void*)+0x1d>
c001aadd:	83 ec 0c             	sub    esp,0xc
c001aae0:	8b 10                	mov    edx,DWORD PTR [eax]
c001aae2:	50                   	push   eax
c001aae3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	31 c0                	xor    eax,eax
c001aaeb:	83 c4 0c             	add    esp,0xc
c001aaee:	c3                   	ret    
c001aaef:	90                   	nop

c001aaf0 <SATA::powerSaving(PowerSavingLevel)>:
c001aaf0:	c3                   	ret    
c001aaf1:	90                   	nop

c001aaf2 <SATA::open(int, int, void*)>:
c001aaf2:	56                   	push   esi
c001aaf3:	53                   	push   ebx
c001aaf4:	50                   	push   eax
c001aaf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aafd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab07:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab0d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab1b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab2b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab32:	e8 5e cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab37:	89 c6                	mov    esi,eax
c001ab39:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab3f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab45:	e8 4b cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab4a:	39 c6                	cmp    esi,eax
c001ab4c:	74 10                	je     c001ab5e <SATA::open(int, int, void*)+0x6c>
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	68 88 f5 01 c0       	push   0xc001f588
c001ab56:	e8 28 57 ff ff       	call   c0010283 <KePanic(char const*)>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	83 ec 0c             	sub    esp,0xc
c001ab61:	6a 02                	push   0x2
c001ab63:	e8 1d e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001ab68:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab6e:	6a 03                	push   0x3
c001ab70:	50                   	push   eax
c001ab71:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab77:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001ab7d:	e8 76 ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab82:	83 c4 14             	add    esp,0x14
c001ab85:	53                   	push   ebx
c001ab86:	e8 eb 12 ff ff       	call   c000be76 <PhysicalDisk::startCache()>
c001ab8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab8e:	e8 9b 23 ff ff       	call   c000cf2e <createPartitionsForDisk(PhysicalDisk*)>
c001ab93:	83 c4 14             	add    esp,0x14
c001ab96:	31 c0                	xor    eax,eax
c001ab98:	5b                   	pop    ebx
c001ab99:	5e                   	pop    esi
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <SATA::SATA()>:
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba3:	83 ec 04             	sub    esp,0x4
c001aba6:	68 00 02 00 00       	push   0x200
c001abab:	68 9c f5 01 c0       	push   0xc001f59c
c001abb0:	50                   	push   eax
c001abb1:	e8 58 12 ff ff       	call   c000be0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	ba 0c f6 01 c0       	mov    edx,0xc001f60c
c001abbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc2:	89 10                	mov    DWORD PTR [eax],edx
c001abc4:	90                   	nop
c001abc5:	83 c4 0c             	add    esp,0xc
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop

c001abca <SATA::access(unsigned long long, int, void*, bool)>:
c001abca:	55                   	push   ebp
c001abcb:	57                   	push   edi
c001abcc:	56                   	push   esi
c001abcd:	53                   	push   ebx
c001abce:	83 ec 2c             	sub    esp,0x2c
c001abd1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abd5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abdd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abe1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abe5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abee:	7e 10                	jle    c001ac00 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abf0:	83 ec 0c             	sub    esp,0xc
c001abf3:	68 ac f5 01 c0       	push   0xc001f5ac
c001abf8:	e8 86 56 ff ff       	call   c0010283 <KePanic(char const*)>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac06:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac16:	89 d0                	mov    eax,edx
c001ac18:	c1 e0 07             	shl    eax,0x7
c001ac1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac1f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac29:	51                   	push   ecx
c001ac2a:	8d 42 02             	lea    eax,[edx+0x2]
c001ac2d:	51                   	push   ecx
c001ac2e:	c1 e0 07             	shl    eax,0x7
c001ac31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac35:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac39:	50                   	push   eax
c001ac3a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac40:	e8 e7 ef ff ff       	call   c0019c2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac55:	0f 84 4f 01 00 00    	je     c001adaa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac5f:	c1 e0 09             	shl    eax,0x9
c001ac62:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac6b:	74 0e                	je     c001ac7b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac6d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac73:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac77:	89 c1                	mov    ecx,eax
c001ac79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac7f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac85:	8d 42 02             	lea    eax,[edx+0x2]
c001ac88:	c1 e0 07             	shl    eax,0x7
c001ac8b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac91:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac97:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aca1:	c1 e1 05             	shl    ecx,0x5
c001aca4:	01 c8                	add    eax,ecx
c001aca6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acaa:	83 e1 01             	and    ecx,0x1
c001acad:	89 ce                	mov    esi,ecx
c001acaf:	8a 08                	mov    cl,BYTE PTR [eax]
c001acb1:	c1 e6 06             	shl    esi,0x6
c001acb4:	83 e1 bf             	and    ecx,0xffffffbf
c001acb7:	09 f1                	or     ecx,esi
c001acb9:	88 08                	mov    BYTE PTR [eax],cl
c001acbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acbd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acc3:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acc9:	89 08                	mov    DWORD PTR [eax],ecx
c001accb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acd1:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001acd7:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acdd:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ace0:	50                   	push   eax
c001ace1:	68 90 00 00 00       	push   0x90
c001ace6:	6a 00                	push   0x0
c001ace8:	56                   	push   esi
c001ace9:	e8 e2 57 fe ff       	call   c00004d0 <memset>
c001acee:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001acf4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001acf8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001acfe:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	48                   	dec    eax
c001ad0a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad0f:	89 c1                	mov    ecx,eax
c001ad11:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad17:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad1c:	09 c8                	or     eax,ecx
c001ad1e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad24:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad27:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad2e:	66 25 00 7f          	and    ax,0x7f00
c001ad32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad36:	66 0d 27 80          	or     ax,0x8027
c001ad3a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad3f:	66 89 06             	mov    WORD PTR [esi],ax
c001ad42:	19 c0                	sbb    eax,eax
c001ad44:	83 e0 f0             	and    eax,0xfffffff0
c001ad47:	83 c0 35             	add    eax,0x35
c001ad4a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad4d:	89 e8                	mov    eax,ebp
c001ad4f:	c1 e8 10             	shr    eax,0x10
c001ad52:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad55:	89 e8                	mov    eax,ebp
c001ad57:	c1 e8 18             	shr    eax,0x18
c001ad5a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad5d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad61:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad68:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad6f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad73:	89 d6                	mov    esi,edx
c001ad75:	31 c0                	xor    eax,eax
c001ad77:	c1 e6 07             	shl    esi,0x7
c001ad7a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad7e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad84:	80 e1 88             	and    cl,0x88
c001ad87:	74 0a                	je     c001ad93 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad89:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad8e:	74 0a                	je     c001ad9a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad90:	40                   	inc    eax
c001ad91:	eb eb                	jmp    c001ad7e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad93:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad98:	75 17                	jne    c001adb1 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad9a:	83 ec 0c             	sub    esp,0xc
c001ad9d:	68 e5 f5 01 c0       	push   0xc001f5e5
c001ada2:	e8 5c f8 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001ada7:	83 c4 10             	add    esp,0x10
c001adaa:	b8 01 00 00 00       	mov    eax,0x1
c001adaf:	eb 5d                	jmp    c001ae0e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adb1:	b8 01 00 00 00       	mov    eax,0x1
c001adb6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001adba:	c1 e2 07             	shl    edx,0x7
c001adbd:	d3 e0                	shl    eax,cl
c001adbf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001adc3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adc9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adcf:	85 c8                	test   eax,ecx
c001add1:	74 16                	je     c001ade9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001add3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001add9:	0f ba e1 1e          	bt     ecx,0x1e
c001addd:	73 ea                	jae    c001adc9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001addf:	83 ec 0c             	sub    esp,0xc
c001ade2:	68 f3 f5 01 c0       	push   0xc001f5f3
c001ade7:	eb b9                	jmp    c001ada2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ade9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001adef:	0f ba e0 1e          	bt     eax,0x1e
c001adf3:	72 b5                	jb     c001adaa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001adf5:	31 c0                	xor    eax,eax
c001adf7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001adfc:	75 10                	jne    c001ae0e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adfe:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae04:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae0e:	83 c4 2c             	add    esp,0x2c
c001ae11:	5b                   	pop    ebx
c001ae12:	5e                   	pop    esi
c001ae13:	5f                   	pop    edi
c001ae14:	5d                   	pop    ebp
c001ae15:	c3                   	ret    

c001ae16 <SATA::read(unsigned long long, int, void*)>:
c001ae16:	57                   	push   edi
c001ae17:	b8 04 00 00 00       	mov    eax,0x4
c001ae1c:	56                   	push   esi
c001ae1d:	53                   	push   ebx
c001ae1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae26:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae2d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae31:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae37:	77 25                	ja     c001ae5e <SATA::read(unsigned long long, int, void*)+0x48>
c001ae39:	b8 06 00 00 00       	mov    eax,0x6
c001ae3e:	85 f6                	test   esi,esi
c001ae40:	74 1c                	je     c001ae5e <SATA::read(unsigned long long, int, void*)+0x48>
c001ae42:	50                   	push   eax
c001ae43:	50                   	push   eax
c001ae44:	6a 00                	push   0x0
c001ae46:	56                   	push   esi
c001ae47:	52                   	push   edx
c001ae48:	53                   	push   ebx
c001ae49:	51                   	push   ecx
c001ae4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae4e:	e8 77 fd ff ff       	call   c001abca <SATA::access(unsigned long long, int, void*, bool)>
c001ae53:	83 c4 20             	add    esp,0x20
c001ae56:	85 c0                	test   eax,eax
c001ae58:	0f 95 c0             	setne  al
c001ae5b:	0f b6 c0             	movzx  eax,al
c001ae5e:	5b                   	pop    ebx
c001ae5f:	5e                   	pop    esi
c001ae60:	5f                   	pop    edi
c001ae61:	c3                   	ret    

c001ae62 <SATA::write(unsigned long long, int, void*)>:
c001ae62:	55                   	push   ebp
c001ae63:	b8 04 00 00 00       	mov    eax,0x4
c001ae68:	57                   	push   edi
c001ae69:	56                   	push   esi
c001ae6a:	53                   	push   ebx
c001ae6b:	83 ec 0c             	sub    esp,0xc
c001ae6e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae76:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae79:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae7d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae81:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae87:	77 3d                	ja     c001aec6 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae89:	b8 06 00 00 00       	mov    eax,0x6
c001ae8e:	85 ed                	test   ebp,ebp
c001ae90:	74 34                	je     c001aec6 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae92:	c1 e3 09             	shl    ebx,0x9
c001ae95:	01 eb                	add    ebx,ebp
c001ae97:	89 d6                	mov    esi,edx
c001ae99:	89 cf                	mov    edi,ecx
c001ae9b:	83 c6 01             	add    esi,0x1
c001ae9e:	83 d7 00             	adc    edi,0x0
c001aea1:	50                   	push   eax
c001aea2:	50                   	push   eax
c001aea3:	6a 01                	push   0x1
c001aea5:	55                   	push   ebp
c001aea6:	81 c5 00 02 00 00    	add    ebp,0x200
c001aeac:	6a 01                	push   0x1
c001aeae:	51                   	push   ecx
c001aeaf:	52                   	push   edx
c001aeb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aeb4:	e8 11 fd ff ff       	call   c001abca <SATA::access(unsigned long long, int, void*, bool)>
c001aeb9:	83 c4 20             	add    esp,0x20
c001aebc:	89 f2                	mov    edx,esi
c001aebe:	89 f9                	mov    ecx,edi
c001aec0:	39 dd                	cmp    ebp,ebx
c001aec2:	75 d3                	jne    c001ae97 <SATA::write(unsigned long long, int, void*)+0x35>
c001aec4:	31 c0                	xor    eax,eax
c001aec6:	83 c4 0c             	add    esp,0xc
c001aec9:	5b                   	pop    ebx
c001aeca:	5e                   	pop    esi
c001aecb:	5f                   	pop    edi
c001aecc:	5d                   	pop    ebp
c001aecd:	c3                   	ret    

c001aece <SATAPI::write(unsigned long long, int, void*)>:
c001aece:	b8 03 00 00 00       	mov    eax,0x3
c001aed3:	c3                   	ret    

c001aed4 <SATAPI::close(int, int, void*)>:
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aee1:	85 c0                	test   eax,eax
c001aee3:	74 0c                	je     c001aef1 <SATAPI::close(int, int, void*)+0x1d>
c001aee5:	83 ec 0c             	sub    esp,0xc
c001aee8:	8b 10                	mov    edx,DWORD PTR [eax]
c001aeea:	50                   	push   eax
c001aeeb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	31 c0                	xor    eax,eax
c001aef3:	83 c4 0c             	add    esp,0xc
c001aef6:	c3                   	ret    
c001aef7:	90                   	nop

c001aef8 <SATAPI::SATAPI()>:
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeff:	83 ec 04             	sub    esp,0x4
c001af02:	68 00 08 00 00       	push   0x800
c001af07:	68 3c f6 01 c0       	push   0xc001f63c
c001af0c:	50                   	push   eax
c001af0d:	e8 fc 0e ff ff       	call   c000be0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	ba 44 f7 01 c0       	mov    edx,0xc001f744
c001af1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1e:	89 10                	mov    DWORD PTR [eax],edx
c001af20:	90                   	nop
c001af21:	83 c4 0c             	add    esp,0xc
c001af24:	c3                   	ret    
c001af25:	90                   	nop

c001af26 <SATAPI::diskRemoved()>:
c001af26:	c3                   	ret    
c001af27:	90                   	nop

c001af28 <SATAPI::diskInserted()>:
c001af28:	83 ec 18             	sub    esp,0x18
c001af2b:	68 48 f6 01 c0       	push   0xc001f648
c001af30:	e8 ce f6 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001af35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af39:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af40:	83 c4 1c             	add    esp,0x1c
c001af43:	c3                   	ret    

c001af44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af44:	55                   	push   ebp
c001af45:	57                   	push   edi
c001af46:	56                   	push   esi
c001af47:	53                   	push   ebx
c001af48:	83 ec 38             	sub    esp,0x38
c001af4b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af4f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af53:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af57:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af5b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af5f:	68 60 f6 01 c0       	push   0xc001f660
c001af64:	e8 9a f6 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001af69:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af79:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af83:	83 c0 02             	add    eax,0x2
c001af86:	c1 e0 07             	shl    eax,0x7
c001af89:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af95:	c1 e0 07             	shl    eax,0x7
c001af98:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af9c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afa0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001afaa:	58                   	pop    eax
c001afab:	5a                   	pop    edx
c001afac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001afb0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afb6:	e8 71 ec ff ff       	call   c0019c2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	b8 01 00 00 00       	mov    eax,0x1
c001afc7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afcc:	0f 84 49 02 00 00    	je     c001b21b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001afd2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001afde:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afe4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afee:	c1 e1 05             	shl    ecx,0x5
c001aff1:	01 c8                	add    eax,ecx
c001aff3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aff5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001affb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b001:	89 08                	mov    DWORD PTR [eax],ecx
c001b003:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b009:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b00f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b015:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b018:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b01b:	50                   	push   eax
c001b01c:	68 90 00 00 00       	push   0x90
c001b021:	6a 00                	push   0x0
c001b023:	53                   	push   ebx
c001b024:	e8 a7 54 fe ff       	call   c00004d0 <memset>
c001b029:	b9 0c 00 00 00       	mov    ecx,0xc
c001b02e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b034:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b03a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b03e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b044:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b048:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b04c:	48                   	dec    eax
c001b04d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b052:	89 c1                	mov    ecx,eax
c001b054:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b05a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b05f:	09 c8                	or     eax,ecx
c001b061:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b067:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b06a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b071:	66 25 00 7f          	and    ax,0x7f00
c001b075:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b079:	66 0d 27 80          	or     ax,0x8027
c001b07d:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b081:	66 89 03             	mov    WORD PTR [ebx],ax
c001b084:	89 d0                	mov    eax,edx
c001b086:	c1 ea 18             	shr    edx,0x18
c001b089:	c1 e8 10             	shr    eax,0x10
c001b08c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b08f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b092:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b096:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b099:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b09d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b0a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0a4:	83 c4 10             	add    esp,0x10
c001b0a7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b0ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0af:	31 c0                	xor    eax,eax
c001b0b1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0b7:	80 e1 88             	and    cl,0x88
c001b0ba:	74 0a                	je     c001b0c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b0bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0c1:	74 0a                	je     c001b0cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b0c3:	40                   	inc    eax
c001b0c4:	eb eb                	jmp    c001b0b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b0c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0cb:	75 43                	jne    c001b110 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b0cd:	83 ec 0c             	sub    esp,0xc
c001b0d0:	68 7a f6 01 c0       	push   0xc001f67a
c001b0d5:	e8 29 f5 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001b0da:	58                   	pop    eax
c001b0db:	5a                   	pop    edx
c001b0dc:	68 8f f6 01 c0       	push   0xc001f68f
c001b0e1:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b0e7:	e8 4a d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b0ec:	59                   	pop    ecx
c001b0ed:	5b                   	pop    ebx
c001b0ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b0f2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0f8:	e8 c9 eb ff ff       	call   c0019cc6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b0fd:	5e                   	pop    esi
c001b0fe:	5f                   	pop    edi
c001b0ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b103:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b109:	e8 98 eb ff ff       	call   c0019ca6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b10e:	eb 48                	jmp    c001b158 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b110:	be 01 00 00 00       	mov    esi,0x1
c001b115:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b119:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b11d:	d3 e6                	shl    esi,cl
c001b11f:	c1 e7 07             	shl    edi,0x7
c001b122:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b128:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b12d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b131:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b137:	85 c6                	test   esi,eax
c001b139:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b13f:	0f 84 a3 00 00 00    	je     c001b1e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b145:	0f ba e0 1e          	bt     eax,0x1e
c001b149:	73 1a                	jae    c001b165 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b14b:	83 ec 0c             	sub    esp,0xc
c001b14e:	68 a1 f6 01 c0       	push   0xc001f6a1
c001b153:	e8 ab f4 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001b158:	83 c4 10             	add    esp,0x10
c001b15b:	b8 01 00 00 00       	mov    eax,0x1
c001b160:	e9 b6 00 00 00       	jmp    c001b21b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b165:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b16b:	83 f8 0d             	cmp    eax,0xd
c001b16e:	77 0a                	ja     c001b17a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b170:	83 ec 0c             	sub    esp,0xc
c001b173:	68 c8 00 00 00       	push   0xc8
c001b178:	eb 28                	jmp    c001b1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b17a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b180:	83 f8 0d             	cmp    eax,0xd
c001b183:	77 0a                	ja     c001b18f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b185:	83 ec 0c             	sub    esp,0xc
c001b188:	68 58 02 00 00       	push   0x258
c001b18d:	eb 13                	jmp    c001b1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b18f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b195:	83 f8 06             	cmp    eax,0x6
c001b198:	77 10                	ja     c001b1aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b19a:	83 ec 0c             	sub    esp,0xc
c001b19d:	68 dc 05 00 00       	push   0x5dc
c001b1a2:	e8 d1 89 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c001b1a7:	83 c4 10             	add    esp,0x10
c001b1aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1ae:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1b1:	75 06                	jne    c001b1b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b1b3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1b7:	74 15                	je     c001b1ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1b9:	83 fb 06             	cmp    ebx,0x6
c001b1bc:	77 10                	ja     c001b1ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1be:	83 ec 0c             	sub    esp,0xc
c001b1c1:	68 c4 09 00 00       	push   0x9c4
c001b1c6:	e8 ad 89 ff ff       	call   c0013b78 <milliTenthSleep(unsigned int)>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	43                   	inc    ebx
c001b1cf:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1d5:	0f 85 56 ff ff ff    	jne    c001b131 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b1db:	83 ec 0c             	sub    esp,0xc
c001b1de:	68 b4 f6 01 c0       	push   0xc001f6b4
c001b1e3:	e9 6b ff ff ff       	jmp    c001b153 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b1e8:	0f ba e0 1e          	bt     eax,0x1e
c001b1ec:	73 0d                	jae    c001b1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	68 c8 f6 01 c0       	push   0xc001f6c8
c001b1f6:	e9 58 ff ff ff       	jmp    c001b153 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b1fb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b200:	74 17                	je     c001b219 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b202:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b207:	74 10                	je     c001b219 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b209:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b20f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b213:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b217:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b219:	31 c0                	xor    eax,eax
c001b21b:	83 c4 2c             	add    esp,0x2c
c001b21e:	5b                   	pop    ebx
c001b21f:	5e                   	pop    esi
c001b220:	5f                   	pop    edi
c001b221:	5d                   	pop    ebp
c001b222:	c3                   	ret    
c001b223:	90                   	nop

c001b224 <SATAPI::eject()>:
c001b224:	57                   	push   edi
c001b225:	b9 03 00 00 00       	mov    ecx,0x3
c001b22a:	83 ec 18             	sub    esp,0x18
c001b22d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b231:	fc                   	cld    
c001b232:	31 c0                	xor    eax,eax
c001b234:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b236:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b23b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b240:	50                   	push   eax
c001b241:	6a 00                	push   0x0
c001b243:	6a 00                	push   0x0
c001b245:	6a 00                	push   0x0
c001b247:	6a 00                	push   0x0
c001b249:	6a 02                	push   0x2
c001b24b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b24f:	50                   	push   eax
c001b250:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b254:	e8 eb fc ff ff       	call   c001af44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b259:	31 c0                	xor    eax,eax
c001b25b:	83 c4 38             	add    esp,0x38
c001b25e:	5f                   	pop    edi
c001b25f:	c3                   	ret    

c001b260 <SATAPI::detectMedia()>:
c001b260:	53                   	push   ebx
c001b261:	83 ec 14             	sub    esp,0x14
c001b264:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b268:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b26e:	e8 81 23 ff ff       	call   c000d5f4 <VCache::writeWriteBuffer()>
c001b273:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b279:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b27d:	83 c4 18             	add    esp,0x18
c001b280:	5b                   	pop    ebx
c001b281:	e9 5e 23 ff ff       	jmp    c000d5e4 <VCache::invalidateReadBuffer()>

c001b286 <SATAPI::open(int, int, void*)>:
c001b286:	56                   	push   esi
c001b287:	53                   	push   ebx
c001b288:	51                   	push   ecx
c001b289:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b28d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b291:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b29b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b2a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2af:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b2b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b2bf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b2c6:	e8 ca c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2cb:	89 c6                	mov    esi,eax
c001b2cd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b2d3:	81 c6 00 10 00 00    	add    esi,0x1000
c001b2d9:	e8 b7 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2de:	39 c6                	cmp    esi,eax
c001b2e0:	74 10                	je     c001b2f2 <SATAPI::open(int, int, void*)+0x6c>
c001b2e2:	83 ec 0c             	sub    esp,0xc
c001b2e5:	68 dd f6 01 c0       	push   0xc001f6dd
c001b2ea:	e8 94 4f ff ff       	call   c0010283 <KePanic(char const*)>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	83 ec 0c             	sub    esp,0xc
c001b2f5:	6a 02                	push   0x2
c001b2f7:	e8 89 df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b2fc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b302:	6a 03                	push   0x3
c001b304:	50                   	push   eax
c001b305:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b30b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b311:	e8 e2 e5 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b316:	83 c4 14             	add    esp,0x14
c001b319:	68 74 01 00 00       	push   0x174
c001b31e:	e8 96 c4 fe ff       	call   c00077b9 <malloc>
c001b323:	83 c4 0c             	add    esp,0xc
c001b326:	89 c6                	mov    esi,eax
c001b328:	6a 00                	push   0x0
c001b32a:	68 ff ff ff 7f       	push   0x7fffffff
c001b32f:	6a 00                	push   0x0
c001b331:	6a 00                	push   0x0
c001b333:	53                   	push   ebx
c001b334:	68 f3 f6 01 c0       	push   0xc001f6f3
c001b339:	50                   	push   eax
c001b33a:	e8 bb 17 ff ff       	call   c000cafa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b33f:	83 c4 14             	add    esp,0x14
c001b342:	56                   	push   esi
c001b343:	e8 68 18 ff ff       	call   c000cbb0 <LogicalDisk::assignDriveLetter()>
c001b348:	5a                   	pop    edx
c001b349:	0f be c0             	movsx  eax,al
c001b34c:	59                   	pop    ecx
c001b34d:	50                   	push   eax
c001b34e:	68 40 f5 01 c0       	push   0xc001f540
c001b353:	e8 ab f2 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001b358:	58                   	pop    eax
c001b359:	5a                   	pop    edx
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	e8 df 06 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c001b361:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b36a:	e8 07 0b ff ff       	call   c000be76 <PhysicalDisk::startCache()>
c001b36f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b376:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b379:	e8 e2 fe ff ff       	call   c001b260 <SATAPI::detectMedia()>
c001b37e:	83 c4 14             	add    esp,0x14
c001b381:	31 c0                	xor    eax,eax
c001b383:	5b                   	pop    ebx
c001b384:	5e                   	pop    esi
c001b385:	c3                   	ret    

c001b386 <SATAPI::read(unsigned long long, int, void*)>:
c001b386:	57                   	push   edi
c001b387:	56                   	push   esi
c001b388:	53                   	push   ebx
c001b389:	83 ec 3c             	sub    esp,0x3c
c001b38c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b390:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b394:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b398:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b39c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b3a4:	68 01 f7 01 c0       	push   0xc001f701
c001b3a9:	e8 55 f2 fe ff       	call   c000a603 <Dbg::kprintf(char const*, ...)>
c001b3ae:	83 c4 10             	add    esp,0x10
c001b3b1:	83 fe 04             	cmp    esi,0x4
c001b3b4:	7e 10                	jle    c001b3c6 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3b6:	83 ec 0c             	sub    esp,0xc
c001b3b9:	68 12 f7 01 c0       	push   0xc001f712
c001b3be:	e8 c0 4e ff ff       	call   c0010283 <KePanic(char const*)>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3cc:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3d2:	51                   	push   ecx
c001b3d3:	50                   	push   eax
c001b3d4:	83 c0 02             	add    eax,0x2
c001b3d7:	c1 e0 07             	shl    eax,0x7
c001b3da:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3e0:	50                   	push   eax
c001b3e1:	52                   	push   edx
c001b3e2:	e8 09 e9 ff ff       	call   c0019cf0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3e7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3eb:	b9 03 00 00 00       	mov    ecx,0x3
c001b3f0:	fc                   	cld    
c001b3f1:	31 c0                	xor    eax,eax
c001b3f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3f5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3fa:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3ff:	83 c4 0c             	add    esp,0xc
c001b402:	6a 00                	push   0x0
c001b404:	6a 00                	push   0x0
c001b406:	6a 00                	push   0x0
c001b408:	6a 00                	push   0x0
c001b40a:	6a 02                	push   0x2
c001b40c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b410:	50                   	push   eax
c001b411:	53                   	push   ebx
c001b412:	e8 2d fb ff ff       	call   c001af44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b417:	83 c4 20             	add    esp,0x20
c001b41a:	85 c0                	test   eax,eax
c001b41c:	75 44                	jne    c001b462 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b41e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b422:	b9 03 00 00 00       	mov    ecx,0x3
c001b427:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b42d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b432:	0f c8                	bswap  eax
c001b434:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b438:	89 f0                	mov    eax,esi
c001b43a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b43e:	50                   	push   eax
c001b43f:	56                   	push   esi
c001b440:	c1 e6 0b             	shl    esi,0xb
c001b443:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b447:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b44b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b44f:	56                   	push   esi
c001b450:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b454:	50                   	push   eax
c001b455:	53                   	push   ebx
c001b456:	e8 e9 fa ff ff       	call   c001af44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b45b:	83 c4 20             	add    esp,0x20
c001b45e:	85 c0                	test   eax,eax
c001b460:	74 14                	je     c001b476 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b466:	83 ec 0c             	sub    esp,0xc
c001b469:	53                   	push   ebx
c001b46a:	e8 f1 fd ff ff       	call   c001b260 <SATAPI::detectMedia()>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b476:	83 c4 30             	add    esp,0x30
c001b479:	5b                   	pop    ebx
c001b47a:	5e                   	pop    esi
c001b47b:	5f                   	pop    edi
c001b47c:	c3                   	ret    
c001b47d:	90                   	nop

c001b47e <IOAPIC::close(int, int, void*)>:
c001b47e:	b8 00 00 00 00       	mov    eax,0x0
c001b483:	c3                   	ret    

c001b484 <apicGetBase()>:
c001b484:	55                   	push   ebp
c001b485:	89 e5                	mov    ebp,esp
c001b487:	83 ec 18             	sub    esp,0x18
c001b48a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b48f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b495:	83 e0 08             	and    eax,0x8
c001b498:	84 c0                	test   al,al
c001b49a:	75 07                	jne    c001b4a3 <apicGetBase()+0x1f>
c001b49c:	b8 00 00 00 00       	mov    eax,0x0
c001b4a1:	eb 21                	jmp    c001b4c4 <apicGetBase()+0x40>
c001b4a3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4a8:	83 ec 08             	sub    esp,0x8
c001b4ab:	6a 1b                	push   0x1b
c001b4ad:	50                   	push   eax
c001b4ae:	e8 3f b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4b9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4bf:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4c4:	c9                   	leave  
c001b4c5:	c3                   	ret    

c001b4c6 <IOAPIC::IOAPIC()>:
c001b4c6:	83 ec 0c             	sub    esp,0xc
c001b4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4cd:	83 ec 08             	sub    esp,0x8
c001b4d0:	68 74 f7 01 c0       	push   0xc001f774
c001b4d5:	50                   	push   eax
c001b4d6:	e8 fd 06 ff ff       	call   c000bbd8 <Device::Device(char const*)>
c001b4db:	83 c4 10             	add    esp,0x10
c001b4de:	ba 84 f7 01 c0       	mov    edx,0xc001f784
c001b4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e7:	89 10                	mov    DWORD PTR [eax],edx
c001b4e9:	90                   	nop
c001b4ea:	83 c4 0c             	add    esp,0xc
c001b4ed:	c3                   	ret    

c001b4ee <apicOpen()>:
c001b4ee:	55                   	push   ebp
c001b4ef:	89 e5                	mov    ebp,esp
c001b4f1:	53                   	push   ebx
c001b4f2:	83 ec 34             	sub    esp,0x34
c001b4f5:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b4fa:	83 f0 01             	xor    eax,0x1
c001b4fd:	84 c0                	test   al,al
c001b4ff:	0f 84 9d 00 00 00    	je     c001b5a2 <apicOpen()+0xb4>
c001b505:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b509:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b50e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b511:	0f 83 84 00 00 00    	jae    c001b59b <apicOpen()+0xad>
c001b517:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b524:	e8 90 c2 fe ff       	call   c00077b9 <malloc>
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	89 c3                	mov    ebx,eax
c001b52e:	83 ec 0c             	sub    esp,0xc
c001b531:	53                   	push   ebx
c001b532:	e8 8f ff ff ff       	call   c001b4c6 <IOAPIC::IOAPIC()>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b53d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b540:	25 ff 00 00 00       	and    eax,0xff
c001b545:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b548:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b54f:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b554:	40                   	inc    eax
c001b555:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b55a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b55f:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b565:	83 ec 08             	sub    esp,0x8
c001b568:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b56b:	50                   	push   eax
c001b56c:	e8 cf 04 ff ff       	call   c000ba40 <Device::addChild(Device*)>
c001b571:	83 c4 10             	add    esp,0x10
c001b574:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b577:	8b 00                	mov    eax,DWORD PTR [eax]
c001b579:	83 c0 08             	add    eax,0x8
c001b57c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b57e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b581:	25 ff 00 00 00       	and    eax,0xff
c001b586:	6a 00                	push   0x0
c001b588:	6a 00                	push   0x0
c001b58a:	50                   	push   eax
c001b58b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b58e:	ff d2                	call   edx
c001b590:	83 c4 10             	add    esp,0x10
c001b593:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b596:	e9 6e ff ff ff       	jmp    c001b509 <apicOpen()+0x1b>
c001b59b:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b5a2:	e8 dd fe ff ff       	call   c001b484 <apicGetBase()>
c001b5a7:	05 f0 00 00 00       	add    eax,0xf0
c001b5ac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5b4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5b7:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5be:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5c8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b5cb:	89 10                	mov    DWORD PTR [eax],edx
c001b5cd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b5d4:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b5d9:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b5dc:	7d 70                	jge    c001b64e <apicOpen()+0x160>
c001b5de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5e1:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b5e8:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b5eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5ee:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b5f5:	c1 e8 08             	shr    eax,0x8
c001b5f8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b5fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5ff:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b606:	c1 e8 18             	shr    eax,0x18
c001b609:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b60c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b610:	75 37                	jne    c001b649 <apicOpen()+0x15b>
c001b612:	e8 6d fe ff ff       	call   c001b484 <apicGetBase()>
c001b617:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b61b:	75 07                	jne    c001b624 <apicOpen()+0x136>
c001b61d:	ba 60 03 00 00       	mov    edx,0x360
c001b622:	eb 05                	jmp    c001b629 <apicOpen()+0x13b>
c001b624:	ba 50 03 00 00       	mov    edx,0x350
c001b629:	01 d0                	add    eax,edx
c001b62b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b62e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b631:	8b 00                	mov    eax,DWORD PTR [eax]
c001b633:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b636:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b63d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b641:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b644:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b647:	89 10                	mov    DWORD PTR [eax],edx
c001b649:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b64c:	eb 86                	jmp    c001b5d4 <apicOpen()+0xe6>
c001b64e:	90                   	nop
c001b64f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b652:	c9                   	leave  
c001b653:	c3                   	ret    

c001b654 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b654:	55                   	push   ebp
c001b655:	89 e5                	mov    ebp,esp
c001b657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b660:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b663:	72 1d                	jb     c001b682 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b668:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b671:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b677:	01 d0                	add    eax,edx
c001b679:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b67c:	73 04                	jae    c001b682 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b67e:	b0 01                	mov    al,0x1
c001b680:	eb 02                	jmp    c001b684 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b682:	b0 00                	mov    al,0x0
c001b684:	5d                   	pop    ebp
c001b685:	c3                   	ret    

c001b686 <IOAPIC::read(int)>:
c001b686:	55                   	push   ebp
c001b687:	89 e5                	mov    ebp,esp
c001b689:	83 ec 10             	sub    esp,0x10
c001b68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b68f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b695:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b698:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b69b:	31 d2                	xor    edx,edx
c001b69d:	88 c2                	mov    dl,al
c001b69f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6a2:	89 10                	mov    DWORD PTR [eax],edx
c001b6a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6a7:	83 c0 10             	add    eax,0x10
c001b6aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6ac:	c9                   	leave  
c001b6ad:	c3                   	ret    

c001b6ae <IOAPIC::open(int, int, void*)>:
c001b6ae:	55                   	push   ebp
c001b6af:	89 e5                	mov    ebp,esp
c001b6b1:	57                   	push   edi
c001b6b2:	56                   	push   esi
c001b6b3:	53                   	push   ebx
c001b6b4:	83 ec 04             	sub    esp,0x4
c001b6b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6cc:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6e5:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b701:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b707:	89 c6                	mov    esi,eax
c001b709:	81 e6 ff 00 00 00    	and    esi,0xff
c001b70f:	89 d0                	mov    eax,edx
c001b711:	ba 00 00 00 00       	mov    edx,0x0
c001b716:	89 c7                	mov    edi,eax
c001b718:	83 e7 ff             	and    edi,0xffffffff
c001b71b:	89 f9                	mov    ecx,edi
c001b71d:	89 d0                	mov    eax,edx
c001b71f:	25 ff 00 00 00       	and    eax,0xff
c001b724:	89 c3                	mov    ebx,eax
c001b726:	89 c8                	mov    eax,ecx
c001b728:	89 da                	mov    edx,ebx
c001b72a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b72d:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b730:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b734:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b738:	83 e0 00             	and    eax,0x0
c001b73b:	09 d0                	or     eax,edx
c001b73d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b744:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b74a:	8d 50 01             	lea    edx,[eax+0x1]
c001b74d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b750:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b756:	31 d2                	xor    edx,edx
c001b758:	88 c2                	mov    dl,al
c001b75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75d:	83 c2 08             	add    edx,0x8
c001b760:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b764:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b76a:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b770:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b774:	6a 01                	push   0x1
c001b776:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b779:	e8 08 ff ff ff       	call   c001b686 <IOAPIC::read(int)>
c001b77e:	83 c4 08             	add    esp,0x8
c001b781:	c1 f8 10             	sar    eax,0x10
c001b784:	25 ff 00 00 00       	and    eax,0xff
c001b789:	8d 50 01             	lea    edx,[eax+0x1]
c001b78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b78f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b795:	b8 00 00 00 00       	mov    eax,0x0
c001b79a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b79d:	5b                   	pop    ebx
c001b79e:	5e                   	pop    esi
c001b79f:	5f                   	pop    edi
c001b7a0:	5d                   	pop    ebp
c001b7a1:	c3                   	ret    

c001b7a2 <IOAPIC::write(int, int)>:
c001b7a2:	55                   	push   ebp
c001b7a3:	89 e5                	mov    ebp,esp
c001b7a5:	83 ec 10             	sub    esp,0x10
c001b7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7b7:	31 d2                	xor    edx,edx
c001b7b9:	88 c2                	mov    dl,al
c001b7bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7be:	89 10                	mov    DWORD PTR [eax],edx
c001b7c0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7c3:	8d 50 10             	lea    edx,[eax+0x10]
c001b7c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7c9:	89 02                	mov    DWORD PTR [edx],eax
c001b7cb:	90                   	nop
c001b7cc:	c9                   	leave  
c001b7cd:	c3                   	ret    

c001b7ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b7ce:	55                   	push   ebp
c001b7cf:	89 e5                	mov    ebp,esp
c001b7d1:	53                   	push   ebx
c001b7d2:	83 ec 2c             	sub    esp,0x2c
c001b7d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7d8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b7db:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b7de:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b7e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b7e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7e7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b7ea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b7ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b7f0:	88 d8                	mov    al,bl
c001b7f2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b7f5:	88 c8                	mov    al,cl
c001b7f7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b7fa:	88 d0                	mov    al,dl
c001b7fc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b7ff:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b802:	25 ff 00 00 00       	and    eax,0xff
c001b807:	83 c0 08             	add    eax,0x8
c001b80a:	01 c0                	add    eax,eax
c001b80c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b80f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b812:	25 ff 00 00 00       	and    eax,0xff
c001b817:	83 c0 08             	add    eax,0x8
c001b81a:	01 c0                	add    eax,eax
c001b81c:	40                   	inc    eax
c001b81d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b820:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b823:	50                   	push   eax
c001b824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b827:	e8 5a fe ff ff       	call   c001b686 <IOAPIC::read(int)>
c001b82c:	83 c4 08             	add    esp,0x8
c001b82f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b832:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b839:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b83c:	c1 e0 18             	shl    eax,0x18
c001b83f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b842:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b845:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b848:	52                   	push   edx
c001b849:	50                   	push   eax
c001b84a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b84d:	e8 50 ff ff ff       	call   c001b7a2 <IOAPIC::write(int, int)>
c001b852:	83 c4 0c             	add    esp,0xc
c001b855:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b858:	50                   	push   eax
c001b859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b85c:	e8 25 fe ff ff       	call   c001b686 <IOAPIC::read(int)>
c001b861:	83 c4 08             	add    esp,0x8
c001b864:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b867:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b86e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b875:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b87c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b880:	74 09                	je     c001b88b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b882:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b889:	eb 07                	jmp    c001b892 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b88b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b892:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b896:	74 09                	je     c001b8a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b898:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b89f:	eb 07                	jmp    c001b8a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b8a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b8a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8af:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8b2:	25 ff 00 00 00       	and    eax,0xff
c001b8b7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8c0:	52                   	push   edx
c001b8c1:	50                   	push   eax
c001b8c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8c5:	e8 d8 fe ff ff       	call   c001b7a2 <IOAPIC::write(int, int)>
c001b8ca:	83 c4 0c             	add    esp,0xc
c001b8cd:	90                   	nop
c001b8ce:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8d1:	c9                   	leave  
c001b8d2:	c3                   	ret    
c001b8d3:	90                   	nop

c001b8d4 <APICTimer::close(int, int, void*)>:
c001b8d4:	b8 00 00 00 00       	mov    eax,0x0
c001b8d9:	c3                   	ret    
c001b8da:	66 90                	xchg   ax,ax

c001b8dc <apicTimerHandler(regs*, void*)>:
c001b8dc:	83 ec 0c             	sub    esp,0xc
c001b8df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8e5:	b8 10 27 00 00       	mov    eax,0x2710
c001b8ea:	ba 00 00 00 00       	mov    edx,0x0
c001b8ef:	f7 f1                	div    ecx
c001b8f1:	83 ec 0c             	sub    esp,0xc
c001b8f4:	50                   	push   eax
c001b8f5:	e8 1a 1a ff ff       	call   c000d314 <timerHandler(unsigned int)>
c001b8fa:	83 c4 10             	add    esp,0x10
c001b8fd:	90                   	nop
c001b8fe:	83 c4 0c             	add    esp,0xc
c001b901:	c3                   	ret    
c001b902:	66 90                	xchg   ax,ax

c001b904 <APICTimer::open(int, int, void*)>:
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b90d:	83 c0 24             	add    eax,0x24
c001b910:	8b 00                	mov    eax,DWORD PTR [eax]
c001b912:	83 ec 08             	sub    esp,0x8
c001b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b91d:	ff d0                	call   eax
c001b91f:	83 c4 10             	add    esp,0x10
c001b922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b926:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b92a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b938:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b93e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b942:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	51                   	push   ecx
c001b94c:	6a 01                	push   0x1
c001b94e:	68 dc b8 01 c0       	push   0xc001b8dc
c001b953:	52                   	push   edx
c001b954:	50                   	push   eax
c001b955:	e8 92 00 ff ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b95a:	83 c4 20             	add    esp,0x20
c001b95d:	89 c2                	mov    edx,eax
c001b95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b963:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b969:	b8 00 00 00 00       	mov    eax,0x0
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	c3                   	ret    
c001b972:	66 90                	xchg   ax,ax

c001b974 <APICTimer::write(int)>:
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	83 ec 0c             	sub    esp,0xc
c001b97a:	68 a8 f7 01 c0       	push   0xc001f7a8
c001b97f:	e8 ff 48 ff ff       	call   c0010283 <KePanic(char const*)>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b98f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b995:	90                   	nop
c001b996:	83 c4 0c             	add    esp,0xc
c001b999:	c3                   	ret    
c001b99a:	66 90                	xchg   ax,ax

c001b99c <APICTimer::APICTimer()>:
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	83 ec 08             	sub    esp,0x8
c001b9a6:	68 b8 f7 01 c0       	push   0xc001f7b8
c001b9ab:	50                   	push   eax
c001b9ac:	e8 97 18 ff ff       	call   c000d248 <Timer::Timer(char const*)>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	ba cc f7 01 c0       	mov    edx,0xc001f7cc
c001b9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bd:	89 10                	mov    DWORD PTR [eax],edx
c001b9bf:	90                   	nop
c001b9c0:	83 c4 0c             	add    esp,0xc
c001b9c3:	c3                   	ret    

c001b9c4 <PIT::write(int)>:
c001b9c4:	83 ec 10             	sub    esp,0x10
c001b9c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9d9:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b9de:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b9e3:	99                   	cdq    
c001b9e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b9f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b9f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b9fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba01:	ee                   	out    dx,al
c001ba02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba06:	25 ff 00 00 00       	and    eax,0xff
c001ba0b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba12:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba16:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba1a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba1f:	ee                   	out    dx,al
c001ba20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba24:	c1 f8 08             	sar    eax,0x8
c001ba27:	25 ff 00 00 00       	and    eax,0xff
c001ba2c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba33:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba3b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba40:	ee                   	out    dx,al
c001ba41:	90                   	nop
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	c3                   	ret    
c001ba46:	66 90                	xchg   ax,ax

c001ba48 <pitHandler(regs*, void*)>:
c001ba48:	83 ec 0c             	sub    esp,0xc
c001ba4b:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001ba51:	b8 10 27 00 00       	mov    eax,0x2710
c001ba56:	99                   	cdq    
c001ba57:	f7 f9                	idiv   ecx
c001ba59:	83 ec 0c             	sub    esp,0xc
c001ba5c:	50                   	push   eax
c001ba5d:	e8 b2 18 ff ff       	call   c000d314 <timerHandler(unsigned int)>
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	90                   	nop
c001ba66:	83 c4 0c             	add    esp,0xc
c001ba69:	c3                   	ret    
c001ba6a:	66 90                	xchg   ax,ax

c001ba6c <PIT::open(int, int, void*)>:
c001ba6c:	83 ec 0c             	sub    esp,0xc
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba75:	83 c0 24             	add    eax,0x24
c001ba78:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba7a:	83 ec 08             	sub    esp,0x8
c001ba7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba85:	ff d0                	call   eax
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	6a 00                	push   0x0
c001ba93:	6a 01                	push   0x1
c001ba95:	68 48 ba 01 c0       	push   0xc001ba48
c001ba9a:	6a 00                	push   0x0
c001ba9c:	50                   	push   eax
c001ba9d:	e8 4a ff fe ff       	call   c000b9ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baa2:	83 c4 20             	add    esp,0x20
c001baa5:	89 c2                	mov    edx,eax
c001baa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bab1:	b8 00 00 00 00       	mov    eax,0x0
c001bab6:	83 c4 0c             	add    esp,0xc
c001bab9:	c3                   	ret    
c001baba:	66 90                	xchg   ax,ax

c001babc <PIT::close(int, int, void*)>:
c001babc:	83 ec 0c             	sub    esp,0xc
c001babf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad1:	6a 01                	push   0x1
c001bad3:	68 48 ba 01 c0       	push   0xc001ba48
c001bad8:	6a 00                	push   0x0
c001bada:	50                   	push   eax
c001badb:	e8 42 ff fe ff       	call   c000ba22 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bae0:	83 c4 10             	add    esp,0x10
c001bae3:	b8 00 00 00 00       	mov    eax,0x0
c001bae8:	83 c4 0c             	add    esp,0xc
c001baeb:	c3                   	ret    

c001baec <PIT::PIT()>:
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf3:	83 ec 08             	sub    esp,0x8
c001baf6:	68 f4 f7 01 c0       	push   0xc001f7f4
c001bafb:	50                   	push   eax
c001bafc:	e8 47 17 ff ff       	call   c000d248 <Timer::Timer(char const*)>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	ba 1c f8 01 c0       	mov    edx,0xc001f81c
c001bb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0d:	89 10                	mov    DWORD PTR [eax],edx
c001bb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb19:	31 d2                	xor    edx,edx
c001bb1b:	88 c2                	mov    dl,al
c001bb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb21:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb32:	31 d2                	xor    edx,edx
c001bb34:	88 c2                	mov    dl,al
c001bb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb49:	8d 50 01             	lea    edx,[eax+0x1]
c001bb4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb50:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb56:	31 d2                	xor    edx,edx
c001bb58:	88 c2                	mov    dl,al
c001bb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb62:	83 e1 3f             	and    ecx,0x3f
c001bb65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb69:	90                   	nop
c001bb6a:	83 c4 0c             	add    esp,0xc
c001bb6d:	c3                   	ret    
c001bb6e:	66 90                	xchg   ax,ax

c001bb70 <avxDetect>:
c001bb70:	b8 01 00 00 00       	mov    eax,0x1
c001bb75:	0f a2                	cpuid  
c001bb77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb7d:	74 15                	je     c001bb94 <avxDetect.noAVX>
c001bb7f:	b8 01 00 00 00       	mov    eax,0x1
c001bb84:	0f a2                	cpuid  
c001bb86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb8c:	74 06                	je     c001bb94 <avxDetect.noAVX>
c001bb8e:	b8 01 00 00 00       	mov    eax,0x1
c001bb93:	c3                   	ret    

c001bb94 <avxDetect.noAVX>:
c001bb94:	b8 00 00 00 00       	mov    eax,0x0
c001bb99:	c3                   	ret    

c001bb9a <avxSave>:
c001bb9a:	53                   	push   ebx
c001bb9b:	52                   	push   edx
c001bb9c:	31 c0                	xor    eax,eax
c001bb9e:	48                   	dec    eax
c001bb9f:	89 c2                	mov    edx,eax
c001bba1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bba5:	0f ae 23             	xsave  [ebx]
c001bba8:	5a                   	pop    edx
c001bba9:	5b                   	pop    ebx
c001bbaa:	c3                   	ret    

c001bbab <avxLoad>:
c001bbab:	53                   	push   ebx
c001bbac:	52                   	push   edx
c001bbad:	31 c0                	xor    eax,eax
c001bbaf:	48                   	dec    eax
c001bbb0:	89 c2                	mov    edx,eax
c001bbb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbb6:	0f ae 2b             	xrstor [ebx]
c001bbb9:	5a                   	pop    edx
c001bbba:	5b                   	pop    ebx
c001bbbb:	c3                   	ret    

c001bbbc <avxInit>:
c001bbbc:	e8 b7 02 00 00       	call   c001be78 <sseInit>
c001bbc1:	50                   	push   eax
c001bbc2:	51                   	push   ecx
c001bbc3:	0f 20 e0             	mov    eax,cr4
c001bbc6:	0d 00 00 04 00       	or     eax,0x40000
c001bbcb:	0f 22 e0             	mov    cr4,eax
c001bbce:	31 c9                	xor    ecx,ecx
c001bbd0:	0f 01 d0             	xgetbv 
c001bbd3:	0d 07 00 00 00       	or     eax,0x7
c001bbd8:	0f 01 d1             	xsetbv 
c001bbdb:	59                   	pop    ecx
c001bbdc:	58                   	pop    eax
c001bbdd:	c3                   	ret    

c001bbde <avxClose>:
c001bbde:	c3                   	ret    

c001bbdf <wouldSheSayYes>:
c001bbdf:	c3                   	ret    
c001bbe0:	49                   	dec    ecx
c001bbe1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bbe5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bbe9:	75 20                	jne    c001bc0b <isr0+0xb>
c001bbeb:	4e                   	dec    esi
c001bbec:	79 61                	jns    c001bc4f <isr7+0x3>
c001bbee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bbf3:	66 90                	xchg   ax,ax
c001bbf5:	66 90                	xchg   ax,ax
c001bbf7:	66 90                	xchg   ax,ax
c001bbf9:	66 90                	xchg   ax,ax
c001bbfb:	66 90                	xchg   ax,ax
c001bbfd:	66 90                	xchg   ax,ax
c001bbff:	90                   	nop

c001bc00 <isr0>:
c001bc00:	fa                   	cli    
c001bc01:	68 00 00 00 00       	push   0x0
c001bc06:	68 00 00 00 00       	push   0x0
c001bc0b:	e9 44 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc10 <isr1>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 01                	push   0x1
c001bc15:	e9 3a 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc1a <isr2>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 02                	push   0x2
c001bc1f:	e9 30 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc24 <isr3>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 03                	push   0x3
c001bc29:	e9 26 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc2e <isr4>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 04                	push   0x4
c001bc33:	e9 1c 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc38 <isr5>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 05                	push   0x5
c001bc3d:	e9 12 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc42 <isr6>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 06                	push   0x6
c001bc47:	e9 08 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc4c <isr7>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 07                	push   0x7
c001bc51:	e9 fe 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc56 <isr8>:
c001bc56:	fa                   	cli    
c001bc57:	6a 08                	push   0x8
c001bc59:	e9 f6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc5e <isr9>:
c001bc5e:	fa                   	cli    
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 09                	push   0x9
c001bc63:	e9 ec 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc68 <isr10>:
c001bc68:	fa                   	cli    
c001bc69:	6a 0a                	push   0xa
c001bc6b:	e9 e4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc70 <isr11>:
c001bc70:	fa                   	cli    
c001bc71:	6a 0b                	push   0xb
c001bc73:	e9 dc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc78 <isr12>:
c001bc78:	fa                   	cli    
c001bc79:	6a 0c                	push   0xc
c001bc7b:	e9 d4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc80 <isr13>:
c001bc80:	fa                   	cli    
c001bc81:	6a 0d                	push   0xd
c001bc83:	e9 cc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc88 <isr14>:
c001bc88:	fa                   	cli    
c001bc89:	6a 0e                	push   0xe
c001bc8b:	e9 c4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc90 <isr15>:
c001bc90:	fa                   	cli    
c001bc91:	6a 00                	push   0x0
c001bc93:	6a 0f                	push   0xf
c001bc95:	e9 ba 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc9a <isr16>:
c001bc9a:	fa                   	cli    
c001bc9b:	6a 00                	push   0x0
c001bc9d:	6a 10                	push   0x10
c001bc9f:	e9 b0 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bca4 <isr17>:
c001bca4:	fa                   	cli    
c001bca5:	6a 00                	push   0x0
c001bca7:	6a 11                	push   0x11
c001bca9:	e9 a6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcae <isr18>:
c001bcae:	fa                   	cli    
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 12                	push   0x12
c001bcb3:	e9 9c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcb8 <irq3>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 00                	push   0x0
c001bcbb:	6a 23                	push   0x23
c001bcbd:	e9 92 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcc2 <irq4>:
c001bcc2:	fa                   	cli    
c001bcc3:	6a 00                	push   0x0
c001bcc5:	6a 24                	push   0x24
c001bcc7:	e9 88 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bccc <irq5>:
c001bccc:	fa                   	cli    
c001bccd:	6a 00                	push   0x0
c001bccf:	6a 25                	push   0x25
c001bcd1:	e9 7e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcd6 <irq6>:
c001bcd6:	fa                   	cli    
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 26                	push   0x26
c001bcdb:	e9 74 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bce0 <irq7>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 27                	push   0x27
c001bce5:	e9 6a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcea <irq8>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 28                	push   0x28
c001bcef:	e9 60 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcf4 <irq9>:
c001bcf4:	fa                   	cli    
c001bcf5:	6a 00                	push   0x0
c001bcf7:	6a 29                	push   0x29
c001bcf9:	e9 56 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcfe <irq10>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 2a                	push   0x2a
c001bd03:	e9 4c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd08 <irq11>:
c001bd08:	fa                   	cli    
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 2b                	push   0x2b
c001bd0d:	e9 42 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd12 <irq12>:
c001bd12:	fa                   	cli    
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 2c                	push   0x2c
c001bd17:	e9 38 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd1c <irq13>:
c001bd1c:	fa                   	cli    
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 2d                	push   0x2d
c001bd21:	e9 2e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd26 <irq14>:
c001bd26:	fa                   	cli    
c001bd27:	6a 00                	push   0x0
c001bd29:	6a 2e                	push   0x2e
c001bd2b:	e9 24 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd30 <irq15>:
c001bd30:	fa                   	cli    
c001bd31:	6a 00                	push   0x0
c001bd33:	6a 2f                	push   0x2f
c001bd35:	e9 1a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd3a <irq1>:
c001bd3a:	fa                   	cli    
c001bd3b:	6a 00                	push   0x0
c001bd3d:	6a 21                	push   0x21
c001bd3f:	eb 13                	jmp    c001bd54 <int_common_stub>

c001bd41 <irq2>:
c001bd41:	fa                   	cli    
c001bd42:	6a 00                	push   0x0
c001bd44:	6a 22                	push   0x22
c001bd46:	eb 0c                	jmp    c001bd54 <int_common_stub>

c001bd48 <isr96>:
c001bd48:	6a 00                	push   0x0
c001bd4a:	6a 60                	push   0x60
c001bd4c:	fb                   	sti    
c001bd4d:	eb 37                	jmp    c001bd86 <syscall_common_stub>

c001bd4f <irq0>:
c001bd4f:	fa                   	cli    
c001bd50:	6a 00                	push   0x0
c001bd52:	6a 20                	push   0x20

c001bd54 <int_common_stub>:
c001bd54:	60                   	pusha  
c001bd55:	1e                   	push   ds
c001bd56:	06                   	push   es
c001bd57:	0f a0                	push   fs
c001bd59:	0f a8                	push   gs
c001bd5b:	66 b8 10 00          	mov    ax,0x10
c001bd5f:	66 8e d8             	mov    ds,ax
c001bd62:	66 8e c0             	mov    es,ax
c001bd65:	66 8e e0             	mov    fs,ax
c001bd68:	66 8e e8             	mov    gs,ax
c001bd6b:	54                   	push   esp
c001bd6c:	fc                   	cld    
c001bd6d:	e8 7a 01 ff ff       	call   c000beec <int_handler>
c001bd72:	81 c4 04 00 00 00    	add    esp,0x4
c001bd78:	0f a9                	pop    gs
c001bd7a:	0f a1                	pop    fs
c001bd7c:	07                   	pop    es
c001bd7d:	1f                   	pop    ds
c001bd7e:	61                   	popa   
c001bd7f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd85:	cf                   	iret   

c001bd86 <syscall_common_stub>:
c001bd86:	60                   	pusha  
c001bd87:	1e                   	push   ds
c001bd88:	06                   	push   es
c001bd89:	0f a0                	push   fs
c001bd8b:	0f a8                	push   gs
c001bd8d:	66 b8 10 00          	mov    ax,0x10
c001bd91:	66 8e d8             	mov    ds,ax
c001bd94:	66 8e c0             	mov    es,ax
c001bd97:	66 8e e0             	mov    fs,ax
c001bd9a:	66 8e e8             	mov    gs,ax
c001bd9d:	54                   	push   esp
c001bd9e:	fc                   	cld    
c001bd9f:	e8 48 01 ff ff       	call   c000beec <int_handler>
c001bda4:	81 c4 04 00 00 00    	add    esp,0x4
c001bdaa:	0f a9                	pop    gs
c001bdac:	0f a1                	pop    fs
c001bdae:	07                   	pop    es
c001bdaf:	1f                   	pop    ds
c001bdb0:	e8 22 4a ff ff       	call   c00107d7 <KiCheckSignalZ>
c001bdb5:	3d 00 00 00 00       	cmp    eax,0x0
c001bdba:	74 1d                	je     c001bdd9 <syscall_common_stub.skipSignals>
c001bdbc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bdc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bdc4:	89 e3                	mov    ebx,esp
c001bdc6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bdc9:	51                   	push   ecx
c001bdca:	68 e1 bd 01 c0       	push   0xc001bde1
c001bdcf:	89 dc                	mov    esp,ebx
c001bdd1:	61                   	popa   
c001bdd2:	81 c4 08 00 00 00    	add    esp,0x8
c001bdd8:	cf                   	iret   

c001bdd9 <syscall_common_stub.skipSignals>:
c001bdd9:	61                   	popa   
c001bdda:	81 c4 08 00 00 00    	add    esp,0x8
c001bde0:	cf                   	iret   

c001bde1 <irq16>:
c001bde1:	fa                   	cli    
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 30                	push   0x30
c001bde6:	e9 69 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdeb <irq17>:
c001bdeb:	fa                   	cli    
c001bdec:	6a 00                	push   0x0
c001bdee:	6a 31                	push   0x31
c001bdf0:	e9 5f ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdf5 <irq18>:
c001bdf5:	fa                   	cli    
c001bdf6:	6a 00                	push   0x0
c001bdf8:	6a 32                	push   0x32
c001bdfa:	e9 55 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdff <irq19>:
c001bdff:	fa                   	cli    
c001be00:	6a 00                	push   0x0
c001be02:	6a 33                	push   0x33
c001be04:	e9 4b ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be09 <irq20>:
c001be09:	fa                   	cli    
c001be0a:	6a 00                	push   0x0
c001be0c:	6a 34                	push   0x34
c001be0e:	e9 41 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be13 <irq21>:
c001be13:	fa                   	cli    
c001be14:	6a 00                	push   0x0
c001be16:	6a 35                	push   0x35
c001be18:	e9 37 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be1d <irq22>:
c001be1d:	fa                   	cli    
c001be1e:	6a 00                	push   0x0
c001be20:	6a 36                	push   0x36
c001be22:	e9 2d ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be27 <irq23>:
c001be27:	fa                   	cli    
c001be28:	6a 00                	push   0x0
c001be2a:	6a 37                	push   0x37
c001be2c:	e9 23 ff ff ff       	jmp    c001bd54 <int_common_stub>
c001be31:	66 90                	xchg   ax,ax
c001be33:	66 90                	xchg   ax,ax
c001be35:	66 90                	xchg   ax,ax
c001be37:	66 90                	xchg   ax,ax
c001be39:	66 90                	xchg   ax,ax
c001be3b:	66 90                	xchg   ax,ax
c001be3d:	66 90                	xchg   ax,ax
c001be3f:	90                   	nop

c001be40 <i386GetRDRAND>:
c001be40:	b9 64 00 00 00       	mov    ecx,0x64

c001be45 <retry>:
c001be45:	0f c7 f0             	rdrand eax
c001be48:	72 05                	jb     c001be4f <retry.done>
c001be4a:	e2 f9                	loop   c001be45 <retry>

c001be4c <retry.fail>:
c001be4c:	31 c0                	xor    eax,eax
c001be4e:	c3                   	ret    

c001be4f <retry.done>:
c001be4f:	c3                   	ret    

c001be50 <absolutelyNoChanceInHell>:
c001be50:	b8 01 00 00 00       	mov    eax,0x1
c001be55:	0f a2                	cpuid  
c001be57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be5d:	74 06                	je     c001be65 <sseDetect.noSSE>
c001be5f:	b8 01 00 00 00       	mov    eax,0x1
c001be64:	c3                   	ret    

c001be65 <sseDetect.noSSE>:
c001be65:	31 c0                	xor    eax,eax
c001be67:	c3                   	ret    

c001be68 <sseSave>:
c001be68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6c:	0f ae 00             	fxsave [eax]
c001be6f:	c3                   	ret    

c001be70 <sseLoad>:
c001be70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be74:	0f ae 08             	fxrstor [eax]
c001be77:	c3                   	ret    

c001be78 <sseInit>:
c001be78:	e8 42 00 00 00       	call   c001bebf <x87Init>
c001be7d:	0f 20 e0             	mov    eax,cr4
c001be80:	66 0d 00 06          	or     ax,0x600
c001be84:	0f 22 e0             	mov    cr4,eax
c001be87:	c3                   	ret    

c001be88 <sseClose>:
c001be88:	c3                   	ret    
c001be89:	66 90                	xchg   ax,ax
c001be8b:	66 90                	xchg   ax,ax
c001be8d:	66 90                	xchg   ax,ax
c001be8f:	90                   	nop

c001be90 <value_37F>:
c001be90:	7f 03                	jg     c001be95 <value_37A+0x1>

c001be92 <value_37E>:
c001be92:	7e 03                	jle    c001be97 <x87Detect+0x1>

c001be94 <value_37A>:
c001be94:	7a 03                	jp     c001be99 <x87Detect+0x3>

c001be96 <x87Detect>:
c001be96:	b8 01 00 00 00       	mov    eax,0x1
c001be9b:	0f a2                	cpuid  
c001be9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bea3:	74 06                	je     c001beab <x87Detect.nox87>
c001bea5:	b8 01 00 00 00       	mov    eax,0x1
c001beaa:	c3                   	ret    

c001beab <x87Detect.nox87>:
c001beab:	b8 00 00 00 00       	mov    eax,0x0
c001beb0:	c3                   	ret    

c001beb1 <x87Save>:
c001beb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb5:	dd 30                	fnsave [eax]
c001beb7:	c3                   	ret    

c001beb8 <x87Load>:
c001beb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebc:	dd 20                	frstor [eax]
c001bebe:	c3                   	ret    

c001bebf <x87Init>:
c001bebf:	0f 20 c0             	mov    eax,cr0
c001bec2:	66 25 fb ff          	and    ax,0xfffb
c001bec6:	66 0d 22 00          	or     ax,0x22
c001beca:	0f 22 c0             	mov    cr0,eax
c001becd:	db e3                	fninit 
c001becf:	0f 06                	clts   
c001bed1:	d9 2d 94 be 01 c0    	fldcw  WORD PTR ds:0xc001be94
c001bed7:	c3                   	ret    

c001bed8 <x87Close>:
c001bed8:	c3                   	ret    
c001bed9:	66 90                	xchg   ax,ax
c001bedb:	90                   	nop

c001bedc <__do_global_ctors_aux>:
c001bedc:	a1 8c ce 01 c0       	mov    eax,ds:0xc001ce8c
c001bee1:	83 f8 ff             	cmp    eax,0xffffffff
c001bee4:	74 1a                	je     c001bf00 <__do_global_ctors_aux+0x24>
c001bee6:	55                   	push   ebp
c001bee7:	89 e5                	mov    ebp,esp
c001bee9:	53                   	push   ebx
c001beea:	52                   	push   edx
c001beeb:	bb 8c ce 01 c0       	mov    ebx,0xc001ce8c
c001bef0:	ff d0                	call   eax
c001bef2:	83 eb 04             	sub    ebx,0x4
c001bef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bef7:	83 f8 ff             	cmp    eax,0xffffffff
c001befa:	75 f4                	jne    c001bef0 <__do_global_ctors_aux+0x14>
c001befc:	58                   	pop    eax
c001befd:	5b                   	pop    ebx
c001befe:	5d                   	pop    ebp
c001beff:	c3                   	ret    
c001bf00:	c3                   	ret    
c001bf01:	66 90                	xchg   ax,ax
c001bf03:	90                   	nop

c001bf04 <__divdi3>:
c001bf04:	55                   	push   ebp
c001bf05:	57                   	push   edi
c001bf06:	56                   	push   esi
c001bf07:	53                   	push   ebx
c001bf08:	83 ec 1c             	sub    esp,0x1c
c001bf0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf22:	85 db                	test   ebx,ebx
c001bf24:	0f 88 8e 00 00 00    	js     c001bfb8 <__divdi3+0xb4>
c001bf2a:	89 dd                	mov    ebp,ebx
c001bf2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf34:	89 d3                	mov    ebx,edx
c001bf36:	85 d2                	test   edx,edx
c001bf38:	79 0d                	jns    c001bf47 <__divdi3+0x43>
c001bf3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf3e:	f7 d8                	neg    eax
c001bf40:	83 d2 00             	adc    edx,0x0
c001bf43:	f7 da                	neg    edx
c001bf45:	89 d3                	mov    ebx,edx
c001bf47:	89 c7                	mov    edi,eax
c001bf49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf4c:	85 db                	test   ebx,ebx
c001bf4e:	75 48                	jne    c001bf98 <__divdi3+0x94>
c001bf50:	39 ef                	cmp    edi,ebp
c001bf52:	76 24                	jbe    c001bf78 <__divdi3+0x74>
c001bf54:	89 ea                	mov    edx,ebp
c001bf56:	f7 f7                	div    edi
c001bf58:	89 c1                	mov    ecx,eax
c001bf5a:	31 f6                	xor    esi,esi
c001bf5c:	89 c8                	mov    eax,ecx
c001bf5e:	89 f2                	mov    edx,esi
c001bf60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf64:	85 c9                	test   ecx,ecx
c001bf66:	74 07                	je     c001bf6f <__divdi3+0x6b>
c001bf68:	f7 d8                	neg    eax
c001bf6a:	83 d2 00             	adc    edx,0x0
c001bf6d:	f7 da                	neg    edx
c001bf6f:	83 c4 1c             	add    esp,0x1c
c001bf72:	5b                   	pop    ebx
c001bf73:	5e                   	pop    esi
c001bf74:	5f                   	pop    edi
c001bf75:	5d                   	pop    ebp
c001bf76:	c3                   	ret    
c001bf77:	90                   	nop
c001bf78:	85 ff                	test   edi,edi
c001bf7a:	75 0b                	jne    c001bf87 <__divdi3+0x83>
c001bf7c:	b8 01 00 00 00       	mov    eax,0x1
c001bf81:	31 d2                	xor    edx,edx
c001bf83:	f7 f3                	div    ebx
c001bf85:	89 c7                	mov    edi,eax
c001bf87:	31 d2                	xor    edx,edx
c001bf89:	89 e8                	mov    eax,ebp
c001bf8b:	f7 f7                	div    edi
c001bf8d:	89 c6                	mov    esi,eax
c001bf8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf92:	f7 f7                	div    edi
c001bf94:	89 c1                	mov    ecx,eax
c001bf96:	eb c4                	jmp    c001bf5c <__divdi3+0x58>
c001bf98:	39 eb                	cmp    ebx,ebp
c001bf9a:	77 3c                	ja     c001bfd8 <__divdi3+0xd4>
c001bf9c:	0f bd f3             	bsr    esi,ebx
c001bf9f:	83 f6 1f             	xor    esi,0x1f
c001bfa2:	75 40                	jne    c001bfe4 <__divdi3+0xe0>
c001bfa4:	39 eb                	cmp    ebx,ebp
c001bfa6:	72 09                	jb     c001bfb1 <__divdi3+0xad>
c001bfa8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfab:	0f 87 97 00 00 00    	ja     c001c048 <__divdi3+0x144>
c001bfb1:	b9 01 00 00 00       	mov    ecx,0x1
c001bfb6:	eb a4                	jmp    c001bf5c <__divdi3+0x58>
c001bfb8:	f7 d9                	neg    ecx
c001bfba:	83 d3 00             	adc    ebx,0x0
c001bfbd:	f7 db                	neg    ebx
c001bfbf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bfc2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bfc6:	89 dd                	mov    ebp,ebx
c001bfc8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bfd0:	e9 5f ff ff ff       	jmp    c001bf34 <__divdi3+0x30>
c001bfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd8:	31 f6                	xor    esi,esi
c001bfda:	31 c9                	xor    ecx,ecx
c001bfdc:	e9 7b ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe4:	b8 20 00 00 00       	mov    eax,0x20
c001bfe9:	29 f0                	sub    eax,esi
c001bfeb:	89 f1                	mov    ecx,esi
c001bfed:	d3 e3                	shl    ebx,cl
c001bfef:	89 fa                	mov    edx,edi
c001bff1:	88 c1                	mov    cl,al
c001bff3:	d3 ea                	shr    edx,cl
c001bff5:	09 da                	or     edx,ebx
c001bff7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bffb:	89 f1                	mov    ecx,esi
c001bffd:	d3 e7                	shl    edi,cl
c001bfff:	89 eb                	mov    ebx,ebp
c001c001:	88 c1                	mov    cl,al
c001c003:	d3 eb                	shr    ebx,cl
c001c005:	89 f1                	mov    ecx,esi
c001c007:	d3 e5                	shl    ebp,cl
c001c009:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c00c:	88 c1                	mov    cl,al
c001c00e:	d3 ea                	shr    edx,cl
c001c010:	09 d5                	or     ebp,edx
c001c012:	89 e8                	mov    eax,ebp
c001c014:	89 da                	mov    edx,ebx
c001c016:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c01a:	89 d3                	mov    ebx,edx
c001c01c:	89 c5                	mov    ebp,eax
c001c01e:	f7 e7                	mul    edi
c001c020:	39 d3                	cmp    ebx,edx
c001c022:	72 18                	jb     c001c03c <__divdi3+0x138>
c001c024:	74 0a                	je     c001c030 <__divdi3+0x12c>
c001c026:	89 e9                	mov    ecx,ebp
c001c028:	31 f6                	xor    esi,esi
c001c02a:	e9 2d ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c02f:	90                   	nop
c001c030:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c033:	89 f1                	mov    ecx,esi
c001c035:	d3 e7                	shl    edi,cl
c001c037:	39 c7                	cmp    edi,eax
c001c039:	73 eb                	jae    c001c026 <__divdi3+0x122>
c001c03b:	90                   	nop
c001c03c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c03f:	31 f6                	xor    esi,esi
c001c041:	e9 16 ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c046:	66 90                	xchg   ax,ax
c001c048:	31 c9                	xor    ecx,ecx
c001c04a:	e9 0d ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c04f:	90                   	nop

c001c050 <__moddi3>:
c001c050:	55                   	push   ebp
c001c051:	57                   	push   edi
c001c052:	56                   	push   esi
c001c053:	53                   	push   ebx
c001c054:	83 ec 2c             	sub    esp,0x2c
c001c057:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c05b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c05f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c063:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c067:	85 db                	test   ebx,ebx
c001c069:	0f 88 85 00 00 00    	js     c001c0f4 <__moddi3+0xa4>
c001c06f:	89 de                	mov    esi,ebx
c001c071:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c079:	89 d7                	mov    edi,edx
c001c07b:	85 d2                	test   edx,edx
c001c07d:	79 09                	jns    c001c088 <__moddi3+0x38>
c001c07f:	f7 d8                	neg    eax
c001c081:	83 d2 00             	adc    edx,0x0
c001c084:	f7 da                	neg    edx
c001c086:	89 d7                	mov    edi,edx
c001c088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c08c:	89 cd                	mov    ebp,ecx
c001c08e:	85 ff                	test   edi,edi
c001c090:	75 52                	jne    c001c0e4 <__moddi3+0x94>
c001c092:	89 c3                	mov    ebx,eax
c001c094:	39 f0                	cmp    eax,esi
c001c096:	76 24                	jbe    c001c0bc <__moddi3+0x6c>
c001c098:	89 c8                	mov    eax,ecx
c001c09a:	89 f2                	mov    edx,esi
c001c09c:	f7 f3                	div    ebx
c001c09e:	89 d6                	mov    esi,edx
c001c0a0:	89 f0                	mov    eax,esi
c001c0a2:	31 d2                	xor    edx,edx
c001c0a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0a8:	85 c9                	test   ecx,ecx
c001c0aa:	74 07                	je     c001c0b3 <__moddi3+0x63>
c001c0ac:	f7 d8                	neg    eax
c001c0ae:	83 d2 00             	adc    edx,0x0
c001c0b1:	f7 da                	neg    edx
c001c0b3:	83 c4 2c             	add    esp,0x2c
c001c0b6:	5b                   	pop    ebx
c001c0b7:	5e                   	pop    esi
c001c0b8:	5f                   	pop    edi
c001c0b9:	5d                   	pop    ebp
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop
c001c0bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0c0:	85 db                	test   ebx,ebx
c001c0c2:	75 0d                	jne    c001c0d1 <__moddi3+0x81>
c001c0c4:	b8 01 00 00 00       	mov    eax,0x1
c001c0c9:	31 d2                	xor    edx,edx
c001c0cb:	f7 f7                	div    edi
c001c0cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d1:	89 f0                	mov    eax,esi
c001c0d3:	31 d2                	xor    edx,edx
c001c0d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0d9:	f7 f7                	div    edi
c001c0db:	89 e8                	mov    eax,ebp
c001c0dd:	f7 f7                	div    edi
c001c0df:	89 d6                	mov    esi,edx
c001c0e1:	eb bd                	jmp    c001c0a0 <__moddi3+0x50>
c001c0e3:	90                   	nop
c001c0e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0e8:	39 f7                	cmp    edi,esi
c001c0ea:	76 20                	jbe    c001c10c <__moddi3+0xbc>
c001c0ec:	89 c8                	mov    eax,ecx
c001c0ee:	89 f2                	mov    edx,esi
c001c0f0:	eb b2                	jmp    c001c0a4 <__moddi3+0x54>
c001c0f2:	66 90                	xchg   ax,ax
c001c0f4:	f7 d9                	neg    ecx
c001c0f6:	83 d3 00             	adc    ebx,0x0
c001c0f9:	f7 db                	neg    ebx
c001c0fb:	89 de                	mov    esi,ebx
c001c0fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c105:	e9 6f ff ff ff       	jmp    c001c079 <__moddi3+0x29>
c001c10a:	66 90                	xchg   ax,ax
c001c10c:	0f bd c7             	bsr    eax,edi
c001c10f:	83 f0 1f             	xor    eax,0x1f
c001c112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c116:	75 24                	jne    c001c13c <__moddi3+0xec>
c001c118:	39 f7                	cmp    edi,esi
c001c11a:	72 06                	jb     c001c122 <__moddi3+0xd2>
c001c11c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c120:	77 0c                	ja     c001c12e <__moddi3+0xde>
c001c122:	89 e9                	mov    ecx,ebp
c001c124:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c128:	19 fe                	sbb    esi,edi
c001c12a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c12e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c132:	89 f2                	mov    edx,esi
c001c134:	e9 6b ff ff ff       	jmp    c001c0a4 <__moddi3+0x54>
c001c139:	8d 76 00             	lea    esi,[esi+0x0]
c001c13c:	b8 20 00 00 00       	mov    eax,0x20
c001c141:	89 c2                	mov    edx,eax
c001c143:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c147:	29 da                	sub    edx,ebx
c001c149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c14d:	88 d9                	mov    cl,bl
c001c14f:	d3 e7                	shl    edi,cl
c001c151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c155:	88 d1                	mov    cl,dl
c001c157:	d3 e8                	shr    eax,cl
c001c159:	09 c7                	or     edi,eax
c001c15b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c15f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c163:	89 d8                	mov    eax,ebx
c001c165:	88 d9                	mov    cl,bl
c001c167:	d3 e7                	shl    edi,cl
c001c169:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c16d:	89 f3                	mov    ebx,esi
c001c16f:	88 d1                	mov    cl,dl
c001c171:	d3 eb                	shr    ebx,cl
c001c173:	89 c7                	mov    edi,eax
c001c175:	88 c1                	mov    cl,al
c001c177:	d3 e6                	shl    esi,cl
c001c179:	89 e8                	mov    eax,ebp
c001c17b:	88 d1                	mov    cl,dl
c001c17d:	d3 e8                	shr    eax,cl
c001c17f:	09 f0                	or     eax,esi
c001c181:	89 f9                	mov    ecx,edi
c001c183:	d3 e5                	shl    ebp,cl
c001c185:	89 da                	mov    edx,ebx
c001c187:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c18b:	89 d3                	mov    ebx,edx
c001c18d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c191:	89 c6                	mov    esi,eax
c001c193:	89 d1                	mov    ecx,edx
c001c195:	39 d3                	cmp    ebx,edx
c001c197:	72 27                	jb     c001c1c0 <__moddi3+0x170>
c001c199:	74 21                	je     c001c1bc <__moddi3+0x16c>
c001c19b:	29 f5                	sub    ebp,esi
c001c19d:	19 cb                	sbb    ebx,ecx
c001c19f:	89 de                	mov    esi,ebx
c001c1a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1a5:	d3 e6                	shl    esi,cl
c001c1a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1ab:	89 f9                	mov    ecx,edi
c001c1ad:	d3 ed                	shr    ebp,cl
c001c1af:	09 ee                	or     esi,ebp
c001c1b1:	89 f0                	mov    eax,esi
c001c1b3:	d3 eb                	shr    ebx,cl
c001c1b5:	89 da                	mov    edx,ebx
c001c1b7:	e9 e8 fe ff ff       	jmp    c001c0a4 <__moddi3+0x54>
c001c1bc:	39 c5                	cmp    ebp,eax
c001c1be:	73 db                	jae    c001c19b <__moddi3+0x14b>
c001c1c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1c8:	89 d1                	mov    ecx,edx
c001c1ca:	89 c6                	mov    esi,eax
c001c1cc:	eb cd                	jmp    c001c19b <__moddi3+0x14b>
c001c1ce:	66 90                	xchg   ax,ax

c001c1d0 <__udivdi3>:
c001c1d0:	55                   	push   ebp
c001c1d1:	57                   	push   edi
c001c1d2:	56                   	push   esi
c001c1d3:	53                   	push   ebx
c001c1d4:	83 ec 1c             	sub    esp,0x1c
c001c1d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1e7:	85 d2                	test   edx,edx
c001c1e9:	75 41                	jne    c001c22c <__udivdi3+0x5c>
c001c1eb:	39 f7                	cmp    edi,esi
c001c1ed:	76 15                	jbe    c001c204 <__udivdi3+0x34>
c001c1ef:	89 e8                	mov    eax,ebp
c001c1f1:	89 f2                	mov    edx,esi
c001c1f3:	f7 f7                	div    edi
c001c1f5:	31 db                	xor    ebx,ebx
c001c1f7:	89 da                	mov    edx,ebx
c001c1f9:	83 c4 1c             	add    esp,0x1c
c001c1fc:	5b                   	pop    ebx
c001c1fd:	5e                   	pop    esi
c001c1fe:	5f                   	pop    edi
c001c1ff:	5d                   	pop    ebp
c001c200:	c3                   	ret    
c001c201:	8d 76 00             	lea    esi,[esi+0x0]
c001c204:	89 f9                	mov    ecx,edi
c001c206:	85 ff                	test   edi,edi
c001c208:	75 0b                	jne    c001c215 <__udivdi3+0x45>
c001c20a:	b8 01 00 00 00       	mov    eax,0x1
c001c20f:	31 d2                	xor    edx,edx
c001c211:	f7 f7                	div    edi
c001c213:	89 c1                	mov    ecx,eax
c001c215:	31 d2                	xor    edx,edx
c001c217:	89 f0                	mov    eax,esi
c001c219:	f7 f1                	div    ecx
c001c21b:	89 c3                	mov    ebx,eax
c001c21d:	89 e8                	mov    eax,ebp
c001c21f:	f7 f1                	div    ecx
c001c221:	89 da                	mov    edx,ebx
c001c223:	83 c4 1c             	add    esp,0x1c
c001c226:	5b                   	pop    ebx
c001c227:	5e                   	pop    esi
c001c228:	5f                   	pop    edi
c001c229:	5d                   	pop    ebp
c001c22a:	c3                   	ret    
c001c22b:	90                   	nop
c001c22c:	39 f2                	cmp    edx,esi
c001c22e:	77 1c                	ja     c001c24c <__udivdi3+0x7c>
c001c230:	0f bd da             	bsr    ebx,edx
c001c233:	83 f3 1f             	xor    ebx,0x1f
c001c236:	75 24                	jne    c001c25c <__udivdi3+0x8c>
c001c238:	39 f2                	cmp    edx,esi
c001c23a:	72 08                	jb     c001c244 <__udivdi3+0x74>
c001c23c:	39 ef                	cmp    edi,ebp
c001c23e:	0f 87 84 00 00 00    	ja     c001c2c8 <__udivdi3+0xf8>
c001c244:	b8 01 00 00 00       	mov    eax,0x1
c001c249:	eb ac                	jmp    c001c1f7 <__udivdi3+0x27>
c001c24b:	90                   	nop
c001c24c:	31 db                	xor    ebx,ebx
c001c24e:	31 c0                	xor    eax,eax
c001c250:	89 da                	mov    edx,ebx
c001c252:	83 c4 1c             	add    esp,0x1c
c001c255:	5b                   	pop    ebx
c001c256:	5e                   	pop    esi
c001c257:	5f                   	pop    edi
c001c258:	5d                   	pop    ebp
c001c259:	c3                   	ret    
c001c25a:	66 90                	xchg   ax,ax
c001c25c:	b8 20 00 00 00       	mov    eax,0x20
c001c261:	29 d8                	sub    eax,ebx
c001c263:	88 d9                	mov    cl,bl
c001c265:	d3 e2                	shl    edx,cl
c001c267:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c26b:	89 fa                	mov    edx,edi
c001c26d:	88 c1                	mov    cl,al
c001c26f:	d3 ea                	shr    edx,cl
c001c271:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c275:	09 d1                	or     ecx,edx
c001c277:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c27b:	88 d9                	mov    cl,bl
c001c27d:	d3 e7                	shl    edi,cl
c001c27f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c283:	89 f7                	mov    edi,esi
c001c285:	88 c1                	mov    cl,al
c001c287:	d3 ef                	shr    edi,cl
c001c289:	88 d9                	mov    cl,bl
c001c28b:	d3 e6                	shl    esi,cl
c001c28d:	89 ea                	mov    edx,ebp
c001c28f:	88 c1                	mov    cl,al
c001c291:	d3 ea                	shr    edx,cl
c001c293:	09 d6                	or     esi,edx
c001c295:	89 f0                	mov    eax,esi
c001c297:	89 fa                	mov    edx,edi
c001c299:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c29d:	89 d7                	mov    edi,edx
c001c29f:	89 c6                	mov    esi,eax
c001c2a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2a5:	39 d7                	cmp    edi,edx
c001c2a7:	72 13                	jb     c001c2bc <__udivdi3+0xec>
c001c2a9:	74 09                	je     c001c2b4 <__udivdi3+0xe4>
c001c2ab:	89 f0                	mov    eax,esi
c001c2ad:	31 db                	xor    ebx,ebx
c001c2af:	e9 43 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2b4:	88 d9                	mov    cl,bl
c001c2b6:	d3 e5                	shl    ebp,cl
c001c2b8:	39 c5                	cmp    ebp,eax
c001c2ba:	73 ef                	jae    c001c2ab <__udivdi3+0xdb>
c001c2bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2bf:	31 db                	xor    ebx,ebx
c001c2c1:	e9 31 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2c6:	66 90                	xchg   ax,ax
c001c2c8:	31 c0                	xor    eax,eax
c001c2ca:	e9 28 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2cf:	90                   	nop

c001c2d0 <__umoddi3>:
c001c2d0:	55                   	push   ebp
c001c2d1:	57                   	push   edi
c001c2d2:	56                   	push   esi
c001c2d3:	53                   	push   ebx
c001c2d4:	83 ec 1c             	sub    esp,0x1c
c001c2d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c2e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2e7:	89 da                	mov    edx,ebx
c001c2e9:	85 c0                	test   eax,eax
c001c2eb:	75 37                	jne    c001c324 <__umoddi3+0x54>
c001c2ed:	39 df                	cmp    edi,ebx
c001c2ef:	76 13                	jbe    c001c304 <__umoddi3+0x34>
c001c2f1:	89 f0                	mov    eax,esi
c001c2f3:	f7 f7                	div    edi
c001c2f5:	89 d0                	mov    eax,edx
c001c2f7:	31 d2                	xor    edx,edx
c001c2f9:	83 c4 1c             	add    esp,0x1c
c001c2fc:	5b                   	pop    ebx
c001c2fd:	5e                   	pop    esi
c001c2fe:	5f                   	pop    edi
c001c2ff:	5d                   	pop    ebp
c001c300:	c3                   	ret    
c001c301:	8d 76 00             	lea    esi,[esi+0x0]
c001c304:	89 fd                	mov    ebp,edi
c001c306:	85 ff                	test   edi,edi
c001c308:	75 0b                	jne    c001c315 <__umoddi3+0x45>
c001c30a:	b8 01 00 00 00       	mov    eax,0x1
c001c30f:	31 d2                	xor    edx,edx
c001c311:	f7 f7                	div    edi
c001c313:	89 c5                	mov    ebp,eax
c001c315:	89 d8                	mov    eax,ebx
c001c317:	31 d2                	xor    edx,edx
c001c319:	f7 f5                	div    ebp
c001c31b:	89 f0                	mov    eax,esi
c001c31d:	f7 f5                	div    ebp
c001c31f:	89 d0                	mov    eax,edx
c001c321:	eb d4                	jmp    c001c2f7 <__umoddi3+0x27>
c001c323:	90                   	nop
c001c324:	89 f1                	mov    ecx,esi
c001c326:	39 d8                	cmp    eax,ebx
c001c328:	76 0a                	jbe    c001c334 <__umoddi3+0x64>
c001c32a:	89 f0                	mov    eax,esi
c001c32c:	83 c4 1c             	add    esp,0x1c
c001c32f:	5b                   	pop    ebx
c001c330:	5e                   	pop    esi
c001c331:	5f                   	pop    edi
c001c332:	5d                   	pop    ebp
c001c333:	c3                   	ret    
c001c334:	0f bd e8             	bsr    ebp,eax
c001c337:	83 f5 1f             	xor    ebp,0x1f
c001c33a:	75 1c                	jne    c001c358 <__umoddi3+0x88>
c001c33c:	39 d8                	cmp    eax,ebx
c001c33e:	72 04                	jb     c001c344 <__umoddi3+0x74>
c001c340:	39 f7                	cmp    edi,esi
c001c342:	77 08                	ja     c001c34c <__umoddi3+0x7c>
c001c344:	89 da                	mov    edx,ebx
c001c346:	29 fe                	sub    esi,edi
c001c348:	19 c2                	sbb    edx,eax
c001c34a:	89 f1                	mov    ecx,esi
c001c34c:	89 c8                	mov    eax,ecx
c001c34e:	83 c4 1c             	add    esp,0x1c
c001c351:	5b                   	pop    ebx
c001c352:	5e                   	pop    esi
c001c353:	5f                   	pop    edi
c001c354:	5d                   	pop    ebp
c001c355:	c3                   	ret    
c001c356:	66 90                	xchg   ax,ax
c001c358:	ba 20 00 00 00       	mov    edx,0x20
c001c35d:	29 ea                	sub    edx,ebp
c001c35f:	89 e9                	mov    ecx,ebp
c001c361:	d3 e0                	shl    eax,cl
c001c363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c367:	89 f8                	mov    eax,edi
c001c369:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c36d:	88 d1                	mov    cl,dl
c001c36f:	d3 e8                	shr    eax,cl
c001c371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c375:	09 c1                	or     ecx,eax
c001c377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c37b:	89 e9                	mov    ecx,ebp
c001c37d:	d3 e7                	shl    edi,cl
c001c37f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c383:	89 d8                	mov    eax,ebx
c001c385:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c389:	88 d1                	mov    cl,dl
c001c38b:	d3 e8                	shr    eax,cl
c001c38d:	89 c7                	mov    edi,eax
c001c38f:	89 e9                	mov    ecx,ebp
c001c391:	d3 e3                	shl    ebx,cl
c001c393:	89 f0                	mov    eax,esi
c001c395:	88 d1                	mov    cl,dl
c001c397:	d3 e8                	shr    eax,cl
c001c399:	09 d8                	or     eax,ebx
c001c39b:	89 e9                	mov    ecx,ebp
c001c39d:	d3 e6                	shl    esi,cl
c001c39f:	89 f3                	mov    ebx,esi
c001c3a1:	89 fa                	mov    edx,edi
c001c3a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3a7:	89 d1                	mov    ecx,edx
c001c3a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3ad:	89 c6                	mov    esi,eax
c001c3af:	89 d7                	mov    edi,edx
c001c3b1:	39 d1                	cmp    ecx,edx
c001c3b3:	72 27                	jb     c001c3dc <__umoddi3+0x10c>
c001c3b5:	74 21                	je     c001c3d8 <__umoddi3+0x108>
c001c3b7:	89 ca                	mov    edx,ecx
c001c3b9:	29 f3                	sub    ebx,esi
c001c3bb:	19 fa                	sbb    edx,edi
c001c3bd:	89 d0                	mov    eax,edx
c001c3bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3c3:	d3 e0                	shl    eax,cl
c001c3c5:	89 e9                	mov    ecx,ebp
c001c3c7:	d3 eb                	shr    ebx,cl
c001c3c9:	09 d8                	or     eax,ebx
c001c3cb:	d3 ea                	shr    edx,cl
c001c3cd:	83 c4 1c             	add    esp,0x1c
c001c3d0:	5b                   	pop    ebx
c001c3d1:	5e                   	pop    esi
c001c3d2:	5f                   	pop    edi
c001c3d3:	5d                   	pop    ebp
c001c3d4:	c3                   	ret    
c001c3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d8:	39 c3                	cmp    ebx,eax
c001c3da:	73 db                	jae    c001c3b7 <__umoddi3+0xe7>
c001c3dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c3e4:	89 d7                	mov    edi,edx
c001c3e6:	89 c6                	mov    esi,eax
c001c3e8:	eb cd                	jmp    c001c3b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c3ea <_init>:
c001c3ea:	55                   	push   ebp
c001c3eb:	89 e5                	mov    ebp,esp
c001c3ed:	e8 02 3d fe ff       	call   c00000f4 <frame_dummy>
c001c3f2:	e8 e5 fa ff ff       	call   c001bedc <__do_global_ctors_aux>
c001c3f7:	5d                   	pop    ebp
c001c3f8:	c3                   	ret    

Disassembly of section .fini:

c001c3f9 <_fini>:
c001c3f9:	55                   	push   ebp
c001c3fa:	89 e5                	mov    ebp,esp
c001c3fc:	e8 83 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c401:	5d                   	pop    ebp
c001c402:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c404 <Computer::~Computer()>:
c001c404:	83 ec 0c             	sub    esp,0xc
c001c407:	ba b8 d6 01 c0       	mov    edx,0xc001d6b8
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	89 10                	mov    DWORD PTR [eax],edx
c001c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	50                   	push   eax
c001c41a:	e8 23 f5 fe ff       	call   c000b942 <Device::~Device()>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	90                   	nop
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c428 <Computer::~Computer()>:
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	83 ec 0c             	sub    esp,0xc
c001c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c432:	e8 cd ff ff ff       	call   c001c404 <Computer::~Computer()>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	68 70 01 00 00       	push   0x170
c001c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c446:	e8 c2 e0 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	83 c4 0c             	add    esp,0xc
c001c451:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c452 <idleCommon()>:
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	fa                   	cli    
c001c456:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c45c:	e8 17 74 ff ff       	call   c0013878 <schedule()>
c001c461:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c466:	48                   	dec    eax
c001c467:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c46c:	75 01                	jne    c001c46f <idleCommon()+0x1d>
c001c46e:	fb                   	sti    
c001c46f:	83 c4 0c             	add    esp,0xc
c001c472:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c474 <LinkedList<UnixFile>::~LinkedList()>:
c001c474:	90                   	nop
c001c475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c476 <LinkedList<UnixFile>::LinkedList()>:
c001c476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c48f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4b6:	90                   	nop
c001c4b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4c0:	75 10                	jne    c001c4d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	68 18 d9 01 c0       	push   0xc001d918
c001c4ca:	e8 b4 3d ff ff       	call   c0010283 <KePanic(char const*)>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4d8:	85 c0                	test   eax,eax
c001c4da:	74 34                	je     c001c510 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	74 29                	je     c001c510 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c507:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c50e:	eb 65                	jmp    c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c514:	8b 00                	mov    eax,DWORD PTR [eax]
c001c516:	85 c0                	test   eax,eax
c001c518:	75 4b                	jne    c001c565 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c521:	85 c0                	test   eax,eax
c001c523:	75 40                	jne    c001c565 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c52d:	89 10                	mov    DWORD PTR [eax],edx
c001c52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c533:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c537:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54f:	85 c0                	test   eax,eax
c001c551:	74 22                	je     c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c553:	83 ec 0c             	sub    esp,0xc
c001c556:	68 3a d9 01 c0       	push   0xc001d93a
c001c55b:	e8 23 3d ff ff       	call   c0010283 <KePanic(char const*)>
c001c560:	83 c4 10             	add    esp,0x10
c001c563:	eb 10                	jmp    c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	68 44 d9 01 c0       	push   0xc001d944
c001c56d:	e8 11 3d ff ff       	call   c0010283 <KePanic(char const*)>
c001c572:	83 c4 10             	add    esp,0x10
c001c575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c579:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57c:	8d 50 01             	lea    edx,[eax+0x1]
c001c57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c583:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c586:	90                   	nop
c001c587:	83 c4 0c             	add    esp,0xc
c001c58a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c58c <LinkedList<UnixFile>::getFirstElement()>:
c001c58c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c590:	8b 00                	mov    eax,DWORD PTR [eax]
c001c592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c594 <LinkedList<UnixFile>::removeFirst()>:
c001c594:	83 ec 0c             	sub    esp,0xc
c001c597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c59d:	85 c0                	test   eax,eax
c001c59f:	75 12                	jne    c001c5b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 50 d9 01 c0       	push   0xc001d950
c001c5a9:	e8 d5 3c ff ff       	call   c0010283 <KePanic(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	eb 7e                	jmp    c001c631 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bd:	85 c0                	test   eax,eax
c001c5bf:	74 10                	je     c001c5d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	68 9b d9 01 c0       	push   0xc001d99b
c001c5c9:	e8 b5 3c ff ff       	call   c0010283 <KePanic(char const*)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5da:	85 c0                	test   eax,eax
c001c5dc:	75 33                	jne    c001c611 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5fa:	83 f8 01             	cmp    eax,0x1
c001c5fd:	74 21                	je     c001c620 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	68 74 d9 01 c0       	push   0xc001d974
c001c607:	e8 77 3c ff ff       	call   c0010283 <KePanic(char const*)>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	eb 0f                	jmp    c001c620 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c615:	8b 00                	mov    eax,DWORD PTR [eax]
c001c617:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	89 10                	mov    DWORD PTR [eax],edx
c001c620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c624:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c627:	8d 50 ff             	lea    edx,[eax-0x1]
c001c62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c631:	83 c4 0c             	add    esp,0xc
c001c634:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c636 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c63a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c63e <DriverlessDevice::~DriverlessDevice()>:
c001c63e:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c001c643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c647:	89 10                	mov    DWORD PTR [eax],edx
c001c649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c64d:	50                   	push   eax
c001c64e:	e8 ef f2 fe ff       	call   c000b942 <Device::~Device()>
c001c653:	83 c4 04             	add    esp,0x4
c001c656:	90                   	nop
c001c657:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c658 <DriverlessDevice::~DriverlessDevice()>:
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	83 ec 0c             	sub    esp,0xc
c001c65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c662:	e8 d7 ff ff ff       	call   c001c63e <DriverlessDevice::~DriverlessDevice()>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	83 ec 08             	sub    esp,0x8
c001c66d:	68 58 01 00 00       	push   0x158
c001c672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c676:	e8 92 de fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	83 c4 0c             	add    esp,0xc
c001c681:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c682 <LinkedList<Device>::addElement(Device*)>:
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c68a:	75 10                	jne    c001c69c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	68 18 d9 01 c0       	push   0xc001d918
c001c694:	e8 ea 3b ff ff       	call   c0010283 <KePanic(char const*)>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6a2:	85 c0                	test   eax,eax
c001c6a4:	74 3a                	je     c001c6e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ad:	85 c0                	test   eax,eax
c001c6af:	74 2f                	je     c001c6e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6de:	eb 68                	jmp    c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e6:	85 c0                	test   eax,eax
c001c6e8:	75 4e                	jne    c001c738 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f1:	85 c0                	test   eax,eax
c001c6f3:	75 43                	jne    c001c738 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fd:	89 10                	mov    DWORD PTR [eax],edx
c001c6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c703:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c707:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c711:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c722:	85 c0                	test   eax,eax
c001c724:	74 22                	je     c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c726:	83 ec 0c             	sub    esp,0xc
c001c729:	68 3a d9 01 c0       	push   0xc001d93a
c001c72e:	e8 50 3b ff ff       	call   c0010283 <KePanic(char const*)>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	eb 10                	jmp    c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	68 44 d9 01 c0       	push   0xc001d944
c001c740:	e8 3e 3b ff ff       	call   c0010283 <KePanic(char const*)>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c74f:	8d 50 01             	lea    edx,[eax+0x1]
c001c752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c756:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c759:	90                   	nop
c001c75a:	83 c4 0c             	add    esp,0xc
c001c75d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c75e <LinkedList<Device>::LinkedList()>:
c001c75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c782:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c797:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c79e:	90                   	nop
c001c79f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a6:	85 c0                	test   eax,eax
c001c7a8:	75 0e                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7b1:	85 c0                	test   eax,eax
c001c7b3:	75 03                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7b5:	b0 01                	mov    al,0x1
c001c7b7:	c3                   	ret    
c001c7b8:	b0 00                	mov    al,0x0
c001c7ba:	90                   	nop
c001c7bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7c4:	83 ec 0c             	sub    esp,0xc
c001c7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7cd:	85 c0                	test   eax,eax
c001c7cf:	75 17                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	68 50 d9 01 c0       	push   0xc001d950
c001c7d9:	e8 a5 3a ff ff       	call   c0010283 <KePanic(char const*)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	e9 92 00 00 00       	jmp    c001c878 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c7e6:	66 90                	xchg   ax,ax
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7f2:	85 c0                	test   eax,eax
c001c7f4:	0f 95 c0             	setne  al
c001c7f7:	84 c0                	test   al,al
c001c7f9:	74 11                	je     c001c80c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c7fb:	83 ec 0c             	sub    esp,0xc
c001c7fe:	68 9b d9 01 c0       	push   0xc001d99b
c001c803:	e8 7b 3a ff ff       	call   c0010283 <KePanic(char const*)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	90                   	nop
c001c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c810:	8b 00                	mov    eax,DWORD PTR [eax]
c001c812:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c815:	85 c0                	test   eax,eax
c001c817:	0f 94 c0             	sete   al
c001c81a:	84 c0                	test   al,al
c001c81c:	74 36                	je     c001c854 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c822:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c837:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c83a:	83 f8 01             	cmp    eax,0x1
c001c83d:	74 25                	je     c001c864 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c83f:	83 ec 0c             	sub    esp,0xc
c001c842:	68 74 d9 01 c0       	push   0xc001d974
c001c847:	e8 37 3a ff ff       	call   c0010283 <KePanic(char const*)>
c001c84c:	83 c4 10             	add    esp,0x10
c001c84f:	eb 13                	jmp    c001c864 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c851:	8d 76 00             	lea    esi,[esi+0x0]
c001c854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c858:	8b 00                	mov    eax,DWORD PTR [eax]
c001c85a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c861:	89 10                	mov    DWORD PTR [eax],edx
c001c863:	90                   	nop
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c86b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c875:	8d 76 00             	lea    esi,[esi+0x0]
c001c878:	83 c4 0c             	add    esp,0xc
c001c87b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c884:	75 12                	jne    c001c898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c886:	83 ec 0c             	sub    esp,0xc
c001c889:	68 18 d9 01 c0       	push   0xc001d918
c001c88e:	e8 f0 39 ff ff       	call   c0010283 <KePanic(char const*)>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	66 90                	xchg   ax,ax
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	74 36                	je     c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8a9:	85 c0                	test   eax,eax
c001c8ab:	74 2b                	je     c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8d4:	eb 6a                	jmp    c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8d6:	66 90                	xchg   ax,ax
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8de:	85 c0                	test   eax,eax
c001c8e0:	75 4e                	jne    c001c930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	75 43                	jne    c001c930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f5:	89 10                	mov    DWORD PTR [eax],edx
c001c8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c909:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c917:	85 c0                	test   eax,eax
c001c919:	74 25                	je     c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c91b:	83 ec 0c             	sub    esp,0xc
c001c91e:	68 3a d9 01 c0       	push   0xc001d93a
c001c923:	e8 5b 39 ff ff       	call   c0010283 <KePanic(char const*)>
c001c928:	83 c4 10             	add    esp,0x10
c001c92b:	eb 13                	jmp    c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c92d:	8d 76 00             	lea    esi,[esi+0x0]
c001c930:	83 ec 0c             	sub    esp,0xc
c001c933:	68 44 d9 01 c0       	push   0xc001d944
c001c938:	e8 46 39 ff ff       	call   c0010283 <KePanic(char const*)>
c001c93d:	83 c4 10             	add    esp,0x10
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c947:	8d 50 01             	lea    edx,[eax+0x1]
c001c94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c951:	90                   	nop
c001c952:	83 c4 0c             	add    esp,0xc
c001c955:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c958 <ACPI::~ACPI()>:
c001c958:	83 ec 0c             	sub    esp,0xc
c001c95b:	ba 94 e5 01 c0       	mov    edx,0xc001e594
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	89 10                	mov    DWORD PTR [eax],edx
c001c966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	50                   	push   eax
c001c96e:	e8 cf ef fe ff       	call   c000b942 <Device::~Device()>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	90                   	nop
c001c977:	83 c4 0c             	add    esp,0xc
c001c97a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c97c <ACPI::~ACPI()>:
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	83 ec 0c             	sub    esp,0xc
c001c982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c986:	e8 cd ff ff ff       	call   c001c958 <ACPI::~ACPI()>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	83 ec 08             	sub    esp,0x8
c001c991:	68 64 12 00 00       	push   0x1264
c001c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c99a:	e8 6e db fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	83 c4 0c             	add    esp,0xc
c001c9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9a8 <LinkedList<Device>::~LinkedList()>:
c001c9a8:	90                   	nop
c001c9a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9ac <LinkedList<Device>::isEmpty()>:
c001c9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9b2:	85 c0                	test   eax,eax
c001c9b4:	75 0e                	jne    c001c9c4 <LinkedList<Device>::isEmpty()+0x18>
c001c9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9bd:	85 c0                	test   eax,eax
c001c9bf:	75 03                	jne    c001c9c4 <LinkedList<Device>::isEmpty()+0x18>
c001c9c1:	b0 01                	mov    al,0x1
c001c9c3:	c3                   	ret    
c001c9c4:	b0 00                	mov    al,0x0
c001c9c6:	90                   	nop
c001c9c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9c8 <LinkedList<Device>::getFirstElement()>:
c001c9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9d0 <LinkedList<Device>::removeFirst()>:
c001c9d0:	83 ec 0c             	sub    esp,0xc
c001c9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9d9:	85 c0                	test   eax,eax
c001c9db:	75 17                	jne    c001c9f4 <LinkedList<Device>::removeFirst()+0x24>
c001c9dd:	83 ec 0c             	sub    esp,0xc
c001c9e0:	68 50 d9 01 c0       	push   0xc001d950
c001c9e5:	e8 99 38 ff ff       	call   c0010283 <KePanic(char const*)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	e9 92 00 00 00       	jmp    c001ca84 <LinkedList<Device>::removeFirst()+0xb4>
c001c9f2:	66 90                	xchg   ax,ax
c001c9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca01:	85 c0                	test   eax,eax
c001ca03:	74 13                	je     c001ca18 <LinkedList<Device>::removeFirst()+0x48>
c001ca05:	83 ec 0c             	sub    esp,0xc
c001ca08:	68 9b d9 01 c0       	push   0xc001d99b
c001ca0d:	e8 71 38 ff ff       	call   c0010283 <KePanic(char const*)>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	8d 76 00             	lea    esi,[esi+0x0]
c001ca18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca1e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca24:	85 c0                	test   eax,eax
c001ca26:	75 34                	jne    c001ca5c <LinkedList<Device>::removeFirst()+0x8c>
c001ca28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca44:	83 f8 01             	cmp    eax,0x1
c001ca47:	74 27                	je     c001ca70 <LinkedList<Device>::removeFirst()+0xa0>
c001ca49:	83 ec 0c             	sub    esp,0xc
c001ca4c:	68 74 d9 01 c0       	push   0xc001d974
c001ca51:	e8 2d 38 ff ff       	call   c0010283 <KePanic(char const*)>
c001ca56:	83 c4 10             	add    esp,0x10
c001ca59:	eb 15                	jmp    c001ca70 <LinkedList<Device>::removeFirst()+0xa0>
c001ca5b:	90                   	nop
c001ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca62:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	89 10                	mov    DWORD PTR [eax],edx
c001ca6e:	66 90                	xchg   ax,ax
c001ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca77:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca81:	8d 76 00             	lea    esi,[esi+0x0]
c001ca84:	83 c4 0c             	add    esp,0xc
c001ca87:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca88 <CPU::~CPU()>:
c001ca88:	83 ec 0c             	sub    esp,0xc
c001ca8b:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c001ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca94:	89 10                	mov    DWORD PTR [eax],edx
c001ca96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	50                   	push   eax
c001ca9e:	e8 9f ee fe ff       	call   c000b942 <Device::~Device()>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	90                   	nop
c001caa7:	83 c4 0c             	add    esp,0xc
c001caaa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001caac <CPU::~CPU()>:
c001caac:	83 ec 0c             	sub    esp,0xc
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab6:	e8 cd ff ff ff       	call   c001ca88 <CPU::~CPU()>
c001cabb:	83 c4 10             	add    esp,0x10
c001cabe:	83 ec 08             	sub    esp,0x8
c001cac1:	68 94 11 00 00       	push   0x1194
c001cac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caca:	e8 3e da fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cacf:	83 c4 10             	add    esp,0x10
c001cad2:	83 c4 0c             	add    esp,0xc
c001cad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cad8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cad8:	90                   	nop
c001cad9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cadc <ThreadControlBlock::ThreadControlBlock()>:
c001cadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caeb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001caf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb01:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb17:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb1f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb23:	90                   	nop
c001cb24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb68:	90                   	nop
c001cb69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb73:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb74 <PCI::~PCI()>:
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c001cb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb80:	89 10                	mov    DWORD PTR [eax],edx
c001cb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb86:	83 ec 0c             	sub    esp,0xc
c001cb89:	50                   	push   eax
c001cb8a:	e8 3d e8 fe ff       	call   c000b3cc <Bus::~Bus()>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	90                   	nop
c001cb93:	83 c4 0c             	add    esp,0xc
c001cb96:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb98 <PCI::~PCI()>:
c001cb98:	83 ec 0c             	sub    esp,0xc
c001cb9b:	83 ec 0c             	sub    esp,0xc
c001cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba2:	e8 cd ff ff ff       	call   c001cb74 <PCI::~PCI()>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	83 ec 08             	sub    esp,0x8
c001cbad:	68 5c 01 00 00       	push   0x15c
c001cbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb6:	e8 52 d9 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	83 c4 0c             	add    esp,0xc
c001cbc1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cbc2 <IDE::~IDE()>:
c001cbc2:	83 ec 0c             	sub    esp,0xc
c001cbc5:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c001cbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbce:	89 10                	mov    DWORD PTR [eax],edx
c001cbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	50                   	push   eax
c001cbd8:	e8 df f1 fe ff       	call   c000bdbc <HardDiskController::~HardDiskController()>
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	90                   	nop
c001cbe1:	83 c4 0c             	add    esp,0xc
c001cbe4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cbe6 <IDE::~IDE()>:
c001cbe6:	83 ec 0c             	sub    esp,0xc
c001cbe9:	83 ec 0c             	sub    esp,0xc
c001cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf0:	e8 cd ff ff ff       	call   c001cbc2 <IDE::~IDE()>
c001cbf5:	83 c4 10             	add    esp,0x10
c001cbf8:	83 ec 08             	sub    esp,0x8
c001cbfb:	68 70 02 00 00       	push   0x270
c001cc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc04:	e8 04 d9 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	83 c4 0c             	add    esp,0xc
c001cc0f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc10 <SATABus::~SATABus()>:
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	89 10                	mov    DWORD PTR [eax],edx
c001cc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	50                   	push   eax
c001cc26:	e8 91 f1 fe ff       	call   c000bdbc <HardDiskController::~HardDiskController()>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	90                   	nop
c001cc2f:	83 c4 0c             	add    esp,0xc
c001cc32:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc34 <SATABus::~SATABus()>:
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	83 ec 0c             	sub    esp,0xc
c001cc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc3e:	e8 cd ff ff ff       	call   c001cc10 <SATABus::~SATABus()>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	83 ec 08             	sub    esp,0x8
c001cc49:	68 64 01 00 00       	push   0x164
c001cc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc52:	e8 b6 d8 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	83 c4 0c             	add    esp,0xc
c001cc5d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc5e <ATA::~ATA()>:
c001cc5e:	83 ec 0c             	sub    esp,0xc
c001cc61:	ba 10 f5 01 c0       	mov    edx,0xc001f510
c001cc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6a:	89 10                	mov    DWORD PTR [eax],edx
c001cc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	50                   	push   eax
c001cc74:	e8 25 f2 fe ff       	call   c000be9e <PhysicalDisk::~PhysicalDisk()>
c001cc79:	83 c4 10             	add    esp,0x10
c001cc7c:	90                   	nop
c001cc7d:	83 c4 0c             	add    esp,0xc
c001cc80:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc82 <ATA::~ATA()>:
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	83 ec 0c             	sub    esp,0xc
c001cc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8c:	e8 cd ff ff ff       	call   c001cc5e <ATA::~ATA()>
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	83 ec 08             	sub    esp,0x8
c001cc97:	68 7c 01 00 00       	push   0x17c
c001cc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca0:	e8 68 d8 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	83 c4 0c             	add    esp,0xc
c001ccab:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccac <ATAPI::~ATAPI()>:
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	ba 58 f5 01 c0       	mov    edx,0xc001f558
c001ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb8:	89 10                	mov    DWORD PTR [eax],edx
c001ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	50                   	push   eax
c001ccc2:	e8 d7 f1 fe ff       	call   c000be9e <PhysicalDisk::~PhysicalDisk()>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	90                   	nop
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ccd0 <ATAPI::~ATAPI()>:
c001ccd0:	83 ec 0c             	sub    esp,0xc
c001ccd3:	83 ec 0c             	sub    esp,0xc
c001ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccda:	e8 cd ff ff ff       	call   c001ccac <ATAPI::~ATAPI()>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	83 ec 08             	sub    esp,0x8
c001cce5:	68 84 01 00 00       	push   0x184
c001ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccee:	e8 1a d8 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	83 c4 0c             	add    esp,0xc
c001ccf9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ccfa <SATA::~SATA()>:
c001ccfa:	83 ec 0c             	sub    esp,0xc
c001ccfd:	ba 0c f6 01 c0       	mov    edx,0xc001f60c
c001cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd06:	89 10                	mov    DWORD PTR [eax],edx
c001cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	50                   	push   eax
c001cd10:	e8 89 f1 fe ff       	call   c000be9e <PhysicalDisk::~PhysicalDisk()>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	90                   	nop
c001cd19:	83 c4 0c             	add    esp,0xc
c001cd1c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd1e <SATA::~SATA()>:
c001cd1e:	83 ec 0c             	sub    esp,0xc
c001cd21:	83 ec 0c             	sub    esp,0xc
c001cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd28:	e8 cd ff ff ff       	call   c001ccfa <SATA::~SATA()>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	83 ec 08             	sub    esp,0x8
c001cd33:	68 7c 01 00 00       	push   0x17c
c001cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3c:	e8 cc d7 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	83 c4 0c             	add    esp,0xc
c001cd47:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd48 <SATAPI::~SATAPI()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	ba 44 f7 01 c0       	mov    edx,0xc001f744
c001cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd54:	89 10                	mov    DWORD PTR [eax],edx
c001cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	50                   	push   eax
c001cd5e:	e8 3b f1 fe ff       	call   c000be9e <PhysicalDisk::~PhysicalDisk()>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	90                   	nop
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd6c <SATAPI::~SATAPI()>:
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	83 ec 0c             	sub    esp,0xc
c001cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd76:	e8 cd ff ff ff       	call   c001cd48 <SATAPI::~SATAPI()>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	83 ec 08             	sub    esp,0x8
c001cd81:	68 84 01 00 00       	push   0x184
c001cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8a:	e8 7e d7 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	83 c4 0c             	add    esp,0xc
c001cd95:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd96 <IOAPIC::~IOAPIC()>:
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	ba 84 f7 01 c0       	mov    edx,0xc001f784
c001cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda2:	89 10                	mov    DWORD PTR [eax],edx
c001cda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	50                   	push   eax
c001cdac:	e8 91 eb fe ff       	call   c000b942 <Device::~Device()>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	90                   	nop
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdba <IOAPIC::~IOAPIC()>:
c001cdba:	83 ec 0c             	sub    esp,0xc
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc4:	e8 cd ff ff ff       	call   c001cd96 <IOAPIC::~IOAPIC()>
c001cdc9:	83 c4 10             	add    esp,0x10
c001cdcc:	83 ec 08             	sub    esp,0x8
c001cdcf:	68 68 01 00 00       	push   0x168
c001cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdd8:	e8 30 d7 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001cddd:	83 c4 10             	add    esp,0x10
c001cde0:	83 c4 0c             	add    esp,0xc
c001cde3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cde4 <APICTimer::~APICTimer()>:
c001cde4:	83 ec 0c             	sub    esp,0xc
c001cde7:	ba cc f7 01 c0       	mov    edx,0xc001f7cc
c001cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf0:	89 10                	mov    DWORD PTR [eax],edx
c001cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf6:	83 ec 0c             	sub    esp,0xc
c001cdf9:	50                   	push   eax
c001cdfa:	e8 81 04 ff ff       	call   c000d280 <Timer::~Timer()>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	90                   	nop
c001ce03:	83 c4 0c             	add    esp,0xc
c001ce06:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce08 <APICTimer::~APICTimer()>:
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	83 ec 0c             	sub    esp,0xc
c001ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce12:	e8 cd ff ff ff       	call   c001cde4 <APICTimer::~APICTimer()>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	83 ec 08             	sub    esp,0x8
c001ce1d:	68 60 01 00 00       	push   0x160
c001ce22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce26:	e8 e2 d6 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	83 c4 0c             	add    esp,0xc
c001ce31:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce34 <PIT::~PIT()>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	ba 1c f8 01 c0       	mov    edx,0xc001f81c
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	89 10                	mov    DWORD PTR [eax],edx
c001ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	50                   	push   eax
c001ce4a:	e8 31 04 ff ff       	call   c000d280 <Timer::~Timer()>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	90                   	nop
c001ce53:	83 c4 0c             	add    esp,0xc
c001ce56:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce58 <PIT::~PIT()>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce62:	e8 cd ff ff ff       	call   c001ce34 <PIT::~PIT()>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	83 ec 08             	sub    esp,0x8
c001ce6d:	68 5c 01 00 00       	push   0x15c
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	e8 92 d6 fe ff       	call   c000a50d <operator delete(void*, unsigned long)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	83 c4 0c             	add    esp,0xc
c001ce81:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 21 e8 01 c0       	mov    esi,0xc001e821
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 3d e8 01 c0       	mov    esi,0xc001e83d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
